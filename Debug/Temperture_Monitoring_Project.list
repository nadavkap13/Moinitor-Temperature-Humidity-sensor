
Temperture_Monitoring_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000103c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000744  08010550  08010550  00020550  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010c94  08010c94  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  08010c94  08010c94  00020c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010c9c  08010c9c  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08010c9c  08010c9c  00020c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08010ca4  08010ca4  00020ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08010cac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034c8  20000200  08010ea8  00030200  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200036c8  08010ea8  000336c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c413  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000060c7  00000000  00000000  0005c63f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002208  00000000  00000000  00062708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fc0  00000000  00000000  00064910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008646  00000000  00000000  000668d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002988c  00000000  00000000  0006ef16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107921  00000000  00000000  000987a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a00c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a468  00000000  00000000  001a0114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010538 	.word	0x08010538

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	08010538 	.word	0x08010538

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <_ZN3CliD1Ev>:
#include "main.h"
class Cli{
public:
	virtual void doCommand(const char * param) = 0;

	virtual ~Cli(){}
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <_ZN3CliD1Ev+0x1c>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4618      	mov	r0, r3
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	08010750 	.word	0x08010750

08000eec <_ZN3CliD0Ev>:
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff ffe9 	bl	8000ecc <_ZN3CliD1Ev>
 8000efa:	2104      	movs	r1, #4
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f00b ffa5 	bl	800ce4c <_ZdlPvj>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <_ZN12CliContainer15RegisterCommandEPKcP3Cli>:
	clicommand_entry commands[20];
	int funcounter = 0;
public:
	CliContainer(){}
	~CliContainer(){}
	void RegisterCommand(const  char* CommandName, Cli * clicommand) {
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
		commands[funcounter].CommandName = CommandName;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	68b9      	ldr	r1, [r7, #8]
 8000f22:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
		commands[funcounter].command = clicommand;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000f2c:	68fa      	ldr	r2, [r7, #12]
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	4413      	add	r3, r2
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	605a      	str	r2, [r3, #4]
		funcounter++;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000f3c:	1c5a      	adds	r2, r3, #1
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	}
 8000f44:	bf00      	nop
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <_ZN3CliC1Ev>:
class Cli{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <_ZN3CliC1Ev+0x1c>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4618      	mov	r0, r3
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	08010750 	.word	0x08010750

08000f70 <_ZN5ledOnC1EP3LED>:
extern BUZZER buzzer;
class ledOn : public Cli{
private:
	LED * _led;
public:
	ledOn(LED * led){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ffe7 	bl	8000f50 <_ZN3CliC1Ev>
 8000f82:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <_ZN5ledOnC1EP3LED+0x28>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	601a      	str	r2, [r3, #0]
		_led = led;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
	}
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4618      	mov	r0, r3
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	0801073c 	.word	0x0801073c

08000f9c <_ZN5ledOn9doCommandEPKc>:
	void doCommand(const char * param) override{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
		_led->Led_On();
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 fcbe 	bl	800192c <_ZN3LED6Led_OnEv>
	}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <_ZN6ledOffC1EP3LED>:
};
class ledOff : public Cli{
private:
	LED * _led;
public:
	ledOff(LED * led){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ffc3 	bl	8000f50 <_ZN3CliC1Ev>
 8000fca:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <_ZN6ledOffC1EP3LED+0x28>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	601a      	str	r2, [r3, #0]
		_led = led;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	683a      	ldr	r2, [r7, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
	}
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	08010728 	.word	0x08010728

08000fe4 <_ZN6ledOff9doCommandEPKc>:
	void doCommand(const char * param) override{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
		_led->Led_Off();
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 fcad 	bl	8001952 <_ZN3LED7Led_OffEv>
	}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <_ZN8ledBlinkC1EP3LED>:
};
class ledBlink : public Cli{
private:
	LED * _led;
public:
	ledBlink(LED * led){
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ff9f 	bl	8000f50 <_ZN3CliC1Ev>
 8001012:	4a05      	ldr	r2, [pc, #20]	; (8001028 <_ZN8ledBlinkC1EP3LED+0x28>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	601a      	str	r2, [r3, #0]
		_led = led;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	683a      	ldr	r2, [r7, #0]
 800101c:	605a      	str	r2, [r3, #4]
	}
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	08010714 	.word	0x08010714

0800102c <_ZN8ledBlink9doCommandEPKc>:
	void doCommand(const char * param) override{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
		_led->Led_Blink();
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	4618      	mov	r0, r3
 800103c:	f000 fc9c 	bl	8001978 <_ZN3LED9Led_BlinkEv>
	}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <_ZN8rtcstartC1EP4_RTC>:

class rtcstart : public Cli{
private:
	_RTC * _rtc;
public:
	rtcstart(_RTC * rtc){
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff7b 	bl	8000f50 <_ZN3CliC1Ev>
 800105a:	4a05      	ldr	r2, [pc, #20]	; (8001070 <_ZN8rtcstartC1EP4_RTC+0x28>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	601a      	str	r2, [r3, #0]
		_rtc = rtc;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	605a      	str	r2, [r3, #4]
	}
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	08010700 	.word	0x08010700

08001074 <_ZN8rtcstart9doCommandEPKc>:
	void doCommand(const char * param) override{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]

		_rtc->rtcStart();
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	4618      	mov	r0, r3
 8001084:	f000 fcba 	bl	80019fc <_ZN4_RTC8rtcStartEv>
	}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <_ZN10rtcgettimeC1EP4_RTC>:
};
class rtcgettime : public Cli{
private:
	_RTC * _rtc;
public:
	rtcgettime(_RTC * rtc){
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff57 	bl	8000f50 <_ZN3CliC1Ev>
 80010a2:	4a05      	ldr	r2, [pc, #20]	; (80010b8 <_ZN10rtcgettimeC1EP4_RTC+0x28>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	601a      	str	r2, [r3, #0]
		_rtc = rtc;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	683a      	ldr	r2, [r7, #0]
 80010ac:	605a      	str	r2, [r3, #4]
	}
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	080106ec 	.word	0x080106ec

080010bc <_ZN10rtcgettime9doCommandEPKc>:
	void doCommand(const char * param) override{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]

		_rtc->rtcGetTime();
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 fd3e 	bl	8001b4c <_ZN4_RTC10rtcGetTimeEv>

	}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <_ZN10rtcsettimeC1EP4_RTC>:
};
class rtcsettime : public Cli{
private:
	_RTC * _rtc;
public:
	rtcsettime(_RTC * rtc){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff33 	bl	8000f50 <_ZN3CliC1Ev>
 80010ea:	4a05      	ldr	r2, [pc, #20]	; (8001100 <_ZN10rtcsettimeC1EP4_RTC+0x28>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	601a      	str	r2, [r3, #0]
		_rtc = rtc;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	605a      	str	r2, [r3, #4]
	}
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	080106d8 	.word	0x080106d8

08001104 <_ZN10rtcsettime9doCommandEPKc>:
	void doCommand(const char * param) override{
 8001104:	b580      	push	{r7, lr}
 8001106:	b098      	sub	sp, #96	; 0x60
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]

		char * token;
		char s[3] = ":";
 800110e:	4b3b      	ldr	r3, [pc, #236]	; (80011fc <_ZN10rtcsettime9doCommandEPKc+0xf8>)
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8001116:	2300      	movs	r3, #0
 8001118:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
		char temp[50];
		strcpy(temp,param);
 800111c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001120:	6839      	ldr	r1, [r7, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f00c fdbd 	bl	800dca2 <strcpy>
		DateTime tempdate;

		token = strtok(temp, s);
 8001128:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800112c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001130:	4611      	mov	r1, r2
 8001132:	4618      	mov	r0, r3
 8001134:	f00c fdbe 	bl	800dcb4 <strtok>
 8001138:	65f8      	str	r0, [r7, #92]	; 0x5c
		tempdate.hours = atoi(token);
 800113a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800113c:	f00b febf 	bl	800cebe <atoi>
 8001140:	4603      	mov	r3, r0
 8001142:	613b      	str	r3, [r7, #16]
		token = strtok(NULL, s);
 8001144:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001148:	4619      	mov	r1, r3
 800114a:	2000      	movs	r0, #0
 800114c:	f00c fdb2 	bl	800dcb4 <strtok>
 8001150:	65f8      	str	r0, [r7, #92]	; 0x5c

		tempdate.min = atoi(token);
 8001152:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001154:	f00b feb3 	bl	800cebe <atoi>
 8001158:	4603      	mov	r3, r0
 800115a:	60fb      	str	r3, [r7, #12]
		token = strtok(NULL, s);
 800115c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001160:	4619      	mov	r1, r3
 8001162:	2000      	movs	r0, #0
 8001164:	f00c fda6 	bl	800dcb4 <strtok>
 8001168:	65f8      	str	r0, [r7, #92]	; 0x5c

		tempdate.sec = atoi(token);
 800116a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800116c:	f00b fea7 	bl	800cebe <atoi>
 8001170:	4603      	mov	r3, r0
 8001172:	60bb      	str	r3, [r7, #8]
		token = strtok(NULL, s);
 8001174:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001178:	4619      	mov	r1, r3
 800117a:	2000      	movs	r0, #0
 800117c:	f00c fd9a 	bl	800dcb4 <strtok>
 8001180:	65f8      	str	r0, [r7, #92]	; 0x5c

		tempdate.weekDay = atoi(token);
 8001182:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001184:	f00b fe9b 	bl	800cebe <atoi>
 8001188:	4603      	mov	r3, r0
 800118a:	617b      	str	r3, [r7, #20]
		token = strtok(NULL, s);
 800118c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001190:	4619      	mov	r1, r3
 8001192:	2000      	movs	r0, #0
 8001194:	f00c fd8e 	bl	800dcb4 <strtok>
 8001198:	65f8      	str	r0, [r7, #92]	; 0x5c

		tempdate.day = atoi(token);
 800119a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800119c:	f00b fe8f 	bl	800cebe <atoi>
 80011a0:	4603      	mov	r3, r0
 80011a2:	61bb      	str	r3, [r7, #24]
		token = strtok(NULL, s);
 80011a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011a8:	4619      	mov	r1, r3
 80011aa:	2000      	movs	r0, #0
 80011ac:	f00c fd82 	bl	800dcb4 <strtok>
 80011b0:	65f8      	str	r0, [r7, #92]	; 0x5c

		tempdate.month = atoi(token);
 80011b2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80011b4:	f00b fe83 	bl	800cebe <atoi>
 80011b8:	4603      	mov	r3, r0
 80011ba:	61fb      	str	r3, [r7, #28]
		token = strtok(NULL, s);
 80011bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011c0:	4619      	mov	r1, r3
 80011c2:	2000      	movs	r0, #0
 80011c4:	f00c fd76 	bl	800dcb4 <strtok>
 80011c8:	65f8      	str	r0, [r7, #92]	; 0x5c

		tempdate.year = atoi(token);
 80011ca:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80011cc:	f00b fe77 	bl	800cebe <atoi>
 80011d0:	4603      	mov	r3, r0
 80011d2:	623b      	str	r3, [r7, #32]
		token = strtok(NULL, s);
 80011d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011d8:	4619      	mov	r1, r3
 80011da:	2000      	movs	r0, #0
 80011dc:	f00c fd6a 	bl	800dcb4 <strtok>
 80011e0:	65f8      	str	r0, [r7, #92]	; 0x5c




		_rtc->rtcSetTime(&tempdate);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f107 0208 	add.w	r2, r7, #8
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f000 fd2b 	bl	8001c48 <_ZN4_RTC10rtcSetTimeEP9DateTime_>
	}
 80011f2:	bf00      	nop
 80011f4:	3760      	adds	r7, #96	; 0x60
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	08010550 	.word	0x08010550

08001200 <_ZN7rtcstopC1EP4_RTC>:
};
class rtcstop : public Cli{
private:
	_RTC * _rtc;
public:
	rtcstop(_RTC * rtc){
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fe9f 	bl	8000f50 <_ZN3CliC1Ev>
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <_ZN7rtcstopC1EP4_RTC+0x28>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	601a      	str	r2, [r3, #0]
		_rtc = rtc;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	683a      	ldr	r2, [r7, #0]
 800121c:	605a      	str	r2, [r3, #4]
	}
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	080106c4 	.word	0x080106c4

0800122c <_ZN7rtcstop9doCommandEPKc>:
	void doCommand(const char * param) override{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]

		_rtc->rtcStop();
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	4618      	mov	r0, r3
 800123c:	f000 fc0d 	bl	8001a5a <_ZN4_RTC7rtcStopEv>
	}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <_ZN8buzzeronC1EP6BUZZER>:
};
class buzzeron : public Cli{
private:
	BUZZER * _buzzer;
public:
	buzzeron(BUZZER * buzzer){
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fe7b 	bl	8000f50 <_ZN3CliC1Ev>
 800125a:	4a05      	ldr	r2, [pc, #20]	; (8001270 <_ZN8buzzeronC1EP6BUZZER+0x28>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	601a      	str	r2, [r3, #0]
		_buzzer = buzzer;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	605a      	str	r2, [r3, #4]
	}
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	080106b0 	.word	0x080106b0

08001274 <_ZN8buzzeron9doCommandEPKc>:
	void doCommand(const char * param) override{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
		_buzzer->buzzerStartPlay();
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	4618      	mov	r0, r3
 8001284:	f001 f960 	bl	8002548 <_ZN6BUZZER15buzzerStartPlayEv>
	}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <_ZN9buzzeroffC1EP6BUZZER>:
};
class buzzeroff : public Cli{
private:
	BUZZER * _buzzer;
public:
	buzzeroff(BUZZER * buzzer){
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fe57 	bl	8000f50 <_ZN3CliC1Ev>
 80012a2:	4a05      	ldr	r2, [pc, #20]	; (80012b8 <_ZN9buzzeroffC1EP6BUZZER+0x28>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	601a      	str	r2, [r3, #0]
		_buzzer = buzzer;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	605a      	str	r2, [r3, #4]
	}
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	0801069c 	.word	0x0801069c

080012bc <_ZN9buzzeroff9doCommandEPKc>:
	void doCommand(const char * param) override{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
		_buzzer->buzzerStopPlay();
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f001 f954 	bl	8002578 <_ZN6BUZZER14buzzerStopPlayEv>
	}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <_ZN12CliContainer16initCLIcontainerEv>:
	void doCommand(const char * param) override{
		int _param = atoi(param);
		_monitor->SetCriticalValue(_param);
	}
};
void CliContainer::initCLIcontainer(){
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	container.RegisterCommand("ledon",new ledOn(&ledblue));
 80012e0:	2008      	movs	r0, #8
 80012e2:	f00b fdb5 	bl	800ce50 <_Znwj>
 80012e6:	4603      	mov	r3, r0
 80012e8:	461c      	mov	r4, r3
 80012ea:	493e      	ldr	r1, [pc, #248]	; (80013e4 <_ZN12CliContainer16initCLIcontainerEv+0x10c>)
 80012ec:	4620      	mov	r0, r4
 80012ee:	f7ff fe3f 	bl	8000f70 <_ZN5ledOnC1EP3LED>
 80012f2:	4622      	mov	r2, r4
 80012f4:	493c      	ldr	r1, [pc, #240]	; (80013e8 <_ZN12CliContainer16initCLIcontainerEv+0x110>)
 80012f6:	483d      	ldr	r0, [pc, #244]	; (80013ec <_ZN12CliContainer16initCLIcontainerEv+0x114>)
 80012f8:	f7ff fe08 	bl	8000f0c <_ZN12CliContainer15RegisterCommandEPKcP3Cli>
	container.RegisterCommand("ledoff",new ledOff(&ledblue));
 80012fc:	2008      	movs	r0, #8
 80012fe:	f00b fda7 	bl	800ce50 <_Znwj>
 8001302:	4603      	mov	r3, r0
 8001304:	461c      	mov	r4, r3
 8001306:	4937      	ldr	r1, [pc, #220]	; (80013e4 <_ZN12CliContainer16initCLIcontainerEv+0x10c>)
 8001308:	4620      	mov	r0, r4
 800130a:	f7ff fe55 	bl	8000fb8 <_ZN6ledOffC1EP3LED>
 800130e:	4622      	mov	r2, r4
 8001310:	4937      	ldr	r1, [pc, #220]	; (80013f0 <_ZN12CliContainer16initCLIcontainerEv+0x118>)
 8001312:	4836      	ldr	r0, [pc, #216]	; (80013ec <_ZN12CliContainer16initCLIcontainerEv+0x114>)
 8001314:	f7ff fdfa 	bl	8000f0c <_ZN12CliContainer15RegisterCommandEPKcP3Cli>
	container.RegisterCommand("ledblink",new ledBlink(&ledblue));
 8001318:	2008      	movs	r0, #8
 800131a:	f00b fd99 	bl	800ce50 <_Znwj>
 800131e:	4603      	mov	r3, r0
 8001320:	461c      	mov	r4, r3
 8001322:	4930      	ldr	r1, [pc, #192]	; (80013e4 <_ZN12CliContainer16initCLIcontainerEv+0x10c>)
 8001324:	4620      	mov	r0, r4
 8001326:	f7ff fe6b 	bl	8001000 <_ZN8ledBlinkC1EP3LED>
 800132a:	4622      	mov	r2, r4
 800132c:	4931      	ldr	r1, [pc, #196]	; (80013f4 <_ZN12CliContainer16initCLIcontainerEv+0x11c>)
 800132e:	482f      	ldr	r0, [pc, #188]	; (80013ec <_ZN12CliContainer16initCLIcontainerEv+0x114>)
 8001330:	f7ff fdec 	bl	8000f0c <_ZN12CliContainer15RegisterCommandEPKcP3Cli>
	container.RegisterCommand("settime",new rtcsettime(&rtc));
 8001334:	2008      	movs	r0, #8
 8001336:	f00b fd8b 	bl	800ce50 <_Znwj>
 800133a:	4603      	mov	r3, r0
 800133c:	461c      	mov	r4, r3
 800133e:	492e      	ldr	r1, [pc, #184]	; (80013f8 <_ZN12CliContainer16initCLIcontainerEv+0x120>)
 8001340:	4620      	mov	r0, r4
 8001342:	f7ff fec9 	bl	80010d8 <_ZN10rtcsettimeC1EP4_RTC>
 8001346:	4622      	mov	r2, r4
 8001348:	492c      	ldr	r1, [pc, #176]	; (80013fc <_ZN12CliContainer16initCLIcontainerEv+0x124>)
 800134a:	4828      	ldr	r0, [pc, #160]	; (80013ec <_ZN12CliContainer16initCLIcontainerEv+0x114>)
 800134c:	f7ff fdde 	bl	8000f0c <_ZN12CliContainer15RegisterCommandEPKcP3Cli>
	container.RegisterCommand("gettime",new rtcgettime(&rtc));
 8001350:	2008      	movs	r0, #8
 8001352:	f00b fd7d 	bl	800ce50 <_Znwj>
 8001356:	4603      	mov	r3, r0
 8001358:	461c      	mov	r4, r3
 800135a:	4927      	ldr	r1, [pc, #156]	; (80013f8 <_ZN12CliContainer16initCLIcontainerEv+0x120>)
 800135c:	4620      	mov	r0, r4
 800135e:	f7ff fe97 	bl	8001090 <_ZN10rtcgettimeC1EP4_RTC>
 8001362:	4622      	mov	r2, r4
 8001364:	4926      	ldr	r1, [pc, #152]	; (8001400 <_ZN12CliContainer16initCLIcontainerEv+0x128>)
 8001366:	4821      	ldr	r0, [pc, #132]	; (80013ec <_ZN12CliContainer16initCLIcontainerEv+0x114>)
 8001368:	f7ff fdd0 	bl	8000f0c <_ZN12CliContainer15RegisterCommandEPKcP3Cli>
	container.RegisterCommand("rtcstart",new rtcstart(&rtc));
 800136c:	2008      	movs	r0, #8
 800136e:	f00b fd6f 	bl	800ce50 <_Znwj>
 8001372:	4603      	mov	r3, r0
 8001374:	461c      	mov	r4, r3
 8001376:	4920      	ldr	r1, [pc, #128]	; (80013f8 <_ZN12CliContainer16initCLIcontainerEv+0x120>)
 8001378:	4620      	mov	r0, r4
 800137a:	f7ff fe65 	bl	8001048 <_ZN8rtcstartC1EP4_RTC>
 800137e:	4622      	mov	r2, r4
 8001380:	4920      	ldr	r1, [pc, #128]	; (8001404 <_ZN12CliContainer16initCLIcontainerEv+0x12c>)
 8001382:	481a      	ldr	r0, [pc, #104]	; (80013ec <_ZN12CliContainer16initCLIcontainerEv+0x114>)
 8001384:	f7ff fdc2 	bl	8000f0c <_ZN12CliContainer15RegisterCommandEPKcP3Cli>
	container.RegisterCommand("rtcstop",new rtcstop(&rtc));
 8001388:	2008      	movs	r0, #8
 800138a:	f00b fd61 	bl	800ce50 <_Znwj>
 800138e:	4603      	mov	r3, r0
 8001390:	461c      	mov	r4, r3
 8001392:	4919      	ldr	r1, [pc, #100]	; (80013f8 <_ZN12CliContainer16initCLIcontainerEv+0x120>)
 8001394:	4620      	mov	r0, r4
 8001396:	f7ff ff33 	bl	8001200 <_ZN7rtcstopC1EP4_RTC>
 800139a:	4622      	mov	r2, r4
 800139c:	491a      	ldr	r1, [pc, #104]	; (8001408 <_ZN12CliContainer16initCLIcontainerEv+0x130>)
 800139e:	4813      	ldr	r0, [pc, #76]	; (80013ec <_ZN12CliContainer16initCLIcontainerEv+0x114>)
 80013a0:	f7ff fdb4 	bl	8000f0c <_ZN12CliContainer15RegisterCommandEPKcP3Cli>
	container.RegisterCommand("play",new buzzeron(&buzzer));
 80013a4:	2008      	movs	r0, #8
 80013a6:	f00b fd53 	bl	800ce50 <_Znwj>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461c      	mov	r4, r3
 80013ae:	4917      	ldr	r1, [pc, #92]	; (800140c <_ZN12CliContainer16initCLIcontainerEv+0x134>)
 80013b0:	4620      	mov	r0, r4
 80013b2:	f7ff ff49 	bl	8001248 <_ZN8buzzeronC1EP6BUZZER>
 80013b6:	4622      	mov	r2, r4
 80013b8:	4915      	ldr	r1, [pc, #84]	; (8001410 <_ZN12CliContainer16initCLIcontainerEv+0x138>)
 80013ba:	480c      	ldr	r0, [pc, #48]	; (80013ec <_ZN12CliContainer16initCLIcontainerEv+0x114>)
 80013bc:	f7ff fda6 	bl	8000f0c <_ZN12CliContainer15RegisterCommandEPKcP3Cli>
	container.RegisterCommand("stop",new buzzeroff(&buzzer));
 80013c0:	2008      	movs	r0, #8
 80013c2:	f00b fd45 	bl	800ce50 <_Znwj>
 80013c6:	4603      	mov	r3, r0
 80013c8:	461c      	mov	r4, r3
 80013ca:	4910      	ldr	r1, [pc, #64]	; (800140c <_ZN12CliContainer16initCLIcontainerEv+0x134>)
 80013cc:	4620      	mov	r0, r4
 80013ce:	f7ff ff5f 	bl	8001290 <_ZN9buzzeroffC1EP6BUZZER>
 80013d2:	4622      	mov	r2, r4
 80013d4:	490f      	ldr	r1, [pc, #60]	; (8001414 <_ZN12CliContainer16initCLIcontainerEv+0x13c>)
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <_ZN12CliContainer16initCLIcontainerEv+0x114>)
 80013d8:	f7ff fd98 	bl	8000f0c <_ZN12CliContainer15RegisterCommandEPKcP3Cli>
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd90      	pop	{r4, r7, pc}
 80013e4:	20000598 	.word	0x20000598
 80013e8:	08010554 	.word	0x08010554
 80013ec:	200004f4 	.word	0x200004f4
 80013f0:	0801055c 	.word	0x0801055c
 80013f4:	08010564 	.word	0x08010564
 80013f8:	200004e8 	.word	0x200004e8
 80013fc:	08010570 	.word	0x08010570
 8001400:	08010578 	.word	0x08010578
 8001404:	08010580 	.word	0x08010580
 8001408:	0801058c 	.word	0x0801058c
 800140c:	200005ac 	.word	0x200005ac
 8001410:	08010594 	.word	0x08010594
 8001414:	0801059c 	.word	0x0801059c

08001418 <_ZN9buzzeroffD1Ev>:
class buzzeroff : public Cli{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	4a05      	ldr	r2, [pc, #20]	; (8001438 <_ZN9buzzeroffD1Ev+0x20>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fd4f 	bl	8000ecc <_ZN3CliD1Ev>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	0801069c 	.word	0x0801069c

0800143c <_ZN9buzzeroffD0Ev>:
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ffe7 	bl	8001418 <_ZN9buzzeroffD1Ev>
 800144a:	2108      	movs	r1, #8
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f00b fcfd 	bl	800ce4c <_ZdlPvj>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <_ZN8buzzeronD1Ev>:
class buzzeron : public Cli{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	4a05      	ldr	r2, [pc, #20]	; (800147c <_ZN8buzzeronD1Ev+0x20>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fd2d 	bl	8000ecc <_ZN3CliD1Ev>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4618      	mov	r0, r3
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	080106b0 	.word	0x080106b0

08001480 <_ZN8buzzeronD0Ev>:
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff ffe7 	bl	800145c <_ZN8buzzeronD1Ev>
 800148e:	2108      	movs	r1, #8
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f00b fcdb 	bl	800ce4c <_ZdlPvj>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <_ZN7rtcstopD1Ev>:
class rtcstop : public Cli{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <_ZN7rtcstopD1Ev+0x20>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fd0b 	bl	8000ecc <_ZN3CliD1Ev>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	080106c4 	.word	0x080106c4

080014c4 <_ZN7rtcstopD0Ev>:
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff ffe7 	bl	80014a0 <_ZN7rtcstopD1Ev>
 80014d2:	2108      	movs	r1, #8
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f00b fcb9 	bl	800ce4c <_ZdlPvj>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4618      	mov	r0, r3
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <_ZN10rtcsettimeD1Ev>:
class rtcsettime : public Cli{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	4a05      	ldr	r2, [pc, #20]	; (8001504 <_ZN10rtcsettimeD1Ev+0x20>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fce9 	bl	8000ecc <_ZN3CliD1Ev>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4618      	mov	r0, r3
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	080106d8 	.word	0x080106d8

08001508 <_ZN10rtcsettimeD0Ev>:
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff ffe7 	bl	80014e4 <_ZN10rtcsettimeD1Ev>
 8001516:	2108      	movs	r1, #8
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f00b fc97 	bl	800ce4c <_ZdlPvj>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4618      	mov	r0, r3
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <_ZN10rtcgettimeD1Ev>:
class rtcgettime : public Cli{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	4a05      	ldr	r2, [pc, #20]	; (8001548 <_ZN10rtcgettimeD1Ev+0x20>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fcc7 	bl	8000ecc <_ZN3CliD1Ev>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	080106ec 	.word	0x080106ec

0800154c <_ZN10rtcgettimeD0Ev>:
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff ffe7 	bl	8001528 <_ZN10rtcgettimeD1Ev>
 800155a:	2108      	movs	r1, #8
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f00b fc75 	bl	800ce4c <_ZdlPvj>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <_ZN8rtcstartD1Ev>:
class rtcstart : public Cli{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	4a05      	ldr	r2, [pc, #20]	; (800158c <_ZN8rtcstartD1Ev+0x20>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fca5 	bl	8000ecc <_ZN3CliD1Ev>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	08010700 	.word	0x08010700

08001590 <_ZN8rtcstartD0Ev>:
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff ffe7 	bl	800156c <_ZN8rtcstartD1Ev>
 800159e:	2108      	movs	r1, #8
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f00b fc53 	bl	800ce4c <_ZdlPvj>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4618      	mov	r0, r3
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <_ZN8ledBlinkD1Ev>:
class ledBlink : public Cli{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	4a05      	ldr	r2, [pc, #20]	; (80015d0 <_ZN8ledBlinkD1Ev+0x20>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fc83 	bl	8000ecc <_ZN3CliD1Ev>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	08010714 	.word	0x08010714

080015d4 <_ZN8ledBlinkD0Ev>:
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff ffe7 	bl	80015b0 <_ZN8ledBlinkD1Ev>
 80015e2:	2108      	movs	r1, #8
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f00b fc31 	bl	800ce4c <_ZdlPvj>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <_ZN6ledOffD1Ev>:
class ledOff : public Cli{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	4a05      	ldr	r2, [pc, #20]	; (8001614 <_ZN6ledOffD1Ev+0x20>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fc61 	bl	8000ecc <_ZN3CliD1Ev>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	08010728 	.word	0x08010728

08001618 <_ZN6ledOffD0Ev>:
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ffe7 	bl	80015f4 <_ZN6ledOffD1Ev>
 8001626:	2108      	movs	r1, #8
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f00b fc0f 	bl	800ce4c <_ZdlPvj>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <_ZN5ledOnD1Ev>:
class ledOn : public Cli{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	4a05      	ldr	r2, [pc, #20]	; (8001658 <_ZN5ledOnD1Ev+0x20>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff fc3f 	bl	8000ecc <_ZN3CliD1Ev>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4618      	mov	r0, r3
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	0801073c 	.word	0x0801073c

0800165c <_ZN5ledOnD0Ev>:
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff ffe7 	bl	8001638 <_ZN5ledOnD1Ev>
 800166a:	2108      	movs	r1, #8
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f00b fbed 	bl	800ce4c <_ZdlPvj>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4618      	mov	r0, r3
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <_ZN3DHTC1EP12GPIO_TypeDeft>:

GPIO_InitTypeDef gpioStruct;
static uint8_t DHT_data[5];
extern TIM_HandleTypeDef htim1;

DHT::DHT(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	4613      	mov	r3, r2
 8001688:	80fb      	strh	r3, [r7, #6]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2200      	movs	r2, #0
 800168e:	615a      	str	r2, [r3, #20]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2200      	movs	r2, #0
 8001694:	761a      	strb	r2, [r3, #24]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2200      	movs	r2, #0
 800169a:	765a      	strb	r2, [r3, #25]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2200      	movs	r2, #0
 80016a0:	769a      	strb	r2, [r3, #26]
	_GPIOx = GPIOx;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	601a      	str	r2, [r3, #0]
	_GPIO_Pin = GPIO_Pin;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	88fa      	ldrh	r2, [r7, #6]
 80016ac:	809a      	strh	r2, [r3, #4]
	dhtPin = WAKING;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	719a      	strb	r2, [r3, #6]
	bitcount=0;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2200      	movs	r2, #0
 80016b8:	611a      	str	r2, [r3, #16]

}
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	4618      	mov	r0, r3
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <_ZN3DHT11setGpioExtiEv>:

 void DHT::setGpioExti()
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpioStruct = {0};
 80016d0:	f107 030c 	add.w	r3, r7, #12
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
	gpioStruct.Pin = _GPIO_Pin;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	889b      	ldrh	r3, [r3, #4]
 80016e4:	60fb      	str	r3, [r7, #12]
	gpioStruct.Mode = GPIO_MODE_IT_FALLING;
 80016e6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80016ea:	613b      	str	r3, [r7, #16]
	gpioStruct.Pull = GPIO_PULLUP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(_GPIOx, &gpioStruct);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f107 020c 	add.w	r2, r7, #12
 80016f8:	4611      	mov	r1, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f001 fe76 	bl	80033ec <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001700:	2017      	movs	r0, #23
 8001702:	f001 fde5 	bl	80032d0 <HAL_NVIC_EnableIRQ>
}
 8001706:	bf00      	nop
 8001708:	3720      	adds	r7, #32
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <_ZN3DHT13Dht_readAsyncEv>:

void DHT::Dht_readAsync()
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpioStruct;
	gpioStruct.Pin = pin_4_Pin;
 8001718:	2320      	movs	r3, #32
 800171a:	60fb      	str	r3, [r7, #12]
	gpioStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171c:	2301      	movs	r3, #1
 800171e:	613b      	str	r3, [r7, #16]
	gpioStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]
	gpioStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(pin_4_GPIO_Port, &gpioStruct);
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	4619      	mov	r1, r3
 800172e:	480b      	ldr	r0, [pc, #44]	; (800175c <_ZN3DHT13Dht_readAsyncEv+0x4c>)
 8001730:	f001 fe5c 	bl	80033ec <HAL_GPIO_Init>

	HAL_GPIO_WritePin(pin_4_GPIO_Port, pin_4_Pin,GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	2120      	movs	r1, #32
 8001738:	4808      	ldr	r0, [pc, #32]	; (800175c <_ZN3DHT13Dht_readAsyncEv+0x4c>)
 800173a:	f002 f819 	bl	8003770 <HAL_GPIO_WritePin>
	HAL_Delay(18);
 800173e:	2012      	movs	r0, #18
 8001740:	f001 fcce 	bl	80030e0 <HAL_Delay>
	HAL_GPIO_WritePin(pin_4_GPIO_Port, pin_4_Pin,GPIO_PIN_SET);
 8001744:	2201      	movs	r2, #1
 8001746:	2120      	movs	r1, #32
 8001748:	4804      	ldr	r0, [pc, #16]	; (800175c <_ZN3DHT13Dht_readAsyncEv+0x4c>)
 800174a:	f002 f811 	bl	8003770 <HAL_GPIO_WritePin>
	setGpioExti();
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff ffba 	bl	80016c8 <_ZN3DHT11setGpioExtiEv>

}
 8001754:	bf00      	nop
 8001756:	3720      	adds	r7, #32
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	48000400 	.word	0x48000400

08001760 <_ZN3DHT19Dht_onGpioInterruptEt>:

void DHT::Dht_onGpioInterrupt(uint16_t pin)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	807b      	strh	r3, [r7, #2]
	uint32_t counter;
	if(_GPIO_Pin==pin){
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	889b      	ldrh	r3, [r3, #4]
 8001770:	887a      	ldrh	r2, [r7, #2]
 8001772:	429a      	cmp	r2, r3
 8001774:	f040 8086 	bne.w	8001884 <_ZN3DHT19Dht_onGpioInterruptEt+0x124>
		switch (dhtPin){
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	799b      	ldrb	r3, [r3, #6]
 800177c:	2b04      	cmp	r3, #4
 800177e:	d87d      	bhi.n	800187c <_ZN3DHT19Dht_onGpioInterruptEt+0x11c>
 8001780:	a201      	add	r2, pc, #4	; (adr r2, 8001788 <_ZN3DHT19Dht_onGpioInterruptEt+0x28>)
 8001782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001786:	bf00      	nop
 8001788:	0800179d 	.word	0x0800179d
 800178c:	080017a5 	.word	0x080017a5
 8001790:	080017ad 	.word	0x080017ad
 8001794:	080017bd 	.word	0x080017bd
 8001798:	08001875 	.word	0x08001875
		case WAKING:
			dhtPin=WAIT_RESPONSE_START;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	719a      	strb	r2, [r3, #6]
			break;
 80017a2:	e06b      	b.n	800187c <_ZN3DHT19Dht_onGpioInterruptEt+0x11c>
		case WAIT_RESPONSE_START:
			dhtPin=WAIT_RESPONSE_STOP;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2202      	movs	r2, #2
 80017a8:	719a      	strb	r2, [r3, #6]
			break;
 80017aa:	e067      	b.n	800187c <_ZN3DHT19Dht_onGpioInterruptEt+0x11c>
		case WAIT_RESPONSE_STOP:
			counter = __HAL_TIM_GET_COUNTER(&htim1);
 80017ac:	4b38      	ldr	r3, [pc, #224]	; (8001890 <_ZN3DHT19Dht_onGpioInterruptEt+0x130>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b2:	60fb      	str	r3, [r7, #12]
			dhtPin=RECEIVING_BITS;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2203      	movs	r2, #3
 80017b8:	719a      	strb	r2, [r3, #6]
			break;
 80017ba:	e05f      	b.n	800187c <_ZN3DHT19Dht_onGpioInterruptEt+0x11c>
		case RECEIVING_BITS:
			counter = __HAL_TIM_GET_COUNTER(&htim1);
 80017bc:	4b34      	ldr	r3, [pc, #208]	; (8001890 <_ZN3DHT19Dht_onGpioInterruptEt+0x130>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c2:	60fb      	str	r3, [r7, #12]
			if(counter<=100)  {
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2b64      	cmp	r3, #100	; 0x64
 80017c8:	d812      	bhi.n	80017f0 <_ZN3DHT19Dht_onGpioInterruptEt+0x90>
				dht_byte&= ~(1<<(7-p));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	7e1b      	ldrb	r3, [r3, #24]
 80017ce:	b25a      	sxtb	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	7e9b      	ldrb	r3, [r3, #26]
 80017d4:	f1c3 0307 	rsb	r3, r3, #7
 80017d8:	2101      	movs	r1, #1
 80017da:	fa01 f303 	lsl.w	r3, r1, r3
 80017de:	b25b      	sxtb	r3, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	b25b      	sxtb	r3, r3
 80017e4:	4013      	ands	r3, r2
 80017e6:	b25b      	sxtb	r3, r3
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	761a      	strb	r2, [r3, #24]
 80017ee:	e00f      	b.n	8001810 <_ZN3DHT19Dht_onGpioInterruptEt+0xb0>
			}
			else {
				dht_byte|= (1<<(7-p));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	7e1b      	ldrb	r3, [r3, #24]
 80017f4:	b25a      	sxtb	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	7e9b      	ldrb	r3, [r3, #26]
 80017fa:	f1c3 0307 	rsb	r3, r3, #7
 80017fe:	2101      	movs	r1, #1
 8001800:	fa01 f303 	lsl.w	r3, r1, r3
 8001804:	b25b      	sxtb	r3, r3
 8001806:	4313      	orrs	r3, r2
 8001808:	b25b      	sxtb	r3, r3
 800180a:	b2da      	uxtb	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	761a      	strb	r2, [r3, #24]
			}

			p++;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	7e9b      	ldrb	r3, [r3, #26]
 8001814:	3301      	adds	r3, #1
 8001816:	b2da      	uxtb	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	769a      	strb	r2, [r3, #26]
			bitcount++;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	1c5a      	adds	r2, r3, #1
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	611a      	str	r2, [r3, #16]

			if(bitcount%8==0){
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	2b00      	cmp	r3, #0
 8001830:	d112      	bne.n	8001858 <_ZN3DHT19Dht_onGpioInterruptEt+0xf8>
				DHT_data[m]=dht_byte;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	7e5b      	ldrb	r3, [r3, #25]
 8001836:	461a      	mov	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	7e19      	ldrb	r1, [r3, #24]
 800183c:	4b15      	ldr	r3, [pc, #84]	; (8001894 <_ZN3DHT19Dht_onGpioInterruptEt+0x134>)
 800183e:	5499      	strb	r1, [r3, r2]
				dht_byte=0;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	761a      	strb	r2, [r3, #24]
				m++;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	7e5b      	ldrb	r3, [r3, #25]
 800184a:	3301      	adds	r3, #1
 800184c:	b2da      	uxtb	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	765a      	strb	r2, [r3, #25]
				p=0;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	769a      	strb	r2, [r3, #26]
			}

			if(bitcount>=40){
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	2b27      	cmp	r3, #39	; 0x27
 800185e:	dd0c      	ble.n	800187a <_ZN3DHT19Dht_onGpioInterruptEt+0x11a>
				bitcount=0;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	611a      	str	r2, [r3, #16]
				m=0;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	765a      	strb	r2, [r3, #25]

			dhtPin=DATA_RECEIVED;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2204      	movs	r2, #4
 8001870:	719a      	strb	r2, [r3, #6]
			}
			break;
 8001872:	e002      	b.n	800187a <_ZN3DHT19Dht_onGpioInterruptEt+0x11a>
		case DATA_RECEIVED:
			counter = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	60fb      	str	r3, [r7, #12]
			break;
 8001878:	e000      	b.n	800187c <_ZN3DHT19Dht_onGpioInterruptEt+0x11c>
			break;
 800187a:	bf00      	nop
		}
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 800187c:	4b04      	ldr	r3, [pc, #16]	; (8001890 <_ZN3DHT19Dht_onGpioInterruptEt+0x130>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2200      	movs	r2, #0
 8001882:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	20000348 	.word	0x20000348
 8001894:	2000021c 	.word	0x2000021c

08001898 <_ZN3DHT11Dht_hasDataEv>:

int DHT::Dht_hasData(){
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	if (dhtPin==DATA_RECEIVED){
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	799b      	ldrb	r3, [r3, #6]
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	d10e      	bne.n	80018c6 <_ZN3DHT11Dht_hasDataEv+0x2e>
		Temperature = (double)DHT_data[2];
 80018a8:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <_ZN3DHT11Dht_hasDataEv+0x38>)
 80018aa:	789b      	ldrb	r3, [r3, #2]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fe39 	bl	8000524 <__aeabi_ui2d>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
		dhtPin=WAKING;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	719a      	strb	r2, [r3, #6]
		return 1;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <_ZN3DHT11Dht_hasDataEv+0x30>
	}
	return 0;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	2000021c 	.word	0x2000021c

080018d4 <_ZN3DHT15get_temperatureEv>:
double DHT::get_temperature()
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
	return Temperature;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018e2:	ec43 2b17 	vmov	d7, r2, r3
}
 80018e6:	eeb0 0a47 	vmov.f32	s0, s14
 80018ea:	eef0 0a67 	vmov.f32	s1, s15
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <_ZN3LEDC1EP12GPIO_TypeDeft>:
#include <stdio.h>
#include "mymain.h"
#include "main.h"
#include "LED.h"

LED::LED(GPIO_TypeDef* GPIOx,uint16_t GPIO_Pin):
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	4613      	mov	r3, r2
 8001904:	80fb      	strh	r3, [r7, #6]
		GPIOx(GPIOx),GPIO_Pin(GPIO_Pin)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	88fa      	ldrh	r2, [r7, #6]
 8001910:	809a      	strh	r2, [r3, #4]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2232      	movs	r2, #50	; 0x32
 800191c:	60da      	str	r2, [r3, #12]
{
}
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4618      	mov	r0, r3
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <_ZN3LED6Led_OnEv>:

void LED::Led_On()
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	STATE = LED_STATE_ON;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	741a      	strb	r2, [r3, #16]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6818      	ldr	r0, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	889b      	ldrh	r3, [r3, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	4619      	mov	r1, r3
 8001946:	f001 ff13 	bl	8003770 <HAL_GPIO_WritePin>

}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <_ZN3LED7Led_OffEv>:
void LED::Led_Off()
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
	STATE = LED_STATE_OFF;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	741a      	strb	r2, [r3, #16]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6818      	ldr	r0, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	889b      	ldrh	r3, [r3, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	4619      	mov	r1, r3
 800196c:	f001 ff00 	bl	8003770 <HAL_GPIO_WritePin>

}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <_ZN3LED9Led_BlinkEv>:
void LED::LED_delay(int num){
	delay = num;
}
void LED::Led_Blink()
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	889b      	ldrh	r3, [r3, #4]
 8001988:	4619      	mov	r1, r3
 800198a:	4610      	mov	r0, r2
 800198c:	f001 ff08 	bl	80037a0 <HAL_GPIO_TogglePin>
	osDelay(delay);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	4618      	mov	r0, r3
 8001996:	f008 f8a9 	bl	8009aec <osDelay>

}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <_ZN3LED8Is_blinkEv>:
void LED::Is_blink()
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
	STATE = LED_STATE_BLINK;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2202      	movs	r2, #2
 80019ae:	741a      	strb	r2, [r3, #16]
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <_ZN3LED8getStateEv>:
LED_STATE LED:: getState()
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
	return STATE;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	7c1b      	ldrb	r3, [r3, #16]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <_ZN4_RTCC1EP19__I2C_HandleTypeDefm>:
		304,
		334,
		365
};

_RTC::_RTC(I2C_HandleTypeDef * hi2c, uint32_t devAddr)
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
{
  _hi2c = hi2c;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	601a      	str	r2, [r3, #0]
  _devAddr = devAddr;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	711a      	strb	r2, [r3, #4]
}
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4618      	mov	r0, r3
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <_ZN4_RTC8rtcStartEv>:

void _RTC::rtcStart()
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b088      	sub	sp, #32
 8001a00:	af04      	add	r7, sp, #16
 8001a02:	6078      	str	r0, [r7, #4]
	uint8_t sec = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(_hi2c, _devAddr, 0, 1, &sec, 1, 0xFF);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6818      	ldr	r0, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	791b      	ldrb	r3, [r3, #4]
 8001a10:	b299      	uxth	r1, r3
 8001a12:	23ff      	movs	r3, #255	; 0xff
 8001a14:	9302      	str	r3, [sp, #8]
 8001a16:	2301      	movs	r3, #1
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	f107 030f 	add.w	r3, r7, #15
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	2301      	movs	r3, #1
 8001a22:	2200      	movs	r2, #0
 8001a24:	f002 f892 	bl	8003b4c <HAL_I2C_Mem_Read>
	sec &= ~RTC_START_STOP;
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(_hi2c, _devAddr, 0, 1, &sec, 1, 0xFF);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6818      	ldr	r0, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	791b      	ldrb	r3, [r3, #4]
 8001a3a:	b299      	uxth	r1, r3
 8001a3c:	23ff      	movs	r3, #255	; 0xff
 8001a3e:	9302      	str	r3, [sp, #8]
 8001a40:	2301      	movs	r3, #1
 8001a42:	9301      	str	r3, [sp, #4]
 8001a44:	f107 030f 	add.w	r3, r7, #15
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f001 ff69 	bl	8003924 <HAL_I2C_Mem_Write>
}
 8001a52:	bf00      	nop
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <_ZN4_RTC7rtcStopEv>:

void _RTC::rtcStop()
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b088      	sub	sp, #32
 8001a5e:	af04      	add	r7, sp, #16
 8001a60:	6078      	str	r0, [r7, #4]
	uint8_t sec = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(_hi2c,_devAddr, 0, 1, &sec, 1, 0xFF);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6818      	ldr	r0, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	791b      	ldrb	r3, [r3, #4]
 8001a6e:	b299      	uxth	r1, r3
 8001a70:	23ff      	movs	r3, #255	; 0xff
 8001a72:	9302      	str	r3, [sp, #8]
 8001a74:	2301      	movs	r3, #1
 8001a76:	9301      	str	r3, [sp, #4]
 8001a78:	f107 030f 	add.w	r3, r7, #15
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	2301      	movs	r3, #1
 8001a80:	2200      	movs	r2, #0
 8001a82:	f002 f863 	bl	8003b4c <HAL_I2C_Mem_Read>
	sec |= RTC_START_STOP;
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(_hi2c, _devAddr, 0, 1, &sec, 1, 0xFF);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6818      	ldr	r0, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	791b      	ldrb	r3, [r3, #4]
 8001a98:	b299      	uxth	r1, r3
 8001a9a:	23ff      	movs	r3, #255	; 0xff
 8001a9c:	9302      	str	r3, [sp, #8]
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	9301      	str	r3, [sp, #4]
 8001aa2:	f107 030f 	add.w	r3, r7, #15
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f001 ff3a 	bl	8003924 <HAL_I2C_Mem_Write>
}
 8001ab0:	bf00      	nop
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <_ZL8bcdToInth>:
	HAL_I2C_Mem_Read(_hi2c, _devAddr, 0, 1, &sec, 1, 0xFF);
	return (sec & RTC_START_STOP) == 0;
}

static int bcdToInt(uint8_t bcd)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
	return (bcd >> 4) * 10 + (bcd & 0x0F);
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4613      	mov	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	4413      	add	r3, r2
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <_ZL8intToBcdiii>:

static uint8_t intToBcd(int value, int minVal, int maxVal)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
	if (value < minVal || value > maxVal) {
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	db03      	blt.n	8001b04 <_ZL8intToBcdiii+0x1c>
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	dd01      	ble.n	8001b08 <_ZL8intToBcdiii+0x20>
		return 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	e018      	b.n	8001b3a <_ZL8intToBcdiii+0x52>
	}

	return ((value / 10) << 4) | (value % 10);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4a0f      	ldr	r2, [pc, #60]	; (8001b48 <_ZL8intToBcdiii+0x60>)
 8001b0c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b10:	1092      	asrs	r2, r2, #2
 8001b12:	17db      	asrs	r3, r3, #31
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	011b      	lsls	r3, r3, #4
 8001b18:	b258      	sxtb	r0, r3
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <_ZL8intToBcdiii+0x60>)
 8001b1e:	fb83 1302 	smull	r1, r3, r3, r2
 8001b22:	1099      	asrs	r1, r3, #2
 8001b24:	17d3      	asrs	r3, r2, #31
 8001b26:	1ac9      	subs	r1, r1, r3
 8001b28:	460b      	mov	r3, r1
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	1ad1      	subs	r1, r2, r3
 8001b32:	b24b      	sxtb	r3, r1
 8001b34:	4303      	orrs	r3, r0
 8001b36:	b25b      	sxtb	r3, r3
 8001b38:	b2db      	uxtb	r3, r3
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	66666667 	.word	0x66666667

08001b4c <_ZN4_RTC10rtcGetTimeEv>:

void _RTC::rtcGetTime()
{
 8001b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b4e:	b08b      	sub	sp, #44	; 0x2c
 8001b50:	af04      	add	r7, sp, #16
 8001b52:	6078      	str	r0, [r7, #4]
	uint8_t buffer[RTC_DATE_TIME_SIZE];
	DateTime * mytime = new DateTime;
 8001b54:	201c      	movs	r0, #28
 8001b56:	f00b f97b 	bl	800ce50 <_Znwj>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	617b      	str	r3, [r7, #20]
	if(HAL_I2C_Mem_Read(_hi2c, _devAddr, 0, 1, buffer, RTC_DATE_TIME_SIZE, 0xFF) == HAL_OK){
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6818      	ldr	r0, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	791b      	ldrb	r3, [r3, #4]
 8001b66:	b299      	uxth	r1, r3
 8001b68:	23ff      	movs	r3, #255	; 0xff
 8001b6a:	9302      	str	r3, [sp, #8]
 8001b6c:	2307      	movs	r3, #7
 8001b6e:	9301      	str	r3, [sp, #4]
 8001b70:	f107 030c 	add.w	r3, r7, #12
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	2301      	movs	r3, #1
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f001 ffe7 	bl	8003b4c <HAL_I2C_Mem_Read>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	bf0c      	ite	eq
 8001b84:	2301      	moveq	r3, #1
 8001b86:	2300      	movne	r3, #0
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <_ZN4_RTC10rtcGetTimeEv+0x4a>
		printf("read is good\r\n");
 8001b8e:	482b      	ldr	r0, [pc, #172]	; (8001c3c <_ZN4_RTC10rtcGetTimeEv+0xf0>)
 8001b90:	f00b ffba 	bl	800db08 <puts>
 8001b94:	e002      	b.n	8001b9c <_ZN4_RTC10rtcGetTimeEv+0x50>
	}
	else{
		printf("write is bad\r\n");
 8001b96:	482a      	ldr	r0, [pc, #168]	; (8001c40 <_ZN4_RTC10rtcGetTimeEv+0xf4>)
 8001b98:	f00b ffb6 	bl	800db08 <puts>
	}

	// remove stop bit if set
	buffer[0] &= ~RTC_START_STOP;
 8001b9c:	7b3b      	ldrb	r3, [r7, #12]
 8001b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	733b      	strb	r3, [r7, #12]
	mytime->sec = bcdToInt(buffer[0]);
 8001ba6:	7b3b      	ldrb	r3, [r7, #12]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff85 	bl	8001ab8 <_ZL8bcdToInth>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	601a      	str	r2, [r3, #0]
	mytime->min = bcdToInt(buffer[1]);
 8001bb4:	7b7b      	ldrb	r3, [r7, #13]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff ff7e 	bl	8001ab8 <_ZL8bcdToInth>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	605a      	str	r2, [r3, #4]
	mytime->hours = bcdToInt(buffer[2]);
 8001bc2:	7bbb      	ldrb	r3, [r7, #14]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff77 	bl	8001ab8 <_ZL8bcdToInth>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	609a      	str	r2, [r3, #8]
	mytime->weekDay = buffer[3] & 0x07;
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
 8001bd2:	f003 0207 	and.w	r2, r3, #7
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	60da      	str	r2, [r3, #12]
	mytime->day = bcdToInt(buffer[4]);
 8001bda:	7c3b      	ldrb	r3, [r7, #16]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ff6b 	bl	8001ab8 <_ZL8bcdToInth>
 8001be2:	4602      	mov	r2, r0
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	611a      	str	r2, [r3, #16]
	mytime->month = bcdToInt(buffer[5]);
 8001be8:	7c7b      	ldrb	r3, [r7, #17]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff ff64 	bl	8001ab8 <_ZL8bcdToInth>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	615a      	str	r2, [r3, #20]
	mytime->year = bcdToInt(buffer[6]);
 8001bf6:	7cbb      	ldrb	r3, [r7, #18]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff ff5d 	bl	8001ab8 <_ZL8bcdToInth>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	619a      	str	r2, [r3, #24]
	printf("date is %02d:%02d:%02d  %02d %02d/%02d/%02d \r\n ",mytime->hours,mytime->min,mytime->sec,mytime->weekDay,mytime->day,mytime->month,mytime->year);
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	689c      	ldr	r4, [r3, #8]
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	685d      	ldr	r5, [r3, #4]
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	681e      	ldr	r6, [r3, #0]
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	6912      	ldr	r2, [r2, #16]
 8001c18:	6979      	ldr	r1, [r7, #20]
 8001c1a:	6949      	ldr	r1, [r1, #20]
 8001c1c:	6978      	ldr	r0, [r7, #20]
 8001c1e:	6980      	ldr	r0, [r0, #24]
 8001c20:	9003      	str	r0, [sp, #12]
 8001c22:	9102      	str	r1, [sp, #8]
 8001c24:	9201      	str	r2, [sp, #4]
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	4633      	mov	r3, r6
 8001c2a:	462a      	mov	r2, r5
 8001c2c:	4621      	mov	r1, r4
 8001c2e:	4805      	ldr	r0, [pc, #20]	; (8001c44 <_ZN4_RTC10rtcGetTimeEv+0xf8>)
 8001c30:	f00b fee4 	bl	800d9fc <iprintf>
}
 8001c34:	bf00      	nop
 8001c36:	371c      	adds	r7, #28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c3c:	080105a4 	.word	0x080105a4
 8001c40:	080105b4 	.word	0x080105b4
 8001c44:	080105c4 	.word	0x080105c4

08001c48 <_ZN4_RTC10rtcSetTimeEP9DateTime_>:
//	seconds += (dateTime.year / 4) * SecondsInDay;
//	return seconds;
//}

void _RTC::rtcSetTime(DateTime * _datetime)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af04      	add	r7, sp, #16
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
	dateTime = _datetime;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	609a      	str	r2, [r3, #8]
	uint8_t buffer[RTC_DATE_TIME_SIZE];

	buffer[0] = intToBcd(dateTime->sec, 0, 59);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	223b      	movs	r2, #59	; 0x3b
 8001c60:	2100      	movs	r1, #0
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff ff40 	bl	8001ae8 <_ZL8intToBcdiii>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	723b      	strb	r3, [r7, #8]
	buffer[1] = intToBcd(dateTime->min, 0, 59);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	223b      	movs	r2, #59	; 0x3b
 8001c74:	2100      	movs	r1, #0
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff ff36 	bl	8001ae8 <_ZL8intToBcdiii>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	727b      	strb	r3, [r7, #9]
	buffer[2] = intToBcd(dateTime->hours, 0, 59);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	223b      	movs	r2, #59	; 0x3b
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff ff2c 	bl	8001ae8 <_ZL8intToBcdiii>
 8001c90:	4603      	mov	r3, r0
 8001c92:	72bb      	strb	r3, [r7, #10]
	buffer[3] = dateTime->weekDay < 1 || dateTime->weekDay > 7 ? 0 : dateTime->weekDay;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	dd09      	ble.n	8001cb2 <_ZN4_RTC10rtcSetTimeEP9DateTime_+0x6a>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	2b07      	cmp	r3, #7
 8001ca6:	dc04      	bgt.n	8001cb2 <_ZN4_RTC10rtcSetTimeEP9DateTime_+0x6a>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	e000      	b.n	8001cb4 <_ZN4_RTC10rtcSetTimeEP9DateTime_+0x6c>
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	72fb      	strb	r3, [r7, #11]
	buffer[4] = intToBcd(dateTime->day, 1, 31);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	221f      	movs	r2, #31
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff11 	bl	8001ae8 <_ZL8intToBcdiii>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	733b      	strb	r3, [r7, #12]
	buffer[5] = intToBcd(dateTime->month, 1, 12);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	220c      	movs	r2, #12
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff07 	bl	8001ae8 <_ZL8intToBcdiii>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	737b      	strb	r3, [r7, #13]
	buffer[6] = intToBcd(dateTime->year, 1, 99);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	2263      	movs	r2, #99	; 0x63
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff fefd 	bl	8001ae8 <_ZL8intToBcdiii>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	73bb      	strb	r3, [r7, #14]

	if(HAL_I2C_Mem_Write(_hi2c, _devAddr, 0, 1, buffer, RTC_DATE_TIME_SIZE, 0xFF) == HAL_OK){
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6818      	ldr	r0, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	791b      	ldrb	r3, [r3, #4]
 8001cfa:	b299      	uxth	r1, r3
 8001cfc:	23ff      	movs	r3, #255	; 0xff
 8001cfe:	9302      	str	r3, [sp, #8]
 8001d00:	2307      	movs	r3, #7
 8001d02:	9301      	str	r3, [sp, #4]
 8001d04:	f107 0308 	add.w	r3, r7, #8
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f001 fe09 	bl	8003924 <HAL_I2C_Mem_Write>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	bf0c      	ite	eq
 8001d18:	2301      	moveq	r3, #1
 8001d1a:	2300      	movne	r3, #0
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <_ZN4_RTC10rtcSetTimeEP9DateTime_+0xe2>
		printf("write is good\r\n");
 8001d22:	4805      	ldr	r0, [pc, #20]	; (8001d38 <_ZN4_RTC10rtcSetTimeEP9DateTime_+0xf0>)
 8001d24:	f00b fef0 	bl	800db08 <puts>
	}
	else{
		printf("write is bad\r\n");
	}
}
 8001d28:	e002      	b.n	8001d30 <_ZN4_RTC10rtcSetTimeEP9DateTime_+0xe8>
		printf("write is bad\r\n");
 8001d2a:	4804      	ldr	r0, [pc, #16]	; (8001d3c <_ZN4_RTC10rtcSetTimeEP9DateTime_+0xf4>)
 8001d2c:	f00b feec 	bl	800db08 <puts>
}
 8001d30:	bf00      	nop
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	080105f4 	.word	0x080105f4
 8001d3c:	080105b4 	.word	0x080105b4

08001d40 <_ZN12CliContainer9doCommandEPcS0_>:

	void doCommand( char * cmd,  char * param){
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
		for (int j = 0; j <funcounter; j++) {
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	da1d      	bge.n	8001d98 <_ZN12CliContainer9doCommandEPcS0_+0x58>
			if (strcmp(cmd,commands[j].CommandName) == 0) {
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8001d64:	4619      	mov	r1, r3
 8001d66:	68b8      	ldr	r0, [r7, #8]
 8001d68:	f7fe fa32 	bl	80001d0 <strcmp>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10e      	bne.n	8001d90 <_ZN12CliContainer9doCommandEPcS0_+0x50>
				commands[j].command->doCommand(param);
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4413      	add	r3, r2
 8001d7a:	6858      	ldr	r0, [r3, #4]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4413      	add	r3, r2
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	4798      	blx	r3
				return;
 8001d8e:	e006      	b.n	8001d9e <_ZN12CliContainer9doCommandEPcS0_+0x5e>
		for (int j = 0; j <funcounter; j++) {
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	3301      	adds	r3, #1
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	e7db      	b.n	8001d50 <_ZN12CliContainer9doCommandEPcS0_+0x10>
			}

		}
		printf("Invalid command\r\n");
 8001d98:	4802      	ldr	r0, [pc, #8]	; (8001da4 <_ZN12CliContainer9doCommandEPcS0_+0x64>)
 8001d9a:	f00b feb5 	bl	800db08 <puts>
	}
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	08010604 	.word	0x08010604

08001da8 <_Z8commTaskv>:
int cmdcount = 0;
int cmdprint = 0;
extern CliContainer container;


int commTask() {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 8001dae:	1db9      	adds	r1, r7, #6
 8001db0:	230a      	movs	r3, #10
 8001db2:	2201      	movs	r2, #1
 8001db4:	4839      	ldr	r0, [pc, #228]	; (8001e9c <_Z8commTaskv+0xf4>)
 8001db6:	f005 fec1 	bl	8007b3c <HAL_UART_Receive>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK) {
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d025      	beq.n	8001e10 <_Z8commTaskv+0x68>
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0) {
 8001dc4:	4b35      	ldr	r3, [pc, #212]	; (8001e9c <_Z8commTaskv+0xf4>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	bf14      	ite	ne
 8001dd2:	2301      	movne	r3, #1
 8001dd4:	2300      	moveq	r3, #0
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <_Z8commTaskv+0x3c>
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 8001ddc:	4b2f      	ldr	r3, [pc, #188]	; (8001e9c <_Z8commTaskv+0xf4>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2208      	movs	r2, #8
 8001de2:	621a      	str	r2, [r3, #32]
		}

		// here we have a time to print the command
		while (cmdprint < cmdcount) {
 8001de4:	4b2e      	ldr	r3, [pc, #184]	; (8001ea0 <_Z8commTaskv+0xf8>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4b2e      	ldr	r3, [pc, #184]	; (8001ea4 <_Z8commTaskv+0xfc>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	da0d      	bge.n	8001e0c <_Z8commTaskv+0x64>
			HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8001df0:	4b2b      	ldr	r3, [pc, #172]	; (8001ea0 <_Z8commTaskv+0xf8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	1c5a      	adds	r2, r3, #1
 8001df6:	492a      	ldr	r1, [pc, #168]	; (8001ea0 <_Z8commTaskv+0xf8>)
 8001df8:	600a      	str	r2, [r1, #0]
 8001dfa:	4a2b      	ldr	r2, [pc, #172]	; (8001ea8 <_Z8commTaskv+0x100>)
 8001dfc:	1899      	adds	r1, r3, r2
 8001dfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e02:	2201      	movs	r2, #1
 8001e04:	4825      	ldr	r0, [pc, #148]	; (8001e9c <_Z8commTaskv+0xf4>)
 8001e06:	f005 fe05 	bl	8007a14 <HAL_UART_Transmit>
		while (cmdprint < cmdcount) {
 8001e0a:	e7eb      	b.n	8001de4 <_Z8commTaskv+0x3c>
		}

		return 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	e040      	b.n	8001e92 <_Z8commTaskv+0xea>
	}

	if (ch != '\r' && ch != '\n') {
 8001e10:	79bb      	ldrb	r3, [r7, #6]
 8001e12:	2b0d      	cmp	r3, #13
 8001e14:	d016      	beq.n	8001e44 <_Z8commTaskv+0x9c>
 8001e16:	79bb      	ldrb	r3, [r7, #6]
 8001e18:	2b0a      	cmp	r3, #10
 8001e1a:	d013      	beq.n	8001e44 <_Z8commTaskv+0x9c>
		//HAL_UART_Transmit(&huart2, &ch, 1, 0xFFFF);

		if (cmdcount >= MAX_BUFFER_LENGTH) {
 8001e1c:	4b21      	ldr	r3, [pc, #132]	; (8001ea4 <_Z8commTaskv+0xfc>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b63      	cmp	r3, #99	; 0x63
 8001e22:	dd05      	ble.n	8001e30 <_Z8commTaskv+0x88>
			cmdcount = 0;
 8001e24:	4b1f      	ldr	r3, [pc, #124]	; (8001ea4 <_Z8commTaskv+0xfc>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
			cmdprint = 0;
 8001e2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <_Z8commTaskv+0xf8>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 8001e30:	4b1c      	ldr	r3, [pc, #112]	; (8001ea4 <_Z8commTaskv+0xfc>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	1c5a      	adds	r2, r3, #1
 8001e36:	491b      	ldr	r1, [pc, #108]	; (8001ea4 <_Z8commTaskv+0xfc>)
 8001e38:	600a      	str	r2, [r1, #0]
 8001e3a:	79b9      	ldrb	r1, [r7, #6]
 8001e3c:	4a1a      	ldr	r2, [pc, #104]	; (8001ea8 <_Z8commTaskv+0x100>)
 8001e3e:	54d1      	strb	r1, [r2, r3]
		return 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	e026      	b.n	8001e92 <_Z8commTaskv+0xea>
	}

	// here we have a time to print the command
	while (cmdprint < cmdcount) {
 8001e44:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <_Z8commTaskv+0xf8>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <_Z8commTaskv+0xfc>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	da0d      	bge.n	8001e6c <_Z8commTaskv+0xc4>
		HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8001e50:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <_Z8commTaskv+0xf8>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	1c5a      	adds	r2, r3, #1
 8001e56:	4912      	ldr	r1, [pc, #72]	; (8001ea0 <_Z8commTaskv+0xf8>)
 8001e58:	600a      	str	r2, [r1, #0]
 8001e5a:	4a13      	ldr	r2, [pc, #76]	; (8001ea8 <_Z8commTaskv+0x100>)
 8001e5c:	1899      	adds	r1, r3, r2
 8001e5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e62:	2201      	movs	r2, #1
 8001e64:	480d      	ldr	r0, [pc, #52]	; (8001e9c <_Z8commTaskv+0xf4>)
 8001e66:	f005 fdd5 	bl	8007a14 <HAL_UART_Transmit>
	while (cmdprint < cmdcount) {
 8001e6a:	e7eb      	b.n	8001e44 <_Z8commTaskv+0x9c>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n", 2, 0xFFFF);
 8001e6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e70:	2202      	movs	r2, #2
 8001e72:	490e      	ldr	r1, [pc, #56]	; (8001eac <_Z8commTaskv+0x104>)
 8001e74:	4809      	ldr	r0, [pc, #36]	; (8001e9c <_Z8commTaskv+0xf4>)
 8001e76:	f005 fdcd 	bl	8007a14 <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 8001e7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <_Z8commTaskv+0xfc>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <_Z8commTaskv+0x100>)
 8001e80:	2100      	movs	r1, #0
 8001e82:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 8001e84:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <_Z8commTaskv+0xfc>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
	cmdprint = 0;
 8001e8a:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <_Z8commTaskv+0xf8>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
	return 1;
 8001e90:	2301      	movs	r3, #1
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	2000042c 	.word	0x2000042c
 8001ea0:	2000028c 	.word	0x2000028c
 8001ea4:	20000288 	.word	0x20000288
 8001ea8:	20000224 	.word	0x20000224
 8001eac:	08010618 	.word	0x08010618

08001eb0 <_Z13handleCommandv>:

void handleCommand() {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b092      	sub	sp, #72	; 0x48
 8001eb4:	af00      	add	r7, sp, #0
	char cmd[20];
	char param[50];
	sscanf((const char*) cmdbuffer, "%s %s", cmd, param);
 8001eb6:	463b      	mov	r3, r7
 8001eb8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001ebc:	4907      	ldr	r1, [pc, #28]	; (8001edc <_Z13handleCommandv+0x2c>)
 8001ebe:	4808      	ldr	r0, [pc, #32]	; (8001ee0 <_Z13handleCommandv+0x30>)
 8001ec0:	f00b fe7e 	bl	800dbc0 <siscanf>

	container.doCommand(cmd,param);
 8001ec4:	463a      	mov	r2, r7
 8001ec6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <_Z13handleCommandv+0x34>)
 8001ece:	f7ff ff37 	bl	8001d40 <_ZN12CliContainer9doCommandEPcS0_>
}
 8001ed2:	bf00      	nop
 8001ed4:	3748      	adds	r7, #72	; 0x48
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	0801061c 	.word	0x0801061c
 8001ee0:	20000224 	.word	0x20000224
 8001ee4:	200004f4 	.word	0x200004f4

08001ee8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001eec:	f001 f8b8 	bl	8003060 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ef0:	f000 f85a 	bl	8001fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ef4:	f000 fa5a 	bl	80023ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001ef8:	f000 fa28 	bl	800234c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001efc:	f000 f978 	bl	80021f0 <MX_TIM3_Init>
  MX_TIM6_Init();
 8001f00:	f000 f9ee 	bl	80022e0 <MX_TIM6_Init>
  MX_TIM1_Init();
 8001f04:	f000 f920 	bl	8002148 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001f08:	f000 f8a0 	bl	800204c <MX_I2C1_Init>
  MX_SPI1_Init();
 8001f0c:	f000 f8de 	bl	80020cc <MX_SPI1_Init>
  MX_FATFS_Init();
 8001f10:	f006 fefc 	bl	8008d0c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001f14:	f007 fcee 	bl	80098f4 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of DHT_MONITOR */
  DHT_MONITORHandle = osSemaphoreNew(1, 1, &DHT_MONITOR_attributes);
 8001f18:	4a15      	ldr	r2, [pc, #84]	; (8001f70 <main+0x88>)
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	f007 fe00 	bl	8009b22 <osSemaphoreNew>
 8001f22:	4603      	mov	r3, r0
 8001f24:	4a13      	ldr	r2, [pc, #76]	; (8001f74 <main+0x8c>)
 8001f26:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of READ_TEMP */
  READ_TEMPHandle = osThreadNew(READ_TEMP_func, NULL, &READ_TEMP_attributes);
 8001f28:	4a13      	ldr	r2, [pc, #76]	; (8001f78 <main+0x90>)
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4813      	ldr	r0, [pc, #76]	; (8001f7c <main+0x94>)
 8001f2e:	f007 fd2b 	bl	8009988 <osThreadNew>
 8001f32:	4603      	mov	r3, r0
 8001f34:	4a12      	ldr	r2, [pc, #72]	; (8001f80 <main+0x98>)
 8001f36:	6013      	str	r3, [r2, #0]

  /* creation of COMTASK */
  COMTASKHandle = osThreadNew(comtask_func, NULL, &COMTASK_attributes);
 8001f38:	4a12      	ldr	r2, [pc, #72]	; (8001f84 <main+0x9c>)
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	4812      	ldr	r0, [pc, #72]	; (8001f88 <main+0xa0>)
 8001f3e:	f007 fd23 	bl	8009988 <osThreadNew>
 8001f42:	4603      	mov	r3, r0
 8001f44:	4a11      	ldr	r2, [pc, #68]	; (8001f8c <main+0xa4>)
 8001f46:	6013      	str	r3, [r2, #0]

  /* creation of MONITOR_TEMP */
  MONITOR_TEMPHandle = osThreadNew(monitor_func, NULL, &MONITOR_TEMP_attributes);
 8001f48:	4a11      	ldr	r2, [pc, #68]	; (8001f90 <main+0xa8>)
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4811      	ldr	r0, [pc, #68]	; (8001f94 <main+0xac>)
 8001f4e:	f007 fd1b 	bl	8009988 <osThreadNew>
 8001f52:	4603      	mov	r3, r0
 8001f54:	4a10      	ldr	r2, [pc, #64]	; (8001f98 <main+0xb0>)
 8001f56:	6013      	str	r3, [r2, #0]

  /* creation of BLINK_TASK */
  BLINK_TASKHandle = osThreadNew(blink_func, NULL, &BLINK_TASK_attributes);
 8001f58:	4a10      	ldr	r2, [pc, #64]	; (8001f9c <main+0xb4>)
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4810      	ldr	r0, [pc, #64]	; (8001fa0 <main+0xb8>)
 8001f5e:	f007 fd13 	bl	8009988 <osThreadNew>
 8001f62:	4603      	mov	r3, r0
 8001f64:	4a0f      	ldr	r2, [pc, #60]	; (8001fa4 <main+0xbc>)
 8001f66:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001f68:	f007 fce8 	bl	800993c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <main+0x84>
 8001f6e:	bf00      	nop
 8001f70:	080107ec 	.word	0x080107ec
 8001f74:	200004c0 	.word	0x200004c0
 8001f78:	0801075c 	.word	0x0801075c
 8001f7c:	08002765 	.word	0x08002765
 8001f80:	200004b0 	.word	0x200004b0
 8001f84:	08010780 	.word	0x08010780
 8001f88:	0800288d 	.word	0x0800288d
 8001f8c:	200004b4 	.word	0x200004b4
 8001f90:	080107a4 	.word	0x080107a4
 8001f94:	080028b1 	.word	0x080028b1
 8001f98:	200004b8 	.word	0x200004b8
 8001f9c:	080107c8 	.word	0x080107c8
 8001fa0:	080028dd 	.word	0x080028dd
 8001fa4:	200004bc 	.word	0x200004bc

08001fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b096      	sub	sp, #88	; 0x58
 8001fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fae:	f107 0314 	add.w	r3, r7, #20
 8001fb2:	2244      	movs	r2, #68	; 0x44
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f00a ffce 	bl	800cf58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fbc:	463b      	mov	r3, r7
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	60da      	str	r2, [r3, #12]
 8001fc8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001fca:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001fce:	f002 fa23 	bl	8004418 <HAL_PWREx_ControlVoltageScaling>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001fd8:	f000 faa4 	bl	8002524 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fe0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fe4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fe6:	2310      	movs	r3, #16
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fea:	2302      	movs	r3, #2
 8001fec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001ff6:	230a      	movs	r3, #10
 8001ff8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001ffa:	2307      	movs	r3, #7
 8001ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ffe:	2302      	movs	r3, #2
 8002000:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002002:	2302      	movs	r3, #2
 8002004:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002006:	f107 0314 	add.w	r3, r7, #20
 800200a:	4618      	mov	r0, r3
 800200c:	f002 fa5a 	bl	80044c4 <HAL_RCC_OscConfig>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002016:	f000 fa85 	bl	8002524 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800201a:	230f      	movs	r3, #15
 800201c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800201e:	2303      	movs	r3, #3
 8002020:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002022:	2300      	movs	r3, #0
 8002024:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800202e:	463b      	mov	r3, r7
 8002030:	2104      	movs	r1, #4
 8002032:	4618      	mov	r0, r3
 8002034:	f002 fe22 	bl	8004c7c <HAL_RCC_ClockConfig>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800203e:	f000 fa71 	bl	8002524 <Error_Handler>
  }
}
 8002042:	bf00      	nop
 8002044:	3758      	adds	r7, #88	; 0x58
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002050:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <MX_I2C1_Init+0x74>)
 8002052:	4a1c      	ldr	r2, [pc, #112]	; (80020c4 <MX_I2C1_Init+0x78>)
 8002054:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8002056:	4b1a      	ldr	r3, [pc, #104]	; (80020c0 <MX_I2C1_Init+0x74>)
 8002058:	4a1b      	ldr	r2, [pc, #108]	; (80020c8 <MX_I2C1_Init+0x7c>)
 800205a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800205c:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <MX_I2C1_Init+0x74>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002062:	4b17      	ldr	r3, [pc, #92]	; (80020c0 <MX_I2C1_Init+0x74>)
 8002064:	2201      	movs	r2, #1
 8002066:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002068:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <MX_I2C1_Init+0x74>)
 800206a:	2200      	movs	r2, #0
 800206c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800206e:	4b14      	ldr	r3, [pc, #80]	; (80020c0 <MX_I2C1_Init+0x74>)
 8002070:	2200      	movs	r2, #0
 8002072:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <MX_I2C1_Init+0x74>)
 8002076:	2200      	movs	r2, #0
 8002078:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800207a:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <MX_I2C1_Init+0x74>)
 800207c:	2200      	movs	r2, #0
 800207e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002080:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <MX_I2C1_Init+0x74>)
 8002082:	2200      	movs	r2, #0
 8002084:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002086:	480e      	ldr	r0, [pc, #56]	; (80020c0 <MX_I2C1_Init+0x74>)
 8002088:	f001 fbbc 	bl	8003804 <HAL_I2C_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002092:	f000 fa47 	bl	8002524 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002096:	2100      	movs	r1, #0
 8002098:	4809      	ldr	r0, [pc, #36]	; (80020c0 <MX_I2C1_Init+0x74>)
 800209a:	f002 f917 	bl	80042cc <HAL_I2CEx_ConfigAnalogFilter>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80020a4:	f000 fa3e 	bl	8002524 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80020a8:	2100      	movs	r1, #0
 80020aa:	4805      	ldr	r0, [pc, #20]	; (80020c0 <MX_I2C1_Init+0x74>)
 80020ac:	f002 f959 	bl	8004362 <HAL_I2CEx_ConfigDigitalFilter>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80020b6:	f000 fa35 	bl	8002524 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000290 	.word	0x20000290
 80020c4:	40005400 	.word	0x40005400
 80020c8:	10909cec 	.word	0x10909cec

080020cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80020d0:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <MX_SPI1_Init+0x74>)
 80020d2:	4a1c      	ldr	r2, [pc, #112]	; (8002144 <MX_SPI1_Init+0x78>)
 80020d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020d6:	4b1a      	ldr	r3, [pc, #104]	; (8002140 <MX_SPI1_Init+0x74>)
 80020d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020de:	4b18      	ldr	r3, [pc, #96]	; (8002140 <MX_SPI1_Init+0x74>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020e4:	4b16      	ldr	r3, [pc, #88]	; (8002140 <MX_SPI1_Init+0x74>)
 80020e6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80020ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020ec:	4b14      	ldr	r3, [pc, #80]	; (8002140 <MX_SPI1_Init+0x74>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020f2:	4b13      	ldr	r3, [pc, #76]	; (8002140 <MX_SPI1_Init+0x74>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020f8:	4b11      	ldr	r3, [pc, #68]	; (8002140 <MX_SPI1_Init+0x74>)
 80020fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002100:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <MX_SPI1_Init+0x74>)
 8002102:	2230      	movs	r2, #48	; 0x30
 8002104:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002106:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <MX_SPI1_Init+0x74>)
 8002108:	2200      	movs	r2, #0
 800210a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800210c:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <MX_SPI1_Init+0x74>)
 800210e:	2200      	movs	r2, #0
 8002110:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002112:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <MX_SPI1_Init+0x74>)
 8002114:	2200      	movs	r2, #0
 8002116:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002118:	4b09      	ldr	r3, [pc, #36]	; (8002140 <MX_SPI1_Init+0x74>)
 800211a:	2207      	movs	r2, #7
 800211c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800211e:	4b08      	ldr	r3, [pc, #32]	; (8002140 <MX_SPI1_Init+0x74>)
 8002120:	2200      	movs	r2, #0
 8002122:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <MX_SPI1_Init+0x74>)
 8002126:	2208      	movs	r2, #8
 8002128:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800212a:	4805      	ldr	r0, [pc, #20]	; (8002140 <MX_SPI1_Init+0x74>)
 800212c:	f003 fcb8 	bl	8005aa0 <HAL_SPI_Init>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002136:	f000 f9f5 	bl	8002524 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200002e4 	.word	0x200002e4
 8002144:	40013000 	.word	0x40013000

08002148 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800214e:	f107 0310 	add.w	r3, r7, #16
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]
 8002158:	609a      	str	r2, [r3, #8]
 800215a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800215c:	1d3b      	adds	r3, r7, #4
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	605a      	str	r2, [r3, #4]
 8002164:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002166:	4b20      	ldr	r3, [pc, #128]	; (80021e8 <MX_TIM1_Init+0xa0>)
 8002168:	4a20      	ldr	r2, [pc, #128]	; (80021ec <MX_TIM1_Init+0xa4>)
 800216a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 800216c:	4b1e      	ldr	r3, [pc, #120]	; (80021e8 <MX_TIM1_Init+0xa0>)
 800216e:	224f      	movs	r2, #79	; 0x4f
 8002170:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002172:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <MX_TIM1_Init+0xa0>)
 8002174:	2200      	movs	r2, #0
 8002176:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002178:	4b1b      	ldr	r3, [pc, #108]	; (80021e8 <MX_TIM1_Init+0xa0>)
 800217a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800217e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002180:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <MX_TIM1_Init+0xa0>)
 8002182:	2200      	movs	r2, #0
 8002184:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002186:	4b18      	ldr	r3, [pc, #96]	; (80021e8 <MX_TIM1_Init+0xa0>)
 8002188:	2200      	movs	r2, #0
 800218a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800218c:	4b16      	ldr	r3, [pc, #88]	; (80021e8 <MX_TIM1_Init+0xa0>)
 800218e:	2200      	movs	r2, #0
 8002190:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002192:	4815      	ldr	r0, [pc, #84]	; (80021e8 <MX_TIM1_Init+0xa0>)
 8002194:	f004 f89e 	bl	80062d4 <HAL_TIM_Base_Init>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800219e:	f000 f9c1 	bl	8002524 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80021a8:	f107 0310 	add.w	r3, r7, #16
 80021ac:	4619      	mov	r1, r3
 80021ae:	480e      	ldr	r0, [pc, #56]	; (80021e8 <MX_TIM1_Init+0xa0>)
 80021b0:	f004 fe1a 	bl	8006de8 <HAL_TIM_ConfigClockSource>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80021ba:	f000 f9b3 	bl	8002524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021be:	2300      	movs	r3, #0
 80021c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80021c2:	2300      	movs	r3, #0
 80021c4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021ca:	1d3b      	adds	r3, r7, #4
 80021cc:	4619      	mov	r1, r3
 80021ce:	4806      	ldr	r0, [pc, #24]	; (80021e8 <MX_TIM1_Init+0xa0>)
 80021d0:	f005 fb2c 	bl	800782c <HAL_TIMEx_MasterConfigSynchronization>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80021da:	f000 f9a3 	bl	8002524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80021de:	bf00      	nop
 80021e0:	3720      	adds	r7, #32
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000348 	.word	0x20000348
 80021ec:	40012c00 	.word	0x40012c00

080021f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08e      	sub	sp, #56	; 0x38
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	605a      	str	r2, [r3, #4]
 8002200:	609a      	str	r2, [r3, #8]
 8002202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002204:	f107 031c 	add.w	r3, r7, #28
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002210:	463b      	mov	r3, r7
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	605a      	str	r2, [r3, #4]
 8002218:	609a      	str	r2, [r3, #8]
 800221a:	60da      	str	r2, [r3, #12]
 800221c:	611a      	str	r2, [r3, #16]
 800221e:	615a      	str	r2, [r3, #20]
 8002220:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002222:	4b2d      	ldr	r3, [pc, #180]	; (80022d8 <MX_TIM3_Init+0xe8>)
 8002224:	4a2d      	ldr	r2, [pc, #180]	; (80022dc <MX_TIM3_Init+0xec>)
 8002226:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 8002228:	4b2b      	ldr	r3, [pc, #172]	; (80022d8 <MX_TIM3_Init+0xe8>)
 800222a:	f240 321f 	movw	r2, #799	; 0x31f
 800222e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002230:	4b29      	ldr	r3, [pc, #164]	; (80022d8 <MX_TIM3_Init+0xe8>)
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8002236:	4b28      	ldr	r3, [pc, #160]	; (80022d8 <MX_TIM3_Init+0xe8>)
 8002238:	2264      	movs	r2, #100	; 0x64
 800223a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800223c:	4b26      	ldr	r3, [pc, #152]	; (80022d8 <MX_TIM3_Init+0xe8>)
 800223e:	2200      	movs	r2, #0
 8002240:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002242:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <MX_TIM3_Init+0xe8>)
 8002244:	2200      	movs	r2, #0
 8002246:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002248:	4823      	ldr	r0, [pc, #140]	; (80022d8 <MX_TIM3_Init+0xe8>)
 800224a:	f004 f843 	bl	80062d4 <HAL_TIM_Base_Init>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002254:	f000 f966 	bl	8002524 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800225c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800225e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002262:	4619      	mov	r1, r3
 8002264:	481c      	ldr	r0, [pc, #112]	; (80022d8 <MX_TIM3_Init+0xe8>)
 8002266:	f004 fdbf 	bl	8006de8 <HAL_TIM_ConfigClockSource>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002270:	f000 f958 	bl	8002524 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002274:	4818      	ldr	r0, [pc, #96]	; (80022d8 <MX_TIM3_Init+0xe8>)
 8002276:	f004 f985 	bl	8006584 <HAL_TIM_PWM_Init>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002280:	f000 f950 	bl	8002524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002284:	2300      	movs	r3, #0
 8002286:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002288:	2300      	movs	r3, #0
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800228c:	f107 031c 	add.w	r3, r7, #28
 8002290:	4619      	mov	r1, r3
 8002292:	4811      	ldr	r0, [pc, #68]	; (80022d8 <MX_TIM3_Init+0xe8>)
 8002294:	f005 faca 	bl	800782c <HAL_TIMEx_MasterConfigSynchronization>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800229e:	f000 f941 	bl	8002524 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022a2:	2360      	movs	r3, #96	; 0x60
 80022a4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 80022a6:	2332      	movs	r3, #50	; 0x32
 80022a8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022aa:	2300      	movs	r3, #0
 80022ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022b2:	463b      	mov	r3, r7
 80022b4:	2200      	movs	r2, #0
 80022b6:	4619      	mov	r1, r3
 80022b8:	4807      	ldr	r0, [pc, #28]	; (80022d8 <MX_TIM3_Init+0xe8>)
 80022ba:	f004 fc81 	bl	8006bc0 <HAL_TIM_PWM_ConfigChannel>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80022c4:	f000 f92e 	bl	8002524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80022c8:	4803      	ldr	r0, [pc, #12]	; (80022d8 <MX_TIM3_Init+0xe8>)
 80022ca:	f000 fc9f 	bl	8002c0c <HAL_TIM_MspPostInit>

}
 80022ce:	bf00      	nop
 80022d0:	3738      	adds	r7, #56	; 0x38
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000394 	.word	0x20000394
 80022dc:	40000400 	.word	0x40000400

080022e0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e6:	1d3b      	adds	r3, r7, #4
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80022f0:	4b14      	ldr	r3, [pc, #80]	; (8002344 <MX_TIM6_Init+0x64>)
 80022f2:	4a15      	ldr	r2, [pc, #84]	; (8002348 <MX_TIM6_Init+0x68>)
 80022f4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 80022f6:	4b13      	ldr	r3, [pc, #76]	; (8002344 <MX_TIM6_Init+0x64>)
 80022f8:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80022fc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022fe:	4b11      	ldr	r3, [pc, #68]	; (8002344 <MX_TIM6_Init+0x64>)
 8002300:	2200      	movs	r2, #0
 8002302:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 8002304:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <MX_TIM6_Init+0x64>)
 8002306:	220a      	movs	r2, #10
 8002308:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800230a:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <MX_TIM6_Init+0x64>)
 800230c:	2200      	movs	r2, #0
 800230e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002310:	480c      	ldr	r0, [pc, #48]	; (8002344 <MX_TIM6_Init+0x64>)
 8002312:	f003 ffdf 	bl	80062d4 <HAL_TIM_Base_Init>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800231c:	f000 f902 	bl	8002524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002320:	2300      	movs	r3, #0
 8002322:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002328:	1d3b      	adds	r3, r7, #4
 800232a:	4619      	mov	r1, r3
 800232c:	4805      	ldr	r0, [pc, #20]	; (8002344 <MX_TIM6_Init+0x64>)
 800232e:	f005 fa7d 	bl	800782c <HAL_TIMEx_MasterConfigSynchronization>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002338:	f000 f8f4 	bl	8002524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800233c:	bf00      	nop
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	200003e0 	.word	0x200003e0
 8002348:	40001000 	.word	0x40001000

0800234c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002350:	4b14      	ldr	r3, [pc, #80]	; (80023a4 <MX_USART2_UART_Init+0x58>)
 8002352:	4a15      	ldr	r2, [pc, #84]	; (80023a8 <MX_USART2_UART_Init+0x5c>)
 8002354:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002356:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <MX_USART2_UART_Init+0x58>)
 8002358:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800235c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800235e:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <MX_USART2_UART_Init+0x58>)
 8002360:	2200      	movs	r2, #0
 8002362:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002364:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <MX_USART2_UART_Init+0x58>)
 8002366:	2200      	movs	r2, #0
 8002368:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800236a:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <MX_USART2_UART_Init+0x58>)
 800236c:	2200      	movs	r2, #0
 800236e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <MX_USART2_UART_Init+0x58>)
 8002372:	220c      	movs	r2, #12
 8002374:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002376:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <MX_USART2_UART_Init+0x58>)
 8002378:	2200      	movs	r2, #0
 800237a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800237c:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <MX_USART2_UART_Init+0x58>)
 800237e:	2200      	movs	r2, #0
 8002380:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002382:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <MX_USART2_UART_Init+0x58>)
 8002384:	2200      	movs	r2, #0
 8002386:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <MX_USART2_UART_Init+0x58>)
 800238a:	2200      	movs	r2, #0
 800238c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800238e:	4805      	ldr	r0, [pc, #20]	; (80023a4 <MX_USART2_UART_Init+0x58>)
 8002390:	f005 faf2 	bl	8007978 <HAL_UART_Init>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800239a:	f000 f8c3 	bl	8002524 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	2000042c 	.word	0x2000042c
 80023a8:	40004400 	.word	0x40004400

080023ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08a      	sub	sp, #40	; 0x28
 80023b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b2:	f107 0314 	add.w	r3, r7, #20
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	605a      	str	r2, [r3, #4]
 80023bc:	609a      	str	r2, [r3, #8]
 80023be:	60da      	str	r2, [r3, #12]
 80023c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023c2:	4b4b      	ldr	r3, [pc, #300]	; (80024f0 <MX_GPIO_Init+0x144>)
 80023c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c6:	4a4a      	ldr	r2, [pc, #296]	; (80024f0 <MX_GPIO_Init+0x144>)
 80023c8:	f043 0304 	orr.w	r3, r3, #4
 80023cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023ce:	4b48      	ldr	r3, [pc, #288]	; (80024f0 <MX_GPIO_Init+0x144>)
 80023d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d2:	f003 0304 	and.w	r3, r3, #4
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023da:	4b45      	ldr	r3, [pc, #276]	; (80024f0 <MX_GPIO_Init+0x144>)
 80023dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023de:	4a44      	ldr	r2, [pc, #272]	; (80024f0 <MX_GPIO_Init+0x144>)
 80023e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023e6:	4b42      	ldr	r3, [pc, #264]	; (80024f0 <MX_GPIO_Init+0x144>)
 80023e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f2:	4b3f      	ldr	r3, [pc, #252]	; (80024f0 <MX_GPIO_Init+0x144>)
 80023f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f6:	4a3e      	ldr	r2, [pc, #248]	; (80024f0 <MX_GPIO_Init+0x144>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023fe:	4b3c      	ldr	r3, [pc, #240]	; (80024f0 <MX_GPIO_Init+0x144>)
 8002400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	60bb      	str	r3, [r7, #8]
 8002408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800240a:	4b39      	ldr	r3, [pc, #228]	; (80024f0 <MX_GPIO_Init+0x144>)
 800240c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240e:	4a38      	ldr	r2, [pc, #224]	; (80024f0 <MX_GPIO_Init+0x144>)
 8002410:	f043 0302 	orr.w	r3, r3, #2
 8002414:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002416:	4b36      	ldr	r3, [pc, #216]	; (80024f0 <MX_GPIO_Init+0x144>)
 8002418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	607b      	str	r3, [r7, #4]
 8002420:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002422:	2200      	movs	r2, #0
 8002424:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002428:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800242c:	f001 f9a0 	bl	8003770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002430:	2200      	movs	r2, #0
 8002432:	2140      	movs	r1, #64	; 0x40
 8002434:	482f      	ldr	r0, [pc, #188]	; (80024f4 <MX_GPIO_Init+0x148>)
 8002436:	f001 f99b 	bl	8003770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800243a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800243e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002440:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002446:	2300      	movs	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800244a:	f107 0314 	add.w	r3, r7, #20
 800244e:	4619      	mov	r1, r3
 8002450:	4829      	ldr	r0, [pc, #164]	; (80024f8 <MX_GPIO_Init+0x14c>)
 8002452:	f000 ffcb 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002456:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800245a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800245c:	2301      	movs	r3, #1
 800245e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002464:	2300      	movs	r3, #0
 8002466:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002468:	f107 0314 	add.w	r3, r7, #20
 800246c:	4619      	mov	r1, r3
 800246e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002472:	f000 ffbb 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 8002476:	2308      	movs	r3, #8
 8002478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800247a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800247e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8002484:	f107 0314 	add.w	r3, r7, #20
 8002488:	4619      	mov	r1, r3
 800248a:	481a      	ldr	r0, [pc, #104]	; (80024f4 <MX_GPIO_Init+0x148>)
 800248c:	f000 ffae 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pin : pin_4_Pin */
  GPIO_InitStruct.Pin = pin_4_Pin;
 8002490:	2320      	movs	r3, #32
 8002492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002494:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(pin_4_GPIO_Port, &GPIO_InitStruct);
 800249e:	f107 0314 	add.w	r3, r7, #20
 80024a2:	4619      	mov	r1, r3
 80024a4:	4813      	ldr	r0, [pc, #76]	; (80024f4 <MX_GPIO_Init+0x148>)
 80024a6:	f000 ffa1 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80024aa:	2340      	movs	r3, #64	; 0x40
 80024ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ae:	2301      	movs	r3, #1
 80024b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b6:	2300      	movs	r3, #0
 80024b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80024ba:	f107 0314 	add.w	r3, r7, #20
 80024be:	4619      	mov	r1, r3
 80024c0:	480c      	ldr	r0, [pc, #48]	; (80024f4 <MX_GPIO_Init+0x148>)
 80024c2:	f000 ff93 	bl	80033ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80024c6:	2200      	movs	r2, #0
 80024c8:	2105      	movs	r1, #5
 80024ca:	2017      	movs	r0, #23
 80024cc:	f000 fee4 	bl	8003298 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80024d0:	2017      	movs	r0, #23
 80024d2:	f000 fefd 	bl	80032d0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80024d6:	2200      	movs	r2, #0
 80024d8:	2105      	movs	r1, #5
 80024da:	2028      	movs	r0, #40	; 0x28
 80024dc:	f000 fedc 	bl	8003298 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80024e0:	2028      	movs	r0, #40	; 0x28
 80024e2:	f000 fef5 	bl	80032d0 <HAL_NVIC_EnableIRQ>

}
 80024e6:	bf00      	nop
 80024e8:	3728      	adds	r7, #40	; 0x28
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40021000 	.word	0x40021000
 80024f4:	48000400 	.word	0x48000400
 80024f8:	48000800 	.word	0x48000800

080024fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a05      	ldr	r2, [pc, #20]	; (8002520 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d101      	bne.n	8002512 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800250e:	f000 fdc7 	bl	80030a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  mycallback();
 8002512:	f000 f903 	bl	800271c <mycallback>

  /* USER CODE END Callback 1 */
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40014400 	.word	0x40014400

08002524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002528:	b672      	cpsid	i
}
 800252a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800252c:	e7fe      	b.n	800252c <Error_Handler+0x8>

0800252e <_ZN6BUZZERC1EP17TIM_HandleTypeDef>:


int count = 0;
int frame = 0;

BUZZER::BUZZER(TIM_HandleTypeDef *htim)
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
 8002536:	6039      	str	r1, [r7, #0]
{
	htim = htim;

}
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4618      	mov	r0, r3
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
	...

08002548 <_ZN6BUZZER15buzzerStartPlayEv>:
void BUZZER::buzzerStartPlay()
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(&htim3);
 8002550:	4808      	ldr	r0, [pc, #32]	; (8002574 <_ZN6BUZZER15buzzerStartPlayEv+0x2c>)
 8002552:	f003 ff17 	bl	8006384 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002556:	2100      	movs	r1, #0
 8002558:	4806      	ldr	r0, [pc, #24]	; (8002574 <_ZN6BUZZER15buzzerStartPlayEv+0x2c>)
 800255a:	f004 f875 	bl	8006648 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_AUTORELOAD(&htim3,150);
 800255e:	4b05      	ldr	r3, [pc, #20]	; (8002574 <_ZN6BUZZER15buzzerStartPlayEv+0x2c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2296      	movs	r2, #150	; 0x96
 8002564:	62da      	str	r2, [r3, #44]	; 0x2c
 8002566:	4b03      	ldr	r3, [pc, #12]	; (8002574 <_ZN6BUZZER15buzzerStartPlayEv+0x2c>)
 8002568:	2296      	movs	r2, #150	; 0x96
 800256a:	60da      	str	r2, [r3, #12]
}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20000394 	.word	0x20000394

08002578 <_ZN6BUZZER14buzzerStopPlayEv>:
void BUZZER::buzzerStopPlay()
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop(&htim3);
 8002580:	4805      	ldr	r0, [pc, #20]	; (8002598 <_ZN6BUZZER14buzzerStopPlayEv+0x20>)
 8002582:	f003 ff67 	bl	8006454 <HAL_TIM_Base_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8002586:	2100      	movs	r1, #0
 8002588:	4803      	ldr	r0, [pc, #12]	; (8002598 <_ZN6BUZZER14buzzerStopPlayEv+0x20>)
 800258a:	f004 f963 	bl	8006854 <HAL_TIM_PWM_Stop>
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000394 	.word	0x20000394

0800259c <_ZN12CliContainerC1Ev>:
	CliContainer(){}
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4618      	mov	r0, r3
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <_ZN12CliContainerD1Ev>:
	~CliContainer(){}
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4618      	mov	r0, r3
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <_ZN7Monitor10thresholdsC1Ev>:
	double warning_threshhold;
	double critical_threshhold;
}_SETTINGS;
class Monitor{
private:
	struct thresholds{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	4b08      	ldr	r3, [pc, #32]	; (8002600 <_ZN7Monitor10thresholdsC1Ev+0x30>)
 80025e0:	e9c1 2300 	strd	r2, r3, [r1]
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	4b06      	ldr	r3, [pc, #24]	; (8002604 <_ZN7Monitor10thresholdsC1Ev+0x34>)
 80025ec:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	403a0000 	.word	0x403a0000
 8002604:	403c0000 	.word	0x403c0000

08002608 <_ZN7MonitorC1Ev>:
		double critical = 28;
	};
	thresholds values;
	dht_STATE state;
public:
	Monitor(){}
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff ffdc 	bl	80025d0 <_ZN7Monitor10thresholdsC1Ev>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <_ZN7Monitor10getwarningEv>:
	}
	void SetCriticalValue(double num)
	{
		values.critical = num;
	}
	double getwarning()
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
		{
			return values.warning;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002630:	ec43 2b17 	vmov	d7, r2, r3
		}
 8002634:	eeb0 0a47 	vmov.f32	s0, s14
 8002638:	eef0 0a67 	vmov.f32	s1, s15
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <_ZN7Monitor11getcriticalEv>:
	double getcritical()
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
		{
			return values.critical;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002654:	ec43 2b17 	vmov	d7, r2, r3
		}
 8002658:	eeb0 0a47 	vmov.f32	s0, s14
 800265c:	eef0 0a67 	vmov.f32	s1, s15
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <_ZN7Monitor8getstateEv>:
	dht_STATE getstate()
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
	{
		return state;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	7c1b      	ldrb	r3, [r3, #16]
	}
 8002676:	4618      	mov	r0, r3
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <_ZN7Monitor8setstateE9dht_STATE>:
	void setstate(dht_STATE State)
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	460b      	mov	r3, r1
 800268c:	70fb      	strb	r3, [r7, #3]
	{
		state = State;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	78fa      	ldrb	r2, [r7, #3]
 8002692:	741a      	strb	r2, [r3, #16]
	}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <_write>:
BUZZER buzzer = BUZZER(&htim3);
Monitor monitor = Monitor();
int buzz_off = 0;


int _write(int fd, char *ptr, int len) {
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	f04f 33ff 	mov.w	r3, #4294967295
 80026b4:	68b9      	ldr	r1, [r7, #8]
 80026b6:	4804      	ldr	r0, [pc, #16]	; (80026c8 <_write+0x28>)
 80026b8:	f005 f9ac 	bl	8007a14 <HAL_UART_Transmit>
	return len;
 80026bc:	687b      	ldr	r3, [r7, #4]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	2000042c 	.word	0x2000042c

080026cc <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	80fb      	strh	r3, [r7, #6]
	dht.Dht_onGpioInterrupt(pin_4_Pin);
 80026d6:	2120      	movs	r1, #32
 80026d8:	480c      	ldr	r0, [pc, #48]	; (800270c <HAL_GPIO_EXTI_Callback+0x40>)
 80026da:	f7ff f841 	bl	8001760 <_ZN3DHT19Dht_onGpioInterruptEt>
	if(HAL_GPIO_ReadPin(button_GPIO_Port, button_Pin) == 0){
 80026de:	2108      	movs	r1, #8
 80026e0:	480b      	ldr	r0, [pc, #44]	; (8002710 <HAL_GPIO_EXTI_Callback+0x44>)
 80026e2:	f001 f82d 	bl	8003740 <HAL_GPIO_ReadPin>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	bf0c      	ite	eq
 80026ec:	2301      	moveq	r3, #1
 80026ee:	2300      	movne	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d006      	beq.n	8002704 <HAL_GPIO_EXTI_Callback+0x38>
		monitor.setstate(CRITICAL_STATE_NO_BUZZER);
 80026f6:	2103      	movs	r1, #3
 80026f8:	4806      	ldr	r0, [pc, #24]	; (8002714 <HAL_GPIO_EXTI_Callback+0x48>)
 80026fa:	f7ff ffc2 	bl	8002682 <_ZN7Monitor8setstateE9dht_STATE>
		buzzer.buzzerStopPlay();
 80026fe:	4806      	ldr	r0, [pc, #24]	; (8002718 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002700:	f7ff ff3a 	bl	8002578 <_ZN6BUZZER14buzzerStopPlayEv>
	}

}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	200004c8 	.word	0x200004c8
 8002710:	48000400 	.word	0x48000400
 8002714:	200005b0 	.word	0x200005b0
 8002718:	200005ac 	.word	0x200005ac

0800271c <mycallback>:
void mycallback(){
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0

}
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <mymaininit>:

void mymaininit()
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002730:	2036      	movs	r0, #54	; 0x36
 8002732:	f000 fdcd 	bl	80032d0 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim6);
 8002736:	4807      	ldr	r0, [pc, #28]	; (8002754 <mymaininit+0x28>)
 8002738:	f003 feb4 	bl	80064a4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim3);
 800273c:	4806      	ldr	r0, [pc, #24]	; (8002758 <mymaininit+0x2c>)
 800273e:	f003 fe21 	bl	8006384 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim1);
 8002742:	4806      	ldr	r0, [pc, #24]	; (800275c <mymaininit+0x30>)
 8002744:	f003 feae 	bl	80064a4 <HAL_TIM_Base_Start_IT>
	container.initCLIcontainer();
 8002748:	4805      	ldr	r0, [pc, #20]	; (8002760 <mymaininit+0x34>)
 800274a:	f7fe fdc5 	bl	80012d8 <_ZN12CliContainer16initCLIcontainerEv>
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	200003e0 	.word	0x200003e0
 8002758:	20000394 	.word	0x20000394
 800275c:	20000348 	.word	0x20000348
 8002760:	200004f4 	.word	0x200004f4

08002764 <READ_TEMP_func>:
{

}

void READ_TEMP_func(void *argument)
{
 8002764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	  mymaininit();
 800276c:	f7ff ffde 	bl	800272c <mymaininit>

  /* Infinite loop */
  for(;;)
  {
  osSemaphoreAcquire(DHT_MONITORHandle, 0xFF);
 8002770:	4b40      	ldr	r3, [pc, #256]	; (8002874 <READ_TEMP_func+0x110>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	21ff      	movs	r1, #255	; 0xff
 8002776:	4618      	mov	r0, r3
 8002778:	f007 fa5c 	bl	8009c34 <osSemaphoreAcquire>

	  if(dht.Dht_hasData()){
 800277c:	483e      	ldr	r0, [pc, #248]	; (8002878 <READ_TEMP_func+0x114>)
 800277e:	f7ff f88b 	bl	8001898 <_ZN3DHT11Dht_hasDataEv>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	bf14      	ite	ne
 8002788:	2301      	movne	r3, #1
 800278a:	2300      	moveq	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0ee      	beq.n	8002770 <READ_TEMP_func+0xc>
		 if(monitor.getstate() == CRITICAL_STATE_NO_BUZZER && dht.get_temperature()>= monitor.getcritical() ){
 8002792:	483a      	ldr	r0, [pc, #232]	; (800287c <READ_TEMP_func+0x118>)
 8002794:	f7ff ff69 	bl	800266a <_ZN7Monitor8getstateEv>
 8002798:	4603      	mov	r3, r0
 800279a:	2b03      	cmp	r3, #3
 800279c:	d112      	bne.n	80027c4 <READ_TEMP_func+0x60>
 800279e:	4836      	ldr	r0, [pc, #216]	; (8002878 <READ_TEMP_func+0x114>)
 80027a0:	f7ff f898 	bl	80018d4 <_ZN3DHT15get_temperatureEv>
 80027a4:	ec55 4b10 	vmov	r4, r5, d0
 80027a8:	4834      	ldr	r0, [pc, #208]	; (800287c <READ_TEMP_func+0x118>)
 80027aa:	f7ff ff4c 	bl	8002646 <_ZN7Monitor11getcriticalEv>
 80027ae:	ec53 2b10 	vmov	r2, r3, d0
 80027b2:	4620      	mov	r0, r4
 80027b4:	4629      	mov	r1, r5
 80027b6:	f7fe f9b5 	bl	8000b24 <__aeabi_dcmpge>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <READ_TEMP_func+0x60>
 80027c0:	2301      	movs	r3, #1
 80027c2:	e000      	b.n	80027c6 <READ_TEMP_func+0x62>
 80027c4:	2300      	movs	r3, #0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <READ_TEMP_func+0x6e>
			 ledblue.Is_blink();
 80027ca:	482d      	ldr	r0, [pc, #180]	; (8002880 <READ_TEMP_func+0x11c>)
 80027cc:	f7ff f8e9 	bl	80019a2 <_ZN3LED8Is_blinkEv>
 80027d0:	e046      	b.n	8002860 <READ_TEMP_func+0xfc>
		 }
		 else if(dht.get_temperature()>= monitor.getcritical()){
 80027d2:	4829      	ldr	r0, [pc, #164]	; (8002878 <READ_TEMP_func+0x114>)
 80027d4:	f7ff f87e 	bl	80018d4 <_ZN3DHT15get_temperatureEv>
 80027d8:	ec55 4b10 	vmov	r4, r5, d0
 80027dc:	4827      	ldr	r0, [pc, #156]	; (800287c <READ_TEMP_func+0x118>)
 80027de:	f7ff ff32 	bl	8002646 <_ZN7Monitor11getcriticalEv>
 80027e2:	ec53 2b10 	vmov	r2, r3, d0
 80027e6:	2101      	movs	r1, #1
 80027e8:	460e      	mov	r6, r1
 80027ea:	4620      	mov	r0, r4
 80027ec:	4629      	mov	r1, r5
 80027ee:	f7fe f999 	bl	8000b24 <__aeabi_dcmpge>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <READ_TEMP_func+0x98>
 80027f8:	2300      	movs	r3, #0
 80027fa:	461e      	mov	r6, r3
 80027fc:	b2f3      	uxtb	r3, r6
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00a      	beq.n	8002818 <READ_TEMP_func+0xb4>
			 monitor.setstate(CRITICAL_STATE);
 8002802:	2102      	movs	r1, #2
 8002804:	481d      	ldr	r0, [pc, #116]	; (800287c <READ_TEMP_func+0x118>)
 8002806:	f7ff ff3c 	bl	8002682 <_ZN7Monitor8setstateE9dht_STATE>
			 ledblue.Is_blink();
 800280a:	481d      	ldr	r0, [pc, #116]	; (8002880 <READ_TEMP_func+0x11c>)
 800280c:	f7ff f8c9 	bl	80019a2 <_ZN3LED8Is_blinkEv>
			 buzzer.buzzerStartPlay();
 8002810:	481c      	ldr	r0, [pc, #112]	; (8002884 <READ_TEMP_func+0x120>)
 8002812:	f7ff fe99 	bl	8002548 <_ZN6BUZZER15buzzerStartPlayEv>
 8002816:	e023      	b.n	8002860 <READ_TEMP_func+0xfc>
		 }
		 else if(dht.get_temperature()>= monitor.getwarning()){
 8002818:	4817      	ldr	r0, [pc, #92]	; (8002878 <READ_TEMP_func+0x114>)
 800281a:	f7ff f85b 	bl	80018d4 <_ZN3DHT15get_temperatureEv>
 800281e:	ec55 4b10 	vmov	r4, r5, d0
 8002822:	4816      	ldr	r0, [pc, #88]	; (800287c <READ_TEMP_func+0x118>)
 8002824:	f7ff fefd 	bl	8002622 <_ZN7Monitor10getwarningEv>
 8002828:	ec53 2b10 	vmov	r2, r3, d0
 800282c:	2101      	movs	r1, #1
 800282e:	460e      	mov	r6, r1
 8002830:	4620      	mov	r0, r4
 8002832:	4629      	mov	r1, r5
 8002834:	f7fe f976 	bl	8000b24 <__aeabi_dcmpge>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <READ_TEMP_func+0xde>
 800283e:	2300      	movs	r3, #0
 8002840:	461e      	mov	r6, r3
 8002842:	b2f3      	uxtb	r3, r6
 8002844:	2b00      	cmp	r3, #0
 8002846:	d007      	beq.n	8002858 <READ_TEMP_func+0xf4>
			 monitor.setstate(WARRNING_STATE);
 8002848:	2101      	movs	r1, #1
 800284a:	480c      	ldr	r0, [pc, #48]	; (800287c <READ_TEMP_func+0x118>)
 800284c:	f7ff ff19 	bl	8002682 <_ZN7Monitor8setstateE9dht_STATE>
			 ledblue.Led_On();
 8002850:	480b      	ldr	r0, [pc, #44]	; (8002880 <READ_TEMP_func+0x11c>)
 8002852:	f7ff f86b 	bl	800192c <_ZN3LED6Led_OnEv>
 8002856:	e003      	b.n	8002860 <READ_TEMP_func+0xfc>
		 }
		 else {
			 monitor.setstate(NORMAL_STATE);
 8002858:	2100      	movs	r1, #0
 800285a:	4808      	ldr	r0, [pc, #32]	; (800287c <READ_TEMP_func+0x118>)
 800285c:	f7ff ff11 	bl	8002682 <_ZN7Monitor8setstateE9dht_STATE>
		 }
		 printf("temp is %f\r\n",dht.get_temperature());
 8002860:	4805      	ldr	r0, [pc, #20]	; (8002878 <READ_TEMP_func+0x114>)
 8002862:	f7ff f837 	bl	80018d4 <_ZN3DHT15get_temperatureEv>
 8002866:	ec53 2b10 	vmov	r2, r3, d0
 800286a:	4807      	ldr	r0, [pc, #28]	; (8002888 <READ_TEMP_func+0x124>)
 800286c:	f00b f8c6 	bl	800d9fc <iprintf>
  osSemaphoreAcquire(DHT_MONITORHandle, 0xFF);
 8002870:	e77e      	b.n	8002770 <READ_TEMP_func+0xc>
 8002872:	bf00      	nop
 8002874:	200004c0 	.word	0x200004c0
 8002878:	200004c8 	.word	0x200004c8
 800287c:	200005b0 	.word	0x200005b0
 8002880:	20000598 	.word	0x20000598
 8002884:	200005ac 	.word	0x200005ac
 8002888:	08010660 	.word	0x08010660

0800288c <comtask_func>:
  }
  /* USER CODE END 5 */
}

void comtask_func(void *argument)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN comtask_func */

	/* Infinite loop */
	for (;;) {

		if (commTask()) {
 8002894:	f7ff fa88 	bl	8001da8 <_Z8commTaskv>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	bf14      	ite	ne
 800289e:	2301      	movne	r3, #1
 80028a0:	2300      	moveq	r3, #0
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0f5      	beq.n	8002894 <comtask_func+0x8>
			handleCommand();
 80028a8:	f7ff fb02 	bl	8001eb0 <_Z13handleCommandv>
		if (commTask()) {
 80028ac:	e7f2      	b.n	8002894 <comtask_func+0x8>
	...

080028b0 <monitor_func>:
		}
	}
	/* USER CODE END comtask_func */
}
void monitor_func(void *argument)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 /* USER CODE BEGIN monitor_func */
 /* Infinite loop */
 for(;;)
 {
	 osSemaphoreRelease(DHT_MONITORHandle);
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <monitor_func+0x24>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f007 fa0b 	bl	8009cd8 <osSemaphoreRelease>
	 dht.Dht_readAsync();
 80028c2:	4805      	ldr	r0, [pc, #20]	; (80028d8 <monitor_func+0x28>)
 80028c4:	f7fe ff24 	bl	8001710 <_ZN3DHT13Dht_readAsyncEv>
	 osDelay(1000);
 80028c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028cc:	f007 f90e 	bl	8009aec <osDelay>
	 osSemaphoreRelease(DHT_MONITORHandle);
 80028d0:	e7f2      	b.n	80028b8 <monitor_func+0x8>
 80028d2:	bf00      	nop
 80028d4:	200004c0 	.word	0x200004c0
 80028d8:	200004c8 	.word	0x200004c8

080028dc <blink_func>:
 }

 /* USER CODE END monitor_func */
}
void blink_func(void *argument)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 /* USER CODE BEGIN blink_func */
 /* Infinite loop */
 for(;;)
 {
	 if(ledblue.getState() == LED_STATE_BLINK){
 80028e4:	4808      	ldr	r0, [pc, #32]	; (8002908 <blink_func+0x2c>)
 80028e6:	f7ff f869 	bl	80019bc <_ZN3LED8getStateEv>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	bf0c      	ite	eq
 80028f0:	2301      	moveq	r3, #1
 80028f2:	2300      	movne	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <blink_func+0x26>
		 ledblue.Led_Blink();
 80028fa:	4803      	ldr	r0, [pc, #12]	; (8002908 <blink_func+0x2c>)
 80028fc:	f7ff f83c 	bl	8001978 <_ZN3LED9Led_BlinkEv>
 8002900:	e7f0      	b.n	80028e4 <blink_func+0x8>
	 }
	 else {
		 osThreadYield();
 8002902:	f007 f8d3 	bl	8009aac <osThreadYield>
	 if(ledblue.getState() == LED_STATE_BLINK){
 8002906:	e7ed      	b.n	80028e4 <blink_func+0x8>
 8002908:	20000598 	.word	0x20000598

0800290c <_Z41__static_initialization_and_destruction_0ii>:
		FRAME_0,FRAME_1,
		FRAME_0,FRAME_1,
		FRAME_2,FRAME_2,FRAME_0,
		0

};
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d11f      	bne.n	800295c <_Z41__static_initialization_and_destruction_0ii+0x50>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002922:	4293      	cmp	r3, r2
 8002924:	d11a      	bne.n	800295c <_Z41__static_initialization_and_destruction_0ii+0x50>
DHT dht = DHT(GPIOB,pin_4_Pin);
 8002926:	2220      	movs	r2, #32
 8002928:	4914      	ldr	r1, [pc, #80]	; (800297c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800292a:	4815      	ldr	r0, [pc, #84]	; (8002980 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800292c:	f7fe fea6 	bl	800167c <_ZN3DHTC1EP12GPIO_TypeDeft>
_RTC rtc = _RTC(&hi2c1,0xD0);
 8002930:	22d0      	movs	r2, #208	; 0xd0
 8002932:	4914      	ldr	r1, [pc, #80]	; (8002984 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8002934:	4814      	ldr	r0, [pc, #80]	; (8002988 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8002936:	f7ff f84d 	bl	80019d4 <_ZN4_RTCC1EP19__I2C_HandleTypeDefm>
CliContainer container = CliContainer();
 800293a:	4814      	ldr	r0, [pc, #80]	; (800298c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800293c:	f7ff fe2e 	bl	800259c <_ZN12CliContainerC1Ev>
LED ledblue = LED(LD2_GPIO_Port, LD2_Pin);
 8002940:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002944:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002948:	4811      	ldr	r0, [pc, #68]	; (8002990 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800294a:	f7fe ffd5 	bl	80018f8 <_ZN3LEDC1EP12GPIO_TypeDeft>
BUZZER buzzer = BUZZER(&htim3);
 800294e:	4911      	ldr	r1, [pc, #68]	; (8002994 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002950:	4811      	ldr	r0, [pc, #68]	; (8002998 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002952:	f7ff fdec 	bl	800252e <_ZN6BUZZERC1EP17TIM_HandleTypeDef>
Monitor monitor = Monitor();
 8002956:	4811      	ldr	r0, [pc, #68]	; (800299c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8002958:	f7ff fe56 	bl	8002608 <_ZN7MonitorC1Ev>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d107      	bne.n	8002972 <_Z41__static_initialization_and_destruction_0ii+0x66>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002968:	4293      	cmp	r3, r2
 800296a:	d102      	bne.n	8002972 <_Z41__static_initialization_and_destruction_0ii+0x66>
CliContainer container = CliContainer();
 800296c:	4807      	ldr	r0, [pc, #28]	; (800298c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800296e:	f7ff fe24 	bl	80025ba <_ZN12CliContainerD1Ev>
};
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	48000400 	.word	0x48000400
 8002980:	200004c8 	.word	0x200004c8
 8002984:	20000290 	.word	0x20000290
 8002988:	200004e8 	.word	0x200004e8
 800298c:	200004f4 	.word	0x200004f4
 8002990:	20000598 	.word	0x20000598
 8002994:	20000394 	.word	0x20000394
 8002998:	200005ac 	.word	0x200005ac
 800299c:	200005b0 	.word	0x200005b0

080029a0 <_GLOBAL__sub_I_dht>:
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80029a8:	2001      	movs	r0, #1
 80029aa:	f7ff ffaf 	bl	800290c <_Z41__static_initialization_and_destruction_0ii>
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <_GLOBAL__sub_D_dht>:
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80029b8:	2000      	movs	r0, #0
 80029ba:	f7ff ffa7 	bl	800290c <_Z41__static_initialization_and_destruction_0ii>
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029c6:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <HAL_MspInit+0x4c>)
 80029c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ca:	4a10      	ldr	r2, [pc, #64]	; (8002a0c <HAL_MspInit+0x4c>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	6613      	str	r3, [r2, #96]	; 0x60
 80029d2:	4b0e      	ldr	r3, [pc, #56]	; (8002a0c <HAL_MspInit+0x4c>)
 80029d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	607b      	str	r3, [r7, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029de:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_MspInit+0x4c>)
 80029e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e2:	4a0a      	ldr	r2, [pc, #40]	; (8002a0c <HAL_MspInit+0x4c>)
 80029e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e8:	6593      	str	r3, [r2, #88]	; 0x58
 80029ea:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <HAL_MspInit+0x4c>)
 80029ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f2:	603b      	str	r3, [r7, #0]
 80029f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80029f6:	2200      	movs	r2, #0
 80029f8:	210f      	movs	r1, #15
 80029fa:	f06f 0001 	mvn.w	r0, #1
 80029fe:	f000 fc4b 	bl	8003298 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40021000 	.word	0x40021000

08002a10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b0ac      	sub	sp, #176	; 0xb0
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a28:	f107 0314 	add.w	r3, r7, #20
 8002a2c:	2288      	movs	r2, #136	; 0x88
 8002a2e:	2100      	movs	r1, #0
 8002a30:	4618      	mov	r0, r3
 8002a32:	f00a fa91 	bl	800cf58 <memset>
  if(hi2c->Instance==I2C1)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a21      	ldr	r2, [pc, #132]	; (8002ac0 <HAL_I2C_MspInit+0xb0>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d13b      	bne.n	8002ab8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002a40:	2340      	movs	r3, #64	; 0x40
 8002a42:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002a44:	2300      	movs	r3, #0
 8002a46:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a48:	f107 0314 	add.w	r3, r7, #20
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f002 fb6b 	bl	8005128 <HAL_RCCEx_PeriphCLKConfig>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002a58:	f7ff fd64 	bl	8002524 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a5c:	4b19      	ldr	r3, [pc, #100]	; (8002ac4 <HAL_I2C_MspInit+0xb4>)
 8002a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a60:	4a18      	ldr	r2, [pc, #96]	; (8002ac4 <HAL_I2C_MspInit+0xb4>)
 8002a62:	f043 0302 	orr.w	r3, r3, #2
 8002a66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a68:	4b16      	ldr	r3, [pc, #88]	; (8002ac4 <HAL_I2C_MspInit+0xb4>)
 8002a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	613b      	str	r3, [r7, #16]
 8002a72:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a7c:	2312      	movs	r3, #18
 8002a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a82:	2300      	movs	r3, #0
 8002a84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a8e:	2304      	movs	r3, #4
 8002a90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a94:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a98:	4619      	mov	r1, r3
 8002a9a:	480b      	ldr	r0, [pc, #44]	; (8002ac8 <HAL_I2C_MspInit+0xb8>)
 8002a9c:	f000 fca6 	bl	80033ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002aa0:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <HAL_I2C_MspInit+0xb4>)
 8002aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa4:	4a07      	ldr	r2, [pc, #28]	; (8002ac4 <HAL_I2C_MspInit+0xb4>)
 8002aa6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002aaa:	6593      	str	r3, [r2, #88]	; 0x58
 8002aac:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <HAL_I2C_MspInit+0xb4>)
 8002aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ab8:	bf00      	nop
 8002aba:	37b0      	adds	r7, #176	; 0xb0
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40005400 	.word	0x40005400
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	48000400 	.word	0x48000400

08002acc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08a      	sub	sp, #40	; 0x28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad4:	f107 0314 	add.w	r3, r7, #20
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	60da      	str	r2, [r3, #12]
 8002ae2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a17      	ldr	r2, [pc, #92]	; (8002b48 <HAL_SPI_MspInit+0x7c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d128      	bne.n	8002b40 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002aee:	4b17      	ldr	r3, [pc, #92]	; (8002b4c <HAL_SPI_MspInit+0x80>)
 8002af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af2:	4a16      	ldr	r2, [pc, #88]	; (8002b4c <HAL_SPI_MspInit+0x80>)
 8002af4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002af8:	6613      	str	r3, [r2, #96]	; 0x60
 8002afa:	4b14      	ldr	r3, [pc, #80]	; (8002b4c <HAL_SPI_MspInit+0x80>)
 8002afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002afe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b02:	613b      	str	r3, [r7, #16]
 8002b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b06:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <HAL_SPI_MspInit+0x80>)
 8002b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0a:	4a10      	ldr	r2, [pc, #64]	; (8002b4c <HAL_SPI_MspInit+0x80>)
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b12:	4b0e      	ldr	r3, [pc, #56]	; (8002b4c <HAL_SPI_MspInit+0x80>)
 8002b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002b1e:	23e0      	movs	r3, #224	; 0xe0
 8002b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b22:	2302      	movs	r3, #2
 8002b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b2e:	2305      	movs	r3, #5
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b32:	f107 0314 	add.w	r3, r7, #20
 8002b36:	4619      	mov	r1, r3
 8002b38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b3c:	f000 fc56 	bl	80033ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002b40:	bf00      	nop
 8002b42:	3728      	adds	r7, #40	; 0x28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40013000 	.word	0x40013000
 8002b4c:	40021000 	.word	0x40021000

08002b50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a27      	ldr	r2, [pc, #156]	; (8002bfc <HAL_TIM_Base_MspInit+0xac>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d114      	bne.n	8002b8c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b62:	4b27      	ldr	r3, [pc, #156]	; (8002c00 <HAL_TIM_Base_MspInit+0xb0>)
 8002b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b66:	4a26      	ldr	r2, [pc, #152]	; (8002c00 <HAL_TIM_Base_MspInit+0xb0>)
 8002b68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b6c:	6613      	str	r3, [r2, #96]	; 0x60
 8002b6e:	4b24      	ldr	r3, [pc, #144]	; (8002c00 <HAL_TIM_Base_MspInit+0xb0>)
 8002b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	210f      	movs	r1, #15
 8002b7e:	2019      	movs	r0, #25
 8002b80:	f000 fb8a 	bl	8003298 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002b84:	2019      	movs	r0, #25
 8002b86:	f000 fba3 	bl	80032d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002b8a:	e032      	b.n	8002bf2 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a1c      	ldr	r2, [pc, #112]	; (8002c04 <HAL_TIM_Base_MspInit+0xb4>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d114      	bne.n	8002bc0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b96:	4b1a      	ldr	r3, [pc, #104]	; (8002c00 <HAL_TIM_Base_MspInit+0xb0>)
 8002b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9a:	4a19      	ldr	r2, [pc, #100]	; (8002c00 <HAL_TIM_Base_MspInit+0xb0>)
 8002b9c:	f043 0302 	orr.w	r3, r3, #2
 8002ba0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ba2:	4b17      	ldr	r3, [pc, #92]	; (8002c00 <HAL_TIM_Base_MspInit+0xb0>)
 8002ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	613b      	str	r3, [r7, #16]
 8002bac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2105      	movs	r1, #5
 8002bb2:	201d      	movs	r0, #29
 8002bb4:	f000 fb70 	bl	8003298 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002bb8:	201d      	movs	r0, #29
 8002bba:	f000 fb89 	bl	80032d0 <HAL_NVIC_EnableIRQ>
}
 8002bbe:	e018      	b.n	8002bf2 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM6)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a10      	ldr	r2, [pc, #64]	; (8002c08 <HAL_TIM_Base_MspInit+0xb8>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d113      	bne.n	8002bf2 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002bca:	4b0d      	ldr	r3, [pc, #52]	; (8002c00 <HAL_TIM_Base_MspInit+0xb0>)
 8002bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bce:	4a0c      	ldr	r2, [pc, #48]	; (8002c00 <HAL_TIM_Base_MspInit+0xb0>)
 8002bd0:	f043 0310 	orr.w	r3, r3, #16
 8002bd4:	6593      	str	r3, [r2, #88]	; 0x58
 8002bd6:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <HAL_TIM_Base_MspInit+0xb0>)
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bda:	f003 0310 	and.w	r3, r3, #16
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002be2:	2200      	movs	r2, #0
 8002be4:	2105      	movs	r1, #5
 8002be6:	2036      	movs	r0, #54	; 0x36
 8002be8:	f000 fb56 	bl	8003298 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002bec:	2036      	movs	r0, #54	; 0x36
 8002bee:	f000 fb6f 	bl	80032d0 <HAL_NVIC_EnableIRQ>
}
 8002bf2:	bf00      	nop
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40012c00 	.word	0x40012c00
 8002c00:	40021000 	.word	0x40021000
 8002c04:	40000400 	.word	0x40000400
 8002c08:	40001000 	.word	0x40001000

08002c0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b088      	sub	sp, #32
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c14:	f107 030c 	add.w	r3, r7, #12
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	60da      	str	r2, [r3, #12]
 8002c22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a11      	ldr	r2, [pc, #68]	; (8002c70 <HAL_TIM_MspPostInit+0x64>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d11b      	bne.n	8002c66 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c2e:	4b11      	ldr	r3, [pc, #68]	; (8002c74 <HAL_TIM_MspPostInit+0x68>)
 8002c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c32:	4a10      	ldr	r2, [pc, #64]	; (8002c74 <HAL_TIM_MspPostInit+0x68>)
 8002c34:	f043 0302 	orr.w	r3, r3, #2
 8002c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c3a:	4b0e      	ldr	r3, [pc, #56]	; (8002c74 <HAL_TIM_MspPostInit+0x68>)
 8002c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	60bb      	str	r3, [r7, #8]
 8002c44:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002c46:	2310      	movs	r3, #16
 8002c48:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c56:	2302      	movs	r3, #2
 8002c58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c5a:	f107 030c 	add.w	r3, r7, #12
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4805      	ldr	r0, [pc, #20]	; (8002c78 <HAL_TIM_MspPostInit+0x6c>)
 8002c62:	f000 fbc3 	bl	80033ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002c66:	bf00      	nop
 8002c68:	3720      	adds	r7, #32
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40000400 	.word	0x40000400
 8002c74:	40021000 	.word	0x40021000
 8002c78:	48000400 	.word	0x48000400

08002c7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b0ac      	sub	sp, #176	; 0xb0
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	605a      	str	r2, [r3, #4]
 8002c8e:	609a      	str	r2, [r3, #8]
 8002c90:	60da      	str	r2, [r3, #12]
 8002c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c94:	f107 0314 	add.w	r3, r7, #20
 8002c98:	2288      	movs	r2, #136	; 0x88
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f00a f95b 	bl	800cf58 <memset>
  if(huart->Instance==USART2)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a25      	ldr	r2, [pc, #148]	; (8002d3c <HAL_UART_MspInit+0xc0>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d143      	bne.n	8002d34 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002cac:	2302      	movs	r3, #2
 8002cae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cb4:	f107 0314 	add.w	r3, r7, #20
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f002 fa35 	bl	8005128 <HAL_RCCEx_PeriphCLKConfig>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002cc4:	f7ff fc2e 	bl	8002524 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cc8:	4b1d      	ldr	r3, [pc, #116]	; (8002d40 <HAL_UART_MspInit+0xc4>)
 8002cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ccc:	4a1c      	ldr	r2, [pc, #112]	; (8002d40 <HAL_UART_MspInit+0xc4>)
 8002cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd2:	6593      	str	r3, [r2, #88]	; 0x58
 8002cd4:	4b1a      	ldr	r3, [pc, #104]	; (8002d40 <HAL_UART_MspInit+0xc4>)
 8002cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce0:	4b17      	ldr	r3, [pc, #92]	; (8002d40 <HAL_UART_MspInit+0xc4>)
 8002ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce4:	4a16      	ldr	r2, [pc, #88]	; (8002d40 <HAL_UART_MspInit+0xc4>)
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cec:	4b14      	ldr	r3, [pc, #80]	; (8002d40 <HAL_UART_MspInit+0xc4>)
 8002cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	60fb      	str	r3, [r7, #12]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002cf8:	230c      	movs	r3, #12
 8002cfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfe:	2302      	movs	r3, #2
 8002d00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d04:	2300      	movs	r3, #0
 8002d06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d10:	2307      	movs	r3, #7
 8002d12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d16:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d20:	f000 fb64 	bl	80033ec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002d24:	2200      	movs	r2, #0
 8002d26:	2105      	movs	r1, #5
 8002d28:	2026      	movs	r0, #38	; 0x26
 8002d2a:	f000 fab5 	bl	8003298 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002d2e:	2026      	movs	r0, #38	; 0x26
 8002d30:	f000 face 	bl	80032d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d34:	bf00      	nop
 8002d36:	37b0      	adds	r7, #176	; 0xb0
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40004400 	.word	0x40004400
 8002d40:	40021000 	.word	0x40021000

08002d44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08c      	sub	sp, #48	; 0x30
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002d50:	2300      	movs	r3, #0
 8002d52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8002d54:	2200      	movs	r2, #0
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	2019      	movs	r0, #25
 8002d5a:	f000 fa9d 	bl	8003298 <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002d5e:	2019      	movs	r0, #25
 8002d60:	f000 fab6 	bl	80032d0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8002d64:	4b1e      	ldr	r3, [pc, #120]	; (8002de0 <HAL_InitTick+0x9c>)
 8002d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d68:	4a1d      	ldr	r2, [pc, #116]	; (8002de0 <HAL_InitTick+0x9c>)
 8002d6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d6e:	6613      	str	r3, [r2, #96]	; 0x60
 8002d70:	4b1b      	ldr	r3, [pc, #108]	; (8002de0 <HAL_InitTick+0x9c>)
 8002d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d7c:	f107 0210 	add.w	r2, r7, #16
 8002d80:	f107 0314 	add.w	r3, r7, #20
 8002d84:	4611      	mov	r1, r2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f002 f93c 	bl	8005004 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002d8c:	f002 f924 	bl	8004fd8 <HAL_RCC_GetPCLK2Freq>
 8002d90:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d94:	4a13      	ldr	r2, [pc, #76]	; (8002de4 <HAL_InitTick+0xa0>)
 8002d96:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9a:	0c9b      	lsrs	r3, r3, #18
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8002da0:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <HAL_InitTick+0xa4>)
 8002da2:	4a12      	ldr	r2, [pc, #72]	; (8002dec <HAL_InitTick+0xa8>)
 8002da4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8002da6:	4b10      	ldr	r3, [pc, #64]	; (8002de8 <HAL_InitTick+0xa4>)
 8002da8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002dac:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8002dae:	4a0e      	ldr	r2, [pc, #56]	; (8002de8 <HAL_InitTick+0xa4>)
 8002db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db2:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8002db4:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <HAL_InitTick+0xa4>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dba:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <HAL_InitTick+0xa4>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8002dc0:	4809      	ldr	r0, [pc, #36]	; (8002de8 <HAL_InitTick+0xa4>)
 8002dc2:	f003 fa87 	bl	80062d4 <HAL_TIM_Base_Init>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d104      	bne.n	8002dd6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 8002dcc:	4806      	ldr	r0, [pc, #24]	; (8002de8 <HAL_InitTick+0xa4>)
 8002dce:	f003 fb69 	bl	80064a4 <HAL_TIM_Base_Start_IT>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	e000      	b.n	8002dd8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3730      	adds	r7, #48	; 0x30
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40021000 	.word	0x40021000
 8002de4:	431bde83 	.word	0x431bde83
 8002de8:	200005c8 	.word	0x200005c8
 8002dec:	40014400 	.word	0x40014400

08002df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002df4:	e7fe      	b.n	8002df4 <NMI_Handler+0x4>

08002df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002df6:	b480      	push	{r7}
 8002df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dfa:	e7fe      	b.n	8002dfa <HardFault_Handler+0x4>

08002dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e00:	e7fe      	b.n	8002e00 <MemManage_Handler+0x4>

08002e02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e02:	b480      	push	{r7}
 8002e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e06:	e7fe      	b.n	8002e06 <BusFault_Handler+0x4>

08002e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e0c:	e7fe      	b.n	8002e0c <UsageFault_Handler+0x4>

08002e0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e12:	bf00      	nop
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(pin_4_Pin);
 8002e20:	2020      	movs	r0, #32
 8002e22:	f000 fcd7 	bl	80037d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002e26:	bf00      	nop
 8002e28:	bd80      	pop	{r7, pc}
	...

08002e2c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e30:	4803      	ldr	r0, [pc, #12]	; (8002e40 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002e32:	f003 fda5 	bl	8006980 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002e36:	4803      	ldr	r0, [pc, #12]	; (8002e44 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002e38:	f003 fda2 	bl	8006980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002e3c:	bf00      	nop
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	20000348 	.word	0x20000348
 8002e44:	200005c8 	.word	0x200005c8

08002e48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e4c:	4802      	ldr	r0, [pc, #8]	; (8002e58 <TIM3_IRQHandler+0x10>)
 8002e4e:	f003 fd97 	bl	8006980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e52:	bf00      	nop
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20000394 	.word	0x20000394

08002e5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002e60:	4802      	ldr	r0, [pc, #8]	; (8002e6c <USART2_IRQHandler+0x10>)
 8002e62:	f004 ff3d 	bl	8007ce0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	2000042c 	.word	0x2000042c

08002e70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002e74:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002e78:	f000 fcac 	bl	80037d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e7c:	bf00      	nop
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002e84:	4802      	ldr	r0, [pc, #8]	; (8002e90 <TIM6_DAC_IRQHandler+0x10>)
 8002e86:	f003 fd7b 	bl	8006980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002e8a:	bf00      	nop
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	200003e0 	.word	0x200003e0

08002e94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
	return 1;
 8002e98:	2301      	movs	r3, #1
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <_kill>:

int _kill(int pid, int sig)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002eae:	f00a f80b 	bl	800cec8 <__errno>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2216      	movs	r2, #22
 8002eb6:	601a      	str	r2, [r3, #0]
	return -1;
 8002eb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <_exit>:

void _exit (int status)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff ffe7 	bl	8002ea4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ed6:	e7fe      	b.n	8002ed6 <_exit+0x12>

08002ed8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	e00a      	b.n	8002f00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002eea:	f3af 8000 	nop.w
 8002eee:	4601      	mov	r1, r0
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	1c5a      	adds	r2, r3, #1
 8002ef4:	60ba      	str	r2, [r7, #8]
 8002ef6:	b2ca      	uxtb	r2, r1
 8002ef8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	3301      	adds	r3, #1
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	dbf0      	blt.n	8002eea <_read+0x12>
	}

return len;
 8002f08:	687b      	ldr	r3, [r7, #4]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
	return -1;
 8002f1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
 8002f32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f3a:	605a      	str	r2, [r3, #4]
	return 0;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <_isatty>:

int _isatty(int file)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
	return 1;
 8002f52:	2301      	movs	r3, #1
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
	return 0;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
	...

08002f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f84:	4a14      	ldr	r2, [pc, #80]	; (8002fd8 <_sbrk+0x5c>)
 8002f86:	4b15      	ldr	r3, [pc, #84]	; (8002fdc <_sbrk+0x60>)
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f90:	4b13      	ldr	r3, [pc, #76]	; (8002fe0 <_sbrk+0x64>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d102      	bne.n	8002f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f98:	4b11      	ldr	r3, [pc, #68]	; (8002fe0 <_sbrk+0x64>)
 8002f9a:	4a12      	ldr	r2, [pc, #72]	; (8002fe4 <_sbrk+0x68>)
 8002f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f9e:	4b10      	ldr	r3, [pc, #64]	; (8002fe0 <_sbrk+0x64>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d207      	bcs.n	8002fbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fac:	f009 ff8c 	bl	800cec8 <__errno>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	220c      	movs	r2, #12
 8002fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fba:	e009      	b.n	8002fd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fbc:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <_sbrk+0x64>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fc2:	4b07      	ldr	r3, [pc, #28]	; (8002fe0 <_sbrk+0x64>)
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4413      	add	r3, r2
 8002fca:	4a05      	ldr	r2, [pc, #20]	; (8002fe0 <_sbrk+0x64>)
 8002fcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fce:	68fb      	ldr	r3, [r7, #12]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3718      	adds	r7, #24
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	20018000 	.word	0x20018000
 8002fdc:	00000400 	.word	0x00000400
 8002fe0:	20000614 	.word	0x20000614
 8002fe4:	200036c8 	.word	0x200036c8

08002fe8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002fec:	4b06      	ldr	r3, [pc, #24]	; (8003008 <SystemInit+0x20>)
 8002fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff2:	4a05      	ldr	r2, [pc, #20]	; (8003008 <SystemInit+0x20>)
 8002ff4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ff8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002ffc:	bf00      	nop
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	e000ed00 	.word	0xe000ed00

0800300c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800300c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003044 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003010:	f7ff ffea 	bl	8002fe8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003014:	480c      	ldr	r0, [pc, #48]	; (8003048 <LoopForever+0x6>)
  ldr r1, =_edata
 8003016:	490d      	ldr	r1, [pc, #52]	; (800304c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003018:	4a0d      	ldr	r2, [pc, #52]	; (8003050 <LoopForever+0xe>)
  movs r3, #0
 800301a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800301c:	e002      	b.n	8003024 <LoopCopyDataInit>

0800301e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800301e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003022:	3304      	adds	r3, #4

08003024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003028:	d3f9      	bcc.n	800301e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800302a:	4a0a      	ldr	r2, [pc, #40]	; (8003054 <LoopForever+0x12>)
  ldr r4, =_ebss
 800302c:	4c0a      	ldr	r4, [pc, #40]	; (8003058 <LoopForever+0x16>)
  movs r3, #0
 800302e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003030:	e001      	b.n	8003036 <LoopFillZerobss>

08003032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003034:	3204      	adds	r2, #4

08003036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003038:	d3fb      	bcc.n	8003032 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800303a:	f009 ff4b 	bl	800ced4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800303e:	f7fe ff53 	bl	8001ee8 <main>

08003042 <LoopForever>:

LoopForever:
    b LoopForever
 8003042:	e7fe      	b.n	8003042 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003044:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800304c:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8003050:	08010cac 	.word	0x08010cac
  ldr r2, =_sbss
 8003054:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003058:	200036c8 	.word	0x200036c8

0800305c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800305c:	e7fe      	b.n	800305c <ADC1_2_IRQHandler>
	...

08003060 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003066:	2300      	movs	r3, #0
 8003068:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800306a:	4b0c      	ldr	r3, [pc, #48]	; (800309c <HAL_Init+0x3c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a0b      	ldr	r2, [pc, #44]	; (800309c <HAL_Init+0x3c>)
 8003070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003074:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003076:	2003      	movs	r0, #3
 8003078:	f000 f903 	bl	8003282 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800307c:	200f      	movs	r0, #15
 800307e:	f7ff fe61 	bl	8002d44 <HAL_InitTick>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	71fb      	strb	r3, [r7, #7]
 800308c:	e001      	b.n	8003092 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800308e:	f7ff fc97 	bl	80029c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003092:	79fb      	ldrb	r3, [r7, #7]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40022000 	.word	0x40022000

080030a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80030a4:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <HAL_IncTick+0x20>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	4b06      	ldr	r3, [pc, #24]	; (80030c4 <HAL_IncTick+0x24>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4413      	add	r3, r2
 80030b0:	4a04      	ldr	r2, [pc, #16]	; (80030c4 <HAL_IncTick+0x24>)
 80030b2:	6013      	str	r3, [r2, #0]
}
 80030b4:	bf00      	nop
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	20000008 	.word	0x20000008
 80030c4:	20000618 	.word	0x20000618

080030c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  return uwTick;
 80030cc:	4b03      	ldr	r3, [pc, #12]	; (80030dc <HAL_GetTick+0x14>)
 80030ce:	681b      	ldr	r3, [r3, #0]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	20000618 	.word	0x20000618

080030e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030e8:	f7ff ffee 	bl	80030c8 <HAL_GetTick>
 80030ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f8:	d005      	beq.n	8003106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80030fa:	4b0a      	ldr	r3, [pc, #40]	; (8003124 <HAL_Delay+0x44>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	461a      	mov	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4413      	add	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003106:	bf00      	nop
 8003108:	f7ff ffde 	bl	80030c8 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	429a      	cmp	r2, r3
 8003116:	d8f7      	bhi.n	8003108 <HAL_Delay+0x28>
  {
  }
}
 8003118:	bf00      	nop
 800311a:	bf00      	nop
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	20000008 	.word	0x20000008

08003128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003138:	4b0c      	ldr	r3, [pc, #48]	; (800316c <__NVIC_SetPriorityGrouping+0x44>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003144:	4013      	ands	r3, r2
 8003146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003150:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800315a:	4a04      	ldr	r2, [pc, #16]	; (800316c <__NVIC_SetPriorityGrouping+0x44>)
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	60d3      	str	r3, [r2, #12]
}
 8003160:	bf00      	nop
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	e000ed00 	.word	0xe000ed00

08003170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003174:	4b04      	ldr	r3, [pc, #16]	; (8003188 <__NVIC_GetPriorityGrouping+0x18>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	0a1b      	lsrs	r3, r3, #8
 800317a:	f003 0307 	and.w	r3, r3, #7
}
 800317e:	4618      	mov	r0, r3
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	e000ed00 	.word	0xe000ed00

0800318c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319a:	2b00      	cmp	r3, #0
 800319c:	db0b      	blt.n	80031b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800319e:	79fb      	ldrb	r3, [r7, #7]
 80031a0:	f003 021f 	and.w	r2, r3, #31
 80031a4:	4907      	ldr	r1, [pc, #28]	; (80031c4 <__NVIC_EnableIRQ+0x38>)
 80031a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031aa:	095b      	lsrs	r3, r3, #5
 80031ac:	2001      	movs	r0, #1
 80031ae:	fa00 f202 	lsl.w	r2, r0, r2
 80031b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	e000e100 	.word	0xe000e100

080031c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	6039      	str	r1, [r7, #0]
 80031d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	db0a      	blt.n	80031f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	490c      	ldr	r1, [pc, #48]	; (8003214 <__NVIC_SetPriority+0x4c>)
 80031e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e6:	0112      	lsls	r2, r2, #4
 80031e8:	b2d2      	uxtb	r2, r2
 80031ea:	440b      	add	r3, r1
 80031ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031f0:	e00a      	b.n	8003208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	4908      	ldr	r1, [pc, #32]	; (8003218 <__NVIC_SetPriority+0x50>)
 80031f8:	79fb      	ldrb	r3, [r7, #7]
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	3b04      	subs	r3, #4
 8003200:	0112      	lsls	r2, r2, #4
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	440b      	add	r3, r1
 8003206:	761a      	strb	r2, [r3, #24]
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	e000e100 	.word	0xe000e100
 8003218:	e000ed00 	.word	0xe000ed00

0800321c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800321c:	b480      	push	{r7}
 800321e:	b089      	sub	sp, #36	; 0x24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f1c3 0307 	rsb	r3, r3, #7
 8003236:	2b04      	cmp	r3, #4
 8003238:	bf28      	it	cs
 800323a:	2304      	movcs	r3, #4
 800323c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	3304      	adds	r3, #4
 8003242:	2b06      	cmp	r3, #6
 8003244:	d902      	bls.n	800324c <NVIC_EncodePriority+0x30>
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	3b03      	subs	r3, #3
 800324a:	e000      	b.n	800324e <NVIC_EncodePriority+0x32>
 800324c:	2300      	movs	r3, #0
 800324e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003250:	f04f 32ff 	mov.w	r2, #4294967295
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	43da      	mvns	r2, r3
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	401a      	ands	r2, r3
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003264:	f04f 31ff 	mov.w	r1, #4294967295
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	fa01 f303 	lsl.w	r3, r1, r3
 800326e:	43d9      	mvns	r1, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003274:	4313      	orrs	r3, r2
         );
}
 8003276:	4618      	mov	r0, r3
 8003278:	3724      	adds	r7, #36	; 0x24
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b082      	sub	sp, #8
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7ff ff4c 	bl	8003128 <__NVIC_SetPriorityGrouping>
}
 8003290:	bf00      	nop
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	4603      	mov	r3, r0
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
 80032a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032aa:	f7ff ff61 	bl	8003170 <__NVIC_GetPriorityGrouping>
 80032ae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	68b9      	ldr	r1, [r7, #8]
 80032b4:	6978      	ldr	r0, [r7, #20]
 80032b6:	f7ff ffb1 	bl	800321c <NVIC_EncodePriority>
 80032ba:	4602      	mov	r2, r0
 80032bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032c0:	4611      	mov	r1, r2
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff ff80 	bl	80031c8 <__NVIC_SetPriority>
}
 80032c8:	bf00      	nop
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	4603      	mov	r3, r0
 80032d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff ff54 	bl	800318c <__NVIC_EnableIRQ>
}
 80032e4:	bf00      	nop
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032f4:	2300      	movs	r3, #0
 80032f6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d008      	beq.n	8003316 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2204      	movs	r2, #4
 8003308:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e022      	b.n	800335c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 020e 	bic.w	r2, r2, #14
 8003324:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0201 	bic.w	r2, r2, #1
 8003334:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333a:	f003 021c 	and.w	r2, r3, #28
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	2101      	movs	r1, #1
 8003344:	fa01 f202 	lsl.w	r2, r1, r2
 8003348:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800335a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800335c:	4618      	mov	r0, r3
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003370:	2300      	movs	r3, #0
 8003372:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d005      	beq.n	800338c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2204      	movs	r2, #4
 8003384:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	73fb      	strb	r3, [r7, #15]
 800338a:	e029      	b.n	80033e0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 020e 	bic.w	r2, r2, #14
 800339a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0201 	bic.w	r2, r2, #1
 80033aa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b0:	f003 021c 	and.w	r2, r3, #28
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b8:	2101      	movs	r1, #1
 80033ba:	fa01 f202 	lsl.w	r2, r1, r2
 80033be:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	4798      	blx	r3
    }
  }
  return status;
 80033e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
	...

080033ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033fa:	e17f      	b.n	80036fc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	2101      	movs	r1, #1
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	fa01 f303 	lsl.w	r3, r1, r3
 8003408:	4013      	ands	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 8171 	beq.w	80036f6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f003 0303 	and.w	r3, r3, #3
 800341c:	2b01      	cmp	r3, #1
 800341e:	d005      	beq.n	800342c <HAL_GPIO_Init+0x40>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 0303 	and.w	r3, r3, #3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d130      	bne.n	800348e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	2203      	movs	r2, #3
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4013      	ands	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	4313      	orrs	r3, r2
 8003454:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003462:	2201      	movs	r2, #1
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43db      	mvns	r3, r3
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	4013      	ands	r3, r2
 8003470:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	091b      	lsrs	r3, r3, #4
 8003478:	f003 0201 	and.w	r2, r3, #1
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	4313      	orrs	r3, r2
 8003486:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	2b03      	cmp	r3, #3
 8003498:	d118      	bne.n	80034cc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80034a0:	2201      	movs	r2, #1
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	43db      	mvns	r3, r3
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	4013      	ands	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	08db      	lsrs	r3, r3, #3
 80034b6:	f003 0201 	and.w	r2, r3, #1
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 0303 	and.w	r3, r3, #3
 80034d4:	2b03      	cmp	r3, #3
 80034d6:	d017      	beq.n	8003508 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	2203      	movs	r2, #3
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	43db      	mvns	r3, r3
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	4013      	ands	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4313      	orrs	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f003 0303 	and.w	r3, r3, #3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d123      	bne.n	800355c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	08da      	lsrs	r2, r3, #3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3208      	adds	r2, #8
 800351c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003520:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	220f      	movs	r2, #15
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	43db      	mvns	r3, r3
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4013      	ands	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4313      	orrs	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	08da      	lsrs	r2, r3, #3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	3208      	adds	r2, #8
 8003556:	6939      	ldr	r1, [r7, #16]
 8003558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	2203      	movs	r2, #3
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	43db      	mvns	r3, r3
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	4013      	ands	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f003 0203 	and.w	r2, r3, #3
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 80ac 	beq.w	80036f6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800359e:	4b5f      	ldr	r3, [pc, #380]	; (800371c <HAL_GPIO_Init+0x330>)
 80035a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035a2:	4a5e      	ldr	r2, [pc, #376]	; (800371c <HAL_GPIO_Init+0x330>)
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	6613      	str	r3, [r2, #96]	; 0x60
 80035aa:	4b5c      	ldr	r3, [pc, #368]	; (800371c <HAL_GPIO_Init+0x330>)
 80035ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	60bb      	str	r3, [r7, #8]
 80035b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80035b6:	4a5a      	ldr	r2, [pc, #360]	; (8003720 <HAL_GPIO_Init+0x334>)
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	089b      	lsrs	r3, r3, #2
 80035bc:	3302      	adds	r3, #2
 80035be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	220f      	movs	r2, #15
 80035ce:	fa02 f303 	lsl.w	r3, r2, r3
 80035d2:	43db      	mvns	r3, r3
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	4013      	ands	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80035e0:	d025      	beq.n	800362e <HAL_GPIO_Init+0x242>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a4f      	ldr	r2, [pc, #316]	; (8003724 <HAL_GPIO_Init+0x338>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d01f      	beq.n	800362a <HAL_GPIO_Init+0x23e>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a4e      	ldr	r2, [pc, #312]	; (8003728 <HAL_GPIO_Init+0x33c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d019      	beq.n	8003626 <HAL_GPIO_Init+0x23a>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a4d      	ldr	r2, [pc, #308]	; (800372c <HAL_GPIO_Init+0x340>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d013      	beq.n	8003622 <HAL_GPIO_Init+0x236>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a4c      	ldr	r2, [pc, #304]	; (8003730 <HAL_GPIO_Init+0x344>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d00d      	beq.n	800361e <HAL_GPIO_Init+0x232>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a4b      	ldr	r2, [pc, #300]	; (8003734 <HAL_GPIO_Init+0x348>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d007      	beq.n	800361a <HAL_GPIO_Init+0x22e>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a4a      	ldr	r2, [pc, #296]	; (8003738 <HAL_GPIO_Init+0x34c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d101      	bne.n	8003616 <HAL_GPIO_Init+0x22a>
 8003612:	2306      	movs	r3, #6
 8003614:	e00c      	b.n	8003630 <HAL_GPIO_Init+0x244>
 8003616:	2307      	movs	r3, #7
 8003618:	e00a      	b.n	8003630 <HAL_GPIO_Init+0x244>
 800361a:	2305      	movs	r3, #5
 800361c:	e008      	b.n	8003630 <HAL_GPIO_Init+0x244>
 800361e:	2304      	movs	r3, #4
 8003620:	e006      	b.n	8003630 <HAL_GPIO_Init+0x244>
 8003622:	2303      	movs	r3, #3
 8003624:	e004      	b.n	8003630 <HAL_GPIO_Init+0x244>
 8003626:	2302      	movs	r3, #2
 8003628:	e002      	b.n	8003630 <HAL_GPIO_Init+0x244>
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <HAL_GPIO_Init+0x244>
 800362e:	2300      	movs	r3, #0
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	f002 0203 	and.w	r2, r2, #3
 8003636:	0092      	lsls	r2, r2, #2
 8003638:	4093      	lsls	r3, r2
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	4313      	orrs	r3, r2
 800363e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003640:	4937      	ldr	r1, [pc, #220]	; (8003720 <HAL_GPIO_Init+0x334>)
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	089b      	lsrs	r3, r3, #2
 8003646:	3302      	adds	r3, #2
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800364e:	4b3b      	ldr	r3, [pc, #236]	; (800373c <HAL_GPIO_Init+0x350>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	43db      	mvns	r3, r3
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4013      	ands	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003672:	4a32      	ldr	r2, [pc, #200]	; (800373c <HAL_GPIO_Init+0x350>)
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003678:	4b30      	ldr	r3, [pc, #192]	; (800373c <HAL_GPIO_Init+0x350>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	43db      	mvns	r3, r3
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4013      	ands	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	4313      	orrs	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800369c:	4a27      	ldr	r2, [pc, #156]	; (800373c <HAL_GPIO_Init+0x350>)
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80036a2:	4b26      	ldr	r3, [pc, #152]	; (800373c <HAL_GPIO_Init+0x350>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	43db      	mvns	r3, r3
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	4013      	ands	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036c6:	4a1d      	ldr	r2, [pc, #116]	; (800373c <HAL_GPIO_Init+0x350>)
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80036cc:	4b1b      	ldr	r3, [pc, #108]	; (800373c <HAL_GPIO_Init+0x350>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	43db      	mvns	r3, r3
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4013      	ands	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036f0:	4a12      	ldr	r2, [pc, #72]	; (800373c <HAL_GPIO_Init+0x350>)
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	3301      	adds	r3, #1
 80036fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	fa22 f303 	lsr.w	r3, r2, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	f47f ae78 	bne.w	80033fc <HAL_GPIO_Init+0x10>
  }
}
 800370c:	bf00      	nop
 800370e:	bf00      	nop
 8003710:	371c      	adds	r7, #28
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40021000 	.word	0x40021000
 8003720:	40010000 	.word	0x40010000
 8003724:	48000400 	.word	0x48000400
 8003728:	48000800 	.word	0x48000800
 800372c:	48000c00 	.word	0x48000c00
 8003730:	48001000 	.word	0x48001000
 8003734:	48001400 	.word	0x48001400
 8003738:	48001800 	.word	0x48001800
 800373c:	40010400 	.word	0x40010400

08003740 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	460b      	mov	r3, r1
 800374a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691a      	ldr	r2, [r3, #16]
 8003750:	887b      	ldrh	r3, [r7, #2]
 8003752:	4013      	ands	r3, r2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d002      	beq.n	800375e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003758:	2301      	movs	r3, #1
 800375a:	73fb      	strb	r3, [r7, #15]
 800375c:	e001      	b.n	8003762 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800375e:	2300      	movs	r3, #0
 8003760:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003762:	7bfb      	ldrb	r3, [r7, #15]
}
 8003764:	4618      	mov	r0, r3
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	807b      	strh	r3, [r7, #2]
 800377c:	4613      	mov	r3, r2
 800377e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003780:	787b      	ldrb	r3, [r7, #1]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003786:	887a      	ldrh	r2, [r7, #2]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800378c:	e002      	b.n	8003794 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800378e:	887a      	ldrh	r2, [r7, #2]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	460b      	mov	r3, r1
 80037aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037b2:	887a      	ldrh	r2, [r7, #2]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4013      	ands	r3, r2
 80037b8:	041a      	lsls	r2, r3, #16
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	43d9      	mvns	r1, r3
 80037be:	887b      	ldrh	r3, [r7, #2]
 80037c0:	400b      	ands	r3, r1
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	619a      	str	r2, [r3, #24]
}
 80037c8:	bf00      	nop
 80037ca:	3714      	adds	r7, #20
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	4603      	mov	r3, r0
 80037dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80037de:	4b08      	ldr	r3, [pc, #32]	; (8003800 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037e0:	695a      	ldr	r2, [r3, #20]
 80037e2:	88fb      	ldrh	r3, [r7, #6]
 80037e4:	4013      	ands	r3, r2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d006      	beq.n	80037f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037ea:	4a05      	ldr	r2, [pc, #20]	; (8003800 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037ec:	88fb      	ldrh	r3, [r7, #6]
 80037ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037f0:	88fb      	ldrh	r3, [r7, #6]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fe ff6a 	bl	80026cc <HAL_GPIO_EXTI_Callback>
  }
}
 80037f8:	bf00      	nop
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40010400 	.word	0x40010400

08003804 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e081      	b.n	800391a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7ff f8f0 	bl	8002a10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2224      	movs	r2, #36	; 0x24
 8003834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0201 	bic.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003854:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003864:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d107      	bne.n	800387e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689a      	ldr	r2, [r3, #8]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800387a:	609a      	str	r2, [r3, #8]
 800387c:	e006      	b.n	800388c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800388a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	2b02      	cmp	r3, #2
 8003892:	d104      	bne.n	800389e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800389c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6812      	ldr	r2, [r2, #0]
 80038a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691a      	ldr	r2, [r3, #16]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	69d9      	ldr	r1, [r3, #28]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a1a      	ldr	r2, [r3, #32]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2220      	movs	r2, #32
 8003906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
	...

08003924 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b088      	sub	sp, #32
 8003928:	af02      	add	r7, sp, #8
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	4608      	mov	r0, r1
 800392e:	4611      	mov	r1, r2
 8003930:	461a      	mov	r2, r3
 8003932:	4603      	mov	r3, r0
 8003934:	817b      	strh	r3, [r7, #10]
 8003936:	460b      	mov	r3, r1
 8003938:	813b      	strh	r3, [r7, #8]
 800393a:	4613      	mov	r3, r2
 800393c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b20      	cmp	r3, #32
 8003948:	f040 80f9 	bne.w	8003b3e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d002      	beq.n	8003958 <HAL_I2C_Mem_Write+0x34>
 8003952:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003954:	2b00      	cmp	r3, #0
 8003956:	d105      	bne.n	8003964 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800395e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e0ed      	b.n	8003b40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800396a:	2b01      	cmp	r3, #1
 800396c:	d101      	bne.n	8003972 <HAL_I2C_Mem_Write+0x4e>
 800396e:	2302      	movs	r3, #2
 8003970:	e0e6      	b.n	8003b40 <HAL_I2C_Mem_Write+0x21c>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800397a:	f7ff fba5 	bl	80030c8 <HAL_GetTick>
 800397e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	2319      	movs	r3, #25
 8003986:	2201      	movs	r2, #1
 8003988:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 fac3 	bl	8003f18 <I2C_WaitOnFlagUntilTimeout>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e0d1      	b.n	8003b40 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2221      	movs	r2, #33	; 0x21
 80039a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2240      	movs	r2, #64	; 0x40
 80039a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6a3a      	ldr	r2, [r7, #32]
 80039b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80039bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039c4:	88f8      	ldrh	r0, [r7, #6]
 80039c6:	893a      	ldrh	r2, [r7, #8]
 80039c8:	8979      	ldrh	r1, [r7, #10]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	9301      	str	r3, [sp, #4]
 80039ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	4603      	mov	r3, r0
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 f9d3 	bl	8003d80 <I2C_RequestMemoryWrite>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d005      	beq.n	80039ec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e0a9      	b.n	8003b40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2bff      	cmp	r3, #255	; 0xff
 80039f4:	d90e      	bls.n	8003a14 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	22ff      	movs	r2, #255	; 0xff
 80039fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	8979      	ldrh	r1, [r7, #10]
 8003a04:	2300      	movs	r3, #0
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 fc2b 	bl	8004268 <I2C_TransferConfig>
 8003a12:	e00f      	b.n	8003a34 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	8979      	ldrh	r1, [r7, #10]
 8003a26:	2300      	movs	r3, #0
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 fc1a 	bl	8004268 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f000 faad 	bl	8003f98 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e07b      	b.n	8003b40 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	781a      	ldrb	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	1c5a      	adds	r2, r3, #1
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	3b01      	subs	r3, #1
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d034      	beq.n	8003aec <HAL_I2C_Mem_Write+0x1c8>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d130      	bne.n	8003aec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a90:	2200      	movs	r2, #0
 8003a92:	2180      	movs	r1, #128	; 0x80
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 fa3f 	bl	8003f18 <I2C_WaitOnFlagUntilTimeout>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e04d      	b.n	8003b40 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2bff      	cmp	r3, #255	; 0xff
 8003aac:	d90e      	bls.n	8003acc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	22ff      	movs	r2, #255	; 0xff
 8003ab2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	8979      	ldrh	r1, [r7, #10]
 8003abc:	2300      	movs	r3, #0
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f000 fbcf 	bl	8004268 <I2C_TransferConfig>
 8003aca:	e00f      	b.n	8003aec <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	8979      	ldrh	r1, [r7, #10]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 fbbe 	bl	8004268 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d19e      	bne.n	8003a34 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 fa8c 	bl	8004018 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e01a      	b.n	8003b40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6859      	ldr	r1, [r3, #4]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <HAL_I2C_Mem_Write+0x224>)
 8003b1e:	400b      	ands	r3, r1
 8003b20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2220      	movs	r2, #32
 8003b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	e000      	b.n	8003b40 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003b3e:	2302      	movs	r3, #2
  }
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	fe00e800 	.word	0xfe00e800

08003b4c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af02      	add	r7, sp, #8
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	4608      	mov	r0, r1
 8003b56:	4611      	mov	r1, r2
 8003b58:	461a      	mov	r2, r3
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	817b      	strh	r3, [r7, #10]
 8003b5e:	460b      	mov	r3, r1
 8003b60:	813b      	strh	r3, [r7, #8]
 8003b62:	4613      	mov	r3, r2
 8003b64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b20      	cmp	r3, #32
 8003b70:	f040 80fd 	bne.w	8003d6e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d002      	beq.n	8003b80 <HAL_I2C_Mem_Read+0x34>
 8003b7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d105      	bne.n	8003b8c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b86:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e0f1      	b.n	8003d70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d101      	bne.n	8003b9a <HAL_I2C_Mem_Read+0x4e>
 8003b96:	2302      	movs	r3, #2
 8003b98:	e0ea      	b.n	8003d70 <HAL_I2C_Mem_Read+0x224>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ba2:	f7ff fa91 	bl	80030c8 <HAL_GetTick>
 8003ba6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	2319      	movs	r3, #25
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 f9af 	bl	8003f18 <I2C_WaitOnFlagUntilTimeout>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0d5      	b.n	8003d70 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2222      	movs	r2, #34	; 0x22
 8003bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2240      	movs	r2, #64	; 0x40
 8003bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a3a      	ldr	r2, [r7, #32]
 8003bde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003be4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bec:	88f8      	ldrh	r0, [r7, #6]
 8003bee:	893a      	ldrh	r2, [r7, #8]
 8003bf0:	8979      	ldrh	r1, [r7, #10]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	9301      	str	r3, [sp, #4]
 8003bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 f913 	bl	8003e28 <I2C_RequestMemoryRead>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e0ad      	b.n	8003d70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	2bff      	cmp	r3, #255	; 0xff
 8003c1c:	d90e      	bls.n	8003c3c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	22ff      	movs	r2, #255	; 0xff
 8003c22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	8979      	ldrh	r1, [r7, #10]
 8003c2c:	4b52      	ldr	r3, [pc, #328]	; (8003d78 <HAL_I2C_Mem_Read+0x22c>)
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 fb17 	bl	8004268 <I2C_TransferConfig>
 8003c3a:	e00f      	b.n	8003c5c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	8979      	ldrh	r1, [r7, #10]
 8003c4e:	4b4a      	ldr	r3, [pc, #296]	; (8003d78 <HAL_I2C_Mem_Read+0x22c>)
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f000 fb06 	bl	8004268 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c62:	2200      	movs	r2, #0
 8003c64:	2104      	movs	r1, #4
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 f956 	bl	8003f18 <I2C_WaitOnFlagUntilTimeout>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e07c      	b.n	8003d70 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	b2d2      	uxtb	r2, r2
 8003c82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	1c5a      	adds	r2, r3, #1
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c92:	3b01      	subs	r3, #1
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d034      	beq.n	8003d1c <HAL_I2C_Mem_Read+0x1d0>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d130      	bne.n	8003d1c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	2180      	movs	r1, #128	; 0x80
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 f927 	bl	8003f18 <I2C_WaitOnFlagUntilTimeout>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e04d      	b.n	8003d70 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2bff      	cmp	r3, #255	; 0xff
 8003cdc:	d90e      	bls.n	8003cfc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	22ff      	movs	r2, #255	; 0xff
 8003ce2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	8979      	ldrh	r1, [r7, #10]
 8003cec:	2300      	movs	r3, #0
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 fab7 	bl	8004268 <I2C_TransferConfig>
 8003cfa:	e00f      	b.n	8003d1c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	8979      	ldrh	r1, [r7, #10]
 8003d0e:	2300      	movs	r3, #0
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 faa6 	bl	8004268 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d19a      	bne.n	8003c5c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 f974 	bl	8004018 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e01a      	b.n	8003d70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6859      	ldr	r1, [r3, #4]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	4b0b      	ldr	r3, [pc, #44]	; (8003d7c <HAL_I2C_Mem_Read+0x230>)
 8003d4e:	400b      	ands	r3, r1
 8003d50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2220      	movs	r2, #32
 8003d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	e000      	b.n	8003d70 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003d6e:	2302      	movs	r3, #2
  }
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	80002400 	.word	0x80002400
 8003d7c:	fe00e800 	.word	0xfe00e800

08003d80 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af02      	add	r7, sp, #8
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	4608      	mov	r0, r1
 8003d8a:	4611      	mov	r1, r2
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	4603      	mov	r3, r0
 8003d90:	817b      	strh	r3, [r7, #10]
 8003d92:	460b      	mov	r3, r1
 8003d94:	813b      	strh	r3, [r7, #8]
 8003d96:	4613      	mov	r3, r2
 8003d98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003d9a:	88fb      	ldrh	r3, [r7, #6]
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	8979      	ldrh	r1, [r7, #10]
 8003da0:	4b20      	ldr	r3, [pc, #128]	; (8003e24 <I2C_RequestMemoryWrite+0xa4>)
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 fa5d 	bl	8004268 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dae:	69fa      	ldr	r2, [r7, #28]
 8003db0:	69b9      	ldr	r1, [r7, #24]
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f000 f8f0 	bl	8003f98 <I2C_WaitOnTXISFlagUntilTimeout>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e02c      	b.n	8003e1c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dc2:	88fb      	ldrh	r3, [r7, #6]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d105      	bne.n	8003dd4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dc8:	893b      	ldrh	r3, [r7, #8]
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	629a      	str	r2, [r3, #40]	; 0x28
 8003dd2:	e015      	b.n	8003e00 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003dd4:	893b      	ldrh	r3, [r7, #8]
 8003dd6:	0a1b      	lsrs	r3, r3, #8
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003de2:	69fa      	ldr	r2, [r7, #28]
 8003de4:	69b9      	ldr	r1, [r7, #24]
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 f8d6 	bl	8003f98 <I2C_WaitOnTXISFlagUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e012      	b.n	8003e1c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003df6:	893b      	ldrh	r3, [r7, #8]
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	2200      	movs	r2, #0
 8003e08:	2180      	movs	r1, #128	; 0x80
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 f884 	bl	8003f18 <I2C_WaitOnFlagUntilTimeout>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e000      	b.n	8003e1c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	80002000 	.word	0x80002000

08003e28 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af02      	add	r7, sp, #8
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	4608      	mov	r0, r1
 8003e32:	4611      	mov	r1, r2
 8003e34:	461a      	mov	r2, r3
 8003e36:	4603      	mov	r3, r0
 8003e38:	817b      	strh	r3, [r7, #10]
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	813b      	strh	r3, [r7, #8]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003e42:	88fb      	ldrh	r3, [r7, #6]
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	8979      	ldrh	r1, [r7, #10]
 8003e48:	4b20      	ldr	r3, [pc, #128]	; (8003ecc <I2C_RequestMemoryRead+0xa4>)
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 fa0a 	bl	8004268 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e54:	69fa      	ldr	r2, [r7, #28]
 8003e56:	69b9      	ldr	r1, [r7, #24]
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 f89d 	bl	8003f98 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e02c      	b.n	8003ec2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e68:	88fb      	ldrh	r3, [r7, #6]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d105      	bne.n	8003e7a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e6e:	893b      	ldrh	r3, [r7, #8]
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	629a      	str	r2, [r3, #40]	; 0x28
 8003e78:	e015      	b.n	8003ea6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e7a:	893b      	ldrh	r3, [r7, #8]
 8003e7c:	0a1b      	lsrs	r3, r3, #8
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e88:	69fa      	ldr	r2, [r7, #28]
 8003e8a:	69b9      	ldr	r1, [r7, #24]
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 f883 	bl	8003f98 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e012      	b.n	8003ec2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e9c:	893b      	ldrh	r3, [r7, #8]
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	2200      	movs	r2, #0
 8003eae:	2140      	movs	r1, #64	; 0x40
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 f831 	bl	8003f18 <I2C_WaitOnFlagUntilTimeout>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e000      	b.n	8003ec2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	80002000 	.word	0x80002000

08003ed0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d103      	bne.n	8003eee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2200      	movs	r2, #0
 8003eec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d007      	beq.n	8003f0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699a      	ldr	r2, [r3, #24]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0201 	orr.w	r2, r2, #1
 8003f0a:	619a      	str	r2, [r3, #24]
  }
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	603b      	str	r3, [r7, #0]
 8003f24:	4613      	mov	r3, r2
 8003f26:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f28:	e022      	b.n	8003f70 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f30:	d01e      	beq.n	8003f70 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f32:	f7ff f8c9 	bl	80030c8 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d302      	bcc.n	8003f48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d113      	bne.n	8003f70 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4c:	f043 0220 	orr.w	r2, r3, #32
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e00f      	b.n	8003f90 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699a      	ldr	r2, [r3, #24]
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	bf0c      	ite	eq
 8003f80:	2301      	moveq	r3, #1
 8003f82:	2300      	movne	r3, #0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	461a      	mov	r2, r3
 8003f88:	79fb      	ldrb	r3, [r7, #7]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d0cd      	beq.n	8003f2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fa4:	e02c      	b.n	8004000 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	68b9      	ldr	r1, [r7, #8]
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 f870 	bl	8004090 <I2C_IsErrorOccurred>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e02a      	b.n	8004010 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc0:	d01e      	beq.n	8004000 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc2:	f7ff f881 	bl	80030c8 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d302      	bcc.n	8003fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d113      	bne.n	8004000 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fdc:	f043 0220 	orr.w	r2, r3, #32
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e007      	b.n	8004010 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b02      	cmp	r3, #2
 800400c:	d1cb      	bne.n	8003fa6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004024:	e028      	b.n	8004078 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	68b9      	ldr	r1, [r7, #8]
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 f830 	bl	8004090 <I2C_IsErrorOccurred>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e026      	b.n	8004088 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800403a:	f7ff f845 	bl	80030c8 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	429a      	cmp	r2, r3
 8004048:	d302      	bcc.n	8004050 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d113      	bne.n	8004078 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004054:	f043 0220 	orr.w	r2, r3, #32
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2220      	movs	r2, #32
 8004060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e007      	b.n	8004088 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	f003 0320 	and.w	r3, r3, #32
 8004082:	2b20      	cmp	r3, #32
 8004084:	d1cf      	bne.n	8004026 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b08a      	sub	sp, #40	; 0x28
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800409c:	2300      	movs	r3, #0
 800409e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80040aa:	2300      	movs	r3, #0
 80040ac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	f003 0310 	and.w	r3, r3, #16
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d075      	beq.n	80041a8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2210      	movs	r2, #16
 80040c2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80040c4:	e056      	b.n	8004174 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040cc:	d052      	beq.n	8004174 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040ce:	f7fe fffb 	bl	80030c8 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d302      	bcc.n	80040e4 <I2C_IsErrorOccurred+0x54>
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d147      	bne.n	8004174 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040f6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004102:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004106:	d12e      	bne.n	8004166 <I2C_IsErrorOccurred+0xd6>
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800410e:	d02a      	beq.n	8004166 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004110:	7cfb      	ldrb	r3, [r7, #19]
 8004112:	2b20      	cmp	r3, #32
 8004114:	d027      	beq.n	8004166 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004124:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004126:	f7fe ffcf 	bl	80030c8 <HAL_GetTick>
 800412a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800412c:	e01b      	b.n	8004166 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800412e:	f7fe ffcb 	bl	80030c8 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b19      	cmp	r3, #25
 800413a:	d914      	bls.n	8004166 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004140:	f043 0220 	orr.w	r2, r3, #32
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2220      	movs	r2, #32
 800414c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	f003 0320 	and.w	r3, r3, #32
 8004170:	2b20      	cmp	r3, #32
 8004172:	d1dc      	bne.n	800412e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b20      	cmp	r3, #32
 8004180:	d003      	beq.n	800418a <I2C_IsErrorOccurred+0xfa>
 8004182:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004186:	2b00      	cmp	r3, #0
 8004188:	d09d      	beq.n	80040c6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800418a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800418e:	2b00      	cmp	r3, #0
 8004190:	d103      	bne.n	800419a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2220      	movs	r2, #32
 8004198:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	f043 0304 	orr.w	r3, r3, #4
 80041a0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00b      	beq.n	80041d2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	f043 0301 	orr.w	r3, r3, #1
 80041c0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00b      	beq.n	80041f4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80041dc:	6a3b      	ldr	r3, [r7, #32]
 80041de:	f043 0308 	orr.w	r3, r3, #8
 80041e2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00b      	beq.n	8004216 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	f043 0302 	orr.w	r3, r3, #2
 8004204:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800420e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004216:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800421a:	2b00      	cmp	r3, #0
 800421c:	d01c      	beq.n	8004258 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f7ff fe56 	bl	8003ed0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6859      	ldr	r1, [r3, #4]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	4b0d      	ldr	r3, [pc, #52]	; (8004264 <I2C_IsErrorOccurred+0x1d4>)
 8004230:	400b      	ands	r3, r1
 8004232:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	431a      	orrs	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2220      	movs	r2, #32
 8004244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004258:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800425c:	4618      	mov	r0, r3
 800425e:	3728      	adds	r7, #40	; 0x28
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	fe00e800 	.word	0xfe00e800

08004268 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	607b      	str	r3, [r7, #4]
 8004272:	460b      	mov	r3, r1
 8004274:	817b      	strh	r3, [r7, #10]
 8004276:	4613      	mov	r3, r2
 8004278:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800427a:	897b      	ldrh	r3, [r7, #10]
 800427c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004280:	7a7b      	ldrb	r3, [r7, #9]
 8004282:	041b      	lsls	r3, r3, #16
 8004284:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004288:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800428e:	6a3b      	ldr	r3, [r7, #32]
 8004290:	4313      	orrs	r3, r2
 8004292:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004296:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	0d5b      	lsrs	r3, r3, #21
 80042a2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80042a6:	4b08      	ldr	r3, [pc, #32]	; (80042c8 <I2C_TransferConfig+0x60>)
 80042a8:	430b      	orrs	r3, r1
 80042aa:	43db      	mvns	r3, r3
 80042ac:	ea02 0103 	and.w	r1, r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80042ba:	bf00      	nop
 80042bc:	371c      	adds	r7, #28
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	03ff63ff 	.word	0x03ff63ff

080042cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b20      	cmp	r3, #32
 80042e0:	d138      	bne.n	8004354 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d101      	bne.n	80042f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80042ec:	2302      	movs	r3, #2
 80042ee:	e032      	b.n	8004356 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2224      	movs	r2, #36	; 0x24
 80042fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0201 	bic.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800431e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6819      	ldr	r1, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 0201 	orr.w	r2, r2, #1
 800433e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2220      	movs	r2, #32
 8004344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004350:	2300      	movs	r3, #0
 8004352:	e000      	b.n	8004356 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004354:	2302      	movs	r3, #2
  }
}
 8004356:	4618      	mov	r0, r3
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004362:	b480      	push	{r7}
 8004364:	b085      	sub	sp, #20
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b20      	cmp	r3, #32
 8004376:	d139      	bne.n	80043ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004382:	2302      	movs	r3, #2
 8004384:	e033      	b.n	80043ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2224      	movs	r2, #36	; 0x24
 8004392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0201 	bic.w	r2, r2, #1
 80043a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80043b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	021b      	lsls	r3, r3, #8
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	4313      	orrs	r3, r2
 80043be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0201 	orr.w	r2, r2, #1
 80043d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	e000      	b.n	80043ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80043ec:	2302      	movs	r3, #2
  }
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
	...

080043fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004400:	4b04      	ldr	r3, [pc, #16]	; (8004414 <HAL_PWREx_GetVoltageRange+0x18>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004408:	4618      	mov	r0, r3
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	40007000 	.word	0x40007000

08004418 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004426:	d130      	bne.n	800448a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004428:	4b23      	ldr	r3, [pc, #140]	; (80044b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004434:	d038      	beq.n	80044a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004436:	4b20      	ldr	r3, [pc, #128]	; (80044b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800443e:	4a1e      	ldr	r2, [pc, #120]	; (80044b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004440:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004444:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004446:	4b1d      	ldr	r3, [pc, #116]	; (80044bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2232      	movs	r2, #50	; 0x32
 800444c:	fb02 f303 	mul.w	r3, r2, r3
 8004450:	4a1b      	ldr	r2, [pc, #108]	; (80044c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004452:	fba2 2303 	umull	r2, r3, r2, r3
 8004456:	0c9b      	lsrs	r3, r3, #18
 8004458:	3301      	adds	r3, #1
 800445a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800445c:	e002      	b.n	8004464 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	3b01      	subs	r3, #1
 8004462:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004464:	4b14      	ldr	r3, [pc, #80]	; (80044b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800446c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004470:	d102      	bne.n	8004478 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1f2      	bne.n	800445e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004478:	4b0f      	ldr	r3, [pc, #60]	; (80044b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004484:	d110      	bne.n	80044a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e00f      	b.n	80044aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800448a:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004496:	d007      	beq.n	80044a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004498:	4b07      	ldr	r3, [pc, #28]	; (80044b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044a0:	4a05      	ldr	r2, [pc, #20]	; (80044b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40007000 	.word	0x40007000
 80044bc:	20000000 	.word	0x20000000
 80044c0:	431bde83 	.word	0x431bde83

080044c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b088      	sub	sp, #32
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e3ca      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044d6:	4b97      	ldr	r3, [pc, #604]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f003 030c 	and.w	r3, r3, #12
 80044de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044e0:	4b94      	ldr	r3, [pc, #592]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f003 0303 	and.w	r3, r3, #3
 80044e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0310 	and.w	r3, r3, #16
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 80e4 	beq.w	80046c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d007      	beq.n	800450e <HAL_RCC_OscConfig+0x4a>
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	2b0c      	cmp	r3, #12
 8004502:	f040 808b 	bne.w	800461c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2b01      	cmp	r3, #1
 800450a:	f040 8087 	bne.w	800461c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800450e:	4b89      	ldr	r3, [pc, #548]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d005      	beq.n	8004526 <HAL_RCC_OscConfig+0x62>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e3a2      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1a      	ldr	r2, [r3, #32]
 800452a:	4b82      	ldr	r3, [pc, #520]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b00      	cmp	r3, #0
 8004534:	d004      	beq.n	8004540 <HAL_RCC_OscConfig+0x7c>
 8004536:	4b7f      	ldr	r3, [pc, #508]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800453e:	e005      	b.n	800454c <HAL_RCC_OscConfig+0x88>
 8004540:	4b7c      	ldr	r3, [pc, #496]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 8004542:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004546:	091b      	lsrs	r3, r3, #4
 8004548:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800454c:	4293      	cmp	r3, r2
 800454e:	d223      	bcs.n	8004598 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	4618      	mov	r0, r3
 8004556:	f000 fd87 	bl	8005068 <RCC_SetFlashLatencyFromMSIRange>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e383      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004564:	4b73      	ldr	r3, [pc, #460]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a72      	ldr	r2, [pc, #456]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 800456a:	f043 0308 	orr.w	r3, r3, #8
 800456e:	6013      	str	r3, [r2, #0]
 8004570:	4b70      	ldr	r3, [pc, #448]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	496d      	ldr	r1, [pc, #436]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 800457e:	4313      	orrs	r3, r2
 8004580:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004582:	4b6c      	ldr	r3, [pc, #432]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	021b      	lsls	r3, r3, #8
 8004590:	4968      	ldr	r1, [pc, #416]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 8004592:	4313      	orrs	r3, r2
 8004594:	604b      	str	r3, [r1, #4]
 8004596:	e025      	b.n	80045e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004598:	4b66      	ldr	r3, [pc, #408]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a65      	ldr	r2, [pc, #404]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 800459e:	f043 0308 	orr.w	r3, r3, #8
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	4b63      	ldr	r3, [pc, #396]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	4960      	ldr	r1, [pc, #384]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045b6:	4b5f      	ldr	r3, [pc, #380]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	021b      	lsls	r3, r3, #8
 80045c4:	495b      	ldr	r1, [pc, #364]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d109      	bne.n	80045e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 fd47 	bl	8005068 <RCC_SetFlashLatencyFromMSIRange>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e343      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045e4:	f000 fc4a 	bl	8004e7c <HAL_RCC_GetSysClockFreq>
 80045e8:	4602      	mov	r2, r0
 80045ea:	4b52      	ldr	r3, [pc, #328]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	091b      	lsrs	r3, r3, #4
 80045f0:	f003 030f 	and.w	r3, r3, #15
 80045f4:	4950      	ldr	r1, [pc, #320]	; (8004738 <HAL_RCC_OscConfig+0x274>)
 80045f6:	5ccb      	ldrb	r3, [r1, r3]
 80045f8:	f003 031f 	and.w	r3, r3, #31
 80045fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004600:	4a4e      	ldr	r2, [pc, #312]	; (800473c <HAL_RCC_OscConfig+0x278>)
 8004602:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004604:	4b4e      	ldr	r3, [pc, #312]	; (8004740 <HAL_RCC_OscConfig+0x27c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f7fe fb9b 	bl	8002d44 <HAL_InitTick>
 800460e:	4603      	mov	r3, r0
 8004610:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004612:	7bfb      	ldrb	r3, [r7, #15]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d052      	beq.n	80046be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004618:	7bfb      	ldrb	r3, [r7, #15]
 800461a:	e327      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d032      	beq.n	800468a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004624:	4b43      	ldr	r3, [pc, #268]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a42      	ldr	r2, [pc, #264]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 800462a:	f043 0301 	orr.w	r3, r3, #1
 800462e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004630:	f7fe fd4a 	bl	80030c8 <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004638:	f7fe fd46 	bl	80030c8 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e310      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800464a:	4b3a      	ldr	r3, [pc, #232]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d0f0      	beq.n	8004638 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004656:	4b37      	ldr	r3, [pc, #220]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a36      	ldr	r2, [pc, #216]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 800465c:	f043 0308 	orr.w	r3, r3, #8
 8004660:	6013      	str	r3, [r2, #0]
 8004662:	4b34      	ldr	r3, [pc, #208]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	4931      	ldr	r1, [pc, #196]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 8004670:	4313      	orrs	r3, r2
 8004672:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004674:	4b2f      	ldr	r3, [pc, #188]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	69db      	ldr	r3, [r3, #28]
 8004680:	021b      	lsls	r3, r3, #8
 8004682:	492c      	ldr	r1, [pc, #176]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 8004684:	4313      	orrs	r3, r2
 8004686:	604b      	str	r3, [r1, #4]
 8004688:	e01a      	b.n	80046c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800468a:	4b2a      	ldr	r3, [pc, #168]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a29      	ldr	r2, [pc, #164]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 8004690:	f023 0301 	bic.w	r3, r3, #1
 8004694:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004696:	f7fe fd17 	bl	80030c8 <HAL_GetTick>
 800469a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800469c:	e008      	b.n	80046b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800469e:	f7fe fd13 	bl	80030c8 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e2dd      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046b0:	4b20      	ldr	r3, [pc, #128]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1f0      	bne.n	800469e <HAL_RCC_OscConfig+0x1da>
 80046bc:	e000      	b.n	80046c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d074      	beq.n	80047b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	2b08      	cmp	r3, #8
 80046d0:	d005      	beq.n	80046de <HAL_RCC_OscConfig+0x21a>
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	2b0c      	cmp	r3, #12
 80046d6:	d10e      	bne.n	80046f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	2b03      	cmp	r3, #3
 80046dc:	d10b      	bne.n	80046f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046de:	4b15      	ldr	r3, [pc, #84]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d064      	beq.n	80047b4 <HAL_RCC_OscConfig+0x2f0>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d160      	bne.n	80047b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e2ba      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046fe:	d106      	bne.n	800470e <HAL_RCC_OscConfig+0x24a>
 8004700:	4b0c      	ldr	r3, [pc, #48]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a0b      	ldr	r2, [pc, #44]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 8004706:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800470a:	6013      	str	r3, [r2, #0]
 800470c:	e026      	b.n	800475c <HAL_RCC_OscConfig+0x298>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004716:	d115      	bne.n	8004744 <HAL_RCC_OscConfig+0x280>
 8004718:	4b06      	ldr	r3, [pc, #24]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a05      	ldr	r2, [pc, #20]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 800471e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004722:	6013      	str	r3, [r2, #0]
 8004724:	4b03      	ldr	r3, [pc, #12]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a02      	ldr	r2, [pc, #8]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 800472a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800472e:	6013      	str	r3, [r2, #0]
 8004730:	e014      	b.n	800475c <HAL_RCC_OscConfig+0x298>
 8004732:	bf00      	nop
 8004734:	40021000 	.word	0x40021000
 8004738:	080107fc 	.word	0x080107fc
 800473c:	20000000 	.word	0x20000000
 8004740:	20000004 	.word	0x20000004
 8004744:	4ba0      	ldr	r3, [pc, #640]	; (80049c8 <HAL_RCC_OscConfig+0x504>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a9f      	ldr	r2, [pc, #636]	; (80049c8 <HAL_RCC_OscConfig+0x504>)
 800474a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800474e:	6013      	str	r3, [r2, #0]
 8004750:	4b9d      	ldr	r3, [pc, #628]	; (80049c8 <HAL_RCC_OscConfig+0x504>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a9c      	ldr	r2, [pc, #624]	; (80049c8 <HAL_RCC_OscConfig+0x504>)
 8004756:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800475a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d013      	beq.n	800478c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004764:	f7fe fcb0 	bl	80030c8 <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800476c:	f7fe fcac 	bl	80030c8 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b64      	cmp	r3, #100	; 0x64
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e276      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800477e:	4b92      	ldr	r3, [pc, #584]	; (80049c8 <HAL_RCC_OscConfig+0x504>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0f0      	beq.n	800476c <HAL_RCC_OscConfig+0x2a8>
 800478a:	e014      	b.n	80047b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478c:	f7fe fc9c 	bl	80030c8 <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004794:	f7fe fc98 	bl	80030c8 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b64      	cmp	r3, #100	; 0x64
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e262      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047a6:	4b88      	ldr	r3, [pc, #544]	; (80049c8 <HAL_RCC_OscConfig+0x504>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1f0      	bne.n	8004794 <HAL_RCC_OscConfig+0x2d0>
 80047b2:	e000      	b.n	80047b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d060      	beq.n	8004884 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	2b04      	cmp	r3, #4
 80047c6:	d005      	beq.n	80047d4 <HAL_RCC_OscConfig+0x310>
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	2b0c      	cmp	r3, #12
 80047cc:	d119      	bne.n	8004802 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d116      	bne.n	8004802 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047d4:	4b7c      	ldr	r3, [pc, #496]	; (80049c8 <HAL_RCC_OscConfig+0x504>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d005      	beq.n	80047ec <HAL_RCC_OscConfig+0x328>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e23f      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ec:	4b76      	ldr	r3, [pc, #472]	; (80049c8 <HAL_RCC_OscConfig+0x504>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	061b      	lsls	r3, r3, #24
 80047fa:	4973      	ldr	r1, [pc, #460]	; (80049c8 <HAL_RCC_OscConfig+0x504>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004800:	e040      	b.n	8004884 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d023      	beq.n	8004852 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800480a:	4b6f      	ldr	r3, [pc, #444]	; (80049c8 <HAL_RCC_OscConfig+0x504>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a6e      	ldr	r2, [pc, #440]	; (80049c8 <HAL_RCC_OscConfig+0x504>)
 8004810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004814:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004816:	f7fe fc57 	bl	80030c8 <HAL_GetTick>
 800481a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800481c:	e008      	b.n	8004830 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800481e:	f7fe fc53 	bl	80030c8 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e21d      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004830:	4b65      	ldr	r3, [pc, #404]	; (80049c8 <HAL_RCC_OscConfig+0x504>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004838:	2b00      	cmp	r3, #0
 800483a:	d0f0      	beq.n	800481e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800483c:	4b62      	ldr	r3, [pc, #392]	; (80049c8 <HAL_RCC_OscConfig+0x504>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	061b      	lsls	r3, r3, #24
 800484a:	495f      	ldr	r1, [pc, #380]	; (80049c8 <HAL_RCC_OscConfig+0x504>)
 800484c:	4313      	orrs	r3, r2
 800484e:	604b      	str	r3, [r1, #4]
 8004850:	e018      	b.n	8004884 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004852:	4b5d      	ldr	r3, [pc, #372]	; (80049c8 <HAL_RCC_OscConfig+0x504>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a5c      	ldr	r2, [pc, #368]	; (80049c8 <HAL_RCC_OscConfig+0x504>)
 8004858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800485c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485e:	f7fe fc33 	bl	80030c8 <HAL_GetTick>
 8004862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004864:	e008      	b.n	8004878 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004866:	f7fe fc2f 	bl	80030c8 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b02      	cmp	r3, #2
 8004872:	d901      	bls.n	8004878 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e1f9      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004878:	4b53      	ldr	r3, [pc, #332]	; (80049c8 <HAL_RCC_OscConfig+0x504>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1f0      	bne.n	8004866 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0308 	and.w	r3, r3, #8
 800488c:	2b00      	cmp	r3, #0
 800488e:	d03c      	beq.n	800490a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d01c      	beq.n	80048d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004898:	4b4b      	ldr	r3, [pc, #300]	; (80049c8 <HAL_RCC_OscConfig+0x504>)
 800489a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800489e:	4a4a      	ldr	r2, [pc, #296]	; (80049c8 <HAL_RCC_OscConfig+0x504>)
 80048a0:	f043 0301 	orr.w	r3, r3, #1
 80048a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a8:	f7fe fc0e 	bl	80030c8 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048b0:	f7fe fc0a 	bl	80030c8 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e1d4      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048c2:	4b41      	ldr	r3, [pc, #260]	; (80049c8 <HAL_RCC_OscConfig+0x504>)
 80048c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0ef      	beq.n	80048b0 <HAL_RCC_OscConfig+0x3ec>
 80048d0:	e01b      	b.n	800490a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048d2:	4b3d      	ldr	r3, [pc, #244]	; (80049c8 <HAL_RCC_OscConfig+0x504>)
 80048d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048d8:	4a3b      	ldr	r2, [pc, #236]	; (80049c8 <HAL_RCC_OscConfig+0x504>)
 80048da:	f023 0301 	bic.w	r3, r3, #1
 80048de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e2:	f7fe fbf1 	bl	80030c8 <HAL_GetTick>
 80048e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048e8:	e008      	b.n	80048fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ea:	f7fe fbed 	bl	80030c8 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e1b7      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048fc:	4b32      	ldr	r3, [pc, #200]	; (80049c8 <HAL_RCC_OscConfig+0x504>)
 80048fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1ef      	bne.n	80048ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0304 	and.w	r3, r3, #4
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 80a6 	beq.w	8004a64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004918:	2300      	movs	r3, #0
 800491a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800491c:	4b2a      	ldr	r3, [pc, #168]	; (80049c8 <HAL_RCC_OscConfig+0x504>)
 800491e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10d      	bne.n	8004944 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004928:	4b27      	ldr	r3, [pc, #156]	; (80049c8 <HAL_RCC_OscConfig+0x504>)
 800492a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492c:	4a26      	ldr	r2, [pc, #152]	; (80049c8 <HAL_RCC_OscConfig+0x504>)
 800492e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004932:	6593      	str	r3, [r2, #88]	; 0x58
 8004934:	4b24      	ldr	r3, [pc, #144]	; (80049c8 <HAL_RCC_OscConfig+0x504>)
 8004936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800493c:	60bb      	str	r3, [r7, #8]
 800493e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004940:	2301      	movs	r3, #1
 8004942:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004944:	4b21      	ldr	r3, [pc, #132]	; (80049cc <HAL_RCC_OscConfig+0x508>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494c:	2b00      	cmp	r3, #0
 800494e:	d118      	bne.n	8004982 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004950:	4b1e      	ldr	r3, [pc, #120]	; (80049cc <HAL_RCC_OscConfig+0x508>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a1d      	ldr	r2, [pc, #116]	; (80049cc <HAL_RCC_OscConfig+0x508>)
 8004956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800495a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800495c:	f7fe fbb4 	bl	80030c8 <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004964:	f7fe fbb0 	bl	80030c8 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e17a      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004976:	4b15      	ldr	r3, [pc, #84]	; (80049cc <HAL_RCC_OscConfig+0x508>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0f0      	beq.n	8004964 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d108      	bne.n	800499c <HAL_RCC_OscConfig+0x4d8>
 800498a:	4b0f      	ldr	r3, [pc, #60]	; (80049c8 <HAL_RCC_OscConfig+0x504>)
 800498c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004990:	4a0d      	ldr	r2, [pc, #52]	; (80049c8 <HAL_RCC_OscConfig+0x504>)
 8004992:	f043 0301 	orr.w	r3, r3, #1
 8004996:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800499a:	e029      	b.n	80049f0 <HAL_RCC_OscConfig+0x52c>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	2b05      	cmp	r3, #5
 80049a2:	d115      	bne.n	80049d0 <HAL_RCC_OscConfig+0x50c>
 80049a4:	4b08      	ldr	r3, [pc, #32]	; (80049c8 <HAL_RCC_OscConfig+0x504>)
 80049a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049aa:	4a07      	ldr	r2, [pc, #28]	; (80049c8 <HAL_RCC_OscConfig+0x504>)
 80049ac:	f043 0304 	orr.w	r3, r3, #4
 80049b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049b4:	4b04      	ldr	r3, [pc, #16]	; (80049c8 <HAL_RCC_OscConfig+0x504>)
 80049b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ba:	4a03      	ldr	r2, [pc, #12]	; (80049c8 <HAL_RCC_OscConfig+0x504>)
 80049bc:	f043 0301 	orr.w	r3, r3, #1
 80049c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049c4:	e014      	b.n	80049f0 <HAL_RCC_OscConfig+0x52c>
 80049c6:	bf00      	nop
 80049c8:	40021000 	.word	0x40021000
 80049cc:	40007000 	.word	0x40007000
 80049d0:	4b9c      	ldr	r3, [pc, #624]	; (8004c44 <HAL_RCC_OscConfig+0x780>)
 80049d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d6:	4a9b      	ldr	r2, [pc, #620]	; (8004c44 <HAL_RCC_OscConfig+0x780>)
 80049d8:	f023 0301 	bic.w	r3, r3, #1
 80049dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049e0:	4b98      	ldr	r3, [pc, #608]	; (8004c44 <HAL_RCC_OscConfig+0x780>)
 80049e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e6:	4a97      	ldr	r2, [pc, #604]	; (8004c44 <HAL_RCC_OscConfig+0x780>)
 80049e8:	f023 0304 	bic.w	r3, r3, #4
 80049ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d016      	beq.n	8004a26 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f8:	f7fe fb66 	bl	80030c8 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049fe:	e00a      	b.n	8004a16 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a00:	f7fe fb62 	bl	80030c8 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e12a      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a16:	4b8b      	ldr	r3, [pc, #556]	; (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d0ed      	beq.n	8004a00 <HAL_RCC_OscConfig+0x53c>
 8004a24:	e015      	b.n	8004a52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a26:	f7fe fb4f 	bl	80030c8 <HAL_GetTick>
 8004a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a2c:	e00a      	b.n	8004a44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a2e:	f7fe fb4b 	bl	80030c8 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e113      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a44:	4b7f      	ldr	r3, [pc, #508]	; (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1ed      	bne.n	8004a2e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a52:	7ffb      	ldrb	r3, [r7, #31]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d105      	bne.n	8004a64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a58:	4b7a      	ldr	r3, [pc, #488]	; (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5c:	4a79      	ldr	r2, [pc, #484]	; (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004a5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a62:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 80fe 	beq.w	8004c6a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	f040 80d0 	bne.w	8004c18 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a78:	4b72      	ldr	r3, [pc, #456]	; (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f003 0203 	and.w	r2, r3, #3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d130      	bne.n	8004aee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a96:	3b01      	subs	r3, #1
 8004a98:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d127      	bne.n	8004aee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d11f      	bne.n	8004aee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ab8:	2a07      	cmp	r2, #7
 8004aba:	bf14      	ite	ne
 8004abc:	2201      	movne	r2, #1
 8004abe:	2200      	moveq	r2, #0
 8004ac0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d113      	bne.n	8004aee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad0:	085b      	lsrs	r3, r3, #1
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d109      	bne.n	8004aee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	085b      	lsrs	r3, r3, #1
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d06e      	beq.n	8004bcc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	2b0c      	cmp	r3, #12
 8004af2:	d069      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004af4:	4b53      	ldr	r3, [pc, #332]	; (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d105      	bne.n	8004b0c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004b00:	4b50      	ldr	r3, [pc, #320]	; (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d001      	beq.n	8004b10 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e0ad      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b10:	4b4c      	ldr	r3, [pc, #304]	; (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a4b      	ldr	r2, [pc, #300]	; (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004b16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b1a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b1c:	f7fe fad4 	bl	80030c8 <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b24:	f7fe fad0 	bl	80030c8 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e09a      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b36:	4b43      	ldr	r3, [pc, #268]	; (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1f0      	bne.n	8004b24 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b42:	4b40      	ldr	r3, [pc, #256]	; (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	4b40      	ldr	r3, [pc, #256]	; (8004c48 <HAL_RCC_OscConfig+0x784>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b52:	3a01      	subs	r2, #1
 8004b54:	0112      	lsls	r2, r2, #4
 8004b56:	4311      	orrs	r1, r2
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b5c:	0212      	lsls	r2, r2, #8
 8004b5e:	4311      	orrs	r1, r2
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b64:	0852      	lsrs	r2, r2, #1
 8004b66:	3a01      	subs	r2, #1
 8004b68:	0552      	lsls	r2, r2, #21
 8004b6a:	4311      	orrs	r1, r2
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b70:	0852      	lsrs	r2, r2, #1
 8004b72:	3a01      	subs	r2, #1
 8004b74:	0652      	lsls	r2, r2, #25
 8004b76:	4311      	orrs	r1, r2
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b7c:	0912      	lsrs	r2, r2, #4
 8004b7e:	0452      	lsls	r2, r2, #17
 8004b80:	430a      	orrs	r2, r1
 8004b82:	4930      	ldr	r1, [pc, #192]	; (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b88:	4b2e      	ldr	r3, [pc, #184]	; (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a2d      	ldr	r2, [pc, #180]	; (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004b8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b94:	4b2b      	ldr	r3, [pc, #172]	; (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	4a2a      	ldr	r2, [pc, #168]	; (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004b9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ba0:	f7fe fa92 	bl	80030c8 <HAL_GetTick>
 8004ba4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ba6:	e008      	b.n	8004bba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ba8:	f7fe fa8e 	bl	80030c8 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e058      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bba:	4b22      	ldr	r3, [pc, #136]	; (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d0f0      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bc6:	e050      	b.n	8004c6a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e04f      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bcc:	4b1d      	ldr	r3, [pc, #116]	; (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d148      	bne.n	8004c6a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004bd8:	4b1a      	ldr	r3, [pc, #104]	; (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a19      	ldr	r2, [pc, #100]	; (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004bde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004be2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004be4:	4b17      	ldr	r3, [pc, #92]	; (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	4a16      	ldr	r2, [pc, #88]	; (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004bea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004bf0:	f7fe fa6a 	bl	80030c8 <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf8:	f7fe fa66 	bl	80030c8 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e030      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c0a:	4b0e      	ldr	r3, [pc, #56]	; (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0f0      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x734>
 8004c16:	e028      	b.n	8004c6a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	2b0c      	cmp	r3, #12
 8004c1c:	d023      	beq.n	8004c66 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c1e:	4b09      	ldr	r3, [pc, #36]	; (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a08      	ldr	r2, [pc, #32]	; (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004c24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2a:	f7fe fa4d 	bl	80030c8 <HAL_GetTick>
 8004c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c30:	e00c      	b.n	8004c4c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c32:	f7fe fa49 	bl	80030c8 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d905      	bls.n	8004c4c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e013      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
 8004c44:	40021000 	.word	0x40021000
 8004c48:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c4c:	4b09      	ldr	r3, [pc, #36]	; (8004c74 <HAL_RCC_OscConfig+0x7b0>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1ec      	bne.n	8004c32 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c58:	4b06      	ldr	r3, [pc, #24]	; (8004c74 <HAL_RCC_OscConfig+0x7b0>)
 8004c5a:	68da      	ldr	r2, [r3, #12]
 8004c5c:	4905      	ldr	r1, [pc, #20]	; (8004c74 <HAL_RCC_OscConfig+0x7b0>)
 8004c5e:	4b06      	ldr	r3, [pc, #24]	; (8004c78 <HAL_RCC_OscConfig+0x7b4>)
 8004c60:	4013      	ands	r3, r2
 8004c62:	60cb      	str	r3, [r1, #12]
 8004c64:	e001      	b.n	8004c6a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e000      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3720      	adds	r7, #32
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	40021000 	.word	0x40021000
 8004c78:	feeefffc 	.word	0xfeeefffc

08004c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e0e7      	b.n	8004e60 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c90:	4b75      	ldr	r3, [pc, #468]	; (8004e68 <HAL_RCC_ClockConfig+0x1ec>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d910      	bls.n	8004cc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c9e:	4b72      	ldr	r3, [pc, #456]	; (8004e68 <HAL_RCC_ClockConfig+0x1ec>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f023 0207 	bic.w	r2, r3, #7
 8004ca6:	4970      	ldr	r1, [pc, #448]	; (8004e68 <HAL_RCC_ClockConfig+0x1ec>)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cae:	4b6e      	ldr	r3, [pc, #440]	; (8004e68 <HAL_RCC_ClockConfig+0x1ec>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d001      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e0cf      	b.n	8004e60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d010      	beq.n	8004cee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689a      	ldr	r2, [r3, #8]
 8004cd0:	4b66      	ldr	r3, [pc, #408]	; (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d908      	bls.n	8004cee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cdc:	4b63      	ldr	r3, [pc, #396]	; (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	4960      	ldr	r1, [pc, #384]	; (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d04c      	beq.n	8004d94 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	2b03      	cmp	r3, #3
 8004d00:	d107      	bne.n	8004d12 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d02:	4b5a      	ldr	r3, [pc, #360]	; (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d121      	bne.n	8004d52 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e0a6      	b.n	8004e60 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d107      	bne.n	8004d2a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d1a:	4b54      	ldr	r3, [pc, #336]	; (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d115      	bne.n	8004d52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e09a      	b.n	8004e60 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d107      	bne.n	8004d42 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d32:	4b4e      	ldr	r3, [pc, #312]	; (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d109      	bne.n	8004d52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e08e      	b.n	8004e60 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d42:	4b4a      	ldr	r3, [pc, #296]	; (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e086      	b.n	8004e60 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d52:	4b46      	ldr	r3, [pc, #280]	; (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f023 0203 	bic.w	r2, r3, #3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	4943      	ldr	r1, [pc, #268]	; (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d64:	f7fe f9b0 	bl	80030c8 <HAL_GetTick>
 8004d68:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d6a:	e00a      	b.n	8004d82 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d6c:	f7fe f9ac 	bl	80030c8 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e06e      	b.n	8004e60 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d82:	4b3a      	ldr	r3, [pc, #232]	; (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 020c 	and.w	r2, r3, #12
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d1eb      	bne.n	8004d6c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d010      	beq.n	8004dc2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689a      	ldr	r2, [r3, #8]
 8004da4:	4b31      	ldr	r3, [pc, #196]	; (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d208      	bcs.n	8004dc2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004db0:	4b2e      	ldr	r3, [pc, #184]	; (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	492b      	ldr	r1, [pc, #172]	; (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dc2:	4b29      	ldr	r3, [pc, #164]	; (8004e68 <HAL_RCC_ClockConfig+0x1ec>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0307 	and.w	r3, r3, #7
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d210      	bcs.n	8004df2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dd0:	4b25      	ldr	r3, [pc, #148]	; (8004e68 <HAL_RCC_ClockConfig+0x1ec>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f023 0207 	bic.w	r2, r3, #7
 8004dd8:	4923      	ldr	r1, [pc, #140]	; (8004e68 <HAL_RCC_ClockConfig+0x1ec>)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de0:	4b21      	ldr	r3, [pc, #132]	; (8004e68 <HAL_RCC_ClockConfig+0x1ec>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d001      	beq.n	8004df2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e036      	b.n	8004e60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0304 	and.w	r3, r3, #4
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d008      	beq.n	8004e10 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dfe:	4b1b      	ldr	r3, [pc, #108]	; (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	4918      	ldr	r1, [pc, #96]	; (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0308 	and.w	r3, r3, #8
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d009      	beq.n	8004e30 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e1c:	4b13      	ldr	r3, [pc, #76]	; (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	00db      	lsls	r3, r3, #3
 8004e2a:	4910      	ldr	r1, [pc, #64]	; (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e30:	f000 f824 	bl	8004e7c <HAL_RCC_GetSysClockFreq>
 8004e34:	4602      	mov	r2, r0
 8004e36:	4b0d      	ldr	r3, [pc, #52]	; (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	091b      	lsrs	r3, r3, #4
 8004e3c:	f003 030f 	and.w	r3, r3, #15
 8004e40:	490b      	ldr	r1, [pc, #44]	; (8004e70 <HAL_RCC_ClockConfig+0x1f4>)
 8004e42:	5ccb      	ldrb	r3, [r1, r3]
 8004e44:	f003 031f 	and.w	r3, r3, #31
 8004e48:	fa22 f303 	lsr.w	r3, r2, r3
 8004e4c:	4a09      	ldr	r2, [pc, #36]	; (8004e74 <HAL_RCC_ClockConfig+0x1f8>)
 8004e4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e50:	4b09      	ldr	r3, [pc, #36]	; (8004e78 <HAL_RCC_ClockConfig+0x1fc>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7fd ff75 	bl	8002d44 <HAL_InitTick>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e5e:	7afb      	ldrb	r3, [r7, #11]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	40022000 	.word	0x40022000
 8004e6c:	40021000 	.word	0x40021000
 8004e70:	080107fc 	.word	0x080107fc
 8004e74:	20000000 	.word	0x20000000
 8004e78:	20000004 	.word	0x20000004

08004e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b089      	sub	sp, #36	; 0x24
 8004e80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	61fb      	str	r3, [r7, #28]
 8004e86:	2300      	movs	r3, #0
 8004e88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e8a:	4b3e      	ldr	r3, [pc, #248]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 030c 	and.w	r3, r3, #12
 8004e92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e94:	4b3b      	ldr	r3, [pc, #236]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f003 0303 	and.w	r3, r3, #3
 8004e9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d005      	beq.n	8004eb0 <HAL_RCC_GetSysClockFreq+0x34>
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	2b0c      	cmp	r3, #12
 8004ea8:	d121      	bne.n	8004eee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d11e      	bne.n	8004eee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004eb0:	4b34      	ldr	r3, [pc, #208]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0308 	and.w	r3, r3, #8
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d107      	bne.n	8004ecc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ebc:	4b31      	ldr	r3, [pc, #196]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ec2:	0a1b      	lsrs	r3, r3, #8
 8004ec4:	f003 030f 	and.w	r3, r3, #15
 8004ec8:	61fb      	str	r3, [r7, #28]
 8004eca:	e005      	b.n	8004ed8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ecc:	4b2d      	ldr	r3, [pc, #180]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	091b      	lsrs	r3, r3, #4
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ed8:	4a2b      	ldr	r2, [pc, #172]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ee0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10d      	bne.n	8004f04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004eec:	e00a      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	2b04      	cmp	r3, #4
 8004ef2:	d102      	bne.n	8004efa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ef4:	4b25      	ldr	r3, [pc, #148]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x110>)
 8004ef6:	61bb      	str	r3, [r7, #24]
 8004ef8:	e004      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	2b08      	cmp	r3, #8
 8004efe:	d101      	bne.n	8004f04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f00:	4b23      	ldr	r3, [pc, #140]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	2b0c      	cmp	r3, #12
 8004f08:	d134      	bne.n	8004f74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f0a:	4b1e      	ldr	r3, [pc, #120]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f003 0303 	and.w	r3, r3, #3
 8004f12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d003      	beq.n	8004f22 <HAL_RCC_GetSysClockFreq+0xa6>
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	2b03      	cmp	r3, #3
 8004f1e:	d003      	beq.n	8004f28 <HAL_RCC_GetSysClockFreq+0xac>
 8004f20:	e005      	b.n	8004f2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f22:	4b1a      	ldr	r3, [pc, #104]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x110>)
 8004f24:	617b      	str	r3, [r7, #20]
      break;
 8004f26:	e005      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f28:	4b19      	ldr	r3, [pc, #100]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f2a:	617b      	str	r3, [r7, #20]
      break;
 8004f2c:	e002      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	617b      	str	r3, [r7, #20]
      break;
 8004f32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f34:	4b13      	ldr	r3, [pc, #76]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	091b      	lsrs	r3, r3, #4
 8004f3a:	f003 0307 	and.w	r3, r3, #7
 8004f3e:	3301      	adds	r3, #1
 8004f40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f42:	4b10      	ldr	r3, [pc, #64]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	0a1b      	lsrs	r3, r3, #8
 8004f48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	fb03 f202 	mul.w	r2, r3, r2
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f5a:	4b0a      	ldr	r3, [pc, #40]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	0e5b      	lsrs	r3, r3, #25
 8004f60:	f003 0303 	and.w	r3, r3, #3
 8004f64:	3301      	adds	r3, #1
 8004f66:	005b      	lsls	r3, r3, #1
 8004f68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f74:	69bb      	ldr	r3, [r7, #24]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3724      	adds	r7, #36	; 0x24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	40021000 	.word	0x40021000
 8004f88:	08010814 	.word	0x08010814
 8004f8c:	00f42400 	.word	0x00f42400
 8004f90:	007a1200 	.word	0x007a1200

08004f94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f94:	b480      	push	{r7}
 8004f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f98:	4b03      	ldr	r3, [pc, #12]	; (8004fa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	20000000 	.word	0x20000000

08004fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004fb0:	f7ff fff0 	bl	8004f94 <HAL_RCC_GetHCLKFreq>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	4b06      	ldr	r3, [pc, #24]	; (8004fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	0a1b      	lsrs	r3, r3, #8
 8004fbc:	f003 0307 	and.w	r3, r3, #7
 8004fc0:	4904      	ldr	r1, [pc, #16]	; (8004fd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fc2:	5ccb      	ldrb	r3, [r1, r3]
 8004fc4:	f003 031f 	and.w	r3, r3, #31
 8004fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	0801080c 	.word	0x0801080c

08004fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004fdc:	f7ff ffda 	bl	8004f94 <HAL_RCC_GetHCLKFreq>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	4b06      	ldr	r3, [pc, #24]	; (8004ffc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	0adb      	lsrs	r3, r3, #11
 8004fe8:	f003 0307 	and.w	r3, r3, #7
 8004fec:	4904      	ldr	r1, [pc, #16]	; (8005000 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fee:	5ccb      	ldrb	r3, [r1, r3]
 8004ff0:	f003 031f 	and.w	r3, r3, #31
 8004ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	40021000 	.word	0x40021000
 8005000:	0801080c 	.word	0x0801080c

08005004 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	220f      	movs	r2, #15
 8005012:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005014:	4b12      	ldr	r3, [pc, #72]	; (8005060 <HAL_RCC_GetClockConfig+0x5c>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f003 0203 	and.w	r2, r3, #3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005020:	4b0f      	ldr	r3, [pc, #60]	; (8005060 <HAL_RCC_GetClockConfig+0x5c>)
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800502c:	4b0c      	ldr	r3, [pc, #48]	; (8005060 <HAL_RCC_GetClockConfig+0x5c>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005038:	4b09      	ldr	r3, [pc, #36]	; (8005060 <HAL_RCC_GetClockConfig+0x5c>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	08db      	lsrs	r3, r3, #3
 800503e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005046:	4b07      	ldr	r3, [pc, #28]	; (8005064 <HAL_RCC_GetClockConfig+0x60>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0207 	and.w	r2, r3, #7
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	601a      	str	r2, [r3, #0]
}
 8005052:	bf00      	nop
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	40021000 	.word	0x40021000
 8005064:	40022000 	.word	0x40022000

08005068 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005070:	2300      	movs	r3, #0
 8005072:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005074:	4b2a      	ldr	r3, [pc, #168]	; (8005120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d003      	beq.n	8005088 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005080:	f7ff f9bc 	bl	80043fc <HAL_PWREx_GetVoltageRange>
 8005084:	6178      	str	r0, [r7, #20]
 8005086:	e014      	b.n	80050b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005088:	4b25      	ldr	r3, [pc, #148]	; (8005120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800508a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800508c:	4a24      	ldr	r2, [pc, #144]	; (8005120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800508e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005092:	6593      	str	r3, [r2, #88]	; 0x58
 8005094:	4b22      	ldr	r3, [pc, #136]	; (8005120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80050a0:	f7ff f9ac 	bl	80043fc <HAL_PWREx_GetVoltageRange>
 80050a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80050a6:	4b1e      	ldr	r3, [pc, #120]	; (8005120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050aa:	4a1d      	ldr	r2, [pc, #116]	; (8005120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050b8:	d10b      	bne.n	80050d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b80      	cmp	r3, #128	; 0x80
 80050be:	d919      	bls.n	80050f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2ba0      	cmp	r3, #160	; 0xa0
 80050c4:	d902      	bls.n	80050cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050c6:	2302      	movs	r3, #2
 80050c8:	613b      	str	r3, [r7, #16]
 80050ca:	e013      	b.n	80050f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050cc:	2301      	movs	r3, #1
 80050ce:	613b      	str	r3, [r7, #16]
 80050d0:	e010      	b.n	80050f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b80      	cmp	r3, #128	; 0x80
 80050d6:	d902      	bls.n	80050de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80050d8:	2303      	movs	r3, #3
 80050da:	613b      	str	r3, [r7, #16]
 80050dc:	e00a      	b.n	80050f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2b80      	cmp	r3, #128	; 0x80
 80050e2:	d102      	bne.n	80050ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050e4:	2302      	movs	r3, #2
 80050e6:	613b      	str	r3, [r7, #16]
 80050e8:	e004      	b.n	80050f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2b70      	cmp	r3, #112	; 0x70
 80050ee:	d101      	bne.n	80050f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050f0:	2301      	movs	r3, #1
 80050f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80050f4:	4b0b      	ldr	r3, [pc, #44]	; (8005124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f023 0207 	bic.w	r2, r3, #7
 80050fc:	4909      	ldr	r1, [pc, #36]	; (8005124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	4313      	orrs	r3, r2
 8005102:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005104:	4b07      	ldr	r3, [pc, #28]	; (8005124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0307 	and.w	r3, r3, #7
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	429a      	cmp	r2, r3
 8005110:	d001      	beq.n	8005116 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e000      	b.n	8005118 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	40021000 	.word	0x40021000
 8005124:	40022000 	.word	0x40022000

08005128 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005130:	2300      	movs	r3, #0
 8005132:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005134:	2300      	movs	r3, #0
 8005136:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005140:	2b00      	cmp	r3, #0
 8005142:	d041      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005148:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800514c:	d02a      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800514e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005152:	d824      	bhi.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005154:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005158:	d008      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800515a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800515e:	d81e      	bhi.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00a      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005164:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005168:	d010      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800516a:	e018      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800516c:	4b86      	ldr	r3, [pc, #536]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	4a85      	ldr	r2, [pc, #532]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005176:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005178:	e015      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	3304      	adds	r3, #4
 800517e:	2100      	movs	r1, #0
 8005180:	4618      	mov	r0, r3
 8005182:	f000 fabb 	bl	80056fc <RCCEx_PLLSAI1_Config>
 8005186:	4603      	mov	r3, r0
 8005188:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800518a:	e00c      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	3320      	adds	r3, #32
 8005190:	2100      	movs	r1, #0
 8005192:	4618      	mov	r0, r3
 8005194:	f000 fba6 	bl	80058e4 <RCCEx_PLLSAI2_Config>
 8005198:	4603      	mov	r3, r0
 800519a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800519c:	e003      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	74fb      	strb	r3, [r7, #19]
      break;
 80051a2:	e000      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80051a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051a6:	7cfb      	ldrb	r3, [r7, #19]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10b      	bne.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051ac:	4b76      	ldr	r3, [pc, #472]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051ba:	4973      	ldr	r1, [pc, #460]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80051c2:	e001      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c4:	7cfb      	ldrb	r3, [r7, #19]
 80051c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d041      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051dc:	d02a      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80051de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051e2:	d824      	bhi.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80051e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051e8:	d008      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80051ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051ee:	d81e      	bhi.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00a      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80051f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051f8:	d010      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80051fa:	e018      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051fc:	4b62      	ldr	r3, [pc, #392]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	4a61      	ldr	r2, [pc, #388]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005206:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005208:	e015      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	3304      	adds	r3, #4
 800520e:	2100      	movs	r1, #0
 8005210:	4618      	mov	r0, r3
 8005212:	f000 fa73 	bl	80056fc <RCCEx_PLLSAI1_Config>
 8005216:	4603      	mov	r3, r0
 8005218:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800521a:	e00c      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	3320      	adds	r3, #32
 8005220:	2100      	movs	r1, #0
 8005222:	4618      	mov	r0, r3
 8005224:	f000 fb5e 	bl	80058e4 <RCCEx_PLLSAI2_Config>
 8005228:	4603      	mov	r3, r0
 800522a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800522c:	e003      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	74fb      	strb	r3, [r7, #19]
      break;
 8005232:	e000      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005234:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005236:	7cfb      	ldrb	r3, [r7, #19]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10b      	bne.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800523c:	4b52      	ldr	r3, [pc, #328]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800523e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005242:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800524a:	494f      	ldr	r1, [pc, #316]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800524c:	4313      	orrs	r3, r2
 800524e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005252:	e001      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005254:	7cfb      	ldrb	r3, [r7, #19]
 8005256:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005260:	2b00      	cmp	r3, #0
 8005262:	f000 80a0 	beq.w	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005266:	2300      	movs	r3, #0
 8005268:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800526a:	4b47      	ldr	r3, [pc, #284]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800526c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800526e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005276:	2301      	movs	r3, #1
 8005278:	e000      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800527a:	2300      	movs	r3, #0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00d      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005280:	4b41      	ldr	r3, [pc, #260]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005284:	4a40      	ldr	r2, [pc, #256]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800528a:	6593      	str	r3, [r2, #88]	; 0x58
 800528c:	4b3e      	ldr	r3, [pc, #248]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800528e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005294:	60bb      	str	r3, [r7, #8]
 8005296:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005298:	2301      	movs	r3, #1
 800529a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800529c:	4b3b      	ldr	r3, [pc, #236]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a3a      	ldr	r2, [pc, #232]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052a8:	f7fd ff0e 	bl	80030c8 <HAL_GetTick>
 80052ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052ae:	e009      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052b0:	f7fd ff0a 	bl	80030c8 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d902      	bls.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	74fb      	strb	r3, [r7, #19]
        break;
 80052c2:	e005      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052c4:	4b31      	ldr	r3, [pc, #196]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d0ef      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80052d0:	7cfb      	ldrb	r3, [r7, #19]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d15c      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052d6:	4b2c      	ldr	r3, [pc, #176]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d01f      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d019      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052f4:	4b24      	ldr	r3, [pc, #144]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005300:	4b21      	ldr	r3, [pc, #132]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005306:	4a20      	ldr	r2, [pc, #128]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800530c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005310:	4b1d      	ldr	r3, [pc, #116]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005316:	4a1c      	ldr	r2, [pc, #112]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800531c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005320:	4a19      	ldr	r2, [pc, #100]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b00      	cmp	r3, #0
 8005330:	d016      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005332:	f7fd fec9 	bl	80030c8 <HAL_GetTick>
 8005336:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005338:	e00b      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800533a:	f7fd fec5 	bl	80030c8 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	f241 3288 	movw	r2, #5000	; 0x1388
 8005348:	4293      	cmp	r3, r2
 800534a:	d902      	bls.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	74fb      	strb	r3, [r7, #19]
            break;
 8005350:	e006      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005352:	4b0d      	ldr	r3, [pc, #52]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d0ec      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005360:	7cfb      	ldrb	r3, [r7, #19]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10c      	bne.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005366:	4b08      	ldr	r3, [pc, #32]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005376:	4904      	ldr	r1, [pc, #16]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005378:	4313      	orrs	r3, r2
 800537a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800537e:	e009      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005380:	7cfb      	ldrb	r3, [r7, #19]
 8005382:	74bb      	strb	r3, [r7, #18]
 8005384:	e006      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005386:	bf00      	nop
 8005388:	40021000 	.word	0x40021000
 800538c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005390:	7cfb      	ldrb	r3, [r7, #19]
 8005392:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005394:	7c7b      	ldrb	r3, [r7, #17]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d105      	bne.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800539a:	4b9e      	ldr	r3, [pc, #632]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800539c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800539e:	4a9d      	ldr	r2, [pc, #628]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00a      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053b2:	4b98      	ldr	r3, [pc, #608]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b8:	f023 0203 	bic.w	r2, r3, #3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c0:	4994      	ldr	r1, [pc, #592]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00a      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053d4:	4b8f      	ldr	r3, [pc, #572]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053da:	f023 020c 	bic.w	r2, r3, #12
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e2:	498c      	ldr	r1, [pc, #560]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0304 	and.w	r3, r3, #4
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053f6:	4b87      	ldr	r3, [pc, #540]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005404:	4983      	ldr	r1, [pc, #524]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005406:	4313      	orrs	r3, r2
 8005408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0308 	and.w	r3, r3, #8
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00a      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005418:	4b7e      	ldr	r3, [pc, #504]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800541a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800541e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005426:	497b      	ldr	r1, [pc, #492]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005428:	4313      	orrs	r3, r2
 800542a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0310 	and.w	r3, r3, #16
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800543a:	4b76      	ldr	r3, [pc, #472]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800543c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005440:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005448:	4972      	ldr	r1, [pc, #456]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800544a:	4313      	orrs	r3, r2
 800544c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0320 	and.w	r3, r3, #32
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00a      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800545c:	4b6d      	ldr	r3, [pc, #436]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800545e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005462:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800546a:	496a      	ldr	r1, [pc, #424]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800546c:	4313      	orrs	r3, r2
 800546e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800547e:	4b65      	ldr	r3, [pc, #404]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005484:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800548c:	4961      	ldr	r1, [pc, #388]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800548e:	4313      	orrs	r3, r2
 8005490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00a      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054a0:	4b5c      	ldr	r3, [pc, #368]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ae:	4959      	ldr	r1, [pc, #356]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054c2:	4b54      	ldr	r3, [pc, #336]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054d0:	4950      	ldr	r1, [pc, #320]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00a      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054e4:	4b4b      	ldr	r3, [pc, #300]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f2:	4948      	ldr	r1, [pc, #288]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00a      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005506:	4b43      	ldr	r3, [pc, #268]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005514:	493f      	ldr	r1, [pc, #252]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005516:	4313      	orrs	r3, r2
 8005518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d028      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005528:	4b3a      	ldr	r3, [pc, #232]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800552a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005536:	4937      	ldr	r1, [pc, #220]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005538:	4313      	orrs	r3, r2
 800553a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005542:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005546:	d106      	bne.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005548:	4b32      	ldr	r3, [pc, #200]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	4a31      	ldr	r2, [pc, #196]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800554e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005552:	60d3      	str	r3, [r2, #12]
 8005554:	e011      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800555a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800555e:	d10c      	bne.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	3304      	adds	r3, #4
 8005564:	2101      	movs	r1, #1
 8005566:	4618      	mov	r0, r3
 8005568:	f000 f8c8 	bl	80056fc <RCCEx_PLLSAI1_Config>
 800556c:	4603      	mov	r3, r0
 800556e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005570:	7cfb      	ldrb	r3, [r7, #19]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005576:	7cfb      	ldrb	r3, [r7, #19]
 8005578:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d028      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005586:	4b23      	ldr	r3, [pc, #140]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800558c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005594:	491f      	ldr	r1, [pc, #124]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005596:	4313      	orrs	r3, r2
 8005598:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055a4:	d106      	bne.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055a6:	4b1b      	ldr	r3, [pc, #108]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	4a1a      	ldr	r2, [pc, #104]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055b0:	60d3      	str	r3, [r2, #12]
 80055b2:	e011      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055bc:	d10c      	bne.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	3304      	adds	r3, #4
 80055c2:	2101      	movs	r1, #1
 80055c4:	4618      	mov	r0, r3
 80055c6:	f000 f899 	bl	80056fc <RCCEx_PLLSAI1_Config>
 80055ca:	4603      	mov	r3, r0
 80055cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055ce:	7cfb      	ldrb	r3, [r7, #19]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d001      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80055d4:	7cfb      	ldrb	r3, [r7, #19]
 80055d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d02b      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055e4:	4b0b      	ldr	r3, [pc, #44]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055f2:	4908      	ldr	r1, [pc, #32]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005602:	d109      	bne.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005604:	4b03      	ldr	r3, [pc, #12]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	4a02      	ldr	r2, [pc, #8]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800560a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800560e:	60d3      	str	r3, [r2, #12]
 8005610:	e014      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005612:	bf00      	nop
 8005614:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800561c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005620:	d10c      	bne.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	3304      	adds	r3, #4
 8005626:	2101      	movs	r1, #1
 8005628:	4618      	mov	r0, r3
 800562a:	f000 f867 	bl	80056fc <RCCEx_PLLSAI1_Config>
 800562e:	4603      	mov	r3, r0
 8005630:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005632:	7cfb      	ldrb	r3, [r7, #19]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d001      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005638:	7cfb      	ldrb	r3, [r7, #19]
 800563a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d02f      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005648:	4b2b      	ldr	r3, [pc, #172]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800564a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800564e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005656:	4928      	ldr	r1, [pc, #160]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005658:	4313      	orrs	r3, r2
 800565a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005662:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005666:	d10d      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	3304      	adds	r3, #4
 800566c:	2102      	movs	r1, #2
 800566e:	4618      	mov	r0, r3
 8005670:	f000 f844 	bl	80056fc <RCCEx_PLLSAI1_Config>
 8005674:	4603      	mov	r3, r0
 8005676:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005678:	7cfb      	ldrb	r3, [r7, #19]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d014      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800567e:	7cfb      	ldrb	r3, [r7, #19]
 8005680:	74bb      	strb	r3, [r7, #18]
 8005682:	e011      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005688:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800568c:	d10c      	bne.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	3320      	adds	r3, #32
 8005692:	2102      	movs	r1, #2
 8005694:	4618      	mov	r0, r3
 8005696:	f000 f925 	bl	80058e4 <RCCEx_PLLSAI2_Config>
 800569a:	4603      	mov	r3, r0
 800569c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800569e:	7cfb      	ldrb	r3, [r7, #19]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80056a4:	7cfb      	ldrb	r3, [r7, #19]
 80056a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00a      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80056b4:	4b10      	ldr	r3, [pc, #64]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056c2:	490d      	ldr	r1, [pc, #52]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00b      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056d6:	4b08      	ldr	r3, [pc, #32]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056e6:	4904      	ldr	r1, [pc, #16]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80056ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3718      	adds	r7, #24
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	40021000 	.word	0x40021000

080056fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005706:	2300      	movs	r3, #0
 8005708:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800570a:	4b75      	ldr	r3, [pc, #468]	; (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f003 0303 	and.w	r3, r3, #3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d018      	beq.n	8005748 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005716:	4b72      	ldr	r3, [pc, #456]	; (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f003 0203 	and.w	r2, r3, #3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	429a      	cmp	r2, r3
 8005724:	d10d      	bne.n	8005742 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
       ||
 800572a:	2b00      	cmp	r3, #0
 800572c:	d009      	beq.n	8005742 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800572e:	4b6c      	ldr	r3, [pc, #432]	; (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	091b      	lsrs	r3, r3, #4
 8005734:	f003 0307 	and.w	r3, r3, #7
 8005738:	1c5a      	adds	r2, r3, #1
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
       ||
 800573e:	429a      	cmp	r2, r3
 8005740:	d047      	beq.n	80057d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	73fb      	strb	r3, [r7, #15]
 8005746:	e044      	b.n	80057d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2b03      	cmp	r3, #3
 800574e:	d018      	beq.n	8005782 <RCCEx_PLLSAI1_Config+0x86>
 8005750:	2b03      	cmp	r3, #3
 8005752:	d825      	bhi.n	80057a0 <RCCEx_PLLSAI1_Config+0xa4>
 8005754:	2b01      	cmp	r3, #1
 8005756:	d002      	beq.n	800575e <RCCEx_PLLSAI1_Config+0x62>
 8005758:	2b02      	cmp	r3, #2
 800575a:	d009      	beq.n	8005770 <RCCEx_PLLSAI1_Config+0x74>
 800575c:	e020      	b.n	80057a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800575e:	4b60      	ldr	r3, [pc, #384]	; (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d11d      	bne.n	80057a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800576e:	e01a      	b.n	80057a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005770:	4b5b      	ldr	r3, [pc, #364]	; (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005778:	2b00      	cmp	r3, #0
 800577a:	d116      	bne.n	80057aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005780:	e013      	b.n	80057aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005782:	4b57      	ldr	r3, [pc, #348]	; (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10f      	bne.n	80057ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800578e:	4b54      	ldr	r3, [pc, #336]	; (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d109      	bne.n	80057ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800579e:	e006      	b.n	80057ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	73fb      	strb	r3, [r7, #15]
      break;
 80057a4:	e004      	b.n	80057b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057a6:	bf00      	nop
 80057a8:	e002      	b.n	80057b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057aa:	bf00      	nop
 80057ac:	e000      	b.n	80057b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80057b0:	7bfb      	ldrb	r3, [r7, #15]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10d      	bne.n	80057d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80057b6:	4b4a      	ldr	r3, [pc, #296]	; (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6819      	ldr	r1, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	3b01      	subs	r3, #1
 80057c8:	011b      	lsls	r3, r3, #4
 80057ca:	430b      	orrs	r3, r1
 80057cc:	4944      	ldr	r1, [pc, #272]	; (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d17d      	bne.n	80058d4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80057d8:	4b41      	ldr	r3, [pc, #260]	; (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a40      	ldr	r2, [pc, #256]	; (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80057e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057e4:	f7fd fc70 	bl	80030c8 <HAL_GetTick>
 80057e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80057ea:	e009      	b.n	8005800 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057ec:	f7fd fc6c 	bl	80030c8 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d902      	bls.n	8005800 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	73fb      	strb	r3, [r7, #15]
        break;
 80057fe:	e005      	b.n	800580c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005800:	4b37      	ldr	r3, [pc, #220]	; (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1ef      	bne.n	80057ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800580c:	7bfb      	ldrb	r3, [r7, #15]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d160      	bne.n	80058d4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d111      	bne.n	800583c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005818:	4b31      	ldr	r3, [pc, #196]	; (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	6892      	ldr	r2, [r2, #8]
 8005828:	0211      	lsls	r1, r2, #8
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	68d2      	ldr	r2, [r2, #12]
 800582e:	0912      	lsrs	r2, r2, #4
 8005830:	0452      	lsls	r2, r2, #17
 8005832:	430a      	orrs	r2, r1
 8005834:	492a      	ldr	r1, [pc, #168]	; (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005836:	4313      	orrs	r3, r2
 8005838:	610b      	str	r3, [r1, #16]
 800583a:	e027      	b.n	800588c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d112      	bne.n	8005868 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005842:	4b27      	ldr	r3, [pc, #156]	; (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800584a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	6892      	ldr	r2, [r2, #8]
 8005852:	0211      	lsls	r1, r2, #8
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	6912      	ldr	r2, [r2, #16]
 8005858:	0852      	lsrs	r2, r2, #1
 800585a:	3a01      	subs	r2, #1
 800585c:	0552      	lsls	r2, r2, #21
 800585e:	430a      	orrs	r2, r1
 8005860:	491f      	ldr	r1, [pc, #124]	; (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005862:	4313      	orrs	r3, r2
 8005864:	610b      	str	r3, [r1, #16]
 8005866:	e011      	b.n	800588c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005868:	4b1d      	ldr	r3, [pc, #116]	; (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005870:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	6892      	ldr	r2, [r2, #8]
 8005878:	0211      	lsls	r1, r2, #8
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	6952      	ldr	r2, [r2, #20]
 800587e:	0852      	lsrs	r2, r2, #1
 8005880:	3a01      	subs	r2, #1
 8005882:	0652      	lsls	r2, r2, #25
 8005884:	430a      	orrs	r2, r1
 8005886:	4916      	ldr	r1, [pc, #88]	; (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005888:	4313      	orrs	r3, r2
 800588a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800588c:	4b14      	ldr	r3, [pc, #80]	; (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a13      	ldr	r2, [pc, #76]	; (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005892:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005896:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005898:	f7fd fc16 	bl	80030c8 <HAL_GetTick>
 800589c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800589e:	e009      	b.n	80058b4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058a0:	f7fd fc12 	bl	80030c8 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d902      	bls.n	80058b4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	73fb      	strb	r3, [r7, #15]
          break;
 80058b2:	e005      	b.n	80058c0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058b4:	4b0a      	ldr	r3, [pc, #40]	; (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0ef      	beq.n	80058a0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80058c0:	7bfb      	ldrb	r3, [r7, #15]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d106      	bne.n	80058d4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80058c6:	4b06      	ldr	r3, [pc, #24]	; (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058c8:	691a      	ldr	r2, [r3, #16]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	4904      	ldr	r1, [pc, #16]	; (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	40021000 	.word	0x40021000

080058e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058ee:	2300      	movs	r3, #0
 80058f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058f2:	4b6a      	ldr	r3, [pc, #424]	; (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	f003 0303 	and.w	r3, r3, #3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d018      	beq.n	8005930 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80058fe:	4b67      	ldr	r3, [pc, #412]	; (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	f003 0203 	and.w	r2, r3, #3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	429a      	cmp	r2, r3
 800590c:	d10d      	bne.n	800592a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
       ||
 8005912:	2b00      	cmp	r3, #0
 8005914:	d009      	beq.n	800592a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005916:	4b61      	ldr	r3, [pc, #388]	; (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	091b      	lsrs	r3, r3, #4
 800591c:	f003 0307 	and.w	r3, r3, #7
 8005920:	1c5a      	adds	r2, r3, #1
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
       ||
 8005926:	429a      	cmp	r2, r3
 8005928:	d047      	beq.n	80059ba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	73fb      	strb	r3, [r7, #15]
 800592e:	e044      	b.n	80059ba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b03      	cmp	r3, #3
 8005936:	d018      	beq.n	800596a <RCCEx_PLLSAI2_Config+0x86>
 8005938:	2b03      	cmp	r3, #3
 800593a:	d825      	bhi.n	8005988 <RCCEx_PLLSAI2_Config+0xa4>
 800593c:	2b01      	cmp	r3, #1
 800593e:	d002      	beq.n	8005946 <RCCEx_PLLSAI2_Config+0x62>
 8005940:	2b02      	cmp	r3, #2
 8005942:	d009      	beq.n	8005958 <RCCEx_PLLSAI2_Config+0x74>
 8005944:	e020      	b.n	8005988 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005946:	4b55      	ldr	r3, [pc, #340]	; (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d11d      	bne.n	800598e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005956:	e01a      	b.n	800598e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005958:	4b50      	ldr	r3, [pc, #320]	; (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005960:	2b00      	cmp	r3, #0
 8005962:	d116      	bne.n	8005992 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005968:	e013      	b.n	8005992 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800596a:	4b4c      	ldr	r3, [pc, #304]	; (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10f      	bne.n	8005996 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005976:	4b49      	ldr	r3, [pc, #292]	; (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d109      	bne.n	8005996 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005986:	e006      	b.n	8005996 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	73fb      	strb	r3, [r7, #15]
      break;
 800598c:	e004      	b.n	8005998 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800598e:	bf00      	nop
 8005990:	e002      	b.n	8005998 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005992:	bf00      	nop
 8005994:	e000      	b.n	8005998 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005996:	bf00      	nop
    }

    if(status == HAL_OK)
 8005998:	7bfb      	ldrb	r3, [r7, #15]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10d      	bne.n	80059ba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800599e:	4b3f      	ldr	r3, [pc, #252]	; (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6819      	ldr	r1, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	3b01      	subs	r3, #1
 80059b0:	011b      	lsls	r3, r3, #4
 80059b2:	430b      	orrs	r3, r1
 80059b4:	4939      	ldr	r1, [pc, #228]	; (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d167      	bne.n	8005a90 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80059c0:	4b36      	ldr	r3, [pc, #216]	; (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a35      	ldr	r2, [pc, #212]	; (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80059c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059cc:	f7fd fb7c 	bl	80030c8 <HAL_GetTick>
 80059d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059d2:	e009      	b.n	80059e8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80059d4:	f7fd fb78 	bl	80030c8 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d902      	bls.n	80059e8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	73fb      	strb	r3, [r7, #15]
        break;
 80059e6:	e005      	b.n	80059f4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059e8:	4b2c      	ldr	r3, [pc, #176]	; (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1ef      	bne.n	80059d4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80059f4:	7bfb      	ldrb	r3, [r7, #15]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d14a      	bne.n	8005a90 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d111      	bne.n	8005a24 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a00:	4b26      	ldr	r3, [pc, #152]	; (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	6892      	ldr	r2, [r2, #8]
 8005a10:	0211      	lsls	r1, r2, #8
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	68d2      	ldr	r2, [r2, #12]
 8005a16:	0912      	lsrs	r2, r2, #4
 8005a18:	0452      	lsls	r2, r2, #17
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	491f      	ldr	r1, [pc, #124]	; (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	614b      	str	r3, [r1, #20]
 8005a22:	e011      	b.n	8005a48 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a24:	4b1d      	ldr	r3, [pc, #116]	; (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005a2c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6892      	ldr	r2, [r2, #8]
 8005a34:	0211      	lsls	r1, r2, #8
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	6912      	ldr	r2, [r2, #16]
 8005a3a:	0852      	lsrs	r2, r2, #1
 8005a3c:	3a01      	subs	r2, #1
 8005a3e:	0652      	lsls	r2, r2, #25
 8005a40:	430a      	orrs	r2, r1
 8005a42:	4916      	ldr	r1, [pc, #88]	; (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005a48:	4b14      	ldr	r3, [pc, #80]	; (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a13      	ldr	r2, [pc, #76]	; (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a54:	f7fd fb38 	bl	80030c8 <HAL_GetTick>
 8005a58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a5a:	e009      	b.n	8005a70 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a5c:	f7fd fb34 	bl	80030c8 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d902      	bls.n	8005a70 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	73fb      	strb	r3, [r7, #15]
          break;
 8005a6e:	e005      	b.n	8005a7c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a70:	4b0a      	ldr	r3, [pc, #40]	; (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d0ef      	beq.n	8005a5c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005a7c:	7bfb      	ldrb	r3, [r7, #15]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d106      	bne.n	8005a90 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005a82:	4b06      	ldr	r3, [pc, #24]	; (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a84:	695a      	ldr	r2, [r3, #20]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	4904      	ldr	r1, [pc, #16]	; (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	40021000 	.word	0x40021000

08005aa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e095      	b.n	8005bde <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d108      	bne.n	8005acc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ac2:	d009      	beq.n	8005ad8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	61da      	str	r2, [r3, #28]
 8005aca:	e005      	b.n	8005ad8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d106      	bne.n	8005af8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7fc ffea 	bl	8002acc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b18:	d902      	bls.n	8005b20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	e002      	b.n	8005b26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005b2e:	d007      	beq.n	8005b40 <HAL_SPI_Init+0xa0>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b38:	d002      	beq.n	8005b40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b50:	431a      	orrs	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	431a      	orrs	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	69db      	ldr	r3, [r3, #28]
 8005b74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b82:	ea42 0103 	orr.w	r1, r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	0c1b      	lsrs	r3, r3, #16
 8005b9c:	f003 0204 	and.w	r2, r3, #4
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba4:	f003 0310 	and.w	r3, r3, #16
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bae:	f003 0308 	and.w	r3, r3, #8
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005bbc:	ea42 0103 	orr.w	r1, r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b08a      	sub	sp, #40	; 0x28
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	60f8      	str	r0, [r7, #12]
 8005bee:	60b9      	str	r1, [r7, #8]
 8005bf0:	607a      	str	r2, [r7, #4]
 8005bf2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d101      	bne.n	8005c0c <HAL_SPI_TransmitReceive+0x26>
 8005c08:	2302      	movs	r3, #2
 8005c0a:	e1fb      	b.n	8006004 <HAL_SPI_TransmitReceive+0x41e>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c14:	f7fd fa58 	bl	80030c8 <HAL_GetTick>
 8005c18:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c20:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005c28:	887b      	ldrh	r3, [r7, #2]
 8005c2a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005c2c:	887b      	ldrh	r3, [r7, #2]
 8005c2e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c30:	7efb      	ldrb	r3, [r7, #27]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d00e      	beq.n	8005c54 <HAL_SPI_TransmitReceive+0x6e>
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c3c:	d106      	bne.n	8005c4c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d102      	bne.n	8005c4c <HAL_SPI_TransmitReceive+0x66>
 8005c46:	7efb      	ldrb	r3, [r7, #27]
 8005c48:	2b04      	cmp	r3, #4
 8005c4a:	d003      	beq.n	8005c54 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005c52:	e1cd      	b.n	8005ff0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d005      	beq.n	8005c66 <HAL_SPI_TransmitReceive+0x80>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d002      	beq.n	8005c66 <HAL_SPI_TransmitReceive+0x80>
 8005c60:	887b      	ldrh	r3, [r7, #2]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d103      	bne.n	8005c6e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005c6c:	e1c0      	b.n	8005ff0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b04      	cmp	r3, #4
 8005c78:	d003      	beq.n	8005c82 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2205      	movs	r2, #5
 8005c7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	887a      	ldrh	r2, [r7, #2]
 8005c92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	887a      	ldrh	r2, [r7, #2]
 8005c9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	887a      	ldrh	r2, [r7, #2]
 8005ca8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	887a      	ldrh	r2, [r7, #2]
 8005cae:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cc4:	d802      	bhi.n	8005ccc <HAL_SPI_TransmitReceive+0xe6>
 8005cc6:	8a3b      	ldrh	r3, [r7, #16]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d908      	bls.n	8005cde <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005cda:	605a      	str	r2, [r3, #4]
 8005cdc:	e007      	b.n	8005cee <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005cec:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf8:	2b40      	cmp	r3, #64	; 0x40
 8005cfa:	d007      	beq.n	8005d0c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d14:	d97c      	bls.n	8005e10 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d002      	beq.n	8005d24 <HAL_SPI_TransmitReceive+0x13e>
 8005d1e:	8a7b      	ldrh	r3, [r7, #18]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d169      	bne.n	8005df8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d28:	881a      	ldrh	r2, [r3, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d34:	1c9a      	adds	r2, r3, #2
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	3b01      	subs	r3, #1
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d48:	e056      	b.n	8005df8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f003 0302 	and.w	r3, r3, #2
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d11b      	bne.n	8005d90 <HAL_SPI_TransmitReceive+0x1aa>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d016      	beq.n	8005d90 <HAL_SPI_TransmitReceive+0x1aa>
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d113      	bne.n	8005d90 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6c:	881a      	ldrh	r2, [r3, #0]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d78:	1c9a      	adds	r2, r3, #2
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	3b01      	subs	r3, #1
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d11c      	bne.n	8005dd8 <HAL_SPI_TransmitReceive+0x1f2>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d016      	beq.n	8005dd8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68da      	ldr	r2, [r3, #12]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db4:	b292      	uxth	r2, r2
 8005db6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbc:	1c9a      	adds	r2, r3, #2
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005dd8:	f7fd f976 	bl	80030c8 <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d807      	bhi.n	8005df8 <HAL_SPI_TransmitReceive+0x212>
 8005de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dee:	d003      	beq.n	8005df8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005df6:	e0fb      	b.n	8005ff0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1a3      	bne.n	8005d4a <HAL_SPI_TransmitReceive+0x164>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d19d      	bne.n	8005d4a <HAL_SPI_TransmitReceive+0x164>
 8005e0e:	e0df      	b.n	8005fd0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d003      	beq.n	8005e20 <HAL_SPI_TransmitReceive+0x23a>
 8005e18:	8a7b      	ldrh	r3, [r7, #18]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	f040 80cb 	bne.w	8005fb6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d912      	bls.n	8005e50 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2e:	881a      	ldrh	r2, [r3, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3a:	1c9a      	adds	r2, r3, #2
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	3b02      	subs	r3, #2
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e4e:	e0b2      	b.n	8005fb6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	330c      	adds	r3, #12
 8005e5a:	7812      	ldrb	r2, [r2, #0]
 8005e5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e62:	1c5a      	adds	r2, r3, #1
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e76:	e09e      	b.n	8005fb6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f003 0302 	and.w	r3, r3, #2
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d134      	bne.n	8005ef0 <HAL_SPI_TransmitReceive+0x30a>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d02f      	beq.n	8005ef0 <HAL_SPI_TransmitReceive+0x30a>
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d12c      	bne.n	8005ef0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d912      	bls.n	8005ec6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea4:	881a      	ldrh	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb0:	1c9a      	adds	r2, r3, #2
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	3b02      	subs	r3, #2
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ec4:	e012      	b.n	8005eec <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	330c      	adds	r3, #12
 8005ed0:	7812      	ldrb	r2, [r2, #0]
 8005ed2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed8:	1c5a      	adds	r2, r3, #1
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005eec:	2300      	movs	r3, #0
 8005eee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d148      	bne.n	8005f90 <HAL_SPI_TransmitReceive+0x3aa>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d042      	beq.n	8005f90 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d923      	bls.n	8005f5e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68da      	ldr	r2, [r3, #12]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f20:	b292      	uxth	r2, r2
 8005f22:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f28:	1c9a      	adds	r2, r3, #2
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	3b02      	subs	r3, #2
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d81f      	bhi.n	8005f8c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	685a      	ldr	r2, [r3, #4]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f5a:	605a      	str	r2, [r3, #4]
 8005f5c:	e016      	b.n	8005f8c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f103 020c 	add.w	r2, r3, #12
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6a:	7812      	ldrb	r2, [r2, #0]
 8005f6c:	b2d2      	uxtb	r2, r2
 8005f6e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f74:	1c5a      	adds	r2, r3, #1
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	3b01      	subs	r3, #1
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005f90:	f7fd f89a 	bl	80030c8 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d803      	bhi.n	8005fa8 <HAL_SPI_TransmitReceive+0x3c2>
 8005fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa6:	d102      	bne.n	8005fae <HAL_SPI_TransmitReceive+0x3c8>
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d103      	bne.n	8005fb6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005fb4:	e01c      	b.n	8005ff0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f47f af5b 	bne.w	8005e78 <HAL_SPI_TransmitReceive+0x292>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f47f af54 	bne.w	8005e78 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fd0:	69fa      	ldr	r2, [r7, #28]
 8005fd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 f937 	bl	8006248 <SPI_EndRxTxTransaction>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d006      	beq.n	8005fee <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2220      	movs	r2, #32
 8005fea:	661a      	str	r2, [r3, #96]	; 0x60
 8005fec:	e000      	b.n	8005ff0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005fee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006000:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006004:	4618      	mov	r0, r3
 8006006:	3728      	adds	r7, #40	; 0x28
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b088      	sub	sp, #32
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	603b      	str	r3, [r7, #0]
 8006018:	4613      	mov	r3, r2
 800601a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800601c:	f7fd f854 	bl	80030c8 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006024:	1a9b      	subs	r3, r3, r2
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	4413      	add	r3, r2
 800602a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800602c:	f7fd f84c 	bl	80030c8 <HAL_GetTick>
 8006030:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006032:	4b39      	ldr	r3, [pc, #228]	; (8006118 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	015b      	lsls	r3, r3, #5
 8006038:	0d1b      	lsrs	r3, r3, #20
 800603a:	69fa      	ldr	r2, [r7, #28]
 800603c:	fb02 f303 	mul.w	r3, r2, r3
 8006040:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006042:	e054      	b.n	80060ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800604a:	d050      	beq.n	80060ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800604c:	f7fd f83c 	bl	80030c8 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	69fa      	ldr	r2, [r7, #28]
 8006058:	429a      	cmp	r2, r3
 800605a:	d902      	bls.n	8006062 <SPI_WaitFlagStateUntilTimeout+0x56>
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d13d      	bne.n	80060de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006070:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800607a:	d111      	bne.n	80060a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006084:	d004      	beq.n	8006090 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800608e:	d107      	bne.n	80060a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800609e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060a8:	d10f      	bne.n	80060ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060b8:	601a      	str	r2, [r3, #0]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e017      	b.n	800610e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	3b01      	subs	r3, #1
 80060ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	689a      	ldr	r2, [r3, #8]
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	4013      	ands	r3, r2
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	bf0c      	ite	eq
 80060fe:	2301      	moveq	r3, #1
 8006100:	2300      	movne	r3, #0
 8006102:	b2db      	uxtb	r3, r3
 8006104:	461a      	mov	r2, r3
 8006106:	79fb      	ldrb	r3, [r7, #7]
 8006108:	429a      	cmp	r2, r3
 800610a:	d19b      	bne.n	8006044 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3720      	adds	r7, #32
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	20000000 	.word	0x20000000

0800611c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b08a      	sub	sp, #40	; 0x28
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
 8006128:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800612a:	2300      	movs	r3, #0
 800612c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800612e:	f7fc ffcb 	bl	80030c8 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006136:	1a9b      	subs	r3, r3, r2
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	4413      	add	r3, r2
 800613c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800613e:	f7fc ffc3 	bl	80030c8 <HAL_GetTick>
 8006142:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	330c      	adds	r3, #12
 800614a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800614c:	4b3d      	ldr	r3, [pc, #244]	; (8006244 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	4613      	mov	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	00da      	lsls	r2, r3, #3
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	0d1b      	lsrs	r3, r3, #20
 800615c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800615e:	fb02 f303 	mul.w	r3, r2, r3
 8006162:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006164:	e060      	b.n	8006228 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800616c:	d107      	bne.n	800617e <SPI_WaitFifoStateUntilTimeout+0x62>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d104      	bne.n	800617e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	b2db      	uxtb	r3, r3
 800617a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800617c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006184:	d050      	beq.n	8006228 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006186:	f7fc ff9f 	bl	80030c8 <HAL_GetTick>
 800618a:	4602      	mov	r2, r0
 800618c:	6a3b      	ldr	r3, [r7, #32]
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006192:	429a      	cmp	r2, r3
 8006194:	d902      	bls.n	800619c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	2b00      	cmp	r3, #0
 800619a:	d13d      	bne.n	8006218 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685a      	ldr	r2, [r3, #4]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80061aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061b4:	d111      	bne.n	80061da <SPI_WaitFifoStateUntilTimeout+0xbe>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061be:	d004      	beq.n	80061ca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061c8:	d107      	bne.n	80061da <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061e2:	d10f      	bne.n	8006204 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006202:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e010      	b.n	800623a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d101      	bne.n	8006222 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800621e:	2300      	movs	r3, #0
 8006220:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	3b01      	subs	r3, #1
 8006226:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689a      	ldr	r2, [r3, #8]
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	4013      	ands	r3, r2
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	429a      	cmp	r2, r3
 8006236:	d196      	bne.n	8006166 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3728      	adds	r7, #40	; 0x28
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	20000000 	.word	0x20000000

08006248 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af02      	add	r7, sp, #8
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	2200      	movs	r2, #0
 800625c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f7ff ff5b 	bl	800611c <SPI_WaitFifoStateUntilTimeout>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d007      	beq.n	800627c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006270:	f043 0220 	orr.w	r2, r3, #32
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e027      	b.n	80062cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	2200      	movs	r2, #0
 8006284:	2180      	movs	r1, #128	; 0x80
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f7ff fec0 	bl	800600c <SPI_WaitFlagStateUntilTimeout>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d007      	beq.n	80062a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006296:	f043 0220 	orr.w	r2, r3, #32
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e014      	b.n	80062cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f7ff ff34 	bl	800611c <SPI_WaitFifoStateUntilTimeout>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d007      	beq.n	80062ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062be:	f043 0220 	orr.w	r2, r3, #32
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e000      	b.n	80062cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e049      	b.n	800637a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d106      	bne.n	8006300 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f7fc fc28 	bl	8002b50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2202      	movs	r2, #2
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	3304      	adds	r3, #4
 8006310:	4619      	mov	r1, r3
 8006312:	4610      	mov	r0, r2
 8006314:	f000 fe5a 	bl	8006fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3708      	adds	r7, #8
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
	...

08006384 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b01      	cmp	r3, #1
 8006396:	d001      	beq.n	800639c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e047      	b.n	800642c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2202      	movs	r2, #2
 80063a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a23      	ldr	r2, [pc, #140]	; (8006438 <HAL_TIM_Base_Start+0xb4>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d01d      	beq.n	80063ea <HAL_TIM_Base_Start+0x66>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063b6:	d018      	beq.n	80063ea <HAL_TIM_Base_Start+0x66>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a1f      	ldr	r2, [pc, #124]	; (800643c <HAL_TIM_Base_Start+0xb8>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d013      	beq.n	80063ea <HAL_TIM_Base_Start+0x66>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a1e      	ldr	r2, [pc, #120]	; (8006440 <HAL_TIM_Base_Start+0xbc>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d00e      	beq.n	80063ea <HAL_TIM_Base_Start+0x66>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a1c      	ldr	r2, [pc, #112]	; (8006444 <HAL_TIM_Base_Start+0xc0>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d009      	beq.n	80063ea <HAL_TIM_Base_Start+0x66>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a1b      	ldr	r2, [pc, #108]	; (8006448 <HAL_TIM_Base_Start+0xc4>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d004      	beq.n	80063ea <HAL_TIM_Base_Start+0x66>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a19      	ldr	r2, [pc, #100]	; (800644c <HAL_TIM_Base_Start+0xc8>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d115      	bne.n	8006416 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	689a      	ldr	r2, [r3, #8]
 80063f0:	4b17      	ldr	r3, [pc, #92]	; (8006450 <HAL_TIM_Base_Start+0xcc>)
 80063f2:	4013      	ands	r3, r2
 80063f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2b06      	cmp	r3, #6
 80063fa:	d015      	beq.n	8006428 <HAL_TIM_Base_Start+0xa4>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006402:	d011      	beq.n	8006428 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 0201 	orr.w	r2, r2, #1
 8006412:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006414:	e008      	b.n	8006428 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f042 0201 	orr.w	r2, r2, #1
 8006424:	601a      	str	r2, [r3, #0]
 8006426:	e000      	b.n	800642a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006428:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3714      	adds	r7, #20
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr
 8006438:	40012c00 	.word	0x40012c00
 800643c:	40000400 	.word	0x40000400
 8006440:	40000800 	.word	0x40000800
 8006444:	40000c00 	.word	0x40000c00
 8006448:	40013400 	.word	0x40013400
 800644c:	40014000 	.word	0x40014000
 8006450:	00010007 	.word	0x00010007

08006454 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6a1a      	ldr	r2, [r3, #32]
 8006462:	f241 1311 	movw	r3, #4369	; 0x1111
 8006466:	4013      	ands	r3, r2
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10f      	bne.n	800648c <HAL_TIM_Base_Stop+0x38>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6a1a      	ldr	r2, [r3, #32]
 8006472:	f240 4344 	movw	r3, #1092	; 0x444
 8006476:	4013      	ands	r3, r2
 8006478:	2b00      	cmp	r3, #0
 800647a:	d107      	bne.n	800648c <HAL_TIM_Base_Stop+0x38>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f022 0201 	bic.w	r2, r2, #1
 800648a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
	...

080064a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d001      	beq.n	80064bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e04f      	b.n	800655c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2202      	movs	r2, #2
 80064c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68da      	ldr	r2, [r3, #12]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f042 0201 	orr.w	r2, r2, #1
 80064d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a23      	ldr	r2, [pc, #140]	; (8006568 <HAL_TIM_Base_Start_IT+0xc4>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d01d      	beq.n	800651a <HAL_TIM_Base_Start_IT+0x76>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064e6:	d018      	beq.n	800651a <HAL_TIM_Base_Start_IT+0x76>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a1f      	ldr	r2, [pc, #124]	; (800656c <HAL_TIM_Base_Start_IT+0xc8>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d013      	beq.n	800651a <HAL_TIM_Base_Start_IT+0x76>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a1e      	ldr	r2, [pc, #120]	; (8006570 <HAL_TIM_Base_Start_IT+0xcc>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d00e      	beq.n	800651a <HAL_TIM_Base_Start_IT+0x76>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a1c      	ldr	r2, [pc, #112]	; (8006574 <HAL_TIM_Base_Start_IT+0xd0>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d009      	beq.n	800651a <HAL_TIM_Base_Start_IT+0x76>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a1b      	ldr	r2, [pc, #108]	; (8006578 <HAL_TIM_Base_Start_IT+0xd4>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d004      	beq.n	800651a <HAL_TIM_Base_Start_IT+0x76>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a19      	ldr	r2, [pc, #100]	; (800657c <HAL_TIM_Base_Start_IT+0xd8>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d115      	bne.n	8006546 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	689a      	ldr	r2, [r3, #8]
 8006520:	4b17      	ldr	r3, [pc, #92]	; (8006580 <HAL_TIM_Base_Start_IT+0xdc>)
 8006522:	4013      	ands	r3, r2
 8006524:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2b06      	cmp	r3, #6
 800652a:	d015      	beq.n	8006558 <HAL_TIM_Base_Start_IT+0xb4>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006532:	d011      	beq.n	8006558 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f042 0201 	orr.w	r2, r2, #1
 8006542:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006544:	e008      	b.n	8006558 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f042 0201 	orr.w	r2, r2, #1
 8006554:	601a      	str	r2, [r3, #0]
 8006556:	e000      	b.n	800655a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006558:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3714      	adds	r7, #20
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr
 8006568:	40012c00 	.word	0x40012c00
 800656c:	40000400 	.word	0x40000400
 8006570:	40000800 	.word	0x40000800
 8006574:	40000c00 	.word	0x40000c00
 8006578:	40013400 	.word	0x40013400
 800657c:	40014000 	.word	0x40014000
 8006580:	00010007 	.word	0x00010007

08006584 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e049      	b.n	800662a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800659c:	b2db      	uxtb	r3, r3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d106      	bne.n	80065b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f841 	bl	8006632 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2202      	movs	r2, #2
 80065b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3304      	adds	r3, #4
 80065c0:	4619      	mov	r1, r3
 80065c2:	4610      	mov	r0, r2
 80065c4:	f000 fd02 	bl	8006fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3708      	adds	r7, #8
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006632:	b480      	push	{r7}
 8006634:	b083      	sub	sp, #12
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800663a:	bf00      	nop
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
	...

08006648 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d109      	bne.n	800666c <HAL_TIM_PWM_Start+0x24>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800665e:	b2db      	uxtb	r3, r3
 8006660:	2b01      	cmp	r3, #1
 8006662:	bf14      	ite	ne
 8006664:	2301      	movne	r3, #1
 8006666:	2300      	moveq	r3, #0
 8006668:	b2db      	uxtb	r3, r3
 800666a:	e03c      	b.n	80066e6 <HAL_TIM_PWM_Start+0x9e>
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	2b04      	cmp	r3, #4
 8006670:	d109      	bne.n	8006686 <HAL_TIM_PWM_Start+0x3e>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b01      	cmp	r3, #1
 800667c:	bf14      	ite	ne
 800667e:	2301      	movne	r3, #1
 8006680:	2300      	moveq	r3, #0
 8006682:	b2db      	uxtb	r3, r3
 8006684:	e02f      	b.n	80066e6 <HAL_TIM_PWM_Start+0x9e>
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	2b08      	cmp	r3, #8
 800668a:	d109      	bne.n	80066a0 <HAL_TIM_PWM_Start+0x58>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b01      	cmp	r3, #1
 8006696:	bf14      	ite	ne
 8006698:	2301      	movne	r3, #1
 800669a:	2300      	moveq	r3, #0
 800669c:	b2db      	uxtb	r3, r3
 800669e:	e022      	b.n	80066e6 <HAL_TIM_PWM_Start+0x9e>
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	2b0c      	cmp	r3, #12
 80066a4:	d109      	bne.n	80066ba <HAL_TIM_PWM_Start+0x72>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	bf14      	ite	ne
 80066b2:	2301      	movne	r3, #1
 80066b4:	2300      	moveq	r3, #0
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	e015      	b.n	80066e6 <HAL_TIM_PWM_Start+0x9e>
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	2b10      	cmp	r3, #16
 80066be:	d109      	bne.n	80066d4 <HAL_TIM_PWM_Start+0x8c>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	bf14      	ite	ne
 80066cc:	2301      	movne	r3, #1
 80066ce:	2300      	moveq	r3, #0
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	e008      	b.n	80066e6 <HAL_TIM_PWM_Start+0x9e>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	2b01      	cmp	r3, #1
 80066de:	bf14      	ite	ne
 80066e0:	2301      	movne	r3, #1
 80066e2:	2300      	moveq	r3, #0
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d001      	beq.n	80066ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e09c      	b.n	8006828 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d104      	bne.n	80066fe <HAL_TIM_PWM_Start+0xb6>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2202      	movs	r2, #2
 80066f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066fc:	e023      	b.n	8006746 <HAL_TIM_PWM_Start+0xfe>
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b04      	cmp	r3, #4
 8006702:	d104      	bne.n	800670e <HAL_TIM_PWM_Start+0xc6>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2202      	movs	r2, #2
 8006708:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800670c:	e01b      	b.n	8006746 <HAL_TIM_PWM_Start+0xfe>
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	2b08      	cmp	r3, #8
 8006712:	d104      	bne.n	800671e <HAL_TIM_PWM_Start+0xd6>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2202      	movs	r2, #2
 8006718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800671c:	e013      	b.n	8006746 <HAL_TIM_PWM_Start+0xfe>
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b0c      	cmp	r3, #12
 8006722:	d104      	bne.n	800672e <HAL_TIM_PWM_Start+0xe6>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2202      	movs	r2, #2
 8006728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800672c:	e00b      	b.n	8006746 <HAL_TIM_PWM_Start+0xfe>
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b10      	cmp	r3, #16
 8006732:	d104      	bne.n	800673e <HAL_TIM_PWM_Start+0xf6>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2202      	movs	r2, #2
 8006738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800673c:	e003      	b.n	8006746 <HAL_TIM_PWM_Start+0xfe>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2202      	movs	r2, #2
 8006742:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2201      	movs	r2, #1
 800674c:	6839      	ldr	r1, [r7, #0]
 800674e:	4618      	mov	r0, r3
 8006750:	f001 f846 	bl	80077e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a35      	ldr	r2, [pc, #212]	; (8006830 <HAL_TIM_PWM_Start+0x1e8>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d013      	beq.n	8006786 <HAL_TIM_PWM_Start+0x13e>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a34      	ldr	r2, [pc, #208]	; (8006834 <HAL_TIM_PWM_Start+0x1ec>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d00e      	beq.n	8006786 <HAL_TIM_PWM_Start+0x13e>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a32      	ldr	r2, [pc, #200]	; (8006838 <HAL_TIM_PWM_Start+0x1f0>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d009      	beq.n	8006786 <HAL_TIM_PWM_Start+0x13e>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a31      	ldr	r2, [pc, #196]	; (800683c <HAL_TIM_PWM_Start+0x1f4>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d004      	beq.n	8006786 <HAL_TIM_PWM_Start+0x13e>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a2f      	ldr	r2, [pc, #188]	; (8006840 <HAL_TIM_PWM_Start+0x1f8>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d101      	bne.n	800678a <HAL_TIM_PWM_Start+0x142>
 8006786:	2301      	movs	r3, #1
 8006788:	e000      	b.n	800678c <HAL_TIM_PWM_Start+0x144>
 800678a:	2300      	movs	r3, #0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d007      	beq.n	80067a0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800679e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a22      	ldr	r2, [pc, #136]	; (8006830 <HAL_TIM_PWM_Start+0x1e8>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d01d      	beq.n	80067e6 <HAL_TIM_PWM_Start+0x19e>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067b2:	d018      	beq.n	80067e6 <HAL_TIM_PWM_Start+0x19e>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a22      	ldr	r2, [pc, #136]	; (8006844 <HAL_TIM_PWM_Start+0x1fc>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d013      	beq.n	80067e6 <HAL_TIM_PWM_Start+0x19e>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a21      	ldr	r2, [pc, #132]	; (8006848 <HAL_TIM_PWM_Start+0x200>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d00e      	beq.n	80067e6 <HAL_TIM_PWM_Start+0x19e>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a1f      	ldr	r2, [pc, #124]	; (800684c <HAL_TIM_PWM_Start+0x204>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d009      	beq.n	80067e6 <HAL_TIM_PWM_Start+0x19e>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a17      	ldr	r2, [pc, #92]	; (8006834 <HAL_TIM_PWM_Start+0x1ec>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d004      	beq.n	80067e6 <HAL_TIM_PWM_Start+0x19e>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a15      	ldr	r2, [pc, #84]	; (8006838 <HAL_TIM_PWM_Start+0x1f0>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d115      	bne.n	8006812 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	689a      	ldr	r2, [r3, #8]
 80067ec:	4b18      	ldr	r3, [pc, #96]	; (8006850 <HAL_TIM_PWM_Start+0x208>)
 80067ee:	4013      	ands	r3, r2
 80067f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2b06      	cmp	r3, #6
 80067f6:	d015      	beq.n	8006824 <HAL_TIM_PWM_Start+0x1dc>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067fe:	d011      	beq.n	8006824 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f042 0201 	orr.w	r2, r2, #1
 800680e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006810:	e008      	b.n	8006824 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f042 0201 	orr.w	r2, r2, #1
 8006820:	601a      	str	r2, [r3, #0]
 8006822:	e000      	b.n	8006826 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006824:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	40012c00 	.word	0x40012c00
 8006834:	40013400 	.word	0x40013400
 8006838:	40014000 	.word	0x40014000
 800683c:	40014400 	.word	0x40014400
 8006840:	40014800 	.word	0x40014800
 8006844:	40000400 	.word	0x40000400
 8006848:	40000800 	.word	0x40000800
 800684c:	40000c00 	.word	0x40000c00
 8006850:	00010007 	.word	0x00010007

08006854 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2200      	movs	r2, #0
 8006864:	6839      	ldr	r1, [r7, #0]
 8006866:	4618      	mov	r0, r3
 8006868:	f000 ffba 	bl	80077e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a3e      	ldr	r2, [pc, #248]	; (800696c <HAL_TIM_PWM_Stop+0x118>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d013      	beq.n	800689e <HAL_TIM_PWM_Stop+0x4a>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a3d      	ldr	r2, [pc, #244]	; (8006970 <HAL_TIM_PWM_Stop+0x11c>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d00e      	beq.n	800689e <HAL_TIM_PWM_Stop+0x4a>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a3b      	ldr	r2, [pc, #236]	; (8006974 <HAL_TIM_PWM_Stop+0x120>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d009      	beq.n	800689e <HAL_TIM_PWM_Stop+0x4a>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a3a      	ldr	r2, [pc, #232]	; (8006978 <HAL_TIM_PWM_Stop+0x124>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d004      	beq.n	800689e <HAL_TIM_PWM_Stop+0x4a>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a38      	ldr	r2, [pc, #224]	; (800697c <HAL_TIM_PWM_Stop+0x128>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d101      	bne.n	80068a2 <HAL_TIM_PWM_Stop+0x4e>
 800689e:	2301      	movs	r3, #1
 80068a0:	e000      	b.n	80068a4 <HAL_TIM_PWM_Stop+0x50>
 80068a2:	2300      	movs	r3, #0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d017      	beq.n	80068d8 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6a1a      	ldr	r2, [r3, #32]
 80068ae:	f241 1311 	movw	r3, #4369	; 0x1111
 80068b2:	4013      	ands	r3, r2
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10f      	bne.n	80068d8 <HAL_TIM_PWM_Stop+0x84>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6a1a      	ldr	r2, [r3, #32]
 80068be:	f240 4344 	movw	r3, #1092	; 0x444
 80068c2:	4013      	ands	r3, r2
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d107      	bne.n	80068d8 <HAL_TIM_PWM_Stop+0x84>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80068d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	6a1a      	ldr	r2, [r3, #32]
 80068de:	f241 1311 	movw	r3, #4369	; 0x1111
 80068e2:	4013      	ands	r3, r2
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10f      	bne.n	8006908 <HAL_TIM_PWM_Stop+0xb4>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	6a1a      	ldr	r2, [r3, #32]
 80068ee:	f240 4344 	movw	r3, #1092	; 0x444
 80068f2:	4013      	ands	r3, r2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d107      	bne.n	8006908 <HAL_TIM_PWM_Stop+0xb4>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f022 0201 	bic.w	r2, r2, #1
 8006906:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d104      	bne.n	8006918 <HAL_TIM_PWM_Stop+0xc4>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006916:	e023      	b.n	8006960 <HAL_TIM_PWM_Stop+0x10c>
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	2b04      	cmp	r3, #4
 800691c:	d104      	bne.n	8006928 <HAL_TIM_PWM_Stop+0xd4>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006926:	e01b      	b.n	8006960 <HAL_TIM_PWM_Stop+0x10c>
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	2b08      	cmp	r3, #8
 800692c:	d104      	bne.n	8006938 <HAL_TIM_PWM_Stop+0xe4>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006936:	e013      	b.n	8006960 <HAL_TIM_PWM_Stop+0x10c>
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	2b0c      	cmp	r3, #12
 800693c:	d104      	bne.n	8006948 <HAL_TIM_PWM_Stop+0xf4>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006946:	e00b      	b.n	8006960 <HAL_TIM_PWM_Stop+0x10c>
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	2b10      	cmp	r3, #16
 800694c:	d104      	bne.n	8006958 <HAL_TIM_PWM_Stop+0x104>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006956:	e003      	b.n	8006960 <HAL_TIM_PWM_Stop+0x10c>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	40012c00 	.word	0x40012c00
 8006970:	40013400 	.word	0x40013400
 8006974:	40014000 	.word	0x40014000
 8006978:	40014400 	.word	0x40014400
 800697c:	40014800 	.word	0x40014800

08006980 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	2b02      	cmp	r3, #2
 8006994:	d122      	bne.n	80069dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	f003 0302 	and.w	r3, r3, #2
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d11b      	bne.n	80069dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f06f 0202 	mvn.w	r2, #2
 80069ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2201      	movs	r2, #1
 80069b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	699b      	ldr	r3, [r3, #24]
 80069ba:	f003 0303 	and.w	r3, r3, #3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d003      	beq.n	80069ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fae3 	bl	8006f8e <HAL_TIM_IC_CaptureCallback>
 80069c8:	e005      	b.n	80069d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 fad5 	bl	8006f7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 fae6 	bl	8006fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	f003 0304 	and.w	r3, r3, #4
 80069e6:	2b04      	cmp	r3, #4
 80069e8:	d122      	bne.n	8006a30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	f003 0304 	and.w	r3, r3, #4
 80069f4:	2b04      	cmp	r3, #4
 80069f6:	d11b      	bne.n	8006a30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f06f 0204 	mvn.w	r2, #4
 8006a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2202      	movs	r2, #2
 8006a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d003      	beq.n	8006a1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fab9 	bl	8006f8e <HAL_TIM_IC_CaptureCallback>
 8006a1c:	e005      	b.n	8006a2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 faab 	bl	8006f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fabc 	bl	8006fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	f003 0308 	and.w	r3, r3, #8
 8006a3a:	2b08      	cmp	r3, #8
 8006a3c:	d122      	bne.n	8006a84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	f003 0308 	and.w	r3, r3, #8
 8006a48:	2b08      	cmp	r3, #8
 8006a4a:	d11b      	bne.n	8006a84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f06f 0208 	mvn.w	r2, #8
 8006a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2204      	movs	r2, #4
 8006a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	69db      	ldr	r3, [r3, #28]
 8006a62:	f003 0303 	and.w	r3, r3, #3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d003      	beq.n	8006a72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 fa8f 	bl	8006f8e <HAL_TIM_IC_CaptureCallback>
 8006a70:	e005      	b.n	8006a7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 fa81 	bl	8006f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 fa92 	bl	8006fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	f003 0310 	and.w	r3, r3, #16
 8006a8e:	2b10      	cmp	r3, #16
 8006a90:	d122      	bne.n	8006ad8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	f003 0310 	and.w	r3, r3, #16
 8006a9c:	2b10      	cmp	r3, #16
 8006a9e:	d11b      	bne.n	8006ad8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f06f 0210 	mvn.w	r2, #16
 8006aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2208      	movs	r2, #8
 8006aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	69db      	ldr	r3, [r3, #28]
 8006ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d003      	beq.n	8006ac6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fa65 	bl	8006f8e <HAL_TIM_IC_CaptureCallback>
 8006ac4:	e005      	b.n	8006ad2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fa57 	bl	8006f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fa68 	bl	8006fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	f003 0301 	and.w	r3, r3, #1
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d10e      	bne.n	8006b04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d107      	bne.n	8006b04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f06f 0201 	mvn.w	r2, #1
 8006afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f7fb fcfc 	bl	80024fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b0e:	2b80      	cmp	r3, #128	; 0x80
 8006b10:	d10e      	bne.n	8006b30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b1c:	2b80      	cmp	r3, #128	; 0x80
 8006b1e:	d107      	bne.n	8006b30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 ff10 	bl	8007950 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b3e:	d10e      	bne.n	8006b5e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b4a:	2b80      	cmp	r3, #128	; 0x80
 8006b4c:	d107      	bne.n	8006b5e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 ff03 	bl	8007964 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b68:	2b40      	cmp	r3, #64	; 0x40
 8006b6a:	d10e      	bne.n	8006b8a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b76:	2b40      	cmp	r3, #64	; 0x40
 8006b78:	d107      	bne.n	8006b8a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fa16 	bl	8006fb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	f003 0320 	and.w	r3, r3, #32
 8006b94:	2b20      	cmp	r3, #32
 8006b96:	d10e      	bne.n	8006bb6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	f003 0320 	and.w	r3, r3, #32
 8006ba2:	2b20      	cmp	r3, #32
 8006ba4:	d107      	bne.n	8006bb6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f06f 0220 	mvn.w	r2, #32
 8006bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 fec3 	bl	800793c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bb6:	bf00      	nop
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
	...

08006bc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b086      	sub	sp, #24
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d101      	bne.n	8006bde <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006bda:	2302      	movs	r3, #2
 8006bdc:	e0ff      	b.n	8006dde <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2b14      	cmp	r3, #20
 8006bea:	f200 80f0 	bhi.w	8006dce <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006bee:	a201      	add	r2, pc, #4	; (adr r2, 8006bf4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf4:	08006c49 	.word	0x08006c49
 8006bf8:	08006dcf 	.word	0x08006dcf
 8006bfc:	08006dcf 	.word	0x08006dcf
 8006c00:	08006dcf 	.word	0x08006dcf
 8006c04:	08006c89 	.word	0x08006c89
 8006c08:	08006dcf 	.word	0x08006dcf
 8006c0c:	08006dcf 	.word	0x08006dcf
 8006c10:	08006dcf 	.word	0x08006dcf
 8006c14:	08006ccb 	.word	0x08006ccb
 8006c18:	08006dcf 	.word	0x08006dcf
 8006c1c:	08006dcf 	.word	0x08006dcf
 8006c20:	08006dcf 	.word	0x08006dcf
 8006c24:	08006d0b 	.word	0x08006d0b
 8006c28:	08006dcf 	.word	0x08006dcf
 8006c2c:	08006dcf 	.word	0x08006dcf
 8006c30:	08006dcf 	.word	0x08006dcf
 8006c34:	08006d4d 	.word	0x08006d4d
 8006c38:	08006dcf 	.word	0x08006dcf
 8006c3c:	08006dcf 	.word	0x08006dcf
 8006c40:	08006dcf 	.word	0x08006dcf
 8006c44:	08006d8d 	.word	0x08006d8d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68b9      	ldr	r1, [r7, #8]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f000 fa56 	bl	8007100 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	699a      	ldr	r2, [r3, #24]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f042 0208 	orr.w	r2, r2, #8
 8006c62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	699a      	ldr	r2, [r3, #24]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f022 0204 	bic.w	r2, r2, #4
 8006c72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6999      	ldr	r1, [r3, #24]
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	691a      	ldr	r2, [r3, #16]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	430a      	orrs	r2, r1
 8006c84:	619a      	str	r2, [r3, #24]
      break;
 8006c86:	e0a5      	b.n	8006dd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68b9      	ldr	r1, [r7, #8]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f000 fac6 	bl	8007220 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	699a      	ldr	r2, [r3, #24]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ca2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	699a      	ldr	r2, [r3, #24]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6999      	ldr	r1, [r3, #24]
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	021a      	lsls	r2, r3, #8
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	619a      	str	r2, [r3, #24]
      break;
 8006cc8:	e084      	b.n	8006dd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68b9      	ldr	r1, [r7, #8]
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f000 fb2f 	bl	8007334 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	69da      	ldr	r2, [r3, #28]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f042 0208 	orr.w	r2, r2, #8
 8006ce4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	69da      	ldr	r2, [r3, #28]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f022 0204 	bic.w	r2, r2, #4
 8006cf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	69d9      	ldr	r1, [r3, #28]
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	691a      	ldr	r2, [r3, #16]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	430a      	orrs	r2, r1
 8006d06:	61da      	str	r2, [r3, #28]
      break;
 8006d08:	e064      	b.n	8006dd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68b9      	ldr	r1, [r7, #8]
 8006d10:	4618      	mov	r0, r3
 8006d12:	f000 fb97 	bl	8007444 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	69da      	ldr	r2, [r3, #28]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	69da      	ldr	r2, [r3, #28]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	69d9      	ldr	r1, [r3, #28]
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	021a      	lsls	r2, r3, #8
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	430a      	orrs	r2, r1
 8006d48:	61da      	str	r2, [r3, #28]
      break;
 8006d4a:	e043      	b.n	8006dd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68b9      	ldr	r1, [r7, #8]
 8006d52:	4618      	mov	r0, r3
 8006d54:	f000 fbe0 	bl	8007518 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f042 0208 	orr.w	r2, r2, #8
 8006d66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f022 0204 	bic.w	r2, r2, #4
 8006d76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	691a      	ldr	r2, [r3, #16]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	430a      	orrs	r2, r1
 8006d88:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006d8a:	e023      	b.n	8006dd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68b9      	ldr	r1, [r7, #8]
 8006d92:	4618      	mov	r0, r3
 8006d94:	f000 fc24 	bl	80075e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006da6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006db6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	021a      	lsls	r2, r3, #8
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006dcc:	e002      	b.n	8006dd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	75fb      	strb	r3, [r7, #23]
      break;
 8006dd2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3718      	adds	r7, #24
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop

08006de8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006df2:	2300      	movs	r3, #0
 8006df4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d101      	bne.n	8006e04 <HAL_TIM_ConfigClockSource+0x1c>
 8006e00:	2302      	movs	r3, #2
 8006e02:	e0b6      	b.n	8006f72 <HAL_TIM_ConfigClockSource+0x18a>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2202      	movs	r2, #2
 8006e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68ba      	ldr	r2, [r7, #8]
 8006e36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e40:	d03e      	beq.n	8006ec0 <HAL_TIM_ConfigClockSource+0xd8>
 8006e42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e46:	f200 8087 	bhi.w	8006f58 <HAL_TIM_ConfigClockSource+0x170>
 8006e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e4e:	f000 8086 	beq.w	8006f5e <HAL_TIM_ConfigClockSource+0x176>
 8006e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e56:	d87f      	bhi.n	8006f58 <HAL_TIM_ConfigClockSource+0x170>
 8006e58:	2b70      	cmp	r3, #112	; 0x70
 8006e5a:	d01a      	beq.n	8006e92 <HAL_TIM_ConfigClockSource+0xaa>
 8006e5c:	2b70      	cmp	r3, #112	; 0x70
 8006e5e:	d87b      	bhi.n	8006f58 <HAL_TIM_ConfigClockSource+0x170>
 8006e60:	2b60      	cmp	r3, #96	; 0x60
 8006e62:	d050      	beq.n	8006f06 <HAL_TIM_ConfigClockSource+0x11e>
 8006e64:	2b60      	cmp	r3, #96	; 0x60
 8006e66:	d877      	bhi.n	8006f58 <HAL_TIM_ConfigClockSource+0x170>
 8006e68:	2b50      	cmp	r3, #80	; 0x50
 8006e6a:	d03c      	beq.n	8006ee6 <HAL_TIM_ConfigClockSource+0xfe>
 8006e6c:	2b50      	cmp	r3, #80	; 0x50
 8006e6e:	d873      	bhi.n	8006f58 <HAL_TIM_ConfigClockSource+0x170>
 8006e70:	2b40      	cmp	r3, #64	; 0x40
 8006e72:	d058      	beq.n	8006f26 <HAL_TIM_ConfigClockSource+0x13e>
 8006e74:	2b40      	cmp	r3, #64	; 0x40
 8006e76:	d86f      	bhi.n	8006f58 <HAL_TIM_ConfigClockSource+0x170>
 8006e78:	2b30      	cmp	r3, #48	; 0x30
 8006e7a:	d064      	beq.n	8006f46 <HAL_TIM_ConfigClockSource+0x15e>
 8006e7c:	2b30      	cmp	r3, #48	; 0x30
 8006e7e:	d86b      	bhi.n	8006f58 <HAL_TIM_ConfigClockSource+0x170>
 8006e80:	2b20      	cmp	r3, #32
 8006e82:	d060      	beq.n	8006f46 <HAL_TIM_ConfigClockSource+0x15e>
 8006e84:	2b20      	cmp	r3, #32
 8006e86:	d867      	bhi.n	8006f58 <HAL_TIM_ConfigClockSource+0x170>
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d05c      	beq.n	8006f46 <HAL_TIM_ConfigClockSource+0x15e>
 8006e8c:	2b10      	cmp	r3, #16
 8006e8e:	d05a      	beq.n	8006f46 <HAL_TIM_ConfigClockSource+0x15e>
 8006e90:	e062      	b.n	8006f58 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6818      	ldr	r0, [r3, #0]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	6899      	ldr	r1, [r3, #8]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	685a      	ldr	r2, [r3, #4]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	f000 fc7d 	bl	80077a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006eb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	609a      	str	r2, [r3, #8]
      break;
 8006ebe:	e04f      	b.n	8006f60 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6818      	ldr	r0, [r3, #0]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	6899      	ldr	r1, [r3, #8]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	f000 fc66 	bl	80077a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	689a      	ldr	r2, [r3, #8]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ee2:	609a      	str	r2, [r3, #8]
      break;
 8006ee4:	e03c      	b.n	8006f60 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6818      	ldr	r0, [r3, #0]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	6859      	ldr	r1, [r3, #4]
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	f000 fbda 	bl	80076ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2150      	movs	r1, #80	; 0x50
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 fc33 	bl	800776a <TIM_ITRx_SetConfig>
      break;
 8006f04:	e02c      	b.n	8006f60 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6818      	ldr	r0, [r3, #0]
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	6859      	ldr	r1, [r3, #4]
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	461a      	mov	r2, r3
 8006f14:	f000 fbf9 	bl	800770a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2160      	movs	r1, #96	; 0x60
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f000 fc23 	bl	800776a <TIM_ITRx_SetConfig>
      break;
 8006f24:	e01c      	b.n	8006f60 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6818      	ldr	r0, [r3, #0]
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	6859      	ldr	r1, [r3, #4]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	461a      	mov	r2, r3
 8006f34:	f000 fbba 	bl	80076ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2140      	movs	r1, #64	; 0x40
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f000 fc13 	bl	800776a <TIM_ITRx_SetConfig>
      break;
 8006f44:	e00c      	b.n	8006f60 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4619      	mov	r1, r3
 8006f50:	4610      	mov	r0, r2
 8006f52:	f000 fc0a 	bl	800776a <TIM_ITRx_SetConfig>
      break;
 8006f56:	e003      	b.n	8006f60 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f5c:	e000      	b.n	8006f60 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006f5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b083      	sub	sp, #12
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f82:	bf00      	nop
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr

08006f8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f8e:	b480      	push	{r7}
 8006f90:	b083      	sub	sp, #12
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f96:	bf00      	nop
 8006f98:	370c      	adds	r7, #12
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b083      	sub	sp, #12
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006faa:	bf00      	nop
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr

08006fb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006fb6:	b480      	push	{r7}
 8006fb8:	b083      	sub	sp, #12
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fbe:	bf00      	nop
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
	...

08006fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a40      	ldr	r2, [pc, #256]	; (80070e0 <TIM_Base_SetConfig+0x114>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d013      	beq.n	800700c <TIM_Base_SetConfig+0x40>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fea:	d00f      	beq.n	800700c <TIM_Base_SetConfig+0x40>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4a3d      	ldr	r2, [pc, #244]	; (80070e4 <TIM_Base_SetConfig+0x118>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d00b      	beq.n	800700c <TIM_Base_SetConfig+0x40>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4a3c      	ldr	r2, [pc, #240]	; (80070e8 <TIM_Base_SetConfig+0x11c>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d007      	beq.n	800700c <TIM_Base_SetConfig+0x40>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a3b      	ldr	r2, [pc, #236]	; (80070ec <TIM_Base_SetConfig+0x120>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d003      	beq.n	800700c <TIM_Base_SetConfig+0x40>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a3a      	ldr	r2, [pc, #232]	; (80070f0 <TIM_Base_SetConfig+0x124>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d108      	bne.n	800701e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007012:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	4313      	orrs	r3, r2
 800701c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a2f      	ldr	r2, [pc, #188]	; (80070e0 <TIM_Base_SetConfig+0x114>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d01f      	beq.n	8007066 <TIM_Base_SetConfig+0x9a>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800702c:	d01b      	beq.n	8007066 <TIM_Base_SetConfig+0x9a>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a2c      	ldr	r2, [pc, #176]	; (80070e4 <TIM_Base_SetConfig+0x118>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d017      	beq.n	8007066 <TIM_Base_SetConfig+0x9a>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a2b      	ldr	r2, [pc, #172]	; (80070e8 <TIM_Base_SetConfig+0x11c>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d013      	beq.n	8007066 <TIM_Base_SetConfig+0x9a>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a2a      	ldr	r2, [pc, #168]	; (80070ec <TIM_Base_SetConfig+0x120>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d00f      	beq.n	8007066 <TIM_Base_SetConfig+0x9a>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a29      	ldr	r2, [pc, #164]	; (80070f0 <TIM_Base_SetConfig+0x124>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d00b      	beq.n	8007066 <TIM_Base_SetConfig+0x9a>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a28      	ldr	r2, [pc, #160]	; (80070f4 <TIM_Base_SetConfig+0x128>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d007      	beq.n	8007066 <TIM_Base_SetConfig+0x9a>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a27      	ldr	r2, [pc, #156]	; (80070f8 <TIM_Base_SetConfig+0x12c>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d003      	beq.n	8007066 <TIM_Base_SetConfig+0x9a>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a26      	ldr	r2, [pc, #152]	; (80070fc <TIM_Base_SetConfig+0x130>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d108      	bne.n	8007078 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800706c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	4313      	orrs	r3, r2
 8007076:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	4313      	orrs	r3, r2
 8007084:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	689a      	ldr	r2, [r3, #8]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a10      	ldr	r2, [pc, #64]	; (80070e0 <TIM_Base_SetConfig+0x114>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d00f      	beq.n	80070c4 <TIM_Base_SetConfig+0xf8>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a12      	ldr	r2, [pc, #72]	; (80070f0 <TIM_Base_SetConfig+0x124>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d00b      	beq.n	80070c4 <TIM_Base_SetConfig+0xf8>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a11      	ldr	r2, [pc, #68]	; (80070f4 <TIM_Base_SetConfig+0x128>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d007      	beq.n	80070c4 <TIM_Base_SetConfig+0xf8>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a10      	ldr	r2, [pc, #64]	; (80070f8 <TIM_Base_SetConfig+0x12c>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d003      	beq.n	80070c4 <TIM_Base_SetConfig+0xf8>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a0f      	ldr	r2, [pc, #60]	; (80070fc <TIM_Base_SetConfig+0x130>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d103      	bne.n	80070cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	691a      	ldr	r2, [r3, #16]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	615a      	str	r2, [r3, #20]
}
 80070d2:	bf00      	nop
 80070d4:	3714      	adds	r7, #20
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	40012c00 	.word	0x40012c00
 80070e4:	40000400 	.word	0x40000400
 80070e8:	40000800 	.word	0x40000800
 80070ec:	40000c00 	.word	0x40000c00
 80070f0:	40013400 	.word	0x40013400
 80070f4:	40014000 	.word	0x40014000
 80070f8:	40014400 	.word	0x40014400
 80070fc:	40014800 	.word	0x40014800

08007100 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007100:	b480      	push	{r7}
 8007102:	b087      	sub	sp, #28
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	f023 0201 	bic.w	r2, r3, #1
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a1b      	ldr	r3, [r3, #32]
 800711a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800712e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f023 0303 	bic.w	r3, r3, #3
 800713a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	4313      	orrs	r3, r2
 8007144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f023 0302 	bic.w	r3, r3, #2
 800714c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	697a      	ldr	r2, [r7, #20]
 8007154:	4313      	orrs	r3, r2
 8007156:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a2c      	ldr	r2, [pc, #176]	; (800720c <TIM_OC1_SetConfig+0x10c>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d00f      	beq.n	8007180 <TIM_OC1_SetConfig+0x80>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a2b      	ldr	r2, [pc, #172]	; (8007210 <TIM_OC1_SetConfig+0x110>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d00b      	beq.n	8007180 <TIM_OC1_SetConfig+0x80>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a2a      	ldr	r2, [pc, #168]	; (8007214 <TIM_OC1_SetConfig+0x114>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d007      	beq.n	8007180 <TIM_OC1_SetConfig+0x80>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a29      	ldr	r2, [pc, #164]	; (8007218 <TIM_OC1_SetConfig+0x118>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d003      	beq.n	8007180 <TIM_OC1_SetConfig+0x80>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a28      	ldr	r2, [pc, #160]	; (800721c <TIM_OC1_SetConfig+0x11c>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d10c      	bne.n	800719a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f023 0308 	bic.w	r3, r3, #8
 8007186:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	697a      	ldr	r2, [r7, #20]
 800718e:	4313      	orrs	r3, r2
 8007190:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	f023 0304 	bic.w	r3, r3, #4
 8007198:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a1b      	ldr	r2, [pc, #108]	; (800720c <TIM_OC1_SetConfig+0x10c>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d00f      	beq.n	80071c2 <TIM_OC1_SetConfig+0xc2>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a1a      	ldr	r2, [pc, #104]	; (8007210 <TIM_OC1_SetConfig+0x110>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d00b      	beq.n	80071c2 <TIM_OC1_SetConfig+0xc2>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a19      	ldr	r2, [pc, #100]	; (8007214 <TIM_OC1_SetConfig+0x114>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d007      	beq.n	80071c2 <TIM_OC1_SetConfig+0xc2>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a18      	ldr	r2, [pc, #96]	; (8007218 <TIM_OC1_SetConfig+0x118>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d003      	beq.n	80071c2 <TIM_OC1_SetConfig+0xc2>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a17      	ldr	r2, [pc, #92]	; (800721c <TIM_OC1_SetConfig+0x11c>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d111      	bne.n	80071e6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	693a      	ldr	r2, [r7, #16]
 80071d8:	4313      	orrs	r3, r2
 80071da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	685a      	ldr	r2, [r3, #4]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	621a      	str	r2, [r3, #32]
}
 8007200:	bf00      	nop
 8007202:	371c      	adds	r7, #28
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr
 800720c:	40012c00 	.word	0x40012c00
 8007210:	40013400 	.word	0x40013400
 8007214:	40014000 	.word	0x40014000
 8007218:	40014400 	.word	0x40014400
 800721c:	40014800 	.word	0x40014800

08007220 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007220:	b480      	push	{r7}
 8007222:	b087      	sub	sp, #28
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	f023 0210 	bic.w	r2, r3, #16
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a1b      	ldr	r3, [r3, #32]
 800723a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800724e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800725a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	021b      	lsls	r3, r3, #8
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	4313      	orrs	r3, r2
 8007266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	f023 0320 	bic.w	r3, r3, #32
 800726e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	011b      	lsls	r3, r3, #4
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	4313      	orrs	r3, r2
 800727a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a28      	ldr	r2, [pc, #160]	; (8007320 <TIM_OC2_SetConfig+0x100>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d003      	beq.n	800728c <TIM_OC2_SetConfig+0x6c>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a27      	ldr	r2, [pc, #156]	; (8007324 <TIM_OC2_SetConfig+0x104>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d10d      	bne.n	80072a8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	011b      	lsls	r3, r3, #4
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	4313      	orrs	r3, r2
 800729e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a1d      	ldr	r2, [pc, #116]	; (8007320 <TIM_OC2_SetConfig+0x100>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d00f      	beq.n	80072d0 <TIM_OC2_SetConfig+0xb0>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a1c      	ldr	r2, [pc, #112]	; (8007324 <TIM_OC2_SetConfig+0x104>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d00b      	beq.n	80072d0 <TIM_OC2_SetConfig+0xb0>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a1b      	ldr	r2, [pc, #108]	; (8007328 <TIM_OC2_SetConfig+0x108>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d007      	beq.n	80072d0 <TIM_OC2_SetConfig+0xb0>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a1a      	ldr	r2, [pc, #104]	; (800732c <TIM_OC2_SetConfig+0x10c>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d003      	beq.n	80072d0 <TIM_OC2_SetConfig+0xb0>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a19      	ldr	r2, [pc, #100]	; (8007330 <TIM_OC2_SetConfig+0x110>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d113      	bne.n	80072f8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	695b      	ldr	r3, [r3, #20]
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	693a      	ldr	r2, [r7, #16]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	693a      	ldr	r2, [r7, #16]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	693a      	ldr	r2, [r7, #16]
 80072fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	685a      	ldr	r2, [r3, #4]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	697a      	ldr	r2, [r7, #20]
 8007310:	621a      	str	r2, [r3, #32]
}
 8007312:	bf00      	nop
 8007314:	371c      	adds	r7, #28
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	40012c00 	.word	0x40012c00
 8007324:	40013400 	.word	0x40013400
 8007328:	40014000 	.word	0x40014000
 800732c:	40014400 	.word	0x40014400
 8007330:	40014800 	.word	0x40014800

08007334 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007334:	b480      	push	{r7}
 8007336:	b087      	sub	sp, #28
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a1b      	ldr	r3, [r3, #32]
 800734e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	69db      	ldr	r3, [r3, #28]
 800735a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f023 0303 	bic.w	r3, r3, #3
 800736e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	4313      	orrs	r3, r2
 8007378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	021b      	lsls	r3, r3, #8
 8007388:	697a      	ldr	r2, [r7, #20]
 800738a:	4313      	orrs	r3, r2
 800738c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a27      	ldr	r2, [pc, #156]	; (8007430 <TIM_OC3_SetConfig+0xfc>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d003      	beq.n	800739e <TIM_OC3_SetConfig+0x6a>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a26      	ldr	r2, [pc, #152]	; (8007434 <TIM_OC3_SetConfig+0x100>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d10d      	bne.n	80073ba <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	021b      	lsls	r3, r3, #8
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a1c      	ldr	r2, [pc, #112]	; (8007430 <TIM_OC3_SetConfig+0xfc>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d00f      	beq.n	80073e2 <TIM_OC3_SetConfig+0xae>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a1b      	ldr	r2, [pc, #108]	; (8007434 <TIM_OC3_SetConfig+0x100>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d00b      	beq.n	80073e2 <TIM_OC3_SetConfig+0xae>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a1a      	ldr	r2, [pc, #104]	; (8007438 <TIM_OC3_SetConfig+0x104>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d007      	beq.n	80073e2 <TIM_OC3_SetConfig+0xae>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a19      	ldr	r2, [pc, #100]	; (800743c <TIM_OC3_SetConfig+0x108>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d003      	beq.n	80073e2 <TIM_OC3_SetConfig+0xae>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a18      	ldr	r2, [pc, #96]	; (8007440 <TIM_OC3_SetConfig+0x10c>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d113      	bne.n	800740a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	695b      	ldr	r3, [r3, #20]
 80073f6:	011b      	lsls	r3, r3, #4
 80073f8:	693a      	ldr	r2, [r7, #16]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	011b      	lsls	r3, r3, #4
 8007404:	693a      	ldr	r2, [r7, #16]
 8007406:	4313      	orrs	r3, r2
 8007408:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	693a      	ldr	r2, [r7, #16]
 800740e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	685a      	ldr	r2, [r3, #4]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	697a      	ldr	r2, [r7, #20]
 8007422:	621a      	str	r2, [r3, #32]
}
 8007424:	bf00      	nop
 8007426:	371c      	adds	r7, #28
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr
 8007430:	40012c00 	.word	0x40012c00
 8007434:	40013400 	.word	0x40013400
 8007438:	40014000 	.word	0x40014000
 800743c:	40014400 	.word	0x40014400
 8007440:	40014800 	.word	0x40014800

08007444 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007444:	b480      	push	{r7}
 8007446:	b087      	sub	sp, #28
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	69db      	ldr	r3, [r3, #28]
 800746a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800747e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	021b      	lsls	r3, r3, #8
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	4313      	orrs	r3, r2
 800748a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007492:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	031b      	lsls	r3, r3, #12
 800749a:	693a      	ldr	r2, [r7, #16]
 800749c:	4313      	orrs	r3, r2
 800749e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a18      	ldr	r2, [pc, #96]	; (8007504 <TIM_OC4_SetConfig+0xc0>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d00f      	beq.n	80074c8 <TIM_OC4_SetConfig+0x84>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a17      	ldr	r2, [pc, #92]	; (8007508 <TIM_OC4_SetConfig+0xc4>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d00b      	beq.n	80074c8 <TIM_OC4_SetConfig+0x84>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a16      	ldr	r2, [pc, #88]	; (800750c <TIM_OC4_SetConfig+0xc8>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d007      	beq.n	80074c8 <TIM_OC4_SetConfig+0x84>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a15      	ldr	r2, [pc, #84]	; (8007510 <TIM_OC4_SetConfig+0xcc>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d003      	beq.n	80074c8 <TIM_OC4_SetConfig+0x84>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a14      	ldr	r2, [pc, #80]	; (8007514 <TIM_OC4_SetConfig+0xd0>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d109      	bne.n	80074dc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	695b      	ldr	r3, [r3, #20]
 80074d4:	019b      	lsls	r3, r3, #6
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	4313      	orrs	r3, r2
 80074da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	685a      	ldr	r2, [r3, #4]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	693a      	ldr	r2, [r7, #16]
 80074f4:	621a      	str	r2, [r3, #32]
}
 80074f6:	bf00      	nop
 80074f8:	371c      	adds	r7, #28
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	40012c00 	.word	0x40012c00
 8007508:	40013400 	.word	0x40013400
 800750c:	40014000 	.word	0x40014000
 8007510:	40014400 	.word	0x40014400
 8007514:	40014800 	.word	0x40014800

08007518 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007518:	b480      	push	{r7}
 800751a:	b087      	sub	sp, #28
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a1b      	ldr	r3, [r3, #32]
 8007526:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a1b      	ldr	r3, [r3, #32]
 8007532:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800753e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800754a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	4313      	orrs	r3, r2
 8007554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800755c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	041b      	lsls	r3, r3, #16
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	4313      	orrs	r3, r2
 8007568:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a17      	ldr	r2, [pc, #92]	; (80075cc <TIM_OC5_SetConfig+0xb4>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d00f      	beq.n	8007592 <TIM_OC5_SetConfig+0x7a>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a16      	ldr	r2, [pc, #88]	; (80075d0 <TIM_OC5_SetConfig+0xb8>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d00b      	beq.n	8007592 <TIM_OC5_SetConfig+0x7a>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a15      	ldr	r2, [pc, #84]	; (80075d4 <TIM_OC5_SetConfig+0xbc>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d007      	beq.n	8007592 <TIM_OC5_SetConfig+0x7a>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a14      	ldr	r2, [pc, #80]	; (80075d8 <TIM_OC5_SetConfig+0xc0>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d003      	beq.n	8007592 <TIM_OC5_SetConfig+0x7a>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a13      	ldr	r2, [pc, #76]	; (80075dc <TIM_OC5_SetConfig+0xc4>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d109      	bne.n	80075a6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007598:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	021b      	lsls	r3, r3, #8
 80075a0:	697a      	ldr	r2, [r7, #20]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	697a      	ldr	r2, [r7, #20]
 80075aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	685a      	ldr	r2, [r3, #4]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	693a      	ldr	r2, [r7, #16]
 80075be:	621a      	str	r2, [r3, #32]
}
 80075c0:	bf00      	nop
 80075c2:	371c      	adds	r7, #28
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr
 80075cc:	40012c00 	.word	0x40012c00
 80075d0:	40013400 	.word	0x40013400
 80075d4:	40014000 	.word	0x40014000
 80075d8:	40014400 	.word	0x40014400
 80075dc:	40014800 	.word	0x40014800

080075e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b087      	sub	sp, #28
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6a1b      	ldr	r3, [r3, #32]
 80075ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a1b      	ldr	r3, [r3, #32]
 80075fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800760e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	021b      	lsls	r3, r3, #8
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	4313      	orrs	r3, r2
 800761e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007626:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	051b      	lsls	r3, r3, #20
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	4313      	orrs	r3, r2
 8007632:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4a18      	ldr	r2, [pc, #96]	; (8007698 <TIM_OC6_SetConfig+0xb8>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d00f      	beq.n	800765c <TIM_OC6_SetConfig+0x7c>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4a17      	ldr	r2, [pc, #92]	; (800769c <TIM_OC6_SetConfig+0xbc>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d00b      	beq.n	800765c <TIM_OC6_SetConfig+0x7c>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a16      	ldr	r2, [pc, #88]	; (80076a0 <TIM_OC6_SetConfig+0xc0>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d007      	beq.n	800765c <TIM_OC6_SetConfig+0x7c>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4a15      	ldr	r2, [pc, #84]	; (80076a4 <TIM_OC6_SetConfig+0xc4>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d003      	beq.n	800765c <TIM_OC6_SetConfig+0x7c>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4a14      	ldr	r2, [pc, #80]	; (80076a8 <TIM_OC6_SetConfig+0xc8>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d109      	bne.n	8007670 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007662:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	695b      	ldr	r3, [r3, #20]
 8007668:	029b      	lsls	r3, r3, #10
 800766a:	697a      	ldr	r2, [r7, #20]
 800766c:	4313      	orrs	r3, r2
 800766e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	685a      	ldr	r2, [r3, #4]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	693a      	ldr	r2, [r7, #16]
 8007688:	621a      	str	r2, [r3, #32]
}
 800768a:	bf00      	nop
 800768c:	371c      	adds	r7, #28
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	40012c00 	.word	0x40012c00
 800769c:	40013400 	.word	0x40013400
 80076a0:	40014000 	.word	0x40014000
 80076a4:	40014400 	.word	0x40014400
 80076a8:	40014800 	.word	0x40014800

080076ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b087      	sub	sp, #28
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6a1b      	ldr	r3, [r3, #32]
 80076bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6a1b      	ldr	r3, [r3, #32]
 80076c2:	f023 0201 	bic.w	r2, r3, #1
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	011b      	lsls	r3, r3, #4
 80076dc:	693a      	ldr	r2, [r7, #16]
 80076de:	4313      	orrs	r3, r2
 80076e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	f023 030a 	bic.w	r3, r3, #10
 80076e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076ea:	697a      	ldr	r2, [r7, #20]
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	697a      	ldr	r2, [r7, #20]
 80076fc:	621a      	str	r2, [r3, #32]
}
 80076fe:	bf00      	nop
 8007700:	371c      	adds	r7, #28
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr

0800770a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800770a:	b480      	push	{r7}
 800770c:	b087      	sub	sp, #28
 800770e:	af00      	add	r7, sp, #0
 8007710:	60f8      	str	r0, [r7, #12]
 8007712:	60b9      	str	r1, [r7, #8]
 8007714:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6a1b      	ldr	r3, [r3, #32]
 800771a:	f023 0210 	bic.w	r2, r3, #16
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6a1b      	ldr	r3, [r3, #32]
 800772c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007734:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	031b      	lsls	r3, r3, #12
 800773a:	697a      	ldr	r2, [r7, #20]
 800773c:	4313      	orrs	r3, r2
 800773e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007746:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	011b      	lsls	r3, r3, #4
 800774c:	693a      	ldr	r2, [r7, #16]
 800774e:	4313      	orrs	r3, r2
 8007750:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	697a      	ldr	r2, [r7, #20]
 8007756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	693a      	ldr	r2, [r7, #16]
 800775c:	621a      	str	r2, [r3, #32]
}
 800775e:	bf00      	nop
 8007760:	371c      	adds	r7, #28
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr

0800776a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800776a:	b480      	push	{r7}
 800776c:	b085      	sub	sp, #20
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
 8007772:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007780:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007782:	683a      	ldr	r2, [r7, #0]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	4313      	orrs	r3, r2
 8007788:	f043 0307 	orr.w	r3, r3, #7
 800778c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	609a      	str	r2, [r3, #8]
}
 8007794:	bf00      	nop
 8007796:	3714      	adds	r7, #20
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b087      	sub	sp, #28
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	607a      	str	r2, [r7, #4]
 80077ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	021a      	lsls	r2, r3, #8
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	431a      	orrs	r2, r3
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	697a      	ldr	r2, [r7, #20]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	697a      	ldr	r2, [r7, #20]
 80077d2:	609a      	str	r2, [r3, #8]
}
 80077d4:	bf00      	nop
 80077d6:	371c      	adds	r7, #28
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b087      	sub	sp, #28
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	f003 031f 	and.w	r3, r3, #31
 80077f2:	2201      	movs	r2, #1
 80077f4:	fa02 f303 	lsl.w	r3, r2, r3
 80077f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6a1a      	ldr	r2, [r3, #32]
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	43db      	mvns	r3, r3
 8007802:	401a      	ands	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6a1a      	ldr	r2, [r3, #32]
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	f003 031f 	and.w	r3, r3, #31
 8007812:	6879      	ldr	r1, [r7, #4]
 8007814:	fa01 f303 	lsl.w	r3, r1, r3
 8007818:	431a      	orrs	r2, r3
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	621a      	str	r2, [r3, #32]
}
 800781e:	bf00      	nop
 8007820:	371c      	adds	r7, #28
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr
	...

0800782c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800783c:	2b01      	cmp	r3, #1
 800783e:	d101      	bne.n	8007844 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007840:	2302      	movs	r3, #2
 8007842:	e068      	b.n	8007916 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2202      	movs	r2, #2
 8007850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a2e      	ldr	r2, [pc, #184]	; (8007924 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d004      	beq.n	8007878 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a2d      	ldr	r2, [pc, #180]	; (8007928 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d108      	bne.n	800788a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800787e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	4313      	orrs	r3, r2
 8007888:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007890:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	4313      	orrs	r3, r2
 800789a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a1e      	ldr	r2, [pc, #120]	; (8007924 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d01d      	beq.n	80078ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078b6:	d018      	beq.n	80078ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a1b      	ldr	r2, [pc, #108]	; (800792c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d013      	beq.n	80078ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a1a      	ldr	r2, [pc, #104]	; (8007930 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d00e      	beq.n	80078ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a18      	ldr	r2, [pc, #96]	; (8007934 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d009      	beq.n	80078ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a13      	ldr	r2, [pc, #76]	; (8007928 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d004      	beq.n	80078ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a14      	ldr	r2, [pc, #80]	; (8007938 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d10c      	bne.n	8007904 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3714      	adds	r7, #20
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	40012c00 	.word	0x40012c00
 8007928:	40013400 	.word	0x40013400
 800792c:	40000400 	.word	0x40000400
 8007930:	40000800 	.word	0x40000800
 8007934:	40000c00 	.word	0x40000c00
 8007938:	40014000 	.word	0x40014000

0800793c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007944:	bf00      	nop
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800796c:	bf00      	nop
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d101      	bne.n	800798a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e040      	b.n	8007a0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800798e:	2b00      	cmp	r3, #0
 8007990:	d106      	bne.n	80079a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f7fb f96e 	bl	8002c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2224      	movs	r2, #36	; 0x24
 80079a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f022 0201 	bic.w	r2, r2, #1
 80079b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 fc94 	bl	80082e4 <UART_SetConfig>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d101      	bne.n	80079c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	e022      	b.n	8007a0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d002      	beq.n	80079d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 ff40 	bl	8008854 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	685a      	ldr	r2, [r3, #4]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80079e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	689a      	ldr	r2, [r3, #8]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f042 0201 	orr.w	r2, r2, #1
 8007a02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 ffc7 	bl	8008998 <UART_CheckIdleState>
 8007a0a:	4603      	mov	r3, r0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3708      	adds	r7, #8
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b08a      	sub	sp, #40	; 0x28
 8007a18:	af02      	add	r7, sp, #8
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	603b      	str	r3, [r7, #0]
 8007a20:	4613      	mov	r3, r2
 8007a22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a28:	2b20      	cmp	r3, #32
 8007a2a:	f040 8082 	bne.w	8007b32 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d002      	beq.n	8007a3a <HAL_UART_Transmit+0x26>
 8007a34:	88fb      	ldrh	r3, [r7, #6]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d101      	bne.n	8007a3e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e07a      	b.n	8007b34 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d101      	bne.n	8007a4c <HAL_UART_Transmit+0x38>
 8007a48:	2302      	movs	r3, #2
 8007a4a:	e073      	b.n	8007b34 <HAL_UART_Transmit+0x120>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2221      	movs	r2, #33	; 0x21
 8007a60:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a62:	f7fb fb31 	bl	80030c8 <HAL_GetTick>
 8007a66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	88fa      	ldrh	r2, [r7, #6]
 8007a6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	88fa      	ldrh	r2, [r7, #6]
 8007a74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a80:	d108      	bne.n	8007a94 <HAL_UART_Transmit+0x80>
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d104      	bne.n	8007a94 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	61bb      	str	r3, [r7, #24]
 8007a92:	e003      	b.n	8007a9c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007aa4:	e02d      	b.n	8007b02 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	2200      	movs	r2, #0
 8007aae:	2180      	movs	r1, #128	; 0x80
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f000 ffba 	bl	8008a2a <UART_WaitOnFlagUntilTimeout>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d001      	beq.n	8007ac0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e039      	b.n	8007b34 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d10b      	bne.n	8007ade <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	881a      	ldrh	r2, [r3, #0]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ad2:	b292      	uxth	r2, r2
 8007ad4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	3302      	adds	r3, #2
 8007ada:	61bb      	str	r3, [r7, #24]
 8007adc:	e008      	b.n	8007af0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	781a      	ldrb	r2, [r3, #0]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	b292      	uxth	r2, r2
 8007ae8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	3301      	adds	r3, #1
 8007aee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	3b01      	subs	r3, #1
 8007afa:	b29a      	uxth	r2, r3
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1cb      	bne.n	8007aa6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	9300      	str	r3, [sp, #0]
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	2200      	movs	r2, #0
 8007b16:	2140      	movs	r1, #64	; 0x40
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f000 ff86 	bl	8008a2a <UART_WaitOnFlagUntilTimeout>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d001      	beq.n	8007b28 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007b24:	2303      	movs	r3, #3
 8007b26:	e005      	b.n	8007b34 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2220      	movs	r2, #32
 8007b2c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	e000      	b.n	8007b34 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007b32:	2302      	movs	r3, #2
  }
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3720      	adds	r7, #32
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b08a      	sub	sp, #40	; 0x28
 8007b40:	af02      	add	r7, sp, #8
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	603b      	str	r3, [r7, #0]
 8007b48:	4613      	mov	r3, r2
 8007b4a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b50:	2b20      	cmp	r3, #32
 8007b52:	f040 80bf 	bne.w	8007cd4 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d002      	beq.n	8007b62 <HAL_UART_Receive+0x26>
 8007b5c:	88fb      	ldrh	r3, [r7, #6]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d101      	bne.n	8007b66 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e0b7      	b.n	8007cd6 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d101      	bne.n	8007b74 <HAL_UART_Receive+0x38>
 8007b70:	2302      	movs	r3, #2
 8007b72:	e0b0      	b.n	8007cd6 <HAL_UART_Receive+0x19a>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2222      	movs	r2, #34	; 0x22
 8007b88:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b90:	f7fb fa9a 	bl	80030c8 <HAL_GetTick>
 8007b94:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	88fa      	ldrh	r2, [r7, #6]
 8007b9a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	88fa      	ldrh	r2, [r7, #6]
 8007ba2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bae:	d10e      	bne.n	8007bce <HAL_UART_Receive+0x92>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d105      	bne.n	8007bc4 <HAL_UART_Receive+0x88>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007bbe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007bc2:	e02d      	b.n	8007c20 <HAL_UART_Receive+0xe4>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	22ff      	movs	r2, #255	; 0xff
 8007bc8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007bcc:	e028      	b.n	8007c20 <HAL_UART_Receive+0xe4>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10d      	bne.n	8007bf2 <HAL_UART_Receive+0xb6>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d104      	bne.n	8007be8 <HAL_UART_Receive+0xac>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	22ff      	movs	r2, #255	; 0xff
 8007be2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007be6:	e01b      	b.n	8007c20 <HAL_UART_Receive+0xe4>
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	227f      	movs	r2, #127	; 0x7f
 8007bec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007bf0:	e016      	b.n	8007c20 <HAL_UART_Receive+0xe4>
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bfa:	d10d      	bne.n	8007c18 <HAL_UART_Receive+0xdc>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d104      	bne.n	8007c0e <HAL_UART_Receive+0xd2>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	227f      	movs	r2, #127	; 0x7f
 8007c08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c0c:	e008      	b.n	8007c20 <HAL_UART_Receive+0xe4>
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	223f      	movs	r2, #63	; 0x3f
 8007c12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c16:	e003      	b.n	8007c20 <HAL_UART_Receive+0xe4>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c26:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c30:	d108      	bne.n	8007c44 <HAL_UART_Receive+0x108>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d104      	bne.n	8007c44 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	61bb      	str	r3, [r7, #24]
 8007c42:	e003      	b.n	8007c4c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007c54:	e033      	b.n	8007cbe <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	9300      	str	r3, [sp, #0]
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	2120      	movs	r1, #32
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f000 fee2 	bl	8008a2a <UART_WaitOnFlagUntilTimeout>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d001      	beq.n	8007c70 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	e032      	b.n	8007cd6 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d10c      	bne.n	8007c90 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007c7c:	b29a      	uxth	r2, r3
 8007c7e:	8a7b      	ldrh	r3, [r7, #18]
 8007c80:	4013      	ands	r3, r2
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	3302      	adds	r3, #2
 8007c8c:	61bb      	str	r3, [r7, #24]
 8007c8e:	e00d      	b.n	8007cac <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	b2da      	uxtb	r2, r3
 8007c9a:	8a7b      	ldrh	r3, [r7, #18]
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	4013      	ands	r3, r2
 8007ca0:	b2da      	uxtb	r2, r3
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1c5      	bne.n	8007c56 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2220      	movs	r2, #32
 8007cce:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	e000      	b.n	8007cd6 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8007cd4:	2302      	movs	r3, #2
  }
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3720      	adds	r7, #32
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
	...

08007ce0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b0ba      	sub	sp, #232	; 0xe8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	69db      	ldr	r3, [r3, #28]
 8007cee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007d06:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007d0a:	f640 030f 	movw	r3, #2063	; 0x80f
 8007d0e:	4013      	ands	r3, r2
 8007d10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007d14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d115      	bne.n	8007d48 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d20:	f003 0320 	and.w	r3, r3, #32
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00f      	beq.n	8007d48 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d2c:	f003 0320 	and.w	r3, r3, #32
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d009      	beq.n	8007d48 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f000 82a6 	beq.w	800828a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	4798      	blx	r3
      }
      return;
 8007d46:	e2a0      	b.n	800828a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007d48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f000 8117 	beq.w	8007f80 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007d52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d56:	f003 0301 	and.w	r3, r3, #1
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d106      	bne.n	8007d6c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007d5e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007d62:	4b85      	ldr	r3, [pc, #532]	; (8007f78 <HAL_UART_IRQHandler+0x298>)
 8007d64:	4013      	ands	r3, r2
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f000 810a 	beq.w	8007f80 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d70:	f003 0301 	and.w	r3, r3, #1
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d011      	beq.n	8007d9c <HAL_UART_IRQHandler+0xbc>
 8007d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00b      	beq.n	8007d9c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d92:	f043 0201 	orr.w	r2, r3, #1
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007da0:	f003 0302 	and.w	r3, r3, #2
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d011      	beq.n	8007dcc <HAL_UART_IRQHandler+0xec>
 8007da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dac:	f003 0301 	and.w	r3, r3, #1
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00b      	beq.n	8007dcc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2202      	movs	r2, #2
 8007dba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dc2:	f043 0204 	orr.w	r2, r3, #4
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dd0:	f003 0304 	and.w	r3, r3, #4
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d011      	beq.n	8007dfc <HAL_UART_IRQHandler+0x11c>
 8007dd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ddc:	f003 0301 	and.w	r3, r3, #1
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00b      	beq.n	8007dfc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2204      	movs	r2, #4
 8007dea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007df2:	f043 0202 	orr.w	r2, r3, #2
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e00:	f003 0308 	and.w	r3, r3, #8
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d017      	beq.n	8007e38 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e0c:	f003 0320 	and.w	r3, r3, #32
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d105      	bne.n	8007e20 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007e14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e18:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00b      	beq.n	8007e38 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2208      	movs	r2, #8
 8007e26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e2e:	f043 0208 	orr.w	r2, r3, #8
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d012      	beq.n	8007e6a <HAL_UART_IRQHandler+0x18a>
 8007e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00c      	beq.n	8007e6a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e60:	f043 0220 	orr.w	r2, r3, #32
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f000 820c 	beq.w	800828e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e7a:	f003 0320 	and.w	r3, r3, #32
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00d      	beq.n	8007e9e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007e82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e86:	f003 0320 	and.w	r3, r3, #32
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d007      	beq.n	8007e9e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d003      	beq.n	8007e9e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ea4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb2:	2b40      	cmp	r3, #64	; 0x40
 8007eb4:	d005      	beq.n	8007ec2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007eb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007eba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d04f      	beq.n	8007f62 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 fe75 	bl	8008bb2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ed2:	2b40      	cmp	r3, #64	; 0x40
 8007ed4:	d141      	bne.n	8007f5a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	3308      	adds	r3, #8
 8007edc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ee4:	e853 3f00 	ldrex	r3, [r3]
 8007ee8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007eec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ef0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	3308      	adds	r3, #8
 8007efe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007f02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007f06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007f0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007f12:	e841 2300 	strex	r3, r2, [r1]
 8007f16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007f1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1d9      	bne.n	8007ed6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d013      	beq.n	8007f52 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f2e:	4a13      	ldr	r2, [pc, #76]	; (8007f7c <HAL_UART_IRQHandler+0x29c>)
 8007f30:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7fb fa16 	bl	8003368 <HAL_DMA_Abort_IT>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d017      	beq.n	8007f72 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007f4c:	4610      	mov	r0, r2
 8007f4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f50:	e00f      	b.n	8007f72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f9b0 	bl	80082b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f58:	e00b      	b.n	8007f72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 f9ac 	bl	80082b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f60:	e007      	b.n	8007f72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 f9a8 	bl	80082b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007f70:	e18d      	b.n	800828e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f72:	bf00      	nop
    return;
 8007f74:	e18b      	b.n	800828e <HAL_UART_IRQHandler+0x5ae>
 8007f76:	bf00      	nop
 8007f78:	04000120 	.word	0x04000120
 8007f7c:	08008c79 	.word	0x08008c79

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	f040 8146 	bne.w	8008216 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f8e:	f003 0310 	and.w	r3, r3, #16
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f000 813f 	beq.w	8008216 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f9c:	f003 0310 	and.w	r3, r3, #16
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	f000 8138 	beq.w	8008216 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2210      	movs	r2, #16
 8007fac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fb8:	2b40      	cmp	r3, #64	; 0x40
 8007fba:	f040 80b4 	bne.w	8008126 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007fca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f000 815f 	beq.w	8008292 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007fda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	f080 8157 	bcs.w	8008292 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007fea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f003 0320 	and.w	r3, r3, #32
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	f040 8085 	bne.w	800810a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008008:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800800c:	e853 3f00 	ldrex	r3, [r3]
 8008010:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008014:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800801c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	461a      	mov	r2, r3
 8008026:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800802a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800802e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008032:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008036:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800803a:	e841 2300 	strex	r3, r2, [r1]
 800803e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008042:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008046:	2b00      	cmp	r3, #0
 8008048:	d1da      	bne.n	8008000 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	3308      	adds	r3, #8
 8008050:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008052:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008054:	e853 3f00 	ldrex	r3, [r3]
 8008058:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800805a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800805c:	f023 0301 	bic.w	r3, r3, #1
 8008060:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	3308      	adds	r3, #8
 800806a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800806e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008072:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008074:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008076:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800807a:	e841 2300 	strex	r3, r2, [r1]
 800807e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008080:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008082:	2b00      	cmp	r3, #0
 8008084:	d1e1      	bne.n	800804a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	3308      	adds	r3, #8
 800808c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008090:	e853 3f00 	ldrex	r3, [r3]
 8008094:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008096:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008098:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800809c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	3308      	adds	r3, #8
 80080a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80080aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80080ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80080b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80080b2:	e841 2300 	strex	r3, r2, [r1]
 80080b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80080b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1e3      	bne.n	8008086 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2220      	movs	r2, #32
 80080c2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080d2:	e853 3f00 	ldrex	r3, [r3]
 80080d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80080d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080da:	f023 0310 	bic.w	r3, r3, #16
 80080de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	461a      	mov	r2, r3
 80080e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80080ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80080ee:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80080f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80080f4:	e841 2300 	strex	r3, r2, [r1]
 80080f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80080fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d1e4      	bne.n	80080ca <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008104:	4618      	mov	r0, r3
 8008106:	f7fb f8f1 	bl	80032ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008116:	b29b      	uxth	r3, r3
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	b29b      	uxth	r3, r3
 800811c:	4619      	mov	r1, r3
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f8d4 	bl	80082cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008124:	e0b5      	b.n	8008292 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008132:	b29b      	uxth	r3, r3
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008140:	b29b      	uxth	r3, r3
 8008142:	2b00      	cmp	r3, #0
 8008144:	f000 80a7 	beq.w	8008296 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8008148:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800814c:	2b00      	cmp	r3, #0
 800814e:	f000 80a2 	beq.w	8008296 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815a:	e853 3f00 	ldrex	r3, [r3]
 800815e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008162:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008166:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	461a      	mov	r2, r3
 8008170:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008174:	647b      	str	r3, [r7, #68]	; 0x44
 8008176:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008178:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800817a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800817c:	e841 2300 	strex	r3, r2, [r1]
 8008180:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008184:	2b00      	cmp	r3, #0
 8008186:	d1e4      	bne.n	8008152 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	3308      	adds	r3, #8
 800818e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008192:	e853 3f00 	ldrex	r3, [r3]
 8008196:	623b      	str	r3, [r7, #32]
   return(result);
 8008198:	6a3b      	ldr	r3, [r7, #32]
 800819a:	f023 0301 	bic.w	r3, r3, #1
 800819e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	3308      	adds	r3, #8
 80081a8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80081ac:	633a      	str	r2, [r7, #48]	; 0x30
 80081ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081b4:	e841 2300 	strex	r3, r2, [r1]
 80081b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d1e3      	bne.n	8008188 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2220      	movs	r2, #32
 80081c4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	e853 3f00 	ldrex	r3, [r3]
 80081de:	60fb      	str	r3, [r7, #12]
   return(result);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f023 0310 	bic.w	r3, r3, #16
 80081e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	461a      	mov	r2, r3
 80081f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80081f4:	61fb      	str	r3, [r7, #28]
 80081f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f8:	69b9      	ldr	r1, [r7, #24]
 80081fa:	69fa      	ldr	r2, [r7, #28]
 80081fc:	e841 2300 	strex	r3, r2, [r1]
 8008200:	617b      	str	r3, [r7, #20]
   return(result);
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d1e4      	bne.n	80081d2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008208:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800820c:	4619      	mov	r1, r3
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 f85c 	bl	80082cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008214:	e03f      	b.n	8008296 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800821a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00e      	beq.n	8008240 <HAL_UART_IRQHandler+0x560>
 8008222:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800822a:	2b00      	cmp	r3, #0
 800822c:	d008      	beq.n	8008240 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008236:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 fd5d 	bl	8008cf8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800823e:	e02d      	b.n	800829c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00e      	beq.n	800826a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800824c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008254:	2b00      	cmp	r3, #0
 8008256:	d008      	beq.n	800826a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800825c:	2b00      	cmp	r3, #0
 800825e:	d01c      	beq.n	800829a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	4798      	blx	r3
    }
    return;
 8008268:	e017      	b.n	800829a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800826a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800826e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008272:	2b00      	cmp	r3, #0
 8008274:	d012      	beq.n	800829c <HAL_UART_IRQHandler+0x5bc>
 8008276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800827a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800827e:	2b00      	cmp	r3, #0
 8008280:	d00c      	beq.n	800829c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 fd0e 	bl	8008ca4 <UART_EndTransmit_IT>
    return;
 8008288:	e008      	b.n	800829c <HAL_UART_IRQHandler+0x5bc>
      return;
 800828a:	bf00      	nop
 800828c:	e006      	b.n	800829c <HAL_UART_IRQHandler+0x5bc>
    return;
 800828e:	bf00      	nop
 8008290:	e004      	b.n	800829c <HAL_UART_IRQHandler+0x5bc>
      return;
 8008292:	bf00      	nop
 8008294:	e002      	b.n	800829c <HAL_UART_IRQHandler+0x5bc>
      return;
 8008296:	bf00      	nop
 8008298:	e000      	b.n	800829c <HAL_UART_IRQHandler+0x5bc>
    return;
 800829a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800829c:	37e8      	adds	r7, #232	; 0xe8
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop

080082a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80082ac:	bf00      	nop
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80082c0:	bf00      	nop
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	460b      	mov	r3, r1
 80082d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80082d8:	bf00      	nop
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082e8:	b08a      	sub	sp, #40	; 0x28
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80082ee:	2300      	movs	r3, #0
 80082f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	689a      	ldr	r2, [r3, #8]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	431a      	orrs	r2, r3
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	695b      	ldr	r3, [r3, #20]
 8008302:	431a      	orrs	r2, r3
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	69db      	ldr	r3, [r3, #28]
 8008308:	4313      	orrs	r3, r2
 800830a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	4ba4      	ldr	r3, [pc, #656]	; (80085a4 <UART_SetConfig+0x2c0>)
 8008314:	4013      	ands	r3, r2
 8008316:	68fa      	ldr	r2, [r7, #12]
 8008318:	6812      	ldr	r2, [r2, #0]
 800831a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800831c:	430b      	orrs	r3, r1
 800831e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	68da      	ldr	r2, [r3, #12]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	430a      	orrs	r2, r1
 8008334:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a99      	ldr	r2, [pc, #612]	; (80085a8 <UART_SetConfig+0x2c4>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d004      	beq.n	8008350 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6a1b      	ldr	r3, [r3, #32]
 800834a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800834c:	4313      	orrs	r3, r2
 800834e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008360:	430a      	orrs	r2, r1
 8008362:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a90      	ldr	r2, [pc, #576]	; (80085ac <UART_SetConfig+0x2c8>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d126      	bne.n	80083bc <UART_SetConfig+0xd8>
 800836e:	4b90      	ldr	r3, [pc, #576]	; (80085b0 <UART_SetConfig+0x2cc>)
 8008370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008374:	f003 0303 	and.w	r3, r3, #3
 8008378:	2b03      	cmp	r3, #3
 800837a:	d81b      	bhi.n	80083b4 <UART_SetConfig+0xd0>
 800837c:	a201      	add	r2, pc, #4	; (adr r2, 8008384 <UART_SetConfig+0xa0>)
 800837e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008382:	bf00      	nop
 8008384:	08008395 	.word	0x08008395
 8008388:	080083a5 	.word	0x080083a5
 800838c:	0800839d 	.word	0x0800839d
 8008390:	080083ad 	.word	0x080083ad
 8008394:	2301      	movs	r3, #1
 8008396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800839a:	e116      	b.n	80085ca <UART_SetConfig+0x2e6>
 800839c:	2302      	movs	r3, #2
 800839e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083a2:	e112      	b.n	80085ca <UART_SetConfig+0x2e6>
 80083a4:	2304      	movs	r3, #4
 80083a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083aa:	e10e      	b.n	80085ca <UART_SetConfig+0x2e6>
 80083ac:	2308      	movs	r3, #8
 80083ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083b2:	e10a      	b.n	80085ca <UART_SetConfig+0x2e6>
 80083b4:	2310      	movs	r3, #16
 80083b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083ba:	e106      	b.n	80085ca <UART_SetConfig+0x2e6>
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a7c      	ldr	r2, [pc, #496]	; (80085b4 <UART_SetConfig+0x2d0>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d138      	bne.n	8008438 <UART_SetConfig+0x154>
 80083c6:	4b7a      	ldr	r3, [pc, #488]	; (80085b0 <UART_SetConfig+0x2cc>)
 80083c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083cc:	f003 030c 	and.w	r3, r3, #12
 80083d0:	2b0c      	cmp	r3, #12
 80083d2:	d82d      	bhi.n	8008430 <UART_SetConfig+0x14c>
 80083d4:	a201      	add	r2, pc, #4	; (adr r2, 80083dc <UART_SetConfig+0xf8>)
 80083d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083da:	bf00      	nop
 80083dc:	08008411 	.word	0x08008411
 80083e0:	08008431 	.word	0x08008431
 80083e4:	08008431 	.word	0x08008431
 80083e8:	08008431 	.word	0x08008431
 80083ec:	08008421 	.word	0x08008421
 80083f0:	08008431 	.word	0x08008431
 80083f4:	08008431 	.word	0x08008431
 80083f8:	08008431 	.word	0x08008431
 80083fc:	08008419 	.word	0x08008419
 8008400:	08008431 	.word	0x08008431
 8008404:	08008431 	.word	0x08008431
 8008408:	08008431 	.word	0x08008431
 800840c:	08008429 	.word	0x08008429
 8008410:	2300      	movs	r3, #0
 8008412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008416:	e0d8      	b.n	80085ca <UART_SetConfig+0x2e6>
 8008418:	2302      	movs	r3, #2
 800841a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800841e:	e0d4      	b.n	80085ca <UART_SetConfig+0x2e6>
 8008420:	2304      	movs	r3, #4
 8008422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008426:	e0d0      	b.n	80085ca <UART_SetConfig+0x2e6>
 8008428:	2308      	movs	r3, #8
 800842a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800842e:	e0cc      	b.n	80085ca <UART_SetConfig+0x2e6>
 8008430:	2310      	movs	r3, #16
 8008432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008436:	e0c8      	b.n	80085ca <UART_SetConfig+0x2e6>
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a5e      	ldr	r2, [pc, #376]	; (80085b8 <UART_SetConfig+0x2d4>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d125      	bne.n	800848e <UART_SetConfig+0x1aa>
 8008442:	4b5b      	ldr	r3, [pc, #364]	; (80085b0 <UART_SetConfig+0x2cc>)
 8008444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008448:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800844c:	2b30      	cmp	r3, #48	; 0x30
 800844e:	d016      	beq.n	800847e <UART_SetConfig+0x19a>
 8008450:	2b30      	cmp	r3, #48	; 0x30
 8008452:	d818      	bhi.n	8008486 <UART_SetConfig+0x1a2>
 8008454:	2b20      	cmp	r3, #32
 8008456:	d00a      	beq.n	800846e <UART_SetConfig+0x18a>
 8008458:	2b20      	cmp	r3, #32
 800845a:	d814      	bhi.n	8008486 <UART_SetConfig+0x1a2>
 800845c:	2b00      	cmp	r3, #0
 800845e:	d002      	beq.n	8008466 <UART_SetConfig+0x182>
 8008460:	2b10      	cmp	r3, #16
 8008462:	d008      	beq.n	8008476 <UART_SetConfig+0x192>
 8008464:	e00f      	b.n	8008486 <UART_SetConfig+0x1a2>
 8008466:	2300      	movs	r3, #0
 8008468:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800846c:	e0ad      	b.n	80085ca <UART_SetConfig+0x2e6>
 800846e:	2302      	movs	r3, #2
 8008470:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008474:	e0a9      	b.n	80085ca <UART_SetConfig+0x2e6>
 8008476:	2304      	movs	r3, #4
 8008478:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800847c:	e0a5      	b.n	80085ca <UART_SetConfig+0x2e6>
 800847e:	2308      	movs	r3, #8
 8008480:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008484:	e0a1      	b.n	80085ca <UART_SetConfig+0x2e6>
 8008486:	2310      	movs	r3, #16
 8008488:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800848c:	e09d      	b.n	80085ca <UART_SetConfig+0x2e6>
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a4a      	ldr	r2, [pc, #296]	; (80085bc <UART_SetConfig+0x2d8>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d125      	bne.n	80084e4 <UART_SetConfig+0x200>
 8008498:	4b45      	ldr	r3, [pc, #276]	; (80085b0 <UART_SetConfig+0x2cc>)
 800849a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800849e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80084a2:	2bc0      	cmp	r3, #192	; 0xc0
 80084a4:	d016      	beq.n	80084d4 <UART_SetConfig+0x1f0>
 80084a6:	2bc0      	cmp	r3, #192	; 0xc0
 80084a8:	d818      	bhi.n	80084dc <UART_SetConfig+0x1f8>
 80084aa:	2b80      	cmp	r3, #128	; 0x80
 80084ac:	d00a      	beq.n	80084c4 <UART_SetConfig+0x1e0>
 80084ae:	2b80      	cmp	r3, #128	; 0x80
 80084b0:	d814      	bhi.n	80084dc <UART_SetConfig+0x1f8>
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d002      	beq.n	80084bc <UART_SetConfig+0x1d8>
 80084b6:	2b40      	cmp	r3, #64	; 0x40
 80084b8:	d008      	beq.n	80084cc <UART_SetConfig+0x1e8>
 80084ba:	e00f      	b.n	80084dc <UART_SetConfig+0x1f8>
 80084bc:	2300      	movs	r3, #0
 80084be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084c2:	e082      	b.n	80085ca <UART_SetConfig+0x2e6>
 80084c4:	2302      	movs	r3, #2
 80084c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084ca:	e07e      	b.n	80085ca <UART_SetConfig+0x2e6>
 80084cc:	2304      	movs	r3, #4
 80084ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084d2:	e07a      	b.n	80085ca <UART_SetConfig+0x2e6>
 80084d4:	2308      	movs	r3, #8
 80084d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084da:	e076      	b.n	80085ca <UART_SetConfig+0x2e6>
 80084dc:	2310      	movs	r3, #16
 80084de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084e2:	e072      	b.n	80085ca <UART_SetConfig+0x2e6>
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a35      	ldr	r2, [pc, #212]	; (80085c0 <UART_SetConfig+0x2dc>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d12a      	bne.n	8008544 <UART_SetConfig+0x260>
 80084ee:	4b30      	ldr	r3, [pc, #192]	; (80085b0 <UART_SetConfig+0x2cc>)
 80084f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084fc:	d01a      	beq.n	8008534 <UART_SetConfig+0x250>
 80084fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008502:	d81b      	bhi.n	800853c <UART_SetConfig+0x258>
 8008504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008508:	d00c      	beq.n	8008524 <UART_SetConfig+0x240>
 800850a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800850e:	d815      	bhi.n	800853c <UART_SetConfig+0x258>
 8008510:	2b00      	cmp	r3, #0
 8008512:	d003      	beq.n	800851c <UART_SetConfig+0x238>
 8008514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008518:	d008      	beq.n	800852c <UART_SetConfig+0x248>
 800851a:	e00f      	b.n	800853c <UART_SetConfig+0x258>
 800851c:	2300      	movs	r3, #0
 800851e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008522:	e052      	b.n	80085ca <UART_SetConfig+0x2e6>
 8008524:	2302      	movs	r3, #2
 8008526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800852a:	e04e      	b.n	80085ca <UART_SetConfig+0x2e6>
 800852c:	2304      	movs	r3, #4
 800852e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008532:	e04a      	b.n	80085ca <UART_SetConfig+0x2e6>
 8008534:	2308      	movs	r3, #8
 8008536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800853a:	e046      	b.n	80085ca <UART_SetConfig+0x2e6>
 800853c:	2310      	movs	r3, #16
 800853e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008542:	e042      	b.n	80085ca <UART_SetConfig+0x2e6>
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a17      	ldr	r2, [pc, #92]	; (80085a8 <UART_SetConfig+0x2c4>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d13a      	bne.n	80085c4 <UART_SetConfig+0x2e0>
 800854e:	4b18      	ldr	r3, [pc, #96]	; (80085b0 <UART_SetConfig+0x2cc>)
 8008550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008554:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008558:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800855c:	d01a      	beq.n	8008594 <UART_SetConfig+0x2b0>
 800855e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008562:	d81b      	bhi.n	800859c <UART_SetConfig+0x2b8>
 8008564:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008568:	d00c      	beq.n	8008584 <UART_SetConfig+0x2a0>
 800856a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800856e:	d815      	bhi.n	800859c <UART_SetConfig+0x2b8>
 8008570:	2b00      	cmp	r3, #0
 8008572:	d003      	beq.n	800857c <UART_SetConfig+0x298>
 8008574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008578:	d008      	beq.n	800858c <UART_SetConfig+0x2a8>
 800857a:	e00f      	b.n	800859c <UART_SetConfig+0x2b8>
 800857c:	2300      	movs	r3, #0
 800857e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008582:	e022      	b.n	80085ca <UART_SetConfig+0x2e6>
 8008584:	2302      	movs	r3, #2
 8008586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800858a:	e01e      	b.n	80085ca <UART_SetConfig+0x2e6>
 800858c:	2304      	movs	r3, #4
 800858e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008592:	e01a      	b.n	80085ca <UART_SetConfig+0x2e6>
 8008594:	2308      	movs	r3, #8
 8008596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800859a:	e016      	b.n	80085ca <UART_SetConfig+0x2e6>
 800859c:	2310      	movs	r3, #16
 800859e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085a2:	e012      	b.n	80085ca <UART_SetConfig+0x2e6>
 80085a4:	efff69f3 	.word	0xefff69f3
 80085a8:	40008000 	.word	0x40008000
 80085ac:	40013800 	.word	0x40013800
 80085b0:	40021000 	.word	0x40021000
 80085b4:	40004400 	.word	0x40004400
 80085b8:	40004800 	.word	0x40004800
 80085bc:	40004c00 	.word	0x40004c00
 80085c0:	40005000 	.word	0x40005000
 80085c4:	2310      	movs	r3, #16
 80085c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a9f      	ldr	r2, [pc, #636]	; (800884c <UART_SetConfig+0x568>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d17a      	bne.n	80086ca <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80085d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085d8:	2b08      	cmp	r3, #8
 80085da:	d824      	bhi.n	8008626 <UART_SetConfig+0x342>
 80085dc:	a201      	add	r2, pc, #4	; (adr r2, 80085e4 <UART_SetConfig+0x300>)
 80085de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e2:	bf00      	nop
 80085e4:	08008609 	.word	0x08008609
 80085e8:	08008627 	.word	0x08008627
 80085ec:	08008611 	.word	0x08008611
 80085f0:	08008627 	.word	0x08008627
 80085f4:	08008617 	.word	0x08008617
 80085f8:	08008627 	.word	0x08008627
 80085fc:	08008627 	.word	0x08008627
 8008600:	08008627 	.word	0x08008627
 8008604:	0800861f 	.word	0x0800861f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008608:	f7fc fcd0 	bl	8004fac <HAL_RCC_GetPCLK1Freq>
 800860c:	61f8      	str	r0, [r7, #28]
        break;
 800860e:	e010      	b.n	8008632 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008610:	4b8f      	ldr	r3, [pc, #572]	; (8008850 <UART_SetConfig+0x56c>)
 8008612:	61fb      	str	r3, [r7, #28]
        break;
 8008614:	e00d      	b.n	8008632 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008616:	f7fc fc31 	bl	8004e7c <HAL_RCC_GetSysClockFreq>
 800861a:	61f8      	str	r0, [r7, #28]
        break;
 800861c:	e009      	b.n	8008632 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800861e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008622:	61fb      	str	r3, [r7, #28]
        break;
 8008624:	e005      	b.n	8008632 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008626:	2300      	movs	r3, #0
 8008628:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008630:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	2b00      	cmp	r3, #0
 8008636:	f000 80fb 	beq.w	8008830 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	685a      	ldr	r2, [r3, #4]
 800863e:	4613      	mov	r3, r2
 8008640:	005b      	lsls	r3, r3, #1
 8008642:	4413      	add	r3, r2
 8008644:	69fa      	ldr	r2, [r7, #28]
 8008646:	429a      	cmp	r2, r3
 8008648:	d305      	bcc.n	8008656 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008650:	69fa      	ldr	r2, [r7, #28]
 8008652:	429a      	cmp	r2, r3
 8008654:	d903      	bls.n	800865e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800865c:	e0e8      	b.n	8008830 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	2200      	movs	r2, #0
 8008662:	461c      	mov	r4, r3
 8008664:	4615      	mov	r5, r2
 8008666:	f04f 0200 	mov.w	r2, #0
 800866a:	f04f 0300 	mov.w	r3, #0
 800866e:	022b      	lsls	r3, r5, #8
 8008670:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008674:	0222      	lsls	r2, r4, #8
 8008676:	68f9      	ldr	r1, [r7, #12]
 8008678:	6849      	ldr	r1, [r1, #4]
 800867a:	0849      	lsrs	r1, r1, #1
 800867c:	2000      	movs	r0, #0
 800867e:	4688      	mov	r8, r1
 8008680:	4681      	mov	r9, r0
 8008682:	eb12 0a08 	adds.w	sl, r2, r8
 8008686:	eb43 0b09 	adc.w	fp, r3, r9
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	603b      	str	r3, [r7, #0]
 8008692:	607a      	str	r2, [r7, #4]
 8008694:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008698:	4650      	mov	r0, sl
 800869a:	4659      	mov	r1, fp
 800869c:	f7f8 fa94 	bl	8000bc8 <__aeabi_uldivmod>
 80086a0:	4602      	mov	r2, r0
 80086a2:	460b      	mov	r3, r1
 80086a4:	4613      	mov	r3, r2
 80086a6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086ae:	d308      	bcc.n	80086c2 <UART_SetConfig+0x3de>
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086b6:	d204      	bcs.n	80086c2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	69ba      	ldr	r2, [r7, #24]
 80086be:	60da      	str	r2, [r3, #12]
 80086c0:	e0b6      	b.n	8008830 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80086c8:	e0b2      	b.n	8008830 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	69db      	ldr	r3, [r3, #28]
 80086ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086d2:	d15e      	bne.n	8008792 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80086d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086d8:	2b08      	cmp	r3, #8
 80086da:	d828      	bhi.n	800872e <UART_SetConfig+0x44a>
 80086dc:	a201      	add	r2, pc, #4	; (adr r2, 80086e4 <UART_SetConfig+0x400>)
 80086de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e2:	bf00      	nop
 80086e4:	08008709 	.word	0x08008709
 80086e8:	08008711 	.word	0x08008711
 80086ec:	08008719 	.word	0x08008719
 80086f0:	0800872f 	.word	0x0800872f
 80086f4:	0800871f 	.word	0x0800871f
 80086f8:	0800872f 	.word	0x0800872f
 80086fc:	0800872f 	.word	0x0800872f
 8008700:	0800872f 	.word	0x0800872f
 8008704:	08008727 	.word	0x08008727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008708:	f7fc fc50 	bl	8004fac <HAL_RCC_GetPCLK1Freq>
 800870c:	61f8      	str	r0, [r7, #28]
        break;
 800870e:	e014      	b.n	800873a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008710:	f7fc fc62 	bl	8004fd8 <HAL_RCC_GetPCLK2Freq>
 8008714:	61f8      	str	r0, [r7, #28]
        break;
 8008716:	e010      	b.n	800873a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008718:	4b4d      	ldr	r3, [pc, #308]	; (8008850 <UART_SetConfig+0x56c>)
 800871a:	61fb      	str	r3, [r7, #28]
        break;
 800871c:	e00d      	b.n	800873a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800871e:	f7fc fbad 	bl	8004e7c <HAL_RCC_GetSysClockFreq>
 8008722:	61f8      	str	r0, [r7, #28]
        break;
 8008724:	e009      	b.n	800873a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800872a:	61fb      	str	r3, [r7, #28]
        break;
 800872c:	e005      	b.n	800873a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800872e:	2300      	movs	r3, #0
 8008730:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008738:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d077      	beq.n	8008830 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	005a      	lsls	r2, r3, #1
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	085b      	lsrs	r3, r3, #1
 800874a:	441a      	add	r2, r3
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	fbb2 f3f3 	udiv	r3, r2, r3
 8008754:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	2b0f      	cmp	r3, #15
 800875a:	d916      	bls.n	800878a <UART_SetConfig+0x4a6>
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008762:	d212      	bcs.n	800878a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	b29b      	uxth	r3, r3
 8008768:	f023 030f 	bic.w	r3, r3, #15
 800876c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	085b      	lsrs	r3, r3, #1
 8008772:	b29b      	uxth	r3, r3
 8008774:	f003 0307 	and.w	r3, r3, #7
 8008778:	b29a      	uxth	r2, r3
 800877a:	8afb      	ldrh	r3, [r7, #22]
 800877c:	4313      	orrs	r3, r2
 800877e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	8afa      	ldrh	r2, [r7, #22]
 8008786:	60da      	str	r2, [r3, #12]
 8008788:	e052      	b.n	8008830 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008790:	e04e      	b.n	8008830 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008792:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008796:	2b08      	cmp	r3, #8
 8008798:	d827      	bhi.n	80087ea <UART_SetConfig+0x506>
 800879a:	a201      	add	r2, pc, #4	; (adr r2, 80087a0 <UART_SetConfig+0x4bc>)
 800879c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a0:	080087c5 	.word	0x080087c5
 80087a4:	080087cd 	.word	0x080087cd
 80087a8:	080087d5 	.word	0x080087d5
 80087ac:	080087eb 	.word	0x080087eb
 80087b0:	080087db 	.word	0x080087db
 80087b4:	080087eb 	.word	0x080087eb
 80087b8:	080087eb 	.word	0x080087eb
 80087bc:	080087eb 	.word	0x080087eb
 80087c0:	080087e3 	.word	0x080087e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087c4:	f7fc fbf2 	bl	8004fac <HAL_RCC_GetPCLK1Freq>
 80087c8:	61f8      	str	r0, [r7, #28]
        break;
 80087ca:	e014      	b.n	80087f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087cc:	f7fc fc04 	bl	8004fd8 <HAL_RCC_GetPCLK2Freq>
 80087d0:	61f8      	str	r0, [r7, #28]
        break;
 80087d2:	e010      	b.n	80087f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087d4:	4b1e      	ldr	r3, [pc, #120]	; (8008850 <UART_SetConfig+0x56c>)
 80087d6:	61fb      	str	r3, [r7, #28]
        break;
 80087d8:	e00d      	b.n	80087f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087da:	f7fc fb4f 	bl	8004e7c <HAL_RCC_GetSysClockFreq>
 80087de:	61f8      	str	r0, [r7, #28]
        break;
 80087e0:	e009      	b.n	80087f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087e6:	61fb      	str	r3, [r7, #28]
        break;
 80087e8:	e005      	b.n	80087f6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80087ea:	2300      	movs	r3, #0
 80087ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80087f4:	bf00      	nop
    }

    if (pclk != 0U)
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d019      	beq.n	8008830 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	085a      	lsrs	r2, r3, #1
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	441a      	add	r2, r3
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	fbb2 f3f3 	udiv	r3, r2, r3
 800880e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008810:	69bb      	ldr	r3, [r7, #24]
 8008812:	2b0f      	cmp	r3, #15
 8008814:	d909      	bls.n	800882a <UART_SetConfig+0x546>
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800881c:	d205      	bcs.n	800882a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	b29a      	uxth	r2, r3
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	60da      	str	r2, [r3, #12]
 8008828:	e002      	b.n	8008830 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2200      	movs	r2, #0
 8008834:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2200      	movs	r2, #0
 800883a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800883c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008840:	4618      	mov	r0, r3
 8008842:	3728      	adds	r7, #40	; 0x28
 8008844:	46bd      	mov	sp, r7
 8008846:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800884a:	bf00      	nop
 800884c:	40008000 	.word	0x40008000
 8008850:	00f42400 	.word	0x00f42400

08008854 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008860:	f003 0301 	and.w	r3, r3, #1
 8008864:	2b00      	cmp	r3, #0
 8008866:	d00a      	beq.n	800887e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	430a      	orrs	r2, r1
 800887c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008882:	f003 0302 	and.w	r3, r3, #2
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00a      	beq.n	80088a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	430a      	orrs	r2, r1
 800889e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a4:	f003 0304 	and.w	r3, r3, #4
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00a      	beq.n	80088c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	430a      	orrs	r2, r1
 80088c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c6:	f003 0308 	and.w	r3, r3, #8
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00a      	beq.n	80088e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	430a      	orrs	r2, r1
 80088e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e8:	f003 0310 	and.w	r3, r3, #16
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d00a      	beq.n	8008906 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	430a      	orrs	r2, r1
 8008904:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890a:	f003 0320 	and.w	r3, r3, #32
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00a      	beq.n	8008928 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	430a      	orrs	r2, r1
 8008926:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008930:	2b00      	cmp	r3, #0
 8008932:	d01a      	beq.n	800896a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	430a      	orrs	r2, r1
 8008948:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800894e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008952:	d10a      	bne.n	800896a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	430a      	orrs	r2, r1
 8008968:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00a      	beq.n	800898c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	430a      	orrs	r2, r1
 800898a:	605a      	str	r2, [r3, #4]
  }
}
 800898c:	bf00      	nop
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b086      	sub	sp, #24
 800899c:	af02      	add	r7, sp, #8
 800899e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80089a8:	f7fa fb8e 	bl	80030c8 <HAL_GetTick>
 80089ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 0308 	and.w	r3, r3, #8
 80089b8:	2b08      	cmp	r3, #8
 80089ba:	d10e      	bne.n	80089da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f82d 	bl	8008a2a <UART_WaitOnFlagUntilTimeout>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d001      	beq.n	80089da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089d6:	2303      	movs	r3, #3
 80089d8:	e023      	b.n	8008a22 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 0304 	and.w	r3, r3, #4
 80089e4:	2b04      	cmp	r3, #4
 80089e6:	d10e      	bne.n	8008a06 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80089ec:	9300      	str	r3, [sp, #0]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f817 	bl	8008a2a <UART_WaitOnFlagUntilTimeout>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d001      	beq.n	8008a06 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a02:	2303      	movs	r3, #3
 8008a04:	e00d      	b.n	8008a22 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2220      	movs	r2, #32
 8008a0a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2220      	movs	r2, #32
 8008a10:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b09c      	sub	sp, #112	; 0x70
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	60f8      	str	r0, [r7, #12]
 8008a32:	60b9      	str	r1, [r7, #8]
 8008a34:	603b      	str	r3, [r7, #0]
 8008a36:	4613      	mov	r3, r2
 8008a38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a3a:	e0a5      	b.n	8008b88 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a42:	f000 80a1 	beq.w	8008b88 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a46:	f7fa fb3f 	bl	80030c8 <HAL_GetTick>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	1ad3      	subs	r3, r2, r3
 8008a50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d302      	bcc.n	8008a5c <UART_WaitOnFlagUntilTimeout+0x32>
 8008a56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d13e      	bne.n	8008ada <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a64:	e853 3f00 	ldrex	r3, [r3]
 8008a68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008a70:	667b      	str	r3, [r7, #100]	; 0x64
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	461a      	mov	r2, r3
 8008a78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a7c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a82:	e841 2300 	strex	r3, r2, [r1]
 8008a86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1e6      	bne.n	8008a5c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	3308      	adds	r3, #8
 8008a94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a98:	e853 3f00 	ldrex	r3, [r3]
 8008a9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa0:	f023 0301 	bic.w	r3, r3, #1
 8008aa4:	663b      	str	r3, [r7, #96]	; 0x60
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	3308      	adds	r3, #8
 8008aac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008aae:	64ba      	str	r2, [r7, #72]	; 0x48
 8008ab0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ab4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ab6:	e841 2300 	strex	r3, r2, [r1]
 8008aba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1e5      	bne.n	8008a8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2220      	movs	r2, #32
 8008ac6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2220      	movs	r2, #32
 8008acc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	e067      	b.n	8008baa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 0304 	and.w	r3, r3, #4
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d04f      	beq.n	8008b88 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	69db      	ldr	r3, [r3, #28]
 8008aee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008af2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008af6:	d147      	bne.n	8008b88 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b00:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0a:	e853 3f00 	ldrex	r3, [r3]
 8008b0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b12:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b20:	637b      	str	r3, [r7, #52]	; 0x34
 8008b22:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b28:	e841 2300 	strex	r3, r2, [r1]
 8008b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d1e6      	bne.n	8008b02 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	3308      	adds	r3, #8
 8008b3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	e853 3f00 	ldrex	r3, [r3]
 8008b42:	613b      	str	r3, [r7, #16]
   return(result);
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	f023 0301 	bic.w	r3, r3, #1
 8008b4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	3308      	adds	r3, #8
 8008b52:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b54:	623a      	str	r2, [r7, #32]
 8008b56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b58:	69f9      	ldr	r1, [r7, #28]
 8008b5a:	6a3a      	ldr	r2, [r7, #32]
 8008b5c:	e841 2300 	strex	r3, r2, [r1]
 8008b60:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d1e5      	bne.n	8008b34 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2220      	movs	r2, #32
 8008b6c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2220      	movs	r2, #32
 8008b72:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2220      	movs	r2, #32
 8008b78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008b84:	2303      	movs	r3, #3
 8008b86:	e010      	b.n	8008baa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	69da      	ldr	r2, [r3, #28]
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	4013      	ands	r3, r2
 8008b92:	68ba      	ldr	r2, [r7, #8]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	bf0c      	ite	eq
 8008b98:	2301      	moveq	r3, #1
 8008b9a:	2300      	movne	r3, #0
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	79fb      	ldrb	r3, [r7, #7]
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	f43f af4a 	beq.w	8008a3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3770      	adds	r7, #112	; 0x70
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008bb2:	b480      	push	{r7}
 8008bb4:	b095      	sub	sp, #84	; 0x54
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bc2:	e853 3f00 	ldrex	r3, [r3]
 8008bc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008bce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bd8:	643b      	str	r3, [r7, #64]	; 0x40
 8008bda:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bdc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008bde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008be0:	e841 2300 	strex	r3, r2, [r1]
 8008be4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d1e6      	bne.n	8008bba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	3308      	adds	r3, #8
 8008bf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf4:	6a3b      	ldr	r3, [r7, #32]
 8008bf6:	e853 3f00 	ldrex	r3, [r3]
 8008bfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	f023 0301 	bic.w	r3, r3, #1
 8008c02:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	3308      	adds	r3, #8
 8008c0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c14:	e841 2300 	strex	r3, r2, [r1]
 8008c18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d1e5      	bne.n	8008bec <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d118      	bne.n	8008c5a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	e853 3f00 	ldrex	r3, [r3]
 8008c34:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	f023 0310 	bic.w	r3, r3, #16
 8008c3c:	647b      	str	r3, [r7, #68]	; 0x44
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	461a      	mov	r2, r3
 8008c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c46:	61bb      	str	r3, [r7, #24]
 8008c48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4a:	6979      	ldr	r1, [r7, #20]
 8008c4c:	69ba      	ldr	r2, [r7, #24]
 8008c4e:	e841 2300 	strex	r3, r2, [r1]
 8008c52:	613b      	str	r3, [r7, #16]
   return(result);
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1e6      	bne.n	8008c28 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2220      	movs	r2, #32
 8008c5e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008c6c:	bf00      	nop
 8008c6e:	3754      	adds	r7, #84	; 0x54
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2200      	movs	r2, #0
 8008c92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c96:	68f8      	ldr	r0, [r7, #12]
 8008c98:	f7ff fb0e 	bl	80082b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c9c:	bf00      	nop
 8008c9e:	3710      	adds	r7, #16
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b088      	sub	sp, #32
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	e853 3f00 	ldrex	r3, [r3]
 8008cb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cc0:	61fb      	str	r3, [r7, #28]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	61bb      	str	r3, [r7, #24]
 8008ccc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cce:	6979      	ldr	r1, [r7, #20]
 8008cd0:	69ba      	ldr	r2, [r7, #24]
 8008cd2:	e841 2300 	strex	r3, r2, [r1]
 8008cd6:	613b      	str	r3, [r7, #16]
   return(result);
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1e6      	bne.n	8008cac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2220      	movs	r2, #32
 8008ce2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f7ff fada 	bl	80082a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cf0:	bf00      	nop
 8008cf2:	3720      	adds	r7, #32
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008d00:	bf00      	nop
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008d10:	4904      	ldr	r1, [pc, #16]	; (8008d24 <MX_FATFS_Init+0x18>)
 8008d12:	4805      	ldr	r0, [pc, #20]	; (8008d28 <MX_FATFS_Init+0x1c>)
 8008d14:	f000 fd9a 	bl	800984c <FATFS_LinkDriver>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	4b03      	ldr	r3, [pc, #12]	; (8008d2c <MX_FATFS_Init+0x20>)
 8008d1e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008d20:	bf00      	nop
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	20000620 	.word	0x20000620
 8008d28:	2000000c 	.word	0x2000000c
 8008d2c:	2000061c 	.word	0x2000061c

08008d30 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	4603      	mov	r3, r0
 8008d38:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */

    Stat = STA_NOINIT;
 8008d3a:	4b06      	ldr	r3, [pc, #24]	; (8008d54 <USER_initialize+0x24>)
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	701a      	strb	r2, [r3, #0]
    return USER_SPI_initialize(pdrv);
 8008d40:	79fb      	ldrb	r3, [r7, #7]
 8008d42:	4618      	mov	r0, r3
 8008d44:	f000 f9e4 	bl	8009110 <USER_SPI_initialize>
 8008d48:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3708      	adds	r7, #8
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	20000009 	.word	0x20000009

08008d58 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	4603      	mov	r3, r0
 8008d60:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */

    Stat = STA_NOINIT;
 8008d62:	4b06      	ldr	r3, [pc, #24]	; (8008d7c <USER_status+0x24>)
 8008d64:	2201      	movs	r2, #1
 8008d66:	701a      	strb	r2, [r3, #0]
    return USER_SPI_status(pdrv);
 8008d68:	79fb      	ldrb	r3, [r7, #7]
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f000 faba 	bl	80092e4 <USER_SPI_status>
 8008d70:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3708      	adds	r7, #8
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	20000009 	.word	0x20000009

08008d80 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60b9      	str	r1, [r7, #8]
 8008d88:	607a      	str	r2, [r7, #4]
 8008d8a:	603b      	str	r3, [r7, #0]
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */

    return USER_SPI_read(pdrv, buff, sector, count);
 8008d90:	7bf8      	ldrb	r0, [r7, #15]
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	68b9      	ldr	r1, [r7, #8]
 8008d98:	f000 faba 	bl	8009310 <USER_SPI_read>
 8008d9c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b084      	sub	sp, #16
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	607a      	str	r2, [r7, #4]
 8008db0:	603b      	str	r3, [r7, #0]
 8008db2:	4603      	mov	r3, r0
 8008db4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */

    return USER_SPI_write(pdrv, buff, sector, count);
 8008db6:	7bf8      	ldrb	r0, [r7, #15]
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	68b9      	ldr	r1, [r7, #8]
 8008dbe:	f000 fb0d 	bl	80093dc <USER_SPI_write>
 8008dc2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	603a      	str	r2, [r7, #0]
 8008dd6:	71fb      	strb	r3, [r7, #7]
 8008dd8:	460b      	mov	r3, r1
 8008dda:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    DRESULT res = RES_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	73fb      	strb	r3, [r7, #15]
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8008de0:	79b9      	ldrb	r1, [r7, #6]
 8008de2:	79fb      	ldrb	r3, [r7, #7]
 8008de4:	683a      	ldr	r2, [r7, #0]
 8008de6:	4618      	mov	r0, r3
 8008de8:	f000 fb74 	bl	80094d4 <USER_SPI_ioctl>
 8008dec:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
	...

08008df8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8008e00:	f7fa f962 	bl	80030c8 <HAL_GetTick>
 8008e04:	4603      	mov	r3, r0
 8008e06:	4a04      	ldr	r2, [pc, #16]	; (8008e18 <SPI_Timer_On+0x20>)
 8008e08:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8008e0a:	4a04      	ldr	r2, [pc, #16]	; (8008e1c <SPI_Timer_On+0x24>)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6013      	str	r3, [r2, #0]
}
 8008e10:	bf00      	nop
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	20000628 	.word	0x20000628
 8008e1c:	2000062c 	.word	0x2000062c

08008e20 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8008e20:	b580      	push	{r7, lr}
 8008e22:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8008e24:	f7fa f950 	bl	80030c8 <HAL_GetTick>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	4b06      	ldr	r3, [pc, #24]	; (8008e44 <SPI_Timer_Status+0x24>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	1ad2      	subs	r2, r2, r3
 8008e30:	4b05      	ldr	r3, [pc, #20]	; (8008e48 <SPI_Timer_Status+0x28>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	bf34      	ite	cc
 8008e38:	2301      	movcc	r3, #1
 8008e3a:	2300      	movcs	r3, #0
 8008e3c:	b2db      	uxtb	r3, r3
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	20000628 	.word	0x20000628
 8008e48:	2000062c 	.word	0x2000062c

08008e4c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b086      	sub	sp, #24
 8008e50:	af02      	add	r7, sp, #8
 8008e52:	4603      	mov	r3, r0
 8008e54:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8008e56:	f107 020f 	add.w	r2, r7, #15
 8008e5a:	1df9      	adds	r1, r7, #7
 8008e5c:	2332      	movs	r3, #50	; 0x32
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	2301      	movs	r3, #1
 8008e62:	4804      	ldr	r0, [pc, #16]	; (8008e74 <xchg_spi+0x28>)
 8008e64:	f7fc febf 	bl	8005be6 <HAL_SPI_TransmitReceive>
    return rxDat;
 8008e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	200002e4 	.word	0x200002e4

08008e78 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8008e78:	b590      	push	{r4, r7, lr}
 8008e7a:	b085      	sub	sp, #20
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8008e82:	2300      	movs	r3, #0
 8008e84:	60fb      	str	r3, [r7, #12]
 8008e86:	e00a      	b.n	8008e9e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	18d4      	adds	r4, r2, r3
 8008e8e:	20ff      	movs	r0, #255	; 0xff
 8008e90:	f7ff ffdc 	bl	8008e4c <xchg_spi>
 8008e94:	4603      	mov	r3, r0
 8008e96:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	60fb      	str	r3, [r7, #12]
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d3f0      	bcc.n	8008e88 <rcvr_spi_multi+0x10>
	}
}
 8008ea6:	bf00      	nop
 8008ea8:	bf00      	nop
 8008eaa:	3714      	adds	r7, #20
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd90      	pop	{r4, r7, pc}

08008eb0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8008eba:	2300      	movs	r3, #0
 8008ebc:	60fb      	str	r3, [r7, #12]
 8008ebe:	e009      	b.n	8008ed4 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	4413      	add	r3, r2
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7ff ffbf 	bl	8008e4c <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	60fb      	str	r3, [r7, #12]
 8008ed4:	68fa      	ldr	r2, [r7, #12]
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d3f1      	bcc.n	8008ec0 <xmit_spi_multi+0x10>
	}
}
 8008edc:	bf00      	nop
 8008ede:	bf00      	nop
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b086      	sub	sp, #24
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8008eee:	f7fa f8eb 	bl	80030c8 <HAL_GetTick>
 8008ef2:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8008ef8:	20ff      	movs	r0, #255	; 0xff
 8008efa:	f7ff ffa7 	bl	8008e4c <xchg_spi>
 8008efe:	4603      	mov	r3, r0
 8008f00:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8008f02:	7bfb      	ldrb	r3, [r7, #15]
 8008f04:	2bff      	cmp	r3, #255	; 0xff
 8008f06:	d007      	beq.n	8008f18 <wait_ready+0x32>
 8008f08:	f7fa f8de 	bl	80030c8 <HAL_GetTick>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	1ad3      	subs	r3, r2, r3
 8008f12:	693a      	ldr	r2, [r7, #16]
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d8ef      	bhi.n	8008ef8 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8008f18:	7bfb      	ldrb	r3, [r7, #15]
 8008f1a:	2bff      	cmp	r3, #255	; 0xff
 8008f1c:	bf0c      	ite	eq
 8008f1e:	2301      	moveq	r3, #1
 8008f20:	2300      	movne	r3, #0
 8008f22:	b2db      	uxtb	r3, r3
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3718      	adds	r7, #24
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8008f30:	2201      	movs	r2, #1
 8008f32:	2140      	movs	r1, #64	; 0x40
 8008f34:	4803      	ldr	r0, [pc, #12]	; (8008f44 <despiselect+0x18>)
 8008f36:	f7fa fc1b 	bl	8003770 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8008f3a:	20ff      	movs	r0, #255	; 0xff
 8008f3c:	f7ff ff86 	bl	8008e4c <xchg_spi>

}
 8008f40:	bf00      	nop
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	48000400 	.word	0x48000400

08008f48 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	2140      	movs	r1, #64	; 0x40
 8008f50:	4809      	ldr	r0, [pc, #36]	; (8008f78 <spiselect+0x30>)
 8008f52:	f7fa fc0d 	bl	8003770 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8008f56:	20ff      	movs	r0, #255	; 0xff
 8008f58:	f7ff ff78 	bl	8008e4c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8008f5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008f60:	f7ff ffc1 	bl	8008ee6 <wait_ready>
 8008f64:	4603      	mov	r3, r0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d001      	beq.n	8008f6e <spiselect+0x26>
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e002      	b.n	8008f74 <spiselect+0x2c>

	despiselect();
 8008f6e:	f7ff ffdd 	bl	8008f2c <despiselect>
	return 0;	/* Timeout */
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	48000400 	.word	0x48000400

08008f7c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8008f86:	20c8      	movs	r0, #200	; 0xc8
 8008f88:	f7ff ff36 	bl	8008df8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8008f8c:	20ff      	movs	r0, #255	; 0xff
 8008f8e:	f7ff ff5d 	bl	8008e4c <xchg_spi>
 8008f92:	4603      	mov	r3, r0
 8008f94:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8008f96:	7bfb      	ldrb	r3, [r7, #15]
 8008f98:	2bff      	cmp	r3, #255	; 0xff
 8008f9a:	d104      	bne.n	8008fa6 <rcvr_datablock+0x2a>
 8008f9c:	f7ff ff40 	bl	8008e20 <SPI_Timer_Status>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d1f2      	bne.n	8008f8c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8008fa6:	7bfb      	ldrb	r3, [r7, #15]
 8008fa8:	2bfe      	cmp	r3, #254	; 0xfe
 8008faa:	d001      	beq.n	8008fb0 <rcvr_datablock+0x34>
 8008fac:	2300      	movs	r3, #0
 8008fae:	e00a      	b.n	8008fc6 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8008fb0:	6839      	ldr	r1, [r7, #0]
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f7ff ff60 	bl	8008e78 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8008fb8:	20ff      	movs	r0, #255	; 0xff
 8008fba:	f7ff ff47 	bl	8008e4c <xchg_spi>
 8008fbe:	20ff      	movs	r0, #255	; 0xff
 8008fc0:	f7ff ff44 	bl	8008e4c <xchg_spi>

	return 1;						/* Function succeeded */
 8008fc4:	2301      	movs	r3, #1
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3710      	adds	r7, #16
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}

08008fce <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b084      	sub	sp, #16
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8008fda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008fde:	f7ff ff82 	bl	8008ee6 <wait_ready>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d101      	bne.n	8008fec <xmit_datablock+0x1e>
 8008fe8:	2300      	movs	r3, #0
 8008fea:	e01e      	b.n	800902a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8008fec:	78fb      	ldrb	r3, [r7, #3]
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7ff ff2c 	bl	8008e4c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8008ff4:	78fb      	ldrb	r3, [r7, #3]
 8008ff6:	2bfd      	cmp	r3, #253	; 0xfd
 8008ff8:	d016      	beq.n	8009028 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8008ffa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f7ff ff56 	bl	8008eb0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8009004:	20ff      	movs	r0, #255	; 0xff
 8009006:	f7ff ff21 	bl	8008e4c <xchg_spi>
 800900a:	20ff      	movs	r0, #255	; 0xff
 800900c:	f7ff ff1e 	bl	8008e4c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8009010:	20ff      	movs	r0, #255	; 0xff
 8009012:	f7ff ff1b 	bl	8008e4c <xchg_spi>
 8009016:	4603      	mov	r3, r0
 8009018:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800901a:	7bfb      	ldrb	r3, [r7, #15]
 800901c:	f003 031f 	and.w	r3, r3, #31
 8009020:	2b05      	cmp	r3, #5
 8009022:	d001      	beq.n	8009028 <xmit_datablock+0x5a>
 8009024:	2300      	movs	r3, #0
 8009026:	e000      	b.n	800902a <xmit_datablock+0x5c>
	}
	return 1;
 8009028:	2301      	movs	r3, #1
}
 800902a:	4618      	mov	r0, r3
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8009032:	b580      	push	{r7, lr}
 8009034:	b084      	sub	sp, #16
 8009036:	af00      	add	r7, sp, #0
 8009038:	4603      	mov	r3, r0
 800903a:	6039      	str	r1, [r7, #0]
 800903c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800903e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009042:	2b00      	cmp	r3, #0
 8009044:	da0e      	bge.n	8009064 <send_cmd+0x32>
		cmd &= 0x7F;
 8009046:	79fb      	ldrb	r3, [r7, #7]
 8009048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800904c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800904e:	2100      	movs	r1, #0
 8009050:	2037      	movs	r0, #55	; 0x37
 8009052:	f7ff ffee 	bl	8009032 <send_cmd>
 8009056:	4603      	mov	r3, r0
 8009058:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800905a:	7bbb      	ldrb	r3, [r7, #14]
 800905c:	2b01      	cmp	r3, #1
 800905e:	d901      	bls.n	8009064 <send_cmd+0x32>
 8009060:	7bbb      	ldrb	r3, [r7, #14]
 8009062:	e051      	b.n	8009108 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8009064:	79fb      	ldrb	r3, [r7, #7]
 8009066:	2b0c      	cmp	r3, #12
 8009068:	d008      	beq.n	800907c <send_cmd+0x4a>
		despiselect();
 800906a:	f7ff ff5f 	bl	8008f2c <despiselect>
		if (!spiselect()) return 0xFF;
 800906e:	f7ff ff6b 	bl	8008f48 <spiselect>
 8009072:	4603      	mov	r3, r0
 8009074:	2b00      	cmp	r3, #0
 8009076:	d101      	bne.n	800907c <send_cmd+0x4a>
 8009078:	23ff      	movs	r3, #255	; 0xff
 800907a:	e045      	b.n	8009108 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800907c:	79fb      	ldrb	r3, [r7, #7]
 800907e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009082:	b2db      	uxtb	r3, r3
 8009084:	4618      	mov	r0, r3
 8009086:	f7ff fee1 	bl	8008e4c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	0e1b      	lsrs	r3, r3, #24
 800908e:	b2db      	uxtb	r3, r3
 8009090:	4618      	mov	r0, r3
 8009092:	f7ff fedb 	bl	8008e4c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	0c1b      	lsrs	r3, r3, #16
 800909a:	b2db      	uxtb	r3, r3
 800909c:	4618      	mov	r0, r3
 800909e:	f7ff fed5 	bl	8008e4c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	0a1b      	lsrs	r3, r3, #8
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7ff fecf 	bl	8008e4c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7ff feca 	bl	8008e4c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80090b8:	2301      	movs	r3, #1
 80090ba:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80090bc:	79fb      	ldrb	r3, [r7, #7]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d101      	bne.n	80090c6 <send_cmd+0x94>
 80090c2:	2395      	movs	r3, #149	; 0x95
 80090c4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80090c6:	79fb      	ldrb	r3, [r7, #7]
 80090c8:	2b08      	cmp	r3, #8
 80090ca:	d101      	bne.n	80090d0 <send_cmd+0x9e>
 80090cc:	2387      	movs	r3, #135	; 0x87
 80090ce:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80090d0:	7bfb      	ldrb	r3, [r7, #15]
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7ff feba 	bl	8008e4c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80090d8:	79fb      	ldrb	r3, [r7, #7]
 80090da:	2b0c      	cmp	r3, #12
 80090dc:	d102      	bne.n	80090e4 <send_cmd+0xb2>
 80090de:	20ff      	movs	r0, #255	; 0xff
 80090e0:	f7ff feb4 	bl	8008e4c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80090e4:	230a      	movs	r3, #10
 80090e6:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80090e8:	20ff      	movs	r0, #255	; 0xff
 80090ea:	f7ff feaf 	bl	8008e4c <xchg_spi>
 80090ee:	4603      	mov	r3, r0
 80090f0:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80090f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	da05      	bge.n	8009106 <send_cmd+0xd4>
 80090fa:	7bfb      	ldrb	r3, [r7, #15]
 80090fc:	3b01      	subs	r3, #1
 80090fe:	73fb      	strb	r3, [r7, #15]
 8009100:	7bfb      	ldrb	r3, [r7, #15]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d1f0      	bne.n	80090e8 <send_cmd+0xb6>

	return res;							/* Return received response */
 8009106:	7bbb      	ldrb	r3, [r7, #14]
}
 8009108:	4618      	mov	r0, r3
 800910a:	3710      	adds	r7, #16
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009110:	b590      	push	{r4, r7, lr}
 8009112:	b085      	sub	sp, #20
 8009114:	af00      	add	r7, sp, #0
 8009116:	4603      	mov	r3, r0
 8009118:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800911a:	79fb      	ldrb	r3, [r7, #7]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d001      	beq.n	8009124 <USER_SPI_initialize+0x14>
 8009120:	2301      	movs	r3, #1
 8009122:	e0d4      	b.n	80092ce <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8009124:	4b6c      	ldr	r3, [pc, #432]	; (80092d8 <USER_SPI_initialize+0x1c8>)
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	b2db      	uxtb	r3, r3
 800912a:	f003 0302 	and.w	r3, r3, #2
 800912e:	2b00      	cmp	r3, #0
 8009130:	d003      	beq.n	800913a <USER_SPI_initialize+0x2a>
 8009132:	4b69      	ldr	r3, [pc, #420]	; (80092d8 <USER_SPI_initialize+0x1c8>)
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	b2db      	uxtb	r3, r3
 8009138:	e0c9      	b.n	80092ce <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 800913a:	4b68      	ldr	r3, [pc, #416]	; (80092dc <USER_SPI_initialize+0x1cc>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	4b66      	ldr	r3, [pc, #408]	; (80092dc <USER_SPI_initialize+0x1cc>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8009148:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800914a:	230a      	movs	r3, #10
 800914c:	73fb      	strb	r3, [r7, #15]
 800914e:	e005      	b.n	800915c <USER_SPI_initialize+0x4c>
 8009150:	20ff      	movs	r0, #255	; 0xff
 8009152:	f7ff fe7b 	bl	8008e4c <xchg_spi>
 8009156:	7bfb      	ldrb	r3, [r7, #15]
 8009158:	3b01      	subs	r3, #1
 800915a:	73fb      	strb	r3, [r7, #15]
 800915c:	7bfb      	ldrb	r3, [r7, #15]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d1f6      	bne.n	8009150 <USER_SPI_initialize+0x40>

	ty = 0;
 8009162:	2300      	movs	r3, #0
 8009164:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8009166:	2100      	movs	r1, #0
 8009168:	2000      	movs	r0, #0
 800916a:	f7ff ff62 	bl	8009032 <send_cmd>
 800916e:	4603      	mov	r3, r0
 8009170:	2b01      	cmp	r3, #1
 8009172:	f040 808b 	bne.w	800928c <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8009176:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800917a:	f7ff fe3d 	bl	8008df8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800917e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009182:	2008      	movs	r0, #8
 8009184:	f7ff ff55 	bl	8009032 <send_cmd>
 8009188:	4603      	mov	r3, r0
 800918a:	2b01      	cmp	r3, #1
 800918c:	d151      	bne.n	8009232 <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800918e:	2300      	movs	r3, #0
 8009190:	73fb      	strb	r3, [r7, #15]
 8009192:	e00d      	b.n	80091b0 <USER_SPI_initialize+0xa0>
 8009194:	7bfc      	ldrb	r4, [r7, #15]
 8009196:	20ff      	movs	r0, #255	; 0xff
 8009198:	f7ff fe58 	bl	8008e4c <xchg_spi>
 800919c:	4603      	mov	r3, r0
 800919e:	461a      	mov	r2, r3
 80091a0:	f104 0310 	add.w	r3, r4, #16
 80091a4:	443b      	add	r3, r7
 80091a6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80091aa:	7bfb      	ldrb	r3, [r7, #15]
 80091ac:	3301      	adds	r3, #1
 80091ae:	73fb      	strb	r3, [r7, #15]
 80091b0:	7bfb      	ldrb	r3, [r7, #15]
 80091b2:	2b03      	cmp	r3, #3
 80091b4:	d9ee      	bls.n	8009194 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80091b6:	7abb      	ldrb	r3, [r7, #10]
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d167      	bne.n	800928c <USER_SPI_initialize+0x17c>
 80091bc:	7afb      	ldrb	r3, [r7, #11]
 80091be:	2baa      	cmp	r3, #170	; 0xaa
 80091c0:	d164      	bne.n	800928c <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80091c2:	bf00      	nop
 80091c4:	f7ff fe2c 	bl	8008e20 <SPI_Timer_Status>
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d007      	beq.n	80091de <USER_SPI_initialize+0xce>
 80091ce:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80091d2:	20a9      	movs	r0, #169	; 0xa9
 80091d4:	f7ff ff2d 	bl	8009032 <send_cmd>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d1f2      	bne.n	80091c4 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80091de:	f7ff fe1f 	bl	8008e20 <SPI_Timer_Status>
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d051      	beq.n	800928c <USER_SPI_initialize+0x17c>
 80091e8:	2100      	movs	r1, #0
 80091ea:	203a      	movs	r0, #58	; 0x3a
 80091ec:	f7ff ff21 	bl	8009032 <send_cmd>
 80091f0:	4603      	mov	r3, r0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d14a      	bne.n	800928c <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80091f6:	2300      	movs	r3, #0
 80091f8:	73fb      	strb	r3, [r7, #15]
 80091fa:	e00d      	b.n	8009218 <USER_SPI_initialize+0x108>
 80091fc:	7bfc      	ldrb	r4, [r7, #15]
 80091fe:	20ff      	movs	r0, #255	; 0xff
 8009200:	f7ff fe24 	bl	8008e4c <xchg_spi>
 8009204:	4603      	mov	r3, r0
 8009206:	461a      	mov	r2, r3
 8009208:	f104 0310 	add.w	r3, r4, #16
 800920c:	443b      	add	r3, r7
 800920e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8009212:	7bfb      	ldrb	r3, [r7, #15]
 8009214:	3301      	adds	r3, #1
 8009216:	73fb      	strb	r3, [r7, #15]
 8009218:	7bfb      	ldrb	r3, [r7, #15]
 800921a:	2b03      	cmp	r3, #3
 800921c:	d9ee      	bls.n	80091fc <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800921e:	7a3b      	ldrb	r3, [r7, #8]
 8009220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009224:	2b00      	cmp	r3, #0
 8009226:	d001      	beq.n	800922c <USER_SPI_initialize+0x11c>
 8009228:	230c      	movs	r3, #12
 800922a:	e000      	b.n	800922e <USER_SPI_initialize+0x11e>
 800922c:	2304      	movs	r3, #4
 800922e:	737b      	strb	r3, [r7, #13]
 8009230:	e02c      	b.n	800928c <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8009232:	2100      	movs	r1, #0
 8009234:	20a9      	movs	r0, #169	; 0xa9
 8009236:	f7ff fefc 	bl	8009032 <send_cmd>
 800923a:	4603      	mov	r3, r0
 800923c:	2b01      	cmp	r3, #1
 800923e:	d804      	bhi.n	800924a <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8009240:	2302      	movs	r3, #2
 8009242:	737b      	strb	r3, [r7, #13]
 8009244:	23a9      	movs	r3, #169	; 0xa9
 8009246:	73bb      	strb	r3, [r7, #14]
 8009248:	e003      	b.n	8009252 <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800924a:	2301      	movs	r3, #1
 800924c:	737b      	strb	r3, [r7, #13]
 800924e:	2301      	movs	r3, #1
 8009250:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8009252:	bf00      	nop
 8009254:	f7ff fde4 	bl	8008e20 <SPI_Timer_Status>
 8009258:	4603      	mov	r3, r0
 800925a:	2b00      	cmp	r3, #0
 800925c:	d007      	beq.n	800926e <USER_SPI_initialize+0x15e>
 800925e:	7bbb      	ldrb	r3, [r7, #14]
 8009260:	2100      	movs	r1, #0
 8009262:	4618      	mov	r0, r3
 8009264:	f7ff fee5 	bl	8009032 <send_cmd>
 8009268:	4603      	mov	r3, r0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d1f2      	bne.n	8009254 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800926e:	f7ff fdd7 	bl	8008e20 <SPI_Timer_Status>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d007      	beq.n	8009288 <USER_SPI_initialize+0x178>
 8009278:	f44f 7100 	mov.w	r1, #512	; 0x200
 800927c:	2010      	movs	r0, #16
 800927e:	f7ff fed8 	bl	8009032 <send_cmd>
 8009282:	4603      	mov	r3, r0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d001      	beq.n	800928c <USER_SPI_initialize+0x17c>
				ty = 0;
 8009288:	2300      	movs	r3, #0
 800928a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800928c:	4a14      	ldr	r2, [pc, #80]	; (80092e0 <USER_SPI_initialize+0x1d0>)
 800928e:	7b7b      	ldrb	r3, [r7, #13]
 8009290:	7013      	strb	r3, [r2, #0]
	despiselect();
 8009292:	f7ff fe4b 	bl	8008f2c <despiselect>

	if (ty) {			/* OK */
 8009296:	7b7b      	ldrb	r3, [r7, #13]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d012      	beq.n	80092c2 <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 800929c:	4b0f      	ldr	r3, [pc, #60]	; (80092dc <USER_SPI_initialize+0x1cc>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80092a6:	4b0d      	ldr	r3, [pc, #52]	; (80092dc <USER_SPI_initialize+0x1cc>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f042 0218 	orr.w	r2, r2, #24
 80092ae:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80092b0:	4b09      	ldr	r3, [pc, #36]	; (80092d8 <USER_SPI_initialize+0x1c8>)
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	f023 0301 	bic.w	r3, r3, #1
 80092ba:	b2da      	uxtb	r2, r3
 80092bc:	4b06      	ldr	r3, [pc, #24]	; (80092d8 <USER_SPI_initialize+0x1c8>)
 80092be:	701a      	strb	r2, [r3, #0]
 80092c0:	e002      	b.n	80092c8 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80092c2:	4b05      	ldr	r3, [pc, #20]	; (80092d8 <USER_SPI_initialize+0x1c8>)
 80092c4:	2201      	movs	r2, #1
 80092c6:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80092c8:	4b03      	ldr	r3, [pc, #12]	; (80092d8 <USER_SPI_initialize+0x1c8>)
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	b2db      	uxtb	r3, r3
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3714      	adds	r7, #20
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd90      	pop	{r4, r7, pc}
 80092d6:	bf00      	nop
 80092d8:	20000020 	.word	0x20000020
 80092dc:	200002e4 	.word	0x200002e4
 80092e0:	20000624 	.word	0x20000624

080092e4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	4603      	mov	r3, r0
 80092ec:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80092ee:	79fb      	ldrb	r3, [r7, #7]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d001      	beq.n	80092f8 <USER_SPI_status+0x14>
 80092f4:	2301      	movs	r3, #1
 80092f6:	e002      	b.n	80092fe <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80092f8:	4b04      	ldr	r3, [pc, #16]	; (800930c <USER_SPI_status+0x28>)
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	b2db      	uxtb	r3, r3
}
 80092fe:	4618      	mov	r0, r3
 8009300:	370c      	adds	r7, #12
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr
 800930a:	bf00      	nop
 800930c:	20000020 	.word	0x20000020

08009310 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	60b9      	str	r1, [r7, #8]
 8009318:	607a      	str	r2, [r7, #4]
 800931a:	603b      	str	r3, [r7, #0]
 800931c:	4603      	mov	r3, r0
 800931e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009320:	7bfb      	ldrb	r3, [r7, #15]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d102      	bne.n	800932c <USER_SPI_read+0x1c>
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d101      	bne.n	8009330 <USER_SPI_read+0x20>
 800932c:	2304      	movs	r3, #4
 800932e:	e04d      	b.n	80093cc <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009330:	4b28      	ldr	r3, [pc, #160]	; (80093d4 <USER_SPI_read+0xc4>)
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	b2db      	uxtb	r3, r3
 8009336:	f003 0301 	and.w	r3, r3, #1
 800933a:	2b00      	cmp	r3, #0
 800933c:	d001      	beq.n	8009342 <USER_SPI_read+0x32>
 800933e:	2303      	movs	r3, #3
 8009340:	e044      	b.n	80093cc <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8009342:	4b25      	ldr	r3, [pc, #148]	; (80093d8 <USER_SPI_read+0xc8>)
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	f003 0308 	and.w	r3, r3, #8
 800934a:	2b00      	cmp	r3, #0
 800934c:	d102      	bne.n	8009354 <USER_SPI_read+0x44>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	025b      	lsls	r3, r3, #9
 8009352:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	2b01      	cmp	r3, #1
 8009358:	d111      	bne.n	800937e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800935a:	6879      	ldr	r1, [r7, #4]
 800935c:	2011      	movs	r0, #17
 800935e:	f7ff fe68 	bl	8009032 <send_cmd>
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d129      	bne.n	80093bc <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8009368:	f44f 7100 	mov.w	r1, #512	; 0x200
 800936c:	68b8      	ldr	r0, [r7, #8]
 800936e:	f7ff fe05 	bl	8008f7c <rcvr_datablock>
 8009372:	4603      	mov	r3, r0
 8009374:	2b00      	cmp	r3, #0
 8009376:	d021      	beq.n	80093bc <USER_SPI_read+0xac>
			count = 0;
 8009378:	2300      	movs	r3, #0
 800937a:	603b      	str	r3, [r7, #0]
 800937c:	e01e      	b.n	80093bc <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800937e:	6879      	ldr	r1, [r7, #4]
 8009380:	2012      	movs	r0, #18
 8009382:	f7ff fe56 	bl	8009032 <send_cmd>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d117      	bne.n	80093bc <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800938c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009390:	68b8      	ldr	r0, [r7, #8]
 8009392:	f7ff fdf3 	bl	8008f7c <rcvr_datablock>
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d00a      	beq.n	80093b2 <USER_SPI_read+0xa2>
				buff += 512;
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80093a2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	3b01      	subs	r3, #1
 80093a8:	603b      	str	r3, [r7, #0]
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d1ed      	bne.n	800938c <USER_SPI_read+0x7c>
 80093b0:	e000      	b.n	80093b4 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80093b2:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80093b4:	2100      	movs	r1, #0
 80093b6:	200c      	movs	r0, #12
 80093b8:	f7ff fe3b 	bl	8009032 <send_cmd>
		}
	}
	despiselect();
 80093bc:	f7ff fdb6 	bl	8008f2c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	bf14      	ite	ne
 80093c6:	2301      	movne	r3, #1
 80093c8:	2300      	moveq	r3, #0
 80093ca:	b2db      	uxtb	r3, r3
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3710      	adds	r7, #16
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}
 80093d4:	20000020 	.word	0x20000020
 80093d8:	20000624 	.word	0x20000624

080093dc <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60b9      	str	r1, [r7, #8]
 80093e4:	607a      	str	r2, [r7, #4]
 80093e6:	603b      	str	r3, [r7, #0]
 80093e8:	4603      	mov	r3, r0
 80093ea:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80093ec:	7bfb      	ldrb	r3, [r7, #15]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d102      	bne.n	80093f8 <USER_SPI_write+0x1c>
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d101      	bne.n	80093fc <USER_SPI_write+0x20>
 80093f8:	2304      	movs	r3, #4
 80093fa:	e063      	b.n	80094c4 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80093fc:	4b33      	ldr	r3, [pc, #204]	; (80094cc <USER_SPI_write+0xf0>)
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	b2db      	uxtb	r3, r3
 8009402:	f003 0301 	and.w	r3, r3, #1
 8009406:	2b00      	cmp	r3, #0
 8009408:	d001      	beq.n	800940e <USER_SPI_write+0x32>
 800940a:	2303      	movs	r3, #3
 800940c:	e05a      	b.n	80094c4 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800940e:	4b2f      	ldr	r3, [pc, #188]	; (80094cc <USER_SPI_write+0xf0>)
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	b2db      	uxtb	r3, r3
 8009414:	f003 0304 	and.w	r3, r3, #4
 8009418:	2b00      	cmp	r3, #0
 800941a:	d001      	beq.n	8009420 <USER_SPI_write+0x44>
 800941c:	2302      	movs	r3, #2
 800941e:	e051      	b.n	80094c4 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8009420:	4b2b      	ldr	r3, [pc, #172]	; (80094d0 <USER_SPI_write+0xf4>)
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	f003 0308 	and.w	r3, r3, #8
 8009428:	2b00      	cmp	r3, #0
 800942a:	d102      	bne.n	8009432 <USER_SPI_write+0x56>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	025b      	lsls	r3, r3, #9
 8009430:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	2b01      	cmp	r3, #1
 8009436:	d110      	bne.n	800945a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8009438:	6879      	ldr	r1, [r7, #4]
 800943a:	2018      	movs	r0, #24
 800943c:	f7ff fdf9 	bl	8009032 <send_cmd>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d136      	bne.n	80094b4 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8009446:	21fe      	movs	r1, #254	; 0xfe
 8009448:	68b8      	ldr	r0, [r7, #8]
 800944a:	f7ff fdc0 	bl	8008fce <xmit_datablock>
 800944e:	4603      	mov	r3, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d02f      	beq.n	80094b4 <USER_SPI_write+0xd8>
			count = 0;
 8009454:	2300      	movs	r3, #0
 8009456:	603b      	str	r3, [r7, #0]
 8009458:	e02c      	b.n	80094b4 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800945a:	4b1d      	ldr	r3, [pc, #116]	; (80094d0 <USER_SPI_write+0xf4>)
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	f003 0306 	and.w	r3, r3, #6
 8009462:	2b00      	cmp	r3, #0
 8009464:	d003      	beq.n	800946e <USER_SPI_write+0x92>
 8009466:	6839      	ldr	r1, [r7, #0]
 8009468:	2097      	movs	r0, #151	; 0x97
 800946a:	f7ff fde2 	bl	8009032 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800946e:	6879      	ldr	r1, [r7, #4]
 8009470:	2019      	movs	r0, #25
 8009472:	f7ff fdde 	bl	8009032 <send_cmd>
 8009476:	4603      	mov	r3, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d11b      	bne.n	80094b4 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800947c:	21fc      	movs	r1, #252	; 0xfc
 800947e:	68b8      	ldr	r0, [r7, #8]
 8009480:	f7ff fda5 	bl	8008fce <xmit_datablock>
 8009484:	4603      	mov	r3, r0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00a      	beq.n	80094a0 <USER_SPI_write+0xc4>
				buff += 512;
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009490:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	3b01      	subs	r3, #1
 8009496:	603b      	str	r3, [r7, #0]
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d1ee      	bne.n	800947c <USER_SPI_write+0xa0>
 800949e:	e000      	b.n	80094a2 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80094a0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80094a2:	21fd      	movs	r1, #253	; 0xfd
 80094a4:	2000      	movs	r0, #0
 80094a6:	f7ff fd92 	bl	8008fce <xmit_datablock>
 80094aa:	4603      	mov	r3, r0
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d101      	bne.n	80094b4 <USER_SPI_write+0xd8>
 80094b0:	2301      	movs	r3, #1
 80094b2:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80094b4:	f7ff fd3a 	bl	8008f2c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	bf14      	ite	ne
 80094be:	2301      	movne	r3, #1
 80094c0:	2300      	moveq	r3, #0
 80094c2:	b2db      	uxtb	r3, r3
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	20000020 	.word	0x20000020
 80094d0:	20000624 	.word	0x20000624

080094d4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b08c      	sub	sp, #48	; 0x30
 80094d8:	af00      	add	r7, sp, #0
 80094da:	4603      	mov	r3, r0
 80094dc:	603a      	str	r2, [r7, #0]
 80094de:	71fb      	strb	r3, [r7, #7]
 80094e0:	460b      	mov	r3, r1
 80094e2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80094e4:	79fb      	ldrb	r3, [r7, #7]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d001      	beq.n	80094ee <USER_SPI_ioctl+0x1a>
 80094ea:	2304      	movs	r3, #4
 80094ec:	e15a      	b.n	80097a4 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80094ee:	4baf      	ldr	r3, [pc, #700]	; (80097ac <USER_SPI_ioctl+0x2d8>)
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	f003 0301 	and.w	r3, r3, #1
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d001      	beq.n	8009500 <USER_SPI_ioctl+0x2c>
 80094fc:	2303      	movs	r3, #3
 80094fe:	e151      	b.n	80097a4 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8009500:	2301      	movs	r3, #1
 8009502:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8009506:	79bb      	ldrb	r3, [r7, #6]
 8009508:	2b04      	cmp	r3, #4
 800950a:	f200 8136 	bhi.w	800977a <USER_SPI_ioctl+0x2a6>
 800950e:	a201      	add	r2, pc, #4	; (adr r2, 8009514 <USER_SPI_ioctl+0x40>)
 8009510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009514:	08009529 	.word	0x08009529
 8009518:	0800953d 	.word	0x0800953d
 800951c:	0800977b 	.word	0x0800977b
 8009520:	080095e9 	.word	0x080095e9
 8009524:	080096df 	.word	0x080096df
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8009528:	f7ff fd0e 	bl	8008f48 <spiselect>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	f000 8127 	beq.w	8009782 <USER_SPI_ioctl+0x2ae>
 8009534:	2300      	movs	r3, #0
 8009536:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800953a:	e122      	b.n	8009782 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800953c:	2100      	movs	r1, #0
 800953e:	2009      	movs	r0, #9
 8009540:	f7ff fd77 	bl	8009032 <send_cmd>
 8009544:	4603      	mov	r3, r0
 8009546:	2b00      	cmp	r3, #0
 8009548:	f040 811d 	bne.w	8009786 <USER_SPI_ioctl+0x2b2>
 800954c:	f107 030c 	add.w	r3, r7, #12
 8009550:	2110      	movs	r1, #16
 8009552:	4618      	mov	r0, r3
 8009554:	f7ff fd12 	bl	8008f7c <rcvr_datablock>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	f000 8113 	beq.w	8009786 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8009560:	7b3b      	ldrb	r3, [r7, #12]
 8009562:	099b      	lsrs	r3, r3, #6
 8009564:	b2db      	uxtb	r3, r3
 8009566:	2b01      	cmp	r3, #1
 8009568:	d111      	bne.n	800958e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800956a:	7d7b      	ldrb	r3, [r7, #21]
 800956c:	461a      	mov	r2, r3
 800956e:	7d3b      	ldrb	r3, [r7, #20]
 8009570:	021b      	lsls	r3, r3, #8
 8009572:	4413      	add	r3, r2
 8009574:	461a      	mov	r2, r3
 8009576:	7cfb      	ldrb	r3, [r7, #19]
 8009578:	041b      	lsls	r3, r3, #16
 800957a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800957e:	4413      	add	r3, r2
 8009580:	3301      	adds	r3, #1
 8009582:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8009584:	69fb      	ldr	r3, [r7, #28]
 8009586:	029a      	lsls	r2, r3, #10
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	601a      	str	r2, [r3, #0]
 800958c:	e028      	b.n	80095e0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800958e:	7c7b      	ldrb	r3, [r7, #17]
 8009590:	f003 030f 	and.w	r3, r3, #15
 8009594:	b2da      	uxtb	r2, r3
 8009596:	7dbb      	ldrb	r3, [r7, #22]
 8009598:	09db      	lsrs	r3, r3, #7
 800959a:	b2db      	uxtb	r3, r3
 800959c:	4413      	add	r3, r2
 800959e:	b2da      	uxtb	r2, r3
 80095a0:	7d7b      	ldrb	r3, [r7, #21]
 80095a2:	005b      	lsls	r3, r3, #1
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	f003 0306 	and.w	r3, r3, #6
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	4413      	add	r3, r2
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	3302      	adds	r3, #2
 80095b2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80095b6:	7d3b      	ldrb	r3, [r7, #20]
 80095b8:	099b      	lsrs	r3, r3, #6
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	461a      	mov	r2, r3
 80095be:	7cfb      	ldrb	r3, [r7, #19]
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	441a      	add	r2, r3
 80095c4:	7cbb      	ldrb	r3, [r7, #18]
 80095c6:	029b      	lsls	r3, r3, #10
 80095c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80095cc:	4413      	add	r3, r2
 80095ce:	3301      	adds	r3, #1
 80095d0:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80095d2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80095d6:	3b09      	subs	r3, #9
 80095d8:	69fa      	ldr	r2, [r7, #28]
 80095da:	409a      	lsls	r2, r3
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80095e0:	2300      	movs	r3, #0
 80095e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80095e6:	e0ce      	b.n	8009786 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80095e8:	4b71      	ldr	r3, [pc, #452]	; (80097b0 <USER_SPI_ioctl+0x2dc>)
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	f003 0304 	and.w	r3, r3, #4
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d031      	beq.n	8009658 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80095f4:	2100      	movs	r1, #0
 80095f6:	208d      	movs	r0, #141	; 0x8d
 80095f8:	f7ff fd1b 	bl	8009032 <send_cmd>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	f040 80c3 	bne.w	800978a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8009604:	20ff      	movs	r0, #255	; 0xff
 8009606:	f7ff fc21 	bl	8008e4c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800960a:	f107 030c 	add.w	r3, r7, #12
 800960e:	2110      	movs	r1, #16
 8009610:	4618      	mov	r0, r3
 8009612:	f7ff fcb3 	bl	8008f7c <rcvr_datablock>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	f000 80b6 	beq.w	800978a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800961e:	2330      	movs	r3, #48	; 0x30
 8009620:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009624:	e007      	b.n	8009636 <USER_SPI_ioctl+0x162>
 8009626:	20ff      	movs	r0, #255	; 0xff
 8009628:	f7ff fc10 	bl	8008e4c <xchg_spi>
 800962c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009630:	3b01      	subs	r3, #1
 8009632:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009636:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800963a:	2b00      	cmp	r3, #0
 800963c:	d1f3      	bne.n	8009626 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800963e:	7dbb      	ldrb	r3, [r7, #22]
 8009640:	091b      	lsrs	r3, r3, #4
 8009642:	b2db      	uxtb	r3, r3
 8009644:	461a      	mov	r2, r3
 8009646:	2310      	movs	r3, #16
 8009648:	fa03 f202 	lsl.w	r2, r3, r2
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8009650:	2300      	movs	r3, #0
 8009652:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8009656:	e098      	b.n	800978a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8009658:	2100      	movs	r1, #0
 800965a:	2009      	movs	r0, #9
 800965c:	f7ff fce9 	bl	8009032 <send_cmd>
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	f040 8091 	bne.w	800978a <USER_SPI_ioctl+0x2b6>
 8009668:	f107 030c 	add.w	r3, r7, #12
 800966c:	2110      	movs	r1, #16
 800966e:	4618      	mov	r0, r3
 8009670:	f7ff fc84 	bl	8008f7c <rcvr_datablock>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	f000 8087 	beq.w	800978a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800967c:	4b4c      	ldr	r3, [pc, #304]	; (80097b0 <USER_SPI_ioctl+0x2dc>)
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	f003 0302 	and.w	r3, r3, #2
 8009684:	2b00      	cmp	r3, #0
 8009686:	d012      	beq.n	80096ae <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8009688:	7dbb      	ldrb	r3, [r7, #22]
 800968a:	005b      	lsls	r3, r3, #1
 800968c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8009690:	7dfa      	ldrb	r2, [r7, #23]
 8009692:	09d2      	lsrs	r2, r2, #7
 8009694:	b2d2      	uxtb	r2, r2
 8009696:	4413      	add	r3, r2
 8009698:	1c5a      	adds	r2, r3, #1
 800969a:	7e7b      	ldrb	r3, [r7, #25]
 800969c:	099b      	lsrs	r3, r3, #6
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	3b01      	subs	r3, #1
 80096a2:	fa02 f303 	lsl.w	r3, r2, r3
 80096a6:	461a      	mov	r2, r3
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	601a      	str	r2, [r3, #0]
 80096ac:	e013      	b.n	80096d6 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80096ae:	7dbb      	ldrb	r3, [r7, #22]
 80096b0:	109b      	asrs	r3, r3, #2
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	f003 031f 	and.w	r3, r3, #31
 80096b8:	3301      	adds	r3, #1
 80096ba:	7dfa      	ldrb	r2, [r7, #23]
 80096bc:	00d2      	lsls	r2, r2, #3
 80096be:	f002 0218 	and.w	r2, r2, #24
 80096c2:	7df9      	ldrb	r1, [r7, #23]
 80096c4:	0949      	lsrs	r1, r1, #5
 80096c6:	b2c9      	uxtb	r1, r1
 80096c8:	440a      	add	r2, r1
 80096ca:	3201      	adds	r2, #1
 80096cc:	fb02 f303 	mul.w	r3, r2, r3
 80096d0:	461a      	mov	r2, r3
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80096d6:	2300      	movs	r3, #0
 80096d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80096dc:	e055      	b.n	800978a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80096de:	4b34      	ldr	r3, [pc, #208]	; (80097b0 <USER_SPI_ioctl+0x2dc>)
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	f003 0306 	and.w	r3, r3, #6
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d051      	beq.n	800978e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80096ea:	f107 020c 	add.w	r2, r7, #12
 80096ee:	79fb      	ldrb	r3, [r7, #7]
 80096f0:	210b      	movs	r1, #11
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7ff feee 	bl	80094d4 <USER_SPI_ioctl>
 80096f8:	4603      	mov	r3, r0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d149      	bne.n	8009792 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80096fe:	7b3b      	ldrb	r3, [r7, #12]
 8009700:	099b      	lsrs	r3, r3, #6
 8009702:	b2db      	uxtb	r3, r3
 8009704:	2b00      	cmp	r3, #0
 8009706:	d104      	bne.n	8009712 <USER_SPI_ioctl+0x23e>
 8009708:	7dbb      	ldrb	r3, [r7, #22]
 800970a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800970e:	2b00      	cmp	r3, #0
 8009710:	d041      	beq.n	8009796 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	623b      	str	r3, [r7, #32]
 8009716:	6a3b      	ldr	r3, [r7, #32]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	62bb      	str	r3, [r7, #40]	; 0x28
 800971c:	6a3b      	ldr	r3, [r7, #32]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8009722:	4b23      	ldr	r3, [pc, #140]	; (80097b0 <USER_SPI_ioctl+0x2dc>)
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	f003 0308 	and.w	r3, r3, #8
 800972a:	2b00      	cmp	r3, #0
 800972c:	d105      	bne.n	800973a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800972e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009730:	025b      	lsls	r3, r3, #9
 8009732:	62bb      	str	r3, [r7, #40]	; 0x28
 8009734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009736:	025b      	lsls	r3, r3, #9
 8009738:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800973a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800973c:	2020      	movs	r0, #32
 800973e:	f7ff fc78 	bl	8009032 <send_cmd>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d128      	bne.n	800979a <USER_SPI_ioctl+0x2c6>
 8009748:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800974a:	2021      	movs	r0, #33	; 0x21
 800974c:	f7ff fc71 	bl	8009032 <send_cmd>
 8009750:	4603      	mov	r3, r0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d121      	bne.n	800979a <USER_SPI_ioctl+0x2c6>
 8009756:	2100      	movs	r1, #0
 8009758:	2026      	movs	r0, #38	; 0x26
 800975a:	f7ff fc6a 	bl	8009032 <send_cmd>
 800975e:	4603      	mov	r3, r0
 8009760:	2b00      	cmp	r3, #0
 8009762:	d11a      	bne.n	800979a <USER_SPI_ioctl+0x2c6>
 8009764:	f247 5030 	movw	r0, #30000	; 0x7530
 8009768:	f7ff fbbd 	bl	8008ee6 <wait_ready>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d013      	beq.n	800979a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8009772:	2300      	movs	r3, #0
 8009774:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8009778:	e00f      	b.n	800979a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800977a:	2304      	movs	r3, #4
 800977c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009780:	e00c      	b.n	800979c <USER_SPI_ioctl+0x2c8>
		break;
 8009782:	bf00      	nop
 8009784:	e00a      	b.n	800979c <USER_SPI_ioctl+0x2c8>
		break;
 8009786:	bf00      	nop
 8009788:	e008      	b.n	800979c <USER_SPI_ioctl+0x2c8>
		break;
 800978a:	bf00      	nop
 800978c:	e006      	b.n	800979c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800978e:	bf00      	nop
 8009790:	e004      	b.n	800979c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009792:	bf00      	nop
 8009794:	e002      	b.n	800979c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009796:	bf00      	nop
 8009798:	e000      	b.n	800979c <USER_SPI_ioctl+0x2c8>
		break;
 800979a:	bf00      	nop
	}

	despiselect();
 800979c:	f7ff fbc6 	bl	8008f2c <despiselect>

	return res;
 80097a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3730      	adds	r7, #48	; 0x30
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	20000020 	.word	0x20000020
 80097b0:	20000624 	.word	0x20000624

080097b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b087      	sub	sp, #28
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	4613      	mov	r3, r2
 80097c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80097c2:	2301      	movs	r3, #1
 80097c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80097c6:	2300      	movs	r3, #0
 80097c8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80097ca:	4b1f      	ldr	r3, [pc, #124]	; (8009848 <FATFS_LinkDriverEx+0x94>)
 80097cc:	7a5b      	ldrb	r3, [r3, #9]
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d131      	bne.n	8009838 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80097d4:	4b1c      	ldr	r3, [pc, #112]	; (8009848 <FATFS_LinkDriverEx+0x94>)
 80097d6:	7a5b      	ldrb	r3, [r3, #9]
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	461a      	mov	r2, r3
 80097dc:	4b1a      	ldr	r3, [pc, #104]	; (8009848 <FATFS_LinkDriverEx+0x94>)
 80097de:	2100      	movs	r1, #0
 80097e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80097e2:	4b19      	ldr	r3, [pc, #100]	; (8009848 <FATFS_LinkDriverEx+0x94>)
 80097e4:	7a5b      	ldrb	r3, [r3, #9]
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	4a17      	ldr	r2, [pc, #92]	; (8009848 <FATFS_LinkDriverEx+0x94>)
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	4413      	add	r3, r2
 80097ee:	68fa      	ldr	r2, [r7, #12]
 80097f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80097f2:	4b15      	ldr	r3, [pc, #84]	; (8009848 <FATFS_LinkDriverEx+0x94>)
 80097f4:	7a5b      	ldrb	r3, [r3, #9]
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	461a      	mov	r2, r3
 80097fa:	4b13      	ldr	r3, [pc, #76]	; (8009848 <FATFS_LinkDriverEx+0x94>)
 80097fc:	4413      	add	r3, r2
 80097fe:	79fa      	ldrb	r2, [r7, #7]
 8009800:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009802:	4b11      	ldr	r3, [pc, #68]	; (8009848 <FATFS_LinkDriverEx+0x94>)
 8009804:	7a5b      	ldrb	r3, [r3, #9]
 8009806:	b2db      	uxtb	r3, r3
 8009808:	1c5a      	adds	r2, r3, #1
 800980a:	b2d1      	uxtb	r1, r2
 800980c:	4a0e      	ldr	r2, [pc, #56]	; (8009848 <FATFS_LinkDriverEx+0x94>)
 800980e:	7251      	strb	r1, [r2, #9]
 8009810:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009812:	7dbb      	ldrb	r3, [r7, #22]
 8009814:	3330      	adds	r3, #48	; 0x30
 8009816:	b2da      	uxtb	r2, r3
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	3301      	adds	r3, #1
 8009820:	223a      	movs	r2, #58	; 0x3a
 8009822:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	3302      	adds	r3, #2
 8009828:	222f      	movs	r2, #47	; 0x2f
 800982a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	3303      	adds	r3, #3
 8009830:	2200      	movs	r2, #0
 8009832:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009834:	2300      	movs	r3, #0
 8009836:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009838:	7dfb      	ldrb	r3, [r7, #23]
}
 800983a:	4618      	mov	r0, r3
 800983c:	371c      	adds	r7, #28
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	20000630 	.word	0x20000630

0800984c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009856:	2200      	movs	r2, #0
 8009858:	6839      	ldr	r1, [r7, #0]
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f7ff ffaa 	bl	80097b4 <FATFS_LinkDriverEx>
 8009860:	4603      	mov	r3, r0
}
 8009862:	4618      	mov	r0, r3
 8009864:	3708      	adds	r7, #8
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
	...

0800986c <__NVIC_SetPriority>:
{
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
 8009872:	4603      	mov	r3, r0
 8009874:	6039      	str	r1, [r7, #0]
 8009876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800987c:	2b00      	cmp	r3, #0
 800987e:	db0a      	blt.n	8009896 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	b2da      	uxtb	r2, r3
 8009884:	490c      	ldr	r1, [pc, #48]	; (80098b8 <__NVIC_SetPriority+0x4c>)
 8009886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800988a:	0112      	lsls	r2, r2, #4
 800988c:	b2d2      	uxtb	r2, r2
 800988e:	440b      	add	r3, r1
 8009890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009894:	e00a      	b.n	80098ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	b2da      	uxtb	r2, r3
 800989a:	4908      	ldr	r1, [pc, #32]	; (80098bc <__NVIC_SetPriority+0x50>)
 800989c:	79fb      	ldrb	r3, [r7, #7]
 800989e:	f003 030f 	and.w	r3, r3, #15
 80098a2:	3b04      	subs	r3, #4
 80098a4:	0112      	lsls	r2, r2, #4
 80098a6:	b2d2      	uxtb	r2, r2
 80098a8:	440b      	add	r3, r1
 80098aa:	761a      	strb	r2, [r3, #24]
}
 80098ac:	bf00      	nop
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr
 80098b8:	e000e100 	.word	0xe000e100
 80098bc:	e000ed00 	.word	0xe000ed00

080098c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80098c0:	b580      	push	{r7, lr}
 80098c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80098c4:	4b05      	ldr	r3, [pc, #20]	; (80098dc <SysTick_Handler+0x1c>)
 80098c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80098c8:	f002 f95e 	bl	800bb88 <xTaskGetSchedulerState>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d001      	beq.n	80098d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80098d2:	f003 f841 	bl	800c958 <xPortSysTickHandler>
  }
}
 80098d6:	bf00      	nop
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	e000e010 	.word	0xe000e010

080098e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80098e0:	b580      	push	{r7, lr}
 80098e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80098e4:	2100      	movs	r1, #0
 80098e6:	f06f 0004 	mvn.w	r0, #4
 80098ea:	f7ff ffbf 	bl	800986c <__NVIC_SetPriority>
#endif
}
 80098ee:	bf00      	nop
 80098f0:	bd80      	pop	{r7, pc}
	...

080098f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098fa:	f3ef 8305 	mrs	r3, IPSR
 80098fe:	603b      	str	r3, [r7, #0]
  return(result);
 8009900:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009902:	2b00      	cmp	r3, #0
 8009904:	d003      	beq.n	800990e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009906:	f06f 0305 	mvn.w	r3, #5
 800990a:	607b      	str	r3, [r7, #4]
 800990c:	e00c      	b.n	8009928 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800990e:	4b0a      	ldr	r3, [pc, #40]	; (8009938 <osKernelInitialize+0x44>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d105      	bne.n	8009922 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009916:	4b08      	ldr	r3, [pc, #32]	; (8009938 <osKernelInitialize+0x44>)
 8009918:	2201      	movs	r2, #1
 800991a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800991c:	2300      	movs	r3, #0
 800991e:	607b      	str	r3, [r7, #4]
 8009920:	e002      	b.n	8009928 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009922:	f04f 33ff 	mov.w	r3, #4294967295
 8009926:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009928:	687b      	ldr	r3, [r7, #4]
}
 800992a:	4618      	mov	r0, r3
 800992c:	370c      	adds	r7, #12
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr
 8009936:	bf00      	nop
 8009938:	2000063c 	.word	0x2000063c

0800993c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009942:	f3ef 8305 	mrs	r3, IPSR
 8009946:	603b      	str	r3, [r7, #0]
  return(result);
 8009948:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800994a:	2b00      	cmp	r3, #0
 800994c:	d003      	beq.n	8009956 <osKernelStart+0x1a>
    stat = osErrorISR;
 800994e:	f06f 0305 	mvn.w	r3, #5
 8009952:	607b      	str	r3, [r7, #4]
 8009954:	e010      	b.n	8009978 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009956:	4b0b      	ldr	r3, [pc, #44]	; (8009984 <osKernelStart+0x48>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2b01      	cmp	r3, #1
 800995c:	d109      	bne.n	8009972 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800995e:	f7ff ffbf 	bl	80098e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009962:	4b08      	ldr	r3, [pc, #32]	; (8009984 <osKernelStart+0x48>)
 8009964:	2202      	movs	r2, #2
 8009966:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009968:	f001 fcc6 	bl	800b2f8 <vTaskStartScheduler>
      stat = osOK;
 800996c:	2300      	movs	r3, #0
 800996e:	607b      	str	r3, [r7, #4]
 8009970:	e002      	b.n	8009978 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009972:	f04f 33ff 	mov.w	r3, #4294967295
 8009976:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009978:	687b      	ldr	r3, [r7, #4]
}
 800997a:	4618      	mov	r0, r3
 800997c:	3708      	adds	r7, #8
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	2000063c 	.word	0x2000063c

08009988 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009988:	b580      	push	{r7, lr}
 800998a:	b08e      	sub	sp, #56	; 0x38
 800998c:	af04      	add	r7, sp, #16
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009994:	2300      	movs	r3, #0
 8009996:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009998:	f3ef 8305 	mrs	r3, IPSR
 800999c:	617b      	str	r3, [r7, #20]
  return(result);
 800999e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d17e      	bne.n	8009aa2 <osThreadNew+0x11a>
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d07b      	beq.n	8009aa2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80099aa:	2380      	movs	r3, #128	; 0x80
 80099ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80099ae:	2318      	movs	r3, #24
 80099b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80099b2:	2300      	movs	r3, #0
 80099b4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80099b6:	f04f 33ff 	mov.w	r3, #4294967295
 80099ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d045      	beq.n	8009a4e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d002      	beq.n	80099d0 <osThreadNew+0x48>
        name = attr->name;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	699b      	ldr	r3, [r3, #24]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d002      	beq.n	80099de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	699b      	ldr	r3, [r3, #24]
 80099dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80099de:	69fb      	ldr	r3, [r7, #28]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d008      	beq.n	80099f6 <osThreadNew+0x6e>
 80099e4:	69fb      	ldr	r3, [r7, #28]
 80099e6:	2b38      	cmp	r3, #56	; 0x38
 80099e8:	d805      	bhi.n	80099f6 <osThreadNew+0x6e>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	f003 0301 	and.w	r3, r3, #1
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d001      	beq.n	80099fa <osThreadNew+0x72>
        return (NULL);
 80099f6:	2300      	movs	r3, #0
 80099f8:	e054      	b.n	8009aa4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	695b      	ldr	r3, [r3, #20]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d003      	beq.n	8009a0a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	695b      	ldr	r3, [r3, #20]
 8009a06:	089b      	lsrs	r3, r3, #2
 8009a08:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	689b      	ldr	r3, [r3, #8]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d00e      	beq.n	8009a30 <osThreadNew+0xa8>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	68db      	ldr	r3, [r3, #12]
 8009a16:	2b5b      	cmp	r3, #91	; 0x5b
 8009a18:	d90a      	bls.n	8009a30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d006      	beq.n	8009a30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	695b      	ldr	r3, [r3, #20]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d002      	beq.n	8009a30 <osThreadNew+0xa8>
        mem = 1;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	61bb      	str	r3, [r7, #24]
 8009a2e:	e010      	b.n	8009a52 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d10c      	bne.n	8009a52 <osThreadNew+0xca>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	68db      	ldr	r3, [r3, #12]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d108      	bne.n	8009a52 <osThreadNew+0xca>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	691b      	ldr	r3, [r3, #16]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d104      	bne.n	8009a52 <osThreadNew+0xca>
          mem = 0;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	61bb      	str	r3, [r7, #24]
 8009a4c:	e001      	b.n	8009a52 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009a52:	69bb      	ldr	r3, [r7, #24]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d110      	bne.n	8009a7a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009a60:	9202      	str	r2, [sp, #8]
 8009a62:	9301      	str	r3, [sp, #4]
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	9300      	str	r3, [sp, #0]
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	6a3a      	ldr	r2, [r7, #32]
 8009a6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	f001 fa6c 	bl	800af4c <xTaskCreateStatic>
 8009a74:	4603      	mov	r3, r0
 8009a76:	613b      	str	r3, [r7, #16]
 8009a78:	e013      	b.n	8009aa2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009a7a:	69bb      	ldr	r3, [r7, #24]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d110      	bne.n	8009aa2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009a80:	6a3b      	ldr	r3, [r7, #32]
 8009a82:	b29a      	uxth	r2, r3
 8009a84:	f107 0310 	add.w	r3, r7, #16
 8009a88:	9301      	str	r3, [sp, #4]
 8009a8a:	69fb      	ldr	r3, [r7, #28]
 8009a8c:	9300      	str	r3, [sp, #0]
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f001 fab7 	bl	800b006 <xTaskCreate>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	d001      	beq.n	8009aa2 <osThreadNew+0x11a>
            hTask = NULL;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009aa2:	693b      	ldr	r3, [r7, #16]
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3728      	adds	r7, #40	; 0x28
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ab2:	f3ef 8305 	mrs	r3, IPSR
 8009ab6:	603b      	str	r3, [r7, #0]
  return(result);
 8009ab8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d003      	beq.n	8009ac6 <osThreadYield+0x1a>
    stat = osErrorISR;
 8009abe:	f06f 0305 	mvn.w	r3, #5
 8009ac2:	607b      	str	r3, [r7, #4]
 8009ac4:	e009      	b.n	8009ada <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8009aca:	4b07      	ldr	r3, [pc, #28]	; (8009ae8 <osThreadYield+0x3c>)
 8009acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ad0:	601a      	str	r2, [r3, #0]
 8009ad2:	f3bf 8f4f 	dsb	sy
 8009ad6:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8009ada:	687b      	ldr	r3, [r7, #4]
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	370c      	adds	r7, #12
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr
 8009ae8:	e000ed04 	.word	0xe000ed04

08009aec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009af4:	f3ef 8305 	mrs	r3, IPSR
 8009af8:	60bb      	str	r3, [r7, #8]
  return(result);
 8009afa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d003      	beq.n	8009b08 <osDelay+0x1c>
    stat = osErrorISR;
 8009b00:	f06f 0305 	mvn.w	r3, #5
 8009b04:	60fb      	str	r3, [r7, #12]
 8009b06:	e007      	b.n	8009b18 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d002      	beq.n	8009b18 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f001 fbbc 	bl	800b290 <vTaskDelay>
    }
  }

  return (stat);
 8009b18:	68fb      	ldr	r3, [r7, #12]
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3710      	adds	r7, #16
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009b22:	b580      	push	{r7, lr}
 8009b24:	b08a      	sub	sp, #40	; 0x28
 8009b26:	af02      	add	r7, sp, #8
 8009b28:	60f8      	str	r0, [r7, #12]
 8009b2a:	60b9      	str	r1, [r7, #8]
 8009b2c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b32:	f3ef 8305 	mrs	r3, IPSR
 8009b36:	613b      	str	r3, [r7, #16]
  return(result);
 8009b38:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d175      	bne.n	8009c2a <osSemaphoreNew+0x108>
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d072      	beq.n	8009c2a <osSemaphoreNew+0x108>
 8009b44:	68ba      	ldr	r2, [r7, #8]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d86e      	bhi.n	8009c2a <osSemaphoreNew+0x108>
    mem = -1;
 8009b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8009b50:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d015      	beq.n	8009b84 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d006      	beq.n	8009b6e <osSemaphoreNew+0x4c>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	2b4f      	cmp	r3, #79	; 0x4f
 8009b66:	d902      	bls.n	8009b6e <osSemaphoreNew+0x4c>
        mem = 1;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	61bb      	str	r3, [r7, #24]
 8009b6c:	e00c      	b.n	8009b88 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d108      	bne.n	8009b88 <osSemaphoreNew+0x66>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d104      	bne.n	8009b88 <osSemaphoreNew+0x66>
          mem = 0;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	61bb      	str	r3, [r7, #24]
 8009b82:	e001      	b.n	8009b88 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009b84:	2300      	movs	r3, #0
 8009b86:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b8e:	d04c      	beq.n	8009c2a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d128      	bne.n	8009be8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d10a      	bne.n	8009bb2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	2203      	movs	r2, #3
 8009ba2:	9200      	str	r2, [sp, #0]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	2100      	movs	r1, #0
 8009ba8:	2001      	movs	r0, #1
 8009baa:	f000 fa29 	bl	800a000 <xQueueGenericCreateStatic>
 8009bae:	61f8      	str	r0, [r7, #28]
 8009bb0:	e005      	b.n	8009bbe <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009bb2:	2203      	movs	r2, #3
 8009bb4:	2100      	movs	r1, #0
 8009bb6:	2001      	movs	r0, #1
 8009bb8:	f000 fa9a 	bl	800a0f0 <xQueueGenericCreate>
 8009bbc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009bbe:	69fb      	ldr	r3, [r7, #28]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d022      	beq.n	8009c0a <osSemaphoreNew+0xe8>
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d01f      	beq.n	8009c0a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009bca:	2300      	movs	r3, #0
 8009bcc:	2200      	movs	r2, #0
 8009bce:	2100      	movs	r1, #0
 8009bd0:	69f8      	ldr	r0, [r7, #28]
 8009bd2:	f000 fb55 	bl	800a280 <xQueueGenericSend>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d016      	beq.n	8009c0a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009bdc:	69f8      	ldr	r0, [r7, #28]
 8009bde:	f000 ffe1 	bl	800aba4 <vQueueDelete>
            hSemaphore = NULL;
 8009be2:	2300      	movs	r3, #0
 8009be4:	61fb      	str	r3, [r7, #28]
 8009be6:	e010      	b.n	8009c0a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009be8:	69bb      	ldr	r3, [r7, #24]
 8009bea:	2b01      	cmp	r3, #1
 8009bec:	d108      	bne.n	8009c00 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	689b      	ldr	r3, [r3, #8]
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	68b9      	ldr	r1, [r7, #8]
 8009bf6:	68f8      	ldr	r0, [r7, #12]
 8009bf8:	f000 fad7 	bl	800a1aa <xQueueCreateCountingSemaphoreStatic>
 8009bfc:	61f8      	str	r0, [r7, #28]
 8009bfe:	e004      	b.n	8009c0a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009c00:	68b9      	ldr	r1, [r7, #8]
 8009c02:	68f8      	ldr	r0, [r7, #12]
 8009c04:	f000 fb08 	bl	800a218 <xQueueCreateCountingSemaphore>
 8009c08:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d00c      	beq.n	8009c2a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d003      	beq.n	8009c1e <osSemaphoreNew+0xfc>
          name = attr->name;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	617b      	str	r3, [r7, #20]
 8009c1c:	e001      	b.n	8009c22 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009c22:	6979      	ldr	r1, [r7, #20]
 8009c24:	69f8      	ldr	r0, [r7, #28]
 8009c26:	f001 f909 	bl	800ae3c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009c2a:	69fb      	ldr	r3, [r7, #28]
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3720      	adds	r7, #32
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b086      	sub	sp, #24
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009c42:	2300      	movs	r3, #0
 8009c44:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d103      	bne.n	8009c54 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009c4c:	f06f 0303 	mvn.w	r3, #3
 8009c50:	617b      	str	r3, [r7, #20]
 8009c52:	e039      	b.n	8009cc8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c54:	f3ef 8305 	mrs	r3, IPSR
 8009c58:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d022      	beq.n	8009ca6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d003      	beq.n	8009c6e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009c66:	f06f 0303 	mvn.w	r3, #3
 8009c6a:	617b      	str	r3, [r7, #20]
 8009c6c:	e02c      	b.n	8009cc8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009c72:	f107 0308 	add.w	r3, r7, #8
 8009c76:	461a      	mov	r2, r3
 8009c78:	2100      	movs	r1, #0
 8009c7a:	6938      	ldr	r0, [r7, #16]
 8009c7c:	f000 ff12 	bl	800aaa4 <xQueueReceiveFromISR>
 8009c80:	4603      	mov	r3, r0
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d003      	beq.n	8009c8e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009c86:	f06f 0302 	mvn.w	r3, #2
 8009c8a:	617b      	str	r3, [r7, #20]
 8009c8c:	e01c      	b.n	8009cc8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d019      	beq.n	8009cc8 <osSemaphoreAcquire+0x94>
 8009c94:	4b0f      	ldr	r3, [pc, #60]	; (8009cd4 <osSemaphoreAcquire+0xa0>)
 8009c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c9a:	601a      	str	r2, [r3, #0]
 8009c9c:	f3bf 8f4f 	dsb	sy
 8009ca0:	f3bf 8f6f 	isb	sy
 8009ca4:	e010      	b.n	8009cc8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009ca6:	6839      	ldr	r1, [r7, #0]
 8009ca8:	6938      	ldr	r0, [r7, #16]
 8009caa:	f000 fdef 	bl	800a88c <xQueueSemaphoreTake>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d009      	beq.n	8009cc8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d003      	beq.n	8009cc2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009cba:	f06f 0301 	mvn.w	r3, #1
 8009cbe:	617b      	str	r3, [r7, #20]
 8009cc0:	e002      	b.n	8009cc8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009cc2:	f06f 0302 	mvn.w	r3, #2
 8009cc6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009cc8:	697b      	ldr	r3, [r7, #20]
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3718      	adds	r7, #24
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop
 8009cd4:	e000ed04 	.word	0xe000ed04

08009cd8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b086      	sub	sp, #24
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d103      	bne.n	8009cf6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009cee:	f06f 0303 	mvn.w	r3, #3
 8009cf2:	617b      	str	r3, [r7, #20]
 8009cf4:	e02c      	b.n	8009d50 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cf6:	f3ef 8305 	mrs	r3, IPSR
 8009cfa:	60fb      	str	r3, [r7, #12]
  return(result);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d01a      	beq.n	8009d38 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009d02:	2300      	movs	r3, #0
 8009d04:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009d06:	f107 0308 	add.w	r3, r7, #8
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	6938      	ldr	r0, [r7, #16]
 8009d0e:	f000 fc50 	bl	800a5b2 <xQueueGiveFromISR>
 8009d12:	4603      	mov	r3, r0
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d003      	beq.n	8009d20 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009d18:	f06f 0302 	mvn.w	r3, #2
 8009d1c:	617b      	str	r3, [r7, #20]
 8009d1e:	e017      	b.n	8009d50 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d014      	beq.n	8009d50 <osSemaphoreRelease+0x78>
 8009d26:	4b0d      	ldr	r3, [pc, #52]	; (8009d5c <osSemaphoreRelease+0x84>)
 8009d28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d2c:	601a      	str	r2, [r3, #0]
 8009d2e:	f3bf 8f4f 	dsb	sy
 8009d32:	f3bf 8f6f 	isb	sy
 8009d36:	e00b      	b.n	8009d50 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009d38:	2300      	movs	r3, #0
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	2100      	movs	r1, #0
 8009d3e:	6938      	ldr	r0, [r7, #16]
 8009d40:	f000 fa9e 	bl	800a280 <xQueueGenericSend>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d002      	beq.n	8009d50 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009d4a:	f06f 0302 	mvn.w	r3, #2
 8009d4e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009d50:	697b      	ldr	r3, [r7, #20]
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3718      	adds	r7, #24
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	e000ed04 	.word	0xe000ed04

08009d60 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009d60:	b480      	push	{r7}
 8009d62:	b085      	sub	sp, #20
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	60b9      	str	r1, [r7, #8]
 8009d6a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	4a07      	ldr	r2, [pc, #28]	; (8009d8c <vApplicationGetIdleTaskMemory+0x2c>)
 8009d70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	4a06      	ldr	r2, [pc, #24]	; (8009d90 <vApplicationGetIdleTaskMemory+0x30>)
 8009d76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2280      	movs	r2, #128	; 0x80
 8009d7c:	601a      	str	r2, [r3, #0]
}
 8009d7e:	bf00      	nop
 8009d80:	3714      	adds	r7, #20
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr
 8009d8a:	bf00      	nop
 8009d8c:	20000640 	.word	0x20000640
 8009d90:	2000069c 	.word	0x2000069c

08009d94 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009d94:	b480      	push	{r7}
 8009d96:	b085      	sub	sp, #20
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	4a07      	ldr	r2, [pc, #28]	; (8009dc0 <vApplicationGetTimerTaskMemory+0x2c>)
 8009da4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	4a06      	ldr	r2, [pc, #24]	; (8009dc4 <vApplicationGetTimerTaskMemory+0x30>)
 8009daa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009db2:	601a      	str	r2, [r3, #0]
}
 8009db4:	bf00      	nop
 8009db6:	3714      	adds	r7, #20
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr
 8009dc0:	2000089c 	.word	0x2000089c
 8009dc4:	200008f8 	.word	0x200008f8

08009dc8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f103 0208 	add.w	r2, r3, #8
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8009de0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f103 0208 	add.w	r2, r3, #8
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f103 0208 	add.w	r2, r3, #8
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009dfc:	bf00      	nop
 8009dfe:	370c      	adds	r7, #12
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr

08009e08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b083      	sub	sp, #12
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009e16:	bf00      	nop
 8009e18:	370c      	adds	r7, #12
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr

08009e22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e22:	b480      	push	{r7}
 8009e24:	b085      	sub	sp, #20
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
 8009e2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	68fa      	ldr	r2, [r7, #12]
 8009e36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	689a      	ldr	r2, [r3, #8]
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	683a      	ldr	r2, [r7, #0]
 8009e46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	683a      	ldr	r2, [r7, #0]
 8009e4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	1c5a      	adds	r2, r3, #1
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	601a      	str	r2, [r3, #0]
}
 8009e5e:	bf00      	nop
 8009e60:	3714      	adds	r7, #20
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr

08009e6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e6a:	b480      	push	{r7}
 8009e6c:	b085      	sub	sp, #20
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
 8009e72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e80:	d103      	bne.n	8009e8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	691b      	ldr	r3, [r3, #16]
 8009e86:	60fb      	str	r3, [r7, #12]
 8009e88:	e00c      	b.n	8009ea4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	3308      	adds	r3, #8
 8009e8e:	60fb      	str	r3, [r7, #12]
 8009e90:	e002      	b.n	8009e98 <vListInsert+0x2e>
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	60fb      	str	r3, [r7, #12]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	68ba      	ldr	r2, [r7, #8]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d2f6      	bcs.n	8009e92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	685a      	ldr	r2, [r3, #4]
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	683a      	ldr	r2, [r7, #0]
 8009eb2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	683a      	ldr	r2, [r7, #0]
 8009ebe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	1c5a      	adds	r2, r3, #1
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	601a      	str	r2, [r3, #0]
}
 8009ed0:	bf00      	nop
 8009ed2:	3714      	adds	r7, #20
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009edc:	b480      	push	{r7}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	691b      	ldr	r3, [r3, #16]
 8009ee8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	6892      	ldr	r2, [r2, #8]
 8009ef2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	6852      	ldr	r2, [r2, #4]
 8009efc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d103      	bne.n	8009f10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	689a      	ldr	r2, [r3, #8]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	1e5a      	subs	r2, r3, #1
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3714      	adds	r7, #20
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d10a      	bne.n	8009f5a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f48:	f383 8811 	msr	BASEPRI, r3
 8009f4c:	f3bf 8f6f 	isb	sy
 8009f50:	f3bf 8f4f 	dsb	sy
 8009f54:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009f56:	bf00      	nop
 8009f58:	e7fe      	b.n	8009f58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009f5a:	f002 fc6b 	bl	800c834 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f66:	68f9      	ldr	r1, [r7, #12]
 8009f68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f6a:	fb01 f303 	mul.w	r3, r1, r3
 8009f6e:	441a      	add	r2, r3
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2200      	movs	r2, #0
 8009f78:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681a      	ldr	r2, [r3, #0]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f8a:	3b01      	subs	r3, #1
 8009f8c:	68f9      	ldr	r1, [r7, #12]
 8009f8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f90:	fb01 f303 	mul.w	r3, r1, r3
 8009f94:	441a      	add	r2, r3
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	22ff      	movs	r2, #255	; 0xff
 8009f9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	22ff      	movs	r2, #255	; 0xff
 8009fa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d114      	bne.n	8009fda <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	691b      	ldr	r3, [r3, #16]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d01a      	beq.n	8009fee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	3310      	adds	r3, #16
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f001 fc25 	bl	800b80c <xTaskRemoveFromEventList>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d012      	beq.n	8009fee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009fc8:	4b0c      	ldr	r3, [pc, #48]	; (8009ffc <xQueueGenericReset+0xcc>)
 8009fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fce:	601a      	str	r2, [r3, #0]
 8009fd0:	f3bf 8f4f 	dsb	sy
 8009fd4:	f3bf 8f6f 	isb	sy
 8009fd8:	e009      	b.n	8009fee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	3310      	adds	r3, #16
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7ff fef2 	bl	8009dc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	3324      	adds	r3, #36	; 0x24
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f7ff feed 	bl	8009dc8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009fee:	f002 fc51 	bl	800c894 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009ff2:	2301      	movs	r3, #1
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}
 8009ffc:	e000ed04 	.word	0xe000ed04

0800a000 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a000:	b580      	push	{r7, lr}
 800a002:	b08e      	sub	sp, #56	; 0x38
 800a004:	af02      	add	r7, sp, #8
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	607a      	str	r2, [r7, #4]
 800a00c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d10a      	bne.n	800a02a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a018:	f383 8811 	msr	BASEPRI, r3
 800a01c:	f3bf 8f6f 	isb	sy
 800a020:	f3bf 8f4f 	dsb	sy
 800a024:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a026:	bf00      	nop
 800a028:	e7fe      	b.n	800a028 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d10a      	bne.n	800a046 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a034:	f383 8811 	msr	BASEPRI, r3
 800a038:	f3bf 8f6f 	isb	sy
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a042:	bf00      	nop
 800a044:	e7fe      	b.n	800a044 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d002      	beq.n	800a052 <xQueueGenericCreateStatic+0x52>
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d001      	beq.n	800a056 <xQueueGenericCreateStatic+0x56>
 800a052:	2301      	movs	r3, #1
 800a054:	e000      	b.n	800a058 <xQueueGenericCreateStatic+0x58>
 800a056:	2300      	movs	r3, #0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d10a      	bne.n	800a072 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a060:	f383 8811 	msr	BASEPRI, r3
 800a064:	f3bf 8f6f 	isb	sy
 800a068:	f3bf 8f4f 	dsb	sy
 800a06c:	623b      	str	r3, [r7, #32]
}
 800a06e:	bf00      	nop
 800a070:	e7fe      	b.n	800a070 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d102      	bne.n	800a07e <xQueueGenericCreateStatic+0x7e>
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d101      	bne.n	800a082 <xQueueGenericCreateStatic+0x82>
 800a07e:	2301      	movs	r3, #1
 800a080:	e000      	b.n	800a084 <xQueueGenericCreateStatic+0x84>
 800a082:	2300      	movs	r3, #0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d10a      	bne.n	800a09e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08c:	f383 8811 	msr	BASEPRI, r3
 800a090:	f3bf 8f6f 	isb	sy
 800a094:	f3bf 8f4f 	dsb	sy
 800a098:	61fb      	str	r3, [r7, #28]
}
 800a09a:	bf00      	nop
 800a09c:	e7fe      	b.n	800a09c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a09e:	2350      	movs	r3, #80	; 0x50
 800a0a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	2b50      	cmp	r3, #80	; 0x50
 800a0a6:	d00a      	beq.n	800a0be <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ac:	f383 8811 	msr	BASEPRI, r3
 800a0b0:	f3bf 8f6f 	isb	sy
 800a0b4:	f3bf 8f4f 	dsb	sy
 800a0b8:	61bb      	str	r3, [r7, #24]
}
 800a0ba:	bf00      	nop
 800a0bc:	e7fe      	b.n	800a0bc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a0be:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d00d      	beq.n	800a0e6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a0d2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d8:	9300      	str	r3, [sp, #0]
 800a0da:	4613      	mov	r3, r2
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	68b9      	ldr	r1, [r7, #8]
 800a0e0:	68f8      	ldr	r0, [r7, #12]
 800a0e2:	f000 f83f 	bl	800a164 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3730      	adds	r7, #48	; 0x30
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b08a      	sub	sp, #40	; 0x28
 800a0f4:	af02      	add	r7, sp, #8
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	60b9      	str	r1, [r7, #8]
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d10a      	bne.n	800a11a <xQueueGenericCreate+0x2a>
	__asm volatile
 800a104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a108:	f383 8811 	msr	BASEPRI, r3
 800a10c:	f3bf 8f6f 	isb	sy
 800a110:	f3bf 8f4f 	dsb	sy
 800a114:	613b      	str	r3, [r7, #16]
}
 800a116:	bf00      	nop
 800a118:	e7fe      	b.n	800a118 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	68ba      	ldr	r2, [r7, #8]
 800a11e:	fb02 f303 	mul.w	r3, r2, r3
 800a122:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a124:	69fb      	ldr	r3, [r7, #28]
 800a126:	3350      	adds	r3, #80	; 0x50
 800a128:	4618      	mov	r0, r3
 800a12a:	f002 fca5 	bl	800ca78 <pvPortMalloc>
 800a12e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a130:	69bb      	ldr	r3, [r7, #24]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d011      	beq.n	800a15a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a136:	69bb      	ldr	r3, [r7, #24]
 800a138:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	3350      	adds	r3, #80	; 0x50
 800a13e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a140:	69bb      	ldr	r3, [r7, #24]
 800a142:	2200      	movs	r2, #0
 800a144:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a148:	79fa      	ldrb	r2, [r7, #7]
 800a14a:	69bb      	ldr	r3, [r7, #24]
 800a14c:	9300      	str	r3, [sp, #0]
 800a14e:	4613      	mov	r3, r2
 800a150:	697a      	ldr	r2, [r7, #20]
 800a152:	68b9      	ldr	r1, [r7, #8]
 800a154:	68f8      	ldr	r0, [r7, #12]
 800a156:	f000 f805 	bl	800a164 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a15a:	69bb      	ldr	r3, [r7, #24]
	}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3720      	adds	r7, #32
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	60f8      	str	r0, [r7, #12]
 800a16c:	60b9      	str	r1, [r7, #8]
 800a16e:	607a      	str	r2, [r7, #4]
 800a170:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d103      	bne.n	800a180 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a178:	69bb      	ldr	r3, [r7, #24]
 800a17a:	69ba      	ldr	r2, [r7, #24]
 800a17c:	601a      	str	r2, [r3, #0]
 800a17e:	e002      	b.n	800a186 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a180:	69bb      	ldr	r3, [r7, #24]
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a186:	69bb      	ldr	r3, [r7, #24]
 800a188:	68fa      	ldr	r2, [r7, #12]
 800a18a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	68ba      	ldr	r2, [r7, #8]
 800a190:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a192:	2101      	movs	r1, #1
 800a194:	69b8      	ldr	r0, [r7, #24]
 800a196:	f7ff fecb 	bl	8009f30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	78fa      	ldrb	r2, [r7, #3]
 800a19e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a1a2:	bf00      	nop
 800a1a4:	3710      	adds	r7, #16
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}

0800a1aa <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b08a      	sub	sp, #40	; 0x28
 800a1ae:	af02      	add	r7, sp, #8
 800a1b0:	60f8      	str	r0, [r7, #12]
 800a1b2:	60b9      	str	r1, [r7, #8]
 800a1b4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d10a      	bne.n	800a1d2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c0:	f383 8811 	msr	BASEPRI, r3
 800a1c4:	f3bf 8f6f 	isb	sy
 800a1c8:	f3bf 8f4f 	dsb	sy
 800a1cc:	61bb      	str	r3, [r7, #24]
}
 800a1ce:	bf00      	nop
 800a1d0:	e7fe      	b.n	800a1d0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a1d2:	68ba      	ldr	r2, [r7, #8]
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d90a      	bls.n	800a1f0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1de:	f383 8811 	msr	BASEPRI, r3
 800a1e2:	f3bf 8f6f 	isb	sy
 800a1e6:	f3bf 8f4f 	dsb	sy
 800a1ea:	617b      	str	r3, [r7, #20]
}
 800a1ec:	bf00      	nop
 800a1ee:	e7fe      	b.n	800a1ee <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a1f0:	2302      	movs	r3, #2
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	2100      	movs	r1, #0
 800a1fa:	68f8      	ldr	r0, [r7, #12]
 800a1fc:	f7ff ff00 	bl	800a000 <xQueueGenericCreateStatic>
 800a200:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a202:	69fb      	ldr	r3, [r7, #28]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d002      	beq.n	800a20e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a208:	69fb      	ldr	r3, [r7, #28]
 800a20a:	68ba      	ldr	r2, [r7, #8]
 800a20c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a20e:	69fb      	ldr	r3, [r7, #28]
	}
 800a210:	4618      	mov	r0, r3
 800a212:	3720      	adds	r7, #32
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b086      	sub	sp, #24
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d10a      	bne.n	800a23e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a22c:	f383 8811 	msr	BASEPRI, r3
 800a230:	f3bf 8f6f 	isb	sy
 800a234:	f3bf 8f4f 	dsb	sy
 800a238:	613b      	str	r3, [r7, #16]
}
 800a23a:	bf00      	nop
 800a23c:	e7fe      	b.n	800a23c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a23e:	683a      	ldr	r2, [r7, #0]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	429a      	cmp	r2, r3
 800a244:	d90a      	bls.n	800a25c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24a:	f383 8811 	msr	BASEPRI, r3
 800a24e:	f3bf 8f6f 	isb	sy
 800a252:	f3bf 8f4f 	dsb	sy
 800a256:	60fb      	str	r3, [r7, #12]
}
 800a258:	bf00      	nop
 800a25a:	e7fe      	b.n	800a25a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a25c:	2202      	movs	r2, #2
 800a25e:	2100      	movs	r1, #0
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f7ff ff45 	bl	800a0f0 <xQueueGenericCreate>
 800a266:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d002      	beq.n	800a274 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	683a      	ldr	r2, [r7, #0]
 800a272:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a274:	697b      	ldr	r3, [r7, #20]
	}
 800a276:	4618      	mov	r0, r3
 800a278:	3718      	adds	r7, #24
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
	...

0800a280 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b08e      	sub	sp, #56	; 0x38
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	607a      	str	r2, [r7, #4]
 800a28c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a28e:	2300      	movs	r3, #0
 800a290:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d10a      	bne.n	800a2b2 <xQueueGenericSend+0x32>
	__asm volatile
 800a29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a0:	f383 8811 	msr	BASEPRI, r3
 800a2a4:	f3bf 8f6f 	isb	sy
 800a2a8:	f3bf 8f4f 	dsb	sy
 800a2ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a2ae:	bf00      	nop
 800a2b0:	e7fe      	b.n	800a2b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d103      	bne.n	800a2c0 <xQueueGenericSend+0x40>
 800a2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d101      	bne.n	800a2c4 <xQueueGenericSend+0x44>
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	e000      	b.n	800a2c6 <xQueueGenericSend+0x46>
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d10a      	bne.n	800a2e0 <xQueueGenericSend+0x60>
	__asm volatile
 800a2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ce:	f383 8811 	msr	BASEPRI, r3
 800a2d2:	f3bf 8f6f 	isb	sy
 800a2d6:	f3bf 8f4f 	dsb	sy
 800a2da:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a2dc:	bf00      	nop
 800a2de:	e7fe      	b.n	800a2de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	2b02      	cmp	r3, #2
 800a2e4:	d103      	bne.n	800a2ee <xQueueGenericSend+0x6e>
 800a2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	d101      	bne.n	800a2f2 <xQueueGenericSend+0x72>
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	e000      	b.n	800a2f4 <xQueueGenericSend+0x74>
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d10a      	bne.n	800a30e <xQueueGenericSend+0x8e>
	__asm volatile
 800a2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fc:	f383 8811 	msr	BASEPRI, r3
 800a300:	f3bf 8f6f 	isb	sy
 800a304:	f3bf 8f4f 	dsb	sy
 800a308:	623b      	str	r3, [r7, #32]
}
 800a30a:	bf00      	nop
 800a30c:	e7fe      	b.n	800a30c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a30e:	f001 fc3b 	bl	800bb88 <xTaskGetSchedulerState>
 800a312:	4603      	mov	r3, r0
 800a314:	2b00      	cmp	r3, #0
 800a316:	d102      	bne.n	800a31e <xQueueGenericSend+0x9e>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d101      	bne.n	800a322 <xQueueGenericSend+0xa2>
 800a31e:	2301      	movs	r3, #1
 800a320:	e000      	b.n	800a324 <xQueueGenericSend+0xa4>
 800a322:	2300      	movs	r3, #0
 800a324:	2b00      	cmp	r3, #0
 800a326:	d10a      	bne.n	800a33e <xQueueGenericSend+0xbe>
	__asm volatile
 800a328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32c:	f383 8811 	msr	BASEPRI, r3
 800a330:	f3bf 8f6f 	isb	sy
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	61fb      	str	r3, [r7, #28]
}
 800a33a:	bf00      	nop
 800a33c:	e7fe      	b.n	800a33c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a33e:	f002 fa79 	bl	800c834 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a344:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d302      	bcc.n	800a354 <xQueueGenericSend+0xd4>
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	2b02      	cmp	r3, #2
 800a352:	d129      	bne.n	800a3a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a354:	683a      	ldr	r2, [r7, #0]
 800a356:	68b9      	ldr	r1, [r7, #8]
 800a358:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a35a:	f000 fc5e 	bl	800ac1a <prvCopyDataToQueue>
 800a35e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a364:	2b00      	cmp	r3, #0
 800a366:	d010      	beq.n	800a38a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36a:	3324      	adds	r3, #36	; 0x24
 800a36c:	4618      	mov	r0, r3
 800a36e:	f001 fa4d 	bl	800b80c <xTaskRemoveFromEventList>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d013      	beq.n	800a3a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a378:	4b3f      	ldr	r3, [pc, #252]	; (800a478 <xQueueGenericSend+0x1f8>)
 800a37a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a37e:	601a      	str	r2, [r3, #0]
 800a380:	f3bf 8f4f 	dsb	sy
 800a384:	f3bf 8f6f 	isb	sy
 800a388:	e00a      	b.n	800a3a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d007      	beq.n	800a3a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a390:	4b39      	ldr	r3, [pc, #228]	; (800a478 <xQueueGenericSend+0x1f8>)
 800a392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a396:	601a      	str	r2, [r3, #0]
 800a398:	f3bf 8f4f 	dsb	sy
 800a39c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a3a0:	f002 fa78 	bl	800c894 <vPortExitCritical>
				return pdPASS;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	e063      	b.n	800a470 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d103      	bne.n	800a3b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a3ae:	f002 fa71 	bl	800c894 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	e05c      	b.n	800a470 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d106      	bne.n	800a3ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3bc:	f107 0314 	add.w	r3, r7, #20
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f001 fa87 	bl	800b8d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a3ca:	f002 fa63 	bl	800c894 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a3ce:	f000 fff9 	bl	800b3c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3d2:	f002 fa2f 	bl	800c834 <vPortEnterCritical>
 800a3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3dc:	b25b      	sxtb	r3, r3
 800a3de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3e2:	d103      	bne.n	800a3ec <xQueueGenericSend+0x16c>
 800a3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3f2:	b25b      	sxtb	r3, r3
 800a3f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3f8:	d103      	bne.n	800a402 <xQueueGenericSend+0x182>
 800a3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a402:	f002 fa47 	bl	800c894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a406:	1d3a      	adds	r2, r7, #4
 800a408:	f107 0314 	add.w	r3, r7, #20
 800a40c:	4611      	mov	r1, r2
 800a40e:	4618      	mov	r0, r3
 800a410:	f001 fa76 	bl	800b900 <xTaskCheckForTimeOut>
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d124      	bne.n	800a464 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a41a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a41c:	f000 fcf5 	bl	800ae0a <prvIsQueueFull>
 800a420:	4603      	mov	r3, r0
 800a422:	2b00      	cmp	r3, #0
 800a424:	d018      	beq.n	800a458 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a428:	3310      	adds	r3, #16
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	4611      	mov	r1, r2
 800a42e:	4618      	mov	r0, r3
 800a430:	f001 f99c 	bl	800b76c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a436:	f000 fc80 	bl	800ad3a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a43a:	f000 ffd1 	bl	800b3e0 <xTaskResumeAll>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b00      	cmp	r3, #0
 800a442:	f47f af7c 	bne.w	800a33e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a446:	4b0c      	ldr	r3, [pc, #48]	; (800a478 <xQueueGenericSend+0x1f8>)
 800a448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a44c:	601a      	str	r2, [r3, #0]
 800a44e:	f3bf 8f4f 	dsb	sy
 800a452:	f3bf 8f6f 	isb	sy
 800a456:	e772      	b.n	800a33e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a458:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a45a:	f000 fc6e 	bl	800ad3a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a45e:	f000 ffbf 	bl	800b3e0 <xTaskResumeAll>
 800a462:	e76c      	b.n	800a33e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a464:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a466:	f000 fc68 	bl	800ad3a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a46a:	f000 ffb9 	bl	800b3e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a46e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a470:	4618      	mov	r0, r3
 800a472:	3738      	adds	r7, #56	; 0x38
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	e000ed04 	.word	0xe000ed04

0800a47c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b090      	sub	sp, #64	; 0x40
 800a480:	af00      	add	r7, sp, #0
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	607a      	str	r2, [r7, #4]
 800a488:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a490:	2b00      	cmp	r3, #0
 800a492:	d10a      	bne.n	800a4aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a498:	f383 8811 	msr	BASEPRI, r3
 800a49c:	f3bf 8f6f 	isb	sy
 800a4a0:	f3bf 8f4f 	dsb	sy
 800a4a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a4a6:	bf00      	nop
 800a4a8:	e7fe      	b.n	800a4a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d103      	bne.n	800a4b8 <xQueueGenericSendFromISR+0x3c>
 800a4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d101      	bne.n	800a4bc <xQueueGenericSendFromISR+0x40>
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	e000      	b.n	800a4be <xQueueGenericSendFromISR+0x42>
 800a4bc:	2300      	movs	r3, #0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d10a      	bne.n	800a4d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c6:	f383 8811 	msr	BASEPRI, r3
 800a4ca:	f3bf 8f6f 	isb	sy
 800a4ce:	f3bf 8f4f 	dsb	sy
 800a4d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a4d4:	bf00      	nop
 800a4d6:	e7fe      	b.n	800a4d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	2b02      	cmp	r3, #2
 800a4dc:	d103      	bne.n	800a4e6 <xQueueGenericSendFromISR+0x6a>
 800a4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d101      	bne.n	800a4ea <xQueueGenericSendFromISR+0x6e>
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e000      	b.n	800a4ec <xQueueGenericSendFromISR+0x70>
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d10a      	bne.n	800a506 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f4:	f383 8811 	msr	BASEPRI, r3
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	623b      	str	r3, [r7, #32]
}
 800a502:	bf00      	nop
 800a504:	e7fe      	b.n	800a504 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a506:	f002 fa77 	bl	800c9f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a50a:	f3ef 8211 	mrs	r2, BASEPRI
 800a50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a512:	f383 8811 	msr	BASEPRI, r3
 800a516:	f3bf 8f6f 	isb	sy
 800a51a:	f3bf 8f4f 	dsb	sy
 800a51e:	61fa      	str	r2, [r7, #28]
 800a520:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a522:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a524:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a52c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a52e:	429a      	cmp	r2, r3
 800a530:	d302      	bcc.n	800a538 <xQueueGenericSendFromISR+0xbc>
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	2b02      	cmp	r3, #2
 800a536:	d12f      	bne.n	800a598 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a53a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a53e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a546:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a548:	683a      	ldr	r2, [r7, #0]
 800a54a:	68b9      	ldr	r1, [r7, #8]
 800a54c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a54e:	f000 fb64 	bl	800ac1a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a552:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a55a:	d112      	bne.n	800a582 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a560:	2b00      	cmp	r3, #0
 800a562:	d016      	beq.n	800a592 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a566:	3324      	adds	r3, #36	; 0x24
 800a568:	4618      	mov	r0, r3
 800a56a:	f001 f94f 	bl	800b80c <xTaskRemoveFromEventList>
 800a56e:	4603      	mov	r3, r0
 800a570:	2b00      	cmp	r3, #0
 800a572:	d00e      	beq.n	800a592 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d00b      	beq.n	800a592 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2201      	movs	r2, #1
 800a57e:	601a      	str	r2, [r3, #0]
 800a580:	e007      	b.n	800a592 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a582:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a586:	3301      	adds	r3, #1
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	b25a      	sxtb	r2, r3
 800a58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a592:	2301      	movs	r3, #1
 800a594:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a596:	e001      	b.n	800a59c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a598:	2300      	movs	r3, #0
 800a59a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a59c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a59e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a5a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a5a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3740      	adds	r7, #64	; 0x40
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	b08e      	sub	sp, #56	; 0x38
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
 800a5ba:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d10a      	bne.n	800a5dc <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ca:	f383 8811 	msr	BASEPRI, r3
 800a5ce:	f3bf 8f6f 	isb	sy
 800a5d2:	f3bf 8f4f 	dsb	sy
 800a5d6:	623b      	str	r3, [r7, #32]
}
 800a5d8:	bf00      	nop
 800a5da:	e7fe      	b.n	800a5da <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d00a      	beq.n	800a5fa <xQueueGiveFromISR+0x48>
	__asm volatile
 800a5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e8:	f383 8811 	msr	BASEPRI, r3
 800a5ec:	f3bf 8f6f 	isb	sy
 800a5f0:	f3bf 8f4f 	dsb	sy
 800a5f4:	61fb      	str	r3, [r7, #28]
}
 800a5f6:	bf00      	nop
 800a5f8:	e7fe      	b.n	800a5f8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d103      	bne.n	800a60a <xQueueGiveFromISR+0x58>
 800a602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a604:	689b      	ldr	r3, [r3, #8]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d101      	bne.n	800a60e <xQueueGiveFromISR+0x5c>
 800a60a:	2301      	movs	r3, #1
 800a60c:	e000      	b.n	800a610 <xQueueGiveFromISR+0x5e>
 800a60e:	2300      	movs	r3, #0
 800a610:	2b00      	cmp	r3, #0
 800a612:	d10a      	bne.n	800a62a <xQueueGiveFromISR+0x78>
	__asm volatile
 800a614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a618:	f383 8811 	msr	BASEPRI, r3
 800a61c:	f3bf 8f6f 	isb	sy
 800a620:	f3bf 8f4f 	dsb	sy
 800a624:	61bb      	str	r3, [r7, #24]
}
 800a626:	bf00      	nop
 800a628:	e7fe      	b.n	800a628 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a62a:	f002 f9e5 	bl	800c9f8 <vPortValidateInterruptPriority>
	__asm volatile
 800a62e:	f3ef 8211 	mrs	r2, BASEPRI
 800a632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a636:	f383 8811 	msr	BASEPRI, r3
 800a63a:	f3bf 8f6f 	isb	sy
 800a63e:	f3bf 8f4f 	dsb	sy
 800a642:	617a      	str	r2, [r7, #20]
 800a644:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a646:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a648:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a64e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a654:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a656:	429a      	cmp	r2, r3
 800a658:	d22b      	bcs.n	800a6b2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a666:	1c5a      	adds	r2, r3, #1
 800a668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a66c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a670:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a674:	d112      	bne.n	800a69c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d016      	beq.n	800a6ac <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a680:	3324      	adds	r3, #36	; 0x24
 800a682:	4618      	mov	r0, r3
 800a684:	f001 f8c2 	bl	800b80c <xTaskRemoveFromEventList>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d00e      	beq.n	800a6ac <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d00b      	beq.n	800a6ac <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	2201      	movs	r2, #1
 800a698:	601a      	str	r2, [r3, #0]
 800a69a:	e007      	b.n	800a6ac <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a69c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	b25a      	sxtb	r2, r3
 800a6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	637b      	str	r3, [r7, #52]	; 0x34
 800a6b0:	e001      	b.n	800a6b6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	637b      	str	r3, [r7, #52]	; 0x34
 800a6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f383 8811 	msr	BASEPRI, r3
}
 800a6c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a6c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3738      	adds	r7, #56	; 0x38
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b08c      	sub	sp, #48	; 0x30
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d10a      	bne.n	800a6fc <xQueueReceive+0x30>
	__asm volatile
 800a6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ea:	f383 8811 	msr	BASEPRI, r3
 800a6ee:	f3bf 8f6f 	isb	sy
 800a6f2:	f3bf 8f4f 	dsb	sy
 800a6f6:	623b      	str	r3, [r7, #32]
}
 800a6f8:	bf00      	nop
 800a6fa:	e7fe      	b.n	800a6fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d103      	bne.n	800a70a <xQueueReceive+0x3e>
 800a702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a706:	2b00      	cmp	r3, #0
 800a708:	d101      	bne.n	800a70e <xQueueReceive+0x42>
 800a70a:	2301      	movs	r3, #1
 800a70c:	e000      	b.n	800a710 <xQueueReceive+0x44>
 800a70e:	2300      	movs	r3, #0
 800a710:	2b00      	cmp	r3, #0
 800a712:	d10a      	bne.n	800a72a <xQueueReceive+0x5e>
	__asm volatile
 800a714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a718:	f383 8811 	msr	BASEPRI, r3
 800a71c:	f3bf 8f6f 	isb	sy
 800a720:	f3bf 8f4f 	dsb	sy
 800a724:	61fb      	str	r3, [r7, #28]
}
 800a726:	bf00      	nop
 800a728:	e7fe      	b.n	800a728 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a72a:	f001 fa2d 	bl	800bb88 <xTaskGetSchedulerState>
 800a72e:	4603      	mov	r3, r0
 800a730:	2b00      	cmp	r3, #0
 800a732:	d102      	bne.n	800a73a <xQueueReceive+0x6e>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d101      	bne.n	800a73e <xQueueReceive+0x72>
 800a73a:	2301      	movs	r3, #1
 800a73c:	e000      	b.n	800a740 <xQueueReceive+0x74>
 800a73e:	2300      	movs	r3, #0
 800a740:	2b00      	cmp	r3, #0
 800a742:	d10a      	bne.n	800a75a <xQueueReceive+0x8e>
	__asm volatile
 800a744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a748:	f383 8811 	msr	BASEPRI, r3
 800a74c:	f3bf 8f6f 	isb	sy
 800a750:	f3bf 8f4f 	dsb	sy
 800a754:	61bb      	str	r3, [r7, #24]
}
 800a756:	bf00      	nop
 800a758:	e7fe      	b.n	800a758 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a75a:	f002 f86b 	bl	800c834 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a762:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a766:	2b00      	cmp	r3, #0
 800a768:	d01f      	beq.n	800a7aa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a76a:	68b9      	ldr	r1, [r7, #8]
 800a76c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a76e:	f000 fabe 	bl	800acee <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a774:	1e5a      	subs	r2, r3, #1
 800a776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a778:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a77c:	691b      	ldr	r3, [r3, #16]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d00f      	beq.n	800a7a2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a784:	3310      	adds	r3, #16
 800a786:	4618      	mov	r0, r3
 800a788:	f001 f840 	bl	800b80c <xTaskRemoveFromEventList>
 800a78c:	4603      	mov	r3, r0
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d007      	beq.n	800a7a2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a792:	4b3d      	ldr	r3, [pc, #244]	; (800a888 <xQueueReceive+0x1bc>)
 800a794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a798:	601a      	str	r2, [r3, #0]
 800a79a:	f3bf 8f4f 	dsb	sy
 800a79e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a7a2:	f002 f877 	bl	800c894 <vPortExitCritical>
				return pdPASS;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	e069      	b.n	800a87e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d103      	bne.n	800a7b8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a7b0:	f002 f870 	bl	800c894 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	e062      	b.n	800a87e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d106      	bne.n	800a7cc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a7be:	f107 0310 	add.w	r3, r7, #16
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f001 f886 	bl	800b8d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a7cc:	f002 f862 	bl	800c894 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a7d0:	f000 fdf8 	bl	800b3c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a7d4:	f002 f82e 	bl	800c834 <vPortEnterCritical>
 800a7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a7de:	b25b      	sxtb	r3, r3
 800a7e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7e4:	d103      	bne.n	800a7ee <xQueueReceive+0x122>
 800a7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7f4:	b25b      	sxtb	r3, r3
 800a7f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7fa:	d103      	bne.n	800a804 <xQueueReceive+0x138>
 800a7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fe:	2200      	movs	r2, #0
 800a800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a804:	f002 f846 	bl	800c894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a808:	1d3a      	adds	r2, r7, #4
 800a80a:	f107 0310 	add.w	r3, r7, #16
 800a80e:	4611      	mov	r1, r2
 800a810:	4618      	mov	r0, r3
 800a812:	f001 f875 	bl	800b900 <xTaskCheckForTimeOut>
 800a816:	4603      	mov	r3, r0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d123      	bne.n	800a864 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a81c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a81e:	f000 fade 	bl	800adde <prvIsQueueEmpty>
 800a822:	4603      	mov	r3, r0
 800a824:	2b00      	cmp	r3, #0
 800a826:	d017      	beq.n	800a858 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82a:	3324      	adds	r3, #36	; 0x24
 800a82c:	687a      	ldr	r2, [r7, #4]
 800a82e:	4611      	mov	r1, r2
 800a830:	4618      	mov	r0, r3
 800a832:	f000 ff9b 	bl	800b76c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a836:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a838:	f000 fa7f 	bl	800ad3a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a83c:	f000 fdd0 	bl	800b3e0 <xTaskResumeAll>
 800a840:	4603      	mov	r3, r0
 800a842:	2b00      	cmp	r3, #0
 800a844:	d189      	bne.n	800a75a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a846:	4b10      	ldr	r3, [pc, #64]	; (800a888 <xQueueReceive+0x1bc>)
 800a848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a84c:	601a      	str	r2, [r3, #0]
 800a84e:	f3bf 8f4f 	dsb	sy
 800a852:	f3bf 8f6f 	isb	sy
 800a856:	e780      	b.n	800a75a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a85a:	f000 fa6e 	bl	800ad3a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a85e:	f000 fdbf 	bl	800b3e0 <xTaskResumeAll>
 800a862:	e77a      	b.n	800a75a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a866:	f000 fa68 	bl	800ad3a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a86a:	f000 fdb9 	bl	800b3e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a86e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a870:	f000 fab5 	bl	800adde <prvIsQueueEmpty>
 800a874:	4603      	mov	r3, r0
 800a876:	2b00      	cmp	r3, #0
 800a878:	f43f af6f 	beq.w	800a75a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a87c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3730      	adds	r7, #48	; 0x30
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	e000ed04 	.word	0xe000ed04

0800a88c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b08e      	sub	sp, #56	; 0x38
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a896:	2300      	movs	r3, #0
 800a898:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d10a      	bne.n	800a8be <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ac:	f383 8811 	msr	BASEPRI, r3
 800a8b0:	f3bf 8f6f 	isb	sy
 800a8b4:	f3bf 8f4f 	dsb	sy
 800a8b8:	623b      	str	r3, [r7, #32]
}
 800a8ba:	bf00      	nop
 800a8bc:	e7fe      	b.n	800a8bc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d00a      	beq.n	800a8dc <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ca:	f383 8811 	msr	BASEPRI, r3
 800a8ce:	f3bf 8f6f 	isb	sy
 800a8d2:	f3bf 8f4f 	dsb	sy
 800a8d6:	61fb      	str	r3, [r7, #28]
}
 800a8d8:	bf00      	nop
 800a8da:	e7fe      	b.n	800a8da <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a8dc:	f001 f954 	bl	800bb88 <xTaskGetSchedulerState>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d102      	bne.n	800a8ec <xQueueSemaphoreTake+0x60>
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d101      	bne.n	800a8f0 <xQueueSemaphoreTake+0x64>
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	e000      	b.n	800a8f2 <xQueueSemaphoreTake+0x66>
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d10a      	bne.n	800a90c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8fa:	f383 8811 	msr	BASEPRI, r3
 800a8fe:	f3bf 8f6f 	isb	sy
 800a902:	f3bf 8f4f 	dsb	sy
 800a906:	61bb      	str	r3, [r7, #24]
}
 800a908:	bf00      	nop
 800a90a:	e7fe      	b.n	800a90a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a90c:	f001 ff92 	bl	800c834 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a914:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d024      	beq.n	800a966 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a91e:	1e5a      	subs	r2, r3, #1
 800a920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a922:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d104      	bne.n	800a936 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a92c:	f001 faa2 	bl	800be74 <pvTaskIncrementMutexHeldCount>
 800a930:	4602      	mov	r2, r0
 800a932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a934:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a938:	691b      	ldr	r3, [r3, #16]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d00f      	beq.n	800a95e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a940:	3310      	adds	r3, #16
 800a942:	4618      	mov	r0, r3
 800a944:	f000 ff62 	bl	800b80c <xTaskRemoveFromEventList>
 800a948:	4603      	mov	r3, r0
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d007      	beq.n	800a95e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a94e:	4b54      	ldr	r3, [pc, #336]	; (800aaa0 <xQueueSemaphoreTake+0x214>)
 800a950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a954:	601a      	str	r2, [r3, #0]
 800a956:	f3bf 8f4f 	dsb	sy
 800a95a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a95e:	f001 ff99 	bl	800c894 <vPortExitCritical>
				return pdPASS;
 800a962:	2301      	movs	r3, #1
 800a964:	e097      	b.n	800aa96 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d111      	bne.n	800a990 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d00a      	beq.n	800a988 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a976:	f383 8811 	msr	BASEPRI, r3
 800a97a:	f3bf 8f6f 	isb	sy
 800a97e:	f3bf 8f4f 	dsb	sy
 800a982:	617b      	str	r3, [r7, #20]
}
 800a984:	bf00      	nop
 800a986:	e7fe      	b.n	800a986 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a988:	f001 ff84 	bl	800c894 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a98c:	2300      	movs	r3, #0
 800a98e:	e082      	b.n	800aa96 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a992:	2b00      	cmp	r3, #0
 800a994:	d106      	bne.n	800a9a4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a996:	f107 030c 	add.w	r3, r7, #12
 800a99a:	4618      	mov	r0, r3
 800a99c:	f000 ff9a 	bl	800b8d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9a4:	f001 ff76 	bl	800c894 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9a8:	f000 fd0c 	bl	800b3c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9ac:	f001 ff42 	bl	800c834 <vPortEnterCritical>
 800a9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9b6:	b25b      	sxtb	r3, r3
 800a9b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9bc:	d103      	bne.n	800a9c6 <xQueueSemaphoreTake+0x13a>
 800a9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9cc:	b25b      	sxtb	r3, r3
 800a9ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9d2:	d103      	bne.n	800a9dc <xQueueSemaphoreTake+0x150>
 800a9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9dc:	f001 ff5a 	bl	800c894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9e0:	463a      	mov	r2, r7
 800a9e2:	f107 030c 	add.w	r3, r7, #12
 800a9e6:	4611      	mov	r1, r2
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f000 ff89 	bl	800b900 <xTaskCheckForTimeOut>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d132      	bne.n	800aa5a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9f6:	f000 f9f2 	bl	800adde <prvIsQueueEmpty>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d026      	beq.n	800aa4e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d109      	bne.n	800aa1c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800aa08:	f001 ff14 	bl	800c834 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aa0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa0e:	689b      	ldr	r3, [r3, #8]
 800aa10:	4618      	mov	r0, r3
 800aa12:	f001 f8d7 	bl	800bbc4 <xTaskPriorityInherit>
 800aa16:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800aa18:	f001 ff3c 	bl	800c894 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa1e:	3324      	adds	r3, #36	; 0x24
 800aa20:	683a      	ldr	r2, [r7, #0]
 800aa22:	4611      	mov	r1, r2
 800aa24:	4618      	mov	r0, r3
 800aa26:	f000 fea1 	bl	800b76c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa2c:	f000 f985 	bl	800ad3a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa30:	f000 fcd6 	bl	800b3e0 <xTaskResumeAll>
 800aa34:	4603      	mov	r3, r0
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	f47f af68 	bne.w	800a90c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800aa3c:	4b18      	ldr	r3, [pc, #96]	; (800aaa0 <xQueueSemaphoreTake+0x214>)
 800aa3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa42:	601a      	str	r2, [r3, #0]
 800aa44:	f3bf 8f4f 	dsb	sy
 800aa48:	f3bf 8f6f 	isb	sy
 800aa4c:	e75e      	b.n	800a90c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800aa4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa50:	f000 f973 	bl	800ad3a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa54:	f000 fcc4 	bl	800b3e0 <xTaskResumeAll>
 800aa58:	e758      	b.n	800a90c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800aa5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa5c:	f000 f96d 	bl	800ad3a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa60:	f000 fcbe 	bl	800b3e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa66:	f000 f9ba 	bl	800adde <prvIsQueueEmpty>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	f43f af4d 	beq.w	800a90c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800aa72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d00d      	beq.n	800aa94 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800aa78:	f001 fedc 	bl	800c834 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800aa7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa7e:	f000 f8b4 	bl	800abea <prvGetDisinheritPriorityAfterTimeout>
 800aa82:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800aa84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa86:	689b      	ldr	r3, [r3, #8]
 800aa88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f001 f970 	bl	800bd70 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800aa90:	f001 ff00 	bl	800c894 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aa94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3738      	adds	r7, #56	; 0x38
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	e000ed04 	.word	0xe000ed04

0800aaa4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b08e      	sub	sp, #56	; 0x38
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	60f8      	str	r0, [r7, #12]
 800aaac:	60b9      	str	r1, [r7, #8]
 800aaae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d10a      	bne.n	800aad0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800aaba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aabe:	f383 8811 	msr	BASEPRI, r3
 800aac2:	f3bf 8f6f 	isb	sy
 800aac6:	f3bf 8f4f 	dsb	sy
 800aaca:	623b      	str	r3, [r7, #32]
}
 800aacc:	bf00      	nop
 800aace:	e7fe      	b.n	800aace <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d103      	bne.n	800aade <xQueueReceiveFromISR+0x3a>
 800aad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d101      	bne.n	800aae2 <xQueueReceiveFromISR+0x3e>
 800aade:	2301      	movs	r3, #1
 800aae0:	e000      	b.n	800aae4 <xQueueReceiveFromISR+0x40>
 800aae2:	2300      	movs	r3, #0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d10a      	bne.n	800aafe <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800aae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaec:	f383 8811 	msr	BASEPRI, r3
 800aaf0:	f3bf 8f6f 	isb	sy
 800aaf4:	f3bf 8f4f 	dsb	sy
 800aaf8:	61fb      	str	r3, [r7, #28]
}
 800aafa:	bf00      	nop
 800aafc:	e7fe      	b.n	800aafc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aafe:	f001 ff7b 	bl	800c9f8 <vPortValidateInterruptPriority>
	__asm volatile
 800ab02:	f3ef 8211 	mrs	r2, BASEPRI
 800ab06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0a:	f383 8811 	msr	BASEPRI, r3
 800ab0e:	f3bf 8f6f 	isb	sy
 800ab12:	f3bf 8f4f 	dsb	sy
 800ab16:	61ba      	str	r2, [r7, #24]
 800ab18:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ab1a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab22:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d02f      	beq.n	800ab8a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ab2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab34:	68b9      	ldr	r1, [r7, #8]
 800ab36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab38:	f000 f8d9 	bl	800acee <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab3e:	1e5a      	subs	r2, r3, #1
 800ab40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab42:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ab44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab4c:	d112      	bne.n	800ab74 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab50:	691b      	ldr	r3, [r3, #16]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d016      	beq.n	800ab84 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab58:	3310      	adds	r3, #16
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f000 fe56 	bl	800b80c <xTaskRemoveFromEventList>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d00e      	beq.n	800ab84 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d00b      	beq.n	800ab84 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2201      	movs	r2, #1
 800ab70:	601a      	str	r2, [r3, #0]
 800ab72:	e007      	b.n	800ab84 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ab74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab78:	3301      	adds	r3, #1
 800ab7a:	b2db      	uxtb	r3, r3
 800ab7c:	b25a      	sxtb	r2, r3
 800ab7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ab84:	2301      	movs	r3, #1
 800ab86:	637b      	str	r3, [r7, #52]	; 0x34
 800ab88:	e001      	b.n	800ab8e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	637b      	str	r3, [r7, #52]	; 0x34
 800ab8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab90:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	f383 8811 	msr	BASEPRI, r3
}
 800ab98:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3738      	adds	r7, #56	; 0x38
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d10a      	bne.n	800abcc <vQueueDelete+0x28>
	__asm volatile
 800abb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abba:	f383 8811 	msr	BASEPRI, r3
 800abbe:	f3bf 8f6f 	isb	sy
 800abc2:	f3bf 8f4f 	dsb	sy
 800abc6:	60bb      	str	r3, [r7, #8]
}
 800abc8:	bf00      	nop
 800abca:	e7fe      	b.n	800abca <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800abcc:	68f8      	ldr	r0, [r7, #12]
 800abce:	f000 f95f 	bl	800ae90 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d102      	bne.n	800abe2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	f002 f817 	bl	800cc10 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800abe2:	bf00      	nop
 800abe4:	3710      	adds	r7, #16
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}

0800abea <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800abea:	b480      	push	{r7}
 800abec:	b085      	sub	sp, #20
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d006      	beq.n	800ac08 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ac04:	60fb      	str	r3, [r7, #12]
 800ac06:	e001      	b.n	800ac0c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
	}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3714      	adds	r7, #20
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr

0800ac1a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ac1a:	b580      	push	{r7, lr}
 800ac1c:	b086      	sub	sp, #24
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	60f8      	str	r0, [r7, #12]
 800ac22:	60b9      	str	r1, [r7, #8]
 800ac24:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ac26:	2300      	movs	r3, #0
 800ac28:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac2e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d10d      	bne.n	800ac54 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d14d      	bne.n	800acdc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	689b      	ldr	r3, [r3, #8]
 800ac44:	4618      	mov	r0, r3
 800ac46:	f001 f825 	bl	800bc94 <xTaskPriorityDisinherit>
 800ac4a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	609a      	str	r2, [r3, #8]
 800ac52:	e043      	b.n	800acdc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d119      	bne.n	800ac8e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	6858      	ldr	r0, [r3, #4]
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac62:	461a      	mov	r2, r3
 800ac64:	68b9      	ldr	r1, [r7, #8]
 800ac66:	f002 f969 	bl	800cf3c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	685a      	ldr	r2, [r3, #4]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac72:	441a      	add	r2, r3
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	685a      	ldr	r2, [r3, #4]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	689b      	ldr	r3, [r3, #8]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d32b      	bcc.n	800acdc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681a      	ldr	r2, [r3, #0]
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	605a      	str	r2, [r3, #4]
 800ac8c:	e026      	b.n	800acdc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	68d8      	ldr	r0, [r3, #12]
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac96:	461a      	mov	r2, r3
 800ac98:	68b9      	ldr	r1, [r7, #8]
 800ac9a:	f002 f94f 	bl	800cf3c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	68da      	ldr	r2, [r3, #12]
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aca6:	425b      	negs	r3, r3
 800aca8:	441a      	add	r2, r3
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	68da      	ldr	r2, [r3, #12]
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d207      	bcs.n	800acca <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	689a      	ldr	r2, [r3, #8]
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acc2:	425b      	negs	r3, r3
 800acc4:	441a      	add	r2, r3
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2b02      	cmp	r3, #2
 800acce:	d105      	bne.n	800acdc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d002      	beq.n	800acdc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	3b01      	subs	r3, #1
 800acda:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	1c5a      	adds	r2, r3, #1
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ace4:	697b      	ldr	r3, [r7, #20]
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3718      	adds	r7, #24
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}

0800acee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800acee:	b580      	push	{r7, lr}
 800acf0:	b082      	sub	sp, #8
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]
 800acf6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d018      	beq.n	800ad32 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	68da      	ldr	r2, [r3, #12]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad08:	441a      	add	r2, r3
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	68da      	ldr	r2, [r3, #12]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	689b      	ldr	r3, [r3, #8]
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d303      	bcc.n	800ad22 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	68d9      	ldr	r1, [r3, #12]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	6838      	ldr	r0, [r7, #0]
 800ad2e:	f002 f905 	bl	800cf3c <memcpy>
	}
}
 800ad32:	bf00      	nop
 800ad34:	3708      	adds	r7, #8
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}

0800ad3a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ad3a:	b580      	push	{r7, lr}
 800ad3c:	b084      	sub	sp, #16
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ad42:	f001 fd77 	bl	800c834 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad4c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad4e:	e011      	b.n	800ad74 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d012      	beq.n	800ad7e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	3324      	adds	r3, #36	; 0x24
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f000 fd55 	bl	800b80c <xTaskRemoveFromEventList>
 800ad62:	4603      	mov	r3, r0
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d001      	beq.n	800ad6c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ad68:	f000 fe2c 	bl	800b9c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ad6c:	7bfb      	ldrb	r3, [r7, #15]
 800ad6e:	3b01      	subs	r3, #1
 800ad70:	b2db      	uxtb	r3, r3
 800ad72:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	dce9      	bgt.n	800ad50 <prvUnlockQueue+0x16>
 800ad7c:	e000      	b.n	800ad80 <prvUnlockQueue+0x46>
					break;
 800ad7e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	22ff      	movs	r2, #255	; 0xff
 800ad84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ad88:	f001 fd84 	bl	800c894 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ad8c:	f001 fd52 	bl	800c834 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad96:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad98:	e011      	b.n	800adbe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	691b      	ldr	r3, [r3, #16]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d012      	beq.n	800adc8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	3310      	adds	r3, #16
 800ada6:	4618      	mov	r0, r3
 800ada8:	f000 fd30 	bl	800b80c <xTaskRemoveFromEventList>
 800adac:	4603      	mov	r3, r0
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d001      	beq.n	800adb6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800adb2:	f000 fe07 	bl	800b9c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800adb6:	7bbb      	ldrb	r3, [r7, #14]
 800adb8:	3b01      	subs	r3, #1
 800adba:	b2db      	uxtb	r3, r3
 800adbc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800adbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	dce9      	bgt.n	800ad9a <prvUnlockQueue+0x60>
 800adc6:	e000      	b.n	800adca <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800adc8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	22ff      	movs	r2, #255	; 0xff
 800adce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800add2:	f001 fd5f 	bl	800c894 <vPortExitCritical>
}
 800add6:	bf00      	nop
 800add8:	3710      	adds	r7, #16
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}

0800adde <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800adde:	b580      	push	{r7, lr}
 800ade0:	b084      	sub	sp, #16
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ade6:	f001 fd25 	bl	800c834 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d102      	bne.n	800adf8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800adf2:	2301      	movs	r3, #1
 800adf4:	60fb      	str	r3, [r7, #12]
 800adf6:	e001      	b.n	800adfc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800adf8:	2300      	movs	r3, #0
 800adfa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800adfc:	f001 fd4a 	bl	800c894 <vPortExitCritical>

	return xReturn;
 800ae00:	68fb      	ldr	r3, [r7, #12]
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3710      	adds	r7, #16
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b084      	sub	sp, #16
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ae12:	f001 fd0f 	bl	800c834 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d102      	bne.n	800ae28 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ae22:	2301      	movs	r3, #1
 800ae24:	60fb      	str	r3, [r7, #12]
 800ae26:	e001      	b.n	800ae2c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae2c:	f001 fd32 	bl	800c894 <vPortExitCritical>

	return xReturn;
 800ae30:	68fb      	ldr	r3, [r7, #12]
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3710      	adds	r7, #16
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
	...

0800ae3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b085      	sub	sp, #20
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae46:	2300      	movs	r3, #0
 800ae48:	60fb      	str	r3, [r7, #12]
 800ae4a:	e014      	b.n	800ae76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ae4c:	4a0f      	ldr	r2, [pc, #60]	; (800ae8c <vQueueAddToRegistry+0x50>)
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d10b      	bne.n	800ae70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ae58:	490c      	ldr	r1, [pc, #48]	; (800ae8c <vQueueAddToRegistry+0x50>)
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	683a      	ldr	r2, [r7, #0]
 800ae5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ae62:	4a0a      	ldr	r2, [pc, #40]	; (800ae8c <vQueueAddToRegistry+0x50>)
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	00db      	lsls	r3, r3, #3
 800ae68:	4413      	add	r3, r2
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ae6e:	e006      	b.n	800ae7e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	3301      	adds	r3, #1
 800ae74:	60fb      	str	r3, [r7, #12]
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2b07      	cmp	r3, #7
 800ae7a:	d9e7      	bls.n	800ae4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ae7c:	bf00      	nop
 800ae7e:	bf00      	nop
 800ae80:	3714      	adds	r7, #20
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr
 800ae8a:	bf00      	nop
 800ae8c:	20000cf8 	.word	0x20000cf8

0800ae90 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ae90:	b480      	push	{r7}
 800ae92:	b085      	sub	sp, #20
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae98:	2300      	movs	r3, #0
 800ae9a:	60fb      	str	r3, [r7, #12]
 800ae9c:	e016      	b.n	800aecc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ae9e:	4a10      	ldr	r2, [pc, #64]	; (800aee0 <vQueueUnregisterQueue+0x50>)
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	00db      	lsls	r3, r3, #3
 800aea4:	4413      	add	r3, r2
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	d10b      	bne.n	800aec6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800aeae:	4a0c      	ldr	r2, [pc, #48]	; (800aee0 <vQueueUnregisterQueue+0x50>)
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2100      	movs	r1, #0
 800aeb4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800aeb8:	4a09      	ldr	r2, [pc, #36]	; (800aee0 <vQueueUnregisterQueue+0x50>)
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	00db      	lsls	r3, r3, #3
 800aebe:	4413      	add	r3, r2
 800aec0:	2200      	movs	r2, #0
 800aec2:	605a      	str	r2, [r3, #4]
				break;
 800aec4:	e006      	b.n	800aed4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	3301      	adds	r3, #1
 800aeca:	60fb      	str	r3, [r7, #12]
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2b07      	cmp	r3, #7
 800aed0:	d9e5      	bls.n	800ae9e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800aed2:	bf00      	nop
 800aed4:	bf00      	nop
 800aed6:	3714      	adds	r7, #20
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr
 800aee0:	20000cf8 	.word	0x20000cf8

0800aee4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b086      	sub	sp, #24
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	60f8      	str	r0, [r7, #12]
 800aeec:	60b9      	str	r1, [r7, #8]
 800aeee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aef4:	f001 fc9e 	bl	800c834 <vPortEnterCritical>
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aefe:	b25b      	sxtb	r3, r3
 800af00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af04:	d103      	bne.n	800af0e <vQueueWaitForMessageRestricted+0x2a>
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	2200      	movs	r2, #0
 800af0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af14:	b25b      	sxtb	r3, r3
 800af16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af1a:	d103      	bne.n	800af24 <vQueueWaitForMessageRestricted+0x40>
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	2200      	movs	r2, #0
 800af20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af24:	f001 fcb6 	bl	800c894 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d106      	bne.n	800af3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	3324      	adds	r3, #36	; 0x24
 800af34:	687a      	ldr	r2, [r7, #4]
 800af36:	68b9      	ldr	r1, [r7, #8]
 800af38:	4618      	mov	r0, r3
 800af3a:	f000 fc3b 	bl	800b7b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800af3e:	6978      	ldr	r0, [r7, #20]
 800af40:	f7ff fefb 	bl	800ad3a <prvUnlockQueue>
	}
 800af44:	bf00      	nop
 800af46:	3718      	adds	r7, #24
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b08e      	sub	sp, #56	; 0x38
 800af50:	af04      	add	r7, sp, #16
 800af52:	60f8      	str	r0, [r7, #12]
 800af54:	60b9      	str	r1, [r7, #8]
 800af56:	607a      	str	r2, [r7, #4]
 800af58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800af5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d10a      	bne.n	800af76 <xTaskCreateStatic+0x2a>
	__asm volatile
 800af60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af64:	f383 8811 	msr	BASEPRI, r3
 800af68:	f3bf 8f6f 	isb	sy
 800af6c:	f3bf 8f4f 	dsb	sy
 800af70:	623b      	str	r3, [r7, #32]
}
 800af72:	bf00      	nop
 800af74:	e7fe      	b.n	800af74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800af76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d10a      	bne.n	800af92 <xTaskCreateStatic+0x46>
	__asm volatile
 800af7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af80:	f383 8811 	msr	BASEPRI, r3
 800af84:	f3bf 8f6f 	isb	sy
 800af88:	f3bf 8f4f 	dsb	sy
 800af8c:	61fb      	str	r3, [r7, #28]
}
 800af8e:	bf00      	nop
 800af90:	e7fe      	b.n	800af90 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800af92:	235c      	movs	r3, #92	; 0x5c
 800af94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	2b5c      	cmp	r3, #92	; 0x5c
 800af9a:	d00a      	beq.n	800afb2 <xTaskCreateStatic+0x66>
	__asm volatile
 800af9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa0:	f383 8811 	msr	BASEPRI, r3
 800afa4:	f3bf 8f6f 	isb	sy
 800afa8:	f3bf 8f4f 	dsb	sy
 800afac:	61bb      	str	r3, [r7, #24]
}
 800afae:	bf00      	nop
 800afb0:	e7fe      	b.n	800afb0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800afb2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800afb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d01e      	beq.n	800aff8 <xTaskCreateStatic+0xac>
 800afba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d01b      	beq.n	800aff8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800afc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800afc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800afc8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800afca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afcc:	2202      	movs	r2, #2
 800afce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800afd2:	2300      	movs	r3, #0
 800afd4:	9303      	str	r3, [sp, #12]
 800afd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd8:	9302      	str	r3, [sp, #8]
 800afda:	f107 0314 	add.w	r3, r7, #20
 800afde:	9301      	str	r3, [sp, #4]
 800afe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe2:	9300      	str	r3, [sp, #0]
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	68b9      	ldr	r1, [r7, #8]
 800afea:	68f8      	ldr	r0, [r7, #12]
 800afec:	f000 f850 	bl	800b090 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aff0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aff2:	f000 f8dd 	bl	800b1b0 <prvAddNewTaskToReadyList>
 800aff6:	e001      	b.n	800affc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800aff8:	2300      	movs	r3, #0
 800affa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800affc:	697b      	ldr	r3, [r7, #20]
	}
 800affe:	4618      	mov	r0, r3
 800b000:	3728      	adds	r7, #40	; 0x28
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}

0800b006 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b006:	b580      	push	{r7, lr}
 800b008:	b08c      	sub	sp, #48	; 0x30
 800b00a:	af04      	add	r7, sp, #16
 800b00c:	60f8      	str	r0, [r7, #12]
 800b00e:	60b9      	str	r1, [r7, #8]
 800b010:	603b      	str	r3, [r7, #0]
 800b012:	4613      	mov	r3, r2
 800b014:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b016:	88fb      	ldrh	r3, [r7, #6]
 800b018:	009b      	lsls	r3, r3, #2
 800b01a:	4618      	mov	r0, r3
 800b01c:	f001 fd2c 	bl	800ca78 <pvPortMalloc>
 800b020:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d00e      	beq.n	800b046 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b028:	205c      	movs	r0, #92	; 0x5c
 800b02a:	f001 fd25 	bl	800ca78 <pvPortMalloc>
 800b02e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b030:	69fb      	ldr	r3, [r7, #28]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d003      	beq.n	800b03e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b036:	69fb      	ldr	r3, [r7, #28]
 800b038:	697a      	ldr	r2, [r7, #20]
 800b03a:	631a      	str	r2, [r3, #48]	; 0x30
 800b03c:	e005      	b.n	800b04a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b03e:	6978      	ldr	r0, [r7, #20]
 800b040:	f001 fde6 	bl	800cc10 <vPortFree>
 800b044:	e001      	b.n	800b04a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b046:	2300      	movs	r3, #0
 800b048:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b04a:	69fb      	ldr	r3, [r7, #28]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d017      	beq.n	800b080 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b050:	69fb      	ldr	r3, [r7, #28]
 800b052:	2200      	movs	r2, #0
 800b054:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b058:	88fa      	ldrh	r2, [r7, #6]
 800b05a:	2300      	movs	r3, #0
 800b05c:	9303      	str	r3, [sp, #12]
 800b05e:	69fb      	ldr	r3, [r7, #28]
 800b060:	9302      	str	r3, [sp, #8]
 800b062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b064:	9301      	str	r3, [sp, #4]
 800b066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b068:	9300      	str	r3, [sp, #0]
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	68b9      	ldr	r1, [r7, #8]
 800b06e:	68f8      	ldr	r0, [r7, #12]
 800b070:	f000 f80e 	bl	800b090 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b074:	69f8      	ldr	r0, [r7, #28]
 800b076:	f000 f89b 	bl	800b1b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b07a:	2301      	movs	r3, #1
 800b07c:	61bb      	str	r3, [r7, #24]
 800b07e:	e002      	b.n	800b086 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b080:	f04f 33ff 	mov.w	r3, #4294967295
 800b084:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b086:	69bb      	ldr	r3, [r7, #24]
	}
 800b088:	4618      	mov	r0, r3
 800b08a:	3720      	adds	r7, #32
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b088      	sub	sp, #32
 800b094:	af00      	add	r7, sp, #0
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	60b9      	str	r1, [r7, #8]
 800b09a:	607a      	str	r2, [r7, #4]
 800b09c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	21a5      	movs	r1, #165	; 0xa5
 800b0aa:	f001 ff55 	bl	800cf58 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b0b8:	3b01      	subs	r3, #1
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	4413      	add	r3, r2
 800b0be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b0c0:	69bb      	ldr	r3, [r7, #24]
 800b0c2:	f023 0307 	bic.w	r3, r3, #7
 800b0c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b0c8:	69bb      	ldr	r3, [r7, #24]
 800b0ca:	f003 0307 	and.w	r3, r3, #7
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d00a      	beq.n	800b0e8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d6:	f383 8811 	msr	BASEPRI, r3
 800b0da:	f3bf 8f6f 	isb	sy
 800b0de:	f3bf 8f4f 	dsb	sy
 800b0e2:	617b      	str	r3, [r7, #20]
}
 800b0e4:	bf00      	nop
 800b0e6:	e7fe      	b.n	800b0e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d01f      	beq.n	800b12e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	61fb      	str	r3, [r7, #28]
 800b0f2:	e012      	b.n	800b11a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b0f4:	68ba      	ldr	r2, [r7, #8]
 800b0f6:	69fb      	ldr	r3, [r7, #28]
 800b0f8:	4413      	add	r3, r2
 800b0fa:	7819      	ldrb	r1, [r3, #0]
 800b0fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0fe:	69fb      	ldr	r3, [r7, #28]
 800b100:	4413      	add	r3, r2
 800b102:	3334      	adds	r3, #52	; 0x34
 800b104:	460a      	mov	r2, r1
 800b106:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b108:	68ba      	ldr	r2, [r7, #8]
 800b10a:	69fb      	ldr	r3, [r7, #28]
 800b10c:	4413      	add	r3, r2
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d006      	beq.n	800b122 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b114:	69fb      	ldr	r3, [r7, #28]
 800b116:	3301      	adds	r3, #1
 800b118:	61fb      	str	r3, [r7, #28]
 800b11a:	69fb      	ldr	r3, [r7, #28]
 800b11c:	2b0f      	cmp	r3, #15
 800b11e:	d9e9      	bls.n	800b0f4 <prvInitialiseNewTask+0x64>
 800b120:	e000      	b.n	800b124 <prvInitialiseNewTask+0x94>
			{
				break;
 800b122:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b126:	2200      	movs	r2, #0
 800b128:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b12c:	e003      	b.n	800b136 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b130:	2200      	movs	r2, #0
 800b132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b138:	2b37      	cmp	r3, #55	; 0x37
 800b13a:	d901      	bls.n	800b140 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b13c:	2337      	movs	r3, #55	; 0x37
 800b13e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b142:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b144:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b148:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b14a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b14e:	2200      	movs	r2, #0
 800b150:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b154:	3304      	adds	r3, #4
 800b156:	4618      	mov	r0, r3
 800b158:	f7fe fe56 	bl	8009e08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15e:	3318      	adds	r3, #24
 800b160:	4618      	mov	r0, r3
 800b162:	f7fe fe51 	bl	8009e08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b16a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b16e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b174:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b17a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17e:	2200      	movs	r2, #0
 800b180:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b184:	2200      	movs	r2, #0
 800b186:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b18a:	683a      	ldr	r2, [r7, #0]
 800b18c:	68f9      	ldr	r1, [r7, #12]
 800b18e:	69b8      	ldr	r0, [r7, #24]
 800b190:	f001 fa26 	bl	800c5e0 <pxPortInitialiseStack>
 800b194:	4602      	mov	r2, r0
 800b196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b198:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d002      	beq.n	800b1a6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1a6:	bf00      	nop
 800b1a8:	3720      	adds	r7, #32
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
	...

0800b1b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b082      	sub	sp, #8
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b1b8:	f001 fb3c 	bl	800c834 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b1bc:	4b2d      	ldr	r3, [pc, #180]	; (800b274 <prvAddNewTaskToReadyList+0xc4>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	4a2c      	ldr	r2, [pc, #176]	; (800b274 <prvAddNewTaskToReadyList+0xc4>)
 800b1c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b1c6:	4b2c      	ldr	r3, [pc, #176]	; (800b278 <prvAddNewTaskToReadyList+0xc8>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d109      	bne.n	800b1e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b1ce:	4a2a      	ldr	r2, [pc, #168]	; (800b278 <prvAddNewTaskToReadyList+0xc8>)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b1d4:	4b27      	ldr	r3, [pc, #156]	; (800b274 <prvAddNewTaskToReadyList+0xc4>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	d110      	bne.n	800b1fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b1dc:	f000 fc16 	bl	800ba0c <prvInitialiseTaskLists>
 800b1e0:	e00d      	b.n	800b1fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b1e2:	4b26      	ldr	r3, [pc, #152]	; (800b27c <prvAddNewTaskToReadyList+0xcc>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d109      	bne.n	800b1fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b1ea:	4b23      	ldr	r3, [pc, #140]	; (800b278 <prvAddNewTaskToReadyList+0xc8>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d802      	bhi.n	800b1fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b1f8:	4a1f      	ldr	r2, [pc, #124]	; (800b278 <prvAddNewTaskToReadyList+0xc8>)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b1fe:	4b20      	ldr	r3, [pc, #128]	; (800b280 <prvAddNewTaskToReadyList+0xd0>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	3301      	adds	r3, #1
 800b204:	4a1e      	ldr	r2, [pc, #120]	; (800b280 <prvAddNewTaskToReadyList+0xd0>)
 800b206:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b208:	4b1d      	ldr	r3, [pc, #116]	; (800b280 <prvAddNewTaskToReadyList+0xd0>)
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b214:	4b1b      	ldr	r3, [pc, #108]	; (800b284 <prvAddNewTaskToReadyList+0xd4>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	429a      	cmp	r2, r3
 800b21a:	d903      	bls.n	800b224 <prvAddNewTaskToReadyList+0x74>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b220:	4a18      	ldr	r2, [pc, #96]	; (800b284 <prvAddNewTaskToReadyList+0xd4>)
 800b222:	6013      	str	r3, [r2, #0]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b228:	4613      	mov	r3, r2
 800b22a:	009b      	lsls	r3, r3, #2
 800b22c:	4413      	add	r3, r2
 800b22e:	009b      	lsls	r3, r3, #2
 800b230:	4a15      	ldr	r2, [pc, #84]	; (800b288 <prvAddNewTaskToReadyList+0xd8>)
 800b232:	441a      	add	r2, r3
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	3304      	adds	r3, #4
 800b238:	4619      	mov	r1, r3
 800b23a:	4610      	mov	r0, r2
 800b23c:	f7fe fdf1 	bl	8009e22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b240:	f001 fb28 	bl	800c894 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b244:	4b0d      	ldr	r3, [pc, #52]	; (800b27c <prvAddNewTaskToReadyList+0xcc>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d00e      	beq.n	800b26a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b24c:	4b0a      	ldr	r3, [pc, #40]	; (800b278 <prvAddNewTaskToReadyList+0xc8>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b256:	429a      	cmp	r2, r3
 800b258:	d207      	bcs.n	800b26a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b25a:	4b0c      	ldr	r3, [pc, #48]	; (800b28c <prvAddNewTaskToReadyList+0xdc>)
 800b25c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b260:	601a      	str	r2, [r3, #0]
 800b262:	f3bf 8f4f 	dsb	sy
 800b266:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b26a:	bf00      	nop
 800b26c:	3708      	adds	r7, #8
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
 800b272:	bf00      	nop
 800b274:	2000120c 	.word	0x2000120c
 800b278:	20000d38 	.word	0x20000d38
 800b27c:	20001218 	.word	0x20001218
 800b280:	20001228 	.word	0x20001228
 800b284:	20001214 	.word	0x20001214
 800b288:	20000d3c 	.word	0x20000d3c
 800b28c:	e000ed04 	.word	0xe000ed04

0800b290 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b298:	2300      	movs	r3, #0
 800b29a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d017      	beq.n	800b2d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b2a2:	4b13      	ldr	r3, [pc, #76]	; (800b2f0 <vTaskDelay+0x60>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d00a      	beq.n	800b2c0 <vTaskDelay+0x30>
	__asm volatile
 800b2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ae:	f383 8811 	msr	BASEPRI, r3
 800b2b2:	f3bf 8f6f 	isb	sy
 800b2b6:	f3bf 8f4f 	dsb	sy
 800b2ba:	60bb      	str	r3, [r7, #8]
}
 800b2bc:	bf00      	nop
 800b2be:	e7fe      	b.n	800b2be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b2c0:	f000 f880 	bl	800b3c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b2c4:	2100      	movs	r1, #0
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f000 fde8 	bl	800be9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b2cc:	f000 f888 	bl	800b3e0 <xTaskResumeAll>
 800b2d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d107      	bne.n	800b2e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b2d8:	4b06      	ldr	r3, [pc, #24]	; (800b2f4 <vTaskDelay+0x64>)
 800b2da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2de:	601a      	str	r2, [r3, #0]
 800b2e0:	f3bf 8f4f 	dsb	sy
 800b2e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b2e8:	bf00      	nop
 800b2ea:	3710      	adds	r7, #16
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}
 800b2f0:	20001234 	.word	0x20001234
 800b2f4:	e000ed04 	.word	0xe000ed04

0800b2f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b08a      	sub	sp, #40	; 0x28
 800b2fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b2fe:	2300      	movs	r3, #0
 800b300:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b302:	2300      	movs	r3, #0
 800b304:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b306:	463a      	mov	r2, r7
 800b308:	1d39      	adds	r1, r7, #4
 800b30a:	f107 0308 	add.w	r3, r7, #8
 800b30e:	4618      	mov	r0, r3
 800b310:	f7fe fd26 	bl	8009d60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b314:	6839      	ldr	r1, [r7, #0]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	68ba      	ldr	r2, [r7, #8]
 800b31a:	9202      	str	r2, [sp, #8]
 800b31c:	9301      	str	r3, [sp, #4]
 800b31e:	2300      	movs	r3, #0
 800b320:	9300      	str	r3, [sp, #0]
 800b322:	2300      	movs	r3, #0
 800b324:	460a      	mov	r2, r1
 800b326:	4921      	ldr	r1, [pc, #132]	; (800b3ac <vTaskStartScheduler+0xb4>)
 800b328:	4821      	ldr	r0, [pc, #132]	; (800b3b0 <vTaskStartScheduler+0xb8>)
 800b32a:	f7ff fe0f 	bl	800af4c <xTaskCreateStatic>
 800b32e:	4603      	mov	r3, r0
 800b330:	4a20      	ldr	r2, [pc, #128]	; (800b3b4 <vTaskStartScheduler+0xbc>)
 800b332:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b334:	4b1f      	ldr	r3, [pc, #124]	; (800b3b4 <vTaskStartScheduler+0xbc>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d002      	beq.n	800b342 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b33c:	2301      	movs	r3, #1
 800b33e:	617b      	str	r3, [r7, #20]
 800b340:	e001      	b.n	800b346 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b342:	2300      	movs	r3, #0
 800b344:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	2b01      	cmp	r3, #1
 800b34a:	d102      	bne.n	800b352 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b34c:	f000 fdfa 	bl	800bf44 <xTimerCreateTimerTask>
 800b350:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	2b01      	cmp	r3, #1
 800b356:	d116      	bne.n	800b386 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b35c:	f383 8811 	msr	BASEPRI, r3
 800b360:	f3bf 8f6f 	isb	sy
 800b364:	f3bf 8f4f 	dsb	sy
 800b368:	613b      	str	r3, [r7, #16]
}
 800b36a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b36c:	4b12      	ldr	r3, [pc, #72]	; (800b3b8 <vTaskStartScheduler+0xc0>)
 800b36e:	f04f 32ff 	mov.w	r2, #4294967295
 800b372:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b374:	4b11      	ldr	r3, [pc, #68]	; (800b3bc <vTaskStartScheduler+0xc4>)
 800b376:	2201      	movs	r2, #1
 800b378:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b37a:	4b11      	ldr	r3, [pc, #68]	; (800b3c0 <vTaskStartScheduler+0xc8>)
 800b37c:	2200      	movs	r2, #0
 800b37e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b380:	f001 f9b6 	bl	800c6f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b384:	e00e      	b.n	800b3a4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b38c:	d10a      	bne.n	800b3a4 <vTaskStartScheduler+0xac>
	__asm volatile
 800b38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b392:	f383 8811 	msr	BASEPRI, r3
 800b396:	f3bf 8f6f 	isb	sy
 800b39a:	f3bf 8f4f 	dsb	sy
 800b39e:	60fb      	str	r3, [r7, #12]
}
 800b3a0:	bf00      	nop
 800b3a2:	e7fe      	b.n	800b3a2 <vTaskStartScheduler+0xaa>
}
 800b3a4:	bf00      	nop
 800b3a6:	3718      	adds	r7, #24
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}
 800b3ac:	08010670 	.word	0x08010670
 800b3b0:	0800b9dd 	.word	0x0800b9dd
 800b3b4:	20001230 	.word	0x20001230
 800b3b8:	2000122c 	.word	0x2000122c
 800b3bc:	20001218 	.word	0x20001218
 800b3c0:	20001210 	.word	0x20001210

0800b3c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b3c8:	4b04      	ldr	r3, [pc, #16]	; (800b3dc <vTaskSuspendAll+0x18>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	4a03      	ldr	r2, [pc, #12]	; (800b3dc <vTaskSuspendAll+0x18>)
 800b3d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b3d2:	bf00      	nop
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr
 800b3dc:	20001234 	.word	0x20001234

0800b3e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b3ee:	4b42      	ldr	r3, [pc, #264]	; (800b4f8 <xTaskResumeAll+0x118>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d10a      	bne.n	800b40c <xTaskResumeAll+0x2c>
	__asm volatile
 800b3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3fa:	f383 8811 	msr	BASEPRI, r3
 800b3fe:	f3bf 8f6f 	isb	sy
 800b402:	f3bf 8f4f 	dsb	sy
 800b406:	603b      	str	r3, [r7, #0]
}
 800b408:	bf00      	nop
 800b40a:	e7fe      	b.n	800b40a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b40c:	f001 fa12 	bl	800c834 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b410:	4b39      	ldr	r3, [pc, #228]	; (800b4f8 <xTaskResumeAll+0x118>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	3b01      	subs	r3, #1
 800b416:	4a38      	ldr	r2, [pc, #224]	; (800b4f8 <xTaskResumeAll+0x118>)
 800b418:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b41a:	4b37      	ldr	r3, [pc, #220]	; (800b4f8 <xTaskResumeAll+0x118>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d162      	bne.n	800b4e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b422:	4b36      	ldr	r3, [pc, #216]	; (800b4fc <xTaskResumeAll+0x11c>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d05e      	beq.n	800b4e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b42a:	e02f      	b.n	800b48c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b42c:	4b34      	ldr	r3, [pc, #208]	; (800b500 <xTaskResumeAll+0x120>)
 800b42e:	68db      	ldr	r3, [r3, #12]
 800b430:	68db      	ldr	r3, [r3, #12]
 800b432:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	3318      	adds	r3, #24
 800b438:	4618      	mov	r0, r3
 800b43a:	f7fe fd4f 	bl	8009edc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	3304      	adds	r3, #4
 800b442:	4618      	mov	r0, r3
 800b444:	f7fe fd4a 	bl	8009edc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b44c:	4b2d      	ldr	r3, [pc, #180]	; (800b504 <xTaskResumeAll+0x124>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	429a      	cmp	r2, r3
 800b452:	d903      	bls.n	800b45c <xTaskResumeAll+0x7c>
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b458:	4a2a      	ldr	r2, [pc, #168]	; (800b504 <xTaskResumeAll+0x124>)
 800b45a:	6013      	str	r3, [r2, #0]
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b460:	4613      	mov	r3, r2
 800b462:	009b      	lsls	r3, r3, #2
 800b464:	4413      	add	r3, r2
 800b466:	009b      	lsls	r3, r3, #2
 800b468:	4a27      	ldr	r2, [pc, #156]	; (800b508 <xTaskResumeAll+0x128>)
 800b46a:	441a      	add	r2, r3
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	3304      	adds	r3, #4
 800b470:	4619      	mov	r1, r3
 800b472:	4610      	mov	r0, r2
 800b474:	f7fe fcd5 	bl	8009e22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b47c:	4b23      	ldr	r3, [pc, #140]	; (800b50c <xTaskResumeAll+0x12c>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b482:	429a      	cmp	r2, r3
 800b484:	d302      	bcc.n	800b48c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b486:	4b22      	ldr	r3, [pc, #136]	; (800b510 <xTaskResumeAll+0x130>)
 800b488:	2201      	movs	r2, #1
 800b48a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b48c:	4b1c      	ldr	r3, [pc, #112]	; (800b500 <xTaskResumeAll+0x120>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d1cb      	bne.n	800b42c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d001      	beq.n	800b49e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b49a:	f000 fb55 	bl	800bb48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b49e:	4b1d      	ldr	r3, [pc, #116]	; (800b514 <xTaskResumeAll+0x134>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d010      	beq.n	800b4cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b4aa:	f000 f847 	bl	800b53c <xTaskIncrementTick>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d002      	beq.n	800b4ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b4b4:	4b16      	ldr	r3, [pc, #88]	; (800b510 <xTaskResumeAll+0x130>)
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	3b01      	subs	r3, #1
 800b4be:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d1f1      	bne.n	800b4aa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b4c6:	4b13      	ldr	r3, [pc, #76]	; (800b514 <xTaskResumeAll+0x134>)
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b4cc:	4b10      	ldr	r3, [pc, #64]	; (800b510 <xTaskResumeAll+0x130>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d009      	beq.n	800b4e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b4d8:	4b0f      	ldr	r3, [pc, #60]	; (800b518 <xTaskResumeAll+0x138>)
 800b4da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4de:	601a      	str	r2, [r3, #0]
 800b4e0:	f3bf 8f4f 	dsb	sy
 800b4e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b4e8:	f001 f9d4 	bl	800c894 <vPortExitCritical>

	return xAlreadyYielded;
 800b4ec:	68bb      	ldr	r3, [r7, #8]
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3710      	adds	r7, #16
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	20001234 	.word	0x20001234
 800b4fc:	2000120c 	.word	0x2000120c
 800b500:	200011cc 	.word	0x200011cc
 800b504:	20001214 	.word	0x20001214
 800b508:	20000d3c 	.word	0x20000d3c
 800b50c:	20000d38 	.word	0x20000d38
 800b510:	20001220 	.word	0x20001220
 800b514:	2000121c 	.word	0x2000121c
 800b518:	e000ed04 	.word	0xe000ed04

0800b51c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b522:	4b05      	ldr	r3, [pc, #20]	; (800b538 <xTaskGetTickCount+0x1c>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b528:	687b      	ldr	r3, [r7, #4]
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	370c      	adds	r7, #12
 800b52e:	46bd      	mov	sp, r7
 800b530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b534:	4770      	bx	lr
 800b536:	bf00      	nop
 800b538:	20001210 	.word	0x20001210

0800b53c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b086      	sub	sp, #24
 800b540:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b542:	2300      	movs	r3, #0
 800b544:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b546:	4b4f      	ldr	r3, [pc, #316]	; (800b684 <xTaskIncrementTick+0x148>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	f040 808f 	bne.w	800b66e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b550:	4b4d      	ldr	r3, [pc, #308]	; (800b688 <xTaskIncrementTick+0x14c>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	3301      	adds	r3, #1
 800b556:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b558:	4a4b      	ldr	r2, [pc, #300]	; (800b688 <xTaskIncrementTick+0x14c>)
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d120      	bne.n	800b5a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b564:	4b49      	ldr	r3, [pc, #292]	; (800b68c <xTaskIncrementTick+0x150>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d00a      	beq.n	800b584 <xTaskIncrementTick+0x48>
	__asm volatile
 800b56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b572:	f383 8811 	msr	BASEPRI, r3
 800b576:	f3bf 8f6f 	isb	sy
 800b57a:	f3bf 8f4f 	dsb	sy
 800b57e:	603b      	str	r3, [r7, #0]
}
 800b580:	bf00      	nop
 800b582:	e7fe      	b.n	800b582 <xTaskIncrementTick+0x46>
 800b584:	4b41      	ldr	r3, [pc, #260]	; (800b68c <xTaskIncrementTick+0x150>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	60fb      	str	r3, [r7, #12]
 800b58a:	4b41      	ldr	r3, [pc, #260]	; (800b690 <xTaskIncrementTick+0x154>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	4a3f      	ldr	r2, [pc, #252]	; (800b68c <xTaskIncrementTick+0x150>)
 800b590:	6013      	str	r3, [r2, #0]
 800b592:	4a3f      	ldr	r2, [pc, #252]	; (800b690 <xTaskIncrementTick+0x154>)
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	6013      	str	r3, [r2, #0]
 800b598:	4b3e      	ldr	r3, [pc, #248]	; (800b694 <xTaskIncrementTick+0x158>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	3301      	adds	r3, #1
 800b59e:	4a3d      	ldr	r2, [pc, #244]	; (800b694 <xTaskIncrementTick+0x158>)
 800b5a0:	6013      	str	r3, [r2, #0]
 800b5a2:	f000 fad1 	bl	800bb48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b5a6:	4b3c      	ldr	r3, [pc, #240]	; (800b698 <xTaskIncrementTick+0x15c>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	693a      	ldr	r2, [r7, #16]
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d349      	bcc.n	800b644 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5b0:	4b36      	ldr	r3, [pc, #216]	; (800b68c <xTaskIncrementTick+0x150>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d104      	bne.n	800b5c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5ba:	4b37      	ldr	r3, [pc, #220]	; (800b698 <xTaskIncrementTick+0x15c>)
 800b5bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b5c0:	601a      	str	r2, [r3, #0]
					break;
 800b5c2:	e03f      	b.n	800b644 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5c4:	4b31      	ldr	r3, [pc, #196]	; (800b68c <xTaskIncrementTick+0x150>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	68db      	ldr	r3, [r3, #12]
 800b5ca:	68db      	ldr	r3, [r3, #12]
 800b5cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b5d4:	693a      	ldr	r2, [r7, #16]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d203      	bcs.n	800b5e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b5dc:	4a2e      	ldr	r2, [pc, #184]	; (800b698 <xTaskIncrementTick+0x15c>)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b5e2:	e02f      	b.n	800b644 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	3304      	adds	r3, #4
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f7fe fc77 	bl	8009edc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d004      	beq.n	800b600 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	3318      	adds	r3, #24
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7fe fc6e 	bl	8009edc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b604:	4b25      	ldr	r3, [pc, #148]	; (800b69c <xTaskIncrementTick+0x160>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	429a      	cmp	r2, r3
 800b60a:	d903      	bls.n	800b614 <xTaskIncrementTick+0xd8>
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b610:	4a22      	ldr	r2, [pc, #136]	; (800b69c <xTaskIncrementTick+0x160>)
 800b612:	6013      	str	r3, [r2, #0]
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b618:	4613      	mov	r3, r2
 800b61a:	009b      	lsls	r3, r3, #2
 800b61c:	4413      	add	r3, r2
 800b61e:	009b      	lsls	r3, r3, #2
 800b620:	4a1f      	ldr	r2, [pc, #124]	; (800b6a0 <xTaskIncrementTick+0x164>)
 800b622:	441a      	add	r2, r3
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	3304      	adds	r3, #4
 800b628:	4619      	mov	r1, r3
 800b62a:	4610      	mov	r0, r2
 800b62c:	f7fe fbf9 	bl	8009e22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b634:	4b1b      	ldr	r3, [pc, #108]	; (800b6a4 <xTaskIncrementTick+0x168>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d3b8      	bcc.n	800b5b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b63e:	2301      	movs	r3, #1
 800b640:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b642:	e7b5      	b.n	800b5b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b644:	4b17      	ldr	r3, [pc, #92]	; (800b6a4 <xTaskIncrementTick+0x168>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b64a:	4915      	ldr	r1, [pc, #84]	; (800b6a0 <xTaskIncrementTick+0x164>)
 800b64c:	4613      	mov	r3, r2
 800b64e:	009b      	lsls	r3, r3, #2
 800b650:	4413      	add	r3, r2
 800b652:	009b      	lsls	r3, r3, #2
 800b654:	440b      	add	r3, r1
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d901      	bls.n	800b660 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b65c:	2301      	movs	r3, #1
 800b65e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b660:	4b11      	ldr	r3, [pc, #68]	; (800b6a8 <xTaskIncrementTick+0x16c>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d007      	beq.n	800b678 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b668:	2301      	movs	r3, #1
 800b66a:	617b      	str	r3, [r7, #20]
 800b66c:	e004      	b.n	800b678 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b66e:	4b0f      	ldr	r3, [pc, #60]	; (800b6ac <xTaskIncrementTick+0x170>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	3301      	adds	r3, #1
 800b674:	4a0d      	ldr	r2, [pc, #52]	; (800b6ac <xTaskIncrementTick+0x170>)
 800b676:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b678:	697b      	ldr	r3, [r7, #20]
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3718      	adds	r7, #24
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
 800b682:	bf00      	nop
 800b684:	20001234 	.word	0x20001234
 800b688:	20001210 	.word	0x20001210
 800b68c:	200011c4 	.word	0x200011c4
 800b690:	200011c8 	.word	0x200011c8
 800b694:	20001224 	.word	0x20001224
 800b698:	2000122c 	.word	0x2000122c
 800b69c:	20001214 	.word	0x20001214
 800b6a0:	20000d3c 	.word	0x20000d3c
 800b6a4:	20000d38 	.word	0x20000d38
 800b6a8:	20001220 	.word	0x20001220
 800b6ac:	2000121c 	.word	0x2000121c

0800b6b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b085      	sub	sp, #20
 800b6b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b6b6:	4b28      	ldr	r3, [pc, #160]	; (800b758 <vTaskSwitchContext+0xa8>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d003      	beq.n	800b6c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b6be:	4b27      	ldr	r3, [pc, #156]	; (800b75c <vTaskSwitchContext+0xac>)
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b6c4:	e041      	b.n	800b74a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b6c6:	4b25      	ldr	r3, [pc, #148]	; (800b75c <vTaskSwitchContext+0xac>)
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6cc:	4b24      	ldr	r3, [pc, #144]	; (800b760 <vTaskSwitchContext+0xb0>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	60fb      	str	r3, [r7, #12]
 800b6d2:	e010      	b.n	800b6f6 <vTaskSwitchContext+0x46>
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d10a      	bne.n	800b6f0 <vTaskSwitchContext+0x40>
	__asm volatile
 800b6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6de:	f383 8811 	msr	BASEPRI, r3
 800b6e2:	f3bf 8f6f 	isb	sy
 800b6e6:	f3bf 8f4f 	dsb	sy
 800b6ea:	607b      	str	r3, [r7, #4]
}
 800b6ec:	bf00      	nop
 800b6ee:	e7fe      	b.n	800b6ee <vTaskSwitchContext+0x3e>
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	3b01      	subs	r3, #1
 800b6f4:	60fb      	str	r3, [r7, #12]
 800b6f6:	491b      	ldr	r1, [pc, #108]	; (800b764 <vTaskSwitchContext+0xb4>)
 800b6f8:	68fa      	ldr	r2, [r7, #12]
 800b6fa:	4613      	mov	r3, r2
 800b6fc:	009b      	lsls	r3, r3, #2
 800b6fe:	4413      	add	r3, r2
 800b700:	009b      	lsls	r3, r3, #2
 800b702:	440b      	add	r3, r1
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d0e4      	beq.n	800b6d4 <vTaskSwitchContext+0x24>
 800b70a:	68fa      	ldr	r2, [r7, #12]
 800b70c:	4613      	mov	r3, r2
 800b70e:	009b      	lsls	r3, r3, #2
 800b710:	4413      	add	r3, r2
 800b712:	009b      	lsls	r3, r3, #2
 800b714:	4a13      	ldr	r2, [pc, #76]	; (800b764 <vTaskSwitchContext+0xb4>)
 800b716:	4413      	add	r3, r2
 800b718:	60bb      	str	r3, [r7, #8]
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	685a      	ldr	r2, [r3, #4]
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	605a      	str	r2, [r3, #4]
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	685a      	ldr	r2, [r3, #4]
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	3308      	adds	r3, #8
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d104      	bne.n	800b73a <vTaskSwitchContext+0x8a>
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	685b      	ldr	r3, [r3, #4]
 800b734:	685a      	ldr	r2, [r3, #4]
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	605a      	str	r2, [r3, #4]
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	68db      	ldr	r3, [r3, #12]
 800b740:	4a09      	ldr	r2, [pc, #36]	; (800b768 <vTaskSwitchContext+0xb8>)
 800b742:	6013      	str	r3, [r2, #0]
 800b744:	4a06      	ldr	r2, [pc, #24]	; (800b760 <vTaskSwitchContext+0xb0>)
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	6013      	str	r3, [r2, #0]
}
 800b74a:	bf00      	nop
 800b74c:	3714      	adds	r7, #20
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr
 800b756:	bf00      	nop
 800b758:	20001234 	.word	0x20001234
 800b75c:	20001220 	.word	0x20001220
 800b760:	20001214 	.word	0x20001214
 800b764:	20000d3c 	.word	0x20000d3c
 800b768:	20000d38 	.word	0x20000d38

0800b76c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d10a      	bne.n	800b792 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b780:	f383 8811 	msr	BASEPRI, r3
 800b784:	f3bf 8f6f 	isb	sy
 800b788:	f3bf 8f4f 	dsb	sy
 800b78c:	60fb      	str	r3, [r7, #12]
}
 800b78e:	bf00      	nop
 800b790:	e7fe      	b.n	800b790 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b792:	4b07      	ldr	r3, [pc, #28]	; (800b7b0 <vTaskPlaceOnEventList+0x44>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	3318      	adds	r3, #24
 800b798:	4619      	mov	r1, r3
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f7fe fb65 	bl	8009e6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b7a0:	2101      	movs	r1, #1
 800b7a2:	6838      	ldr	r0, [r7, #0]
 800b7a4:	f000 fb7a 	bl	800be9c <prvAddCurrentTaskToDelayedList>
}
 800b7a8:	bf00      	nop
 800b7aa:	3710      	adds	r7, #16
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}
 800b7b0:	20000d38 	.word	0x20000d38

0800b7b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b086      	sub	sp, #24
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	60b9      	str	r1, [r7, #8]
 800b7be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d10a      	bne.n	800b7dc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ca:	f383 8811 	msr	BASEPRI, r3
 800b7ce:	f3bf 8f6f 	isb	sy
 800b7d2:	f3bf 8f4f 	dsb	sy
 800b7d6:	617b      	str	r3, [r7, #20]
}
 800b7d8:	bf00      	nop
 800b7da:	e7fe      	b.n	800b7da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b7dc:	4b0a      	ldr	r3, [pc, #40]	; (800b808 <vTaskPlaceOnEventListRestricted+0x54>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	3318      	adds	r3, #24
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	68f8      	ldr	r0, [r7, #12]
 800b7e6:	f7fe fb1c 	bl	8009e22 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d002      	beq.n	800b7f6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b7f0:	f04f 33ff 	mov.w	r3, #4294967295
 800b7f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b7f6:	6879      	ldr	r1, [r7, #4]
 800b7f8:	68b8      	ldr	r0, [r7, #8]
 800b7fa:	f000 fb4f 	bl	800be9c <prvAddCurrentTaskToDelayedList>
	}
 800b7fe:	bf00      	nop
 800b800:	3718      	adds	r7, #24
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
 800b806:	bf00      	nop
 800b808:	20000d38 	.word	0x20000d38

0800b80c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b086      	sub	sp, #24
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	68db      	ldr	r3, [r3, #12]
 800b818:	68db      	ldr	r3, [r3, #12]
 800b81a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d10a      	bne.n	800b838 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b826:	f383 8811 	msr	BASEPRI, r3
 800b82a:	f3bf 8f6f 	isb	sy
 800b82e:	f3bf 8f4f 	dsb	sy
 800b832:	60fb      	str	r3, [r7, #12]
}
 800b834:	bf00      	nop
 800b836:	e7fe      	b.n	800b836 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	3318      	adds	r3, #24
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7fe fb4d 	bl	8009edc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b842:	4b1e      	ldr	r3, [pc, #120]	; (800b8bc <xTaskRemoveFromEventList+0xb0>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d11d      	bne.n	800b886 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	3304      	adds	r3, #4
 800b84e:	4618      	mov	r0, r3
 800b850:	f7fe fb44 	bl	8009edc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b858:	4b19      	ldr	r3, [pc, #100]	; (800b8c0 <xTaskRemoveFromEventList+0xb4>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d903      	bls.n	800b868 <xTaskRemoveFromEventList+0x5c>
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b864:	4a16      	ldr	r2, [pc, #88]	; (800b8c0 <xTaskRemoveFromEventList+0xb4>)
 800b866:	6013      	str	r3, [r2, #0]
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b86c:	4613      	mov	r3, r2
 800b86e:	009b      	lsls	r3, r3, #2
 800b870:	4413      	add	r3, r2
 800b872:	009b      	lsls	r3, r3, #2
 800b874:	4a13      	ldr	r2, [pc, #76]	; (800b8c4 <xTaskRemoveFromEventList+0xb8>)
 800b876:	441a      	add	r2, r3
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	3304      	adds	r3, #4
 800b87c:	4619      	mov	r1, r3
 800b87e:	4610      	mov	r0, r2
 800b880:	f7fe facf 	bl	8009e22 <vListInsertEnd>
 800b884:	e005      	b.n	800b892 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	3318      	adds	r3, #24
 800b88a:	4619      	mov	r1, r3
 800b88c:	480e      	ldr	r0, [pc, #56]	; (800b8c8 <xTaskRemoveFromEventList+0xbc>)
 800b88e:	f7fe fac8 	bl	8009e22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b896:	4b0d      	ldr	r3, [pc, #52]	; (800b8cc <xTaskRemoveFromEventList+0xc0>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d905      	bls.n	800b8ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b8a4:	4b0a      	ldr	r3, [pc, #40]	; (800b8d0 <xTaskRemoveFromEventList+0xc4>)
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	601a      	str	r2, [r3, #0]
 800b8aa:	e001      	b.n	800b8b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b8b0:	697b      	ldr	r3, [r7, #20]
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3718      	adds	r7, #24
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
 800b8ba:	bf00      	nop
 800b8bc:	20001234 	.word	0x20001234
 800b8c0:	20001214 	.word	0x20001214
 800b8c4:	20000d3c 	.word	0x20000d3c
 800b8c8:	200011cc 	.word	0x200011cc
 800b8cc:	20000d38 	.word	0x20000d38
 800b8d0:	20001220 	.word	0x20001220

0800b8d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b083      	sub	sp, #12
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b8dc:	4b06      	ldr	r3, [pc, #24]	; (800b8f8 <vTaskInternalSetTimeOutState+0x24>)
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b8e4:	4b05      	ldr	r3, [pc, #20]	; (800b8fc <vTaskInternalSetTimeOutState+0x28>)
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	605a      	str	r2, [r3, #4]
}
 800b8ec:	bf00      	nop
 800b8ee:	370c      	adds	r7, #12
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr
 800b8f8:	20001224 	.word	0x20001224
 800b8fc:	20001210 	.word	0x20001210

0800b900 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b088      	sub	sp, #32
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
 800b908:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d10a      	bne.n	800b926 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b914:	f383 8811 	msr	BASEPRI, r3
 800b918:	f3bf 8f6f 	isb	sy
 800b91c:	f3bf 8f4f 	dsb	sy
 800b920:	613b      	str	r3, [r7, #16]
}
 800b922:	bf00      	nop
 800b924:	e7fe      	b.n	800b924 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d10a      	bne.n	800b942 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b930:	f383 8811 	msr	BASEPRI, r3
 800b934:	f3bf 8f6f 	isb	sy
 800b938:	f3bf 8f4f 	dsb	sy
 800b93c:	60fb      	str	r3, [r7, #12]
}
 800b93e:	bf00      	nop
 800b940:	e7fe      	b.n	800b940 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b942:	f000 ff77 	bl	800c834 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b946:	4b1d      	ldr	r3, [pc, #116]	; (800b9bc <xTaskCheckForTimeOut+0xbc>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	685b      	ldr	r3, [r3, #4]
 800b950:	69ba      	ldr	r2, [r7, #24]
 800b952:	1ad3      	subs	r3, r2, r3
 800b954:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b95e:	d102      	bne.n	800b966 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b960:	2300      	movs	r3, #0
 800b962:	61fb      	str	r3, [r7, #28]
 800b964:	e023      	b.n	800b9ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	4b15      	ldr	r3, [pc, #84]	; (800b9c0 <xTaskCheckForTimeOut+0xc0>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	429a      	cmp	r2, r3
 800b970:	d007      	beq.n	800b982 <xTaskCheckForTimeOut+0x82>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	69ba      	ldr	r2, [r7, #24]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d302      	bcc.n	800b982 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b97c:	2301      	movs	r3, #1
 800b97e:	61fb      	str	r3, [r7, #28]
 800b980:	e015      	b.n	800b9ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	697a      	ldr	r2, [r7, #20]
 800b988:	429a      	cmp	r2, r3
 800b98a:	d20b      	bcs.n	800b9a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	681a      	ldr	r2, [r3, #0]
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	1ad2      	subs	r2, r2, r3
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f7ff ff9b 	bl	800b8d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	61fb      	str	r3, [r7, #28]
 800b9a2:	e004      	b.n	800b9ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b9ae:	f000 ff71 	bl	800c894 <vPortExitCritical>

	return xReturn;
 800b9b2:	69fb      	ldr	r3, [r7, #28]
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3720      	adds	r7, #32
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	20001210 	.word	0x20001210
 800b9c0:	20001224 	.word	0x20001224

0800b9c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b9c8:	4b03      	ldr	r3, [pc, #12]	; (800b9d8 <vTaskMissedYield+0x14>)
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	601a      	str	r2, [r3, #0]
}
 800b9ce:	bf00      	nop
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d6:	4770      	bx	lr
 800b9d8:	20001220 	.word	0x20001220

0800b9dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b082      	sub	sp, #8
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b9e4:	f000 f852 	bl	800ba8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b9e8:	4b06      	ldr	r3, [pc, #24]	; (800ba04 <prvIdleTask+0x28>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	2b01      	cmp	r3, #1
 800b9ee:	d9f9      	bls.n	800b9e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b9f0:	4b05      	ldr	r3, [pc, #20]	; (800ba08 <prvIdleTask+0x2c>)
 800b9f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9f6:	601a      	str	r2, [r3, #0]
 800b9f8:	f3bf 8f4f 	dsb	sy
 800b9fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ba00:	e7f0      	b.n	800b9e4 <prvIdleTask+0x8>
 800ba02:	bf00      	nop
 800ba04:	20000d3c 	.word	0x20000d3c
 800ba08:	e000ed04 	.word	0xe000ed04

0800ba0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b082      	sub	sp, #8
 800ba10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba12:	2300      	movs	r3, #0
 800ba14:	607b      	str	r3, [r7, #4]
 800ba16:	e00c      	b.n	800ba32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ba18:	687a      	ldr	r2, [r7, #4]
 800ba1a:	4613      	mov	r3, r2
 800ba1c:	009b      	lsls	r3, r3, #2
 800ba1e:	4413      	add	r3, r2
 800ba20:	009b      	lsls	r3, r3, #2
 800ba22:	4a12      	ldr	r2, [pc, #72]	; (800ba6c <prvInitialiseTaskLists+0x60>)
 800ba24:	4413      	add	r3, r2
 800ba26:	4618      	mov	r0, r3
 800ba28:	f7fe f9ce 	bl	8009dc8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	3301      	adds	r3, #1
 800ba30:	607b      	str	r3, [r7, #4]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2b37      	cmp	r3, #55	; 0x37
 800ba36:	d9ef      	bls.n	800ba18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ba38:	480d      	ldr	r0, [pc, #52]	; (800ba70 <prvInitialiseTaskLists+0x64>)
 800ba3a:	f7fe f9c5 	bl	8009dc8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ba3e:	480d      	ldr	r0, [pc, #52]	; (800ba74 <prvInitialiseTaskLists+0x68>)
 800ba40:	f7fe f9c2 	bl	8009dc8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ba44:	480c      	ldr	r0, [pc, #48]	; (800ba78 <prvInitialiseTaskLists+0x6c>)
 800ba46:	f7fe f9bf 	bl	8009dc8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ba4a:	480c      	ldr	r0, [pc, #48]	; (800ba7c <prvInitialiseTaskLists+0x70>)
 800ba4c:	f7fe f9bc 	bl	8009dc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ba50:	480b      	ldr	r0, [pc, #44]	; (800ba80 <prvInitialiseTaskLists+0x74>)
 800ba52:	f7fe f9b9 	bl	8009dc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ba56:	4b0b      	ldr	r3, [pc, #44]	; (800ba84 <prvInitialiseTaskLists+0x78>)
 800ba58:	4a05      	ldr	r2, [pc, #20]	; (800ba70 <prvInitialiseTaskLists+0x64>)
 800ba5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ba5c:	4b0a      	ldr	r3, [pc, #40]	; (800ba88 <prvInitialiseTaskLists+0x7c>)
 800ba5e:	4a05      	ldr	r2, [pc, #20]	; (800ba74 <prvInitialiseTaskLists+0x68>)
 800ba60:	601a      	str	r2, [r3, #0]
}
 800ba62:	bf00      	nop
 800ba64:	3708      	adds	r7, #8
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}
 800ba6a:	bf00      	nop
 800ba6c:	20000d3c 	.word	0x20000d3c
 800ba70:	2000119c 	.word	0x2000119c
 800ba74:	200011b0 	.word	0x200011b0
 800ba78:	200011cc 	.word	0x200011cc
 800ba7c:	200011e0 	.word	0x200011e0
 800ba80:	200011f8 	.word	0x200011f8
 800ba84:	200011c4 	.word	0x200011c4
 800ba88:	200011c8 	.word	0x200011c8

0800ba8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b082      	sub	sp, #8
 800ba90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba92:	e019      	b.n	800bac8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ba94:	f000 fece 	bl	800c834 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba98:	4b10      	ldr	r3, [pc, #64]	; (800badc <prvCheckTasksWaitingTermination+0x50>)
 800ba9a:	68db      	ldr	r3, [r3, #12]
 800ba9c:	68db      	ldr	r3, [r3, #12]
 800ba9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	3304      	adds	r3, #4
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7fe fa19 	bl	8009edc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800baaa:	4b0d      	ldr	r3, [pc, #52]	; (800bae0 <prvCheckTasksWaitingTermination+0x54>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	3b01      	subs	r3, #1
 800bab0:	4a0b      	ldr	r2, [pc, #44]	; (800bae0 <prvCheckTasksWaitingTermination+0x54>)
 800bab2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bab4:	4b0b      	ldr	r3, [pc, #44]	; (800bae4 <prvCheckTasksWaitingTermination+0x58>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	3b01      	subs	r3, #1
 800baba:	4a0a      	ldr	r2, [pc, #40]	; (800bae4 <prvCheckTasksWaitingTermination+0x58>)
 800babc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800babe:	f000 fee9 	bl	800c894 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f000 f810 	bl	800bae8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bac8:	4b06      	ldr	r3, [pc, #24]	; (800bae4 <prvCheckTasksWaitingTermination+0x58>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d1e1      	bne.n	800ba94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bad0:	bf00      	nop
 800bad2:	bf00      	nop
 800bad4:	3708      	adds	r7, #8
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}
 800bada:	bf00      	nop
 800badc:	200011e0 	.word	0x200011e0
 800bae0:	2000120c 	.word	0x2000120c
 800bae4:	200011f4 	.word	0x200011f4

0800bae8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d108      	bne.n	800bb0c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bafe:	4618      	mov	r0, r3
 800bb00:	f001 f886 	bl	800cc10 <vPortFree>
				vPortFree( pxTCB );
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f001 f883 	bl	800cc10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bb0a:	e018      	b.n	800bb3e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bb12:	2b01      	cmp	r3, #1
 800bb14:	d103      	bne.n	800bb1e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f001 f87a 	bl	800cc10 <vPortFree>
	}
 800bb1c:	e00f      	b.n	800bb3e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bb24:	2b02      	cmp	r3, #2
 800bb26:	d00a      	beq.n	800bb3e <prvDeleteTCB+0x56>
	__asm volatile
 800bb28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb2c:	f383 8811 	msr	BASEPRI, r3
 800bb30:	f3bf 8f6f 	isb	sy
 800bb34:	f3bf 8f4f 	dsb	sy
 800bb38:	60fb      	str	r3, [r7, #12]
}
 800bb3a:	bf00      	nop
 800bb3c:	e7fe      	b.n	800bb3c <prvDeleteTCB+0x54>
	}
 800bb3e:	bf00      	nop
 800bb40:	3710      	adds	r7, #16
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
	...

0800bb48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b083      	sub	sp, #12
 800bb4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb4e:	4b0c      	ldr	r3, [pc, #48]	; (800bb80 <prvResetNextTaskUnblockTime+0x38>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d104      	bne.n	800bb62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bb58:	4b0a      	ldr	r3, [pc, #40]	; (800bb84 <prvResetNextTaskUnblockTime+0x3c>)
 800bb5a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bb60:	e008      	b.n	800bb74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb62:	4b07      	ldr	r3, [pc, #28]	; (800bb80 <prvResetNextTaskUnblockTime+0x38>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	68db      	ldr	r3, [r3, #12]
 800bb68:	68db      	ldr	r3, [r3, #12]
 800bb6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	4a04      	ldr	r2, [pc, #16]	; (800bb84 <prvResetNextTaskUnblockTime+0x3c>)
 800bb72:	6013      	str	r3, [r2, #0]
}
 800bb74:	bf00      	nop
 800bb76:	370c      	adds	r7, #12
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7e:	4770      	bx	lr
 800bb80:	200011c4 	.word	0x200011c4
 800bb84:	2000122c 	.word	0x2000122c

0800bb88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bb88:	b480      	push	{r7}
 800bb8a:	b083      	sub	sp, #12
 800bb8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bb8e:	4b0b      	ldr	r3, [pc, #44]	; (800bbbc <xTaskGetSchedulerState+0x34>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d102      	bne.n	800bb9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bb96:	2301      	movs	r3, #1
 800bb98:	607b      	str	r3, [r7, #4]
 800bb9a:	e008      	b.n	800bbae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb9c:	4b08      	ldr	r3, [pc, #32]	; (800bbc0 <xTaskGetSchedulerState+0x38>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d102      	bne.n	800bbaa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bba4:	2302      	movs	r3, #2
 800bba6:	607b      	str	r3, [r7, #4]
 800bba8:	e001      	b.n	800bbae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bbae:	687b      	ldr	r3, [r7, #4]
	}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	370c      	adds	r7, #12
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr
 800bbbc:	20001218 	.word	0x20001218
 800bbc0:	20001234 	.word	0x20001234

0800bbc4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d051      	beq.n	800bc7e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbde:	4b2a      	ldr	r3, [pc, #168]	; (800bc88 <xTaskPriorityInherit+0xc4>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d241      	bcs.n	800bc6c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	699b      	ldr	r3, [r3, #24]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	db06      	blt.n	800bbfe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbf0:	4b25      	ldr	r3, [pc, #148]	; (800bc88 <xTaskPriorityInherit+0xc4>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	6959      	ldr	r1, [r3, #20]
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc06:	4613      	mov	r3, r2
 800bc08:	009b      	lsls	r3, r3, #2
 800bc0a:	4413      	add	r3, r2
 800bc0c:	009b      	lsls	r3, r3, #2
 800bc0e:	4a1f      	ldr	r2, [pc, #124]	; (800bc8c <xTaskPriorityInherit+0xc8>)
 800bc10:	4413      	add	r3, r2
 800bc12:	4299      	cmp	r1, r3
 800bc14:	d122      	bne.n	800bc5c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	3304      	adds	r3, #4
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f7fe f95e 	bl	8009edc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bc20:	4b19      	ldr	r3, [pc, #100]	; (800bc88 <xTaskPriorityInherit+0xc4>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc2e:	4b18      	ldr	r3, [pc, #96]	; (800bc90 <xTaskPriorityInherit+0xcc>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d903      	bls.n	800bc3e <xTaskPriorityInherit+0x7a>
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc3a:	4a15      	ldr	r2, [pc, #84]	; (800bc90 <xTaskPriorityInherit+0xcc>)
 800bc3c:	6013      	str	r3, [r2, #0]
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc42:	4613      	mov	r3, r2
 800bc44:	009b      	lsls	r3, r3, #2
 800bc46:	4413      	add	r3, r2
 800bc48:	009b      	lsls	r3, r3, #2
 800bc4a:	4a10      	ldr	r2, [pc, #64]	; (800bc8c <xTaskPriorityInherit+0xc8>)
 800bc4c:	441a      	add	r2, r3
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	3304      	adds	r3, #4
 800bc52:	4619      	mov	r1, r3
 800bc54:	4610      	mov	r0, r2
 800bc56:	f7fe f8e4 	bl	8009e22 <vListInsertEnd>
 800bc5a:	e004      	b.n	800bc66 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bc5c:	4b0a      	ldr	r3, [pc, #40]	; (800bc88 <xTaskPriorityInherit+0xc4>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bc66:	2301      	movs	r3, #1
 800bc68:	60fb      	str	r3, [r7, #12]
 800bc6a:	e008      	b.n	800bc7e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bc70:	4b05      	ldr	r3, [pc, #20]	; (800bc88 <xTaskPriorityInherit+0xc4>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d201      	bcs.n	800bc7e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
	}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3710      	adds	r7, #16
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}
 800bc88:	20000d38 	.word	0x20000d38
 800bc8c:	20000d3c 	.word	0x20000d3c
 800bc90:	20001214 	.word	0x20001214

0800bc94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b086      	sub	sp, #24
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bca0:	2300      	movs	r3, #0
 800bca2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d056      	beq.n	800bd58 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bcaa:	4b2e      	ldr	r3, [pc, #184]	; (800bd64 <xTaskPriorityDisinherit+0xd0>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	693a      	ldr	r2, [r7, #16]
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d00a      	beq.n	800bcca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bcb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb8:	f383 8811 	msr	BASEPRI, r3
 800bcbc:	f3bf 8f6f 	isb	sy
 800bcc0:	f3bf 8f4f 	dsb	sy
 800bcc4:	60fb      	str	r3, [r7, #12]
}
 800bcc6:	bf00      	nop
 800bcc8:	e7fe      	b.n	800bcc8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d10a      	bne.n	800bce8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bcd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd6:	f383 8811 	msr	BASEPRI, r3
 800bcda:	f3bf 8f6f 	isb	sy
 800bcde:	f3bf 8f4f 	dsb	sy
 800bce2:	60bb      	str	r3, [r7, #8]
}
 800bce4:	bf00      	nop
 800bce6:	e7fe      	b.n	800bce6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcec:	1e5a      	subs	r2, r3, #1
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d02c      	beq.n	800bd58 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d128      	bne.n	800bd58 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	3304      	adds	r3, #4
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f7fe f8e6 	bl	8009edc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd1c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd28:	4b0f      	ldr	r3, [pc, #60]	; (800bd68 <xTaskPriorityDisinherit+0xd4>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d903      	bls.n	800bd38 <xTaskPriorityDisinherit+0xa4>
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd34:	4a0c      	ldr	r2, [pc, #48]	; (800bd68 <xTaskPriorityDisinherit+0xd4>)
 800bd36:	6013      	str	r3, [r2, #0]
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd3c:	4613      	mov	r3, r2
 800bd3e:	009b      	lsls	r3, r3, #2
 800bd40:	4413      	add	r3, r2
 800bd42:	009b      	lsls	r3, r3, #2
 800bd44:	4a09      	ldr	r2, [pc, #36]	; (800bd6c <xTaskPriorityDisinherit+0xd8>)
 800bd46:	441a      	add	r2, r3
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	3304      	adds	r3, #4
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	4610      	mov	r0, r2
 800bd50:	f7fe f867 	bl	8009e22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bd54:	2301      	movs	r3, #1
 800bd56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bd58:	697b      	ldr	r3, [r7, #20]
	}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3718      	adds	r7, #24
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	20000d38 	.word	0x20000d38
 800bd68:	20001214 	.word	0x20001214
 800bd6c:	20000d3c 	.word	0x20000d3c

0800bd70 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b088      	sub	sp, #32
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bd7e:	2301      	movs	r3, #1
 800bd80:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d06a      	beq.n	800be5e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bd88:	69bb      	ldr	r3, [r7, #24]
 800bd8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d10a      	bne.n	800bda6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800bd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd94:	f383 8811 	msr	BASEPRI, r3
 800bd98:	f3bf 8f6f 	isb	sy
 800bd9c:	f3bf 8f4f 	dsb	sy
 800bda0:	60fb      	str	r3, [r7, #12]
}
 800bda2:	bf00      	nop
 800bda4:	e7fe      	b.n	800bda4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bda6:	69bb      	ldr	r3, [r7, #24]
 800bda8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdaa:	683a      	ldr	r2, [r7, #0]
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d902      	bls.n	800bdb6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	61fb      	str	r3, [r7, #28]
 800bdb4:	e002      	b.n	800bdbc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bdb6:	69bb      	ldr	r3, [r7, #24]
 800bdb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdba:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bdbc:	69bb      	ldr	r3, [r7, #24]
 800bdbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc0:	69fa      	ldr	r2, [r7, #28]
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d04b      	beq.n	800be5e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bdc6:	69bb      	ldr	r3, [r7, #24]
 800bdc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdca:	697a      	ldr	r2, [r7, #20]
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d146      	bne.n	800be5e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bdd0:	4b25      	ldr	r3, [pc, #148]	; (800be68 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	69ba      	ldr	r2, [r7, #24]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d10a      	bne.n	800bdf0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800bdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdde:	f383 8811 	msr	BASEPRI, r3
 800bde2:	f3bf 8f6f 	isb	sy
 800bde6:	f3bf 8f4f 	dsb	sy
 800bdea:	60bb      	str	r3, [r7, #8]
}
 800bdec:	bf00      	nop
 800bdee:	e7fe      	b.n	800bdee <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bdf0:	69bb      	ldr	r3, [r7, #24]
 800bdf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bdf6:	69bb      	ldr	r3, [r7, #24]
 800bdf8:	69fa      	ldr	r2, [r7, #28]
 800bdfa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bdfc:	69bb      	ldr	r3, [r7, #24]
 800bdfe:	699b      	ldr	r3, [r3, #24]
 800be00:	2b00      	cmp	r3, #0
 800be02:	db04      	blt.n	800be0e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be04:	69fb      	ldr	r3, [r7, #28]
 800be06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800be0a:	69bb      	ldr	r3, [r7, #24]
 800be0c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800be0e:	69bb      	ldr	r3, [r7, #24]
 800be10:	6959      	ldr	r1, [r3, #20]
 800be12:	693a      	ldr	r2, [r7, #16]
 800be14:	4613      	mov	r3, r2
 800be16:	009b      	lsls	r3, r3, #2
 800be18:	4413      	add	r3, r2
 800be1a:	009b      	lsls	r3, r3, #2
 800be1c:	4a13      	ldr	r2, [pc, #76]	; (800be6c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800be1e:	4413      	add	r3, r2
 800be20:	4299      	cmp	r1, r3
 800be22:	d11c      	bne.n	800be5e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be24:	69bb      	ldr	r3, [r7, #24]
 800be26:	3304      	adds	r3, #4
 800be28:	4618      	mov	r0, r3
 800be2a:	f7fe f857 	bl	8009edc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800be2e:	69bb      	ldr	r3, [r7, #24]
 800be30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be32:	4b0f      	ldr	r3, [pc, #60]	; (800be70 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	429a      	cmp	r2, r3
 800be38:	d903      	bls.n	800be42 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800be3a:	69bb      	ldr	r3, [r7, #24]
 800be3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be3e:	4a0c      	ldr	r2, [pc, #48]	; (800be70 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800be40:	6013      	str	r3, [r2, #0]
 800be42:	69bb      	ldr	r3, [r7, #24]
 800be44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be46:	4613      	mov	r3, r2
 800be48:	009b      	lsls	r3, r3, #2
 800be4a:	4413      	add	r3, r2
 800be4c:	009b      	lsls	r3, r3, #2
 800be4e:	4a07      	ldr	r2, [pc, #28]	; (800be6c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800be50:	441a      	add	r2, r3
 800be52:	69bb      	ldr	r3, [r7, #24]
 800be54:	3304      	adds	r3, #4
 800be56:	4619      	mov	r1, r3
 800be58:	4610      	mov	r0, r2
 800be5a:	f7fd ffe2 	bl	8009e22 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800be5e:	bf00      	nop
 800be60:	3720      	adds	r7, #32
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}
 800be66:	bf00      	nop
 800be68:	20000d38 	.word	0x20000d38
 800be6c:	20000d3c 	.word	0x20000d3c
 800be70:	20001214 	.word	0x20001214

0800be74 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800be74:	b480      	push	{r7}
 800be76:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800be78:	4b07      	ldr	r3, [pc, #28]	; (800be98 <pvTaskIncrementMutexHeldCount+0x24>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d004      	beq.n	800be8a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800be80:	4b05      	ldr	r3, [pc, #20]	; (800be98 <pvTaskIncrementMutexHeldCount+0x24>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800be86:	3201      	adds	r2, #1
 800be88:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800be8a:	4b03      	ldr	r3, [pc, #12]	; (800be98 <pvTaskIncrementMutexHeldCount+0x24>)
 800be8c:	681b      	ldr	r3, [r3, #0]
	}
 800be8e:	4618      	mov	r0, r3
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr
 800be98:	20000d38 	.word	0x20000d38

0800be9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b084      	sub	sp, #16
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bea6:	4b21      	ldr	r3, [pc, #132]	; (800bf2c <prvAddCurrentTaskToDelayedList+0x90>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800beac:	4b20      	ldr	r3, [pc, #128]	; (800bf30 <prvAddCurrentTaskToDelayedList+0x94>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	3304      	adds	r3, #4
 800beb2:	4618      	mov	r0, r3
 800beb4:	f7fe f812 	bl	8009edc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bebe:	d10a      	bne.n	800bed6 <prvAddCurrentTaskToDelayedList+0x3a>
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d007      	beq.n	800bed6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bec6:	4b1a      	ldr	r3, [pc, #104]	; (800bf30 <prvAddCurrentTaskToDelayedList+0x94>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	3304      	adds	r3, #4
 800becc:	4619      	mov	r1, r3
 800bece:	4819      	ldr	r0, [pc, #100]	; (800bf34 <prvAddCurrentTaskToDelayedList+0x98>)
 800bed0:	f7fd ffa7 	bl	8009e22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bed4:	e026      	b.n	800bf24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bed6:	68fa      	ldr	r2, [r7, #12]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	4413      	add	r3, r2
 800bedc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bede:	4b14      	ldr	r3, [pc, #80]	; (800bf30 <prvAddCurrentTaskToDelayedList+0x94>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	68ba      	ldr	r2, [r7, #8]
 800bee4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bee6:	68ba      	ldr	r2, [r7, #8]
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	429a      	cmp	r2, r3
 800beec:	d209      	bcs.n	800bf02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800beee:	4b12      	ldr	r3, [pc, #72]	; (800bf38 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bef0:	681a      	ldr	r2, [r3, #0]
 800bef2:	4b0f      	ldr	r3, [pc, #60]	; (800bf30 <prvAddCurrentTaskToDelayedList+0x94>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	3304      	adds	r3, #4
 800bef8:	4619      	mov	r1, r3
 800befa:	4610      	mov	r0, r2
 800befc:	f7fd ffb5 	bl	8009e6a <vListInsert>
}
 800bf00:	e010      	b.n	800bf24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf02:	4b0e      	ldr	r3, [pc, #56]	; (800bf3c <prvAddCurrentTaskToDelayedList+0xa0>)
 800bf04:	681a      	ldr	r2, [r3, #0]
 800bf06:	4b0a      	ldr	r3, [pc, #40]	; (800bf30 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	3304      	adds	r3, #4
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	4610      	mov	r0, r2
 800bf10:	f7fd ffab 	bl	8009e6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bf14:	4b0a      	ldr	r3, [pc, #40]	; (800bf40 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	68ba      	ldr	r2, [r7, #8]
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d202      	bcs.n	800bf24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bf1e:	4a08      	ldr	r2, [pc, #32]	; (800bf40 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	6013      	str	r3, [r2, #0]
}
 800bf24:	bf00      	nop
 800bf26:	3710      	adds	r7, #16
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}
 800bf2c:	20001210 	.word	0x20001210
 800bf30:	20000d38 	.word	0x20000d38
 800bf34:	200011f8 	.word	0x200011f8
 800bf38:	200011c8 	.word	0x200011c8
 800bf3c:	200011c4 	.word	0x200011c4
 800bf40:	2000122c 	.word	0x2000122c

0800bf44 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b08a      	sub	sp, #40	; 0x28
 800bf48:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bf4e:	f000 fb07 	bl	800c560 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bf52:	4b1c      	ldr	r3, [pc, #112]	; (800bfc4 <xTimerCreateTimerTask+0x80>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d021      	beq.n	800bf9e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bf62:	1d3a      	adds	r2, r7, #4
 800bf64:	f107 0108 	add.w	r1, r7, #8
 800bf68:	f107 030c 	add.w	r3, r7, #12
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f7fd ff11 	bl	8009d94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bf72:	6879      	ldr	r1, [r7, #4]
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	68fa      	ldr	r2, [r7, #12]
 800bf78:	9202      	str	r2, [sp, #8]
 800bf7a:	9301      	str	r3, [sp, #4]
 800bf7c:	2302      	movs	r3, #2
 800bf7e:	9300      	str	r3, [sp, #0]
 800bf80:	2300      	movs	r3, #0
 800bf82:	460a      	mov	r2, r1
 800bf84:	4910      	ldr	r1, [pc, #64]	; (800bfc8 <xTimerCreateTimerTask+0x84>)
 800bf86:	4811      	ldr	r0, [pc, #68]	; (800bfcc <xTimerCreateTimerTask+0x88>)
 800bf88:	f7fe ffe0 	bl	800af4c <xTaskCreateStatic>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	4a10      	ldr	r2, [pc, #64]	; (800bfd0 <xTimerCreateTimerTask+0x8c>)
 800bf90:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bf92:	4b0f      	ldr	r3, [pc, #60]	; (800bfd0 <xTimerCreateTimerTask+0x8c>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d001      	beq.n	800bf9e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bf9e:	697b      	ldr	r3, [r7, #20]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d10a      	bne.n	800bfba <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bfa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa8:	f383 8811 	msr	BASEPRI, r3
 800bfac:	f3bf 8f6f 	isb	sy
 800bfb0:	f3bf 8f4f 	dsb	sy
 800bfb4:	613b      	str	r3, [r7, #16]
}
 800bfb6:	bf00      	nop
 800bfb8:	e7fe      	b.n	800bfb8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bfba:	697b      	ldr	r3, [r7, #20]
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3718      	adds	r7, #24
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}
 800bfc4:	20001268 	.word	0x20001268
 800bfc8:	08010678 	.word	0x08010678
 800bfcc:	0800c109 	.word	0x0800c109
 800bfd0:	2000126c 	.word	0x2000126c

0800bfd4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b08a      	sub	sp, #40	; 0x28
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	60f8      	str	r0, [r7, #12]
 800bfdc:	60b9      	str	r1, [r7, #8]
 800bfde:	607a      	str	r2, [r7, #4]
 800bfe0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d10a      	bne.n	800c002 <xTimerGenericCommand+0x2e>
	__asm volatile
 800bfec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff0:	f383 8811 	msr	BASEPRI, r3
 800bff4:	f3bf 8f6f 	isb	sy
 800bff8:	f3bf 8f4f 	dsb	sy
 800bffc:	623b      	str	r3, [r7, #32]
}
 800bffe:	bf00      	nop
 800c000:	e7fe      	b.n	800c000 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c002:	4b1a      	ldr	r3, [pc, #104]	; (800c06c <xTimerGenericCommand+0x98>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d02a      	beq.n	800c060 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	2b05      	cmp	r3, #5
 800c01a:	dc18      	bgt.n	800c04e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c01c:	f7ff fdb4 	bl	800bb88 <xTaskGetSchedulerState>
 800c020:	4603      	mov	r3, r0
 800c022:	2b02      	cmp	r3, #2
 800c024:	d109      	bne.n	800c03a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c026:	4b11      	ldr	r3, [pc, #68]	; (800c06c <xTimerGenericCommand+0x98>)
 800c028:	6818      	ldr	r0, [r3, #0]
 800c02a:	f107 0110 	add.w	r1, r7, #16
 800c02e:	2300      	movs	r3, #0
 800c030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c032:	f7fe f925 	bl	800a280 <xQueueGenericSend>
 800c036:	6278      	str	r0, [r7, #36]	; 0x24
 800c038:	e012      	b.n	800c060 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c03a:	4b0c      	ldr	r3, [pc, #48]	; (800c06c <xTimerGenericCommand+0x98>)
 800c03c:	6818      	ldr	r0, [r3, #0]
 800c03e:	f107 0110 	add.w	r1, r7, #16
 800c042:	2300      	movs	r3, #0
 800c044:	2200      	movs	r2, #0
 800c046:	f7fe f91b 	bl	800a280 <xQueueGenericSend>
 800c04a:	6278      	str	r0, [r7, #36]	; 0x24
 800c04c:	e008      	b.n	800c060 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c04e:	4b07      	ldr	r3, [pc, #28]	; (800c06c <xTimerGenericCommand+0x98>)
 800c050:	6818      	ldr	r0, [r3, #0]
 800c052:	f107 0110 	add.w	r1, r7, #16
 800c056:	2300      	movs	r3, #0
 800c058:	683a      	ldr	r2, [r7, #0]
 800c05a:	f7fe fa0f 	bl	800a47c <xQueueGenericSendFromISR>
 800c05e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c062:	4618      	mov	r0, r3
 800c064:	3728      	adds	r7, #40	; 0x28
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
 800c06a:	bf00      	nop
 800c06c:	20001268 	.word	0x20001268

0800c070 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b088      	sub	sp, #32
 800c074:	af02      	add	r7, sp, #8
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c07a:	4b22      	ldr	r3, [pc, #136]	; (800c104 <prvProcessExpiredTimer+0x94>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	68db      	ldr	r3, [r3, #12]
 800c080:	68db      	ldr	r3, [r3, #12]
 800c082:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	3304      	adds	r3, #4
 800c088:	4618      	mov	r0, r3
 800c08a:	f7fd ff27 	bl	8009edc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c094:	f003 0304 	and.w	r3, r3, #4
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d022      	beq.n	800c0e2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	699a      	ldr	r2, [r3, #24]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	18d1      	adds	r1, r2, r3
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	683a      	ldr	r2, [r7, #0]
 800c0a8:	6978      	ldr	r0, [r7, #20]
 800c0aa:	f000 f8d1 	bl	800c250 <prvInsertTimerInActiveList>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d01f      	beq.n	800c0f4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	9300      	str	r3, [sp, #0]
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	687a      	ldr	r2, [r7, #4]
 800c0bc:	2100      	movs	r1, #0
 800c0be:	6978      	ldr	r0, [r7, #20]
 800c0c0:	f7ff ff88 	bl	800bfd4 <xTimerGenericCommand>
 800c0c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d113      	bne.n	800c0f4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d0:	f383 8811 	msr	BASEPRI, r3
 800c0d4:	f3bf 8f6f 	isb	sy
 800c0d8:	f3bf 8f4f 	dsb	sy
 800c0dc:	60fb      	str	r3, [r7, #12]
}
 800c0de:	bf00      	nop
 800c0e0:	e7fe      	b.n	800c0e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0e8:	f023 0301 	bic.w	r3, r3, #1
 800c0ec:	b2da      	uxtb	r2, r3
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	6a1b      	ldr	r3, [r3, #32]
 800c0f8:	6978      	ldr	r0, [r7, #20]
 800c0fa:	4798      	blx	r3
}
 800c0fc:	bf00      	nop
 800c0fe:	3718      	adds	r7, #24
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}
 800c104:	20001260 	.word	0x20001260

0800c108 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b084      	sub	sp, #16
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c110:	f107 0308 	add.w	r3, r7, #8
 800c114:	4618      	mov	r0, r3
 800c116:	f000 f857 	bl	800c1c8 <prvGetNextExpireTime>
 800c11a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	4619      	mov	r1, r3
 800c120:	68f8      	ldr	r0, [r7, #12]
 800c122:	f000 f803 	bl	800c12c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c126:	f000 f8d5 	bl	800c2d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c12a:	e7f1      	b.n	800c110 <prvTimerTask+0x8>

0800c12c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b084      	sub	sp, #16
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c136:	f7ff f945 	bl	800b3c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c13a:	f107 0308 	add.w	r3, r7, #8
 800c13e:	4618      	mov	r0, r3
 800c140:	f000 f866 	bl	800c210 <prvSampleTimeNow>
 800c144:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d130      	bne.n	800c1ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d10a      	bne.n	800c168 <prvProcessTimerOrBlockTask+0x3c>
 800c152:	687a      	ldr	r2, [r7, #4]
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	429a      	cmp	r2, r3
 800c158:	d806      	bhi.n	800c168 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c15a:	f7ff f941 	bl	800b3e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c15e:	68f9      	ldr	r1, [r7, #12]
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f7ff ff85 	bl	800c070 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c166:	e024      	b.n	800c1b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d008      	beq.n	800c180 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c16e:	4b13      	ldr	r3, [pc, #76]	; (800c1bc <prvProcessTimerOrBlockTask+0x90>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d101      	bne.n	800c17c <prvProcessTimerOrBlockTask+0x50>
 800c178:	2301      	movs	r3, #1
 800c17a:	e000      	b.n	800c17e <prvProcessTimerOrBlockTask+0x52>
 800c17c:	2300      	movs	r3, #0
 800c17e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c180:	4b0f      	ldr	r3, [pc, #60]	; (800c1c0 <prvProcessTimerOrBlockTask+0x94>)
 800c182:	6818      	ldr	r0, [r3, #0]
 800c184:	687a      	ldr	r2, [r7, #4]
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	1ad3      	subs	r3, r2, r3
 800c18a:	683a      	ldr	r2, [r7, #0]
 800c18c:	4619      	mov	r1, r3
 800c18e:	f7fe fea9 	bl	800aee4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c192:	f7ff f925 	bl	800b3e0 <xTaskResumeAll>
 800c196:	4603      	mov	r3, r0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d10a      	bne.n	800c1b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c19c:	4b09      	ldr	r3, [pc, #36]	; (800c1c4 <prvProcessTimerOrBlockTask+0x98>)
 800c19e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1a2:	601a      	str	r2, [r3, #0]
 800c1a4:	f3bf 8f4f 	dsb	sy
 800c1a8:	f3bf 8f6f 	isb	sy
}
 800c1ac:	e001      	b.n	800c1b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c1ae:	f7ff f917 	bl	800b3e0 <xTaskResumeAll>
}
 800c1b2:	bf00      	nop
 800c1b4:	3710      	adds	r7, #16
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	20001264 	.word	0x20001264
 800c1c0:	20001268 	.word	0x20001268
 800c1c4:	e000ed04 	.word	0xe000ed04

0800c1c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b085      	sub	sp, #20
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c1d0:	4b0e      	ldr	r3, [pc, #56]	; (800c20c <prvGetNextExpireTime+0x44>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d101      	bne.n	800c1de <prvGetNextExpireTime+0x16>
 800c1da:	2201      	movs	r2, #1
 800c1dc:	e000      	b.n	800c1e0 <prvGetNextExpireTime+0x18>
 800c1de:	2200      	movs	r2, #0
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d105      	bne.n	800c1f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c1ec:	4b07      	ldr	r3, [pc, #28]	; (800c20c <prvGetNextExpireTime+0x44>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	68db      	ldr	r3, [r3, #12]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	60fb      	str	r3, [r7, #12]
 800c1f6:	e001      	b.n	800c1fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3714      	adds	r7, #20
 800c202:	46bd      	mov	sp, r7
 800c204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c208:	4770      	bx	lr
 800c20a:	bf00      	nop
 800c20c:	20001260 	.word	0x20001260

0800c210 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b084      	sub	sp, #16
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c218:	f7ff f980 	bl	800b51c <xTaskGetTickCount>
 800c21c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c21e:	4b0b      	ldr	r3, [pc, #44]	; (800c24c <prvSampleTimeNow+0x3c>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	68fa      	ldr	r2, [r7, #12]
 800c224:	429a      	cmp	r2, r3
 800c226:	d205      	bcs.n	800c234 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c228:	f000 f936 	bl	800c498 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2201      	movs	r2, #1
 800c230:	601a      	str	r2, [r3, #0]
 800c232:	e002      	b.n	800c23a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2200      	movs	r2, #0
 800c238:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c23a:	4a04      	ldr	r2, [pc, #16]	; (800c24c <prvSampleTimeNow+0x3c>)
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c240:	68fb      	ldr	r3, [r7, #12]
}
 800c242:	4618      	mov	r0, r3
 800c244:	3710      	adds	r7, #16
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
 800c24a:	bf00      	nop
 800c24c:	20001270 	.word	0x20001270

0800c250 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b086      	sub	sp, #24
 800c254:	af00      	add	r7, sp, #0
 800c256:	60f8      	str	r0, [r7, #12]
 800c258:	60b9      	str	r1, [r7, #8]
 800c25a:	607a      	str	r2, [r7, #4]
 800c25c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c25e:	2300      	movs	r3, #0
 800c260:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	68ba      	ldr	r2, [r7, #8]
 800c266:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	68fa      	ldr	r2, [r7, #12]
 800c26c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c26e:	68ba      	ldr	r2, [r7, #8]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	429a      	cmp	r2, r3
 800c274:	d812      	bhi.n	800c29c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	1ad2      	subs	r2, r2, r3
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	699b      	ldr	r3, [r3, #24]
 800c280:	429a      	cmp	r2, r3
 800c282:	d302      	bcc.n	800c28a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c284:	2301      	movs	r3, #1
 800c286:	617b      	str	r3, [r7, #20]
 800c288:	e01b      	b.n	800c2c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c28a:	4b10      	ldr	r3, [pc, #64]	; (800c2cc <prvInsertTimerInActiveList+0x7c>)
 800c28c:	681a      	ldr	r2, [r3, #0]
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	3304      	adds	r3, #4
 800c292:	4619      	mov	r1, r3
 800c294:	4610      	mov	r0, r2
 800c296:	f7fd fde8 	bl	8009e6a <vListInsert>
 800c29a:	e012      	b.n	800c2c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c29c:	687a      	ldr	r2, [r7, #4]
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d206      	bcs.n	800c2b2 <prvInsertTimerInActiveList+0x62>
 800c2a4:	68ba      	ldr	r2, [r7, #8]
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d302      	bcc.n	800c2b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	617b      	str	r3, [r7, #20]
 800c2b0:	e007      	b.n	800c2c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c2b2:	4b07      	ldr	r3, [pc, #28]	; (800c2d0 <prvInsertTimerInActiveList+0x80>)
 800c2b4:	681a      	ldr	r2, [r3, #0]
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	3304      	adds	r3, #4
 800c2ba:	4619      	mov	r1, r3
 800c2bc:	4610      	mov	r0, r2
 800c2be:	f7fd fdd4 	bl	8009e6a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c2c2:	697b      	ldr	r3, [r7, #20]
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3718      	adds	r7, #24
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}
 800c2cc:	20001264 	.word	0x20001264
 800c2d0:	20001260 	.word	0x20001260

0800c2d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b08e      	sub	sp, #56	; 0x38
 800c2d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c2da:	e0ca      	b.n	800c472 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	da18      	bge.n	800c314 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c2e2:	1d3b      	adds	r3, r7, #4
 800c2e4:	3304      	adds	r3, #4
 800c2e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d10a      	bne.n	800c304 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f2:	f383 8811 	msr	BASEPRI, r3
 800c2f6:	f3bf 8f6f 	isb	sy
 800c2fa:	f3bf 8f4f 	dsb	sy
 800c2fe:	61fb      	str	r3, [r7, #28]
}
 800c300:	bf00      	nop
 800c302:	e7fe      	b.n	800c302 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c30a:	6850      	ldr	r0, [r2, #4]
 800c30c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c30e:	6892      	ldr	r2, [r2, #8]
 800c310:	4611      	mov	r1, r2
 800c312:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2b00      	cmp	r3, #0
 800c318:	f2c0 80aa 	blt.w	800c470 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c322:	695b      	ldr	r3, [r3, #20]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d004      	beq.n	800c332 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c32a:	3304      	adds	r3, #4
 800c32c:	4618      	mov	r0, r3
 800c32e:	f7fd fdd5 	bl	8009edc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c332:	463b      	mov	r3, r7
 800c334:	4618      	mov	r0, r3
 800c336:	f7ff ff6b 	bl	800c210 <prvSampleTimeNow>
 800c33a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2b09      	cmp	r3, #9
 800c340:	f200 8097 	bhi.w	800c472 <prvProcessReceivedCommands+0x19e>
 800c344:	a201      	add	r2, pc, #4	; (adr r2, 800c34c <prvProcessReceivedCommands+0x78>)
 800c346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c34a:	bf00      	nop
 800c34c:	0800c375 	.word	0x0800c375
 800c350:	0800c375 	.word	0x0800c375
 800c354:	0800c375 	.word	0x0800c375
 800c358:	0800c3e9 	.word	0x0800c3e9
 800c35c:	0800c3fd 	.word	0x0800c3fd
 800c360:	0800c447 	.word	0x0800c447
 800c364:	0800c375 	.word	0x0800c375
 800c368:	0800c375 	.word	0x0800c375
 800c36c:	0800c3e9 	.word	0x0800c3e9
 800c370:	0800c3fd 	.word	0x0800c3fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c376:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c37a:	f043 0301 	orr.w	r3, r3, #1
 800c37e:	b2da      	uxtb	r2, r3
 800c380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c382:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c386:	68ba      	ldr	r2, [r7, #8]
 800c388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c38a:	699b      	ldr	r3, [r3, #24]
 800c38c:	18d1      	adds	r1, r2, r3
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c392:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c394:	f7ff ff5c 	bl	800c250 <prvInsertTimerInActiveList>
 800c398:	4603      	mov	r3, r0
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d069      	beq.n	800c472 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a0:	6a1b      	ldr	r3, [r3, #32]
 800c3a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3ac:	f003 0304 	and.w	r3, r3, #4
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d05e      	beq.n	800c472 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c3b4:	68ba      	ldr	r2, [r7, #8]
 800c3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b8:	699b      	ldr	r3, [r3, #24]
 800c3ba:	441a      	add	r2, r3
 800c3bc:	2300      	movs	r3, #0
 800c3be:	9300      	str	r3, [sp, #0]
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	2100      	movs	r1, #0
 800c3c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3c6:	f7ff fe05 	bl	800bfd4 <xTimerGenericCommand>
 800c3ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c3cc:	6a3b      	ldr	r3, [r7, #32]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d14f      	bne.n	800c472 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d6:	f383 8811 	msr	BASEPRI, r3
 800c3da:	f3bf 8f6f 	isb	sy
 800c3de:	f3bf 8f4f 	dsb	sy
 800c3e2:	61bb      	str	r3, [r7, #24]
}
 800c3e4:	bf00      	nop
 800c3e6:	e7fe      	b.n	800c3e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3ee:	f023 0301 	bic.w	r3, r3, #1
 800c3f2:	b2da      	uxtb	r2, r3
 800c3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c3fa:	e03a      	b.n	800c472 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c402:	f043 0301 	orr.w	r3, r3, #1
 800c406:	b2da      	uxtb	r2, r3
 800c408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c40a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c40e:	68ba      	ldr	r2, [r7, #8]
 800c410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c412:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c416:	699b      	ldr	r3, [r3, #24]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d10a      	bne.n	800c432 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c420:	f383 8811 	msr	BASEPRI, r3
 800c424:	f3bf 8f6f 	isb	sy
 800c428:	f3bf 8f4f 	dsb	sy
 800c42c:	617b      	str	r3, [r7, #20]
}
 800c42e:	bf00      	nop
 800c430:	e7fe      	b.n	800c430 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c434:	699a      	ldr	r2, [r3, #24]
 800c436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c438:	18d1      	adds	r1, r2, r3
 800c43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c43c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c43e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c440:	f7ff ff06 	bl	800c250 <prvInsertTimerInActiveList>
					break;
 800c444:	e015      	b.n	800c472 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c448:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c44c:	f003 0302 	and.w	r3, r3, #2
 800c450:	2b00      	cmp	r3, #0
 800c452:	d103      	bne.n	800c45c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c456:	f000 fbdb 	bl	800cc10 <vPortFree>
 800c45a:	e00a      	b.n	800c472 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c45e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c462:	f023 0301 	bic.w	r3, r3, #1
 800c466:	b2da      	uxtb	r2, r3
 800c468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c46a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c46e:	e000      	b.n	800c472 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c470:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c472:	4b08      	ldr	r3, [pc, #32]	; (800c494 <prvProcessReceivedCommands+0x1c0>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	1d39      	adds	r1, r7, #4
 800c478:	2200      	movs	r2, #0
 800c47a:	4618      	mov	r0, r3
 800c47c:	f7fe f926 	bl	800a6cc <xQueueReceive>
 800c480:	4603      	mov	r3, r0
 800c482:	2b00      	cmp	r3, #0
 800c484:	f47f af2a 	bne.w	800c2dc <prvProcessReceivedCommands+0x8>
	}
}
 800c488:	bf00      	nop
 800c48a:	bf00      	nop
 800c48c:	3730      	adds	r7, #48	; 0x30
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
 800c492:	bf00      	nop
 800c494:	20001268 	.word	0x20001268

0800c498 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b088      	sub	sp, #32
 800c49c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c49e:	e048      	b.n	800c532 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c4a0:	4b2d      	ldr	r3, [pc, #180]	; (800c558 <prvSwitchTimerLists+0xc0>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	68db      	ldr	r3, [r3, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4aa:	4b2b      	ldr	r3, [pc, #172]	; (800c558 <prvSwitchTimerLists+0xc0>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	68db      	ldr	r3, [r3, #12]
 800c4b0:	68db      	ldr	r3, [r3, #12]
 800c4b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	3304      	adds	r3, #4
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f7fd fd0f 	bl	8009edc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	6a1b      	ldr	r3, [r3, #32]
 800c4c2:	68f8      	ldr	r0, [r7, #12]
 800c4c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4cc:	f003 0304 	and.w	r3, r3, #4
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d02e      	beq.n	800c532 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	699b      	ldr	r3, [r3, #24]
 800c4d8:	693a      	ldr	r2, [r7, #16]
 800c4da:	4413      	add	r3, r2
 800c4dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c4de:	68ba      	ldr	r2, [r7, #8]
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	429a      	cmp	r2, r3
 800c4e4:	d90e      	bls.n	800c504 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	68ba      	ldr	r2, [r7, #8]
 800c4ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	68fa      	ldr	r2, [r7, #12]
 800c4f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c4f2:	4b19      	ldr	r3, [pc, #100]	; (800c558 <prvSwitchTimerLists+0xc0>)
 800c4f4:	681a      	ldr	r2, [r3, #0]
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	3304      	adds	r3, #4
 800c4fa:	4619      	mov	r1, r3
 800c4fc:	4610      	mov	r0, r2
 800c4fe:	f7fd fcb4 	bl	8009e6a <vListInsert>
 800c502:	e016      	b.n	800c532 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c504:	2300      	movs	r3, #0
 800c506:	9300      	str	r3, [sp, #0]
 800c508:	2300      	movs	r3, #0
 800c50a:	693a      	ldr	r2, [r7, #16]
 800c50c:	2100      	movs	r1, #0
 800c50e:	68f8      	ldr	r0, [r7, #12]
 800c510:	f7ff fd60 	bl	800bfd4 <xTimerGenericCommand>
 800c514:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d10a      	bne.n	800c532 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c520:	f383 8811 	msr	BASEPRI, r3
 800c524:	f3bf 8f6f 	isb	sy
 800c528:	f3bf 8f4f 	dsb	sy
 800c52c:	603b      	str	r3, [r7, #0]
}
 800c52e:	bf00      	nop
 800c530:	e7fe      	b.n	800c530 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c532:	4b09      	ldr	r3, [pc, #36]	; (800c558 <prvSwitchTimerLists+0xc0>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d1b1      	bne.n	800c4a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c53c:	4b06      	ldr	r3, [pc, #24]	; (800c558 <prvSwitchTimerLists+0xc0>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c542:	4b06      	ldr	r3, [pc, #24]	; (800c55c <prvSwitchTimerLists+0xc4>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	4a04      	ldr	r2, [pc, #16]	; (800c558 <prvSwitchTimerLists+0xc0>)
 800c548:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c54a:	4a04      	ldr	r2, [pc, #16]	; (800c55c <prvSwitchTimerLists+0xc4>)
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	6013      	str	r3, [r2, #0]
}
 800c550:	bf00      	nop
 800c552:	3718      	adds	r7, #24
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}
 800c558:	20001260 	.word	0x20001260
 800c55c:	20001264 	.word	0x20001264

0800c560 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c566:	f000 f965 	bl	800c834 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c56a:	4b15      	ldr	r3, [pc, #84]	; (800c5c0 <prvCheckForValidListAndQueue+0x60>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d120      	bne.n	800c5b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c572:	4814      	ldr	r0, [pc, #80]	; (800c5c4 <prvCheckForValidListAndQueue+0x64>)
 800c574:	f7fd fc28 	bl	8009dc8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c578:	4813      	ldr	r0, [pc, #76]	; (800c5c8 <prvCheckForValidListAndQueue+0x68>)
 800c57a:	f7fd fc25 	bl	8009dc8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c57e:	4b13      	ldr	r3, [pc, #76]	; (800c5cc <prvCheckForValidListAndQueue+0x6c>)
 800c580:	4a10      	ldr	r2, [pc, #64]	; (800c5c4 <prvCheckForValidListAndQueue+0x64>)
 800c582:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c584:	4b12      	ldr	r3, [pc, #72]	; (800c5d0 <prvCheckForValidListAndQueue+0x70>)
 800c586:	4a10      	ldr	r2, [pc, #64]	; (800c5c8 <prvCheckForValidListAndQueue+0x68>)
 800c588:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c58a:	2300      	movs	r3, #0
 800c58c:	9300      	str	r3, [sp, #0]
 800c58e:	4b11      	ldr	r3, [pc, #68]	; (800c5d4 <prvCheckForValidListAndQueue+0x74>)
 800c590:	4a11      	ldr	r2, [pc, #68]	; (800c5d8 <prvCheckForValidListAndQueue+0x78>)
 800c592:	2110      	movs	r1, #16
 800c594:	200a      	movs	r0, #10
 800c596:	f7fd fd33 	bl	800a000 <xQueueGenericCreateStatic>
 800c59a:	4603      	mov	r3, r0
 800c59c:	4a08      	ldr	r2, [pc, #32]	; (800c5c0 <prvCheckForValidListAndQueue+0x60>)
 800c59e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c5a0:	4b07      	ldr	r3, [pc, #28]	; (800c5c0 <prvCheckForValidListAndQueue+0x60>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d005      	beq.n	800c5b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c5a8:	4b05      	ldr	r3, [pc, #20]	; (800c5c0 <prvCheckForValidListAndQueue+0x60>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	490b      	ldr	r1, [pc, #44]	; (800c5dc <prvCheckForValidListAndQueue+0x7c>)
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7fe fc44 	bl	800ae3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c5b4:	f000 f96e 	bl	800c894 <vPortExitCritical>
}
 800c5b8:	bf00      	nop
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	20001268 	.word	0x20001268
 800c5c4:	20001238 	.word	0x20001238
 800c5c8:	2000124c 	.word	0x2000124c
 800c5cc:	20001260 	.word	0x20001260
 800c5d0:	20001264 	.word	0x20001264
 800c5d4:	20001314 	.word	0x20001314
 800c5d8:	20001274 	.word	0x20001274
 800c5dc:	08010680 	.word	0x08010680

0800c5e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b085      	sub	sp, #20
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	60f8      	str	r0, [r7, #12]
 800c5e8:	60b9      	str	r1, [r7, #8]
 800c5ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	3b04      	subs	r3, #4
 800c5f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c5f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	3b04      	subs	r3, #4
 800c5fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	f023 0201 	bic.w	r2, r3, #1
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	3b04      	subs	r3, #4
 800c60e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c610:	4a0c      	ldr	r2, [pc, #48]	; (800c644 <pxPortInitialiseStack+0x64>)
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	3b14      	subs	r3, #20
 800c61a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c61c:	687a      	ldr	r2, [r7, #4]
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	3b04      	subs	r3, #4
 800c626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	f06f 0202 	mvn.w	r2, #2
 800c62e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	3b20      	subs	r3, #32
 800c634:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c636:	68fb      	ldr	r3, [r7, #12]
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3714      	adds	r7, #20
 800c63c:	46bd      	mov	sp, r7
 800c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c642:	4770      	bx	lr
 800c644:	0800c649 	.word	0x0800c649

0800c648 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c648:	b480      	push	{r7}
 800c64a:	b085      	sub	sp, #20
 800c64c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c64e:	2300      	movs	r3, #0
 800c650:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c652:	4b12      	ldr	r3, [pc, #72]	; (800c69c <prvTaskExitError+0x54>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c65a:	d00a      	beq.n	800c672 <prvTaskExitError+0x2a>
	__asm volatile
 800c65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c660:	f383 8811 	msr	BASEPRI, r3
 800c664:	f3bf 8f6f 	isb	sy
 800c668:	f3bf 8f4f 	dsb	sy
 800c66c:	60fb      	str	r3, [r7, #12]
}
 800c66e:	bf00      	nop
 800c670:	e7fe      	b.n	800c670 <prvTaskExitError+0x28>
	__asm volatile
 800c672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c676:	f383 8811 	msr	BASEPRI, r3
 800c67a:	f3bf 8f6f 	isb	sy
 800c67e:	f3bf 8f4f 	dsb	sy
 800c682:	60bb      	str	r3, [r7, #8]
}
 800c684:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c686:	bf00      	nop
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d0fc      	beq.n	800c688 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c68e:	bf00      	nop
 800c690:	bf00      	nop
 800c692:	3714      	adds	r7, #20
 800c694:	46bd      	mov	sp, r7
 800c696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69a:	4770      	bx	lr
 800c69c:	20000024 	.word	0x20000024

0800c6a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c6a0:	4b07      	ldr	r3, [pc, #28]	; (800c6c0 <pxCurrentTCBConst2>)
 800c6a2:	6819      	ldr	r1, [r3, #0]
 800c6a4:	6808      	ldr	r0, [r1, #0]
 800c6a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6aa:	f380 8809 	msr	PSP, r0
 800c6ae:	f3bf 8f6f 	isb	sy
 800c6b2:	f04f 0000 	mov.w	r0, #0
 800c6b6:	f380 8811 	msr	BASEPRI, r0
 800c6ba:	4770      	bx	lr
 800c6bc:	f3af 8000 	nop.w

0800c6c0 <pxCurrentTCBConst2>:
 800c6c0:	20000d38 	.word	0x20000d38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c6c4:	bf00      	nop
 800c6c6:	bf00      	nop

0800c6c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c6c8:	4808      	ldr	r0, [pc, #32]	; (800c6ec <prvPortStartFirstTask+0x24>)
 800c6ca:	6800      	ldr	r0, [r0, #0]
 800c6cc:	6800      	ldr	r0, [r0, #0]
 800c6ce:	f380 8808 	msr	MSP, r0
 800c6d2:	f04f 0000 	mov.w	r0, #0
 800c6d6:	f380 8814 	msr	CONTROL, r0
 800c6da:	b662      	cpsie	i
 800c6dc:	b661      	cpsie	f
 800c6de:	f3bf 8f4f 	dsb	sy
 800c6e2:	f3bf 8f6f 	isb	sy
 800c6e6:	df00      	svc	0
 800c6e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c6ea:	bf00      	nop
 800c6ec:	e000ed08 	.word	0xe000ed08

0800c6f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b086      	sub	sp, #24
 800c6f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c6f6:	4b46      	ldr	r3, [pc, #280]	; (800c810 <xPortStartScheduler+0x120>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	4a46      	ldr	r2, [pc, #280]	; (800c814 <xPortStartScheduler+0x124>)
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d10a      	bne.n	800c716 <xPortStartScheduler+0x26>
	__asm volatile
 800c700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c704:	f383 8811 	msr	BASEPRI, r3
 800c708:	f3bf 8f6f 	isb	sy
 800c70c:	f3bf 8f4f 	dsb	sy
 800c710:	613b      	str	r3, [r7, #16]
}
 800c712:	bf00      	nop
 800c714:	e7fe      	b.n	800c714 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c716:	4b3e      	ldr	r3, [pc, #248]	; (800c810 <xPortStartScheduler+0x120>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4a3f      	ldr	r2, [pc, #252]	; (800c818 <xPortStartScheduler+0x128>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d10a      	bne.n	800c736 <xPortStartScheduler+0x46>
	__asm volatile
 800c720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c724:	f383 8811 	msr	BASEPRI, r3
 800c728:	f3bf 8f6f 	isb	sy
 800c72c:	f3bf 8f4f 	dsb	sy
 800c730:	60fb      	str	r3, [r7, #12]
}
 800c732:	bf00      	nop
 800c734:	e7fe      	b.n	800c734 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c736:	4b39      	ldr	r3, [pc, #228]	; (800c81c <xPortStartScheduler+0x12c>)
 800c738:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	b2db      	uxtb	r3, r3
 800c740:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	22ff      	movs	r2, #255	; 0xff
 800c746:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	b2db      	uxtb	r3, r3
 800c74e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c750:	78fb      	ldrb	r3, [r7, #3]
 800c752:	b2db      	uxtb	r3, r3
 800c754:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c758:	b2da      	uxtb	r2, r3
 800c75a:	4b31      	ldr	r3, [pc, #196]	; (800c820 <xPortStartScheduler+0x130>)
 800c75c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c75e:	4b31      	ldr	r3, [pc, #196]	; (800c824 <xPortStartScheduler+0x134>)
 800c760:	2207      	movs	r2, #7
 800c762:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c764:	e009      	b.n	800c77a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c766:	4b2f      	ldr	r3, [pc, #188]	; (800c824 <xPortStartScheduler+0x134>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	3b01      	subs	r3, #1
 800c76c:	4a2d      	ldr	r2, [pc, #180]	; (800c824 <xPortStartScheduler+0x134>)
 800c76e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c770:	78fb      	ldrb	r3, [r7, #3]
 800c772:	b2db      	uxtb	r3, r3
 800c774:	005b      	lsls	r3, r3, #1
 800c776:	b2db      	uxtb	r3, r3
 800c778:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c77a:	78fb      	ldrb	r3, [r7, #3]
 800c77c:	b2db      	uxtb	r3, r3
 800c77e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c782:	2b80      	cmp	r3, #128	; 0x80
 800c784:	d0ef      	beq.n	800c766 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c786:	4b27      	ldr	r3, [pc, #156]	; (800c824 <xPortStartScheduler+0x134>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f1c3 0307 	rsb	r3, r3, #7
 800c78e:	2b04      	cmp	r3, #4
 800c790:	d00a      	beq.n	800c7a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c796:	f383 8811 	msr	BASEPRI, r3
 800c79a:	f3bf 8f6f 	isb	sy
 800c79e:	f3bf 8f4f 	dsb	sy
 800c7a2:	60bb      	str	r3, [r7, #8]
}
 800c7a4:	bf00      	nop
 800c7a6:	e7fe      	b.n	800c7a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c7a8:	4b1e      	ldr	r3, [pc, #120]	; (800c824 <xPortStartScheduler+0x134>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	021b      	lsls	r3, r3, #8
 800c7ae:	4a1d      	ldr	r2, [pc, #116]	; (800c824 <xPortStartScheduler+0x134>)
 800c7b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c7b2:	4b1c      	ldr	r3, [pc, #112]	; (800c824 <xPortStartScheduler+0x134>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c7ba:	4a1a      	ldr	r2, [pc, #104]	; (800c824 <xPortStartScheduler+0x134>)
 800c7bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	b2da      	uxtb	r2, r3
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c7c6:	4b18      	ldr	r3, [pc, #96]	; (800c828 <xPortStartScheduler+0x138>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	4a17      	ldr	r2, [pc, #92]	; (800c828 <xPortStartScheduler+0x138>)
 800c7cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c7d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c7d2:	4b15      	ldr	r3, [pc, #84]	; (800c828 <xPortStartScheduler+0x138>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	4a14      	ldr	r2, [pc, #80]	; (800c828 <xPortStartScheduler+0x138>)
 800c7d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c7dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c7de:	f000 f8dd 	bl	800c99c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c7e2:	4b12      	ldr	r3, [pc, #72]	; (800c82c <xPortStartScheduler+0x13c>)
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c7e8:	f000 f8fc 	bl	800c9e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c7ec:	4b10      	ldr	r3, [pc, #64]	; (800c830 <xPortStartScheduler+0x140>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4a0f      	ldr	r2, [pc, #60]	; (800c830 <xPortStartScheduler+0x140>)
 800c7f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c7f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c7f8:	f7ff ff66 	bl	800c6c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c7fc:	f7fe ff58 	bl	800b6b0 <vTaskSwitchContext>
	prvTaskExitError();
 800c800:	f7ff ff22 	bl	800c648 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c804:	2300      	movs	r3, #0
}
 800c806:	4618      	mov	r0, r3
 800c808:	3718      	adds	r7, #24
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
 800c80e:	bf00      	nop
 800c810:	e000ed00 	.word	0xe000ed00
 800c814:	410fc271 	.word	0x410fc271
 800c818:	410fc270 	.word	0x410fc270
 800c81c:	e000e400 	.word	0xe000e400
 800c820:	20001364 	.word	0x20001364
 800c824:	20001368 	.word	0x20001368
 800c828:	e000ed20 	.word	0xe000ed20
 800c82c:	20000024 	.word	0x20000024
 800c830:	e000ef34 	.word	0xe000ef34

0800c834 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c834:	b480      	push	{r7}
 800c836:	b083      	sub	sp, #12
 800c838:	af00      	add	r7, sp, #0
	__asm volatile
 800c83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c83e:	f383 8811 	msr	BASEPRI, r3
 800c842:	f3bf 8f6f 	isb	sy
 800c846:	f3bf 8f4f 	dsb	sy
 800c84a:	607b      	str	r3, [r7, #4]
}
 800c84c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c84e:	4b0f      	ldr	r3, [pc, #60]	; (800c88c <vPortEnterCritical+0x58>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	3301      	adds	r3, #1
 800c854:	4a0d      	ldr	r2, [pc, #52]	; (800c88c <vPortEnterCritical+0x58>)
 800c856:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c858:	4b0c      	ldr	r3, [pc, #48]	; (800c88c <vPortEnterCritical+0x58>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	2b01      	cmp	r3, #1
 800c85e:	d10f      	bne.n	800c880 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c860:	4b0b      	ldr	r3, [pc, #44]	; (800c890 <vPortEnterCritical+0x5c>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	b2db      	uxtb	r3, r3
 800c866:	2b00      	cmp	r3, #0
 800c868:	d00a      	beq.n	800c880 <vPortEnterCritical+0x4c>
	__asm volatile
 800c86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c86e:	f383 8811 	msr	BASEPRI, r3
 800c872:	f3bf 8f6f 	isb	sy
 800c876:	f3bf 8f4f 	dsb	sy
 800c87a:	603b      	str	r3, [r7, #0]
}
 800c87c:	bf00      	nop
 800c87e:	e7fe      	b.n	800c87e <vPortEnterCritical+0x4a>
	}
}
 800c880:	bf00      	nop
 800c882:	370c      	adds	r7, #12
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr
 800c88c:	20000024 	.word	0x20000024
 800c890:	e000ed04 	.word	0xe000ed04

0800c894 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c894:	b480      	push	{r7}
 800c896:	b083      	sub	sp, #12
 800c898:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c89a:	4b12      	ldr	r3, [pc, #72]	; (800c8e4 <vPortExitCritical+0x50>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d10a      	bne.n	800c8b8 <vPortExitCritical+0x24>
	__asm volatile
 800c8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8a6:	f383 8811 	msr	BASEPRI, r3
 800c8aa:	f3bf 8f6f 	isb	sy
 800c8ae:	f3bf 8f4f 	dsb	sy
 800c8b2:	607b      	str	r3, [r7, #4]
}
 800c8b4:	bf00      	nop
 800c8b6:	e7fe      	b.n	800c8b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c8b8:	4b0a      	ldr	r3, [pc, #40]	; (800c8e4 <vPortExitCritical+0x50>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	3b01      	subs	r3, #1
 800c8be:	4a09      	ldr	r2, [pc, #36]	; (800c8e4 <vPortExitCritical+0x50>)
 800c8c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c8c2:	4b08      	ldr	r3, [pc, #32]	; (800c8e4 <vPortExitCritical+0x50>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d105      	bne.n	800c8d6 <vPortExitCritical+0x42>
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	f383 8811 	msr	BASEPRI, r3
}
 800c8d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c8d6:	bf00      	nop
 800c8d8:	370c      	adds	r7, #12
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e0:	4770      	bx	lr
 800c8e2:	bf00      	nop
 800c8e4:	20000024 	.word	0x20000024
	...

0800c8f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c8f0:	f3ef 8009 	mrs	r0, PSP
 800c8f4:	f3bf 8f6f 	isb	sy
 800c8f8:	4b15      	ldr	r3, [pc, #84]	; (800c950 <pxCurrentTCBConst>)
 800c8fa:	681a      	ldr	r2, [r3, #0]
 800c8fc:	f01e 0f10 	tst.w	lr, #16
 800c900:	bf08      	it	eq
 800c902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c90a:	6010      	str	r0, [r2, #0]
 800c90c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c910:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c914:	f380 8811 	msr	BASEPRI, r0
 800c918:	f3bf 8f4f 	dsb	sy
 800c91c:	f3bf 8f6f 	isb	sy
 800c920:	f7fe fec6 	bl	800b6b0 <vTaskSwitchContext>
 800c924:	f04f 0000 	mov.w	r0, #0
 800c928:	f380 8811 	msr	BASEPRI, r0
 800c92c:	bc09      	pop	{r0, r3}
 800c92e:	6819      	ldr	r1, [r3, #0]
 800c930:	6808      	ldr	r0, [r1, #0]
 800c932:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c936:	f01e 0f10 	tst.w	lr, #16
 800c93a:	bf08      	it	eq
 800c93c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c940:	f380 8809 	msr	PSP, r0
 800c944:	f3bf 8f6f 	isb	sy
 800c948:	4770      	bx	lr
 800c94a:	bf00      	nop
 800c94c:	f3af 8000 	nop.w

0800c950 <pxCurrentTCBConst>:
 800c950:	20000d38 	.word	0x20000d38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c954:	bf00      	nop
 800c956:	bf00      	nop

0800c958 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b082      	sub	sp, #8
 800c95c:	af00      	add	r7, sp, #0
	__asm volatile
 800c95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c962:	f383 8811 	msr	BASEPRI, r3
 800c966:	f3bf 8f6f 	isb	sy
 800c96a:	f3bf 8f4f 	dsb	sy
 800c96e:	607b      	str	r3, [r7, #4]
}
 800c970:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c972:	f7fe fde3 	bl	800b53c <xTaskIncrementTick>
 800c976:	4603      	mov	r3, r0
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d003      	beq.n	800c984 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c97c:	4b06      	ldr	r3, [pc, #24]	; (800c998 <xPortSysTickHandler+0x40>)
 800c97e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c982:	601a      	str	r2, [r3, #0]
 800c984:	2300      	movs	r3, #0
 800c986:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	f383 8811 	msr	BASEPRI, r3
}
 800c98e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c990:	bf00      	nop
 800c992:	3708      	adds	r7, #8
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}
 800c998:	e000ed04 	.word	0xe000ed04

0800c99c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c99c:	b480      	push	{r7}
 800c99e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c9a0:	4b0b      	ldr	r3, [pc, #44]	; (800c9d0 <vPortSetupTimerInterrupt+0x34>)
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c9a6:	4b0b      	ldr	r3, [pc, #44]	; (800c9d4 <vPortSetupTimerInterrupt+0x38>)
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c9ac:	4b0a      	ldr	r3, [pc, #40]	; (800c9d8 <vPortSetupTimerInterrupt+0x3c>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4a0a      	ldr	r2, [pc, #40]	; (800c9dc <vPortSetupTimerInterrupt+0x40>)
 800c9b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c9b6:	099b      	lsrs	r3, r3, #6
 800c9b8:	4a09      	ldr	r2, [pc, #36]	; (800c9e0 <vPortSetupTimerInterrupt+0x44>)
 800c9ba:	3b01      	subs	r3, #1
 800c9bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c9be:	4b04      	ldr	r3, [pc, #16]	; (800c9d0 <vPortSetupTimerInterrupt+0x34>)
 800c9c0:	2207      	movs	r2, #7
 800c9c2:	601a      	str	r2, [r3, #0]
}
 800c9c4:	bf00      	nop
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9cc:	4770      	bx	lr
 800c9ce:	bf00      	nop
 800c9d0:	e000e010 	.word	0xe000e010
 800c9d4:	e000e018 	.word	0xe000e018
 800c9d8:	20000000 	.word	0x20000000
 800c9dc:	10624dd3 	.word	0x10624dd3
 800c9e0:	e000e014 	.word	0xe000e014

0800c9e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c9e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c9f4 <vPortEnableVFP+0x10>
 800c9e8:	6801      	ldr	r1, [r0, #0]
 800c9ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c9ee:	6001      	str	r1, [r0, #0]
 800c9f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c9f2:	bf00      	nop
 800c9f4:	e000ed88 	.word	0xe000ed88

0800c9f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b085      	sub	sp, #20
 800c9fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c9fe:	f3ef 8305 	mrs	r3, IPSR
 800ca02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	2b0f      	cmp	r3, #15
 800ca08:	d914      	bls.n	800ca34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ca0a:	4a17      	ldr	r2, [pc, #92]	; (800ca68 <vPortValidateInterruptPriority+0x70>)
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	4413      	add	r3, r2
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ca14:	4b15      	ldr	r3, [pc, #84]	; (800ca6c <vPortValidateInterruptPriority+0x74>)
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	7afa      	ldrb	r2, [r7, #11]
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	d20a      	bcs.n	800ca34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ca1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca22:	f383 8811 	msr	BASEPRI, r3
 800ca26:	f3bf 8f6f 	isb	sy
 800ca2a:	f3bf 8f4f 	dsb	sy
 800ca2e:	607b      	str	r3, [r7, #4]
}
 800ca30:	bf00      	nop
 800ca32:	e7fe      	b.n	800ca32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ca34:	4b0e      	ldr	r3, [pc, #56]	; (800ca70 <vPortValidateInterruptPriority+0x78>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ca3c:	4b0d      	ldr	r3, [pc, #52]	; (800ca74 <vPortValidateInterruptPriority+0x7c>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	429a      	cmp	r2, r3
 800ca42:	d90a      	bls.n	800ca5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ca44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca48:	f383 8811 	msr	BASEPRI, r3
 800ca4c:	f3bf 8f6f 	isb	sy
 800ca50:	f3bf 8f4f 	dsb	sy
 800ca54:	603b      	str	r3, [r7, #0]
}
 800ca56:	bf00      	nop
 800ca58:	e7fe      	b.n	800ca58 <vPortValidateInterruptPriority+0x60>
	}
 800ca5a:	bf00      	nop
 800ca5c:	3714      	adds	r7, #20
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca64:	4770      	bx	lr
 800ca66:	bf00      	nop
 800ca68:	e000e3f0 	.word	0xe000e3f0
 800ca6c:	20001364 	.word	0x20001364
 800ca70:	e000ed0c 	.word	0xe000ed0c
 800ca74:	20001368 	.word	0x20001368

0800ca78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b08a      	sub	sp, #40	; 0x28
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ca80:	2300      	movs	r3, #0
 800ca82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ca84:	f7fe fc9e 	bl	800b3c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ca88:	4b5b      	ldr	r3, [pc, #364]	; (800cbf8 <pvPortMalloc+0x180>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d101      	bne.n	800ca94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ca90:	f000 f920 	bl	800ccd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ca94:	4b59      	ldr	r3, [pc, #356]	; (800cbfc <pvPortMalloc+0x184>)
 800ca96:	681a      	ldr	r2, [r3, #0]
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	4013      	ands	r3, r2
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	f040 8093 	bne.w	800cbc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d01d      	beq.n	800cae4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800caa8:	2208      	movs	r2, #8
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	4413      	add	r3, r2
 800caae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f003 0307 	and.w	r3, r3, #7
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d014      	beq.n	800cae4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f023 0307 	bic.w	r3, r3, #7
 800cac0:	3308      	adds	r3, #8
 800cac2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f003 0307 	and.w	r3, r3, #7
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d00a      	beq.n	800cae4 <pvPortMalloc+0x6c>
	__asm volatile
 800cace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad2:	f383 8811 	msr	BASEPRI, r3
 800cad6:	f3bf 8f6f 	isb	sy
 800cada:	f3bf 8f4f 	dsb	sy
 800cade:	617b      	str	r3, [r7, #20]
}
 800cae0:	bf00      	nop
 800cae2:	e7fe      	b.n	800cae2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d06e      	beq.n	800cbc8 <pvPortMalloc+0x150>
 800caea:	4b45      	ldr	r3, [pc, #276]	; (800cc00 <pvPortMalloc+0x188>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	687a      	ldr	r2, [r7, #4]
 800caf0:	429a      	cmp	r2, r3
 800caf2:	d869      	bhi.n	800cbc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800caf4:	4b43      	ldr	r3, [pc, #268]	; (800cc04 <pvPortMalloc+0x18c>)
 800caf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800caf8:	4b42      	ldr	r3, [pc, #264]	; (800cc04 <pvPortMalloc+0x18c>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cafe:	e004      	b.n	800cb0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	687a      	ldr	r2, [r7, #4]
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d903      	bls.n	800cb1c <pvPortMalloc+0xa4>
 800cb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d1f1      	bne.n	800cb00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cb1c:	4b36      	ldr	r3, [pc, #216]	; (800cbf8 <pvPortMalloc+0x180>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d050      	beq.n	800cbc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cb26:	6a3b      	ldr	r3, [r7, #32]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	2208      	movs	r2, #8
 800cb2c:	4413      	add	r3, r2
 800cb2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb32:	681a      	ldr	r2, [r3, #0]
 800cb34:	6a3b      	ldr	r3, [r7, #32]
 800cb36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3a:	685a      	ldr	r2, [r3, #4]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	1ad2      	subs	r2, r2, r3
 800cb40:	2308      	movs	r3, #8
 800cb42:	005b      	lsls	r3, r3, #1
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d91f      	bls.n	800cb88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cb48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	4413      	add	r3, r2
 800cb4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb50:	69bb      	ldr	r3, [r7, #24]
 800cb52:	f003 0307 	and.w	r3, r3, #7
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d00a      	beq.n	800cb70 <pvPortMalloc+0xf8>
	__asm volatile
 800cb5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb5e:	f383 8811 	msr	BASEPRI, r3
 800cb62:	f3bf 8f6f 	isb	sy
 800cb66:	f3bf 8f4f 	dsb	sy
 800cb6a:	613b      	str	r3, [r7, #16]
}
 800cb6c:	bf00      	nop
 800cb6e:	e7fe      	b.n	800cb6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb72:	685a      	ldr	r2, [r3, #4]
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	1ad2      	subs	r2, r2, r3
 800cb78:	69bb      	ldr	r3, [r7, #24]
 800cb7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7e:	687a      	ldr	r2, [r7, #4]
 800cb80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cb82:	69b8      	ldr	r0, [r7, #24]
 800cb84:	f000 f908 	bl	800cd98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cb88:	4b1d      	ldr	r3, [pc, #116]	; (800cc00 <pvPortMalloc+0x188>)
 800cb8a:	681a      	ldr	r2, [r3, #0]
 800cb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	1ad3      	subs	r3, r2, r3
 800cb92:	4a1b      	ldr	r2, [pc, #108]	; (800cc00 <pvPortMalloc+0x188>)
 800cb94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cb96:	4b1a      	ldr	r3, [pc, #104]	; (800cc00 <pvPortMalloc+0x188>)
 800cb98:	681a      	ldr	r2, [r3, #0]
 800cb9a:	4b1b      	ldr	r3, [pc, #108]	; (800cc08 <pvPortMalloc+0x190>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	429a      	cmp	r2, r3
 800cba0:	d203      	bcs.n	800cbaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cba2:	4b17      	ldr	r3, [pc, #92]	; (800cc00 <pvPortMalloc+0x188>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	4a18      	ldr	r2, [pc, #96]	; (800cc08 <pvPortMalloc+0x190>)
 800cba8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cbaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbac:	685a      	ldr	r2, [r3, #4]
 800cbae:	4b13      	ldr	r3, [pc, #76]	; (800cbfc <pvPortMalloc+0x184>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	431a      	orrs	r2, r3
 800cbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbba:	2200      	movs	r2, #0
 800cbbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cbbe:	4b13      	ldr	r3, [pc, #76]	; (800cc0c <pvPortMalloc+0x194>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	3301      	adds	r3, #1
 800cbc4:	4a11      	ldr	r2, [pc, #68]	; (800cc0c <pvPortMalloc+0x194>)
 800cbc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cbc8:	f7fe fc0a 	bl	800b3e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cbcc:	69fb      	ldr	r3, [r7, #28]
 800cbce:	f003 0307 	and.w	r3, r3, #7
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d00a      	beq.n	800cbec <pvPortMalloc+0x174>
	__asm volatile
 800cbd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbda:	f383 8811 	msr	BASEPRI, r3
 800cbde:	f3bf 8f6f 	isb	sy
 800cbe2:	f3bf 8f4f 	dsb	sy
 800cbe6:	60fb      	str	r3, [r7, #12]
}
 800cbe8:	bf00      	nop
 800cbea:	e7fe      	b.n	800cbea <pvPortMalloc+0x172>
	return pvReturn;
 800cbec:	69fb      	ldr	r3, [r7, #28]
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3728      	adds	r7, #40	; 0x28
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
 800cbf6:	bf00      	nop
 800cbf8:	2000369c 	.word	0x2000369c
 800cbfc:	200036b0 	.word	0x200036b0
 800cc00:	200036a0 	.word	0x200036a0
 800cc04:	20003694 	.word	0x20003694
 800cc08:	200036a4 	.word	0x200036a4
 800cc0c:	200036a8 	.word	0x200036a8

0800cc10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b086      	sub	sp, #24
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d04d      	beq.n	800ccbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cc22:	2308      	movs	r3, #8
 800cc24:	425b      	negs	r3, r3
 800cc26:	697a      	ldr	r2, [r7, #20]
 800cc28:	4413      	add	r3, r2
 800cc2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cc2c:	697b      	ldr	r3, [r7, #20]
 800cc2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	685a      	ldr	r2, [r3, #4]
 800cc34:	4b24      	ldr	r3, [pc, #144]	; (800ccc8 <vPortFree+0xb8>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	4013      	ands	r3, r2
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d10a      	bne.n	800cc54 <vPortFree+0x44>
	__asm volatile
 800cc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc42:	f383 8811 	msr	BASEPRI, r3
 800cc46:	f3bf 8f6f 	isb	sy
 800cc4a:	f3bf 8f4f 	dsb	sy
 800cc4e:	60fb      	str	r3, [r7, #12]
}
 800cc50:	bf00      	nop
 800cc52:	e7fe      	b.n	800cc52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d00a      	beq.n	800cc72 <vPortFree+0x62>
	__asm volatile
 800cc5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc60:	f383 8811 	msr	BASEPRI, r3
 800cc64:	f3bf 8f6f 	isb	sy
 800cc68:	f3bf 8f4f 	dsb	sy
 800cc6c:	60bb      	str	r3, [r7, #8]
}
 800cc6e:	bf00      	nop
 800cc70:	e7fe      	b.n	800cc70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	685a      	ldr	r2, [r3, #4]
 800cc76:	4b14      	ldr	r3, [pc, #80]	; (800ccc8 <vPortFree+0xb8>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	4013      	ands	r3, r2
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d01e      	beq.n	800ccbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d11a      	bne.n	800ccbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	685a      	ldr	r2, [r3, #4]
 800cc8c:	4b0e      	ldr	r3, [pc, #56]	; (800ccc8 <vPortFree+0xb8>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	43db      	mvns	r3, r3
 800cc92:	401a      	ands	r2, r3
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cc98:	f7fe fb94 	bl	800b3c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cc9c:	693b      	ldr	r3, [r7, #16]
 800cc9e:	685a      	ldr	r2, [r3, #4]
 800cca0:	4b0a      	ldr	r3, [pc, #40]	; (800cccc <vPortFree+0xbc>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	4413      	add	r3, r2
 800cca6:	4a09      	ldr	r2, [pc, #36]	; (800cccc <vPortFree+0xbc>)
 800cca8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ccaa:	6938      	ldr	r0, [r7, #16]
 800ccac:	f000 f874 	bl	800cd98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ccb0:	4b07      	ldr	r3, [pc, #28]	; (800ccd0 <vPortFree+0xc0>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	3301      	adds	r3, #1
 800ccb6:	4a06      	ldr	r2, [pc, #24]	; (800ccd0 <vPortFree+0xc0>)
 800ccb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ccba:	f7fe fb91 	bl	800b3e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ccbe:	bf00      	nop
 800ccc0:	3718      	adds	r7, #24
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
 800ccc6:	bf00      	nop
 800ccc8:	200036b0 	.word	0x200036b0
 800cccc:	200036a0 	.word	0x200036a0
 800ccd0:	200036ac 	.word	0x200036ac

0800ccd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b085      	sub	sp, #20
 800ccd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ccda:	f242 3328 	movw	r3, #9000	; 0x2328
 800ccde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cce0:	4b27      	ldr	r3, [pc, #156]	; (800cd80 <prvHeapInit+0xac>)
 800cce2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	f003 0307 	and.w	r3, r3, #7
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d00c      	beq.n	800cd08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	3307      	adds	r3, #7
 800ccf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	f023 0307 	bic.w	r3, r3, #7
 800ccfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ccfc:	68ba      	ldr	r2, [r7, #8]
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	1ad3      	subs	r3, r2, r3
 800cd02:	4a1f      	ldr	r2, [pc, #124]	; (800cd80 <prvHeapInit+0xac>)
 800cd04:	4413      	add	r3, r2
 800cd06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cd0c:	4a1d      	ldr	r2, [pc, #116]	; (800cd84 <prvHeapInit+0xb0>)
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cd12:	4b1c      	ldr	r3, [pc, #112]	; (800cd84 <prvHeapInit+0xb0>)
 800cd14:	2200      	movs	r2, #0
 800cd16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	68ba      	ldr	r2, [r7, #8]
 800cd1c:	4413      	add	r3, r2
 800cd1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cd20:	2208      	movs	r2, #8
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	1a9b      	subs	r3, r3, r2
 800cd26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	f023 0307 	bic.w	r3, r3, #7
 800cd2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	4a15      	ldr	r2, [pc, #84]	; (800cd88 <prvHeapInit+0xb4>)
 800cd34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cd36:	4b14      	ldr	r3, [pc, #80]	; (800cd88 <prvHeapInit+0xb4>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cd3e:	4b12      	ldr	r3, [pc, #72]	; (800cd88 <prvHeapInit+0xb4>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	2200      	movs	r2, #0
 800cd44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	68fa      	ldr	r2, [r7, #12]
 800cd4e:	1ad2      	subs	r2, r2, r3
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cd54:	4b0c      	ldr	r3, [pc, #48]	; (800cd88 <prvHeapInit+0xb4>)
 800cd56:	681a      	ldr	r2, [r3, #0]
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	685b      	ldr	r3, [r3, #4]
 800cd60:	4a0a      	ldr	r2, [pc, #40]	; (800cd8c <prvHeapInit+0xb8>)
 800cd62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	685b      	ldr	r3, [r3, #4]
 800cd68:	4a09      	ldr	r2, [pc, #36]	; (800cd90 <prvHeapInit+0xbc>)
 800cd6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cd6c:	4b09      	ldr	r3, [pc, #36]	; (800cd94 <prvHeapInit+0xc0>)
 800cd6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cd72:	601a      	str	r2, [r3, #0]
}
 800cd74:	bf00      	nop
 800cd76:	3714      	adds	r7, #20
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7e:	4770      	bx	lr
 800cd80:	2000136c 	.word	0x2000136c
 800cd84:	20003694 	.word	0x20003694
 800cd88:	2000369c 	.word	0x2000369c
 800cd8c:	200036a4 	.word	0x200036a4
 800cd90:	200036a0 	.word	0x200036a0
 800cd94:	200036b0 	.word	0x200036b0

0800cd98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b085      	sub	sp, #20
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cda0:	4b28      	ldr	r3, [pc, #160]	; (800ce44 <prvInsertBlockIntoFreeList+0xac>)
 800cda2:	60fb      	str	r3, [r7, #12]
 800cda4:	e002      	b.n	800cdac <prvInsertBlockIntoFreeList+0x14>
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	60fb      	str	r3, [r7, #12]
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	429a      	cmp	r2, r3
 800cdb4:	d8f7      	bhi.n	800cda6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	685b      	ldr	r3, [r3, #4]
 800cdbe:	68ba      	ldr	r2, [r7, #8]
 800cdc0:	4413      	add	r3, r2
 800cdc2:	687a      	ldr	r2, [r7, #4]
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d108      	bne.n	800cdda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	685a      	ldr	r2, [r3, #4]
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	441a      	add	r2, r3
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	68ba      	ldr	r2, [r7, #8]
 800cde4:	441a      	add	r2, r3
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	429a      	cmp	r2, r3
 800cdec:	d118      	bne.n	800ce20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	681a      	ldr	r2, [r3, #0]
 800cdf2:	4b15      	ldr	r3, [pc, #84]	; (800ce48 <prvInsertBlockIntoFreeList+0xb0>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	429a      	cmp	r2, r3
 800cdf8:	d00d      	beq.n	800ce16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	685a      	ldr	r2, [r3, #4]
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	685b      	ldr	r3, [r3, #4]
 800ce04:	441a      	add	r2, r3
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	681a      	ldr	r2, [r3, #0]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	601a      	str	r2, [r3, #0]
 800ce14:	e008      	b.n	800ce28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ce16:	4b0c      	ldr	r3, [pc, #48]	; (800ce48 <prvInsertBlockIntoFreeList+0xb0>)
 800ce18:	681a      	ldr	r2, [r3, #0]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	601a      	str	r2, [r3, #0]
 800ce1e:	e003      	b.n	800ce28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	681a      	ldr	r2, [r3, #0]
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ce28:	68fa      	ldr	r2, [r7, #12]
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	d002      	beq.n	800ce36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	687a      	ldr	r2, [r7, #4]
 800ce34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce36:	bf00      	nop
 800ce38:	3714      	adds	r7, #20
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce40:	4770      	bx	lr
 800ce42:	bf00      	nop
 800ce44:	20003694 	.word	0x20003694
 800ce48:	2000369c 	.word	0x2000369c

0800ce4c <_ZdlPvj>:
 800ce4c:	f000 b814 	b.w	800ce78 <_ZdlPv>

0800ce50 <_Znwj>:
 800ce50:	2801      	cmp	r0, #1
 800ce52:	bf38      	it	cc
 800ce54:	2001      	movcc	r0, #1
 800ce56:	b510      	push	{r4, lr}
 800ce58:	4604      	mov	r4, r0
 800ce5a:	4620      	mov	r0, r4
 800ce5c:	f000 f85e 	bl	800cf1c <malloc>
 800ce60:	b930      	cbnz	r0, 800ce70 <_Znwj+0x20>
 800ce62:	f000 f81d 	bl	800cea0 <_ZSt15get_new_handlerv>
 800ce66:	b908      	cbnz	r0, 800ce6c <_Znwj+0x1c>
 800ce68:	f000 f822 	bl	800ceb0 <abort>
 800ce6c:	4780      	blx	r0
 800ce6e:	e7f4      	b.n	800ce5a <_Znwj+0xa>
 800ce70:	bd10      	pop	{r4, pc}

0800ce72 <__cxa_pure_virtual>:
 800ce72:	b508      	push	{r3, lr}
 800ce74:	f000 f80e 	bl	800ce94 <_ZSt9terminatev>

0800ce78 <_ZdlPv>:
 800ce78:	f000 b858 	b.w	800cf2c <free>

0800ce7c <_ZN10__cxxabiv111__terminateEPFvvE>:
 800ce7c:	b508      	push	{r3, lr}
 800ce7e:	4780      	blx	r0
 800ce80:	f000 f816 	bl	800ceb0 <abort>

0800ce84 <_ZSt13get_terminatev>:
 800ce84:	4b02      	ldr	r3, [pc, #8]	; (800ce90 <_ZSt13get_terminatev+0xc>)
 800ce86:	6818      	ldr	r0, [r3, #0]
 800ce88:	f3bf 8f5b 	dmb	ish
 800ce8c:	4770      	bx	lr
 800ce8e:	bf00      	nop
 800ce90:	20000028 	.word	0x20000028

0800ce94 <_ZSt9terminatev>:
 800ce94:	b508      	push	{r3, lr}
 800ce96:	f7ff fff5 	bl	800ce84 <_ZSt13get_terminatev>
 800ce9a:	f7ff ffef 	bl	800ce7c <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800cea0 <_ZSt15get_new_handlerv>:
 800cea0:	4b02      	ldr	r3, [pc, #8]	; (800ceac <_ZSt15get_new_handlerv+0xc>)
 800cea2:	6818      	ldr	r0, [r3, #0]
 800cea4:	f3bf 8f5b 	dmb	ish
 800cea8:	4770      	bx	lr
 800ceaa:	bf00      	nop
 800ceac:	200036b4 	.word	0x200036b4

0800ceb0 <abort>:
 800ceb0:	b508      	push	{r3, lr}
 800ceb2:	2006      	movs	r0, #6
 800ceb4:	f000 fe68 	bl	800db88 <raise>
 800ceb8:	2001      	movs	r0, #1
 800ceba:	f7f6 f803 	bl	8002ec4 <_exit>

0800cebe <atoi>:
 800cebe:	220a      	movs	r2, #10
 800cec0:	2100      	movs	r1, #0
 800cec2:	f000 bfd7 	b.w	800de74 <strtol>
	...

0800cec8 <__errno>:
 800cec8:	4b01      	ldr	r3, [pc, #4]	; (800ced0 <__errno+0x8>)
 800ceca:	6818      	ldr	r0, [r3, #0]
 800cecc:	4770      	bx	lr
 800cece:	bf00      	nop
 800ced0:	2000002c 	.word	0x2000002c

0800ced4 <__libc_init_array>:
 800ced4:	b570      	push	{r4, r5, r6, lr}
 800ced6:	4d0d      	ldr	r5, [pc, #52]	; (800cf0c <__libc_init_array+0x38>)
 800ced8:	4c0d      	ldr	r4, [pc, #52]	; (800cf10 <__libc_init_array+0x3c>)
 800ceda:	1b64      	subs	r4, r4, r5
 800cedc:	10a4      	asrs	r4, r4, #2
 800cede:	2600      	movs	r6, #0
 800cee0:	42a6      	cmp	r6, r4
 800cee2:	d109      	bne.n	800cef8 <__libc_init_array+0x24>
 800cee4:	4d0b      	ldr	r5, [pc, #44]	; (800cf14 <__libc_init_array+0x40>)
 800cee6:	4c0c      	ldr	r4, [pc, #48]	; (800cf18 <__libc_init_array+0x44>)
 800cee8:	f003 fb26 	bl	8010538 <_init>
 800ceec:	1b64      	subs	r4, r4, r5
 800ceee:	10a4      	asrs	r4, r4, #2
 800cef0:	2600      	movs	r6, #0
 800cef2:	42a6      	cmp	r6, r4
 800cef4:	d105      	bne.n	800cf02 <__libc_init_array+0x2e>
 800cef6:	bd70      	pop	{r4, r5, r6, pc}
 800cef8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cefc:	4798      	blx	r3
 800cefe:	3601      	adds	r6, #1
 800cf00:	e7ee      	b.n	800cee0 <__libc_init_array+0xc>
 800cf02:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf06:	4798      	blx	r3
 800cf08:	3601      	adds	r6, #1
 800cf0a:	e7f2      	b.n	800cef2 <__libc_init_array+0x1e>
 800cf0c:	08010c9c 	.word	0x08010c9c
 800cf10:	08010c9c 	.word	0x08010c9c
 800cf14:	08010c9c 	.word	0x08010c9c
 800cf18:	08010ca4 	.word	0x08010ca4

0800cf1c <malloc>:
 800cf1c:	4b02      	ldr	r3, [pc, #8]	; (800cf28 <malloc+0xc>)
 800cf1e:	4601      	mov	r1, r0
 800cf20:	6818      	ldr	r0, [r3, #0]
 800cf22:	f000 b88d 	b.w	800d040 <_malloc_r>
 800cf26:	bf00      	nop
 800cf28:	2000002c 	.word	0x2000002c

0800cf2c <free>:
 800cf2c:	4b02      	ldr	r3, [pc, #8]	; (800cf38 <free+0xc>)
 800cf2e:	4601      	mov	r1, r0
 800cf30:	6818      	ldr	r0, [r3, #0]
 800cf32:	f000 b819 	b.w	800cf68 <_free_r>
 800cf36:	bf00      	nop
 800cf38:	2000002c 	.word	0x2000002c

0800cf3c <memcpy>:
 800cf3c:	440a      	add	r2, r1
 800cf3e:	4291      	cmp	r1, r2
 800cf40:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf44:	d100      	bne.n	800cf48 <memcpy+0xc>
 800cf46:	4770      	bx	lr
 800cf48:	b510      	push	{r4, lr}
 800cf4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf52:	4291      	cmp	r1, r2
 800cf54:	d1f9      	bne.n	800cf4a <memcpy+0xe>
 800cf56:	bd10      	pop	{r4, pc}

0800cf58 <memset>:
 800cf58:	4402      	add	r2, r0
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	4293      	cmp	r3, r2
 800cf5e:	d100      	bne.n	800cf62 <memset+0xa>
 800cf60:	4770      	bx	lr
 800cf62:	f803 1b01 	strb.w	r1, [r3], #1
 800cf66:	e7f9      	b.n	800cf5c <memset+0x4>

0800cf68 <_free_r>:
 800cf68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf6a:	2900      	cmp	r1, #0
 800cf6c:	d044      	beq.n	800cff8 <_free_r+0x90>
 800cf6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf72:	9001      	str	r0, [sp, #4]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	f1a1 0404 	sub.w	r4, r1, #4
 800cf7a:	bfb8      	it	lt
 800cf7c:	18e4      	addlt	r4, r4, r3
 800cf7e:	f002 f947 	bl	800f210 <__malloc_lock>
 800cf82:	4a1e      	ldr	r2, [pc, #120]	; (800cffc <_free_r+0x94>)
 800cf84:	9801      	ldr	r0, [sp, #4]
 800cf86:	6813      	ldr	r3, [r2, #0]
 800cf88:	b933      	cbnz	r3, 800cf98 <_free_r+0x30>
 800cf8a:	6063      	str	r3, [r4, #4]
 800cf8c:	6014      	str	r4, [r2, #0]
 800cf8e:	b003      	add	sp, #12
 800cf90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf94:	f002 b942 	b.w	800f21c <__malloc_unlock>
 800cf98:	42a3      	cmp	r3, r4
 800cf9a:	d908      	bls.n	800cfae <_free_r+0x46>
 800cf9c:	6825      	ldr	r5, [r4, #0]
 800cf9e:	1961      	adds	r1, r4, r5
 800cfa0:	428b      	cmp	r3, r1
 800cfa2:	bf01      	itttt	eq
 800cfa4:	6819      	ldreq	r1, [r3, #0]
 800cfa6:	685b      	ldreq	r3, [r3, #4]
 800cfa8:	1949      	addeq	r1, r1, r5
 800cfaa:	6021      	streq	r1, [r4, #0]
 800cfac:	e7ed      	b.n	800cf8a <_free_r+0x22>
 800cfae:	461a      	mov	r2, r3
 800cfb0:	685b      	ldr	r3, [r3, #4]
 800cfb2:	b10b      	cbz	r3, 800cfb8 <_free_r+0x50>
 800cfb4:	42a3      	cmp	r3, r4
 800cfb6:	d9fa      	bls.n	800cfae <_free_r+0x46>
 800cfb8:	6811      	ldr	r1, [r2, #0]
 800cfba:	1855      	adds	r5, r2, r1
 800cfbc:	42a5      	cmp	r5, r4
 800cfbe:	d10b      	bne.n	800cfd8 <_free_r+0x70>
 800cfc0:	6824      	ldr	r4, [r4, #0]
 800cfc2:	4421      	add	r1, r4
 800cfc4:	1854      	adds	r4, r2, r1
 800cfc6:	42a3      	cmp	r3, r4
 800cfc8:	6011      	str	r1, [r2, #0]
 800cfca:	d1e0      	bne.n	800cf8e <_free_r+0x26>
 800cfcc:	681c      	ldr	r4, [r3, #0]
 800cfce:	685b      	ldr	r3, [r3, #4]
 800cfd0:	6053      	str	r3, [r2, #4]
 800cfd2:	4421      	add	r1, r4
 800cfd4:	6011      	str	r1, [r2, #0]
 800cfd6:	e7da      	b.n	800cf8e <_free_r+0x26>
 800cfd8:	d902      	bls.n	800cfe0 <_free_r+0x78>
 800cfda:	230c      	movs	r3, #12
 800cfdc:	6003      	str	r3, [r0, #0]
 800cfde:	e7d6      	b.n	800cf8e <_free_r+0x26>
 800cfe0:	6825      	ldr	r5, [r4, #0]
 800cfe2:	1961      	adds	r1, r4, r5
 800cfe4:	428b      	cmp	r3, r1
 800cfe6:	bf04      	itt	eq
 800cfe8:	6819      	ldreq	r1, [r3, #0]
 800cfea:	685b      	ldreq	r3, [r3, #4]
 800cfec:	6063      	str	r3, [r4, #4]
 800cfee:	bf04      	itt	eq
 800cff0:	1949      	addeq	r1, r1, r5
 800cff2:	6021      	streq	r1, [r4, #0]
 800cff4:	6054      	str	r4, [r2, #4]
 800cff6:	e7ca      	b.n	800cf8e <_free_r+0x26>
 800cff8:	b003      	add	sp, #12
 800cffa:	bd30      	pop	{r4, r5, pc}
 800cffc:	200036b8 	.word	0x200036b8

0800d000 <sbrk_aligned>:
 800d000:	b570      	push	{r4, r5, r6, lr}
 800d002:	4e0e      	ldr	r6, [pc, #56]	; (800d03c <sbrk_aligned+0x3c>)
 800d004:	460c      	mov	r4, r1
 800d006:	6831      	ldr	r1, [r6, #0]
 800d008:	4605      	mov	r5, r0
 800d00a:	b911      	cbnz	r1, 800d012 <sbrk_aligned+0x12>
 800d00c:	f000 fd84 	bl	800db18 <_sbrk_r>
 800d010:	6030      	str	r0, [r6, #0]
 800d012:	4621      	mov	r1, r4
 800d014:	4628      	mov	r0, r5
 800d016:	f000 fd7f 	bl	800db18 <_sbrk_r>
 800d01a:	1c43      	adds	r3, r0, #1
 800d01c:	d00a      	beq.n	800d034 <sbrk_aligned+0x34>
 800d01e:	1cc4      	adds	r4, r0, #3
 800d020:	f024 0403 	bic.w	r4, r4, #3
 800d024:	42a0      	cmp	r0, r4
 800d026:	d007      	beq.n	800d038 <sbrk_aligned+0x38>
 800d028:	1a21      	subs	r1, r4, r0
 800d02a:	4628      	mov	r0, r5
 800d02c:	f000 fd74 	bl	800db18 <_sbrk_r>
 800d030:	3001      	adds	r0, #1
 800d032:	d101      	bne.n	800d038 <sbrk_aligned+0x38>
 800d034:	f04f 34ff 	mov.w	r4, #4294967295
 800d038:	4620      	mov	r0, r4
 800d03a:	bd70      	pop	{r4, r5, r6, pc}
 800d03c:	200036bc 	.word	0x200036bc

0800d040 <_malloc_r>:
 800d040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d044:	1ccd      	adds	r5, r1, #3
 800d046:	f025 0503 	bic.w	r5, r5, #3
 800d04a:	3508      	adds	r5, #8
 800d04c:	2d0c      	cmp	r5, #12
 800d04e:	bf38      	it	cc
 800d050:	250c      	movcc	r5, #12
 800d052:	2d00      	cmp	r5, #0
 800d054:	4607      	mov	r7, r0
 800d056:	db01      	blt.n	800d05c <_malloc_r+0x1c>
 800d058:	42a9      	cmp	r1, r5
 800d05a:	d905      	bls.n	800d068 <_malloc_r+0x28>
 800d05c:	230c      	movs	r3, #12
 800d05e:	603b      	str	r3, [r7, #0]
 800d060:	2600      	movs	r6, #0
 800d062:	4630      	mov	r0, r6
 800d064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d068:	4e2e      	ldr	r6, [pc, #184]	; (800d124 <_malloc_r+0xe4>)
 800d06a:	f002 f8d1 	bl	800f210 <__malloc_lock>
 800d06e:	6833      	ldr	r3, [r6, #0]
 800d070:	461c      	mov	r4, r3
 800d072:	bb34      	cbnz	r4, 800d0c2 <_malloc_r+0x82>
 800d074:	4629      	mov	r1, r5
 800d076:	4638      	mov	r0, r7
 800d078:	f7ff ffc2 	bl	800d000 <sbrk_aligned>
 800d07c:	1c43      	adds	r3, r0, #1
 800d07e:	4604      	mov	r4, r0
 800d080:	d14d      	bne.n	800d11e <_malloc_r+0xde>
 800d082:	6834      	ldr	r4, [r6, #0]
 800d084:	4626      	mov	r6, r4
 800d086:	2e00      	cmp	r6, #0
 800d088:	d140      	bne.n	800d10c <_malloc_r+0xcc>
 800d08a:	6823      	ldr	r3, [r4, #0]
 800d08c:	4631      	mov	r1, r6
 800d08e:	4638      	mov	r0, r7
 800d090:	eb04 0803 	add.w	r8, r4, r3
 800d094:	f000 fd40 	bl	800db18 <_sbrk_r>
 800d098:	4580      	cmp	r8, r0
 800d09a:	d13a      	bne.n	800d112 <_malloc_r+0xd2>
 800d09c:	6821      	ldr	r1, [r4, #0]
 800d09e:	3503      	adds	r5, #3
 800d0a0:	1a6d      	subs	r5, r5, r1
 800d0a2:	f025 0503 	bic.w	r5, r5, #3
 800d0a6:	3508      	adds	r5, #8
 800d0a8:	2d0c      	cmp	r5, #12
 800d0aa:	bf38      	it	cc
 800d0ac:	250c      	movcc	r5, #12
 800d0ae:	4629      	mov	r1, r5
 800d0b0:	4638      	mov	r0, r7
 800d0b2:	f7ff ffa5 	bl	800d000 <sbrk_aligned>
 800d0b6:	3001      	adds	r0, #1
 800d0b8:	d02b      	beq.n	800d112 <_malloc_r+0xd2>
 800d0ba:	6823      	ldr	r3, [r4, #0]
 800d0bc:	442b      	add	r3, r5
 800d0be:	6023      	str	r3, [r4, #0]
 800d0c0:	e00e      	b.n	800d0e0 <_malloc_r+0xa0>
 800d0c2:	6822      	ldr	r2, [r4, #0]
 800d0c4:	1b52      	subs	r2, r2, r5
 800d0c6:	d41e      	bmi.n	800d106 <_malloc_r+0xc6>
 800d0c8:	2a0b      	cmp	r2, #11
 800d0ca:	d916      	bls.n	800d0fa <_malloc_r+0xba>
 800d0cc:	1961      	adds	r1, r4, r5
 800d0ce:	42a3      	cmp	r3, r4
 800d0d0:	6025      	str	r5, [r4, #0]
 800d0d2:	bf18      	it	ne
 800d0d4:	6059      	strne	r1, [r3, #4]
 800d0d6:	6863      	ldr	r3, [r4, #4]
 800d0d8:	bf08      	it	eq
 800d0da:	6031      	streq	r1, [r6, #0]
 800d0dc:	5162      	str	r2, [r4, r5]
 800d0de:	604b      	str	r3, [r1, #4]
 800d0e0:	4638      	mov	r0, r7
 800d0e2:	f104 060b 	add.w	r6, r4, #11
 800d0e6:	f002 f899 	bl	800f21c <__malloc_unlock>
 800d0ea:	f026 0607 	bic.w	r6, r6, #7
 800d0ee:	1d23      	adds	r3, r4, #4
 800d0f0:	1af2      	subs	r2, r6, r3
 800d0f2:	d0b6      	beq.n	800d062 <_malloc_r+0x22>
 800d0f4:	1b9b      	subs	r3, r3, r6
 800d0f6:	50a3      	str	r3, [r4, r2]
 800d0f8:	e7b3      	b.n	800d062 <_malloc_r+0x22>
 800d0fa:	6862      	ldr	r2, [r4, #4]
 800d0fc:	42a3      	cmp	r3, r4
 800d0fe:	bf0c      	ite	eq
 800d100:	6032      	streq	r2, [r6, #0]
 800d102:	605a      	strne	r2, [r3, #4]
 800d104:	e7ec      	b.n	800d0e0 <_malloc_r+0xa0>
 800d106:	4623      	mov	r3, r4
 800d108:	6864      	ldr	r4, [r4, #4]
 800d10a:	e7b2      	b.n	800d072 <_malloc_r+0x32>
 800d10c:	4634      	mov	r4, r6
 800d10e:	6876      	ldr	r6, [r6, #4]
 800d110:	e7b9      	b.n	800d086 <_malloc_r+0x46>
 800d112:	230c      	movs	r3, #12
 800d114:	603b      	str	r3, [r7, #0]
 800d116:	4638      	mov	r0, r7
 800d118:	f002 f880 	bl	800f21c <__malloc_unlock>
 800d11c:	e7a1      	b.n	800d062 <_malloc_r+0x22>
 800d11e:	6025      	str	r5, [r4, #0]
 800d120:	e7de      	b.n	800d0e0 <_malloc_r+0xa0>
 800d122:	bf00      	nop
 800d124:	200036b8 	.word	0x200036b8

0800d128 <__cvt>:
 800d128:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d12c:	ec55 4b10 	vmov	r4, r5, d0
 800d130:	2d00      	cmp	r5, #0
 800d132:	460e      	mov	r6, r1
 800d134:	4619      	mov	r1, r3
 800d136:	462b      	mov	r3, r5
 800d138:	bfbb      	ittet	lt
 800d13a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d13e:	461d      	movlt	r5, r3
 800d140:	2300      	movge	r3, #0
 800d142:	232d      	movlt	r3, #45	; 0x2d
 800d144:	700b      	strb	r3, [r1, #0]
 800d146:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d148:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d14c:	4691      	mov	r9, r2
 800d14e:	f023 0820 	bic.w	r8, r3, #32
 800d152:	bfbc      	itt	lt
 800d154:	4622      	movlt	r2, r4
 800d156:	4614      	movlt	r4, r2
 800d158:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d15c:	d005      	beq.n	800d16a <__cvt+0x42>
 800d15e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d162:	d100      	bne.n	800d166 <__cvt+0x3e>
 800d164:	3601      	adds	r6, #1
 800d166:	2102      	movs	r1, #2
 800d168:	e000      	b.n	800d16c <__cvt+0x44>
 800d16a:	2103      	movs	r1, #3
 800d16c:	ab03      	add	r3, sp, #12
 800d16e:	9301      	str	r3, [sp, #4]
 800d170:	ab02      	add	r3, sp, #8
 800d172:	9300      	str	r3, [sp, #0]
 800d174:	ec45 4b10 	vmov	d0, r4, r5
 800d178:	4653      	mov	r3, sl
 800d17a:	4632      	mov	r2, r6
 800d17c:	f001 f810 	bl	800e1a0 <_dtoa_r>
 800d180:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d184:	4607      	mov	r7, r0
 800d186:	d102      	bne.n	800d18e <__cvt+0x66>
 800d188:	f019 0f01 	tst.w	r9, #1
 800d18c:	d022      	beq.n	800d1d4 <__cvt+0xac>
 800d18e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d192:	eb07 0906 	add.w	r9, r7, r6
 800d196:	d110      	bne.n	800d1ba <__cvt+0x92>
 800d198:	783b      	ldrb	r3, [r7, #0]
 800d19a:	2b30      	cmp	r3, #48	; 0x30
 800d19c:	d10a      	bne.n	800d1b4 <__cvt+0x8c>
 800d19e:	2200      	movs	r2, #0
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	4620      	mov	r0, r4
 800d1a4:	4629      	mov	r1, r5
 800d1a6:	f7f3 fc9f 	bl	8000ae8 <__aeabi_dcmpeq>
 800d1aa:	b918      	cbnz	r0, 800d1b4 <__cvt+0x8c>
 800d1ac:	f1c6 0601 	rsb	r6, r6, #1
 800d1b0:	f8ca 6000 	str.w	r6, [sl]
 800d1b4:	f8da 3000 	ldr.w	r3, [sl]
 800d1b8:	4499      	add	r9, r3
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	2300      	movs	r3, #0
 800d1be:	4620      	mov	r0, r4
 800d1c0:	4629      	mov	r1, r5
 800d1c2:	f7f3 fc91 	bl	8000ae8 <__aeabi_dcmpeq>
 800d1c6:	b108      	cbz	r0, 800d1cc <__cvt+0xa4>
 800d1c8:	f8cd 900c 	str.w	r9, [sp, #12]
 800d1cc:	2230      	movs	r2, #48	; 0x30
 800d1ce:	9b03      	ldr	r3, [sp, #12]
 800d1d0:	454b      	cmp	r3, r9
 800d1d2:	d307      	bcc.n	800d1e4 <__cvt+0xbc>
 800d1d4:	9b03      	ldr	r3, [sp, #12]
 800d1d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d1d8:	1bdb      	subs	r3, r3, r7
 800d1da:	4638      	mov	r0, r7
 800d1dc:	6013      	str	r3, [r2, #0]
 800d1de:	b004      	add	sp, #16
 800d1e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1e4:	1c59      	adds	r1, r3, #1
 800d1e6:	9103      	str	r1, [sp, #12]
 800d1e8:	701a      	strb	r2, [r3, #0]
 800d1ea:	e7f0      	b.n	800d1ce <__cvt+0xa6>

0800d1ec <__exponent>:
 800d1ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	2900      	cmp	r1, #0
 800d1f2:	bfb8      	it	lt
 800d1f4:	4249      	neglt	r1, r1
 800d1f6:	f803 2b02 	strb.w	r2, [r3], #2
 800d1fa:	bfb4      	ite	lt
 800d1fc:	222d      	movlt	r2, #45	; 0x2d
 800d1fe:	222b      	movge	r2, #43	; 0x2b
 800d200:	2909      	cmp	r1, #9
 800d202:	7042      	strb	r2, [r0, #1]
 800d204:	dd2a      	ble.n	800d25c <__exponent+0x70>
 800d206:	f10d 0407 	add.w	r4, sp, #7
 800d20a:	46a4      	mov	ip, r4
 800d20c:	270a      	movs	r7, #10
 800d20e:	46a6      	mov	lr, r4
 800d210:	460a      	mov	r2, r1
 800d212:	fb91 f6f7 	sdiv	r6, r1, r7
 800d216:	fb07 1516 	mls	r5, r7, r6, r1
 800d21a:	3530      	adds	r5, #48	; 0x30
 800d21c:	2a63      	cmp	r2, #99	; 0x63
 800d21e:	f104 34ff 	add.w	r4, r4, #4294967295
 800d222:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d226:	4631      	mov	r1, r6
 800d228:	dcf1      	bgt.n	800d20e <__exponent+0x22>
 800d22a:	3130      	adds	r1, #48	; 0x30
 800d22c:	f1ae 0502 	sub.w	r5, lr, #2
 800d230:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d234:	1c44      	adds	r4, r0, #1
 800d236:	4629      	mov	r1, r5
 800d238:	4561      	cmp	r1, ip
 800d23a:	d30a      	bcc.n	800d252 <__exponent+0x66>
 800d23c:	f10d 0209 	add.w	r2, sp, #9
 800d240:	eba2 020e 	sub.w	r2, r2, lr
 800d244:	4565      	cmp	r5, ip
 800d246:	bf88      	it	hi
 800d248:	2200      	movhi	r2, #0
 800d24a:	4413      	add	r3, r2
 800d24c:	1a18      	subs	r0, r3, r0
 800d24e:	b003      	add	sp, #12
 800d250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d252:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d256:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d25a:	e7ed      	b.n	800d238 <__exponent+0x4c>
 800d25c:	2330      	movs	r3, #48	; 0x30
 800d25e:	3130      	adds	r1, #48	; 0x30
 800d260:	7083      	strb	r3, [r0, #2]
 800d262:	70c1      	strb	r1, [r0, #3]
 800d264:	1d03      	adds	r3, r0, #4
 800d266:	e7f1      	b.n	800d24c <__exponent+0x60>

0800d268 <_printf_float>:
 800d268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d26c:	ed2d 8b02 	vpush	{d8}
 800d270:	b08d      	sub	sp, #52	; 0x34
 800d272:	460c      	mov	r4, r1
 800d274:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d278:	4616      	mov	r6, r2
 800d27a:	461f      	mov	r7, r3
 800d27c:	4605      	mov	r5, r0
 800d27e:	f001 ff47 	bl	800f110 <_localeconv_r>
 800d282:	f8d0 a000 	ldr.w	sl, [r0]
 800d286:	4650      	mov	r0, sl
 800d288:	f7f2 ffac 	bl	80001e4 <strlen>
 800d28c:	2300      	movs	r3, #0
 800d28e:	930a      	str	r3, [sp, #40]	; 0x28
 800d290:	6823      	ldr	r3, [r4, #0]
 800d292:	9305      	str	r3, [sp, #20]
 800d294:	f8d8 3000 	ldr.w	r3, [r8]
 800d298:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d29c:	3307      	adds	r3, #7
 800d29e:	f023 0307 	bic.w	r3, r3, #7
 800d2a2:	f103 0208 	add.w	r2, r3, #8
 800d2a6:	f8c8 2000 	str.w	r2, [r8]
 800d2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d2b2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d2b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d2ba:	9307      	str	r3, [sp, #28]
 800d2bc:	f8cd 8018 	str.w	r8, [sp, #24]
 800d2c0:	ee08 0a10 	vmov	s16, r0
 800d2c4:	4b9f      	ldr	r3, [pc, #636]	; (800d544 <_printf_float+0x2dc>)
 800d2c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d2ca:	f04f 32ff 	mov.w	r2, #4294967295
 800d2ce:	f7f3 fc3d 	bl	8000b4c <__aeabi_dcmpun>
 800d2d2:	bb88      	cbnz	r0, 800d338 <_printf_float+0xd0>
 800d2d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d2d8:	4b9a      	ldr	r3, [pc, #616]	; (800d544 <_printf_float+0x2dc>)
 800d2da:	f04f 32ff 	mov.w	r2, #4294967295
 800d2de:	f7f3 fc17 	bl	8000b10 <__aeabi_dcmple>
 800d2e2:	bb48      	cbnz	r0, 800d338 <_printf_float+0xd0>
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	4640      	mov	r0, r8
 800d2ea:	4649      	mov	r1, r9
 800d2ec:	f7f3 fc06 	bl	8000afc <__aeabi_dcmplt>
 800d2f0:	b110      	cbz	r0, 800d2f8 <_printf_float+0x90>
 800d2f2:	232d      	movs	r3, #45	; 0x2d
 800d2f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2f8:	4b93      	ldr	r3, [pc, #588]	; (800d548 <_printf_float+0x2e0>)
 800d2fa:	4894      	ldr	r0, [pc, #592]	; (800d54c <_printf_float+0x2e4>)
 800d2fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d300:	bf94      	ite	ls
 800d302:	4698      	movls	r8, r3
 800d304:	4680      	movhi	r8, r0
 800d306:	2303      	movs	r3, #3
 800d308:	6123      	str	r3, [r4, #16]
 800d30a:	9b05      	ldr	r3, [sp, #20]
 800d30c:	f023 0204 	bic.w	r2, r3, #4
 800d310:	6022      	str	r2, [r4, #0]
 800d312:	f04f 0900 	mov.w	r9, #0
 800d316:	9700      	str	r7, [sp, #0]
 800d318:	4633      	mov	r3, r6
 800d31a:	aa0b      	add	r2, sp, #44	; 0x2c
 800d31c:	4621      	mov	r1, r4
 800d31e:	4628      	mov	r0, r5
 800d320:	f000 f9d8 	bl	800d6d4 <_printf_common>
 800d324:	3001      	adds	r0, #1
 800d326:	f040 8090 	bne.w	800d44a <_printf_float+0x1e2>
 800d32a:	f04f 30ff 	mov.w	r0, #4294967295
 800d32e:	b00d      	add	sp, #52	; 0x34
 800d330:	ecbd 8b02 	vpop	{d8}
 800d334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d338:	4642      	mov	r2, r8
 800d33a:	464b      	mov	r3, r9
 800d33c:	4640      	mov	r0, r8
 800d33e:	4649      	mov	r1, r9
 800d340:	f7f3 fc04 	bl	8000b4c <__aeabi_dcmpun>
 800d344:	b140      	cbz	r0, 800d358 <_printf_float+0xf0>
 800d346:	464b      	mov	r3, r9
 800d348:	2b00      	cmp	r3, #0
 800d34a:	bfbc      	itt	lt
 800d34c:	232d      	movlt	r3, #45	; 0x2d
 800d34e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d352:	487f      	ldr	r0, [pc, #508]	; (800d550 <_printf_float+0x2e8>)
 800d354:	4b7f      	ldr	r3, [pc, #508]	; (800d554 <_printf_float+0x2ec>)
 800d356:	e7d1      	b.n	800d2fc <_printf_float+0x94>
 800d358:	6863      	ldr	r3, [r4, #4]
 800d35a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d35e:	9206      	str	r2, [sp, #24]
 800d360:	1c5a      	adds	r2, r3, #1
 800d362:	d13f      	bne.n	800d3e4 <_printf_float+0x17c>
 800d364:	2306      	movs	r3, #6
 800d366:	6063      	str	r3, [r4, #4]
 800d368:	9b05      	ldr	r3, [sp, #20]
 800d36a:	6861      	ldr	r1, [r4, #4]
 800d36c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d370:	2300      	movs	r3, #0
 800d372:	9303      	str	r3, [sp, #12]
 800d374:	ab0a      	add	r3, sp, #40	; 0x28
 800d376:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d37a:	ab09      	add	r3, sp, #36	; 0x24
 800d37c:	ec49 8b10 	vmov	d0, r8, r9
 800d380:	9300      	str	r3, [sp, #0]
 800d382:	6022      	str	r2, [r4, #0]
 800d384:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d388:	4628      	mov	r0, r5
 800d38a:	f7ff fecd 	bl	800d128 <__cvt>
 800d38e:	9b06      	ldr	r3, [sp, #24]
 800d390:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d392:	2b47      	cmp	r3, #71	; 0x47
 800d394:	4680      	mov	r8, r0
 800d396:	d108      	bne.n	800d3aa <_printf_float+0x142>
 800d398:	1cc8      	adds	r0, r1, #3
 800d39a:	db02      	blt.n	800d3a2 <_printf_float+0x13a>
 800d39c:	6863      	ldr	r3, [r4, #4]
 800d39e:	4299      	cmp	r1, r3
 800d3a0:	dd41      	ble.n	800d426 <_printf_float+0x1be>
 800d3a2:	f1ab 0b02 	sub.w	fp, fp, #2
 800d3a6:	fa5f fb8b 	uxtb.w	fp, fp
 800d3aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d3ae:	d820      	bhi.n	800d3f2 <_printf_float+0x18a>
 800d3b0:	3901      	subs	r1, #1
 800d3b2:	465a      	mov	r2, fp
 800d3b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d3b8:	9109      	str	r1, [sp, #36]	; 0x24
 800d3ba:	f7ff ff17 	bl	800d1ec <__exponent>
 800d3be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d3c0:	1813      	adds	r3, r2, r0
 800d3c2:	2a01      	cmp	r2, #1
 800d3c4:	4681      	mov	r9, r0
 800d3c6:	6123      	str	r3, [r4, #16]
 800d3c8:	dc02      	bgt.n	800d3d0 <_printf_float+0x168>
 800d3ca:	6822      	ldr	r2, [r4, #0]
 800d3cc:	07d2      	lsls	r2, r2, #31
 800d3ce:	d501      	bpl.n	800d3d4 <_printf_float+0x16c>
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	6123      	str	r3, [r4, #16]
 800d3d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d09c      	beq.n	800d316 <_printf_float+0xae>
 800d3dc:	232d      	movs	r3, #45	; 0x2d
 800d3de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3e2:	e798      	b.n	800d316 <_printf_float+0xae>
 800d3e4:	9a06      	ldr	r2, [sp, #24]
 800d3e6:	2a47      	cmp	r2, #71	; 0x47
 800d3e8:	d1be      	bne.n	800d368 <_printf_float+0x100>
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d1bc      	bne.n	800d368 <_printf_float+0x100>
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	e7b9      	b.n	800d366 <_printf_float+0xfe>
 800d3f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d3f6:	d118      	bne.n	800d42a <_printf_float+0x1c2>
 800d3f8:	2900      	cmp	r1, #0
 800d3fa:	6863      	ldr	r3, [r4, #4]
 800d3fc:	dd0b      	ble.n	800d416 <_printf_float+0x1ae>
 800d3fe:	6121      	str	r1, [r4, #16]
 800d400:	b913      	cbnz	r3, 800d408 <_printf_float+0x1a0>
 800d402:	6822      	ldr	r2, [r4, #0]
 800d404:	07d0      	lsls	r0, r2, #31
 800d406:	d502      	bpl.n	800d40e <_printf_float+0x1a6>
 800d408:	3301      	adds	r3, #1
 800d40a:	440b      	add	r3, r1
 800d40c:	6123      	str	r3, [r4, #16]
 800d40e:	65a1      	str	r1, [r4, #88]	; 0x58
 800d410:	f04f 0900 	mov.w	r9, #0
 800d414:	e7de      	b.n	800d3d4 <_printf_float+0x16c>
 800d416:	b913      	cbnz	r3, 800d41e <_printf_float+0x1b6>
 800d418:	6822      	ldr	r2, [r4, #0]
 800d41a:	07d2      	lsls	r2, r2, #31
 800d41c:	d501      	bpl.n	800d422 <_printf_float+0x1ba>
 800d41e:	3302      	adds	r3, #2
 800d420:	e7f4      	b.n	800d40c <_printf_float+0x1a4>
 800d422:	2301      	movs	r3, #1
 800d424:	e7f2      	b.n	800d40c <_printf_float+0x1a4>
 800d426:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d42a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d42c:	4299      	cmp	r1, r3
 800d42e:	db05      	blt.n	800d43c <_printf_float+0x1d4>
 800d430:	6823      	ldr	r3, [r4, #0]
 800d432:	6121      	str	r1, [r4, #16]
 800d434:	07d8      	lsls	r0, r3, #31
 800d436:	d5ea      	bpl.n	800d40e <_printf_float+0x1a6>
 800d438:	1c4b      	adds	r3, r1, #1
 800d43a:	e7e7      	b.n	800d40c <_printf_float+0x1a4>
 800d43c:	2900      	cmp	r1, #0
 800d43e:	bfd4      	ite	le
 800d440:	f1c1 0202 	rsble	r2, r1, #2
 800d444:	2201      	movgt	r2, #1
 800d446:	4413      	add	r3, r2
 800d448:	e7e0      	b.n	800d40c <_printf_float+0x1a4>
 800d44a:	6823      	ldr	r3, [r4, #0]
 800d44c:	055a      	lsls	r2, r3, #21
 800d44e:	d407      	bmi.n	800d460 <_printf_float+0x1f8>
 800d450:	6923      	ldr	r3, [r4, #16]
 800d452:	4642      	mov	r2, r8
 800d454:	4631      	mov	r1, r6
 800d456:	4628      	mov	r0, r5
 800d458:	47b8      	blx	r7
 800d45a:	3001      	adds	r0, #1
 800d45c:	d12c      	bne.n	800d4b8 <_printf_float+0x250>
 800d45e:	e764      	b.n	800d32a <_printf_float+0xc2>
 800d460:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d464:	f240 80e0 	bls.w	800d628 <_printf_float+0x3c0>
 800d468:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d46c:	2200      	movs	r2, #0
 800d46e:	2300      	movs	r3, #0
 800d470:	f7f3 fb3a 	bl	8000ae8 <__aeabi_dcmpeq>
 800d474:	2800      	cmp	r0, #0
 800d476:	d034      	beq.n	800d4e2 <_printf_float+0x27a>
 800d478:	4a37      	ldr	r2, [pc, #220]	; (800d558 <_printf_float+0x2f0>)
 800d47a:	2301      	movs	r3, #1
 800d47c:	4631      	mov	r1, r6
 800d47e:	4628      	mov	r0, r5
 800d480:	47b8      	blx	r7
 800d482:	3001      	adds	r0, #1
 800d484:	f43f af51 	beq.w	800d32a <_printf_float+0xc2>
 800d488:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d48c:	429a      	cmp	r2, r3
 800d48e:	db02      	blt.n	800d496 <_printf_float+0x22e>
 800d490:	6823      	ldr	r3, [r4, #0]
 800d492:	07d8      	lsls	r0, r3, #31
 800d494:	d510      	bpl.n	800d4b8 <_printf_float+0x250>
 800d496:	ee18 3a10 	vmov	r3, s16
 800d49a:	4652      	mov	r2, sl
 800d49c:	4631      	mov	r1, r6
 800d49e:	4628      	mov	r0, r5
 800d4a0:	47b8      	blx	r7
 800d4a2:	3001      	adds	r0, #1
 800d4a4:	f43f af41 	beq.w	800d32a <_printf_float+0xc2>
 800d4a8:	f04f 0800 	mov.w	r8, #0
 800d4ac:	f104 091a 	add.w	r9, r4, #26
 800d4b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4b2:	3b01      	subs	r3, #1
 800d4b4:	4543      	cmp	r3, r8
 800d4b6:	dc09      	bgt.n	800d4cc <_printf_float+0x264>
 800d4b8:	6823      	ldr	r3, [r4, #0]
 800d4ba:	079b      	lsls	r3, r3, #30
 800d4bc:	f100 8105 	bmi.w	800d6ca <_printf_float+0x462>
 800d4c0:	68e0      	ldr	r0, [r4, #12]
 800d4c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4c4:	4298      	cmp	r0, r3
 800d4c6:	bfb8      	it	lt
 800d4c8:	4618      	movlt	r0, r3
 800d4ca:	e730      	b.n	800d32e <_printf_float+0xc6>
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	464a      	mov	r2, r9
 800d4d0:	4631      	mov	r1, r6
 800d4d2:	4628      	mov	r0, r5
 800d4d4:	47b8      	blx	r7
 800d4d6:	3001      	adds	r0, #1
 800d4d8:	f43f af27 	beq.w	800d32a <_printf_float+0xc2>
 800d4dc:	f108 0801 	add.w	r8, r8, #1
 800d4e0:	e7e6      	b.n	800d4b0 <_printf_float+0x248>
 800d4e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	dc39      	bgt.n	800d55c <_printf_float+0x2f4>
 800d4e8:	4a1b      	ldr	r2, [pc, #108]	; (800d558 <_printf_float+0x2f0>)
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	4631      	mov	r1, r6
 800d4ee:	4628      	mov	r0, r5
 800d4f0:	47b8      	blx	r7
 800d4f2:	3001      	adds	r0, #1
 800d4f4:	f43f af19 	beq.w	800d32a <_printf_float+0xc2>
 800d4f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d4fc:	4313      	orrs	r3, r2
 800d4fe:	d102      	bne.n	800d506 <_printf_float+0x29e>
 800d500:	6823      	ldr	r3, [r4, #0]
 800d502:	07d9      	lsls	r1, r3, #31
 800d504:	d5d8      	bpl.n	800d4b8 <_printf_float+0x250>
 800d506:	ee18 3a10 	vmov	r3, s16
 800d50a:	4652      	mov	r2, sl
 800d50c:	4631      	mov	r1, r6
 800d50e:	4628      	mov	r0, r5
 800d510:	47b8      	blx	r7
 800d512:	3001      	adds	r0, #1
 800d514:	f43f af09 	beq.w	800d32a <_printf_float+0xc2>
 800d518:	f04f 0900 	mov.w	r9, #0
 800d51c:	f104 0a1a 	add.w	sl, r4, #26
 800d520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d522:	425b      	negs	r3, r3
 800d524:	454b      	cmp	r3, r9
 800d526:	dc01      	bgt.n	800d52c <_printf_float+0x2c4>
 800d528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d52a:	e792      	b.n	800d452 <_printf_float+0x1ea>
 800d52c:	2301      	movs	r3, #1
 800d52e:	4652      	mov	r2, sl
 800d530:	4631      	mov	r1, r6
 800d532:	4628      	mov	r0, r5
 800d534:	47b8      	blx	r7
 800d536:	3001      	adds	r0, #1
 800d538:	f43f aef7 	beq.w	800d32a <_printf_float+0xc2>
 800d53c:	f109 0901 	add.w	r9, r9, #1
 800d540:	e7ee      	b.n	800d520 <_printf_float+0x2b8>
 800d542:	bf00      	nop
 800d544:	7fefffff 	.word	0x7fefffff
 800d548:	08010848 	.word	0x08010848
 800d54c:	0801084c 	.word	0x0801084c
 800d550:	08010854 	.word	0x08010854
 800d554:	08010850 	.word	0x08010850
 800d558:	08010c71 	.word	0x08010c71
 800d55c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d55e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d560:	429a      	cmp	r2, r3
 800d562:	bfa8      	it	ge
 800d564:	461a      	movge	r2, r3
 800d566:	2a00      	cmp	r2, #0
 800d568:	4691      	mov	r9, r2
 800d56a:	dc37      	bgt.n	800d5dc <_printf_float+0x374>
 800d56c:	f04f 0b00 	mov.w	fp, #0
 800d570:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d574:	f104 021a 	add.w	r2, r4, #26
 800d578:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d57a:	9305      	str	r3, [sp, #20]
 800d57c:	eba3 0309 	sub.w	r3, r3, r9
 800d580:	455b      	cmp	r3, fp
 800d582:	dc33      	bgt.n	800d5ec <_printf_float+0x384>
 800d584:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d588:	429a      	cmp	r2, r3
 800d58a:	db3b      	blt.n	800d604 <_printf_float+0x39c>
 800d58c:	6823      	ldr	r3, [r4, #0]
 800d58e:	07da      	lsls	r2, r3, #31
 800d590:	d438      	bmi.n	800d604 <_printf_float+0x39c>
 800d592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d594:	9a05      	ldr	r2, [sp, #20]
 800d596:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d598:	1a9a      	subs	r2, r3, r2
 800d59a:	eba3 0901 	sub.w	r9, r3, r1
 800d59e:	4591      	cmp	r9, r2
 800d5a0:	bfa8      	it	ge
 800d5a2:	4691      	movge	r9, r2
 800d5a4:	f1b9 0f00 	cmp.w	r9, #0
 800d5a8:	dc35      	bgt.n	800d616 <_printf_float+0x3ae>
 800d5aa:	f04f 0800 	mov.w	r8, #0
 800d5ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d5b2:	f104 0a1a 	add.w	sl, r4, #26
 800d5b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d5ba:	1a9b      	subs	r3, r3, r2
 800d5bc:	eba3 0309 	sub.w	r3, r3, r9
 800d5c0:	4543      	cmp	r3, r8
 800d5c2:	f77f af79 	ble.w	800d4b8 <_printf_float+0x250>
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	4652      	mov	r2, sl
 800d5ca:	4631      	mov	r1, r6
 800d5cc:	4628      	mov	r0, r5
 800d5ce:	47b8      	blx	r7
 800d5d0:	3001      	adds	r0, #1
 800d5d2:	f43f aeaa 	beq.w	800d32a <_printf_float+0xc2>
 800d5d6:	f108 0801 	add.w	r8, r8, #1
 800d5da:	e7ec      	b.n	800d5b6 <_printf_float+0x34e>
 800d5dc:	4613      	mov	r3, r2
 800d5de:	4631      	mov	r1, r6
 800d5e0:	4642      	mov	r2, r8
 800d5e2:	4628      	mov	r0, r5
 800d5e4:	47b8      	blx	r7
 800d5e6:	3001      	adds	r0, #1
 800d5e8:	d1c0      	bne.n	800d56c <_printf_float+0x304>
 800d5ea:	e69e      	b.n	800d32a <_printf_float+0xc2>
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	4631      	mov	r1, r6
 800d5f0:	4628      	mov	r0, r5
 800d5f2:	9205      	str	r2, [sp, #20]
 800d5f4:	47b8      	blx	r7
 800d5f6:	3001      	adds	r0, #1
 800d5f8:	f43f ae97 	beq.w	800d32a <_printf_float+0xc2>
 800d5fc:	9a05      	ldr	r2, [sp, #20]
 800d5fe:	f10b 0b01 	add.w	fp, fp, #1
 800d602:	e7b9      	b.n	800d578 <_printf_float+0x310>
 800d604:	ee18 3a10 	vmov	r3, s16
 800d608:	4652      	mov	r2, sl
 800d60a:	4631      	mov	r1, r6
 800d60c:	4628      	mov	r0, r5
 800d60e:	47b8      	blx	r7
 800d610:	3001      	adds	r0, #1
 800d612:	d1be      	bne.n	800d592 <_printf_float+0x32a>
 800d614:	e689      	b.n	800d32a <_printf_float+0xc2>
 800d616:	9a05      	ldr	r2, [sp, #20]
 800d618:	464b      	mov	r3, r9
 800d61a:	4442      	add	r2, r8
 800d61c:	4631      	mov	r1, r6
 800d61e:	4628      	mov	r0, r5
 800d620:	47b8      	blx	r7
 800d622:	3001      	adds	r0, #1
 800d624:	d1c1      	bne.n	800d5aa <_printf_float+0x342>
 800d626:	e680      	b.n	800d32a <_printf_float+0xc2>
 800d628:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d62a:	2a01      	cmp	r2, #1
 800d62c:	dc01      	bgt.n	800d632 <_printf_float+0x3ca>
 800d62e:	07db      	lsls	r3, r3, #31
 800d630:	d538      	bpl.n	800d6a4 <_printf_float+0x43c>
 800d632:	2301      	movs	r3, #1
 800d634:	4642      	mov	r2, r8
 800d636:	4631      	mov	r1, r6
 800d638:	4628      	mov	r0, r5
 800d63a:	47b8      	blx	r7
 800d63c:	3001      	adds	r0, #1
 800d63e:	f43f ae74 	beq.w	800d32a <_printf_float+0xc2>
 800d642:	ee18 3a10 	vmov	r3, s16
 800d646:	4652      	mov	r2, sl
 800d648:	4631      	mov	r1, r6
 800d64a:	4628      	mov	r0, r5
 800d64c:	47b8      	blx	r7
 800d64e:	3001      	adds	r0, #1
 800d650:	f43f ae6b 	beq.w	800d32a <_printf_float+0xc2>
 800d654:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d658:	2200      	movs	r2, #0
 800d65a:	2300      	movs	r3, #0
 800d65c:	f7f3 fa44 	bl	8000ae8 <__aeabi_dcmpeq>
 800d660:	b9d8      	cbnz	r0, 800d69a <_printf_float+0x432>
 800d662:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d664:	f108 0201 	add.w	r2, r8, #1
 800d668:	3b01      	subs	r3, #1
 800d66a:	4631      	mov	r1, r6
 800d66c:	4628      	mov	r0, r5
 800d66e:	47b8      	blx	r7
 800d670:	3001      	adds	r0, #1
 800d672:	d10e      	bne.n	800d692 <_printf_float+0x42a>
 800d674:	e659      	b.n	800d32a <_printf_float+0xc2>
 800d676:	2301      	movs	r3, #1
 800d678:	4652      	mov	r2, sl
 800d67a:	4631      	mov	r1, r6
 800d67c:	4628      	mov	r0, r5
 800d67e:	47b8      	blx	r7
 800d680:	3001      	adds	r0, #1
 800d682:	f43f ae52 	beq.w	800d32a <_printf_float+0xc2>
 800d686:	f108 0801 	add.w	r8, r8, #1
 800d68a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d68c:	3b01      	subs	r3, #1
 800d68e:	4543      	cmp	r3, r8
 800d690:	dcf1      	bgt.n	800d676 <_printf_float+0x40e>
 800d692:	464b      	mov	r3, r9
 800d694:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d698:	e6dc      	b.n	800d454 <_printf_float+0x1ec>
 800d69a:	f04f 0800 	mov.w	r8, #0
 800d69e:	f104 0a1a 	add.w	sl, r4, #26
 800d6a2:	e7f2      	b.n	800d68a <_printf_float+0x422>
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	4642      	mov	r2, r8
 800d6a8:	e7df      	b.n	800d66a <_printf_float+0x402>
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	464a      	mov	r2, r9
 800d6ae:	4631      	mov	r1, r6
 800d6b0:	4628      	mov	r0, r5
 800d6b2:	47b8      	blx	r7
 800d6b4:	3001      	adds	r0, #1
 800d6b6:	f43f ae38 	beq.w	800d32a <_printf_float+0xc2>
 800d6ba:	f108 0801 	add.w	r8, r8, #1
 800d6be:	68e3      	ldr	r3, [r4, #12]
 800d6c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d6c2:	1a5b      	subs	r3, r3, r1
 800d6c4:	4543      	cmp	r3, r8
 800d6c6:	dcf0      	bgt.n	800d6aa <_printf_float+0x442>
 800d6c8:	e6fa      	b.n	800d4c0 <_printf_float+0x258>
 800d6ca:	f04f 0800 	mov.w	r8, #0
 800d6ce:	f104 0919 	add.w	r9, r4, #25
 800d6d2:	e7f4      	b.n	800d6be <_printf_float+0x456>

0800d6d4 <_printf_common>:
 800d6d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6d8:	4616      	mov	r6, r2
 800d6da:	4699      	mov	r9, r3
 800d6dc:	688a      	ldr	r2, [r1, #8]
 800d6de:	690b      	ldr	r3, [r1, #16]
 800d6e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	bfb8      	it	lt
 800d6e8:	4613      	movlt	r3, r2
 800d6ea:	6033      	str	r3, [r6, #0]
 800d6ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d6f0:	4607      	mov	r7, r0
 800d6f2:	460c      	mov	r4, r1
 800d6f4:	b10a      	cbz	r2, 800d6fa <_printf_common+0x26>
 800d6f6:	3301      	adds	r3, #1
 800d6f8:	6033      	str	r3, [r6, #0]
 800d6fa:	6823      	ldr	r3, [r4, #0]
 800d6fc:	0699      	lsls	r1, r3, #26
 800d6fe:	bf42      	ittt	mi
 800d700:	6833      	ldrmi	r3, [r6, #0]
 800d702:	3302      	addmi	r3, #2
 800d704:	6033      	strmi	r3, [r6, #0]
 800d706:	6825      	ldr	r5, [r4, #0]
 800d708:	f015 0506 	ands.w	r5, r5, #6
 800d70c:	d106      	bne.n	800d71c <_printf_common+0x48>
 800d70e:	f104 0a19 	add.w	sl, r4, #25
 800d712:	68e3      	ldr	r3, [r4, #12]
 800d714:	6832      	ldr	r2, [r6, #0]
 800d716:	1a9b      	subs	r3, r3, r2
 800d718:	42ab      	cmp	r3, r5
 800d71a:	dc26      	bgt.n	800d76a <_printf_common+0x96>
 800d71c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d720:	1e13      	subs	r3, r2, #0
 800d722:	6822      	ldr	r2, [r4, #0]
 800d724:	bf18      	it	ne
 800d726:	2301      	movne	r3, #1
 800d728:	0692      	lsls	r2, r2, #26
 800d72a:	d42b      	bmi.n	800d784 <_printf_common+0xb0>
 800d72c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d730:	4649      	mov	r1, r9
 800d732:	4638      	mov	r0, r7
 800d734:	47c0      	blx	r8
 800d736:	3001      	adds	r0, #1
 800d738:	d01e      	beq.n	800d778 <_printf_common+0xa4>
 800d73a:	6823      	ldr	r3, [r4, #0]
 800d73c:	68e5      	ldr	r5, [r4, #12]
 800d73e:	6832      	ldr	r2, [r6, #0]
 800d740:	f003 0306 	and.w	r3, r3, #6
 800d744:	2b04      	cmp	r3, #4
 800d746:	bf08      	it	eq
 800d748:	1aad      	subeq	r5, r5, r2
 800d74a:	68a3      	ldr	r3, [r4, #8]
 800d74c:	6922      	ldr	r2, [r4, #16]
 800d74e:	bf0c      	ite	eq
 800d750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d754:	2500      	movne	r5, #0
 800d756:	4293      	cmp	r3, r2
 800d758:	bfc4      	itt	gt
 800d75a:	1a9b      	subgt	r3, r3, r2
 800d75c:	18ed      	addgt	r5, r5, r3
 800d75e:	2600      	movs	r6, #0
 800d760:	341a      	adds	r4, #26
 800d762:	42b5      	cmp	r5, r6
 800d764:	d11a      	bne.n	800d79c <_printf_common+0xc8>
 800d766:	2000      	movs	r0, #0
 800d768:	e008      	b.n	800d77c <_printf_common+0xa8>
 800d76a:	2301      	movs	r3, #1
 800d76c:	4652      	mov	r2, sl
 800d76e:	4649      	mov	r1, r9
 800d770:	4638      	mov	r0, r7
 800d772:	47c0      	blx	r8
 800d774:	3001      	adds	r0, #1
 800d776:	d103      	bne.n	800d780 <_printf_common+0xac>
 800d778:	f04f 30ff 	mov.w	r0, #4294967295
 800d77c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d780:	3501      	adds	r5, #1
 800d782:	e7c6      	b.n	800d712 <_printf_common+0x3e>
 800d784:	18e1      	adds	r1, r4, r3
 800d786:	1c5a      	adds	r2, r3, #1
 800d788:	2030      	movs	r0, #48	; 0x30
 800d78a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d78e:	4422      	add	r2, r4
 800d790:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d794:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d798:	3302      	adds	r3, #2
 800d79a:	e7c7      	b.n	800d72c <_printf_common+0x58>
 800d79c:	2301      	movs	r3, #1
 800d79e:	4622      	mov	r2, r4
 800d7a0:	4649      	mov	r1, r9
 800d7a2:	4638      	mov	r0, r7
 800d7a4:	47c0      	blx	r8
 800d7a6:	3001      	adds	r0, #1
 800d7a8:	d0e6      	beq.n	800d778 <_printf_common+0xa4>
 800d7aa:	3601      	adds	r6, #1
 800d7ac:	e7d9      	b.n	800d762 <_printf_common+0x8e>
	...

0800d7b0 <_printf_i>:
 800d7b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d7b4:	7e0f      	ldrb	r7, [r1, #24]
 800d7b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d7b8:	2f78      	cmp	r7, #120	; 0x78
 800d7ba:	4691      	mov	r9, r2
 800d7bc:	4680      	mov	r8, r0
 800d7be:	460c      	mov	r4, r1
 800d7c0:	469a      	mov	sl, r3
 800d7c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d7c6:	d807      	bhi.n	800d7d8 <_printf_i+0x28>
 800d7c8:	2f62      	cmp	r7, #98	; 0x62
 800d7ca:	d80a      	bhi.n	800d7e2 <_printf_i+0x32>
 800d7cc:	2f00      	cmp	r7, #0
 800d7ce:	f000 80d8 	beq.w	800d982 <_printf_i+0x1d2>
 800d7d2:	2f58      	cmp	r7, #88	; 0x58
 800d7d4:	f000 80a3 	beq.w	800d91e <_printf_i+0x16e>
 800d7d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d7dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d7e0:	e03a      	b.n	800d858 <_printf_i+0xa8>
 800d7e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d7e6:	2b15      	cmp	r3, #21
 800d7e8:	d8f6      	bhi.n	800d7d8 <_printf_i+0x28>
 800d7ea:	a101      	add	r1, pc, #4	; (adr r1, 800d7f0 <_printf_i+0x40>)
 800d7ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d7f0:	0800d849 	.word	0x0800d849
 800d7f4:	0800d85d 	.word	0x0800d85d
 800d7f8:	0800d7d9 	.word	0x0800d7d9
 800d7fc:	0800d7d9 	.word	0x0800d7d9
 800d800:	0800d7d9 	.word	0x0800d7d9
 800d804:	0800d7d9 	.word	0x0800d7d9
 800d808:	0800d85d 	.word	0x0800d85d
 800d80c:	0800d7d9 	.word	0x0800d7d9
 800d810:	0800d7d9 	.word	0x0800d7d9
 800d814:	0800d7d9 	.word	0x0800d7d9
 800d818:	0800d7d9 	.word	0x0800d7d9
 800d81c:	0800d969 	.word	0x0800d969
 800d820:	0800d88d 	.word	0x0800d88d
 800d824:	0800d94b 	.word	0x0800d94b
 800d828:	0800d7d9 	.word	0x0800d7d9
 800d82c:	0800d7d9 	.word	0x0800d7d9
 800d830:	0800d98b 	.word	0x0800d98b
 800d834:	0800d7d9 	.word	0x0800d7d9
 800d838:	0800d88d 	.word	0x0800d88d
 800d83c:	0800d7d9 	.word	0x0800d7d9
 800d840:	0800d7d9 	.word	0x0800d7d9
 800d844:	0800d953 	.word	0x0800d953
 800d848:	682b      	ldr	r3, [r5, #0]
 800d84a:	1d1a      	adds	r2, r3, #4
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	602a      	str	r2, [r5, #0]
 800d850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d858:	2301      	movs	r3, #1
 800d85a:	e0a3      	b.n	800d9a4 <_printf_i+0x1f4>
 800d85c:	6820      	ldr	r0, [r4, #0]
 800d85e:	6829      	ldr	r1, [r5, #0]
 800d860:	0606      	lsls	r6, r0, #24
 800d862:	f101 0304 	add.w	r3, r1, #4
 800d866:	d50a      	bpl.n	800d87e <_printf_i+0xce>
 800d868:	680e      	ldr	r6, [r1, #0]
 800d86a:	602b      	str	r3, [r5, #0]
 800d86c:	2e00      	cmp	r6, #0
 800d86e:	da03      	bge.n	800d878 <_printf_i+0xc8>
 800d870:	232d      	movs	r3, #45	; 0x2d
 800d872:	4276      	negs	r6, r6
 800d874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d878:	485e      	ldr	r0, [pc, #376]	; (800d9f4 <_printf_i+0x244>)
 800d87a:	230a      	movs	r3, #10
 800d87c:	e019      	b.n	800d8b2 <_printf_i+0x102>
 800d87e:	680e      	ldr	r6, [r1, #0]
 800d880:	602b      	str	r3, [r5, #0]
 800d882:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d886:	bf18      	it	ne
 800d888:	b236      	sxthne	r6, r6
 800d88a:	e7ef      	b.n	800d86c <_printf_i+0xbc>
 800d88c:	682b      	ldr	r3, [r5, #0]
 800d88e:	6820      	ldr	r0, [r4, #0]
 800d890:	1d19      	adds	r1, r3, #4
 800d892:	6029      	str	r1, [r5, #0]
 800d894:	0601      	lsls	r1, r0, #24
 800d896:	d501      	bpl.n	800d89c <_printf_i+0xec>
 800d898:	681e      	ldr	r6, [r3, #0]
 800d89a:	e002      	b.n	800d8a2 <_printf_i+0xf2>
 800d89c:	0646      	lsls	r6, r0, #25
 800d89e:	d5fb      	bpl.n	800d898 <_printf_i+0xe8>
 800d8a0:	881e      	ldrh	r6, [r3, #0]
 800d8a2:	4854      	ldr	r0, [pc, #336]	; (800d9f4 <_printf_i+0x244>)
 800d8a4:	2f6f      	cmp	r7, #111	; 0x6f
 800d8a6:	bf0c      	ite	eq
 800d8a8:	2308      	moveq	r3, #8
 800d8aa:	230a      	movne	r3, #10
 800d8ac:	2100      	movs	r1, #0
 800d8ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d8b2:	6865      	ldr	r5, [r4, #4]
 800d8b4:	60a5      	str	r5, [r4, #8]
 800d8b6:	2d00      	cmp	r5, #0
 800d8b8:	bfa2      	ittt	ge
 800d8ba:	6821      	ldrge	r1, [r4, #0]
 800d8bc:	f021 0104 	bicge.w	r1, r1, #4
 800d8c0:	6021      	strge	r1, [r4, #0]
 800d8c2:	b90e      	cbnz	r6, 800d8c8 <_printf_i+0x118>
 800d8c4:	2d00      	cmp	r5, #0
 800d8c6:	d04d      	beq.n	800d964 <_printf_i+0x1b4>
 800d8c8:	4615      	mov	r5, r2
 800d8ca:	fbb6 f1f3 	udiv	r1, r6, r3
 800d8ce:	fb03 6711 	mls	r7, r3, r1, r6
 800d8d2:	5dc7      	ldrb	r7, [r0, r7]
 800d8d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d8d8:	4637      	mov	r7, r6
 800d8da:	42bb      	cmp	r3, r7
 800d8dc:	460e      	mov	r6, r1
 800d8de:	d9f4      	bls.n	800d8ca <_printf_i+0x11a>
 800d8e0:	2b08      	cmp	r3, #8
 800d8e2:	d10b      	bne.n	800d8fc <_printf_i+0x14c>
 800d8e4:	6823      	ldr	r3, [r4, #0]
 800d8e6:	07de      	lsls	r6, r3, #31
 800d8e8:	d508      	bpl.n	800d8fc <_printf_i+0x14c>
 800d8ea:	6923      	ldr	r3, [r4, #16]
 800d8ec:	6861      	ldr	r1, [r4, #4]
 800d8ee:	4299      	cmp	r1, r3
 800d8f0:	bfde      	ittt	le
 800d8f2:	2330      	movle	r3, #48	; 0x30
 800d8f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d8f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d8fc:	1b52      	subs	r2, r2, r5
 800d8fe:	6122      	str	r2, [r4, #16]
 800d900:	f8cd a000 	str.w	sl, [sp]
 800d904:	464b      	mov	r3, r9
 800d906:	aa03      	add	r2, sp, #12
 800d908:	4621      	mov	r1, r4
 800d90a:	4640      	mov	r0, r8
 800d90c:	f7ff fee2 	bl	800d6d4 <_printf_common>
 800d910:	3001      	adds	r0, #1
 800d912:	d14c      	bne.n	800d9ae <_printf_i+0x1fe>
 800d914:	f04f 30ff 	mov.w	r0, #4294967295
 800d918:	b004      	add	sp, #16
 800d91a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d91e:	4835      	ldr	r0, [pc, #212]	; (800d9f4 <_printf_i+0x244>)
 800d920:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d924:	6829      	ldr	r1, [r5, #0]
 800d926:	6823      	ldr	r3, [r4, #0]
 800d928:	f851 6b04 	ldr.w	r6, [r1], #4
 800d92c:	6029      	str	r1, [r5, #0]
 800d92e:	061d      	lsls	r5, r3, #24
 800d930:	d514      	bpl.n	800d95c <_printf_i+0x1ac>
 800d932:	07df      	lsls	r7, r3, #31
 800d934:	bf44      	itt	mi
 800d936:	f043 0320 	orrmi.w	r3, r3, #32
 800d93a:	6023      	strmi	r3, [r4, #0]
 800d93c:	b91e      	cbnz	r6, 800d946 <_printf_i+0x196>
 800d93e:	6823      	ldr	r3, [r4, #0]
 800d940:	f023 0320 	bic.w	r3, r3, #32
 800d944:	6023      	str	r3, [r4, #0]
 800d946:	2310      	movs	r3, #16
 800d948:	e7b0      	b.n	800d8ac <_printf_i+0xfc>
 800d94a:	6823      	ldr	r3, [r4, #0]
 800d94c:	f043 0320 	orr.w	r3, r3, #32
 800d950:	6023      	str	r3, [r4, #0]
 800d952:	2378      	movs	r3, #120	; 0x78
 800d954:	4828      	ldr	r0, [pc, #160]	; (800d9f8 <_printf_i+0x248>)
 800d956:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d95a:	e7e3      	b.n	800d924 <_printf_i+0x174>
 800d95c:	0659      	lsls	r1, r3, #25
 800d95e:	bf48      	it	mi
 800d960:	b2b6      	uxthmi	r6, r6
 800d962:	e7e6      	b.n	800d932 <_printf_i+0x182>
 800d964:	4615      	mov	r5, r2
 800d966:	e7bb      	b.n	800d8e0 <_printf_i+0x130>
 800d968:	682b      	ldr	r3, [r5, #0]
 800d96a:	6826      	ldr	r6, [r4, #0]
 800d96c:	6961      	ldr	r1, [r4, #20]
 800d96e:	1d18      	adds	r0, r3, #4
 800d970:	6028      	str	r0, [r5, #0]
 800d972:	0635      	lsls	r5, r6, #24
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	d501      	bpl.n	800d97c <_printf_i+0x1cc>
 800d978:	6019      	str	r1, [r3, #0]
 800d97a:	e002      	b.n	800d982 <_printf_i+0x1d2>
 800d97c:	0670      	lsls	r0, r6, #25
 800d97e:	d5fb      	bpl.n	800d978 <_printf_i+0x1c8>
 800d980:	8019      	strh	r1, [r3, #0]
 800d982:	2300      	movs	r3, #0
 800d984:	6123      	str	r3, [r4, #16]
 800d986:	4615      	mov	r5, r2
 800d988:	e7ba      	b.n	800d900 <_printf_i+0x150>
 800d98a:	682b      	ldr	r3, [r5, #0]
 800d98c:	1d1a      	adds	r2, r3, #4
 800d98e:	602a      	str	r2, [r5, #0]
 800d990:	681d      	ldr	r5, [r3, #0]
 800d992:	6862      	ldr	r2, [r4, #4]
 800d994:	2100      	movs	r1, #0
 800d996:	4628      	mov	r0, r5
 800d998:	f7f2 fc32 	bl	8000200 <memchr>
 800d99c:	b108      	cbz	r0, 800d9a2 <_printf_i+0x1f2>
 800d99e:	1b40      	subs	r0, r0, r5
 800d9a0:	6060      	str	r0, [r4, #4]
 800d9a2:	6863      	ldr	r3, [r4, #4]
 800d9a4:	6123      	str	r3, [r4, #16]
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9ac:	e7a8      	b.n	800d900 <_printf_i+0x150>
 800d9ae:	6923      	ldr	r3, [r4, #16]
 800d9b0:	462a      	mov	r2, r5
 800d9b2:	4649      	mov	r1, r9
 800d9b4:	4640      	mov	r0, r8
 800d9b6:	47d0      	blx	sl
 800d9b8:	3001      	adds	r0, #1
 800d9ba:	d0ab      	beq.n	800d914 <_printf_i+0x164>
 800d9bc:	6823      	ldr	r3, [r4, #0]
 800d9be:	079b      	lsls	r3, r3, #30
 800d9c0:	d413      	bmi.n	800d9ea <_printf_i+0x23a>
 800d9c2:	68e0      	ldr	r0, [r4, #12]
 800d9c4:	9b03      	ldr	r3, [sp, #12]
 800d9c6:	4298      	cmp	r0, r3
 800d9c8:	bfb8      	it	lt
 800d9ca:	4618      	movlt	r0, r3
 800d9cc:	e7a4      	b.n	800d918 <_printf_i+0x168>
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	4632      	mov	r2, r6
 800d9d2:	4649      	mov	r1, r9
 800d9d4:	4640      	mov	r0, r8
 800d9d6:	47d0      	blx	sl
 800d9d8:	3001      	adds	r0, #1
 800d9da:	d09b      	beq.n	800d914 <_printf_i+0x164>
 800d9dc:	3501      	adds	r5, #1
 800d9de:	68e3      	ldr	r3, [r4, #12]
 800d9e0:	9903      	ldr	r1, [sp, #12]
 800d9e2:	1a5b      	subs	r3, r3, r1
 800d9e4:	42ab      	cmp	r3, r5
 800d9e6:	dcf2      	bgt.n	800d9ce <_printf_i+0x21e>
 800d9e8:	e7eb      	b.n	800d9c2 <_printf_i+0x212>
 800d9ea:	2500      	movs	r5, #0
 800d9ec:	f104 0619 	add.w	r6, r4, #25
 800d9f0:	e7f5      	b.n	800d9de <_printf_i+0x22e>
 800d9f2:	bf00      	nop
 800d9f4:	08010858 	.word	0x08010858
 800d9f8:	08010869 	.word	0x08010869

0800d9fc <iprintf>:
 800d9fc:	b40f      	push	{r0, r1, r2, r3}
 800d9fe:	4b0a      	ldr	r3, [pc, #40]	; (800da28 <iprintf+0x2c>)
 800da00:	b513      	push	{r0, r1, r4, lr}
 800da02:	681c      	ldr	r4, [r3, #0]
 800da04:	b124      	cbz	r4, 800da10 <iprintf+0x14>
 800da06:	69a3      	ldr	r3, [r4, #24]
 800da08:	b913      	cbnz	r3, 800da10 <iprintf+0x14>
 800da0a:	4620      	mov	r0, r4
 800da0c:	f001 fad0 	bl	800efb0 <__sinit>
 800da10:	ab05      	add	r3, sp, #20
 800da12:	9a04      	ldr	r2, [sp, #16]
 800da14:	68a1      	ldr	r1, [r4, #8]
 800da16:	9301      	str	r3, [sp, #4]
 800da18:	4620      	mov	r0, r4
 800da1a:	f002 f99b 	bl	800fd54 <_vfiprintf_r>
 800da1e:	b002      	add	sp, #8
 800da20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da24:	b004      	add	sp, #16
 800da26:	4770      	bx	lr
 800da28:	2000002c 	.word	0x2000002c

0800da2c <_puts_r>:
 800da2c:	b570      	push	{r4, r5, r6, lr}
 800da2e:	460e      	mov	r6, r1
 800da30:	4605      	mov	r5, r0
 800da32:	b118      	cbz	r0, 800da3c <_puts_r+0x10>
 800da34:	6983      	ldr	r3, [r0, #24]
 800da36:	b90b      	cbnz	r3, 800da3c <_puts_r+0x10>
 800da38:	f001 faba 	bl	800efb0 <__sinit>
 800da3c:	69ab      	ldr	r3, [r5, #24]
 800da3e:	68ac      	ldr	r4, [r5, #8]
 800da40:	b913      	cbnz	r3, 800da48 <_puts_r+0x1c>
 800da42:	4628      	mov	r0, r5
 800da44:	f001 fab4 	bl	800efb0 <__sinit>
 800da48:	4b2c      	ldr	r3, [pc, #176]	; (800dafc <_puts_r+0xd0>)
 800da4a:	429c      	cmp	r4, r3
 800da4c:	d120      	bne.n	800da90 <_puts_r+0x64>
 800da4e:	686c      	ldr	r4, [r5, #4]
 800da50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da52:	07db      	lsls	r3, r3, #31
 800da54:	d405      	bmi.n	800da62 <_puts_r+0x36>
 800da56:	89a3      	ldrh	r3, [r4, #12]
 800da58:	0598      	lsls	r0, r3, #22
 800da5a:	d402      	bmi.n	800da62 <_puts_r+0x36>
 800da5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da5e:	f001 fb5c 	bl	800f11a <__retarget_lock_acquire_recursive>
 800da62:	89a3      	ldrh	r3, [r4, #12]
 800da64:	0719      	lsls	r1, r3, #28
 800da66:	d51d      	bpl.n	800daa4 <_puts_r+0x78>
 800da68:	6923      	ldr	r3, [r4, #16]
 800da6a:	b1db      	cbz	r3, 800daa4 <_puts_r+0x78>
 800da6c:	3e01      	subs	r6, #1
 800da6e:	68a3      	ldr	r3, [r4, #8]
 800da70:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800da74:	3b01      	subs	r3, #1
 800da76:	60a3      	str	r3, [r4, #8]
 800da78:	bb39      	cbnz	r1, 800daca <_puts_r+0x9e>
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	da38      	bge.n	800daf0 <_puts_r+0xc4>
 800da7e:	4622      	mov	r2, r4
 800da80:	210a      	movs	r1, #10
 800da82:	4628      	mov	r0, r5
 800da84:	f000 fa00 	bl	800de88 <__swbuf_r>
 800da88:	3001      	adds	r0, #1
 800da8a:	d011      	beq.n	800dab0 <_puts_r+0x84>
 800da8c:	250a      	movs	r5, #10
 800da8e:	e011      	b.n	800dab4 <_puts_r+0x88>
 800da90:	4b1b      	ldr	r3, [pc, #108]	; (800db00 <_puts_r+0xd4>)
 800da92:	429c      	cmp	r4, r3
 800da94:	d101      	bne.n	800da9a <_puts_r+0x6e>
 800da96:	68ac      	ldr	r4, [r5, #8]
 800da98:	e7da      	b.n	800da50 <_puts_r+0x24>
 800da9a:	4b1a      	ldr	r3, [pc, #104]	; (800db04 <_puts_r+0xd8>)
 800da9c:	429c      	cmp	r4, r3
 800da9e:	bf08      	it	eq
 800daa0:	68ec      	ldreq	r4, [r5, #12]
 800daa2:	e7d5      	b.n	800da50 <_puts_r+0x24>
 800daa4:	4621      	mov	r1, r4
 800daa6:	4628      	mov	r0, r5
 800daa8:	f000 fa52 	bl	800df50 <__swsetup_r>
 800daac:	2800      	cmp	r0, #0
 800daae:	d0dd      	beq.n	800da6c <_puts_r+0x40>
 800dab0:	f04f 35ff 	mov.w	r5, #4294967295
 800dab4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dab6:	07da      	lsls	r2, r3, #31
 800dab8:	d405      	bmi.n	800dac6 <_puts_r+0x9a>
 800daba:	89a3      	ldrh	r3, [r4, #12]
 800dabc:	059b      	lsls	r3, r3, #22
 800dabe:	d402      	bmi.n	800dac6 <_puts_r+0x9a>
 800dac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dac2:	f001 fb2b 	bl	800f11c <__retarget_lock_release_recursive>
 800dac6:	4628      	mov	r0, r5
 800dac8:	bd70      	pop	{r4, r5, r6, pc}
 800daca:	2b00      	cmp	r3, #0
 800dacc:	da04      	bge.n	800dad8 <_puts_r+0xac>
 800dace:	69a2      	ldr	r2, [r4, #24]
 800dad0:	429a      	cmp	r2, r3
 800dad2:	dc06      	bgt.n	800dae2 <_puts_r+0xb6>
 800dad4:	290a      	cmp	r1, #10
 800dad6:	d004      	beq.n	800dae2 <_puts_r+0xb6>
 800dad8:	6823      	ldr	r3, [r4, #0]
 800dada:	1c5a      	adds	r2, r3, #1
 800dadc:	6022      	str	r2, [r4, #0]
 800dade:	7019      	strb	r1, [r3, #0]
 800dae0:	e7c5      	b.n	800da6e <_puts_r+0x42>
 800dae2:	4622      	mov	r2, r4
 800dae4:	4628      	mov	r0, r5
 800dae6:	f000 f9cf 	bl	800de88 <__swbuf_r>
 800daea:	3001      	adds	r0, #1
 800daec:	d1bf      	bne.n	800da6e <_puts_r+0x42>
 800daee:	e7df      	b.n	800dab0 <_puts_r+0x84>
 800daf0:	6823      	ldr	r3, [r4, #0]
 800daf2:	250a      	movs	r5, #10
 800daf4:	1c5a      	adds	r2, r3, #1
 800daf6:	6022      	str	r2, [r4, #0]
 800daf8:	701d      	strb	r5, [r3, #0]
 800dafa:	e7db      	b.n	800dab4 <_puts_r+0x88>
 800dafc:	08010ac4 	.word	0x08010ac4
 800db00:	08010ae4 	.word	0x08010ae4
 800db04:	08010aa4 	.word	0x08010aa4

0800db08 <puts>:
 800db08:	4b02      	ldr	r3, [pc, #8]	; (800db14 <puts+0xc>)
 800db0a:	4601      	mov	r1, r0
 800db0c:	6818      	ldr	r0, [r3, #0]
 800db0e:	f7ff bf8d 	b.w	800da2c <_puts_r>
 800db12:	bf00      	nop
 800db14:	2000002c 	.word	0x2000002c

0800db18 <_sbrk_r>:
 800db18:	b538      	push	{r3, r4, r5, lr}
 800db1a:	4d06      	ldr	r5, [pc, #24]	; (800db34 <_sbrk_r+0x1c>)
 800db1c:	2300      	movs	r3, #0
 800db1e:	4604      	mov	r4, r0
 800db20:	4608      	mov	r0, r1
 800db22:	602b      	str	r3, [r5, #0]
 800db24:	f7f5 fa2a 	bl	8002f7c <_sbrk>
 800db28:	1c43      	adds	r3, r0, #1
 800db2a:	d102      	bne.n	800db32 <_sbrk_r+0x1a>
 800db2c:	682b      	ldr	r3, [r5, #0]
 800db2e:	b103      	cbz	r3, 800db32 <_sbrk_r+0x1a>
 800db30:	6023      	str	r3, [r4, #0]
 800db32:	bd38      	pop	{r3, r4, r5, pc}
 800db34:	200036c4 	.word	0x200036c4

0800db38 <_raise_r>:
 800db38:	291f      	cmp	r1, #31
 800db3a:	b538      	push	{r3, r4, r5, lr}
 800db3c:	4604      	mov	r4, r0
 800db3e:	460d      	mov	r5, r1
 800db40:	d904      	bls.n	800db4c <_raise_r+0x14>
 800db42:	2316      	movs	r3, #22
 800db44:	6003      	str	r3, [r0, #0]
 800db46:	f04f 30ff 	mov.w	r0, #4294967295
 800db4a:	bd38      	pop	{r3, r4, r5, pc}
 800db4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800db4e:	b112      	cbz	r2, 800db56 <_raise_r+0x1e>
 800db50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800db54:	b94b      	cbnz	r3, 800db6a <_raise_r+0x32>
 800db56:	4620      	mov	r0, r4
 800db58:	f000 f830 	bl	800dbbc <_getpid_r>
 800db5c:	462a      	mov	r2, r5
 800db5e:	4601      	mov	r1, r0
 800db60:	4620      	mov	r0, r4
 800db62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db66:	f000 b817 	b.w	800db98 <_kill_r>
 800db6a:	2b01      	cmp	r3, #1
 800db6c:	d00a      	beq.n	800db84 <_raise_r+0x4c>
 800db6e:	1c59      	adds	r1, r3, #1
 800db70:	d103      	bne.n	800db7a <_raise_r+0x42>
 800db72:	2316      	movs	r3, #22
 800db74:	6003      	str	r3, [r0, #0]
 800db76:	2001      	movs	r0, #1
 800db78:	e7e7      	b.n	800db4a <_raise_r+0x12>
 800db7a:	2400      	movs	r4, #0
 800db7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800db80:	4628      	mov	r0, r5
 800db82:	4798      	blx	r3
 800db84:	2000      	movs	r0, #0
 800db86:	e7e0      	b.n	800db4a <_raise_r+0x12>

0800db88 <raise>:
 800db88:	4b02      	ldr	r3, [pc, #8]	; (800db94 <raise+0xc>)
 800db8a:	4601      	mov	r1, r0
 800db8c:	6818      	ldr	r0, [r3, #0]
 800db8e:	f7ff bfd3 	b.w	800db38 <_raise_r>
 800db92:	bf00      	nop
 800db94:	2000002c 	.word	0x2000002c

0800db98 <_kill_r>:
 800db98:	b538      	push	{r3, r4, r5, lr}
 800db9a:	4d07      	ldr	r5, [pc, #28]	; (800dbb8 <_kill_r+0x20>)
 800db9c:	2300      	movs	r3, #0
 800db9e:	4604      	mov	r4, r0
 800dba0:	4608      	mov	r0, r1
 800dba2:	4611      	mov	r1, r2
 800dba4:	602b      	str	r3, [r5, #0]
 800dba6:	f7f5 f97d 	bl	8002ea4 <_kill>
 800dbaa:	1c43      	adds	r3, r0, #1
 800dbac:	d102      	bne.n	800dbb4 <_kill_r+0x1c>
 800dbae:	682b      	ldr	r3, [r5, #0]
 800dbb0:	b103      	cbz	r3, 800dbb4 <_kill_r+0x1c>
 800dbb2:	6023      	str	r3, [r4, #0]
 800dbb4:	bd38      	pop	{r3, r4, r5, pc}
 800dbb6:	bf00      	nop
 800dbb8:	200036c4 	.word	0x200036c4

0800dbbc <_getpid_r>:
 800dbbc:	f7f5 b96a 	b.w	8002e94 <_getpid>

0800dbc0 <siscanf>:
 800dbc0:	b40e      	push	{r1, r2, r3}
 800dbc2:	b510      	push	{r4, lr}
 800dbc4:	b09f      	sub	sp, #124	; 0x7c
 800dbc6:	ac21      	add	r4, sp, #132	; 0x84
 800dbc8:	f44f 7101 	mov.w	r1, #516	; 0x204
 800dbcc:	f854 2b04 	ldr.w	r2, [r4], #4
 800dbd0:	9201      	str	r2, [sp, #4]
 800dbd2:	f8ad 101c 	strh.w	r1, [sp, #28]
 800dbd6:	9004      	str	r0, [sp, #16]
 800dbd8:	9008      	str	r0, [sp, #32]
 800dbda:	f7f2 fb03 	bl	80001e4 <strlen>
 800dbde:	4b0c      	ldr	r3, [pc, #48]	; (800dc10 <siscanf+0x50>)
 800dbe0:	9005      	str	r0, [sp, #20]
 800dbe2:	9009      	str	r0, [sp, #36]	; 0x24
 800dbe4:	930d      	str	r3, [sp, #52]	; 0x34
 800dbe6:	480b      	ldr	r0, [pc, #44]	; (800dc14 <siscanf+0x54>)
 800dbe8:	9a01      	ldr	r2, [sp, #4]
 800dbea:	6800      	ldr	r0, [r0, #0]
 800dbec:	9403      	str	r4, [sp, #12]
 800dbee:	2300      	movs	r3, #0
 800dbf0:	9311      	str	r3, [sp, #68]	; 0x44
 800dbf2:	9316      	str	r3, [sp, #88]	; 0x58
 800dbf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dbf8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800dbfc:	a904      	add	r1, sp, #16
 800dbfe:	4623      	mov	r3, r4
 800dc00:	f001 ff06 	bl	800fa10 <__ssvfiscanf_r>
 800dc04:	b01f      	add	sp, #124	; 0x7c
 800dc06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc0a:	b003      	add	sp, #12
 800dc0c:	4770      	bx	lr
 800dc0e:	bf00      	nop
 800dc10:	0800dc3b 	.word	0x0800dc3b
 800dc14:	2000002c 	.word	0x2000002c

0800dc18 <__sread>:
 800dc18:	b510      	push	{r4, lr}
 800dc1a:	460c      	mov	r4, r1
 800dc1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc20:	f002 fb1a 	bl	8010258 <_read_r>
 800dc24:	2800      	cmp	r0, #0
 800dc26:	bfab      	itete	ge
 800dc28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dc2a:	89a3      	ldrhlt	r3, [r4, #12]
 800dc2c:	181b      	addge	r3, r3, r0
 800dc2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dc32:	bfac      	ite	ge
 800dc34:	6563      	strge	r3, [r4, #84]	; 0x54
 800dc36:	81a3      	strhlt	r3, [r4, #12]
 800dc38:	bd10      	pop	{r4, pc}

0800dc3a <__seofread>:
 800dc3a:	2000      	movs	r0, #0
 800dc3c:	4770      	bx	lr

0800dc3e <__swrite>:
 800dc3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc42:	461f      	mov	r7, r3
 800dc44:	898b      	ldrh	r3, [r1, #12]
 800dc46:	05db      	lsls	r3, r3, #23
 800dc48:	4605      	mov	r5, r0
 800dc4a:	460c      	mov	r4, r1
 800dc4c:	4616      	mov	r6, r2
 800dc4e:	d505      	bpl.n	800dc5c <__swrite+0x1e>
 800dc50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc54:	2302      	movs	r3, #2
 800dc56:	2200      	movs	r2, #0
 800dc58:	f001 fa62 	bl	800f120 <_lseek_r>
 800dc5c:	89a3      	ldrh	r3, [r4, #12]
 800dc5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dc66:	81a3      	strh	r3, [r4, #12]
 800dc68:	4632      	mov	r2, r6
 800dc6a:	463b      	mov	r3, r7
 800dc6c:	4628      	mov	r0, r5
 800dc6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc72:	f000 b95b 	b.w	800df2c <_write_r>

0800dc76 <__sseek>:
 800dc76:	b510      	push	{r4, lr}
 800dc78:	460c      	mov	r4, r1
 800dc7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc7e:	f001 fa4f 	bl	800f120 <_lseek_r>
 800dc82:	1c43      	adds	r3, r0, #1
 800dc84:	89a3      	ldrh	r3, [r4, #12]
 800dc86:	bf15      	itete	ne
 800dc88:	6560      	strne	r0, [r4, #84]	; 0x54
 800dc8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dc8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dc92:	81a3      	strheq	r3, [r4, #12]
 800dc94:	bf18      	it	ne
 800dc96:	81a3      	strhne	r3, [r4, #12]
 800dc98:	bd10      	pop	{r4, pc}

0800dc9a <__sclose>:
 800dc9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc9e:	f000 b9e3 	b.w	800e068 <_close_r>

0800dca2 <strcpy>:
 800dca2:	4603      	mov	r3, r0
 800dca4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dca8:	f803 2b01 	strb.w	r2, [r3], #1
 800dcac:	2a00      	cmp	r2, #0
 800dcae:	d1f9      	bne.n	800dca4 <strcpy+0x2>
 800dcb0:	4770      	bx	lr
	...

0800dcb4 <strtok>:
 800dcb4:	4b16      	ldr	r3, [pc, #88]	; (800dd10 <strtok+0x5c>)
 800dcb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dcb8:	681e      	ldr	r6, [r3, #0]
 800dcba:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800dcbc:	4605      	mov	r5, r0
 800dcbe:	b9fc      	cbnz	r4, 800dd00 <strtok+0x4c>
 800dcc0:	2050      	movs	r0, #80	; 0x50
 800dcc2:	9101      	str	r1, [sp, #4]
 800dcc4:	f7ff f92a 	bl	800cf1c <malloc>
 800dcc8:	9901      	ldr	r1, [sp, #4]
 800dcca:	65b0      	str	r0, [r6, #88]	; 0x58
 800dccc:	4602      	mov	r2, r0
 800dcce:	b920      	cbnz	r0, 800dcda <strtok+0x26>
 800dcd0:	4b10      	ldr	r3, [pc, #64]	; (800dd14 <strtok+0x60>)
 800dcd2:	4811      	ldr	r0, [pc, #68]	; (800dd18 <strtok+0x64>)
 800dcd4:	2157      	movs	r1, #87	; 0x57
 800dcd6:	f000 f9a9 	bl	800e02c <__assert_func>
 800dcda:	e9c0 4400 	strd	r4, r4, [r0]
 800dcde:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800dce2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800dce6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800dcea:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800dcee:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800dcf2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800dcf6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800dcfa:	6184      	str	r4, [r0, #24]
 800dcfc:	7704      	strb	r4, [r0, #28]
 800dcfe:	6244      	str	r4, [r0, #36]	; 0x24
 800dd00:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800dd02:	2301      	movs	r3, #1
 800dd04:	4628      	mov	r0, r5
 800dd06:	b002      	add	sp, #8
 800dd08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dd0c:	f000 b806 	b.w	800dd1c <__strtok_r>
 800dd10:	2000002c 	.word	0x2000002c
 800dd14:	0801087a 	.word	0x0801087a
 800dd18:	08010891 	.word	0x08010891

0800dd1c <__strtok_r>:
 800dd1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd1e:	b908      	cbnz	r0, 800dd24 <__strtok_r+0x8>
 800dd20:	6810      	ldr	r0, [r2, #0]
 800dd22:	b188      	cbz	r0, 800dd48 <__strtok_r+0x2c>
 800dd24:	4604      	mov	r4, r0
 800dd26:	4620      	mov	r0, r4
 800dd28:	f814 5b01 	ldrb.w	r5, [r4], #1
 800dd2c:	460f      	mov	r7, r1
 800dd2e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800dd32:	b91e      	cbnz	r6, 800dd3c <__strtok_r+0x20>
 800dd34:	b965      	cbnz	r5, 800dd50 <__strtok_r+0x34>
 800dd36:	6015      	str	r5, [r2, #0]
 800dd38:	4628      	mov	r0, r5
 800dd3a:	e005      	b.n	800dd48 <__strtok_r+0x2c>
 800dd3c:	42b5      	cmp	r5, r6
 800dd3e:	d1f6      	bne.n	800dd2e <__strtok_r+0x12>
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d1f0      	bne.n	800dd26 <__strtok_r+0xa>
 800dd44:	6014      	str	r4, [r2, #0]
 800dd46:	7003      	strb	r3, [r0, #0]
 800dd48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd4a:	461c      	mov	r4, r3
 800dd4c:	e00c      	b.n	800dd68 <__strtok_r+0x4c>
 800dd4e:	b915      	cbnz	r5, 800dd56 <__strtok_r+0x3a>
 800dd50:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dd54:	460e      	mov	r6, r1
 800dd56:	f816 5b01 	ldrb.w	r5, [r6], #1
 800dd5a:	42ab      	cmp	r3, r5
 800dd5c:	d1f7      	bne.n	800dd4e <__strtok_r+0x32>
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d0f3      	beq.n	800dd4a <__strtok_r+0x2e>
 800dd62:	2300      	movs	r3, #0
 800dd64:	f804 3c01 	strb.w	r3, [r4, #-1]
 800dd68:	6014      	str	r4, [r2, #0]
 800dd6a:	e7ed      	b.n	800dd48 <__strtok_r+0x2c>

0800dd6c <_strtol_l.constprop.0>:
 800dd6c:	2b01      	cmp	r3, #1
 800dd6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd72:	d001      	beq.n	800dd78 <_strtol_l.constprop.0+0xc>
 800dd74:	2b24      	cmp	r3, #36	; 0x24
 800dd76:	d906      	bls.n	800dd86 <_strtol_l.constprop.0+0x1a>
 800dd78:	f7ff f8a6 	bl	800cec8 <__errno>
 800dd7c:	2316      	movs	r3, #22
 800dd7e:	6003      	str	r3, [r0, #0]
 800dd80:	2000      	movs	r0, #0
 800dd82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd86:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800de6c <_strtol_l.constprop.0+0x100>
 800dd8a:	460d      	mov	r5, r1
 800dd8c:	462e      	mov	r6, r5
 800dd8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dd92:	f814 700c 	ldrb.w	r7, [r4, ip]
 800dd96:	f017 0708 	ands.w	r7, r7, #8
 800dd9a:	d1f7      	bne.n	800dd8c <_strtol_l.constprop.0+0x20>
 800dd9c:	2c2d      	cmp	r4, #45	; 0x2d
 800dd9e:	d132      	bne.n	800de06 <_strtol_l.constprop.0+0x9a>
 800dda0:	782c      	ldrb	r4, [r5, #0]
 800dda2:	2701      	movs	r7, #1
 800dda4:	1cb5      	adds	r5, r6, #2
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d05b      	beq.n	800de62 <_strtol_l.constprop.0+0xf6>
 800ddaa:	2b10      	cmp	r3, #16
 800ddac:	d109      	bne.n	800ddc2 <_strtol_l.constprop.0+0x56>
 800ddae:	2c30      	cmp	r4, #48	; 0x30
 800ddb0:	d107      	bne.n	800ddc2 <_strtol_l.constprop.0+0x56>
 800ddb2:	782c      	ldrb	r4, [r5, #0]
 800ddb4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ddb8:	2c58      	cmp	r4, #88	; 0x58
 800ddba:	d14d      	bne.n	800de58 <_strtol_l.constprop.0+0xec>
 800ddbc:	786c      	ldrb	r4, [r5, #1]
 800ddbe:	2310      	movs	r3, #16
 800ddc0:	3502      	adds	r5, #2
 800ddc2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ddc6:	f108 38ff 	add.w	r8, r8, #4294967295
 800ddca:	f04f 0c00 	mov.w	ip, #0
 800ddce:	fbb8 f9f3 	udiv	r9, r8, r3
 800ddd2:	4666      	mov	r6, ip
 800ddd4:	fb03 8a19 	mls	sl, r3, r9, r8
 800ddd8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800dddc:	f1be 0f09 	cmp.w	lr, #9
 800dde0:	d816      	bhi.n	800de10 <_strtol_l.constprop.0+0xa4>
 800dde2:	4674      	mov	r4, lr
 800dde4:	42a3      	cmp	r3, r4
 800dde6:	dd24      	ble.n	800de32 <_strtol_l.constprop.0+0xc6>
 800dde8:	f1bc 0f00 	cmp.w	ip, #0
 800ddec:	db1e      	blt.n	800de2c <_strtol_l.constprop.0+0xc0>
 800ddee:	45b1      	cmp	r9, r6
 800ddf0:	d31c      	bcc.n	800de2c <_strtol_l.constprop.0+0xc0>
 800ddf2:	d101      	bne.n	800ddf8 <_strtol_l.constprop.0+0x8c>
 800ddf4:	45a2      	cmp	sl, r4
 800ddf6:	db19      	blt.n	800de2c <_strtol_l.constprop.0+0xc0>
 800ddf8:	fb06 4603 	mla	r6, r6, r3, r4
 800ddfc:	f04f 0c01 	mov.w	ip, #1
 800de00:	f815 4b01 	ldrb.w	r4, [r5], #1
 800de04:	e7e8      	b.n	800ddd8 <_strtol_l.constprop.0+0x6c>
 800de06:	2c2b      	cmp	r4, #43	; 0x2b
 800de08:	bf04      	itt	eq
 800de0a:	782c      	ldrbeq	r4, [r5, #0]
 800de0c:	1cb5      	addeq	r5, r6, #2
 800de0e:	e7ca      	b.n	800dda6 <_strtol_l.constprop.0+0x3a>
 800de10:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800de14:	f1be 0f19 	cmp.w	lr, #25
 800de18:	d801      	bhi.n	800de1e <_strtol_l.constprop.0+0xb2>
 800de1a:	3c37      	subs	r4, #55	; 0x37
 800de1c:	e7e2      	b.n	800dde4 <_strtol_l.constprop.0+0x78>
 800de1e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800de22:	f1be 0f19 	cmp.w	lr, #25
 800de26:	d804      	bhi.n	800de32 <_strtol_l.constprop.0+0xc6>
 800de28:	3c57      	subs	r4, #87	; 0x57
 800de2a:	e7db      	b.n	800dde4 <_strtol_l.constprop.0+0x78>
 800de2c:	f04f 3cff 	mov.w	ip, #4294967295
 800de30:	e7e6      	b.n	800de00 <_strtol_l.constprop.0+0x94>
 800de32:	f1bc 0f00 	cmp.w	ip, #0
 800de36:	da05      	bge.n	800de44 <_strtol_l.constprop.0+0xd8>
 800de38:	2322      	movs	r3, #34	; 0x22
 800de3a:	6003      	str	r3, [r0, #0]
 800de3c:	4646      	mov	r6, r8
 800de3e:	b942      	cbnz	r2, 800de52 <_strtol_l.constprop.0+0xe6>
 800de40:	4630      	mov	r0, r6
 800de42:	e79e      	b.n	800dd82 <_strtol_l.constprop.0+0x16>
 800de44:	b107      	cbz	r7, 800de48 <_strtol_l.constprop.0+0xdc>
 800de46:	4276      	negs	r6, r6
 800de48:	2a00      	cmp	r2, #0
 800de4a:	d0f9      	beq.n	800de40 <_strtol_l.constprop.0+0xd4>
 800de4c:	f1bc 0f00 	cmp.w	ip, #0
 800de50:	d000      	beq.n	800de54 <_strtol_l.constprop.0+0xe8>
 800de52:	1e69      	subs	r1, r5, #1
 800de54:	6011      	str	r1, [r2, #0]
 800de56:	e7f3      	b.n	800de40 <_strtol_l.constprop.0+0xd4>
 800de58:	2430      	movs	r4, #48	; 0x30
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d1b1      	bne.n	800ddc2 <_strtol_l.constprop.0+0x56>
 800de5e:	2308      	movs	r3, #8
 800de60:	e7af      	b.n	800ddc2 <_strtol_l.constprop.0+0x56>
 800de62:	2c30      	cmp	r4, #48	; 0x30
 800de64:	d0a5      	beq.n	800ddb2 <_strtol_l.constprop.0+0x46>
 800de66:	230a      	movs	r3, #10
 800de68:	e7ab      	b.n	800ddc2 <_strtol_l.constprop.0+0x56>
 800de6a:	bf00      	nop
 800de6c:	0801092b 	.word	0x0801092b

0800de70 <_strtol_r>:
 800de70:	f7ff bf7c 	b.w	800dd6c <_strtol_l.constprop.0>

0800de74 <strtol>:
 800de74:	4613      	mov	r3, r2
 800de76:	460a      	mov	r2, r1
 800de78:	4601      	mov	r1, r0
 800de7a:	4802      	ldr	r0, [pc, #8]	; (800de84 <strtol+0x10>)
 800de7c:	6800      	ldr	r0, [r0, #0]
 800de7e:	f7ff bf75 	b.w	800dd6c <_strtol_l.constprop.0>
 800de82:	bf00      	nop
 800de84:	2000002c 	.word	0x2000002c

0800de88 <__swbuf_r>:
 800de88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de8a:	460e      	mov	r6, r1
 800de8c:	4614      	mov	r4, r2
 800de8e:	4605      	mov	r5, r0
 800de90:	b118      	cbz	r0, 800de9a <__swbuf_r+0x12>
 800de92:	6983      	ldr	r3, [r0, #24]
 800de94:	b90b      	cbnz	r3, 800de9a <__swbuf_r+0x12>
 800de96:	f001 f88b 	bl	800efb0 <__sinit>
 800de9a:	4b21      	ldr	r3, [pc, #132]	; (800df20 <__swbuf_r+0x98>)
 800de9c:	429c      	cmp	r4, r3
 800de9e:	d12b      	bne.n	800def8 <__swbuf_r+0x70>
 800dea0:	686c      	ldr	r4, [r5, #4]
 800dea2:	69a3      	ldr	r3, [r4, #24]
 800dea4:	60a3      	str	r3, [r4, #8]
 800dea6:	89a3      	ldrh	r3, [r4, #12]
 800dea8:	071a      	lsls	r2, r3, #28
 800deaa:	d52f      	bpl.n	800df0c <__swbuf_r+0x84>
 800deac:	6923      	ldr	r3, [r4, #16]
 800deae:	b36b      	cbz	r3, 800df0c <__swbuf_r+0x84>
 800deb0:	6923      	ldr	r3, [r4, #16]
 800deb2:	6820      	ldr	r0, [r4, #0]
 800deb4:	1ac0      	subs	r0, r0, r3
 800deb6:	6963      	ldr	r3, [r4, #20]
 800deb8:	b2f6      	uxtb	r6, r6
 800deba:	4283      	cmp	r3, r0
 800debc:	4637      	mov	r7, r6
 800debe:	dc04      	bgt.n	800deca <__swbuf_r+0x42>
 800dec0:	4621      	mov	r1, r4
 800dec2:	4628      	mov	r0, r5
 800dec4:	f000 ffe0 	bl	800ee88 <_fflush_r>
 800dec8:	bb30      	cbnz	r0, 800df18 <__swbuf_r+0x90>
 800deca:	68a3      	ldr	r3, [r4, #8]
 800decc:	3b01      	subs	r3, #1
 800dece:	60a3      	str	r3, [r4, #8]
 800ded0:	6823      	ldr	r3, [r4, #0]
 800ded2:	1c5a      	adds	r2, r3, #1
 800ded4:	6022      	str	r2, [r4, #0]
 800ded6:	701e      	strb	r6, [r3, #0]
 800ded8:	6963      	ldr	r3, [r4, #20]
 800deda:	3001      	adds	r0, #1
 800dedc:	4283      	cmp	r3, r0
 800dede:	d004      	beq.n	800deea <__swbuf_r+0x62>
 800dee0:	89a3      	ldrh	r3, [r4, #12]
 800dee2:	07db      	lsls	r3, r3, #31
 800dee4:	d506      	bpl.n	800def4 <__swbuf_r+0x6c>
 800dee6:	2e0a      	cmp	r6, #10
 800dee8:	d104      	bne.n	800def4 <__swbuf_r+0x6c>
 800deea:	4621      	mov	r1, r4
 800deec:	4628      	mov	r0, r5
 800deee:	f000 ffcb 	bl	800ee88 <_fflush_r>
 800def2:	b988      	cbnz	r0, 800df18 <__swbuf_r+0x90>
 800def4:	4638      	mov	r0, r7
 800def6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800def8:	4b0a      	ldr	r3, [pc, #40]	; (800df24 <__swbuf_r+0x9c>)
 800defa:	429c      	cmp	r4, r3
 800defc:	d101      	bne.n	800df02 <__swbuf_r+0x7a>
 800defe:	68ac      	ldr	r4, [r5, #8]
 800df00:	e7cf      	b.n	800dea2 <__swbuf_r+0x1a>
 800df02:	4b09      	ldr	r3, [pc, #36]	; (800df28 <__swbuf_r+0xa0>)
 800df04:	429c      	cmp	r4, r3
 800df06:	bf08      	it	eq
 800df08:	68ec      	ldreq	r4, [r5, #12]
 800df0a:	e7ca      	b.n	800dea2 <__swbuf_r+0x1a>
 800df0c:	4621      	mov	r1, r4
 800df0e:	4628      	mov	r0, r5
 800df10:	f000 f81e 	bl	800df50 <__swsetup_r>
 800df14:	2800      	cmp	r0, #0
 800df16:	d0cb      	beq.n	800deb0 <__swbuf_r+0x28>
 800df18:	f04f 37ff 	mov.w	r7, #4294967295
 800df1c:	e7ea      	b.n	800def4 <__swbuf_r+0x6c>
 800df1e:	bf00      	nop
 800df20:	08010ac4 	.word	0x08010ac4
 800df24:	08010ae4 	.word	0x08010ae4
 800df28:	08010aa4 	.word	0x08010aa4

0800df2c <_write_r>:
 800df2c:	b538      	push	{r3, r4, r5, lr}
 800df2e:	4d07      	ldr	r5, [pc, #28]	; (800df4c <_write_r+0x20>)
 800df30:	4604      	mov	r4, r0
 800df32:	4608      	mov	r0, r1
 800df34:	4611      	mov	r1, r2
 800df36:	2200      	movs	r2, #0
 800df38:	602a      	str	r2, [r5, #0]
 800df3a:	461a      	mov	r2, r3
 800df3c:	f7f4 fbb0 	bl	80026a0 <_write>
 800df40:	1c43      	adds	r3, r0, #1
 800df42:	d102      	bne.n	800df4a <_write_r+0x1e>
 800df44:	682b      	ldr	r3, [r5, #0]
 800df46:	b103      	cbz	r3, 800df4a <_write_r+0x1e>
 800df48:	6023      	str	r3, [r4, #0]
 800df4a:	bd38      	pop	{r3, r4, r5, pc}
 800df4c:	200036c4 	.word	0x200036c4

0800df50 <__swsetup_r>:
 800df50:	4b32      	ldr	r3, [pc, #200]	; (800e01c <__swsetup_r+0xcc>)
 800df52:	b570      	push	{r4, r5, r6, lr}
 800df54:	681d      	ldr	r5, [r3, #0]
 800df56:	4606      	mov	r6, r0
 800df58:	460c      	mov	r4, r1
 800df5a:	b125      	cbz	r5, 800df66 <__swsetup_r+0x16>
 800df5c:	69ab      	ldr	r3, [r5, #24]
 800df5e:	b913      	cbnz	r3, 800df66 <__swsetup_r+0x16>
 800df60:	4628      	mov	r0, r5
 800df62:	f001 f825 	bl	800efb0 <__sinit>
 800df66:	4b2e      	ldr	r3, [pc, #184]	; (800e020 <__swsetup_r+0xd0>)
 800df68:	429c      	cmp	r4, r3
 800df6a:	d10f      	bne.n	800df8c <__swsetup_r+0x3c>
 800df6c:	686c      	ldr	r4, [r5, #4]
 800df6e:	89a3      	ldrh	r3, [r4, #12]
 800df70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800df74:	0719      	lsls	r1, r3, #28
 800df76:	d42c      	bmi.n	800dfd2 <__swsetup_r+0x82>
 800df78:	06dd      	lsls	r5, r3, #27
 800df7a:	d411      	bmi.n	800dfa0 <__swsetup_r+0x50>
 800df7c:	2309      	movs	r3, #9
 800df7e:	6033      	str	r3, [r6, #0]
 800df80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800df84:	81a3      	strh	r3, [r4, #12]
 800df86:	f04f 30ff 	mov.w	r0, #4294967295
 800df8a:	e03e      	b.n	800e00a <__swsetup_r+0xba>
 800df8c:	4b25      	ldr	r3, [pc, #148]	; (800e024 <__swsetup_r+0xd4>)
 800df8e:	429c      	cmp	r4, r3
 800df90:	d101      	bne.n	800df96 <__swsetup_r+0x46>
 800df92:	68ac      	ldr	r4, [r5, #8]
 800df94:	e7eb      	b.n	800df6e <__swsetup_r+0x1e>
 800df96:	4b24      	ldr	r3, [pc, #144]	; (800e028 <__swsetup_r+0xd8>)
 800df98:	429c      	cmp	r4, r3
 800df9a:	bf08      	it	eq
 800df9c:	68ec      	ldreq	r4, [r5, #12]
 800df9e:	e7e6      	b.n	800df6e <__swsetup_r+0x1e>
 800dfa0:	0758      	lsls	r0, r3, #29
 800dfa2:	d512      	bpl.n	800dfca <__swsetup_r+0x7a>
 800dfa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dfa6:	b141      	cbz	r1, 800dfba <__swsetup_r+0x6a>
 800dfa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dfac:	4299      	cmp	r1, r3
 800dfae:	d002      	beq.n	800dfb6 <__swsetup_r+0x66>
 800dfb0:	4630      	mov	r0, r6
 800dfb2:	f7fe ffd9 	bl	800cf68 <_free_r>
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	6363      	str	r3, [r4, #52]	; 0x34
 800dfba:	89a3      	ldrh	r3, [r4, #12]
 800dfbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dfc0:	81a3      	strh	r3, [r4, #12]
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	6063      	str	r3, [r4, #4]
 800dfc6:	6923      	ldr	r3, [r4, #16]
 800dfc8:	6023      	str	r3, [r4, #0]
 800dfca:	89a3      	ldrh	r3, [r4, #12]
 800dfcc:	f043 0308 	orr.w	r3, r3, #8
 800dfd0:	81a3      	strh	r3, [r4, #12]
 800dfd2:	6923      	ldr	r3, [r4, #16]
 800dfd4:	b94b      	cbnz	r3, 800dfea <__swsetup_r+0x9a>
 800dfd6:	89a3      	ldrh	r3, [r4, #12]
 800dfd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dfdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dfe0:	d003      	beq.n	800dfea <__swsetup_r+0x9a>
 800dfe2:	4621      	mov	r1, r4
 800dfe4:	4630      	mov	r0, r6
 800dfe6:	f001 f8d3 	bl	800f190 <__smakebuf_r>
 800dfea:	89a0      	ldrh	r0, [r4, #12]
 800dfec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dff0:	f010 0301 	ands.w	r3, r0, #1
 800dff4:	d00a      	beq.n	800e00c <__swsetup_r+0xbc>
 800dff6:	2300      	movs	r3, #0
 800dff8:	60a3      	str	r3, [r4, #8]
 800dffa:	6963      	ldr	r3, [r4, #20]
 800dffc:	425b      	negs	r3, r3
 800dffe:	61a3      	str	r3, [r4, #24]
 800e000:	6923      	ldr	r3, [r4, #16]
 800e002:	b943      	cbnz	r3, 800e016 <__swsetup_r+0xc6>
 800e004:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e008:	d1ba      	bne.n	800df80 <__swsetup_r+0x30>
 800e00a:	bd70      	pop	{r4, r5, r6, pc}
 800e00c:	0781      	lsls	r1, r0, #30
 800e00e:	bf58      	it	pl
 800e010:	6963      	ldrpl	r3, [r4, #20]
 800e012:	60a3      	str	r3, [r4, #8]
 800e014:	e7f4      	b.n	800e000 <__swsetup_r+0xb0>
 800e016:	2000      	movs	r0, #0
 800e018:	e7f7      	b.n	800e00a <__swsetup_r+0xba>
 800e01a:	bf00      	nop
 800e01c:	2000002c 	.word	0x2000002c
 800e020:	08010ac4 	.word	0x08010ac4
 800e024:	08010ae4 	.word	0x08010ae4
 800e028:	08010aa4 	.word	0x08010aa4

0800e02c <__assert_func>:
 800e02c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e02e:	4614      	mov	r4, r2
 800e030:	461a      	mov	r2, r3
 800e032:	4b09      	ldr	r3, [pc, #36]	; (800e058 <__assert_func+0x2c>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	4605      	mov	r5, r0
 800e038:	68d8      	ldr	r0, [r3, #12]
 800e03a:	b14c      	cbz	r4, 800e050 <__assert_func+0x24>
 800e03c:	4b07      	ldr	r3, [pc, #28]	; (800e05c <__assert_func+0x30>)
 800e03e:	9100      	str	r1, [sp, #0]
 800e040:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e044:	4906      	ldr	r1, [pc, #24]	; (800e060 <__assert_func+0x34>)
 800e046:	462b      	mov	r3, r5
 800e048:	f001 f830 	bl	800f0ac <fiprintf>
 800e04c:	f7fe ff30 	bl	800ceb0 <abort>
 800e050:	4b04      	ldr	r3, [pc, #16]	; (800e064 <__assert_func+0x38>)
 800e052:	461c      	mov	r4, r3
 800e054:	e7f3      	b.n	800e03e <__assert_func+0x12>
 800e056:	bf00      	nop
 800e058:	2000002c 	.word	0x2000002c
 800e05c:	080108ee 	.word	0x080108ee
 800e060:	080108fb 	.word	0x080108fb
 800e064:	08010929 	.word	0x08010929

0800e068 <_close_r>:
 800e068:	b538      	push	{r3, r4, r5, lr}
 800e06a:	4d06      	ldr	r5, [pc, #24]	; (800e084 <_close_r+0x1c>)
 800e06c:	2300      	movs	r3, #0
 800e06e:	4604      	mov	r4, r0
 800e070:	4608      	mov	r0, r1
 800e072:	602b      	str	r3, [r5, #0]
 800e074:	f7f4 ff4d 	bl	8002f12 <_close>
 800e078:	1c43      	adds	r3, r0, #1
 800e07a:	d102      	bne.n	800e082 <_close_r+0x1a>
 800e07c:	682b      	ldr	r3, [r5, #0]
 800e07e:	b103      	cbz	r3, 800e082 <_close_r+0x1a>
 800e080:	6023      	str	r3, [r4, #0]
 800e082:	bd38      	pop	{r3, r4, r5, pc}
 800e084:	200036c4 	.word	0x200036c4

0800e088 <quorem>:
 800e088:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e08c:	6903      	ldr	r3, [r0, #16]
 800e08e:	690c      	ldr	r4, [r1, #16]
 800e090:	42a3      	cmp	r3, r4
 800e092:	4607      	mov	r7, r0
 800e094:	f2c0 8081 	blt.w	800e19a <quorem+0x112>
 800e098:	3c01      	subs	r4, #1
 800e09a:	f101 0814 	add.w	r8, r1, #20
 800e09e:	f100 0514 	add.w	r5, r0, #20
 800e0a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e0a6:	9301      	str	r3, [sp, #4]
 800e0a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e0ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e0b0:	3301      	adds	r3, #1
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e0b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e0bc:	fbb2 f6f3 	udiv	r6, r2, r3
 800e0c0:	d331      	bcc.n	800e126 <quorem+0x9e>
 800e0c2:	f04f 0e00 	mov.w	lr, #0
 800e0c6:	4640      	mov	r0, r8
 800e0c8:	46ac      	mov	ip, r5
 800e0ca:	46f2      	mov	sl, lr
 800e0cc:	f850 2b04 	ldr.w	r2, [r0], #4
 800e0d0:	b293      	uxth	r3, r2
 800e0d2:	fb06 e303 	mla	r3, r6, r3, lr
 800e0d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e0da:	b29b      	uxth	r3, r3
 800e0dc:	ebaa 0303 	sub.w	r3, sl, r3
 800e0e0:	f8dc a000 	ldr.w	sl, [ip]
 800e0e4:	0c12      	lsrs	r2, r2, #16
 800e0e6:	fa13 f38a 	uxtah	r3, r3, sl
 800e0ea:	fb06 e202 	mla	r2, r6, r2, lr
 800e0ee:	9300      	str	r3, [sp, #0]
 800e0f0:	9b00      	ldr	r3, [sp, #0]
 800e0f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e0f6:	b292      	uxth	r2, r2
 800e0f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e0fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e100:	f8bd 3000 	ldrh.w	r3, [sp]
 800e104:	4581      	cmp	r9, r0
 800e106:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e10a:	f84c 3b04 	str.w	r3, [ip], #4
 800e10e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e112:	d2db      	bcs.n	800e0cc <quorem+0x44>
 800e114:	f855 300b 	ldr.w	r3, [r5, fp]
 800e118:	b92b      	cbnz	r3, 800e126 <quorem+0x9e>
 800e11a:	9b01      	ldr	r3, [sp, #4]
 800e11c:	3b04      	subs	r3, #4
 800e11e:	429d      	cmp	r5, r3
 800e120:	461a      	mov	r2, r3
 800e122:	d32e      	bcc.n	800e182 <quorem+0xfa>
 800e124:	613c      	str	r4, [r7, #16]
 800e126:	4638      	mov	r0, r7
 800e128:	f001 fb00 	bl	800f72c <__mcmp>
 800e12c:	2800      	cmp	r0, #0
 800e12e:	db24      	blt.n	800e17a <quorem+0xf2>
 800e130:	3601      	adds	r6, #1
 800e132:	4628      	mov	r0, r5
 800e134:	f04f 0c00 	mov.w	ip, #0
 800e138:	f858 2b04 	ldr.w	r2, [r8], #4
 800e13c:	f8d0 e000 	ldr.w	lr, [r0]
 800e140:	b293      	uxth	r3, r2
 800e142:	ebac 0303 	sub.w	r3, ip, r3
 800e146:	0c12      	lsrs	r2, r2, #16
 800e148:	fa13 f38e 	uxtah	r3, r3, lr
 800e14c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e150:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e154:	b29b      	uxth	r3, r3
 800e156:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e15a:	45c1      	cmp	r9, r8
 800e15c:	f840 3b04 	str.w	r3, [r0], #4
 800e160:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e164:	d2e8      	bcs.n	800e138 <quorem+0xb0>
 800e166:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e16a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e16e:	b922      	cbnz	r2, 800e17a <quorem+0xf2>
 800e170:	3b04      	subs	r3, #4
 800e172:	429d      	cmp	r5, r3
 800e174:	461a      	mov	r2, r3
 800e176:	d30a      	bcc.n	800e18e <quorem+0x106>
 800e178:	613c      	str	r4, [r7, #16]
 800e17a:	4630      	mov	r0, r6
 800e17c:	b003      	add	sp, #12
 800e17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e182:	6812      	ldr	r2, [r2, #0]
 800e184:	3b04      	subs	r3, #4
 800e186:	2a00      	cmp	r2, #0
 800e188:	d1cc      	bne.n	800e124 <quorem+0x9c>
 800e18a:	3c01      	subs	r4, #1
 800e18c:	e7c7      	b.n	800e11e <quorem+0x96>
 800e18e:	6812      	ldr	r2, [r2, #0]
 800e190:	3b04      	subs	r3, #4
 800e192:	2a00      	cmp	r2, #0
 800e194:	d1f0      	bne.n	800e178 <quorem+0xf0>
 800e196:	3c01      	subs	r4, #1
 800e198:	e7eb      	b.n	800e172 <quorem+0xea>
 800e19a:	2000      	movs	r0, #0
 800e19c:	e7ee      	b.n	800e17c <quorem+0xf4>
	...

0800e1a0 <_dtoa_r>:
 800e1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1a4:	ed2d 8b04 	vpush	{d8-d9}
 800e1a8:	ec57 6b10 	vmov	r6, r7, d0
 800e1ac:	b093      	sub	sp, #76	; 0x4c
 800e1ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e1b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e1b4:	9106      	str	r1, [sp, #24]
 800e1b6:	ee10 aa10 	vmov	sl, s0
 800e1ba:	4604      	mov	r4, r0
 800e1bc:	9209      	str	r2, [sp, #36]	; 0x24
 800e1be:	930c      	str	r3, [sp, #48]	; 0x30
 800e1c0:	46bb      	mov	fp, r7
 800e1c2:	b975      	cbnz	r5, 800e1e2 <_dtoa_r+0x42>
 800e1c4:	2010      	movs	r0, #16
 800e1c6:	f7fe fea9 	bl	800cf1c <malloc>
 800e1ca:	4602      	mov	r2, r0
 800e1cc:	6260      	str	r0, [r4, #36]	; 0x24
 800e1ce:	b920      	cbnz	r0, 800e1da <_dtoa_r+0x3a>
 800e1d0:	4ba7      	ldr	r3, [pc, #668]	; (800e470 <_dtoa_r+0x2d0>)
 800e1d2:	21ea      	movs	r1, #234	; 0xea
 800e1d4:	48a7      	ldr	r0, [pc, #668]	; (800e474 <_dtoa_r+0x2d4>)
 800e1d6:	f7ff ff29 	bl	800e02c <__assert_func>
 800e1da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e1de:	6005      	str	r5, [r0, #0]
 800e1e0:	60c5      	str	r5, [r0, #12]
 800e1e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1e4:	6819      	ldr	r1, [r3, #0]
 800e1e6:	b151      	cbz	r1, 800e1fe <_dtoa_r+0x5e>
 800e1e8:	685a      	ldr	r2, [r3, #4]
 800e1ea:	604a      	str	r2, [r1, #4]
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	4093      	lsls	r3, r2
 800e1f0:	608b      	str	r3, [r1, #8]
 800e1f2:	4620      	mov	r0, r4
 800e1f4:	f001 f858 	bl	800f2a8 <_Bfree>
 800e1f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	601a      	str	r2, [r3, #0]
 800e1fe:	1e3b      	subs	r3, r7, #0
 800e200:	bfaa      	itet	ge
 800e202:	2300      	movge	r3, #0
 800e204:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e208:	f8c8 3000 	strge.w	r3, [r8]
 800e20c:	4b9a      	ldr	r3, [pc, #616]	; (800e478 <_dtoa_r+0x2d8>)
 800e20e:	bfbc      	itt	lt
 800e210:	2201      	movlt	r2, #1
 800e212:	f8c8 2000 	strlt.w	r2, [r8]
 800e216:	ea33 030b 	bics.w	r3, r3, fp
 800e21a:	d11b      	bne.n	800e254 <_dtoa_r+0xb4>
 800e21c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e21e:	f242 730f 	movw	r3, #9999	; 0x270f
 800e222:	6013      	str	r3, [r2, #0]
 800e224:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e228:	4333      	orrs	r3, r6
 800e22a:	f000 8592 	beq.w	800ed52 <_dtoa_r+0xbb2>
 800e22e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e230:	b963      	cbnz	r3, 800e24c <_dtoa_r+0xac>
 800e232:	4b92      	ldr	r3, [pc, #584]	; (800e47c <_dtoa_r+0x2dc>)
 800e234:	e022      	b.n	800e27c <_dtoa_r+0xdc>
 800e236:	4b92      	ldr	r3, [pc, #584]	; (800e480 <_dtoa_r+0x2e0>)
 800e238:	9301      	str	r3, [sp, #4]
 800e23a:	3308      	adds	r3, #8
 800e23c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e23e:	6013      	str	r3, [r2, #0]
 800e240:	9801      	ldr	r0, [sp, #4]
 800e242:	b013      	add	sp, #76	; 0x4c
 800e244:	ecbd 8b04 	vpop	{d8-d9}
 800e248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e24c:	4b8b      	ldr	r3, [pc, #556]	; (800e47c <_dtoa_r+0x2dc>)
 800e24e:	9301      	str	r3, [sp, #4]
 800e250:	3303      	adds	r3, #3
 800e252:	e7f3      	b.n	800e23c <_dtoa_r+0x9c>
 800e254:	2200      	movs	r2, #0
 800e256:	2300      	movs	r3, #0
 800e258:	4650      	mov	r0, sl
 800e25a:	4659      	mov	r1, fp
 800e25c:	f7f2 fc44 	bl	8000ae8 <__aeabi_dcmpeq>
 800e260:	ec4b ab19 	vmov	d9, sl, fp
 800e264:	4680      	mov	r8, r0
 800e266:	b158      	cbz	r0, 800e280 <_dtoa_r+0xe0>
 800e268:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e26a:	2301      	movs	r3, #1
 800e26c:	6013      	str	r3, [r2, #0]
 800e26e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e270:	2b00      	cmp	r3, #0
 800e272:	f000 856b 	beq.w	800ed4c <_dtoa_r+0xbac>
 800e276:	4883      	ldr	r0, [pc, #524]	; (800e484 <_dtoa_r+0x2e4>)
 800e278:	6018      	str	r0, [r3, #0]
 800e27a:	1e43      	subs	r3, r0, #1
 800e27c:	9301      	str	r3, [sp, #4]
 800e27e:	e7df      	b.n	800e240 <_dtoa_r+0xa0>
 800e280:	ec4b ab10 	vmov	d0, sl, fp
 800e284:	aa10      	add	r2, sp, #64	; 0x40
 800e286:	a911      	add	r1, sp, #68	; 0x44
 800e288:	4620      	mov	r0, r4
 800e28a:	f001 faf5 	bl	800f878 <__d2b>
 800e28e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e292:	ee08 0a10 	vmov	s16, r0
 800e296:	2d00      	cmp	r5, #0
 800e298:	f000 8084 	beq.w	800e3a4 <_dtoa_r+0x204>
 800e29c:	ee19 3a90 	vmov	r3, s19
 800e2a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e2a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e2a8:	4656      	mov	r6, sl
 800e2aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e2ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e2b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e2b6:	4b74      	ldr	r3, [pc, #464]	; (800e488 <_dtoa_r+0x2e8>)
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	4630      	mov	r0, r6
 800e2bc:	4639      	mov	r1, r7
 800e2be:	f7f1 fff3 	bl	80002a8 <__aeabi_dsub>
 800e2c2:	a365      	add	r3, pc, #404	; (adr r3, 800e458 <_dtoa_r+0x2b8>)
 800e2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c8:	f7f2 f9a6 	bl	8000618 <__aeabi_dmul>
 800e2cc:	a364      	add	r3, pc, #400	; (adr r3, 800e460 <_dtoa_r+0x2c0>)
 800e2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2d2:	f7f1 ffeb 	bl	80002ac <__adddf3>
 800e2d6:	4606      	mov	r6, r0
 800e2d8:	4628      	mov	r0, r5
 800e2da:	460f      	mov	r7, r1
 800e2dc:	f7f2 f932 	bl	8000544 <__aeabi_i2d>
 800e2e0:	a361      	add	r3, pc, #388	; (adr r3, 800e468 <_dtoa_r+0x2c8>)
 800e2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e6:	f7f2 f997 	bl	8000618 <__aeabi_dmul>
 800e2ea:	4602      	mov	r2, r0
 800e2ec:	460b      	mov	r3, r1
 800e2ee:	4630      	mov	r0, r6
 800e2f0:	4639      	mov	r1, r7
 800e2f2:	f7f1 ffdb 	bl	80002ac <__adddf3>
 800e2f6:	4606      	mov	r6, r0
 800e2f8:	460f      	mov	r7, r1
 800e2fa:	f7f2 fc3d 	bl	8000b78 <__aeabi_d2iz>
 800e2fe:	2200      	movs	r2, #0
 800e300:	9000      	str	r0, [sp, #0]
 800e302:	2300      	movs	r3, #0
 800e304:	4630      	mov	r0, r6
 800e306:	4639      	mov	r1, r7
 800e308:	f7f2 fbf8 	bl	8000afc <__aeabi_dcmplt>
 800e30c:	b150      	cbz	r0, 800e324 <_dtoa_r+0x184>
 800e30e:	9800      	ldr	r0, [sp, #0]
 800e310:	f7f2 f918 	bl	8000544 <__aeabi_i2d>
 800e314:	4632      	mov	r2, r6
 800e316:	463b      	mov	r3, r7
 800e318:	f7f2 fbe6 	bl	8000ae8 <__aeabi_dcmpeq>
 800e31c:	b910      	cbnz	r0, 800e324 <_dtoa_r+0x184>
 800e31e:	9b00      	ldr	r3, [sp, #0]
 800e320:	3b01      	subs	r3, #1
 800e322:	9300      	str	r3, [sp, #0]
 800e324:	9b00      	ldr	r3, [sp, #0]
 800e326:	2b16      	cmp	r3, #22
 800e328:	d85a      	bhi.n	800e3e0 <_dtoa_r+0x240>
 800e32a:	9a00      	ldr	r2, [sp, #0]
 800e32c:	4b57      	ldr	r3, [pc, #348]	; (800e48c <_dtoa_r+0x2ec>)
 800e32e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e336:	ec51 0b19 	vmov	r0, r1, d9
 800e33a:	f7f2 fbdf 	bl	8000afc <__aeabi_dcmplt>
 800e33e:	2800      	cmp	r0, #0
 800e340:	d050      	beq.n	800e3e4 <_dtoa_r+0x244>
 800e342:	9b00      	ldr	r3, [sp, #0]
 800e344:	3b01      	subs	r3, #1
 800e346:	9300      	str	r3, [sp, #0]
 800e348:	2300      	movs	r3, #0
 800e34a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e34c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e34e:	1b5d      	subs	r5, r3, r5
 800e350:	1e6b      	subs	r3, r5, #1
 800e352:	9305      	str	r3, [sp, #20]
 800e354:	bf45      	ittet	mi
 800e356:	f1c5 0301 	rsbmi	r3, r5, #1
 800e35a:	9304      	strmi	r3, [sp, #16]
 800e35c:	2300      	movpl	r3, #0
 800e35e:	2300      	movmi	r3, #0
 800e360:	bf4c      	ite	mi
 800e362:	9305      	strmi	r3, [sp, #20]
 800e364:	9304      	strpl	r3, [sp, #16]
 800e366:	9b00      	ldr	r3, [sp, #0]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	db3d      	blt.n	800e3e8 <_dtoa_r+0x248>
 800e36c:	9b05      	ldr	r3, [sp, #20]
 800e36e:	9a00      	ldr	r2, [sp, #0]
 800e370:	920a      	str	r2, [sp, #40]	; 0x28
 800e372:	4413      	add	r3, r2
 800e374:	9305      	str	r3, [sp, #20]
 800e376:	2300      	movs	r3, #0
 800e378:	9307      	str	r3, [sp, #28]
 800e37a:	9b06      	ldr	r3, [sp, #24]
 800e37c:	2b09      	cmp	r3, #9
 800e37e:	f200 8089 	bhi.w	800e494 <_dtoa_r+0x2f4>
 800e382:	2b05      	cmp	r3, #5
 800e384:	bfc4      	itt	gt
 800e386:	3b04      	subgt	r3, #4
 800e388:	9306      	strgt	r3, [sp, #24]
 800e38a:	9b06      	ldr	r3, [sp, #24]
 800e38c:	f1a3 0302 	sub.w	r3, r3, #2
 800e390:	bfcc      	ite	gt
 800e392:	2500      	movgt	r5, #0
 800e394:	2501      	movle	r5, #1
 800e396:	2b03      	cmp	r3, #3
 800e398:	f200 8087 	bhi.w	800e4aa <_dtoa_r+0x30a>
 800e39c:	e8df f003 	tbb	[pc, r3]
 800e3a0:	59383a2d 	.word	0x59383a2d
 800e3a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e3a8:	441d      	add	r5, r3
 800e3aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e3ae:	2b20      	cmp	r3, #32
 800e3b0:	bfc1      	itttt	gt
 800e3b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e3b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e3ba:	fa0b f303 	lslgt.w	r3, fp, r3
 800e3be:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e3c2:	bfda      	itte	le
 800e3c4:	f1c3 0320 	rsble	r3, r3, #32
 800e3c8:	fa06 f003 	lslle.w	r0, r6, r3
 800e3cc:	4318      	orrgt	r0, r3
 800e3ce:	f7f2 f8a9 	bl	8000524 <__aeabi_ui2d>
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	4606      	mov	r6, r0
 800e3d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e3da:	3d01      	subs	r5, #1
 800e3dc:	930e      	str	r3, [sp, #56]	; 0x38
 800e3de:	e76a      	b.n	800e2b6 <_dtoa_r+0x116>
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	e7b2      	b.n	800e34a <_dtoa_r+0x1aa>
 800e3e4:	900b      	str	r0, [sp, #44]	; 0x2c
 800e3e6:	e7b1      	b.n	800e34c <_dtoa_r+0x1ac>
 800e3e8:	9b04      	ldr	r3, [sp, #16]
 800e3ea:	9a00      	ldr	r2, [sp, #0]
 800e3ec:	1a9b      	subs	r3, r3, r2
 800e3ee:	9304      	str	r3, [sp, #16]
 800e3f0:	4253      	negs	r3, r2
 800e3f2:	9307      	str	r3, [sp, #28]
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	930a      	str	r3, [sp, #40]	; 0x28
 800e3f8:	e7bf      	b.n	800e37a <_dtoa_r+0x1da>
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	9308      	str	r3, [sp, #32]
 800e3fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e400:	2b00      	cmp	r3, #0
 800e402:	dc55      	bgt.n	800e4b0 <_dtoa_r+0x310>
 800e404:	2301      	movs	r3, #1
 800e406:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e40a:	461a      	mov	r2, r3
 800e40c:	9209      	str	r2, [sp, #36]	; 0x24
 800e40e:	e00c      	b.n	800e42a <_dtoa_r+0x28a>
 800e410:	2301      	movs	r3, #1
 800e412:	e7f3      	b.n	800e3fc <_dtoa_r+0x25c>
 800e414:	2300      	movs	r3, #0
 800e416:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e418:	9308      	str	r3, [sp, #32]
 800e41a:	9b00      	ldr	r3, [sp, #0]
 800e41c:	4413      	add	r3, r2
 800e41e:	9302      	str	r3, [sp, #8]
 800e420:	3301      	adds	r3, #1
 800e422:	2b01      	cmp	r3, #1
 800e424:	9303      	str	r3, [sp, #12]
 800e426:	bfb8      	it	lt
 800e428:	2301      	movlt	r3, #1
 800e42a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e42c:	2200      	movs	r2, #0
 800e42e:	6042      	str	r2, [r0, #4]
 800e430:	2204      	movs	r2, #4
 800e432:	f102 0614 	add.w	r6, r2, #20
 800e436:	429e      	cmp	r6, r3
 800e438:	6841      	ldr	r1, [r0, #4]
 800e43a:	d93d      	bls.n	800e4b8 <_dtoa_r+0x318>
 800e43c:	4620      	mov	r0, r4
 800e43e:	f000 fef3 	bl	800f228 <_Balloc>
 800e442:	9001      	str	r0, [sp, #4]
 800e444:	2800      	cmp	r0, #0
 800e446:	d13b      	bne.n	800e4c0 <_dtoa_r+0x320>
 800e448:	4b11      	ldr	r3, [pc, #68]	; (800e490 <_dtoa_r+0x2f0>)
 800e44a:	4602      	mov	r2, r0
 800e44c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e450:	e6c0      	b.n	800e1d4 <_dtoa_r+0x34>
 800e452:	2301      	movs	r3, #1
 800e454:	e7df      	b.n	800e416 <_dtoa_r+0x276>
 800e456:	bf00      	nop
 800e458:	636f4361 	.word	0x636f4361
 800e45c:	3fd287a7 	.word	0x3fd287a7
 800e460:	8b60c8b3 	.word	0x8b60c8b3
 800e464:	3fc68a28 	.word	0x3fc68a28
 800e468:	509f79fb 	.word	0x509f79fb
 800e46c:	3fd34413 	.word	0x3fd34413
 800e470:	0801087a 	.word	0x0801087a
 800e474:	08010a38 	.word	0x08010a38
 800e478:	7ff00000 	.word	0x7ff00000
 800e47c:	08010a34 	.word	0x08010a34
 800e480:	08010a2b 	.word	0x08010a2b
 800e484:	08010c72 	.word	0x08010c72
 800e488:	3ff80000 	.word	0x3ff80000
 800e48c:	08010b88 	.word	0x08010b88
 800e490:	08010a93 	.word	0x08010a93
 800e494:	2501      	movs	r5, #1
 800e496:	2300      	movs	r3, #0
 800e498:	9306      	str	r3, [sp, #24]
 800e49a:	9508      	str	r5, [sp, #32]
 800e49c:	f04f 33ff 	mov.w	r3, #4294967295
 800e4a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	2312      	movs	r3, #18
 800e4a8:	e7b0      	b.n	800e40c <_dtoa_r+0x26c>
 800e4aa:	2301      	movs	r3, #1
 800e4ac:	9308      	str	r3, [sp, #32]
 800e4ae:	e7f5      	b.n	800e49c <_dtoa_r+0x2fc>
 800e4b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e4b6:	e7b8      	b.n	800e42a <_dtoa_r+0x28a>
 800e4b8:	3101      	adds	r1, #1
 800e4ba:	6041      	str	r1, [r0, #4]
 800e4bc:	0052      	lsls	r2, r2, #1
 800e4be:	e7b8      	b.n	800e432 <_dtoa_r+0x292>
 800e4c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4c2:	9a01      	ldr	r2, [sp, #4]
 800e4c4:	601a      	str	r2, [r3, #0]
 800e4c6:	9b03      	ldr	r3, [sp, #12]
 800e4c8:	2b0e      	cmp	r3, #14
 800e4ca:	f200 809d 	bhi.w	800e608 <_dtoa_r+0x468>
 800e4ce:	2d00      	cmp	r5, #0
 800e4d0:	f000 809a 	beq.w	800e608 <_dtoa_r+0x468>
 800e4d4:	9b00      	ldr	r3, [sp, #0]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	dd32      	ble.n	800e540 <_dtoa_r+0x3a0>
 800e4da:	4ab7      	ldr	r2, [pc, #732]	; (800e7b8 <_dtoa_r+0x618>)
 800e4dc:	f003 030f 	and.w	r3, r3, #15
 800e4e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e4e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e4e8:	9b00      	ldr	r3, [sp, #0]
 800e4ea:	05d8      	lsls	r0, r3, #23
 800e4ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e4f0:	d516      	bpl.n	800e520 <_dtoa_r+0x380>
 800e4f2:	4bb2      	ldr	r3, [pc, #712]	; (800e7bc <_dtoa_r+0x61c>)
 800e4f4:	ec51 0b19 	vmov	r0, r1, d9
 800e4f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e4fc:	f7f2 f9b6 	bl	800086c <__aeabi_ddiv>
 800e500:	f007 070f 	and.w	r7, r7, #15
 800e504:	4682      	mov	sl, r0
 800e506:	468b      	mov	fp, r1
 800e508:	2503      	movs	r5, #3
 800e50a:	4eac      	ldr	r6, [pc, #688]	; (800e7bc <_dtoa_r+0x61c>)
 800e50c:	b957      	cbnz	r7, 800e524 <_dtoa_r+0x384>
 800e50e:	4642      	mov	r2, r8
 800e510:	464b      	mov	r3, r9
 800e512:	4650      	mov	r0, sl
 800e514:	4659      	mov	r1, fp
 800e516:	f7f2 f9a9 	bl	800086c <__aeabi_ddiv>
 800e51a:	4682      	mov	sl, r0
 800e51c:	468b      	mov	fp, r1
 800e51e:	e028      	b.n	800e572 <_dtoa_r+0x3d2>
 800e520:	2502      	movs	r5, #2
 800e522:	e7f2      	b.n	800e50a <_dtoa_r+0x36a>
 800e524:	07f9      	lsls	r1, r7, #31
 800e526:	d508      	bpl.n	800e53a <_dtoa_r+0x39a>
 800e528:	4640      	mov	r0, r8
 800e52a:	4649      	mov	r1, r9
 800e52c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e530:	f7f2 f872 	bl	8000618 <__aeabi_dmul>
 800e534:	3501      	adds	r5, #1
 800e536:	4680      	mov	r8, r0
 800e538:	4689      	mov	r9, r1
 800e53a:	107f      	asrs	r7, r7, #1
 800e53c:	3608      	adds	r6, #8
 800e53e:	e7e5      	b.n	800e50c <_dtoa_r+0x36c>
 800e540:	f000 809b 	beq.w	800e67a <_dtoa_r+0x4da>
 800e544:	9b00      	ldr	r3, [sp, #0]
 800e546:	4f9d      	ldr	r7, [pc, #628]	; (800e7bc <_dtoa_r+0x61c>)
 800e548:	425e      	negs	r6, r3
 800e54a:	4b9b      	ldr	r3, [pc, #620]	; (800e7b8 <_dtoa_r+0x618>)
 800e54c:	f006 020f 	and.w	r2, r6, #15
 800e550:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e558:	ec51 0b19 	vmov	r0, r1, d9
 800e55c:	f7f2 f85c 	bl	8000618 <__aeabi_dmul>
 800e560:	1136      	asrs	r6, r6, #4
 800e562:	4682      	mov	sl, r0
 800e564:	468b      	mov	fp, r1
 800e566:	2300      	movs	r3, #0
 800e568:	2502      	movs	r5, #2
 800e56a:	2e00      	cmp	r6, #0
 800e56c:	d17a      	bne.n	800e664 <_dtoa_r+0x4c4>
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d1d3      	bne.n	800e51a <_dtoa_r+0x37a>
 800e572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e574:	2b00      	cmp	r3, #0
 800e576:	f000 8082 	beq.w	800e67e <_dtoa_r+0x4de>
 800e57a:	4b91      	ldr	r3, [pc, #580]	; (800e7c0 <_dtoa_r+0x620>)
 800e57c:	2200      	movs	r2, #0
 800e57e:	4650      	mov	r0, sl
 800e580:	4659      	mov	r1, fp
 800e582:	f7f2 fabb 	bl	8000afc <__aeabi_dcmplt>
 800e586:	2800      	cmp	r0, #0
 800e588:	d079      	beq.n	800e67e <_dtoa_r+0x4de>
 800e58a:	9b03      	ldr	r3, [sp, #12]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d076      	beq.n	800e67e <_dtoa_r+0x4de>
 800e590:	9b02      	ldr	r3, [sp, #8]
 800e592:	2b00      	cmp	r3, #0
 800e594:	dd36      	ble.n	800e604 <_dtoa_r+0x464>
 800e596:	9b00      	ldr	r3, [sp, #0]
 800e598:	4650      	mov	r0, sl
 800e59a:	4659      	mov	r1, fp
 800e59c:	1e5f      	subs	r7, r3, #1
 800e59e:	2200      	movs	r2, #0
 800e5a0:	4b88      	ldr	r3, [pc, #544]	; (800e7c4 <_dtoa_r+0x624>)
 800e5a2:	f7f2 f839 	bl	8000618 <__aeabi_dmul>
 800e5a6:	9e02      	ldr	r6, [sp, #8]
 800e5a8:	4682      	mov	sl, r0
 800e5aa:	468b      	mov	fp, r1
 800e5ac:	3501      	adds	r5, #1
 800e5ae:	4628      	mov	r0, r5
 800e5b0:	f7f1 ffc8 	bl	8000544 <__aeabi_i2d>
 800e5b4:	4652      	mov	r2, sl
 800e5b6:	465b      	mov	r3, fp
 800e5b8:	f7f2 f82e 	bl	8000618 <__aeabi_dmul>
 800e5bc:	4b82      	ldr	r3, [pc, #520]	; (800e7c8 <_dtoa_r+0x628>)
 800e5be:	2200      	movs	r2, #0
 800e5c0:	f7f1 fe74 	bl	80002ac <__adddf3>
 800e5c4:	46d0      	mov	r8, sl
 800e5c6:	46d9      	mov	r9, fp
 800e5c8:	4682      	mov	sl, r0
 800e5ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e5ce:	2e00      	cmp	r6, #0
 800e5d0:	d158      	bne.n	800e684 <_dtoa_r+0x4e4>
 800e5d2:	4b7e      	ldr	r3, [pc, #504]	; (800e7cc <_dtoa_r+0x62c>)
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	4640      	mov	r0, r8
 800e5d8:	4649      	mov	r1, r9
 800e5da:	f7f1 fe65 	bl	80002a8 <__aeabi_dsub>
 800e5de:	4652      	mov	r2, sl
 800e5e0:	465b      	mov	r3, fp
 800e5e2:	4680      	mov	r8, r0
 800e5e4:	4689      	mov	r9, r1
 800e5e6:	f7f2 faa7 	bl	8000b38 <__aeabi_dcmpgt>
 800e5ea:	2800      	cmp	r0, #0
 800e5ec:	f040 8295 	bne.w	800eb1a <_dtoa_r+0x97a>
 800e5f0:	4652      	mov	r2, sl
 800e5f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e5f6:	4640      	mov	r0, r8
 800e5f8:	4649      	mov	r1, r9
 800e5fa:	f7f2 fa7f 	bl	8000afc <__aeabi_dcmplt>
 800e5fe:	2800      	cmp	r0, #0
 800e600:	f040 8289 	bne.w	800eb16 <_dtoa_r+0x976>
 800e604:	ec5b ab19 	vmov	sl, fp, d9
 800e608:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	f2c0 8148 	blt.w	800e8a0 <_dtoa_r+0x700>
 800e610:	9a00      	ldr	r2, [sp, #0]
 800e612:	2a0e      	cmp	r2, #14
 800e614:	f300 8144 	bgt.w	800e8a0 <_dtoa_r+0x700>
 800e618:	4b67      	ldr	r3, [pc, #412]	; (800e7b8 <_dtoa_r+0x618>)
 800e61a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e61e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e624:	2b00      	cmp	r3, #0
 800e626:	f280 80d5 	bge.w	800e7d4 <_dtoa_r+0x634>
 800e62a:	9b03      	ldr	r3, [sp, #12]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	f300 80d1 	bgt.w	800e7d4 <_dtoa_r+0x634>
 800e632:	f040 826f 	bne.w	800eb14 <_dtoa_r+0x974>
 800e636:	4b65      	ldr	r3, [pc, #404]	; (800e7cc <_dtoa_r+0x62c>)
 800e638:	2200      	movs	r2, #0
 800e63a:	4640      	mov	r0, r8
 800e63c:	4649      	mov	r1, r9
 800e63e:	f7f1 ffeb 	bl	8000618 <__aeabi_dmul>
 800e642:	4652      	mov	r2, sl
 800e644:	465b      	mov	r3, fp
 800e646:	f7f2 fa6d 	bl	8000b24 <__aeabi_dcmpge>
 800e64a:	9e03      	ldr	r6, [sp, #12]
 800e64c:	4637      	mov	r7, r6
 800e64e:	2800      	cmp	r0, #0
 800e650:	f040 8245 	bne.w	800eade <_dtoa_r+0x93e>
 800e654:	9d01      	ldr	r5, [sp, #4]
 800e656:	2331      	movs	r3, #49	; 0x31
 800e658:	f805 3b01 	strb.w	r3, [r5], #1
 800e65c:	9b00      	ldr	r3, [sp, #0]
 800e65e:	3301      	adds	r3, #1
 800e660:	9300      	str	r3, [sp, #0]
 800e662:	e240      	b.n	800eae6 <_dtoa_r+0x946>
 800e664:	07f2      	lsls	r2, r6, #31
 800e666:	d505      	bpl.n	800e674 <_dtoa_r+0x4d4>
 800e668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e66c:	f7f1 ffd4 	bl	8000618 <__aeabi_dmul>
 800e670:	3501      	adds	r5, #1
 800e672:	2301      	movs	r3, #1
 800e674:	1076      	asrs	r6, r6, #1
 800e676:	3708      	adds	r7, #8
 800e678:	e777      	b.n	800e56a <_dtoa_r+0x3ca>
 800e67a:	2502      	movs	r5, #2
 800e67c:	e779      	b.n	800e572 <_dtoa_r+0x3d2>
 800e67e:	9f00      	ldr	r7, [sp, #0]
 800e680:	9e03      	ldr	r6, [sp, #12]
 800e682:	e794      	b.n	800e5ae <_dtoa_r+0x40e>
 800e684:	9901      	ldr	r1, [sp, #4]
 800e686:	4b4c      	ldr	r3, [pc, #304]	; (800e7b8 <_dtoa_r+0x618>)
 800e688:	4431      	add	r1, r6
 800e68a:	910d      	str	r1, [sp, #52]	; 0x34
 800e68c:	9908      	ldr	r1, [sp, #32]
 800e68e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e692:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e696:	2900      	cmp	r1, #0
 800e698:	d043      	beq.n	800e722 <_dtoa_r+0x582>
 800e69a:	494d      	ldr	r1, [pc, #308]	; (800e7d0 <_dtoa_r+0x630>)
 800e69c:	2000      	movs	r0, #0
 800e69e:	f7f2 f8e5 	bl	800086c <__aeabi_ddiv>
 800e6a2:	4652      	mov	r2, sl
 800e6a4:	465b      	mov	r3, fp
 800e6a6:	f7f1 fdff 	bl	80002a8 <__aeabi_dsub>
 800e6aa:	9d01      	ldr	r5, [sp, #4]
 800e6ac:	4682      	mov	sl, r0
 800e6ae:	468b      	mov	fp, r1
 800e6b0:	4649      	mov	r1, r9
 800e6b2:	4640      	mov	r0, r8
 800e6b4:	f7f2 fa60 	bl	8000b78 <__aeabi_d2iz>
 800e6b8:	4606      	mov	r6, r0
 800e6ba:	f7f1 ff43 	bl	8000544 <__aeabi_i2d>
 800e6be:	4602      	mov	r2, r0
 800e6c0:	460b      	mov	r3, r1
 800e6c2:	4640      	mov	r0, r8
 800e6c4:	4649      	mov	r1, r9
 800e6c6:	f7f1 fdef 	bl	80002a8 <__aeabi_dsub>
 800e6ca:	3630      	adds	r6, #48	; 0x30
 800e6cc:	f805 6b01 	strb.w	r6, [r5], #1
 800e6d0:	4652      	mov	r2, sl
 800e6d2:	465b      	mov	r3, fp
 800e6d4:	4680      	mov	r8, r0
 800e6d6:	4689      	mov	r9, r1
 800e6d8:	f7f2 fa10 	bl	8000afc <__aeabi_dcmplt>
 800e6dc:	2800      	cmp	r0, #0
 800e6de:	d163      	bne.n	800e7a8 <_dtoa_r+0x608>
 800e6e0:	4642      	mov	r2, r8
 800e6e2:	464b      	mov	r3, r9
 800e6e4:	4936      	ldr	r1, [pc, #216]	; (800e7c0 <_dtoa_r+0x620>)
 800e6e6:	2000      	movs	r0, #0
 800e6e8:	f7f1 fdde 	bl	80002a8 <__aeabi_dsub>
 800e6ec:	4652      	mov	r2, sl
 800e6ee:	465b      	mov	r3, fp
 800e6f0:	f7f2 fa04 	bl	8000afc <__aeabi_dcmplt>
 800e6f4:	2800      	cmp	r0, #0
 800e6f6:	f040 80b5 	bne.w	800e864 <_dtoa_r+0x6c4>
 800e6fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e6fc:	429d      	cmp	r5, r3
 800e6fe:	d081      	beq.n	800e604 <_dtoa_r+0x464>
 800e700:	4b30      	ldr	r3, [pc, #192]	; (800e7c4 <_dtoa_r+0x624>)
 800e702:	2200      	movs	r2, #0
 800e704:	4650      	mov	r0, sl
 800e706:	4659      	mov	r1, fp
 800e708:	f7f1 ff86 	bl	8000618 <__aeabi_dmul>
 800e70c:	4b2d      	ldr	r3, [pc, #180]	; (800e7c4 <_dtoa_r+0x624>)
 800e70e:	4682      	mov	sl, r0
 800e710:	468b      	mov	fp, r1
 800e712:	4640      	mov	r0, r8
 800e714:	4649      	mov	r1, r9
 800e716:	2200      	movs	r2, #0
 800e718:	f7f1 ff7e 	bl	8000618 <__aeabi_dmul>
 800e71c:	4680      	mov	r8, r0
 800e71e:	4689      	mov	r9, r1
 800e720:	e7c6      	b.n	800e6b0 <_dtoa_r+0x510>
 800e722:	4650      	mov	r0, sl
 800e724:	4659      	mov	r1, fp
 800e726:	f7f1 ff77 	bl	8000618 <__aeabi_dmul>
 800e72a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e72c:	9d01      	ldr	r5, [sp, #4]
 800e72e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e730:	4682      	mov	sl, r0
 800e732:	468b      	mov	fp, r1
 800e734:	4649      	mov	r1, r9
 800e736:	4640      	mov	r0, r8
 800e738:	f7f2 fa1e 	bl	8000b78 <__aeabi_d2iz>
 800e73c:	4606      	mov	r6, r0
 800e73e:	f7f1 ff01 	bl	8000544 <__aeabi_i2d>
 800e742:	3630      	adds	r6, #48	; 0x30
 800e744:	4602      	mov	r2, r0
 800e746:	460b      	mov	r3, r1
 800e748:	4640      	mov	r0, r8
 800e74a:	4649      	mov	r1, r9
 800e74c:	f7f1 fdac 	bl	80002a8 <__aeabi_dsub>
 800e750:	f805 6b01 	strb.w	r6, [r5], #1
 800e754:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e756:	429d      	cmp	r5, r3
 800e758:	4680      	mov	r8, r0
 800e75a:	4689      	mov	r9, r1
 800e75c:	f04f 0200 	mov.w	r2, #0
 800e760:	d124      	bne.n	800e7ac <_dtoa_r+0x60c>
 800e762:	4b1b      	ldr	r3, [pc, #108]	; (800e7d0 <_dtoa_r+0x630>)
 800e764:	4650      	mov	r0, sl
 800e766:	4659      	mov	r1, fp
 800e768:	f7f1 fda0 	bl	80002ac <__adddf3>
 800e76c:	4602      	mov	r2, r0
 800e76e:	460b      	mov	r3, r1
 800e770:	4640      	mov	r0, r8
 800e772:	4649      	mov	r1, r9
 800e774:	f7f2 f9e0 	bl	8000b38 <__aeabi_dcmpgt>
 800e778:	2800      	cmp	r0, #0
 800e77a:	d173      	bne.n	800e864 <_dtoa_r+0x6c4>
 800e77c:	4652      	mov	r2, sl
 800e77e:	465b      	mov	r3, fp
 800e780:	4913      	ldr	r1, [pc, #76]	; (800e7d0 <_dtoa_r+0x630>)
 800e782:	2000      	movs	r0, #0
 800e784:	f7f1 fd90 	bl	80002a8 <__aeabi_dsub>
 800e788:	4602      	mov	r2, r0
 800e78a:	460b      	mov	r3, r1
 800e78c:	4640      	mov	r0, r8
 800e78e:	4649      	mov	r1, r9
 800e790:	f7f2 f9b4 	bl	8000afc <__aeabi_dcmplt>
 800e794:	2800      	cmp	r0, #0
 800e796:	f43f af35 	beq.w	800e604 <_dtoa_r+0x464>
 800e79a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e79c:	1e6b      	subs	r3, r5, #1
 800e79e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e7a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e7a4:	2b30      	cmp	r3, #48	; 0x30
 800e7a6:	d0f8      	beq.n	800e79a <_dtoa_r+0x5fa>
 800e7a8:	9700      	str	r7, [sp, #0]
 800e7aa:	e049      	b.n	800e840 <_dtoa_r+0x6a0>
 800e7ac:	4b05      	ldr	r3, [pc, #20]	; (800e7c4 <_dtoa_r+0x624>)
 800e7ae:	f7f1 ff33 	bl	8000618 <__aeabi_dmul>
 800e7b2:	4680      	mov	r8, r0
 800e7b4:	4689      	mov	r9, r1
 800e7b6:	e7bd      	b.n	800e734 <_dtoa_r+0x594>
 800e7b8:	08010b88 	.word	0x08010b88
 800e7bc:	08010b60 	.word	0x08010b60
 800e7c0:	3ff00000 	.word	0x3ff00000
 800e7c4:	40240000 	.word	0x40240000
 800e7c8:	401c0000 	.word	0x401c0000
 800e7cc:	40140000 	.word	0x40140000
 800e7d0:	3fe00000 	.word	0x3fe00000
 800e7d4:	9d01      	ldr	r5, [sp, #4]
 800e7d6:	4656      	mov	r6, sl
 800e7d8:	465f      	mov	r7, fp
 800e7da:	4642      	mov	r2, r8
 800e7dc:	464b      	mov	r3, r9
 800e7de:	4630      	mov	r0, r6
 800e7e0:	4639      	mov	r1, r7
 800e7e2:	f7f2 f843 	bl	800086c <__aeabi_ddiv>
 800e7e6:	f7f2 f9c7 	bl	8000b78 <__aeabi_d2iz>
 800e7ea:	4682      	mov	sl, r0
 800e7ec:	f7f1 feaa 	bl	8000544 <__aeabi_i2d>
 800e7f0:	4642      	mov	r2, r8
 800e7f2:	464b      	mov	r3, r9
 800e7f4:	f7f1 ff10 	bl	8000618 <__aeabi_dmul>
 800e7f8:	4602      	mov	r2, r0
 800e7fa:	460b      	mov	r3, r1
 800e7fc:	4630      	mov	r0, r6
 800e7fe:	4639      	mov	r1, r7
 800e800:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e804:	f7f1 fd50 	bl	80002a8 <__aeabi_dsub>
 800e808:	f805 6b01 	strb.w	r6, [r5], #1
 800e80c:	9e01      	ldr	r6, [sp, #4]
 800e80e:	9f03      	ldr	r7, [sp, #12]
 800e810:	1bae      	subs	r6, r5, r6
 800e812:	42b7      	cmp	r7, r6
 800e814:	4602      	mov	r2, r0
 800e816:	460b      	mov	r3, r1
 800e818:	d135      	bne.n	800e886 <_dtoa_r+0x6e6>
 800e81a:	f7f1 fd47 	bl	80002ac <__adddf3>
 800e81e:	4642      	mov	r2, r8
 800e820:	464b      	mov	r3, r9
 800e822:	4606      	mov	r6, r0
 800e824:	460f      	mov	r7, r1
 800e826:	f7f2 f987 	bl	8000b38 <__aeabi_dcmpgt>
 800e82a:	b9d0      	cbnz	r0, 800e862 <_dtoa_r+0x6c2>
 800e82c:	4642      	mov	r2, r8
 800e82e:	464b      	mov	r3, r9
 800e830:	4630      	mov	r0, r6
 800e832:	4639      	mov	r1, r7
 800e834:	f7f2 f958 	bl	8000ae8 <__aeabi_dcmpeq>
 800e838:	b110      	cbz	r0, 800e840 <_dtoa_r+0x6a0>
 800e83a:	f01a 0f01 	tst.w	sl, #1
 800e83e:	d110      	bne.n	800e862 <_dtoa_r+0x6c2>
 800e840:	4620      	mov	r0, r4
 800e842:	ee18 1a10 	vmov	r1, s16
 800e846:	f000 fd2f 	bl	800f2a8 <_Bfree>
 800e84a:	2300      	movs	r3, #0
 800e84c:	9800      	ldr	r0, [sp, #0]
 800e84e:	702b      	strb	r3, [r5, #0]
 800e850:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e852:	3001      	adds	r0, #1
 800e854:	6018      	str	r0, [r3, #0]
 800e856:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e858:	2b00      	cmp	r3, #0
 800e85a:	f43f acf1 	beq.w	800e240 <_dtoa_r+0xa0>
 800e85e:	601d      	str	r5, [r3, #0]
 800e860:	e4ee      	b.n	800e240 <_dtoa_r+0xa0>
 800e862:	9f00      	ldr	r7, [sp, #0]
 800e864:	462b      	mov	r3, r5
 800e866:	461d      	mov	r5, r3
 800e868:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e86c:	2a39      	cmp	r2, #57	; 0x39
 800e86e:	d106      	bne.n	800e87e <_dtoa_r+0x6de>
 800e870:	9a01      	ldr	r2, [sp, #4]
 800e872:	429a      	cmp	r2, r3
 800e874:	d1f7      	bne.n	800e866 <_dtoa_r+0x6c6>
 800e876:	9901      	ldr	r1, [sp, #4]
 800e878:	2230      	movs	r2, #48	; 0x30
 800e87a:	3701      	adds	r7, #1
 800e87c:	700a      	strb	r2, [r1, #0]
 800e87e:	781a      	ldrb	r2, [r3, #0]
 800e880:	3201      	adds	r2, #1
 800e882:	701a      	strb	r2, [r3, #0]
 800e884:	e790      	b.n	800e7a8 <_dtoa_r+0x608>
 800e886:	4ba6      	ldr	r3, [pc, #664]	; (800eb20 <_dtoa_r+0x980>)
 800e888:	2200      	movs	r2, #0
 800e88a:	f7f1 fec5 	bl	8000618 <__aeabi_dmul>
 800e88e:	2200      	movs	r2, #0
 800e890:	2300      	movs	r3, #0
 800e892:	4606      	mov	r6, r0
 800e894:	460f      	mov	r7, r1
 800e896:	f7f2 f927 	bl	8000ae8 <__aeabi_dcmpeq>
 800e89a:	2800      	cmp	r0, #0
 800e89c:	d09d      	beq.n	800e7da <_dtoa_r+0x63a>
 800e89e:	e7cf      	b.n	800e840 <_dtoa_r+0x6a0>
 800e8a0:	9a08      	ldr	r2, [sp, #32]
 800e8a2:	2a00      	cmp	r2, #0
 800e8a4:	f000 80d7 	beq.w	800ea56 <_dtoa_r+0x8b6>
 800e8a8:	9a06      	ldr	r2, [sp, #24]
 800e8aa:	2a01      	cmp	r2, #1
 800e8ac:	f300 80ba 	bgt.w	800ea24 <_dtoa_r+0x884>
 800e8b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e8b2:	2a00      	cmp	r2, #0
 800e8b4:	f000 80b2 	beq.w	800ea1c <_dtoa_r+0x87c>
 800e8b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e8bc:	9e07      	ldr	r6, [sp, #28]
 800e8be:	9d04      	ldr	r5, [sp, #16]
 800e8c0:	9a04      	ldr	r2, [sp, #16]
 800e8c2:	441a      	add	r2, r3
 800e8c4:	9204      	str	r2, [sp, #16]
 800e8c6:	9a05      	ldr	r2, [sp, #20]
 800e8c8:	2101      	movs	r1, #1
 800e8ca:	441a      	add	r2, r3
 800e8cc:	4620      	mov	r0, r4
 800e8ce:	9205      	str	r2, [sp, #20]
 800e8d0:	f000 fda2 	bl	800f418 <__i2b>
 800e8d4:	4607      	mov	r7, r0
 800e8d6:	2d00      	cmp	r5, #0
 800e8d8:	dd0c      	ble.n	800e8f4 <_dtoa_r+0x754>
 800e8da:	9b05      	ldr	r3, [sp, #20]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	dd09      	ble.n	800e8f4 <_dtoa_r+0x754>
 800e8e0:	42ab      	cmp	r3, r5
 800e8e2:	9a04      	ldr	r2, [sp, #16]
 800e8e4:	bfa8      	it	ge
 800e8e6:	462b      	movge	r3, r5
 800e8e8:	1ad2      	subs	r2, r2, r3
 800e8ea:	9204      	str	r2, [sp, #16]
 800e8ec:	9a05      	ldr	r2, [sp, #20]
 800e8ee:	1aed      	subs	r5, r5, r3
 800e8f0:	1ad3      	subs	r3, r2, r3
 800e8f2:	9305      	str	r3, [sp, #20]
 800e8f4:	9b07      	ldr	r3, [sp, #28]
 800e8f6:	b31b      	cbz	r3, 800e940 <_dtoa_r+0x7a0>
 800e8f8:	9b08      	ldr	r3, [sp, #32]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	f000 80af 	beq.w	800ea5e <_dtoa_r+0x8be>
 800e900:	2e00      	cmp	r6, #0
 800e902:	dd13      	ble.n	800e92c <_dtoa_r+0x78c>
 800e904:	4639      	mov	r1, r7
 800e906:	4632      	mov	r2, r6
 800e908:	4620      	mov	r0, r4
 800e90a:	f000 fe45 	bl	800f598 <__pow5mult>
 800e90e:	ee18 2a10 	vmov	r2, s16
 800e912:	4601      	mov	r1, r0
 800e914:	4607      	mov	r7, r0
 800e916:	4620      	mov	r0, r4
 800e918:	f000 fd94 	bl	800f444 <__multiply>
 800e91c:	ee18 1a10 	vmov	r1, s16
 800e920:	4680      	mov	r8, r0
 800e922:	4620      	mov	r0, r4
 800e924:	f000 fcc0 	bl	800f2a8 <_Bfree>
 800e928:	ee08 8a10 	vmov	s16, r8
 800e92c:	9b07      	ldr	r3, [sp, #28]
 800e92e:	1b9a      	subs	r2, r3, r6
 800e930:	d006      	beq.n	800e940 <_dtoa_r+0x7a0>
 800e932:	ee18 1a10 	vmov	r1, s16
 800e936:	4620      	mov	r0, r4
 800e938:	f000 fe2e 	bl	800f598 <__pow5mult>
 800e93c:	ee08 0a10 	vmov	s16, r0
 800e940:	2101      	movs	r1, #1
 800e942:	4620      	mov	r0, r4
 800e944:	f000 fd68 	bl	800f418 <__i2b>
 800e948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	4606      	mov	r6, r0
 800e94e:	f340 8088 	ble.w	800ea62 <_dtoa_r+0x8c2>
 800e952:	461a      	mov	r2, r3
 800e954:	4601      	mov	r1, r0
 800e956:	4620      	mov	r0, r4
 800e958:	f000 fe1e 	bl	800f598 <__pow5mult>
 800e95c:	9b06      	ldr	r3, [sp, #24]
 800e95e:	2b01      	cmp	r3, #1
 800e960:	4606      	mov	r6, r0
 800e962:	f340 8081 	ble.w	800ea68 <_dtoa_r+0x8c8>
 800e966:	f04f 0800 	mov.w	r8, #0
 800e96a:	6933      	ldr	r3, [r6, #16]
 800e96c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e970:	6918      	ldr	r0, [r3, #16]
 800e972:	f000 fd01 	bl	800f378 <__hi0bits>
 800e976:	f1c0 0020 	rsb	r0, r0, #32
 800e97a:	9b05      	ldr	r3, [sp, #20]
 800e97c:	4418      	add	r0, r3
 800e97e:	f010 001f 	ands.w	r0, r0, #31
 800e982:	f000 8092 	beq.w	800eaaa <_dtoa_r+0x90a>
 800e986:	f1c0 0320 	rsb	r3, r0, #32
 800e98a:	2b04      	cmp	r3, #4
 800e98c:	f340 808a 	ble.w	800eaa4 <_dtoa_r+0x904>
 800e990:	f1c0 001c 	rsb	r0, r0, #28
 800e994:	9b04      	ldr	r3, [sp, #16]
 800e996:	4403      	add	r3, r0
 800e998:	9304      	str	r3, [sp, #16]
 800e99a:	9b05      	ldr	r3, [sp, #20]
 800e99c:	4403      	add	r3, r0
 800e99e:	4405      	add	r5, r0
 800e9a0:	9305      	str	r3, [sp, #20]
 800e9a2:	9b04      	ldr	r3, [sp, #16]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	dd07      	ble.n	800e9b8 <_dtoa_r+0x818>
 800e9a8:	ee18 1a10 	vmov	r1, s16
 800e9ac:	461a      	mov	r2, r3
 800e9ae:	4620      	mov	r0, r4
 800e9b0:	f000 fe4c 	bl	800f64c <__lshift>
 800e9b4:	ee08 0a10 	vmov	s16, r0
 800e9b8:	9b05      	ldr	r3, [sp, #20]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	dd05      	ble.n	800e9ca <_dtoa_r+0x82a>
 800e9be:	4631      	mov	r1, r6
 800e9c0:	461a      	mov	r2, r3
 800e9c2:	4620      	mov	r0, r4
 800e9c4:	f000 fe42 	bl	800f64c <__lshift>
 800e9c8:	4606      	mov	r6, r0
 800e9ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d06e      	beq.n	800eaae <_dtoa_r+0x90e>
 800e9d0:	ee18 0a10 	vmov	r0, s16
 800e9d4:	4631      	mov	r1, r6
 800e9d6:	f000 fea9 	bl	800f72c <__mcmp>
 800e9da:	2800      	cmp	r0, #0
 800e9dc:	da67      	bge.n	800eaae <_dtoa_r+0x90e>
 800e9de:	9b00      	ldr	r3, [sp, #0]
 800e9e0:	3b01      	subs	r3, #1
 800e9e2:	ee18 1a10 	vmov	r1, s16
 800e9e6:	9300      	str	r3, [sp, #0]
 800e9e8:	220a      	movs	r2, #10
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	4620      	mov	r0, r4
 800e9ee:	f000 fc7d 	bl	800f2ec <__multadd>
 800e9f2:	9b08      	ldr	r3, [sp, #32]
 800e9f4:	ee08 0a10 	vmov	s16, r0
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	f000 81b1 	beq.w	800ed60 <_dtoa_r+0xbc0>
 800e9fe:	2300      	movs	r3, #0
 800ea00:	4639      	mov	r1, r7
 800ea02:	220a      	movs	r2, #10
 800ea04:	4620      	mov	r0, r4
 800ea06:	f000 fc71 	bl	800f2ec <__multadd>
 800ea0a:	9b02      	ldr	r3, [sp, #8]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	4607      	mov	r7, r0
 800ea10:	f300 808e 	bgt.w	800eb30 <_dtoa_r+0x990>
 800ea14:	9b06      	ldr	r3, [sp, #24]
 800ea16:	2b02      	cmp	r3, #2
 800ea18:	dc51      	bgt.n	800eabe <_dtoa_r+0x91e>
 800ea1a:	e089      	b.n	800eb30 <_dtoa_r+0x990>
 800ea1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ea1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ea22:	e74b      	b.n	800e8bc <_dtoa_r+0x71c>
 800ea24:	9b03      	ldr	r3, [sp, #12]
 800ea26:	1e5e      	subs	r6, r3, #1
 800ea28:	9b07      	ldr	r3, [sp, #28]
 800ea2a:	42b3      	cmp	r3, r6
 800ea2c:	bfbf      	itttt	lt
 800ea2e:	9b07      	ldrlt	r3, [sp, #28]
 800ea30:	9607      	strlt	r6, [sp, #28]
 800ea32:	1af2      	sublt	r2, r6, r3
 800ea34:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ea36:	bfb6      	itet	lt
 800ea38:	189b      	addlt	r3, r3, r2
 800ea3a:	1b9e      	subge	r6, r3, r6
 800ea3c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ea3e:	9b03      	ldr	r3, [sp, #12]
 800ea40:	bfb8      	it	lt
 800ea42:	2600      	movlt	r6, #0
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	bfb7      	itett	lt
 800ea48:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ea4c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ea50:	1a9d      	sublt	r5, r3, r2
 800ea52:	2300      	movlt	r3, #0
 800ea54:	e734      	b.n	800e8c0 <_dtoa_r+0x720>
 800ea56:	9e07      	ldr	r6, [sp, #28]
 800ea58:	9d04      	ldr	r5, [sp, #16]
 800ea5a:	9f08      	ldr	r7, [sp, #32]
 800ea5c:	e73b      	b.n	800e8d6 <_dtoa_r+0x736>
 800ea5e:	9a07      	ldr	r2, [sp, #28]
 800ea60:	e767      	b.n	800e932 <_dtoa_r+0x792>
 800ea62:	9b06      	ldr	r3, [sp, #24]
 800ea64:	2b01      	cmp	r3, #1
 800ea66:	dc18      	bgt.n	800ea9a <_dtoa_r+0x8fa>
 800ea68:	f1ba 0f00 	cmp.w	sl, #0
 800ea6c:	d115      	bne.n	800ea9a <_dtoa_r+0x8fa>
 800ea6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ea72:	b993      	cbnz	r3, 800ea9a <_dtoa_r+0x8fa>
 800ea74:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ea78:	0d1b      	lsrs	r3, r3, #20
 800ea7a:	051b      	lsls	r3, r3, #20
 800ea7c:	b183      	cbz	r3, 800eaa0 <_dtoa_r+0x900>
 800ea7e:	9b04      	ldr	r3, [sp, #16]
 800ea80:	3301      	adds	r3, #1
 800ea82:	9304      	str	r3, [sp, #16]
 800ea84:	9b05      	ldr	r3, [sp, #20]
 800ea86:	3301      	adds	r3, #1
 800ea88:	9305      	str	r3, [sp, #20]
 800ea8a:	f04f 0801 	mov.w	r8, #1
 800ea8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	f47f af6a 	bne.w	800e96a <_dtoa_r+0x7ca>
 800ea96:	2001      	movs	r0, #1
 800ea98:	e76f      	b.n	800e97a <_dtoa_r+0x7da>
 800ea9a:	f04f 0800 	mov.w	r8, #0
 800ea9e:	e7f6      	b.n	800ea8e <_dtoa_r+0x8ee>
 800eaa0:	4698      	mov	r8, r3
 800eaa2:	e7f4      	b.n	800ea8e <_dtoa_r+0x8ee>
 800eaa4:	f43f af7d 	beq.w	800e9a2 <_dtoa_r+0x802>
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	301c      	adds	r0, #28
 800eaac:	e772      	b.n	800e994 <_dtoa_r+0x7f4>
 800eaae:	9b03      	ldr	r3, [sp, #12]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	dc37      	bgt.n	800eb24 <_dtoa_r+0x984>
 800eab4:	9b06      	ldr	r3, [sp, #24]
 800eab6:	2b02      	cmp	r3, #2
 800eab8:	dd34      	ble.n	800eb24 <_dtoa_r+0x984>
 800eaba:	9b03      	ldr	r3, [sp, #12]
 800eabc:	9302      	str	r3, [sp, #8]
 800eabe:	9b02      	ldr	r3, [sp, #8]
 800eac0:	b96b      	cbnz	r3, 800eade <_dtoa_r+0x93e>
 800eac2:	4631      	mov	r1, r6
 800eac4:	2205      	movs	r2, #5
 800eac6:	4620      	mov	r0, r4
 800eac8:	f000 fc10 	bl	800f2ec <__multadd>
 800eacc:	4601      	mov	r1, r0
 800eace:	4606      	mov	r6, r0
 800ead0:	ee18 0a10 	vmov	r0, s16
 800ead4:	f000 fe2a 	bl	800f72c <__mcmp>
 800ead8:	2800      	cmp	r0, #0
 800eada:	f73f adbb 	bgt.w	800e654 <_dtoa_r+0x4b4>
 800eade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eae0:	9d01      	ldr	r5, [sp, #4]
 800eae2:	43db      	mvns	r3, r3
 800eae4:	9300      	str	r3, [sp, #0]
 800eae6:	f04f 0800 	mov.w	r8, #0
 800eaea:	4631      	mov	r1, r6
 800eaec:	4620      	mov	r0, r4
 800eaee:	f000 fbdb 	bl	800f2a8 <_Bfree>
 800eaf2:	2f00      	cmp	r7, #0
 800eaf4:	f43f aea4 	beq.w	800e840 <_dtoa_r+0x6a0>
 800eaf8:	f1b8 0f00 	cmp.w	r8, #0
 800eafc:	d005      	beq.n	800eb0a <_dtoa_r+0x96a>
 800eafe:	45b8      	cmp	r8, r7
 800eb00:	d003      	beq.n	800eb0a <_dtoa_r+0x96a>
 800eb02:	4641      	mov	r1, r8
 800eb04:	4620      	mov	r0, r4
 800eb06:	f000 fbcf 	bl	800f2a8 <_Bfree>
 800eb0a:	4639      	mov	r1, r7
 800eb0c:	4620      	mov	r0, r4
 800eb0e:	f000 fbcb 	bl	800f2a8 <_Bfree>
 800eb12:	e695      	b.n	800e840 <_dtoa_r+0x6a0>
 800eb14:	2600      	movs	r6, #0
 800eb16:	4637      	mov	r7, r6
 800eb18:	e7e1      	b.n	800eade <_dtoa_r+0x93e>
 800eb1a:	9700      	str	r7, [sp, #0]
 800eb1c:	4637      	mov	r7, r6
 800eb1e:	e599      	b.n	800e654 <_dtoa_r+0x4b4>
 800eb20:	40240000 	.word	0x40240000
 800eb24:	9b08      	ldr	r3, [sp, #32]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	f000 80ca 	beq.w	800ecc0 <_dtoa_r+0xb20>
 800eb2c:	9b03      	ldr	r3, [sp, #12]
 800eb2e:	9302      	str	r3, [sp, #8]
 800eb30:	2d00      	cmp	r5, #0
 800eb32:	dd05      	ble.n	800eb40 <_dtoa_r+0x9a0>
 800eb34:	4639      	mov	r1, r7
 800eb36:	462a      	mov	r2, r5
 800eb38:	4620      	mov	r0, r4
 800eb3a:	f000 fd87 	bl	800f64c <__lshift>
 800eb3e:	4607      	mov	r7, r0
 800eb40:	f1b8 0f00 	cmp.w	r8, #0
 800eb44:	d05b      	beq.n	800ebfe <_dtoa_r+0xa5e>
 800eb46:	6879      	ldr	r1, [r7, #4]
 800eb48:	4620      	mov	r0, r4
 800eb4a:	f000 fb6d 	bl	800f228 <_Balloc>
 800eb4e:	4605      	mov	r5, r0
 800eb50:	b928      	cbnz	r0, 800eb5e <_dtoa_r+0x9be>
 800eb52:	4b87      	ldr	r3, [pc, #540]	; (800ed70 <_dtoa_r+0xbd0>)
 800eb54:	4602      	mov	r2, r0
 800eb56:	f240 21ea 	movw	r1, #746	; 0x2ea
 800eb5a:	f7ff bb3b 	b.w	800e1d4 <_dtoa_r+0x34>
 800eb5e:	693a      	ldr	r2, [r7, #16]
 800eb60:	3202      	adds	r2, #2
 800eb62:	0092      	lsls	r2, r2, #2
 800eb64:	f107 010c 	add.w	r1, r7, #12
 800eb68:	300c      	adds	r0, #12
 800eb6a:	f7fe f9e7 	bl	800cf3c <memcpy>
 800eb6e:	2201      	movs	r2, #1
 800eb70:	4629      	mov	r1, r5
 800eb72:	4620      	mov	r0, r4
 800eb74:	f000 fd6a 	bl	800f64c <__lshift>
 800eb78:	9b01      	ldr	r3, [sp, #4]
 800eb7a:	f103 0901 	add.w	r9, r3, #1
 800eb7e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800eb82:	4413      	add	r3, r2
 800eb84:	9305      	str	r3, [sp, #20]
 800eb86:	f00a 0301 	and.w	r3, sl, #1
 800eb8a:	46b8      	mov	r8, r7
 800eb8c:	9304      	str	r3, [sp, #16]
 800eb8e:	4607      	mov	r7, r0
 800eb90:	4631      	mov	r1, r6
 800eb92:	ee18 0a10 	vmov	r0, s16
 800eb96:	f7ff fa77 	bl	800e088 <quorem>
 800eb9a:	4641      	mov	r1, r8
 800eb9c:	9002      	str	r0, [sp, #8]
 800eb9e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800eba2:	ee18 0a10 	vmov	r0, s16
 800eba6:	f000 fdc1 	bl	800f72c <__mcmp>
 800ebaa:	463a      	mov	r2, r7
 800ebac:	9003      	str	r0, [sp, #12]
 800ebae:	4631      	mov	r1, r6
 800ebb0:	4620      	mov	r0, r4
 800ebb2:	f000 fdd7 	bl	800f764 <__mdiff>
 800ebb6:	68c2      	ldr	r2, [r0, #12]
 800ebb8:	f109 3bff 	add.w	fp, r9, #4294967295
 800ebbc:	4605      	mov	r5, r0
 800ebbe:	bb02      	cbnz	r2, 800ec02 <_dtoa_r+0xa62>
 800ebc0:	4601      	mov	r1, r0
 800ebc2:	ee18 0a10 	vmov	r0, s16
 800ebc6:	f000 fdb1 	bl	800f72c <__mcmp>
 800ebca:	4602      	mov	r2, r0
 800ebcc:	4629      	mov	r1, r5
 800ebce:	4620      	mov	r0, r4
 800ebd0:	9207      	str	r2, [sp, #28]
 800ebd2:	f000 fb69 	bl	800f2a8 <_Bfree>
 800ebd6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ebda:	ea43 0102 	orr.w	r1, r3, r2
 800ebde:	9b04      	ldr	r3, [sp, #16]
 800ebe0:	430b      	orrs	r3, r1
 800ebe2:	464d      	mov	r5, r9
 800ebe4:	d10f      	bne.n	800ec06 <_dtoa_r+0xa66>
 800ebe6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ebea:	d02a      	beq.n	800ec42 <_dtoa_r+0xaa2>
 800ebec:	9b03      	ldr	r3, [sp, #12]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	dd02      	ble.n	800ebf8 <_dtoa_r+0xa58>
 800ebf2:	9b02      	ldr	r3, [sp, #8]
 800ebf4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ebf8:	f88b a000 	strb.w	sl, [fp]
 800ebfc:	e775      	b.n	800eaea <_dtoa_r+0x94a>
 800ebfe:	4638      	mov	r0, r7
 800ec00:	e7ba      	b.n	800eb78 <_dtoa_r+0x9d8>
 800ec02:	2201      	movs	r2, #1
 800ec04:	e7e2      	b.n	800ebcc <_dtoa_r+0xa2c>
 800ec06:	9b03      	ldr	r3, [sp, #12]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	db04      	blt.n	800ec16 <_dtoa_r+0xa76>
 800ec0c:	9906      	ldr	r1, [sp, #24]
 800ec0e:	430b      	orrs	r3, r1
 800ec10:	9904      	ldr	r1, [sp, #16]
 800ec12:	430b      	orrs	r3, r1
 800ec14:	d122      	bne.n	800ec5c <_dtoa_r+0xabc>
 800ec16:	2a00      	cmp	r2, #0
 800ec18:	ddee      	ble.n	800ebf8 <_dtoa_r+0xa58>
 800ec1a:	ee18 1a10 	vmov	r1, s16
 800ec1e:	2201      	movs	r2, #1
 800ec20:	4620      	mov	r0, r4
 800ec22:	f000 fd13 	bl	800f64c <__lshift>
 800ec26:	4631      	mov	r1, r6
 800ec28:	ee08 0a10 	vmov	s16, r0
 800ec2c:	f000 fd7e 	bl	800f72c <__mcmp>
 800ec30:	2800      	cmp	r0, #0
 800ec32:	dc03      	bgt.n	800ec3c <_dtoa_r+0xa9c>
 800ec34:	d1e0      	bne.n	800ebf8 <_dtoa_r+0xa58>
 800ec36:	f01a 0f01 	tst.w	sl, #1
 800ec3a:	d0dd      	beq.n	800ebf8 <_dtoa_r+0xa58>
 800ec3c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ec40:	d1d7      	bne.n	800ebf2 <_dtoa_r+0xa52>
 800ec42:	2339      	movs	r3, #57	; 0x39
 800ec44:	f88b 3000 	strb.w	r3, [fp]
 800ec48:	462b      	mov	r3, r5
 800ec4a:	461d      	mov	r5, r3
 800ec4c:	3b01      	subs	r3, #1
 800ec4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ec52:	2a39      	cmp	r2, #57	; 0x39
 800ec54:	d071      	beq.n	800ed3a <_dtoa_r+0xb9a>
 800ec56:	3201      	adds	r2, #1
 800ec58:	701a      	strb	r2, [r3, #0]
 800ec5a:	e746      	b.n	800eaea <_dtoa_r+0x94a>
 800ec5c:	2a00      	cmp	r2, #0
 800ec5e:	dd07      	ble.n	800ec70 <_dtoa_r+0xad0>
 800ec60:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ec64:	d0ed      	beq.n	800ec42 <_dtoa_r+0xaa2>
 800ec66:	f10a 0301 	add.w	r3, sl, #1
 800ec6a:	f88b 3000 	strb.w	r3, [fp]
 800ec6e:	e73c      	b.n	800eaea <_dtoa_r+0x94a>
 800ec70:	9b05      	ldr	r3, [sp, #20]
 800ec72:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ec76:	4599      	cmp	r9, r3
 800ec78:	d047      	beq.n	800ed0a <_dtoa_r+0xb6a>
 800ec7a:	ee18 1a10 	vmov	r1, s16
 800ec7e:	2300      	movs	r3, #0
 800ec80:	220a      	movs	r2, #10
 800ec82:	4620      	mov	r0, r4
 800ec84:	f000 fb32 	bl	800f2ec <__multadd>
 800ec88:	45b8      	cmp	r8, r7
 800ec8a:	ee08 0a10 	vmov	s16, r0
 800ec8e:	f04f 0300 	mov.w	r3, #0
 800ec92:	f04f 020a 	mov.w	r2, #10
 800ec96:	4641      	mov	r1, r8
 800ec98:	4620      	mov	r0, r4
 800ec9a:	d106      	bne.n	800ecaa <_dtoa_r+0xb0a>
 800ec9c:	f000 fb26 	bl	800f2ec <__multadd>
 800eca0:	4680      	mov	r8, r0
 800eca2:	4607      	mov	r7, r0
 800eca4:	f109 0901 	add.w	r9, r9, #1
 800eca8:	e772      	b.n	800eb90 <_dtoa_r+0x9f0>
 800ecaa:	f000 fb1f 	bl	800f2ec <__multadd>
 800ecae:	4639      	mov	r1, r7
 800ecb0:	4680      	mov	r8, r0
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	220a      	movs	r2, #10
 800ecb6:	4620      	mov	r0, r4
 800ecb8:	f000 fb18 	bl	800f2ec <__multadd>
 800ecbc:	4607      	mov	r7, r0
 800ecbe:	e7f1      	b.n	800eca4 <_dtoa_r+0xb04>
 800ecc0:	9b03      	ldr	r3, [sp, #12]
 800ecc2:	9302      	str	r3, [sp, #8]
 800ecc4:	9d01      	ldr	r5, [sp, #4]
 800ecc6:	ee18 0a10 	vmov	r0, s16
 800ecca:	4631      	mov	r1, r6
 800eccc:	f7ff f9dc 	bl	800e088 <quorem>
 800ecd0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ecd4:	9b01      	ldr	r3, [sp, #4]
 800ecd6:	f805 ab01 	strb.w	sl, [r5], #1
 800ecda:	1aea      	subs	r2, r5, r3
 800ecdc:	9b02      	ldr	r3, [sp, #8]
 800ecde:	4293      	cmp	r3, r2
 800ece0:	dd09      	ble.n	800ecf6 <_dtoa_r+0xb56>
 800ece2:	ee18 1a10 	vmov	r1, s16
 800ece6:	2300      	movs	r3, #0
 800ece8:	220a      	movs	r2, #10
 800ecea:	4620      	mov	r0, r4
 800ecec:	f000 fafe 	bl	800f2ec <__multadd>
 800ecf0:	ee08 0a10 	vmov	s16, r0
 800ecf4:	e7e7      	b.n	800ecc6 <_dtoa_r+0xb26>
 800ecf6:	9b02      	ldr	r3, [sp, #8]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	bfc8      	it	gt
 800ecfc:	461d      	movgt	r5, r3
 800ecfe:	9b01      	ldr	r3, [sp, #4]
 800ed00:	bfd8      	it	le
 800ed02:	2501      	movle	r5, #1
 800ed04:	441d      	add	r5, r3
 800ed06:	f04f 0800 	mov.w	r8, #0
 800ed0a:	ee18 1a10 	vmov	r1, s16
 800ed0e:	2201      	movs	r2, #1
 800ed10:	4620      	mov	r0, r4
 800ed12:	f000 fc9b 	bl	800f64c <__lshift>
 800ed16:	4631      	mov	r1, r6
 800ed18:	ee08 0a10 	vmov	s16, r0
 800ed1c:	f000 fd06 	bl	800f72c <__mcmp>
 800ed20:	2800      	cmp	r0, #0
 800ed22:	dc91      	bgt.n	800ec48 <_dtoa_r+0xaa8>
 800ed24:	d102      	bne.n	800ed2c <_dtoa_r+0xb8c>
 800ed26:	f01a 0f01 	tst.w	sl, #1
 800ed2a:	d18d      	bne.n	800ec48 <_dtoa_r+0xaa8>
 800ed2c:	462b      	mov	r3, r5
 800ed2e:	461d      	mov	r5, r3
 800ed30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ed34:	2a30      	cmp	r2, #48	; 0x30
 800ed36:	d0fa      	beq.n	800ed2e <_dtoa_r+0xb8e>
 800ed38:	e6d7      	b.n	800eaea <_dtoa_r+0x94a>
 800ed3a:	9a01      	ldr	r2, [sp, #4]
 800ed3c:	429a      	cmp	r2, r3
 800ed3e:	d184      	bne.n	800ec4a <_dtoa_r+0xaaa>
 800ed40:	9b00      	ldr	r3, [sp, #0]
 800ed42:	3301      	adds	r3, #1
 800ed44:	9300      	str	r3, [sp, #0]
 800ed46:	2331      	movs	r3, #49	; 0x31
 800ed48:	7013      	strb	r3, [r2, #0]
 800ed4a:	e6ce      	b.n	800eaea <_dtoa_r+0x94a>
 800ed4c:	4b09      	ldr	r3, [pc, #36]	; (800ed74 <_dtoa_r+0xbd4>)
 800ed4e:	f7ff ba95 	b.w	800e27c <_dtoa_r+0xdc>
 800ed52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	f47f aa6e 	bne.w	800e236 <_dtoa_r+0x96>
 800ed5a:	4b07      	ldr	r3, [pc, #28]	; (800ed78 <_dtoa_r+0xbd8>)
 800ed5c:	f7ff ba8e 	b.w	800e27c <_dtoa_r+0xdc>
 800ed60:	9b02      	ldr	r3, [sp, #8]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	dcae      	bgt.n	800ecc4 <_dtoa_r+0xb24>
 800ed66:	9b06      	ldr	r3, [sp, #24]
 800ed68:	2b02      	cmp	r3, #2
 800ed6a:	f73f aea8 	bgt.w	800eabe <_dtoa_r+0x91e>
 800ed6e:	e7a9      	b.n	800ecc4 <_dtoa_r+0xb24>
 800ed70:	08010a93 	.word	0x08010a93
 800ed74:	08010c71 	.word	0x08010c71
 800ed78:	08010a2b 	.word	0x08010a2b

0800ed7c <__sflush_r>:
 800ed7c:	898a      	ldrh	r2, [r1, #12]
 800ed7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed82:	4605      	mov	r5, r0
 800ed84:	0710      	lsls	r0, r2, #28
 800ed86:	460c      	mov	r4, r1
 800ed88:	d458      	bmi.n	800ee3c <__sflush_r+0xc0>
 800ed8a:	684b      	ldr	r3, [r1, #4]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	dc05      	bgt.n	800ed9c <__sflush_r+0x20>
 800ed90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	dc02      	bgt.n	800ed9c <__sflush_r+0x20>
 800ed96:	2000      	movs	r0, #0
 800ed98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ed9e:	2e00      	cmp	r6, #0
 800eda0:	d0f9      	beq.n	800ed96 <__sflush_r+0x1a>
 800eda2:	2300      	movs	r3, #0
 800eda4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eda8:	682f      	ldr	r7, [r5, #0]
 800edaa:	602b      	str	r3, [r5, #0]
 800edac:	d032      	beq.n	800ee14 <__sflush_r+0x98>
 800edae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800edb0:	89a3      	ldrh	r3, [r4, #12]
 800edb2:	075a      	lsls	r2, r3, #29
 800edb4:	d505      	bpl.n	800edc2 <__sflush_r+0x46>
 800edb6:	6863      	ldr	r3, [r4, #4]
 800edb8:	1ac0      	subs	r0, r0, r3
 800edba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800edbc:	b10b      	cbz	r3, 800edc2 <__sflush_r+0x46>
 800edbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800edc0:	1ac0      	subs	r0, r0, r3
 800edc2:	2300      	movs	r3, #0
 800edc4:	4602      	mov	r2, r0
 800edc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800edc8:	6a21      	ldr	r1, [r4, #32]
 800edca:	4628      	mov	r0, r5
 800edcc:	47b0      	blx	r6
 800edce:	1c43      	adds	r3, r0, #1
 800edd0:	89a3      	ldrh	r3, [r4, #12]
 800edd2:	d106      	bne.n	800ede2 <__sflush_r+0x66>
 800edd4:	6829      	ldr	r1, [r5, #0]
 800edd6:	291d      	cmp	r1, #29
 800edd8:	d82c      	bhi.n	800ee34 <__sflush_r+0xb8>
 800edda:	4a2a      	ldr	r2, [pc, #168]	; (800ee84 <__sflush_r+0x108>)
 800eddc:	40ca      	lsrs	r2, r1
 800edde:	07d6      	lsls	r6, r2, #31
 800ede0:	d528      	bpl.n	800ee34 <__sflush_r+0xb8>
 800ede2:	2200      	movs	r2, #0
 800ede4:	6062      	str	r2, [r4, #4]
 800ede6:	04d9      	lsls	r1, r3, #19
 800ede8:	6922      	ldr	r2, [r4, #16]
 800edea:	6022      	str	r2, [r4, #0]
 800edec:	d504      	bpl.n	800edf8 <__sflush_r+0x7c>
 800edee:	1c42      	adds	r2, r0, #1
 800edf0:	d101      	bne.n	800edf6 <__sflush_r+0x7a>
 800edf2:	682b      	ldr	r3, [r5, #0]
 800edf4:	b903      	cbnz	r3, 800edf8 <__sflush_r+0x7c>
 800edf6:	6560      	str	r0, [r4, #84]	; 0x54
 800edf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800edfa:	602f      	str	r7, [r5, #0]
 800edfc:	2900      	cmp	r1, #0
 800edfe:	d0ca      	beq.n	800ed96 <__sflush_r+0x1a>
 800ee00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee04:	4299      	cmp	r1, r3
 800ee06:	d002      	beq.n	800ee0e <__sflush_r+0x92>
 800ee08:	4628      	mov	r0, r5
 800ee0a:	f7fe f8ad 	bl	800cf68 <_free_r>
 800ee0e:	2000      	movs	r0, #0
 800ee10:	6360      	str	r0, [r4, #52]	; 0x34
 800ee12:	e7c1      	b.n	800ed98 <__sflush_r+0x1c>
 800ee14:	6a21      	ldr	r1, [r4, #32]
 800ee16:	2301      	movs	r3, #1
 800ee18:	4628      	mov	r0, r5
 800ee1a:	47b0      	blx	r6
 800ee1c:	1c41      	adds	r1, r0, #1
 800ee1e:	d1c7      	bne.n	800edb0 <__sflush_r+0x34>
 800ee20:	682b      	ldr	r3, [r5, #0]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d0c4      	beq.n	800edb0 <__sflush_r+0x34>
 800ee26:	2b1d      	cmp	r3, #29
 800ee28:	d001      	beq.n	800ee2e <__sflush_r+0xb2>
 800ee2a:	2b16      	cmp	r3, #22
 800ee2c:	d101      	bne.n	800ee32 <__sflush_r+0xb6>
 800ee2e:	602f      	str	r7, [r5, #0]
 800ee30:	e7b1      	b.n	800ed96 <__sflush_r+0x1a>
 800ee32:	89a3      	ldrh	r3, [r4, #12]
 800ee34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee38:	81a3      	strh	r3, [r4, #12]
 800ee3a:	e7ad      	b.n	800ed98 <__sflush_r+0x1c>
 800ee3c:	690f      	ldr	r7, [r1, #16]
 800ee3e:	2f00      	cmp	r7, #0
 800ee40:	d0a9      	beq.n	800ed96 <__sflush_r+0x1a>
 800ee42:	0793      	lsls	r3, r2, #30
 800ee44:	680e      	ldr	r6, [r1, #0]
 800ee46:	bf08      	it	eq
 800ee48:	694b      	ldreq	r3, [r1, #20]
 800ee4a:	600f      	str	r7, [r1, #0]
 800ee4c:	bf18      	it	ne
 800ee4e:	2300      	movne	r3, #0
 800ee50:	eba6 0807 	sub.w	r8, r6, r7
 800ee54:	608b      	str	r3, [r1, #8]
 800ee56:	f1b8 0f00 	cmp.w	r8, #0
 800ee5a:	dd9c      	ble.n	800ed96 <__sflush_r+0x1a>
 800ee5c:	6a21      	ldr	r1, [r4, #32]
 800ee5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ee60:	4643      	mov	r3, r8
 800ee62:	463a      	mov	r2, r7
 800ee64:	4628      	mov	r0, r5
 800ee66:	47b0      	blx	r6
 800ee68:	2800      	cmp	r0, #0
 800ee6a:	dc06      	bgt.n	800ee7a <__sflush_r+0xfe>
 800ee6c:	89a3      	ldrh	r3, [r4, #12]
 800ee6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee72:	81a3      	strh	r3, [r4, #12]
 800ee74:	f04f 30ff 	mov.w	r0, #4294967295
 800ee78:	e78e      	b.n	800ed98 <__sflush_r+0x1c>
 800ee7a:	4407      	add	r7, r0
 800ee7c:	eba8 0800 	sub.w	r8, r8, r0
 800ee80:	e7e9      	b.n	800ee56 <__sflush_r+0xda>
 800ee82:	bf00      	nop
 800ee84:	20400001 	.word	0x20400001

0800ee88 <_fflush_r>:
 800ee88:	b538      	push	{r3, r4, r5, lr}
 800ee8a:	690b      	ldr	r3, [r1, #16]
 800ee8c:	4605      	mov	r5, r0
 800ee8e:	460c      	mov	r4, r1
 800ee90:	b913      	cbnz	r3, 800ee98 <_fflush_r+0x10>
 800ee92:	2500      	movs	r5, #0
 800ee94:	4628      	mov	r0, r5
 800ee96:	bd38      	pop	{r3, r4, r5, pc}
 800ee98:	b118      	cbz	r0, 800eea2 <_fflush_r+0x1a>
 800ee9a:	6983      	ldr	r3, [r0, #24]
 800ee9c:	b90b      	cbnz	r3, 800eea2 <_fflush_r+0x1a>
 800ee9e:	f000 f887 	bl	800efb0 <__sinit>
 800eea2:	4b14      	ldr	r3, [pc, #80]	; (800eef4 <_fflush_r+0x6c>)
 800eea4:	429c      	cmp	r4, r3
 800eea6:	d11b      	bne.n	800eee0 <_fflush_r+0x58>
 800eea8:	686c      	ldr	r4, [r5, #4]
 800eeaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d0ef      	beq.n	800ee92 <_fflush_r+0xa>
 800eeb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eeb4:	07d0      	lsls	r0, r2, #31
 800eeb6:	d404      	bmi.n	800eec2 <_fflush_r+0x3a>
 800eeb8:	0599      	lsls	r1, r3, #22
 800eeba:	d402      	bmi.n	800eec2 <_fflush_r+0x3a>
 800eebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eebe:	f000 f92c 	bl	800f11a <__retarget_lock_acquire_recursive>
 800eec2:	4628      	mov	r0, r5
 800eec4:	4621      	mov	r1, r4
 800eec6:	f7ff ff59 	bl	800ed7c <__sflush_r>
 800eeca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eecc:	07da      	lsls	r2, r3, #31
 800eece:	4605      	mov	r5, r0
 800eed0:	d4e0      	bmi.n	800ee94 <_fflush_r+0xc>
 800eed2:	89a3      	ldrh	r3, [r4, #12]
 800eed4:	059b      	lsls	r3, r3, #22
 800eed6:	d4dd      	bmi.n	800ee94 <_fflush_r+0xc>
 800eed8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eeda:	f000 f91f 	bl	800f11c <__retarget_lock_release_recursive>
 800eede:	e7d9      	b.n	800ee94 <_fflush_r+0xc>
 800eee0:	4b05      	ldr	r3, [pc, #20]	; (800eef8 <_fflush_r+0x70>)
 800eee2:	429c      	cmp	r4, r3
 800eee4:	d101      	bne.n	800eeea <_fflush_r+0x62>
 800eee6:	68ac      	ldr	r4, [r5, #8]
 800eee8:	e7df      	b.n	800eeaa <_fflush_r+0x22>
 800eeea:	4b04      	ldr	r3, [pc, #16]	; (800eefc <_fflush_r+0x74>)
 800eeec:	429c      	cmp	r4, r3
 800eeee:	bf08      	it	eq
 800eef0:	68ec      	ldreq	r4, [r5, #12]
 800eef2:	e7da      	b.n	800eeaa <_fflush_r+0x22>
 800eef4:	08010ac4 	.word	0x08010ac4
 800eef8:	08010ae4 	.word	0x08010ae4
 800eefc:	08010aa4 	.word	0x08010aa4

0800ef00 <std>:
 800ef00:	2300      	movs	r3, #0
 800ef02:	b510      	push	{r4, lr}
 800ef04:	4604      	mov	r4, r0
 800ef06:	e9c0 3300 	strd	r3, r3, [r0]
 800ef0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ef0e:	6083      	str	r3, [r0, #8]
 800ef10:	8181      	strh	r1, [r0, #12]
 800ef12:	6643      	str	r3, [r0, #100]	; 0x64
 800ef14:	81c2      	strh	r2, [r0, #14]
 800ef16:	6183      	str	r3, [r0, #24]
 800ef18:	4619      	mov	r1, r3
 800ef1a:	2208      	movs	r2, #8
 800ef1c:	305c      	adds	r0, #92	; 0x5c
 800ef1e:	f7fe f81b 	bl	800cf58 <memset>
 800ef22:	4b05      	ldr	r3, [pc, #20]	; (800ef38 <std+0x38>)
 800ef24:	6263      	str	r3, [r4, #36]	; 0x24
 800ef26:	4b05      	ldr	r3, [pc, #20]	; (800ef3c <std+0x3c>)
 800ef28:	62a3      	str	r3, [r4, #40]	; 0x28
 800ef2a:	4b05      	ldr	r3, [pc, #20]	; (800ef40 <std+0x40>)
 800ef2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ef2e:	4b05      	ldr	r3, [pc, #20]	; (800ef44 <std+0x44>)
 800ef30:	6224      	str	r4, [r4, #32]
 800ef32:	6323      	str	r3, [r4, #48]	; 0x30
 800ef34:	bd10      	pop	{r4, pc}
 800ef36:	bf00      	nop
 800ef38:	0800dc19 	.word	0x0800dc19
 800ef3c:	0800dc3f 	.word	0x0800dc3f
 800ef40:	0800dc77 	.word	0x0800dc77
 800ef44:	0800dc9b 	.word	0x0800dc9b

0800ef48 <_cleanup_r>:
 800ef48:	4901      	ldr	r1, [pc, #4]	; (800ef50 <_cleanup_r+0x8>)
 800ef4a:	f000 b8c1 	b.w	800f0d0 <_fwalk_reent>
 800ef4e:	bf00      	nop
 800ef50:	0800ee89 	.word	0x0800ee89

0800ef54 <__sfmoreglue>:
 800ef54:	b570      	push	{r4, r5, r6, lr}
 800ef56:	2268      	movs	r2, #104	; 0x68
 800ef58:	1e4d      	subs	r5, r1, #1
 800ef5a:	4355      	muls	r5, r2
 800ef5c:	460e      	mov	r6, r1
 800ef5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ef62:	f7fe f86d 	bl	800d040 <_malloc_r>
 800ef66:	4604      	mov	r4, r0
 800ef68:	b140      	cbz	r0, 800ef7c <__sfmoreglue+0x28>
 800ef6a:	2100      	movs	r1, #0
 800ef6c:	e9c0 1600 	strd	r1, r6, [r0]
 800ef70:	300c      	adds	r0, #12
 800ef72:	60a0      	str	r0, [r4, #8]
 800ef74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ef78:	f7fd ffee 	bl	800cf58 <memset>
 800ef7c:	4620      	mov	r0, r4
 800ef7e:	bd70      	pop	{r4, r5, r6, pc}

0800ef80 <__sfp_lock_acquire>:
 800ef80:	4801      	ldr	r0, [pc, #4]	; (800ef88 <__sfp_lock_acquire+0x8>)
 800ef82:	f000 b8ca 	b.w	800f11a <__retarget_lock_acquire_recursive>
 800ef86:	bf00      	nop
 800ef88:	200036c1 	.word	0x200036c1

0800ef8c <__sfp_lock_release>:
 800ef8c:	4801      	ldr	r0, [pc, #4]	; (800ef94 <__sfp_lock_release+0x8>)
 800ef8e:	f000 b8c5 	b.w	800f11c <__retarget_lock_release_recursive>
 800ef92:	bf00      	nop
 800ef94:	200036c1 	.word	0x200036c1

0800ef98 <__sinit_lock_acquire>:
 800ef98:	4801      	ldr	r0, [pc, #4]	; (800efa0 <__sinit_lock_acquire+0x8>)
 800ef9a:	f000 b8be 	b.w	800f11a <__retarget_lock_acquire_recursive>
 800ef9e:	bf00      	nop
 800efa0:	200036c2 	.word	0x200036c2

0800efa4 <__sinit_lock_release>:
 800efa4:	4801      	ldr	r0, [pc, #4]	; (800efac <__sinit_lock_release+0x8>)
 800efa6:	f000 b8b9 	b.w	800f11c <__retarget_lock_release_recursive>
 800efaa:	bf00      	nop
 800efac:	200036c2 	.word	0x200036c2

0800efb0 <__sinit>:
 800efb0:	b510      	push	{r4, lr}
 800efb2:	4604      	mov	r4, r0
 800efb4:	f7ff fff0 	bl	800ef98 <__sinit_lock_acquire>
 800efb8:	69a3      	ldr	r3, [r4, #24]
 800efba:	b11b      	cbz	r3, 800efc4 <__sinit+0x14>
 800efbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efc0:	f7ff bff0 	b.w	800efa4 <__sinit_lock_release>
 800efc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800efc8:	6523      	str	r3, [r4, #80]	; 0x50
 800efca:	4b13      	ldr	r3, [pc, #76]	; (800f018 <__sinit+0x68>)
 800efcc:	4a13      	ldr	r2, [pc, #76]	; (800f01c <__sinit+0x6c>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	62a2      	str	r2, [r4, #40]	; 0x28
 800efd2:	42a3      	cmp	r3, r4
 800efd4:	bf04      	itt	eq
 800efd6:	2301      	moveq	r3, #1
 800efd8:	61a3      	streq	r3, [r4, #24]
 800efda:	4620      	mov	r0, r4
 800efdc:	f000 f820 	bl	800f020 <__sfp>
 800efe0:	6060      	str	r0, [r4, #4]
 800efe2:	4620      	mov	r0, r4
 800efe4:	f000 f81c 	bl	800f020 <__sfp>
 800efe8:	60a0      	str	r0, [r4, #8]
 800efea:	4620      	mov	r0, r4
 800efec:	f000 f818 	bl	800f020 <__sfp>
 800eff0:	2200      	movs	r2, #0
 800eff2:	60e0      	str	r0, [r4, #12]
 800eff4:	2104      	movs	r1, #4
 800eff6:	6860      	ldr	r0, [r4, #4]
 800eff8:	f7ff ff82 	bl	800ef00 <std>
 800effc:	68a0      	ldr	r0, [r4, #8]
 800effe:	2201      	movs	r2, #1
 800f000:	2109      	movs	r1, #9
 800f002:	f7ff ff7d 	bl	800ef00 <std>
 800f006:	68e0      	ldr	r0, [r4, #12]
 800f008:	2202      	movs	r2, #2
 800f00a:	2112      	movs	r1, #18
 800f00c:	f7ff ff78 	bl	800ef00 <std>
 800f010:	2301      	movs	r3, #1
 800f012:	61a3      	str	r3, [r4, #24]
 800f014:	e7d2      	b.n	800efbc <__sinit+0xc>
 800f016:	bf00      	nop
 800f018:	08010844 	.word	0x08010844
 800f01c:	0800ef49 	.word	0x0800ef49

0800f020 <__sfp>:
 800f020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f022:	4607      	mov	r7, r0
 800f024:	f7ff ffac 	bl	800ef80 <__sfp_lock_acquire>
 800f028:	4b1e      	ldr	r3, [pc, #120]	; (800f0a4 <__sfp+0x84>)
 800f02a:	681e      	ldr	r6, [r3, #0]
 800f02c:	69b3      	ldr	r3, [r6, #24]
 800f02e:	b913      	cbnz	r3, 800f036 <__sfp+0x16>
 800f030:	4630      	mov	r0, r6
 800f032:	f7ff ffbd 	bl	800efb0 <__sinit>
 800f036:	3648      	adds	r6, #72	; 0x48
 800f038:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f03c:	3b01      	subs	r3, #1
 800f03e:	d503      	bpl.n	800f048 <__sfp+0x28>
 800f040:	6833      	ldr	r3, [r6, #0]
 800f042:	b30b      	cbz	r3, 800f088 <__sfp+0x68>
 800f044:	6836      	ldr	r6, [r6, #0]
 800f046:	e7f7      	b.n	800f038 <__sfp+0x18>
 800f048:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f04c:	b9d5      	cbnz	r5, 800f084 <__sfp+0x64>
 800f04e:	4b16      	ldr	r3, [pc, #88]	; (800f0a8 <__sfp+0x88>)
 800f050:	60e3      	str	r3, [r4, #12]
 800f052:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f056:	6665      	str	r5, [r4, #100]	; 0x64
 800f058:	f000 f85e 	bl	800f118 <__retarget_lock_init_recursive>
 800f05c:	f7ff ff96 	bl	800ef8c <__sfp_lock_release>
 800f060:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f064:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f068:	6025      	str	r5, [r4, #0]
 800f06a:	61a5      	str	r5, [r4, #24]
 800f06c:	2208      	movs	r2, #8
 800f06e:	4629      	mov	r1, r5
 800f070:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f074:	f7fd ff70 	bl	800cf58 <memset>
 800f078:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f07c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f080:	4620      	mov	r0, r4
 800f082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f084:	3468      	adds	r4, #104	; 0x68
 800f086:	e7d9      	b.n	800f03c <__sfp+0x1c>
 800f088:	2104      	movs	r1, #4
 800f08a:	4638      	mov	r0, r7
 800f08c:	f7ff ff62 	bl	800ef54 <__sfmoreglue>
 800f090:	4604      	mov	r4, r0
 800f092:	6030      	str	r0, [r6, #0]
 800f094:	2800      	cmp	r0, #0
 800f096:	d1d5      	bne.n	800f044 <__sfp+0x24>
 800f098:	f7ff ff78 	bl	800ef8c <__sfp_lock_release>
 800f09c:	230c      	movs	r3, #12
 800f09e:	603b      	str	r3, [r7, #0]
 800f0a0:	e7ee      	b.n	800f080 <__sfp+0x60>
 800f0a2:	bf00      	nop
 800f0a4:	08010844 	.word	0x08010844
 800f0a8:	ffff0001 	.word	0xffff0001

0800f0ac <fiprintf>:
 800f0ac:	b40e      	push	{r1, r2, r3}
 800f0ae:	b503      	push	{r0, r1, lr}
 800f0b0:	4601      	mov	r1, r0
 800f0b2:	ab03      	add	r3, sp, #12
 800f0b4:	4805      	ldr	r0, [pc, #20]	; (800f0cc <fiprintf+0x20>)
 800f0b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0ba:	6800      	ldr	r0, [r0, #0]
 800f0bc:	9301      	str	r3, [sp, #4]
 800f0be:	f000 fe49 	bl	800fd54 <_vfiprintf_r>
 800f0c2:	b002      	add	sp, #8
 800f0c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f0c8:	b003      	add	sp, #12
 800f0ca:	4770      	bx	lr
 800f0cc:	2000002c 	.word	0x2000002c

0800f0d0 <_fwalk_reent>:
 800f0d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0d4:	4606      	mov	r6, r0
 800f0d6:	4688      	mov	r8, r1
 800f0d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f0dc:	2700      	movs	r7, #0
 800f0de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f0e2:	f1b9 0901 	subs.w	r9, r9, #1
 800f0e6:	d505      	bpl.n	800f0f4 <_fwalk_reent+0x24>
 800f0e8:	6824      	ldr	r4, [r4, #0]
 800f0ea:	2c00      	cmp	r4, #0
 800f0ec:	d1f7      	bne.n	800f0de <_fwalk_reent+0xe>
 800f0ee:	4638      	mov	r0, r7
 800f0f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0f4:	89ab      	ldrh	r3, [r5, #12]
 800f0f6:	2b01      	cmp	r3, #1
 800f0f8:	d907      	bls.n	800f10a <_fwalk_reent+0x3a>
 800f0fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f0fe:	3301      	adds	r3, #1
 800f100:	d003      	beq.n	800f10a <_fwalk_reent+0x3a>
 800f102:	4629      	mov	r1, r5
 800f104:	4630      	mov	r0, r6
 800f106:	47c0      	blx	r8
 800f108:	4307      	orrs	r7, r0
 800f10a:	3568      	adds	r5, #104	; 0x68
 800f10c:	e7e9      	b.n	800f0e2 <_fwalk_reent+0x12>
	...

0800f110 <_localeconv_r>:
 800f110:	4800      	ldr	r0, [pc, #0]	; (800f114 <_localeconv_r+0x4>)
 800f112:	4770      	bx	lr
 800f114:	20000180 	.word	0x20000180

0800f118 <__retarget_lock_init_recursive>:
 800f118:	4770      	bx	lr

0800f11a <__retarget_lock_acquire_recursive>:
 800f11a:	4770      	bx	lr

0800f11c <__retarget_lock_release_recursive>:
 800f11c:	4770      	bx	lr
	...

0800f120 <_lseek_r>:
 800f120:	b538      	push	{r3, r4, r5, lr}
 800f122:	4d07      	ldr	r5, [pc, #28]	; (800f140 <_lseek_r+0x20>)
 800f124:	4604      	mov	r4, r0
 800f126:	4608      	mov	r0, r1
 800f128:	4611      	mov	r1, r2
 800f12a:	2200      	movs	r2, #0
 800f12c:	602a      	str	r2, [r5, #0]
 800f12e:	461a      	mov	r2, r3
 800f130:	f7f3 ff16 	bl	8002f60 <_lseek>
 800f134:	1c43      	adds	r3, r0, #1
 800f136:	d102      	bne.n	800f13e <_lseek_r+0x1e>
 800f138:	682b      	ldr	r3, [r5, #0]
 800f13a:	b103      	cbz	r3, 800f13e <_lseek_r+0x1e>
 800f13c:	6023      	str	r3, [r4, #0]
 800f13e:	bd38      	pop	{r3, r4, r5, pc}
 800f140:	200036c4 	.word	0x200036c4

0800f144 <__swhatbuf_r>:
 800f144:	b570      	push	{r4, r5, r6, lr}
 800f146:	460e      	mov	r6, r1
 800f148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f14c:	2900      	cmp	r1, #0
 800f14e:	b096      	sub	sp, #88	; 0x58
 800f150:	4614      	mov	r4, r2
 800f152:	461d      	mov	r5, r3
 800f154:	da08      	bge.n	800f168 <__swhatbuf_r+0x24>
 800f156:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f15a:	2200      	movs	r2, #0
 800f15c:	602a      	str	r2, [r5, #0]
 800f15e:	061a      	lsls	r2, r3, #24
 800f160:	d410      	bmi.n	800f184 <__swhatbuf_r+0x40>
 800f162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f166:	e00e      	b.n	800f186 <__swhatbuf_r+0x42>
 800f168:	466a      	mov	r2, sp
 800f16a:	f001 f96d 	bl	8010448 <_fstat_r>
 800f16e:	2800      	cmp	r0, #0
 800f170:	dbf1      	blt.n	800f156 <__swhatbuf_r+0x12>
 800f172:	9a01      	ldr	r2, [sp, #4]
 800f174:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f178:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f17c:	425a      	negs	r2, r3
 800f17e:	415a      	adcs	r2, r3
 800f180:	602a      	str	r2, [r5, #0]
 800f182:	e7ee      	b.n	800f162 <__swhatbuf_r+0x1e>
 800f184:	2340      	movs	r3, #64	; 0x40
 800f186:	2000      	movs	r0, #0
 800f188:	6023      	str	r3, [r4, #0]
 800f18a:	b016      	add	sp, #88	; 0x58
 800f18c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f190 <__smakebuf_r>:
 800f190:	898b      	ldrh	r3, [r1, #12]
 800f192:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f194:	079d      	lsls	r5, r3, #30
 800f196:	4606      	mov	r6, r0
 800f198:	460c      	mov	r4, r1
 800f19a:	d507      	bpl.n	800f1ac <__smakebuf_r+0x1c>
 800f19c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f1a0:	6023      	str	r3, [r4, #0]
 800f1a2:	6123      	str	r3, [r4, #16]
 800f1a4:	2301      	movs	r3, #1
 800f1a6:	6163      	str	r3, [r4, #20]
 800f1a8:	b002      	add	sp, #8
 800f1aa:	bd70      	pop	{r4, r5, r6, pc}
 800f1ac:	ab01      	add	r3, sp, #4
 800f1ae:	466a      	mov	r2, sp
 800f1b0:	f7ff ffc8 	bl	800f144 <__swhatbuf_r>
 800f1b4:	9900      	ldr	r1, [sp, #0]
 800f1b6:	4605      	mov	r5, r0
 800f1b8:	4630      	mov	r0, r6
 800f1ba:	f7fd ff41 	bl	800d040 <_malloc_r>
 800f1be:	b948      	cbnz	r0, 800f1d4 <__smakebuf_r+0x44>
 800f1c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1c4:	059a      	lsls	r2, r3, #22
 800f1c6:	d4ef      	bmi.n	800f1a8 <__smakebuf_r+0x18>
 800f1c8:	f023 0303 	bic.w	r3, r3, #3
 800f1cc:	f043 0302 	orr.w	r3, r3, #2
 800f1d0:	81a3      	strh	r3, [r4, #12]
 800f1d2:	e7e3      	b.n	800f19c <__smakebuf_r+0xc>
 800f1d4:	4b0d      	ldr	r3, [pc, #52]	; (800f20c <__smakebuf_r+0x7c>)
 800f1d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800f1d8:	89a3      	ldrh	r3, [r4, #12]
 800f1da:	6020      	str	r0, [r4, #0]
 800f1dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1e0:	81a3      	strh	r3, [r4, #12]
 800f1e2:	9b00      	ldr	r3, [sp, #0]
 800f1e4:	6163      	str	r3, [r4, #20]
 800f1e6:	9b01      	ldr	r3, [sp, #4]
 800f1e8:	6120      	str	r0, [r4, #16]
 800f1ea:	b15b      	cbz	r3, 800f204 <__smakebuf_r+0x74>
 800f1ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f1f0:	4630      	mov	r0, r6
 800f1f2:	f001 f93b 	bl	801046c <_isatty_r>
 800f1f6:	b128      	cbz	r0, 800f204 <__smakebuf_r+0x74>
 800f1f8:	89a3      	ldrh	r3, [r4, #12]
 800f1fa:	f023 0303 	bic.w	r3, r3, #3
 800f1fe:	f043 0301 	orr.w	r3, r3, #1
 800f202:	81a3      	strh	r3, [r4, #12]
 800f204:	89a0      	ldrh	r0, [r4, #12]
 800f206:	4305      	orrs	r5, r0
 800f208:	81a5      	strh	r5, [r4, #12]
 800f20a:	e7cd      	b.n	800f1a8 <__smakebuf_r+0x18>
 800f20c:	0800ef49 	.word	0x0800ef49

0800f210 <__malloc_lock>:
 800f210:	4801      	ldr	r0, [pc, #4]	; (800f218 <__malloc_lock+0x8>)
 800f212:	f7ff bf82 	b.w	800f11a <__retarget_lock_acquire_recursive>
 800f216:	bf00      	nop
 800f218:	200036c0 	.word	0x200036c0

0800f21c <__malloc_unlock>:
 800f21c:	4801      	ldr	r0, [pc, #4]	; (800f224 <__malloc_unlock+0x8>)
 800f21e:	f7ff bf7d 	b.w	800f11c <__retarget_lock_release_recursive>
 800f222:	bf00      	nop
 800f224:	200036c0 	.word	0x200036c0

0800f228 <_Balloc>:
 800f228:	b570      	push	{r4, r5, r6, lr}
 800f22a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f22c:	4604      	mov	r4, r0
 800f22e:	460d      	mov	r5, r1
 800f230:	b976      	cbnz	r6, 800f250 <_Balloc+0x28>
 800f232:	2010      	movs	r0, #16
 800f234:	f7fd fe72 	bl	800cf1c <malloc>
 800f238:	4602      	mov	r2, r0
 800f23a:	6260      	str	r0, [r4, #36]	; 0x24
 800f23c:	b920      	cbnz	r0, 800f248 <_Balloc+0x20>
 800f23e:	4b18      	ldr	r3, [pc, #96]	; (800f2a0 <_Balloc+0x78>)
 800f240:	4818      	ldr	r0, [pc, #96]	; (800f2a4 <_Balloc+0x7c>)
 800f242:	2166      	movs	r1, #102	; 0x66
 800f244:	f7fe fef2 	bl	800e02c <__assert_func>
 800f248:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f24c:	6006      	str	r6, [r0, #0]
 800f24e:	60c6      	str	r6, [r0, #12]
 800f250:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f252:	68f3      	ldr	r3, [r6, #12]
 800f254:	b183      	cbz	r3, 800f278 <_Balloc+0x50>
 800f256:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f258:	68db      	ldr	r3, [r3, #12]
 800f25a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f25e:	b9b8      	cbnz	r0, 800f290 <_Balloc+0x68>
 800f260:	2101      	movs	r1, #1
 800f262:	fa01 f605 	lsl.w	r6, r1, r5
 800f266:	1d72      	adds	r2, r6, #5
 800f268:	0092      	lsls	r2, r2, #2
 800f26a:	4620      	mov	r0, r4
 800f26c:	f000 fb60 	bl	800f930 <_calloc_r>
 800f270:	b160      	cbz	r0, 800f28c <_Balloc+0x64>
 800f272:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f276:	e00e      	b.n	800f296 <_Balloc+0x6e>
 800f278:	2221      	movs	r2, #33	; 0x21
 800f27a:	2104      	movs	r1, #4
 800f27c:	4620      	mov	r0, r4
 800f27e:	f000 fb57 	bl	800f930 <_calloc_r>
 800f282:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f284:	60f0      	str	r0, [r6, #12]
 800f286:	68db      	ldr	r3, [r3, #12]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d1e4      	bne.n	800f256 <_Balloc+0x2e>
 800f28c:	2000      	movs	r0, #0
 800f28e:	bd70      	pop	{r4, r5, r6, pc}
 800f290:	6802      	ldr	r2, [r0, #0]
 800f292:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f296:	2300      	movs	r3, #0
 800f298:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f29c:	e7f7      	b.n	800f28e <_Balloc+0x66>
 800f29e:	bf00      	nop
 800f2a0:	0801087a 	.word	0x0801087a
 800f2a4:	08010b04 	.word	0x08010b04

0800f2a8 <_Bfree>:
 800f2a8:	b570      	push	{r4, r5, r6, lr}
 800f2aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f2ac:	4605      	mov	r5, r0
 800f2ae:	460c      	mov	r4, r1
 800f2b0:	b976      	cbnz	r6, 800f2d0 <_Bfree+0x28>
 800f2b2:	2010      	movs	r0, #16
 800f2b4:	f7fd fe32 	bl	800cf1c <malloc>
 800f2b8:	4602      	mov	r2, r0
 800f2ba:	6268      	str	r0, [r5, #36]	; 0x24
 800f2bc:	b920      	cbnz	r0, 800f2c8 <_Bfree+0x20>
 800f2be:	4b09      	ldr	r3, [pc, #36]	; (800f2e4 <_Bfree+0x3c>)
 800f2c0:	4809      	ldr	r0, [pc, #36]	; (800f2e8 <_Bfree+0x40>)
 800f2c2:	218a      	movs	r1, #138	; 0x8a
 800f2c4:	f7fe feb2 	bl	800e02c <__assert_func>
 800f2c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f2cc:	6006      	str	r6, [r0, #0]
 800f2ce:	60c6      	str	r6, [r0, #12]
 800f2d0:	b13c      	cbz	r4, 800f2e2 <_Bfree+0x3a>
 800f2d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f2d4:	6862      	ldr	r2, [r4, #4]
 800f2d6:	68db      	ldr	r3, [r3, #12]
 800f2d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f2dc:	6021      	str	r1, [r4, #0]
 800f2de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f2e2:	bd70      	pop	{r4, r5, r6, pc}
 800f2e4:	0801087a 	.word	0x0801087a
 800f2e8:	08010b04 	.word	0x08010b04

0800f2ec <__multadd>:
 800f2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2f0:	690d      	ldr	r5, [r1, #16]
 800f2f2:	4607      	mov	r7, r0
 800f2f4:	460c      	mov	r4, r1
 800f2f6:	461e      	mov	r6, r3
 800f2f8:	f101 0c14 	add.w	ip, r1, #20
 800f2fc:	2000      	movs	r0, #0
 800f2fe:	f8dc 3000 	ldr.w	r3, [ip]
 800f302:	b299      	uxth	r1, r3
 800f304:	fb02 6101 	mla	r1, r2, r1, r6
 800f308:	0c1e      	lsrs	r6, r3, #16
 800f30a:	0c0b      	lsrs	r3, r1, #16
 800f30c:	fb02 3306 	mla	r3, r2, r6, r3
 800f310:	b289      	uxth	r1, r1
 800f312:	3001      	adds	r0, #1
 800f314:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f318:	4285      	cmp	r5, r0
 800f31a:	f84c 1b04 	str.w	r1, [ip], #4
 800f31e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f322:	dcec      	bgt.n	800f2fe <__multadd+0x12>
 800f324:	b30e      	cbz	r6, 800f36a <__multadd+0x7e>
 800f326:	68a3      	ldr	r3, [r4, #8]
 800f328:	42ab      	cmp	r3, r5
 800f32a:	dc19      	bgt.n	800f360 <__multadd+0x74>
 800f32c:	6861      	ldr	r1, [r4, #4]
 800f32e:	4638      	mov	r0, r7
 800f330:	3101      	adds	r1, #1
 800f332:	f7ff ff79 	bl	800f228 <_Balloc>
 800f336:	4680      	mov	r8, r0
 800f338:	b928      	cbnz	r0, 800f346 <__multadd+0x5a>
 800f33a:	4602      	mov	r2, r0
 800f33c:	4b0c      	ldr	r3, [pc, #48]	; (800f370 <__multadd+0x84>)
 800f33e:	480d      	ldr	r0, [pc, #52]	; (800f374 <__multadd+0x88>)
 800f340:	21b5      	movs	r1, #181	; 0xb5
 800f342:	f7fe fe73 	bl	800e02c <__assert_func>
 800f346:	6922      	ldr	r2, [r4, #16]
 800f348:	3202      	adds	r2, #2
 800f34a:	f104 010c 	add.w	r1, r4, #12
 800f34e:	0092      	lsls	r2, r2, #2
 800f350:	300c      	adds	r0, #12
 800f352:	f7fd fdf3 	bl	800cf3c <memcpy>
 800f356:	4621      	mov	r1, r4
 800f358:	4638      	mov	r0, r7
 800f35a:	f7ff ffa5 	bl	800f2a8 <_Bfree>
 800f35e:	4644      	mov	r4, r8
 800f360:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f364:	3501      	adds	r5, #1
 800f366:	615e      	str	r6, [r3, #20]
 800f368:	6125      	str	r5, [r4, #16]
 800f36a:	4620      	mov	r0, r4
 800f36c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f370:	08010a93 	.word	0x08010a93
 800f374:	08010b04 	.word	0x08010b04

0800f378 <__hi0bits>:
 800f378:	0c03      	lsrs	r3, r0, #16
 800f37a:	041b      	lsls	r3, r3, #16
 800f37c:	b9d3      	cbnz	r3, 800f3b4 <__hi0bits+0x3c>
 800f37e:	0400      	lsls	r0, r0, #16
 800f380:	2310      	movs	r3, #16
 800f382:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f386:	bf04      	itt	eq
 800f388:	0200      	lsleq	r0, r0, #8
 800f38a:	3308      	addeq	r3, #8
 800f38c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f390:	bf04      	itt	eq
 800f392:	0100      	lsleq	r0, r0, #4
 800f394:	3304      	addeq	r3, #4
 800f396:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f39a:	bf04      	itt	eq
 800f39c:	0080      	lsleq	r0, r0, #2
 800f39e:	3302      	addeq	r3, #2
 800f3a0:	2800      	cmp	r0, #0
 800f3a2:	db05      	blt.n	800f3b0 <__hi0bits+0x38>
 800f3a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f3a8:	f103 0301 	add.w	r3, r3, #1
 800f3ac:	bf08      	it	eq
 800f3ae:	2320      	moveq	r3, #32
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	4770      	bx	lr
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	e7e4      	b.n	800f382 <__hi0bits+0xa>

0800f3b8 <__lo0bits>:
 800f3b8:	6803      	ldr	r3, [r0, #0]
 800f3ba:	f013 0207 	ands.w	r2, r3, #7
 800f3be:	4601      	mov	r1, r0
 800f3c0:	d00b      	beq.n	800f3da <__lo0bits+0x22>
 800f3c2:	07da      	lsls	r2, r3, #31
 800f3c4:	d423      	bmi.n	800f40e <__lo0bits+0x56>
 800f3c6:	0798      	lsls	r0, r3, #30
 800f3c8:	bf49      	itett	mi
 800f3ca:	085b      	lsrmi	r3, r3, #1
 800f3cc:	089b      	lsrpl	r3, r3, #2
 800f3ce:	2001      	movmi	r0, #1
 800f3d0:	600b      	strmi	r3, [r1, #0]
 800f3d2:	bf5c      	itt	pl
 800f3d4:	600b      	strpl	r3, [r1, #0]
 800f3d6:	2002      	movpl	r0, #2
 800f3d8:	4770      	bx	lr
 800f3da:	b298      	uxth	r0, r3
 800f3dc:	b9a8      	cbnz	r0, 800f40a <__lo0bits+0x52>
 800f3de:	0c1b      	lsrs	r3, r3, #16
 800f3e0:	2010      	movs	r0, #16
 800f3e2:	b2da      	uxtb	r2, r3
 800f3e4:	b90a      	cbnz	r2, 800f3ea <__lo0bits+0x32>
 800f3e6:	3008      	adds	r0, #8
 800f3e8:	0a1b      	lsrs	r3, r3, #8
 800f3ea:	071a      	lsls	r2, r3, #28
 800f3ec:	bf04      	itt	eq
 800f3ee:	091b      	lsreq	r3, r3, #4
 800f3f0:	3004      	addeq	r0, #4
 800f3f2:	079a      	lsls	r2, r3, #30
 800f3f4:	bf04      	itt	eq
 800f3f6:	089b      	lsreq	r3, r3, #2
 800f3f8:	3002      	addeq	r0, #2
 800f3fa:	07da      	lsls	r2, r3, #31
 800f3fc:	d403      	bmi.n	800f406 <__lo0bits+0x4e>
 800f3fe:	085b      	lsrs	r3, r3, #1
 800f400:	f100 0001 	add.w	r0, r0, #1
 800f404:	d005      	beq.n	800f412 <__lo0bits+0x5a>
 800f406:	600b      	str	r3, [r1, #0]
 800f408:	4770      	bx	lr
 800f40a:	4610      	mov	r0, r2
 800f40c:	e7e9      	b.n	800f3e2 <__lo0bits+0x2a>
 800f40e:	2000      	movs	r0, #0
 800f410:	4770      	bx	lr
 800f412:	2020      	movs	r0, #32
 800f414:	4770      	bx	lr
	...

0800f418 <__i2b>:
 800f418:	b510      	push	{r4, lr}
 800f41a:	460c      	mov	r4, r1
 800f41c:	2101      	movs	r1, #1
 800f41e:	f7ff ff03 	bl	800f228 <_Balloc>
 800f422:	4602      	mov	r2, r0
 800f424:	b928      	cbnz	r0, 800f432 <__i2b+0x1a>
 800f426:	4b05      	ldr	r3, [pc, #20]	; (800f43c <__i2b+0x24>)
 800f428:	4805      	ldr	r0, [pc, #20]	; (800f440 <__i2b+0x28>)
 800f42a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f42e:	f7fe fdfd 	bl	800e02c <__assert_func>
 800f432:	2301      	movs	r3, #1
 800f434:	6144      	str	r4, [r0, #20]
 800f436:	6103      	str	r3, [r0, #16]
 800f438:	bd10      	pop	{r4, pc}
 800f43a:	bf00      	nop
 800f43c:	08010a93 	.word	0x08010a93
 800f440:	08010b04 	.word	0x08010b04

0800f444 <__multiply>:
 800f444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f448:	4691      	mov	r9, r2
 800f44a:	690a      	ldr	r2, [r1, #16]
 800f44c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f450:	429a      	cmp	r2, r3
 800f452:	bfb8      	it	lt
 800f454:	460b      	movlt	r3, r1
 800f456:	460c      	mov	r4, r1
 800f458:	bfbc      	itt	lt
 800f45a:	464c      	movlt	r4, r9
 800f45c:	4699      	movlt	r9, r3
 800f45e:	6927      	ldr	r7, [r4, #16]
 800f460:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f464:	68a3      	ldr	r3, [r4, #8]
 800f466:	6861      	ldr	r1, [r4, #4]
 800f468:	eb07 060a 	add.w	r6, r7, sl
 800f46c:	42b3      	cmp	r3, r6
 800f46e:	b085      	sub	sp, #20
 800f470:	bfb8      	it	lt
 800f472:	3101      	addlt	r1, #1
 800f474:	f7ff fed8 	bl	800f228 <_Balloc>
 800f478:	b930      	cbnz	r0, 800f488 <__multiply+0x44>
 800f47a:	4602      	mov	r2, r0
 800f47c:	4b44      	ldr	r3, [pc, #272]	; (800f590 <__multiply+0x14c>)
 800f47e:	4845      	ldr	r0, [pc, #276]	; (800f594 <__multiply+0x150>)
 800f480:	f240 115d 	movw	r1, #349	; 0x15d
 800f484:	f7fe fdd2 	bl	800e02c <__assert_func>
 800f488:	f100 0514 	add.w	r5, r0, #20
 800f48c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f490:	462b      	mov	r3, r5
 800f492:	2200      	movs	r2, #0
 800f494:	4543      	cmp	r3, r8
 800f496:	d321      	bcc.n	800f4dc <__multiply+0x98>
 800f498:	f104 0314 	add.w	r3, r4, #20
 800f49c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f4a0:	f109 0314 	add.w	r3, r9, #20
 800f4a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f4a8:	9202      	str	r2, [sp, #8]
 800f4aa:	1b3a      	subs	r2, r7, r4
 800f4ac:	3a15      	subs	r2, #21
 800f4ae:	f022 0203 	bic.w	r2, r2, #3
 800f4b2:	3204      	adds	r2, #4
 800f4b4:	f104 0115 	add.w	r1, r4, #21
 800f4b8:	428f      	cmp	r7, r1
 800f4ba:	bf38      	it	cc
 800f4bc:	2204      	movcc	r2, #4
 800f4be:	9201      	str	r2, [sp, #4]
 800f4c0:	9a02      	ldr	r2, [sp, #8]
 800f4c2:	9303      	str	r3, [sp, #12]
 800f4c4:	429a      	cmp	r2, r3
 800f4c6:	d80c      	bhi.n	800f4e2 <__multiply+0x9e>
 800f4c8:	2e00      	cmp	r6, #0
 800f4ca:	dd03      	ble.n	800f4d4 <__multiply+0x90>
 800f4cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d05a      	beq.n	800f58a <__multiply+0x146>
 800f4d4:	6106      	str	r6, [r0, #16]
 800f4d6:	b005      	add	sp, #20
 800f4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4dc:	f843 2b04 	str.w	r2, [r3], #4
 800f4e0:	e7d8      	b.n	800f494 <__multiply+0x50>
 800f4e2:	f8b3 a000 	ldrh.w	sl, [r3]
 800f4e6:	f1ba 0f00 	cmp.w	sl, #0
 800f4ea:	d024      	beq.n	800f536 <__multiply+0xf2>
 800f4ec:	f104 0e14 	add.w	lr, r4, #20
 800f4f0:	46a9      	mov	r9, r5
 800f4f2:	f04f 0c00 	mov.w	ip, #0
 800f4f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f4fa:	f8d9 1000 	ldr.w	r1, [r9]
 800f4fe:	fa1f fb82 	uxth.w	fp, r2
 800f502:	b289      	uxth	r1, r1
 800f504:	fb0a 110b 	mla	r1, sl, fp, r1
 800f508:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f50c:	f8d9 2000 	ldr.w	r2, [r9]
 800f510:	4461      	add	r1, ip
 800f512:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f516:	fb0a c20b 	mla	r2, sl, fp, ip
 800f51a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f51e:	b289      	uxth	r1, r1
 800f520:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f524:	4577      	cmp	r7, lr
 800f526:	f849 1b04 	str.w	r1, [r9], #4
 800f52a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f52e:	d8e2      	bhi.n	800f4f6 <__multiply+0xb2>
 800f530:	9a01      	ldr	r2, [sp, #4]
 800f532:	f845 c002 	str.w	ip, [r5, r2]
 800f536:	9a03      	ldr	r2, [sp, #12]
 800f538:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f53c:	3304      	adds	r3, #4
 800f53e:	f1b9 0f00 	cmp.w	r9, #0
 800f542:	d020      	beq.n	800f586 <__multiply+0x142>
 800f544:	6829      	ldr	r1, [r5, #0]
 800f546:	f104 0c14 	add.w	ip, r4, #20
 800f54a:	46ae      	mov	lr, r5
 800f54c:	f04f 0a00 	mov.w	sl, #0
 800f550:	f8bc b000 	ldrh.w	fp, [ip]
 800f554:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f558:	fb09 220b 	mla	r2, r9, fp, r2
 800f55c:	4492      	add	sl, r2
 800f55e:	b289      	uxth	r1, r1
 800f560:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f564:	f84e 1b04 	str.w	r1, [lr], #4
 800f568:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f56c:	f8be 1000 	ldrh.w	r1, [lr]
 800f570:	0c12      	lsrs	r2, r2, #16
 800f572:	fb09 1102 	mla	r1, r9, r2, r1
 800f576:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f57a:	4567      	cmp	r7, ip
 800f57c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f580:	d8e6      	bhi.n	800f550 <__multiply+0x10c>
 800f582:	9a01      	ldr	r2, [sp, #4]
 800f584:	50a9      	str	r1, [r5, r2]
 800f586:	3504      	adds	r5, #4
 800f588:	e79a      	b.n	800f4c0 <__multiply+0x7c>
 800f58a:	3e01      	subs	r6, #1
 800f58c:	e79c      	b.n	800f4c8 <__multiply+0x84>
 800f58e:	bf00      	nop
 800f590:	08010a93 	.word	0x08010a93
 800f594:	08010b04 	.word	0x08010b04

0800f598 <__pow5mult>:
 800f598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f59c:	4615      	mov	r5, r2
 800f59e:	f012 0203 	ands.w	r2, r2, #3
 800f5a2:	4606      	mov	r6, r0
 800f5a4:	460f      	mov	r7, r1
 800f5a6:	d007      	beq.n	800f5b8 <__pow5mult+0x20>
 800f5a8:	4c25      	ldr	r4, [pc, #148]	; (800f640 <__pow5mult+0xa8>)
 800f5aa:	3a01      	subs	r2, #1
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f5b2:	f7ff fe9b 	bl	800f2ec <__multadd>
 800f5b6:	4607      	mov	r7, r0
 800f5b8:	10ad      	asrs	r5, r5, #2
 800f5ba:	d03d      	beq.n	800f638 <__pow5mult+0xa0>
 800f5bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f5be:	b97c      	cbnz	r4, 800f5e0 <__pow5mult+0x48>
 800f5c0:	2010      	movs	r0, #16
 800f5c2:	f7fd fcab 	bl	800cf1c <malloc>
 800f5c6:	4602      	mov	r2, r0
 800f5c8:	6270      	str	r0, [r6, #36]	; 0x24
 800f5ca:	b928      	cbnz	r0, 800f5d8 <__pow5mult+0x40>
 800f5cc:	4b1d      	ldr	r3, [pc, #116]	; (800f644 <__pow5mult+0xac>)
 800f5ce:	481e      	ldr	r0, [pc, #120]	; (800f648 <__pow5mult+0xb0>)
 800f5d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f5d4:	f7fe fd2a 	bl	800e02c <__assert_func>
 800f5d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f5dc:	6004      	str	r4, [r0, #0]
 800f5de:	60c4      	str	r4, [r0, #12]
 800f5e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f5e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f5e8:	b94c      	cbnz	r4, 800f5fe <__pow5mult+0x66>
 800f5ea:	f240 2171 	movw	r1, #625	; 0x271
 800f5ee:	4630      	mov	r0, r6
 800f5f0:	f7ff ff12 	bl	800f418 <__i2b>
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800f5fa:	4604      	mov	r4, r0
 800f5fc:	6003      	str	r3, [r0, #0]
 800f5fe:	f04f 0900 	mov.w	r9, #0
 800f602:	07eb      	lsls	r3, r5, #31
 800f604:	d50a      	bpl.n	800f61c <__pow5mult+0x84>
 800f606:	4639      	mov	r1, r7
 800f608:	4622      	mov	r2, r4
 800f60a:	4630      	mov	r0, r6
 800f60c:	f7ff ff1a 	bl	800f444 <__multiply>
 800f610:	4639      	mov	r1, r7
 800f612:	4680      	mov	r8, r0
 800f614:	4630      	mov	r0, r6
 800f616:	f7ff fe47 	bl	800f2a8 <_Bfree>
 800f61a:	4647      	mov	r7, r8
 800f61c:	106d      	asrs	r5, r5, #1
 800f61e:	d00b      	beq.n	800f638 <__pow5mult+0xa0>
 800f620:	6820      	ldr	r0, [r4, #0]
 800f622:	b938      	cbnz	r0, 800f634 <__pow5mult+0x9c>
 800f624:	4622      	mov	r2, r4
 800f626:	4621      	mov	r1, r4
 800f628:	4630      	mov	r0, r6
 800f62a:	f7ff ff0b 	bl	800f444 <__multiply>
 800f62e:	6020      	str	r0, [r4, #0]
 800f630:	f8c0 9000 	str.w	r9, [r0]
 800f634:	4604      	mov	r4, r0
 800f636:	e7e4      	b.n	800f602 <__pow5mult+0x6a>
 800f638:	4638      	mov	r0, r7
 800f63a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f63e:	bf00      	nop
 800f640:	08010c50 	.word	0x08010c50
 800f644:	0801087a 	.word	0x0801087a
 800f648:	08010b04 	.word	0x08010b04

0800f64c <__lshift>:
 800f64c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f650:	460c      	mov	r4, r1
 800f652:	6849      	ldr	r1, [r1, #4]
 800f654:	6923      	ldr	r3, [r4, #16]
 800f656:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f65a:	68a3      	ldr	r3, [r4, #8]
 800f65c:	4607      	mov	r7, r0
 800f65e:	4691      	mov	r9, r2
 800f660:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f664:	f108 0601 	add.w	r6, r8, #1
 800f668:	42b3      	cmp	r3, r6
 800f66a:	db0b      	blt.n	800f684 <__lshift+0x38>
 800f66c:	4638      	mov	r0, r7
 800f66e:	f7ff fddb 	bl	800f228 <_Balloc>
 800f672:	4605      	mov	r5, r0
 800f674:	b948      	cbnz	r0, 800f68a <__lshift+0x3e>
 800f676:	4602      	mov	r2, r0
 800f678:	4b2a      	ldr	r3, [pc, #168]	; (800f724 <__lshift+0xd8>)
 800f67a:	482b      	ldr	r0, [pc, #172]	; (800f728 <__lshift+0xdc>)
 800f67c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f680:	f7fe fcd4 	bl	800e02c <__assert_func>
 800f684:	3101      	adds	r1, #1
 800f686:	005b      	lsls	r3, r3, #1
 800f688:	e7ee      	b.n	800f668 <__lshift+0x1c>
 800f68a:	2300      	movs	r3, #0
 800f68c:	f100 0114 	add.w	r1, r0, #20
 800f690:	f100 0210 	add.w	r2, r0, #16
 800f694:	4618      	mov	r0, r3
 800f696:	4553      	cmp	r3, sl
 800f698:	db37      	blt.n	800f70a <__lshift+0xbe>
 800f69a:	6920      	ldr	r0, [r4, #16]
 800f69c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f6a0:	f104 0314 	add.w	r3, r4, #20
 800f6a4:	f019 091f 	ands.w	r9, r9, #31
 800f6a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f6ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f6b0:	d02f      	beq.n	800f712 <__lshift+0xc6>
 800f6b2:	f1c9 0e20 	rsb	lr, r9, #32
 800f6b6:	468a      	mov	sl, r1
 800f6b8:	f04f 0c00 	mov.w	ip, #0
 800f6bc:	681a      	ldr	r2, [r3, #0]
 800f6be:	fa02 f209 	lsl.w	r2, r2, r9
 800f6c2:	ea42 020c 	orr.w	r2, r2, ip
 800f6c6:	f84a 2b04 	str.w	r2, [sl], #4
 800f6ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6ce:	4298      	cmp	r0, r3
 800f6d0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f6d4:	d8f2      	bhi.n	800f6bc <__lshift+0x70>
 800f6d6:	1b03      	subs	r3, r0, r4
 800f6d8:	3b15      	subs	r3, #21
 800f6da:	f023 0303 	bic.w	r3, r3, #3
 800f6de:	3304      	adds	r3, #4
 800f6e0:	f104 0215 	add.w	r2, r4, #21
 800f6e4:	4290      	cmp	r0, r2
 800f6e6:	bf38      	it	cc
 800f6e8:	2304      	movcc	r3, #4
 800f6ea:	f841 c003 	str.w	ip, [r1, r3]
 800f6ee:	f1bc 0f00 	cmp.w	ip, #0
 800f6f2:	d001      	beq.n	800f6f8 <__lshift+0xac>
 800f6f4:	f108 0602 	add.w	r6, r8, #2
 800f6f8:	3e01      	subs	r6, #1
 800f6fa:	4638      	mov	r0, r7
 800f6fc:	612e      	str	r6, [r5, #16]
 800f6fe:	4621      	mov	r1, r4
 800f700:	f7ff fdd2 	bl	800f2a8 <_Bfree>
 800f704:	4628      	mov	r0, r5
 800f706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f70a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f70e:	3301      	adds	r3, #1
 800f710:	e7c1      	b.n	800f696 <__lshift+0x4a>
 800f712:	3904      	subs	r1, #4
 800f714:	f853 2b04 	ldr.w	r2, [r3], #4
 800f718:	f841 2f04 	str.w	r2, [r1, #4]!
 800f71c:	4298      	cmp	r0, r3
 800f71e:	d8f9      	bhi.n	800f714 <__lshift+0xc8>
 800f720:	e7ea      	b.n	800f6f8 <__lshift+0xac>
 800f722:	bf00      	nop
 800f724:	08010a93 	.word	0x08010a93
 800f728:	08010b04 	.word	0x08010b04

0800f72c <__mcmp>:
 800f72c:	b530      	push	{r4, r5, lr}
 800f72e:	6902      	ldr	r2, [r0, #16]
 800f730:	690c      	ldr	r4, [r1, #16]
 800f732:	1b12      	subs	r2, r2, r4
 800f734:	d10e      	bne.n	800f754 <__mcmp+0x28>
 800f736:	f100 0314 	add.w	r3, r0, #20
 800f73a:	3114      	adds	r1, #20
 800f73c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f740:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f744:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f748:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f74c:	42a5      	cmp	r5, r4
 800f74e:	d003      	beq.n	800f758 <__mcmp+0x2c>
 800f750:	d305      	bcc.n	800f75e <__mcmp+0x32>
 800f752:	2201      	movs	r2, #1
 800f754:	4610      	mov	r0, r2
 800f756:	bd30      	pop	{r4, r5, pc}
 800f758:	4283      	cmp	r3, r0
 800f75a:	d3f3      	bcc.n	800f744 <__mcmp+0x18>
 800f75c:	e7fa      	b.n	800f754 <__mcmp+0x28>
 800f75e:	f04f 32ff 	mov.w	r2, #4294967295
 800f762:	e7f7      	b.n	800f754 <__mcmp+0x28>

0800f764 <__mdiff>:
 800f764:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f768:	460c      	mov	r4, r1
 800f76a:	4606      	mov	r6, r0
 800f76c:	4611      	mov	r1, r2
 800f76e:	4620      	mov	r0, r4
 800f770:	4690      	mov	r8, r2
 800f772:	f7ff ffdb 	bl	800f72c <__mcmp>
 800f776:	1e05      	subs	r5, r0, #0
 800f778:	d110      	bne.n	800f79c <__mdiff+0x38>
 800f77a:	4629      	mov	r1, r5
 800f77c:	4630      	mov	r0, r6
 800f77e:	f7ff fd53 	bl	800f228 <_Balloc>
 800f782:	b930      	cbnz	r0, 800f792 <__mdiff+0x2e>
 800f784:	4b3a      	ldr	r3, [pc, #232]	; (800f870 <__mdiff+0x10c>)
 800f786:	4602      	mov	r2, r0
 800f788:	f240 2132 	movw	r1, #562	; 0x232
 800f78c:	4839      	ldr	r0, [pc, #228]	; (800f874 <__mdiff+0x110>)
 800f78e:	f7fe fc4d 	bl	800e02c <__assert_func>
 800f792:	2301      	movs	r3, #1
 800f794:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f798:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f79c:	bfa4      	itt	ge
 800f79e:	4643      	movge	r3, r8
 800f7a0:	46a0      	movge	r8, r4
 800f7a2:	4630      	mov	r0, r6
 800f7a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f7a8:	bfa6      	itte	ge
 800f7aa:	461c      	movge	r4, r3
 800f7ac:	2500      	movge	r5, #0
 800f7ae:	2501      	movlt	r5, #1
 800f7b0:	f7ff fd3a 	bl	800f228 <_Balloc>
 800f7b4:	b920      	cbnz	r0, 800f7c0 <__mdiff+0x5c>
 800f7b6:	4b2e      	ldr	r3, [pc, #184]	; (800f870 <__mdiff+0x10c>)
 800f7b8:	4602      	mov	r2, r0
 800f7ba:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f7be:	e7e5      	b.n	800f78c <__mdiff+0x28>
 800f7c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f7c4:	6926      	ldr	r6, [r4, #16]
 800f7c6:	60c5      	str	r5, [r0, #12]
 800f7c8:	f104 0914 	add.w	r9, r4, #20
 800f7cc:	f108 0514 	add.w	r5, r8, #20
 800f7d0:	f100 0e14 	add.w	lr, r0, #20
 800f7d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f7d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f7dc:	f108 0210 	add.w	r2, r8, #16
 800f7e0:	46f2      	mov	sl, lr
 800f7e2:	2100      	movs	r1, #0
 800f7e4:	f859 3b04 	ldr.w	r3, [r9], #4
 800f7e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f7ec:	fa1f f883 	uxth.w	r8, r3
 800f7f0:	fa11 f18b 	uxtah	r1, r1, fp
 800f7f4:	0c1b      	lsrs	r3, r3, #16
 800f7f6:	eba1 0808 	sub.w	r8, r1, r8
 800f7fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f7fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f802:	fa1f f888 	uxth.w	r8, r8
 800f806:	1419      	asrs	r1, r3, #16
 800f808:	454e      	cmp	r6, r9
 800f80a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f80e:	f84a 3b04 	str.w	r3, [sl], #4
 800f812:	d8e7      	bhi.n	800f7e4 <__mdiff+0x80>
 800f814:	1b33      	subs	r3, r6, r4
 800f816:	3b15      	subs	r3, #21
 800f818:	f023 0303 	bic.w	r3, r3, #3
 800f81c:	3304      	adds	r3, #4
 800f81e:	3415      	adds	r4, #21
 800f820:	42a6      	cmp	r6, r4
 800f822:	bf38      	it	cc
 800f824:	2304      	movcc	r3, #4
 800f826:	441d      	add	r5, r3
 800f828:	4473      	add	r3, lr
 800f82a:	469e      	mov	lr, r3
 800f82c:	462e      	mov	r6, r5
 800f82e:	4566      	cmp	r6, ip
 800f830:	d30e      	bcc.n	800f850 <__mdiff+0xec>
 800f832:	f10c 0203 	add.w	r2, ip, #3
 800f836:	1b52      	subs	r2, r2, r5
 800f838:	f022 0203 	bic.w	r2, r2, #3
 800f83c:	3d03      	subs	r5, #3
 800f83e:	45ac      	cmp	ip, r5
 800f840:	bf38      	it	cc
 800f842:	2200      	movcc	r2, #0
 800f844:	441a      	add	r2, r3
 800f846:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f84a:	b17b      	cbz	r3, 800f86c <__mdiff+0x108>
 800f84c:	6107      	str	r7, [r0, #16]
 800f84e:	e7a3      	b.n	800f798 <__mdiff+0x34>
 800f850:	f856 8b04 	ldr.w	r8, [r6], #4
 800f854:	fa11 f288 	uxtah	r2, r1, r8
 800f858:	1414      	asrs	r4, r2, #16
 800f85a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f85e:	b292      	uxth	r2, r2
 800f860:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f864:	f84e 2b04 	str.w	r2, [lr], #4
 800f868:	1421      	asrs	r1, r4, #16
 800f86a:	e7e0      	b.n	800f82e <__mdiff+0xca>
 800f86c:	3f01      	subs	r7, #1
 800f86e:	e7ea      	b.n	800f846 <__mdiff+0xe2>
 800f870:	08010a93 	.word	0x08010a93
 800f874:	08010b04 	.word	0x08010b04

0800f878 <__d2b>:
 800f878:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f87c:	4689      	mov	r9, r1
 800f87e:	2101      	movs	r1, #1
 800f880:	ec57 6b10 	vmov	r6, r7, d0
 800f884:	4690      	mov	r8, r2
 800f886:	f7ff fccf 	bl	800f228 <_Balloc>
 800f88a:	4604      	mov	r4, r0
 800f88c:	b930      	cbnz	r0, 800f89c <__d2b+0x24>
 800f88e:	4602      	mov	r2, r0
 800f890:	4b25      	ldr	r3, [pc, #148]	; (800f928 <__d2b+0xb0>)
 800f892:	4826      	ldr	r0, [pc, #152]	; (800f92c <__d2b+0xb4>)
 800f894:	f240 310a 	movw	r1, #778	; 0x30a
 800f898:	f7fe fbc8 	bl	800e02c <__assert_func>
 800f89c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f8a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f8a4:	bb35      	cbnz	r5, 800f8f4 <__d2b+0x7c>
 800f8a6:	2e00      	cmp	r6, #0
 800f8a8:	9301      	str	r3, [sp, #4]
 800f8aa:	d028      	beq.n	800f8fe <__d2b+0x86>
 800f8ac:	4668      	mov	r0, sp
 800f8ae:	9600      	str	r6, [sp, #0]
 800f8b0:	f7ff fd82 	bl	800f3b8 <__lo0bits>
 800f8b4:	9900      	ldr	r1, [sp, #0]
 800f8b6:	b300      	cbz	r0, 800f8fa <__d2b+0x82>
 800f8b8:	9a01      	ldr	r2, [sp, #4]
 800f8ba:	f1c0 0320 	rsb	r3, r0, #32
 800f8be:	fa02 f303 	lsl.w	r3, r2, r3
 800f8c2:	430b      	orrs	r3, r1
 800f8c4:	40c2      	lsrs	r2, r0
 800f8c6:	6163      	str	r3, [r4, #20]
 800f8c8:	9201      	str	r2, [sp, #4]
 800f8ca:	9b01      	ldr	r3, [sp, #4]
 800f8cc:	61a3      	str	r3, [r4, #24]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	bf14      	ite	ne
 800f8d2:	2202      	movne	r2, #2
 800f8d4:	2201      	moveq	r2, #1
 800f8d6:	6122      	str	r2, [r4, #16]
 800f8d8:	b1d5      	cbz	r5, 800f910 <__d2b+0x98>
 800f8da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f8de:	4405      	add	r5, r0
 800f8e0:	f8c9 5000 	str.w	r5, [r9]
 800f8e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f8e8:	f8c8 0000 	str.w	r0, [r8]
 800f8ec:	4620      	mov	r0, r4
 800f8ee:	b003      	add	sp, #12
 800f8f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f8f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f8f8:	e7d5      	b.n	800f8a6 <__d2b+0x2e>
 800f8fa:	6161      	str	r1, [r4, #20]
 800f8fc:	e7e5      	b.n	800f8ca <__d2b+0x52>
 800f8fe:	a801      	add	r0, sp, #4
 800f900:	f7ff fd5a 	bl	800f3b8 <__lo0bits>
 800f904:	9b01      	ldr	r3, [sp, #4]
 800f906:	6163      	str	r3, [r4, #20]
 800f908:	2201      	movs	r2, #1
 800f90a:	6122      	str	r2, [r4, #16]
 800f90c:	3020      	adds	r0, #32
 800f90e:	e7e3      	b.n	800f8d8 <__d2b+0x60>
 800f910:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f914:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f918:	f8c9 0000 	str.w	r0, [r9]
 800f91c:	6918      	ldr	r0, [r3, #16]
 800f91e:	f7ff fd2b 	bl	800f378 <__hi0bits>
 800f922:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f926:	e7df      	b.n	800f8e8 <__d2b+0x70>
 800f928:	08010a93 	.word	0x08010a93
 800f92c:	08010b04 	.word	0x08010b04

0800f930 <_calloc_r>:
 800f930:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f932:	fba1 2402 	umull	r2, r4, r1, r2
 800f936:	b94c      	cbnz	r4, 800f94c <_calloc_r+0x1c>
 800f938:	4611      	mov	r1, r2
 800f93a:	9201      	str	r2, [sp, #4]
 800f93c:	f7fd fb80 	bl	800d040 <_malloc_r>
 800f940:	9a01      	ldr	r2, [sp, #4]
 800f942:	4605      	mov	r5, r0
 800f944:	b930      	cbnz	r0, 800f954 <_calloc_r+0x24>
 800f946:	4628      	mov	r0, r5
 800f948:	b003      	add	sp, #12
 800f94a:	bd30      	pop	{r4, r5, pc}
 800f94c:	220c      	movs	r2, #12
 800f94e:	6002      	str	r2, [r0, #0]
 800f950:	2500      	movs	r5, #0
 800f952:	e7f8      	b.n	800f946 <_calloc_r+0x16>
 800f954:	4621      	mov	r1, r4
 800f956:	f7fd faff 	bl	800cf58 <memset>
 800f95a:	e7f4      	b.n	800f946 <_calloc_r+0x16>

0800f95c <_sungetc_r>:
 800f95c:	b538      	push	{r3, r4, r5, lr}
 800f95e:	1c4b      	adds	r3, r1, #1
 800f960:	4614      	mov	r4, r2
 800f962:	d103      	bne.n	800f96c <_sungetc_r+0x10>
 800f964:	f04f 35ff 	mov.w	r5, #4294967295
 800f968:	4628      	mov	r0, r5
 800f96a:	bd38      	pop	{r3, r4, r5, pc}
 800f96c:	8993      	ldrh	r3, [r2, #12]
 800f96e:	f023 0320 	bic.w	r3, r3, #32
 800f972:	8193      	strh	r3, [r2, #12]
 800f974:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f976:	6852      	ldr	r2, [r2, #4]
 800f978:	b2cd      	uxtb	r5, r1
 800f97a:	b18b      	cbz	r3, 800f9a0 <_sungetc_r+0x44>
 800f97c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f97e:	4293      	cmp	r3, r2
 800f980:	dd08      	ble.n	800f994 <_sungetc_r+0x38>
 800f982:	6823      	ldr	r3, [r4, #0]
 800f984:	1e5a      	subs	r2, r3, #1
 800f986:	6022      	str	r2, [r4, #0]
 800f988:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f98c:	6863      	ldr	r3, [r4, #4]
 800f98e:	3301      	adds	r3, #1
 800f990:	6063      	str	r3, [r4, #4]
 800f992:	e7e9      	b.n	800f968 <_sungetc_r+0xc>
 800f994:	4621      	mov	r1, r4
 800f996:	f000 fd1d 	bl	80103d4 <__submore>
 800f99a:	2800      	cmp	r0, #0
 800f99c:	d0f1      	beq.n	800f982 <_sungetc_r+0x26>
 800f99e:	e7e1      	b.n	800f964 <_sungetc_r+0x8>
 800f9a0:	6921      	ldr	r1, [r4, #16]
 800f9a2:	6823      	ldr	r3, [r4, #0]
 800f9a4:	b151      	cbz	r1, 800f9bc <_sungetc_r+0x60>
 800f9a6:	4299      	cmp	r1, r3
 800f9a8:	d208      	bcs.n	800f9bc <_sungetc_r+0x60>
 800f9aa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800f9ae:	42a9      	cmp	r1, r5
 800f9b0:	d104      	bne.n	800f9bc <_sungetc_r+0x60>
 800f9b2:	3b01      	subs	r3, #1
 800f9b4:	3201      	adds	r2, #1
 800f9b6:	6023      	str	r3, [r4, #0]
 800f9b8:	6062      	str	r2, [r4, #4]
 800f9ba:	e7d5      	b.n	800f968 <_sungetc_r+0xc>
 800f9bc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800f9c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f9c4:	6363      	str	r3, [r4, #52]	; 0x34
 800f9c6:	2303      	movs	r3, #3
 800f9c8:	63a3      	str	r3, [r4, #56]	; 0x38
 800f9ca:	4623      	mov	r3, r4
 800f9cc:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f9d0:	6023      	str	r3, [r4, #0]
 800f9d2:	2301      	movs	r3, #1
 800f9d4:	e7dc      	b.n	800f990 <_sungetc_r+0x34>

0800f9d6 <__ssrefill_r>:
 800f9d6:	b510      	push	{r4, lr}
 800f9d8:	460c      	mov	r4, r1
 800f9da:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f9dc:	b169      	cbz	r1, 800f9fa <__ssrefill_r+0x24>
 800f9de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f9e2:	4299      	cmp	r1, r3
 800f9e4:	d001      	beq.n	800f9ea <__ssrefill_r+0x14>
 800f9e6:	f7fd fabf 	bl	800cf68 <_free_r>
 800f9ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f9ec:	6063      	str	r3, [r4, #4]
 800f9ee:	2000      	movs	r0, #0
 800f9f0:	6360      	str	r0, [r4, #52]	; 0x34
 800f9f2:	b113      	cbz	r3, 800f9fa <__ssrefill_r+0x24>
 800f9f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f9f6:	6023      	str	r3, [r4, #0]
 800f9f8:	bd10      	pop	{r4, pc}
 800f9fa:	6923      	ldr	r3, [r4, #16]
 800f9fc:	6023      	str	r3, [r4, #0]
 800f9fe:	2300      	movs	r3, #0
 800fa00:	6063      	str	r3, [r4, #4]
 800fa02:	89a3      	ldrh	r3, [r4, #12]
 800fa04:	f043 0320 	orr.w	r3, r3, #32
 800fa08:	81a3      	strh	r3, [r4, #12]
 800fa0a:	f04f 30ff 	mov.w	r0, #4294967295
 800fa0e:	e7f3      	b.n	800f9f8 <__ssrefill_r+0x22>

0800fa10 <__ssvfiscanf_r>:
 800fa10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa14:	460c      	mov	r4, r1
 800fa16:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800fa1a:	2100      	movs	r1, #0
 800fa1c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800fa20:	49a6      	ldr	r1, [pc, #664]	; (800fcbc <__ssvfiscanf_r+0x2ac>)
 800fa22:	91a0      	str	r1, [sp, #640]	; 0x280
 800fa24:	f10d 0804 	add.w	r8, sp, #4
 800fa28:	49a5      	ldr	r1, [pc, #660]	; (800fcc0 <__ssvfiscanf_r+0x2b0>)
 800fa2a:	4fa6      	ldr	r7, [pc, #664]	; (800fcc4 <__ssvfiscanf_r+0x2b4>)
 800fa2c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800fcc8 <__ssvfiscanf_r+0x2b8>
 800fa30:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800fa34:	4606      	mov	r6, r0
 800fa36:	91a1      	str	r1, [sp, #644]	; 0x284
 800fa38:	9300      	str	r3, [sp, #0]
 800fa3a:	7813      	ldrb	r3, [r2, #0]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	f000 815a 	beq.w	800fcf6 <__ssvfiscanf_r+0x2e6>
 800fa42:	5dd9      	ldrb	r1, [r3, r7]
 800fa44:	f011 0108 	ands.w	r1, r1, #8
 800fa48:	f102 0501 	add.w	r5, r2, #1
 800fa4c:	d019      	beq.n	800fa82 <__ssvfiscanf_r+0x72>
 800fa4e:	6863      	ldr	r3, [r4, #4]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	dd0f      	ble.n	800fa74 <__ssvfiscanf_r+0x64>
 800fa54:	6823      	ldr	r3, [r4, #0]
 800fa56:	781a      	ldrb	r2, [r3, #0]
 800fa58:	5cba      	ldrb	r2, [r7, r2]
 800fa5a:	0712      	lsls	r2, r2, #28
 800fa5c:	d401      	bmi.n	800fa62 <__ssvfiscanf_r+0x52>
 800fa5e:	462a      	mov	r2, r5
 800fa60:	e7eb      	b.n	800fa3a <__ssvfiscanf_r+0x2a>
 800fa62:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800fa64:	3201      	adds	r2, #1
 800fa66:	9245      	str	r2, [sp, #276]	; 0x114
 800fa68:	6862      	ldr	r2, [r4, #4]
 800fa6a:	3301      	adds	r3, #1
 800fa6c:	3a01      	subs	r2, #1
 800fa6e:	6062      	str	r2, [r4, #4]
 800fa70:	6023      	str	r3, [r4, #0]
 800fa72:	e7ec      	b.n	800fa4e <__ssvfiscanf_r+0x3e>
 800fa74:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fa76:	4621      	mov	r1, r4
 800fa78:	4630      	mov	r0, r6
 800fa7a:	4798      	blx	r3
 800fa7c:	2800      	cmp	r0, #0
 800fa7e:	d0e9      	beq.n	800fa54 <__ssvfiscanf_r+0x44>
 800fa80:	e7ed      	b.n	800fa5e <__ssvfiscanf_r+0x4e>
 800fa82:	2b25      	cmp	r3, #37	; 0x25
 800fa84:	d012      	beq.n	800faac <__ssvfiscanf_r+0x9c>
 800fa86:	469a      	mov	sl, r3
 800fa88:	6863      	ldr	r3, [r4, #4]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	f340 8091 	ble.w	800fbb2 <__ssvfiscanf_r+0x1a2>
 800fa90:	6822      	ldr	r2, [r4, #0]
 800fa92:	7813      	ldrb	r3, [r2, #0]
 800fa94:	4553      	cmp	r3, sl
 800fa96:	f040 812e 	bne.w	800fcf6 <__ssvfiscanf_r+0x2e6>
 800fa9a:	6863      	ldr	r3, [r4, #4]
 800fa9c:	3b01      	subs	r3, #1
 800fa9e:	6063      	str	r3, [r4, #4]
 800faa0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800faa2:	3201      	adds	r2, #1
 800faa4:	3301      	adds	r3, #1
 800faa6:	6022      	str	r2, [r4, #0]
 800faa8:	9345      	str	r3, [sp, #276]	; 0x114
 800faaa:	e7d8      	b.n	800fa5e <__ssvfiscanf_r+0x4e>
 800faac:	9141      	str	r1, [sp, #260]	; 0x104
 800faae:	9143      	str	r1, [sp, #268]	; 0x10c
 800fab0:	7853      	ldrb	r3, [r2, #1]
 800fab2:	2b2a      	cmp	r3, #42	; 0x2a
 800fab4:	bf02      	ittt	eq
 800fab6:	2310      	moveq	r3, #16
 800fab8:	1c95      	addeq	r5, r2, #2
 800faba:	9341      	streq	r3, [sp, #260]	; 0x104
 800fabc:	220a      	movs	r2, #10
 800fabe:	46aa      	mov	sl, r5
 800fac0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800fac4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800fac8:	2b09      	cmp	r3, #9
 800faca:	d91d      	bls.n	800fb08 <__ssvfiscanf_r+0xf8>
 800facc:	487e      	ldr	r0, [pc, #504]	; (800fcc8 <__ssvfiscanf_r+0x2b8>)
 800face:	2203      	movs	r2, #3
 800fad0:	f7f0 fb96 	bl	8000200 <memchr>
 800fad4:	b140      	cbz	r0, 800fae8 <__ssvfiscanf_r+0xd8>
 800fad6:	2301      	movs	r3, #1
 800fad8:	eba0 0009 	sub.w	r0, r0, r9
 800fadc:	fa03 f000 	lsl.w	r0, r3, r0
 800fae0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fae2:	4318      	orrs	r0, r3
 800fae4:	9041      	str	r0, [sp, #260]	; 0x104
 800fae6:	4655      	mov	r5, sl
 800fae8:	f815 3b01 	ldrb.w	r3, [r5], #1
 800faec:	2b78      	cmp	r3, #120	; 0x78
 800faee:	d806      	bhi.n	800fafe <__ssvfiscanf_r+0xee>
 800faf0:	2b57      	cmp	r3, #87	; 0x57
 800faf2:	d810      	bhi.n	800fb16 <__ssvfiscanf_r+0x106>
 800faf4:	2b25      	cmp	r3, #37	; 0x25
 800faf6:	d0c6      	beq.n	800fa86 <__ssvfiscanf_r+0x76>
 800faf8:	d856      	bhi.n	800fba8 <__ssvfiscanf_r+0x198>
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d064      	beq.n	800fbc8 <__ssvfiscanf_r+0x1b8>
 800fafe:	2303      	movs	r3, #3
 800fb00:	9347      	str	r3, [sp, #284]	; 0x11c
 800fb02:	230a      	movs	r3, #10
 800fb04:	9342      	str	r3, [sp, #264]	; 0x108
 800fb06:	e071      	b.n	800fbec <__ssvfiscanf_r+0x1dc>
 800fb08:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800fb0a:	fb02 1103 	mla	r1, r2, r3, r1
 800fb0e:	3930      	subs	r1, #48	; 0x30
 800fb10:	9143      	str	r1, [sp, #268]	; 0x10c
 800fb12:	4655      	mov	r5, sl
 800fb14:	e7d3      	b.n	800fabe <__ssvfiscanf_r+0xae>
 800fb16:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800fb1a:	2a20      	cmp	r2, #32
 800fb1c:	d8ef      	bhi.n	800fafe <__ssvfiscanf_r+0xee>
 800fb1e:	a101      	add	r1, pc, #4	; (adr r1, 800fb24 <__ssvfiscanf_r+0x114>)
 800fb20:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fb24:	0800fbd7 	.word	0x0800fbd7
 800fb28:	0800faff 	.word	0x0800faff
 800fb2c:	0800faff 	.word	0x0800faff
 800fb30:	0800fc35 	.word	0x0800fc35
 800fb34:	0800faff 	.word	0x0800faff
 800fb38:	0800faff 	.word	0x0800faff
 800fb3c:	0800faff 	.word	0x0800faff
 800fb40:	0800faff 	.word	0x0800faff
 800fb44:	0800faff 	.word	0x0800faff
 800fb48:	0800faff 	.word	0x0800faff
 800fb4c:	0800faff 	.word	0x0800faff
 800fb50:	0800fc4b 	.word	0x0800fc4b
 800fb54:	0800fc21 	.word	0x0800fc21
 800fb58:	0800fbaf 	.word	0x0800fbaf
 800fb5c:	0800fbaf 	.word	0x0800fbaf
 800fb60:	0800fbaf 	.word	0x0800fbaf
 800fb64:	0800faff 	.word	0x0800faff
 800fb68:	0800fc25 	.word	0x0800fc25
 800fb6c:	0800faff 	.word	0x0800faff
 800fb70:	0800faff 	.word	0x0800faff
 800fb74:	0800faff 	.word	0x0800faff
 800fb78:	0800faff 	.word	0x0800faff
 800fb7c:	0800fc5b 	.word	0x0800fc5b
 800fb80:	0800fc2d 	.word	0x0800fc2d
 800fb84:	0800fbcf 	.word	0x0800fbcf
 800fb88:	0800faff 	.word	0x0800faff
 800fb8c:	0800faff 	.word	0x0800faff
 800fb90:	0800fc57 	.word	0x0800fc57
 800fb94:	0800faff 	.word	0x0800faff
 800fb98:	0800fc21 	.word	0x0800fc21
 800fb9c:	0800faff 	.word	0x0800faff
 800fba0:	0800faff 	.word	0x0800faff
 800fba4:	0800fbd7 	.word	0x0800fbd7
 800fba8:	3b45      	subs	r3, #69	; 0x45
 800fbaa:	2b02      	cmp	r3, #2
 800fbac:	d8a7      	bhi.n	800fafe <__ssvfiscanf_r+0xee>
 800fbae:	2305      	movs	r3, #5
 800fbb0:	e01b      	b.n	800fbea <__ssvfiscanf_r+0x1da>
 800fbb2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fbb4:	4621      	mov	r1, r4
 800fbb6:	4630      	mov	r0, r6
 800fbb8:	4798      	blx	r3
 800fbba:	2800      	cmp	r0, #0
 800fbbc:	f43f af68 	beq.w	800fa90 <__ssvfiscanf_r+0x80>
 800fbc0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800fbc2:	2800      	cmp	r0, #0
 800fbc4:	f040 808d 	bne.w	800fce2 <__ssvfiscanf_r+0x2d2>
 800fbc8:	f04f 30ff 	mov.w	r0, #4294967295
 800fbcc:	e08f      	b.n	800fcee <__ssvfiscanf_r+0x2de>
 800fbce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800fbd0:	f042 0220 	orr.w	r2, r2, #32
 800fbd4:	9241      	str	r2, [sp, #260]	; 0x104
 800fbd6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800fbd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fbdc:	9241      	str	r2, [sp, #260]	; 0x104
 800fbde:	2210      	movs	r2, #16
 800fbe0:	2b6f      	cmp	r3, #111	; 0x6f
 800fbe2:	9242      	str	r2, [sp, #264]	; 0x108
 800fbe4:	bf34      	ite	cc
 800fbe6:	2303      	movcc	r3, #3
 800fbe8:	2304      	movcs	r3, #4
 800fbea:	9347      	str	r3, [sp, #284]	; 0x11c
 800fbec:	6863      	ldr	r3, [r4, #4]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	dd42      	ble.n	800fc78 <__ssvfiscanf_r+0x268>
 800fbf2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fbf4:	0659      	lsls	r1, r3, #25
 800fbf6:	d404      	bmi.n	800fc02 <__ssvfiscanf_r+0x1f2>
 800fbf8:	6823      	ldr	r3, [r4, #0]
 800fbfa:	781a      	ldrb	r2, [r3, #0]
 800fbfc:	5cba      	ldrb	r2, [r7, r2]
 800fbfe:	0712      	lsls	r2, r2, #28
 800fc00:	d441      	bmi.n	800fc86 <__ssvfiscanf_r+0x276>
 800fc02:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800fc04:	2b02      	cmp	r3, #2
 800fc06:	dc50      	bgt.n	800fcaa <__ssvfiscanf_r+0x29a>
 800fc08:	466b      	mov	r3, sp
 800fc0a:	4622      	mov	r2, r4
 800fc0c:	a941      	add	r1, sp, #260	; 0x104
 800fc0e:	4630      	mov	r0, r6
 800fc10:	f000 f9d0 	bl	800ffb4 <_scanf_chars>
 800fc14:	2801      	cmp	r0, #1
 800fc16:	d06e      	beq.n	800fcf6 <__ssvfiscanf_r+0x2e6>
 800fc18:	2802      	cmp	r0, #2
 800fc1a:	f47f af20 	bne.w	800fa5e <__ssvfiscanf_r+0x4e>
 800fc1e:	e7cf      	b.n	800fbc0 <__ssvfiscanf_r+0x1b0>
 800fc20:	220a      	movs	r2, #10
 800fc22:	e7dd      	b.n	800fbe0 <__ssvfiscanf_r+0x1d0>
 800fc24:	2300      	movs	r3, #0
 800fc26:	9342      	str	r3, [sp, #264]	; 0x108
 800fc28:	2303      	movs	r3, #3
 800fc2a:	e7de      	b.n	800fbea <__ssvfiscanf_r+0x1da>
 800fc2c:	2308      	movs	r3, #8
 800fc2e:	9342      	str	r3, [sp, #264]	; 0x108
 800fc30:	2304      	movs	r3, #4
 800fc32:	e7da      	b.n	800fbea <__ssvfiscanf_r+0x1da>
 800fc34:	4629      	mov	r1, r5
 800fc36:	4640      	mov	r0, r8
 800fc38:	f000 fb20 	bl	801027c <__sccl>
 800fc3c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fc3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc42:	9341      	str	r3, [sp, #260]	; 0x104
 800fc44:	4605      	mov	r5, r0
 800fc46:	2301      	movs	r3, #1
 800fc48:	e7cf      	b.n	800fbea <__ssvfiscanf_r+0x1da>
 800fc4a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fc4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc50:	9341      	str	r3, [sp, #260]	; 0x104
 800fc52:	2300      	movs	r3, #0
 800fc54:	e7c9      	b.n	800fbea <__ssvfiscanf_r+0x1da>
 800fc56:	2302      	movs	r3, #2
 800fc58:	e7c7      	b.n	800fbea <__ssvfiscanf_r+0x1da>
 800fc5a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800fc5c:	06c3      	lsls	r3, r0, #27
 800fc5e:	f53f aefe 	bmi.w	800fa5e <__ssvfiscanf_r+0x4e>
 800fc62:	9b00      	ldr	r3, [sp, #0]
 800fc64:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800fc66:	1d19      	adds	r1, r3, #4
 800fc68:	9100      	str	r1, [sp, #0]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	f010 0f01 	tst.w	r0, #1
 800fc70:	bf14      	ite	ne
 800fc72:	801a      	strhne	r2, [r3, #0]
 800fc74:	601a      	streq	r2, [r3, #0]
 800fc76:	e6f2      	b.n	800fa5e <__ssvfiscanf_r+0x4e>
 800fc78:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fc7a:	4621      	mov	r1, r4
 800fc7c:	4630      	mov	r0, r6
 800fc7e:	4798      	blx	r3
 800fc80:	2800      	cmp	r0, #0
 800fc82:	d0b6      	beq.n	800fbf2 <__ssvfiscanf_r+0x1e2>
 800fc84:	e79c      	b.n	800fbc0 <__ssvfiscanf_r+0x1b0>
 800fc86:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800fc88:	3201      	adds	r2, #1
 800fc8a:	9245      	str	r2, [sp, #276]	; 0x114
 800fc8c:	6862      	ldr	r2, [r4, #4]
 800fc8e:	3a01      	subs	r2, #1
 800fc90:	2a00      	cmp	r2, #0
 800fc92:	6062      	str	r2, [r4, #4]
 800fc94:	dd02      	ble.n	800fc9c <__ssvfiscanf_r+0x28c>
 800fc96:	3301      	adds	r3, #1
 800fc98:	6023      	str	r3, [r4, #0]
 800fc9a:	e7ad      	b.n	800fbf8 <__ssvfiscanf_r+0x1e8>
 800fc9c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fc9e:	4621      	mov	r1, r4
 800fca0:	4630      	mov	r0, r6
 800fca2:	4798      	blx	r3
 800fca4:	2800      	cmp	r0, #0
 800fca6:	d0a7      	beq.n	800fbf8 <__ssvfiscanf_r+0x1e8>
 800fca8:	e78a      	b.n	800fbc0 <__ssvfiscanf_r+0x1b0>
 800fcaa:	2b04      	cmp	r3, #4
 800fcac:	dc0e      	bgt.n	800fccc <__ssvfiscanf_r+0x2bc>
 800fcae:	466b      	mov	r3, sp
 800fcb0:	4622      	mov	r2, r4
 800fcb2:	a941      	add	r1, sp, #260	; 0x104
 800fcb4:	4630      	mov	r0, r6
 800fcb6:	f000 f9d7 	bl	8010068 <_scanf_i>
 800fcba:	e7ab      	b.n	800fc14 <__ssvfiscanf_r+0x204>
 800fcbc:	0800f95d 	.word	0x0800f95d
 800fcc0:	0800f9d7 	.word	0x0800f9d7
 800fcc4:	0801092b 	.word	0x0801092b
 800fcc8:	08010c5c 	.word	0x08010c5c
 800fccc:	4b0b      	ldr	r3, [pc, #44]	; (800fcfc <__ssvfiscanf_r+0x2ec>)
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	f43f aec5 	beq.w	800fa5e <__ssvfiscanf_r+0x4e>
 800fcd4:	466b      	mov	r3, sp
 800fcd6:	4622      	mov	r2, r4
 800fcd8:	a941      	add	r1, sp, #260	; 0x104
 800fcda:	4630      	mov	r0, r6
 800fcdc:	f3af 8000 	nop.w
 800fce0:	e798      	b.n	800fc14 <__ssvfiscanf_r+0x204>
 800fce2:	89a3      	ldrh	r3, [r4, #12]
 800fce4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800fce8:	bf18      	it	ne
 800fcea:	f04f 30ff 	movne.w	r0, #4294967295
 800fcee:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800fcf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcf6:	9844      	ldr	r0, [sp, #272]	; 0x110
 800fcf8:	e7f9      	b.n	800fcee <__ssvfiscanf_r+0x2de>
 800fcfa:	bf00      	nop
 800fcfc:	00000000 	.word	0x00000000

0800fd00 <__sfputc_r>:
 800fd00:	6893      	ldr	r3, [r2, #8]
 800fd02:	3b01      	subs	r3, #1
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	b410      	push	{r4}
 800fd08:	6093      	str	r3, [r2, #8]
 800fd0a:	da08      	bge.n	800fd1e <__sfputc_r+0x1e>
 800fd0c:	6994      	ldr	r4, [r2, #24]
 800fd0e:	42a3      	cmp	r3, r4
 800fd10:	db01      	blt.n	800fd16 <__sfputc_r+0x16>
 800fd12:	290a      	cmp	r1, #10
 800fd14:	d103      	bne.n	800fd1e <__sfputc_r+0x1e>
 800fd16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd1a:	f7fe b8b5 	b.w	800de88 <__swbuf_r>
 800fd1e:	6813      	ldr	r3, [r2, #0]
 800fd20:	1c58      	adds	r0, r3, #1
 800fd22:	6010      	str	r0, [r2, #0]
 800fd24:	7019      	strb	r1, [r3, #0]
 800fd26:	4608      	mov	r0, r1
 800fd28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd2c:	4770      	bx	lr

0800fd2e <__sfputs_r>:
 800fd2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd30:	4606      	mov	r6, r0
 800fd32:	460f      	mov	r7, r1
 800fd34:	4614      	mov	r4, r2
 800fd36:	18d5      	adds	r5, r2, r3
 800fd38:	42ac      	cmp	r4, r5
 800fd3a:	d101      	bne.n	800fd40 <__sfputs_r+0x12>
 800fd3c:	2000      	movs	r0, #0
 800fd3e:	e007      	b.n	800fd50 <__sfputs_r+0x22>
 800fd40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd44:	463a      	mov	r2, r7
 800fd46:	4630      	mov	r0, r6
 800fd48:	f7ff ffda 	bl	800fd00 <__sfputc_r>
 800fd4c:	1c43      	adds	r3, r0, #1
 800fd4e:	d1f3      	bne.n	800fd38 <__sfputs_r+0xa>
 800fd50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fd54 <_vfiprintf_r>:
 800fd54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd58:	460d      	mov	r5, r1
 800fd5a:	b09d      	sub	sp, #116	; 0x74
 800fd5c:	4614      	mov	r4, r2
 800fd5e:	4698      	mov	r8, r3
 800fd60:	4606      	mov	r6, r0
 800fd62:	b118      	cbz	r0, 800fd6c <_vfiprintf_r+0x18>
 800fd64:	6983      	ldr	r3, [r0, #24]
 800fd66:	b90b      	cbnz	r3, 800fd6c <_vfiprintf_r+0x18>
 800fd68:	f7ff f922 	bl	800efb0 <__sinit>
 800fd6c:	4b89      	ldr	r3, [pc, #548]	; (800ff94 <_vfiprintf_r+0x240>)
 800fd6e:	429d      	cmp	r5, r3
 800fd70:	d11b      	bne.n	800fdaa <_vfiprintf_r+0x56>
 800fd72:	6875      	ldr	r5, [r6, #4]
 800fd74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd76:	07d9      	lsls	r1, r3, #31
 800fd78:	d405      	bmi.n	800fd86 <_vfiprintf_r+0x32>
 800fd7a:	89ab      	ldrh	r3, [r5, #12]
 800fd7c:	059a      	lsls	r2, r3, #22
 800fd7e:	d402      	bmi.n	800fd86 <_vfiprintf_r+0x32>
 800fd80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fd82:	f7ff f9ca 	bl	800f11a <__retarget_lock_acquire_recursive>
 800fd86:	89ab      	ldrh	r3, [r5, #12]
 800fd88:	071b      	lsls	r3, r3, #28
 800fd8a:	d501      	bpl.n	800fd90 <_vfiprintf_r+0x3c>
 800fd8c:	692b      	ldr	r3, [r5, #16]
 800fd8e:	b9eb      	cbnz	r3, 800fdcc <_vfiprintf_r+0x78>
 800fd90:	4629      	mov	r1, r5
 800fd92:	4630      	mov	r0, r6
 800fd94:	f7fe f8dc 	bl	800df50 <__swsetup_r>
 800fd98:	b1c0      	cbz	r0, 800fdcc <_vfiprintf_r+0x78>
 800fd9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd9c:	07dc      	lsls	r4, r3, #31
 800fd9e:	d50e      	bpl.n	800fdbe <_vfiprintf_r+0x6a>
 800fda0:	f04f 30ff 	mov.w	r0, #4294967295
 800fda4:	b01d      	add	sp, #116	; 0x74
 800fda6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdaa:	4b7b      	ldr	r3, [pc, #492]	; (800ff98 <_vfiprintf_r+0x244>)
 800fdac:	429d      	cmp	r5, r3
 800fdae:	d101      	bne.n	800fdb4 <_vfiprintf_r+0x60>
 800fdb0:	68b5      	ldr	r5, [r6, #8]
 800fdb2:	e7df      	b.n	800fd74 <_vfiprintf_r+0x20>
 800fdb4:	4b79      	ldr	r3, [pc, #484]	; (800ff9c <_vfiprintf_r+0x248>)
 800fdb6:	429d      	cmp	r5, r3
 800fdb8:	bf08      	it	eq
 800fdba:	68f5      	ldreq	r5, [r6, #12]
 800fdbc:	e7da      	b.n	800fd74 <_vfiprintf_r+0x20>
 800fdbe:	89ab      	ldrh	r3, [r5, #12]
 800fdc0:	0598      	lsls	r0, r3, #22
 800fdc2:	d4ed      	bmi.n	800fda0 <_vfiprintf_r+0x4c>
 800fdc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fdc6:	f7ff f9a9 	bl	800f11c <__retarget_lock_release_recursive>
 800fdca:	e7e9      	b.n	800fda0 <_vfiprintf_r+0x4c>
 800fdcc:	2300      	movs	r3, #0
 800fdce:	9309      	str	r3, [sp, #36]	; 0x24
 800fdd0:	2320      	movs	r3, #32
 800fdd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fdd6:	f8cd 800c 	str.w	r8, [sp, #12]
 800fdda:	2330      	movs	r3, #48	; 0x30
 800fddc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ffa0 <_vfiprintf_r+0x24c>
 800fde0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fde4:	f04f 0901 	mov.w	r9, #1
 800fde8:	4623      	mov	r3, r4
 800fdea:	469a      	mov	sl, r3
 800fdec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fdf0:	b10a      	cbz	r2, 800fdf6 <_vfiprintf_r+0xa2>
 800fdf2:	2a25      	cmp	r2, #37	; 0x25
 800fdf4:	d1f9      	bne.n	800fdea <_vfiprintf_r+0x96>
 800fdf6:	ebba 0b04 	subs.w	fp, sl, r4
 800fdfa:	d00b      	beq.n	800fe14 <_vfiprintf_r+0xc0>
 800fdfc:	465b      	mov	r3, fp
 800fdfe:	4622      	mov	r2, r4
 800fe00:	4629      	mov	r1, r5
 800fe02:	4630      	mov	r0, r6
 800fe04:	f7ff ff93 	bl	800fd2e <__sfputs_r>
 800fe08:	3001      	adds	r0, #1
 800fe0a:	f000 80aa 	beq.w	800ff62 <_vfiprintf_r+0x20e>
 800fe0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe10:	445a      	add	r2, fp
 800fe12:	9209      	str	r2, [sp, #36]	; 0x24
 800fe14:	f89a 3000 	ldrb.w	r3, [sl]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	f000 80a2 	beq.w	800ff62 <_vfiprintf_r+0x20e>
 800fe1e:	2300      	movs	r3, #0
 800fe20:	f04f 32ff 	mov.w	r2, #4294967295
 800fe24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe28:	f10a 0a01 	add.w	sl, sl, #1
 800fe2c:	9304      	str	r3, [sp, #16]
 800fe2e:	9307      	str	r3, [sp, #28]
 800fe30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fe34:	931a      	str	r3, [sp, #104]	; 0x68
 800fe36:	4654      	mov	r4, sl
 800fe38:	2205      	movs	r2, #5
 800fe3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe3e:	4858      	ldr	r0, [pc, #352]	; (800ffa0 <_vfiprintf_r+0x24c>)
 800fe40:	f7f0 f9de 	bl	8000200 <memchr>
 800fe44:	9a04      	ldr	r2, [sp, #16]
 800fe46:	b9d8      	cbnz	r0, 800fe80 <_vfiprintf_r+0x12c>
 800fe48:	06d1      	lsls	r1, r2, #27
 800fe4a:	bf44      	itt	mi
 800fe4c:	2320      	movmi	r3, #32
 800fe4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe52:	0713      	lsls	r3, r2, #28
 800fe54:	bf44      	itt	mi
 800fe56:	232b      	movmi	r3, #43	; 0x2b
 800fe58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe5c:	f89a 3000 	ldrb.w	r3, [sl]
 800fe60:	2b2a      	cmp	r3, #42	; 0x2a
 800fe62:	d015      	beq.n	800fe90 <_vfiprintf_r+0x13c>
 800fe64:	9a07      	ldr	r2, [sp, #28]
 800fe66:	4654      	mov	r4, sl
 800fe68:	2000      	movs	r0, #0
 800fe6a:	f04f 0c0a 	mov.w	ip, #10
 800fe6e:	4621      	mov	r1, r4
 800fe70:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fe74:	3b30      	subs	r3, #48	; 0x30
 800fe76:	2b09      	cmp	r3, #9
 800fe78:	d94e      	bls.n	800ff18 <_vfiprintf_r+0x1c4>
 800fe7a:	b1b0      	cbz	r0, 800feaa <_vfiprintf_r+0x156>
 800fe7c:	9207      	str	r2, [sp, #28]
 800fe7e:	e014      	b.n	800feaa <_vfiprintf_r+0x156>
 800fe80:	eba0 0308 	sub.w	r3, r0, r8
 800fe84:	fa09 f303 	lsl.w	r3, r9, r3
 800fe88:	4313      	orrs	r3, r2
 800fe8a:	9304      	str	r3, [sp, #16]
 800fe8c:	46a2      	mov	sl, r4
 800fe8e:	e7d2      	b.n	800fe36 <_vfiprintf_r+0xe2>
 800fe90:	9b03      	ldr	r3, [sp, #12]
 800fe92:	1d19      	adds	r1, r3, #4
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	9103      	str	r1, [sp, #12]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	bfbb      	ittet	lt
 800fe9c:	425b      	neglt	r3, r3
 800fe9e:	f042 0202 	orrlt.w	r2, r2, #2
 800fea2:	9307      	strge	r3, [sp, #28]
 800fea4:	9307      	strlt	r3, [sp, #28]
 800fea6:	bfb8      	it	lt
 800fea8:	9204      	strlt	r2, [sp, #16]
 800feaa:	7823      	ldrb	r3, [r4, #0]
 800feac:	2b2e      	cmp	r3, #46	; 0x2e
 800feae:	d10c      	bne.n	800feca <_vfiprintf_r+0x176>
 800feb0:	7863      	ldrb	r3, [r4, #1]
 800feb2:	2b2a      	cmp	r3, #42	; 0x2a
 800feb4:	d135      	bne.n	800ff22 <_vfiprintf_r+0x1ce>
 800feb6:	9b03      	ldr	r3, [sp, #12]
 800feb8:	1d1a      	adds	r2, r3, #4
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	9203      	str	r2, [sp, #12]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	bfb8      	it	lt
 800fec2:	f04f 33ff 	movlt.w	r3, #4294967295
 800fec6:	3402      	adds	r4, #2
 800fec8:	9305      	str	r3, [sp, #20]
 800feca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ffb0 <_vfiprintf_r+0x25c>
 800fece:	7821      	ldrb	r1, [r4, #0]
 800fed0:	2203      	movs	r2, #3
 800fed2:	4650      	mov	r0, sl
 800fed4:	f7f0 f994 	bl	8000200 <memchr>
 800fed8:	b140      	cbz	r0, 800feec <_vfiprintf_r+0x198>
 800feda:	2340      	movs	r3, #64	; 0x40
 800fedc:	eba0 000a 	sub.w	r0, r0, sl
 800fee0:	fa03 f000 	lsl.w	r0, r3, r0
 800fee4:	9b04      	ldr	r3, [sp, #16]
 800fee6:	4303      	orrs	r3, r0
 800fee8:	3401      	adds	r4, #1
 800feea:	9304      	str	r3, [sp, #16]
 800feec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fef0:	482c      	ldr	r0, [pc, #176]	; (800ffa4 <_vfiprintf_r+0x250>)
 800fef2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fef6:	2206      	movs	r2, #6
 800fef8:	f7f0 f982 	bl	8000200 <memchr>
 800fefc:	2800      	cmp	r0, #0
 800fefe:	d03f      	beq.n	800ff80 <_vfiprintf_r+0x22c>
 800ff00:	4b29      	ldr	r3, [pc, #164]	; (800ffa8 <_vfiprintf_r+0x254>)
 800ff02:	bb1b      	cbnz	r3, 800ff4c <_vfiprintf_r+0x1f8>
 800ff04:	9b03      	ldr	r3, [sp, #12]
 800ff06:	3307      	adds	r3, #7
 800ff08:	f023 0307 	bic.w	r3, r3, #7
 800ff0c:	3308      	adds	r3, #8
 800ff0e:	9303      	str	r3, [sp, #12]
 800ff10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff12:	443b      	add	r3, r7
 800ff14:	9309      	str	r3, [sp, #36]	; 0x24
 800ff16:	e767      	b.n	800fde8 <_vfiprintf_r+0x94>
 800ff18:	fb0c 3202 	mla	r2, ip, r2, r3
 800ff1c:	460c      	mov	r4, r1
 800ff1e:	2001      	movs	r0, #1
 800ff20:	e7a5      	b.n	800fe6e <_vfiprintf_r+0x11a>
 800ff22:	2300      	movs	r3, #0
 800ff24:	3401      	adds	r4, #1
 800ff26:	9305      	str	r3, [sp, #20]
 800ff28:	4619      	mov	r1, r3
 800ff2a:	f04f 0c0a 	mov.w	ip, #10
 800ff2e:	4620      	mov	r0, r4
 800ff30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff34:	3a30      	subs	r2, #48	; 0x30
 800ff36:	2a09      	cmp	r2, #9
 800ff38:	d903      	bls.n	800ff42 <_vfiprintf_r+0x1ee>
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d0c5      	beq.n	800feca <_vfiprintf_r+0x176>
 800ff3e:	9105      	str	r1, [sp, #20]
 800ff40:	e7c3      	b.n	800feca <_vfiprintf_r+0x176>
 800ff42:	fb0c 2101 	mla	r1, ip, r1, r2
 800ff46:	4604      	mov	r4, r0
 800ff48:	2301      	movs	r3, #1
 800ff4a:	e7f0      	b.n	800ff2e <_vfiprintf_r+0x1da>
 800ff4c:	ab03      	add	r3, sp, #12
 800ff4e:	9300      	str	r3, [sp, #0]
 800ff50:	462a      	mov	r2, r5
 800ff52:	4b16      	ldr	r3, [pc, #88]	; (800ffac <_vfiprintf_r+0x258>)
 800ff54:	a904      	add	r1, sp, #16
 800ff56:	4630      	mov	r0, r6
 800ff58:	f7fd f986 	bl	800d268 <_printf_float>
 800ff5c:	4607      	mov	r7, r0
 800ff5e:	1c78      	adds	r0, r7, #1
 800ff60:	d1d6      	bne.n	800ff10 <_vfiprintf_r+0x1bc>
 800ff62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff64:	07d9      	lsls	r1, r3, #31
 800ff66:	d405      	bmi.n	800ff74 <_vfiprintf_r+0x220>
 800ff68:	89ab      	ldrh	r3, [r5, #12]
 800ff6a:	059a      	lsls	r2, r3, #22
 800ff6c:	d402      	bmi.n	800ff74 <_vfiprintf_r+0x220>
 800ff6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff70:	f7ff f8d4 	bl	800f11c <__retarget_lock_release_recursive>
 800ff74:	89ab      	ldrh	r3, [r5, #12]
 800ff76:	065b      	lsls	r3, r3, #25
 800ff78:	f53f af12 	bmi.w	800fda0 <_vfiprintf_r+0x4c>
 800ff7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ff7e:	e711      	b.n	800fda4 <_vfiprintf_r+0x50>
 800ff80:	ab03      	add	r3, sp, #12
 800ff82:	9300      	str	r3, [sp, #0]
 800ff84:	462a      	mov	r2, r5
 800ff86:	4b09      	ldr	r3, [pc, #36]	; (800ffac <_vfiprintf_r+0x258>)
 800ff88:	a904      	add	r1, sp, #16
 800ff8a:	4630      	mov	r0, r6
 800ff8c:	f7fd fc10 	bl	800d7b0 <_printf_i>
 800ff90:	e7e4      	b.n	800ff5c <_vfiprintf_r+0x208>
 800ff92:	bf00      	nop
 800ff94:	08010ac4 	.word	0x08010ac4
 800ff98:	08010ae4 	.word	0x08010ae4
 800ff9c:	08010aa4 	.word	0x08010aa4
 800ffa0:	08010c60 	.word	0x08010c60
 800ffa4:	08010c66 	.word	0x08010c66
 800ffa8:	0800d269 	.word	0x0800d269
 800ffac:	0800fd2f 	.word	0x0800fd2f
 800ffb0:	08010c5c 	.word	0x08010c5c

0800ffb4 <_scanf_chars>:
 800ffb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffb8:	4615      	mov	r5, r2
 800ffba:	688a      	ldr	r2, [r1, #8]
 800ffbc:	4680      	mov	r8, r0
 800ffbe:	460c      	mov	r4, r1
 800ffc0:	b932      	cbnz	r2, 800ffd0 <_scanf_chars+0x1c>
 800ffc2:	698a      	ldr	r2, [r1, #24]
 800ffc4:	2a00      	cmp	r2, #0
 800ffc6:	bf0c      	ite	eq
 800ffc8:	2201      	moveq	r2, #1
 800ffca:	f04f 32ff 	movne.w	r2, #4294967295
 800ffce:	608a      	str	r2, [r1, #8]
 800ffd0:	6822      	ldr	r2, [r4, #0]
 800ffd2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8010064 <_scanf_chars+0xb0>
 800ffd6:	06d1      	lsls	r1, r2, #27
 800ffd8:	bf5f      	itttt	pl
 800ffda:	681a      	ldrpl	r2, [r3, #0]
 800ffdc:	1d11      	addpl	r1, r2, #4
 800ffde:	6019      	strpl	r1, [r3, #0]
 800ffe0:	6816      	ldrpl	r6, [r2, #0]
 800ffe2:	2700      	movs	r7, #0
 800ffe4:	69a0      	ldr	r0, [r4, #24]
 800ffe6:	b188      	cbz	r0, 801000c <_scanf_chars+0x58>
 800ffe8:	2801      	cmp	r0, #1
 800ffea:	d107      	bne.n	800fffc <_scanf_chars+0x48>
 800ffec:	682a      	ldr	r2, [r5, #0]
 800ffee:	7811      	ldrb	r1, [r2, #0]
 800fff0:	6962      	ldr	r2, [r4, #20]
 800fff2:	5c52      	ldrb	r2, [r2, r1]
 800fff4:	b952      	cbnz	r2, 801000c <_scanf_chars+0x58>
 800fff6:	2f00      	cmp	r7, #0
 800fff8:	d031      	beq.n	801005e <_scanf_chars+0xaa>
 800fffa:	e022      	b.n	8010042 <_scanf_chars+0x8e>
 800fffc:	2802      	cmp	r0, #2
 800fffe:	d120      	bne.n	8010042 <_scanf_chars+0x8e>
 8010000:	682b      	ldr	r3, [r5, #0]
 8010002:	781b      	ldrb	r3, [r3, #0]
 8010004:	f813 3009 	ldrb.w	r3, [r3, r9]
 8010008:	071b      	lsls	r3, r3, #28
 801000a:	d41a      	bmi.n	8010042 <_scanf_chars+0x8e>
 801000c:	6823      	ldr	r3, [r4, #0]
 801000e:	06da      	lsls	r2, r3, #27
 8010010:	bf5e      	ittt	pl
 8010012:	682b      	ldrpl	r3, [r5, #0]
 8010014:	781b      	ldrbpl	r3, [r3, #0]
 8010016:	f806 3b01 	strbpl.w	r3, [r6], #1
 801001a:	682a      	ldr	r2, [r5, #0]
 801001c:	686b      	ldr	r3, [r5, #4]
 801001e:	3201      	adds	r2, #1
 8010020:	602a      	str	r2, [r5, #0]
 8010022:	68a2      	ldr	r2, [r4, #8]
 8010024:	3b01      	subs	r3, #1
 8010026:	3a01      	subs	r2, #1
 8010028:	606b      	str	r3, [r5, #4]
 801002a:	3701      	adds	r7, #1
 801002c:	60a2      	str	r2, [r4, #8]
 801002e:	b142      	cbz	r2, 8010042 <_scanf_chars+0x8e>
 8010030:	2b00      	cmp	r3, #0
 8010032:	dcd7      	bgt.n	800ffe4 <_scanf_chars+0x30>
 8010034:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010038:	4629      	mov	r1, r5
 801003a:	4640      	mov	r0, r8
 801003c:	4798      	blx	r3
 801003e:	2800      	cmp	r0, #0
 8010040:	d0d0      	beq.n	800ffe4 <_scanf_chars+0x30>
 8010042:	6823      	ldr	r3, [r4, #0]
 8010044:	f013 0310 	ands.w	r3, r3, #16
 8010048:	d105      	bne.n	8010056 <_scanf_chars+0xa2>
 801004a:	68e2      	ldr	r2, [r4, #12]
 801004c:	3201      	adds	r2, #1
 801004e:	60e2      	str	r2, [r4, #12]
 8010050:	69a2      	ldr	r2, [r4, #24]
 8010052:	b102      	cbz	r2, 8010056 <_scanf_chars+0xa2>
 8010054:	7033      	strb	r3, [r6, #0]
 8010056:	6923      	ldr	r3, [r4, #16]
 8010058:	443b      	add	r3, r7
 801005a:	6123      	str	r3, [r4, #16]
 801005c:	2000      	movs	r0, #0
 801005e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010062:	bf00      	nop
 8010064:	0801092b 	.word	0x0801092b

08010068 <_scanf_i>:
 8010068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801006c:	4698      	mov	r8, r3
 801006e:	4b76      	ldr	r3, [pc, #472]	; (8010248 <_scanf_i+0x1e0>)
 8010070:	460c      	mov	r4, r1
 8010072:	4682      	mov	sl, r0
 8010074:	4616      	mov	r6, r2
 8010076:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801007a:	b087      	sub	sp, #28
 801007c:	ab03      	add	r3, sp, #12
 801007e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010082:	4b72      	ldr	r3, [pc, #456]	; (801024c <_scanf_i+0x1e4>)
 8010084:	69a1      	ldr	r1, [r4, #24]
 8010086:	4a72      	ldr	r2, [pc, #456]	; (8010250 <_scanf_i+0x1e8>)
 8010088:	2903      	cmp	r1, #3
 801008a:	bf18      	it	ne
 801008c:	461a      	movne	r2, r3
 801008e:	68a3      	ldr	r3, [r4, #8]
 8010090:	9201      	str	r2, [sp, #4]
 8010092:	1e5a      	subs	r2, r3, #1
 8010094:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010098:	bf88      	it	hi
 801009a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801009e:	4627      	mov	r7, r4
 80100a0:	bf82      	ittt	hi
 80100a2:	eb03 0905 	addhi.w	r9, r3, r5
 80100a6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80100aa:	60a3      	strhi	r3, [r4, #8]
 80100ac:	f857 3b1c 	ldr.w	r3, [r7], #28
 80100b0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80100b4:	bf98      	it	ls
 80100b6:	f04f 0900 	movls.w	r9, #0
 80100ba:	6023      	str	r3, [r4, #0]
 80100bc:	463d      	mov	r5, r7
 80100be:	f04f 0b00 	mov.w	fp, #0
 80100c2:	6831      	ldr	r1, [r6, #0]
 80100c4:	ab03      	add	r3, sp, #12
 80100c6:	7809      	ldrb	r1, [r1, #0]
 80100c8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80100cc:	2202      	movs	r2, #2
 80100ce:	f7f0 f897 	bl	8000200 <memchr>
 80100d2:	b328      	cbz	r0, 8010120 <_scanf_i+0xb8>
 80100d4:	f1bb 0f01 	cmp.w	fp, #1
 80100d8:	d159      	bne.n	801018e <_scanf_i+0x126>
 80100da:	6862      	ldr	r2, [r4, #4]
 80100dc:	b92a      	cbnz	r2, 80100ea <_scanf_i+0x82>
 80100de:	6822      	ldr	r2, [r4, #0]
 80100e0:	2308      	movs	r3, #8
 80100e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80100e6:	6063      	str	r3, [r4, #4]
 80100e8:	6022      	str	r2, [r4, #0]
 80100ea:	6822      	ldr	r2, [r4, #0]
 80100ec:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80100f0:	6022      	str	r2, [r4, #0]
 80100f2:	68a2      	ldr	r2, [r4, #8]
 80100f4:	1e51      	subs	r1, r2, #1
 80100f6:	60a1      	str	r1, [r4, #8]
 80100f8:	b192      	cbz	r2, 8010120 <_scanf_i+0xb8>
 80100fa:	6832      	ldr	r2, [r6, #0]
 80100fc:	1c51      	adds	r1, r2, #1
 80100fe:	6031      	str	r1, [r6, #0]
 8010100:	7812      	ldrb	r2, [r2, #0]
 8010102:	f805 2b01 	strb.w	r2, [r5], #1
 8010106:	6872      	ldr	r2, [r6, #4]
 8010108:	3a01      	subs	r2, #1
 801010a:	2a00      	cmp	r2, #0
 801010c:	6072      	str	r2, [r6, #4]
 801010e:	dc07      	bgt.n	8010120 <_scanf_i+0xb8>
 8010110:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8010114:	4631      	mov	r1, r6
 8010116:	4650      	mov	r0, sl
 8010118:	4790      	blx	r2
 801011a:	2800      	cmp	r0, #0
 801011c:	f040 8085 	bne.w	801022a <_scanf_i+0x1c2>
 8010120:	f10b 0b01 	add.w	fp, fp, #1
 8010124:	f1bb 0f03 	cmp.w	fp, #3
 8010128:	d1cb      	bne.n	80100c2 <_scanf_i+0x5a>
 801012a:	6863      	ldr	r3, [r4, #4]
 801012c:	b90b      	cbnz	r3, 8010132 <_scanf_i+0xca>
 801012e:	230a      	movs	r3, #10
 8010130:	6063      	str	r3, [r4, #4]
 8010132:	6863      	ldr	r3, [r4, #4]
 8010134:	4947      	ldr	r1, [pc, #284]	; (8010254 <_scanf_i+0x1ec>)
 8010136:	6960      	ldr	r0, [r4, #20]
 8010138:	1ac9      	subs	r1, r1, r3
 801013a:	f000 f89f 	bl	801027c <__sccl>
 801013e:	f04f 0b00 	mov.w	fp, #0
 8010142:	68a3      	ldr	r3, [r4, #8]
 8010144:	6822      	ldr	r2, [r4, #0]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d03d      	beq.n	80101c6 <_scanf_i+0x15e>
 801014a:	6831      	ldr	r1, [r6, #0]
 801014c:	6960      	ldr	r0, [r4, #20]
 801014e:	f891 c000 	ldrb.w	ip, [r1]
 8010152:	f810 000c 	ldrb.w	r0, [r0, ip]
 8010156:	2800      	cmp	r0, #0
 8010158:	d035      	beq.n	80101c6 <_scanf_i+0x15e>
 801015a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801015e:	d124      	bne.n	80101aa <_scanf_i+0x142>
 8010160:	0510      	lsls	r0, r2, #20
 8010162:	d522      	bpl.n	80101aa <_scanf_i+0x142>
 8010164:	f10b 0b01 	add.w	fp, fp, #1
 8010168:	f1b9 0f00 	cmp.w	r9, #0
 801016c:	d003      	beq.n	8010176 <_scanf_i+0x10e>
 801016e:	3301      	adds	r3, #1
 8010170:	f109 39ff 	add.w	r9, r9, #4294967295
 8010174:	60a3      	str	r3, [r4, #8]
 8010176:	6873      	ldr	r3, [r6, #4]
 8010178:	3b01      	subs	r3, #1
 801017a:	2b00      	cmp	r3, #0
 801017c:	6073      	str	r3, [r6, #4]
 801017e:	dd1b      	ble.n	80101b8 <_scanf_i+0x150>
 8010180:	6833      	ldr	r3, [r6, #0]
 8010182:	3301      	adds	r3, #1
 8010184:	6033      	str	r3, [r6, #0]
 8010186:	68a3      	ldr	r3, [r4, #8]
 8010188:	3b01      	subs	r3, #1
 801018a:	60a3      	str	r3, [r4, #8]
 801018c:	e7d9      	b.n	8010142 <_scanf_i+0xda>
 801018e:	f1bb 0f02 	cmp.w	fp, #2
 8010192:	d1ae      	bne.n	80100f2 <_scanf_i+0x8a>
 8010194:	6822      	ldr	r2, [r4, #0]
 8010196:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801019a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801019e:	d1bf      	bne.n	8010120 <_scanf_i+0xb8>
 80101a0:	2310      	movs	r3, #16
 80101a2:	6063      	str	r3, [r4, #4]
 80101a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80101a8:	e7a2      	b.n	80100f0 <_scanf_i+0x88>
 80101aa:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80101ae:	6022      	str	r2, [r4, #0]
 80101b0:	780b      	ldrb	r3, [r1, #0]
 80101b2:	f805 3b01 	strb.w	r3, [r5], #1
 80101b6:	e7de      	b.n	8010176 <_scanf_i+0x10e>
 80101b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80101bc:	4631      	mov	r1, r6
 80101be:	4650      	mov	r0, sl
 80101c0:	4798      	blx	r3
 80101c2:	2800      	cmp	r0, #0
 80101c4:	d0df      	beq.n	8010186 <_scanf_i+0x11e>
 80101c6:	6823      	ldr	r3, [r4, #0]
 80101c8:	05db      	lsls	r3, r3, #23
 80101ca:	d50d      	bpl.n	80101e8 <_scanf_i+0x180>
 80101cc:	42bd      	cmp	r5, r7
 80101ce:	d909      	bls.n	80101e4 <_scanf_i+0x17c>
 80101d0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80101d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80101d8:	4632      	mov	r2, r6
 80101da:	4650      	mov	r0, sl
 80101dc:	4798      	blx	r3
 80101de:	f105 39ff 	add.w	r9, r5, #4294967295
 80101e2:	464d      	mov	r5, r9
 80101e4:	42bd      	cmp	r5, r7
 80101e6:	d02d      	beq.n	8010244 <_scanf_i+0x1dc>
 80101e8:	6822      	ldr	r2, [r4, #0]
 80101ea:	f012 0210 	ands.w	r2, r2, #16
 80101ee:	d113      	bne.n	8010218 <_scanf_i+0x1b0>
 80101f0:	702a      	strb	r2, [r5, #0]
 80101f2:	6863      	ldr	r3, [r4, #4]
 80101f4:	9e01      	ldr	r6, [sp, #4]
 80101f6:	4639      	mov	r1, r7
 80101f8:	4650      	mov	r0, sl
 80101fa:	47b0      	blx	r6
 80101fc:	6821      	ldr	r1, [r4, #0]
 80101fe:	f8d8 3000 	ldr.w	r3, [r8]
 8010202:	f011 0f20 	tst.w	r1, #32
 8010206:	d013      	beq.n	8010230 <_scanf_i+0x1c8>
 8010208:	1d1a      	adds	r2, r3, #4
 801020a:	f8c8 2000 	str.w	r2, [r8]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	6018      	str	r0, [r3, #0]
 8010212:	68e3      	ldr	r3, [r4, #12]
 8010214:	3301      	adds	r3, #1
 8010216:	60e3      	str	r3, [r4, #12]
 8010218:	1bed      	subs	r5, r5, r7
 801021a:	44ab      	add	fp, r5
 801021c:	6925      	ldr	r5, [r4, #16]
 801021e:	445d      	add	r5, fp
 8010220:	6125      	str	r5, [r4, #16]
 8010222:	2000      	movs	r0, #0
 8010224:	b007      	add	sp, #28
 8010226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801022a:	f04f 0b00 	mov.w	fp, #0
 801022e:	e7ca      	b.n	80101c6 <_scanf_i+0x15e>
 8010230:	1d1a      	adds	r2, r3, #4
 8010232:	f8c8 2000 	str.w	r2, [r8]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	f011 0f01 	tst.w	r1, #1
 801023c:	bf14      	ite	ne
 801023e:	8018      	strhne	r0, [r3, #0]
 8010240:	6018      	streq	r0, [r3, #0]
 8010242:	e7e6      	b.n	8010212 <_scanf_i+0x1aa>
 8010244:	2001      	movs	r0, #1
 8010246:	e7ed      	b.n	8010224 <_scanf_i+0x1bc>
 8010248:	08010688 	.word	0x08010688
 801024c:	080103d1 	.word	0x080103d1
 8010250:	0800de71 	.word	0x0800de71
 8010254:	08010c86 	.word	0x08010c86

08010258 <_read_r>:
 8010258:	b538      	push	{r3, r4, r5, lr}
 801025a:	4d07      	ldr	r5, [pc, #28]	; (8010278 <_read_r+0x20>)
 801025c:	4604      	mov	r4, r0
 801025e:	4608      	mov	r0, r1
 8010260:	4611      	mov	r1, r2
 8010262:	2200      	movs	r2, #0
 8010264:	602a      	str	r2, [r5, #0]
 8010266:	461a      	mov	r2, r3
 8010268:	f7f2 fe36 	bl	8002ed8 <_read>
 801026c:	1c43      	adds	r3, r0, #1
 801026e:	d102      	bne.n	8010276 <_read_r+0x1e>
 8010270:	682b      	ldr	r3, [r5, #0]
 8010272:	b103      	cbz	r3, 8010276 <_read_r+0x1e>
 8010274:	6023      	str	r3, [r4, #0]
 8010276:	bd38      	pop	{r3, r4, r5, pc}
 8010278:	200036c4 	.word	0x200036c4

0801027c <__sccl>:
 801027c:	b570      	push	{r4, r5, r6, lr}
 801027e:	780b      	ldrb	r3, [r1, #0]
 8010280:	4604      	mov	r4, r0
 8010282:	2b5e      	cmp	r3, #94	; 0x5e
 8010284:	bf0b      	itete	eq
 8010286:	784b      	ldrbeq	r3, [r1, #1]
 8010288:	1c48      	addne	r0, r1, #1
 801028a:	1c88      	addeq	r0, r1, #2
 801028c:	2200      	movne	r2, #0
 801028e:	bf08      	it	eq
 8010290:	2201      	moveq	r2, #1
 8010292:	1e61      	subs	r1, r4, #1
 8010294:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8010298:	f801 2f01 	strb.w	r2, [r1, #1]!
 801029c:	42a9      	cmp	r1, r5
 801029e:	d1fb      	bne.n	8010298 <__sccl+0x1c>
 80102a0:	b90b      	cbnz	r3, 80102a6 <__sccl+0x2a>
 80102a2:	3801      	subs	r0, #1
 80102a4:	bd70      	pop	{r4, r5, r6, pc}
 80102a6:	f082 0201 	eor.w	r2, r2, #1
 80102aa:	54e2      	strb	r2, [r4, r3]
 80102ac:	4605      	mov	r5, r0
 80102ae:	4628      	mov	r0, r5
 80102b0:	f810 1b01 	ldrb.w	r1, [r0], #1
 80102b4:	292d      	cmp	r1, #45	; 0x2d
 80102b6:	d006      	beq.n	80102c6 <__sccl+0x4a>
 80102b8:	295d      	cmp	r1, #93	; 0x5d
 80102ba:	d0f3      	beq.n	80102a4 <__sccl+0x28>
 80102bc:	b909      	cbnz	r1, 80102c2 <__sccl+0x46>
 80102be:	4628      	mov	r0, r5
 80102c0:	e7f0      	b.n	80102a4 <__sccl+0x28>
 80102c2:	460b      	mov	r3, r1
 80102c4:	e7f1      	b.n	80102aa <__sccl+0x2e>
 80102c6:	786e      	ldrb	r6, [r5, #1]
 80102c8:	2e5d      	cmp	r6, #93	; 0x5d
 80102ca:	d0fa      	beq.n	80102c2 <__sccl+0x46>
 80102cc:	42b3      	cmp	r3, r6
 80102ce:	dcf8      	bgt.n	80102c2 <__sccl+0x46>
 80102d0:	3502      	adds	r5, #2
 80102d2:	4619      	mov	r1, r3
 80102d4:	3101      	adds	r1, #1
 80102d6:	428e      	cmp	r6, r1
 80102d8:	5462      	strb	r2, [r4, r1]
 80102da:	dcfb      	bgt.n	80102d4 <__sccl+0x58>
 80102dc:	1af1      	subs	r1, r6, r3
 80102de:	3901      	subs	r1, #1
 80102e0:	1c58      	adds	r0, r3, #1
 80102e2:	42b3      	cmp	r3, r6
 80102e4:	bfa8      	it	ge
 80102e6:	2100      	movge	r1, #0
 80102e8:	1843      	adds	r3, r0, r1
 80102ea:	e7e0      	b.n	80102ae <__sccl+0x32>

080102ec <_strtoul_l.constprop.0>:
 80102ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80102f0:	4f36      	ldr	r7, [pc, #216]	; (80103cc <_strtoul_l.constprop.0+0xe0>)
 80102f2:	4686      	mov	lr, r0
 80102f4:	460d      	mov	r5, r1
 80102f6:	4628      	mov	r0, r5
 80102f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80102fc:	5de6      	ldrb	r6, [r4, r7]
 80102fe:	f016 0608 	ands.w	r6, r6, #8
 8010302:	d1f8      	bne.n	80102f6 <_strtoul_l.constprop.0+0xa>
 8010304:	2c2d      	cmp	r4, #45	; 0x2d
 8010306:	d12f      	bne.n	8010368 <_strtoul_l.constprop.0+0x7c>
 8010308:	782c      	ldrb	r4, [r5, #0]
 801030a:	2601      	movs	r6, #1
 801030c:	1c85      	adds	r5, r0, #2
 801030e:	2b00      	cmp	r3, #0
 8010310:	d057      	beq.n	80103c2 <_strtoul_l.constprop.0+0xd6>
 8010312:	2b10      	cmp	r3, #16
 8010314:	d109      	bne.n	801032a <_strtoul_l.constprop.0+0x3e>
 8010316:	2c30      	cmp	r4, #48	; 0x30
 8010318:	d107      	bne.n	801032a <_strtoul_l.constprop.0+0x3e>
 801031a:	7828      	ldrb	r0, [r5, #0]
 801031c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8010320:	2858      	cmp	r0, #88	; 0x58
 8010322:	d149      	bne.n	80103b8 <_strtoul_l.constprop.0+0xcc>
 8010324:	786c      	ldrb	r4, [r5, #1]
 8010326:	2310      	movs	r3, #16
 8010328:	3502      	adds	r5, #2
 801032a:	f04f 38ff 	mov.w	r8, #4294967295
 801032e:	2700      	movs	r7, #0
 8010330:	fbb8 f8f3 	udiv	r8, r8, r3
 8010334:	fb03 f908 	mul.w	r9, r3, r8
 8010338:	ea6f 0909 	mvn.w	r9, r9
 801033c:	4638      	mov	r0, r7
 801033e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010342:	f1bc 0f09 	cmp.w	ip, #9
 8010346:	d814      	bhi.n	8010372 <_strtoul_l.constprop.0+0x86>
 8010348:	4664      	mov	r4, ip
 801034a:	42a3      	cmp	r3, r4
 801034c:	dd22      	ble.n	8010394 <_strtoul_l.constprop.0+0xa8>
 801034e:	2f00      	cmp	r7, #0
 8010350:	db1d      	blt.n	801038e <_strtoul_l.constprop.0+0xa2>
 8010352:	4580      	cmp	r8, r0
 8010354:	d31b      	bcc.n	801038e <_strtoul_l.constprop.0+0xa2>
 8010356:	d101      	bne.n	801035c <_strtoul_l.constprop.0+0x70>
 8010358:	45a1      	cmp	r9, r4
 801035a:	db18      	blt.n	801038e <_strtoul_l.constprop.0+0xa2>
 801035c:	fb00 4003 	mla	r0, r0, r3, r4
 8010360:	2701      	movs	r7, #1
 8010362:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010366:	e7ea      	b.n	801033e <_strtoul_l.constprop.0+0x52>
 8010368:	2c2b      	cmp	r4, #43	; 0x2b
 801036a:	bf04      	itt	eq
 801036c:	782c      	ldrbeq	r4, [r5, #0]
 801036e:	1c85      	addeq	r5, r0, #2
 8010370:	e7cd      	b.n	801030e <_strtoul_l.constprop.0+0x22>
 8010372:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010376:	f1bc 0f19 	cmp.w	ip, #25
 801037a:	d801      	bhi.n	8010380 <_strtoul_l.constprop.0+0x94>
 801037c:	3c37      	subs	r4, #55	; 0x37
 801037e:	e7e4      	b.n	801034a <_strtoul_l.constprop.0+0x5e>
 8010380:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010384:	f1bc 0f19 	cmp.w	ip, #25
 8010388:	d804      	bhi.n	8010394 <_strtoul_l.constprop.0+0xa8>
 801038a:	3c57      	subs	r4, #87	; 0x57
 801038c:	e7dd      	b.n	801034a <_strtoul_l.constprop.0+0x5e>
 801038e:	f04f 37ff 	mov.w	r7, #4294967295
 8010392:	e7e6      	b.n	8010362 <_strtoul_l.constprop.0+0x76>
 8010394:	2f00      	cmp	r7, #0
 8010396:	da07      	bge.n	80103a8 <_strtoul_l.constprop.0+0xbc>
 8010398:	2322      	movs	r3, #34	; 0x22
 801039a:	f8ce 3000 	str.w	r3, [lr]
 801039e:	f04f 30ff 	mov.w	r0, #4294967295
 80103a2:	b932      	cbnz	r2, 80103b2 <_strtoul_l.constprop.0+0xc6>
 80103a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103a8:	b106      	cbz	r6, 80103ac <_strtoul_l.constprop.0+0xc0>
 80103aa:	4240      	negs	r0, r0
 80103ac:	2a00      	cmp	r2, #0
 80103ae:	d0f9      	beq.n	80103a4 <_strtoul_l.constprop.0+0xb8>
 80103b0:	b107      	cbz	r7, 80103b4 <_strtoul_l.constprop.0+0xc8>
 80103b2:	1e69      	subs	r1, r5, #1
 80103b4:	6011      	str	r1, [r2, #0]
 80103b6:	e7f5      	b.n	80103a4 <_strtoul_l.constprop.0+0xb8>
 80103b8:	2430      	movs	r4, #48	; 0x30
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d1b5      	bne.n	801032a <_strtoul_l.constprop.0+0x3e>
 80103be:	2308      	movs	r3, #8
 80103c0:	e7b3      	b.n	801032a <_strtoul_l.constprop.0+0x3e>
 80103c2:	2c30      	cmp	r4, #48	; 0x30
 80103c4:	d0a9      	beq.n	801031a <_strtoul_l.constprop.0+0x2e>
 80103c6:	230a      	movs	r3, #10
 80103c8:	e7af      	b.n	801032a <_strtoul_l.constprop.0+0x3e>
 80103ca:	bf00      	nop
 80103cc:	0801092b 	.word	0x0801092b

080103d0 <_strtoul_r>:
 80103d0:	f7ff bf8c 	b.w	80102ec <_strtoul_l.constprop.0>

080103d4 <__submore>:
 80103d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103d8:	460c      	mov	r4, r1
 80103da:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80103dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80103e0:	4299      	cmp	r1, r3
 80103e2:	d11d      	bne.n	8010420 <__submore+0x4c>
 80103e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80103e8:	f7fc fe2a 	bl	800d040 <_malloc_r>
 80103ec:	b918      	cbnz	r0, 80103f6 <__submore+0x22>
 80103ee:	f04f 30ff 	mov.w	r0, #4294967295
 80103f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103fa:	63a3      	str	r3, [r4, #56]	; 0x38
 80103fc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8010400:	6360      	str	r0, [r4, #52]	; 0x34
 8010402:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8010406:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801040a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801040e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010412:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8010416:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801041a:	6020      	str	r0, [r4, #0]
 801041c:	2000      	movs	r0, #0
 801041e:	e7e8      	b.n	80103f2 <__submore+0x1e>
 8010420:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8010422:	0077      	lsls	r7, r6, #1
 8010424:	463a      	mov	r2, r7
 8010426:	f000 f843 	bl	80104b0 <_realloc_r>
 801042a:	4605      	mov	r5, r0
 801042c:	2800      	cmp	r0, #0
 801042e:	d0de      	beq.n	80103ee <__submore+0x1a>
 8010430:	eb00 0806 	add.w	r8, r0, r6
 8010434:	4601      	mov	r1, r0
 8010436:	4632      	mov	r2, r6
 8010438:	4640      	mov	r0, r8
 801043a:	f7fc fd7f 	bl	800cf3c <memcpy>
 801043e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8010442:	f8c4 8000 	str.w	r8, [r4]
 8010446:	e7e9      	b.n	801041c <__submore+0x48>

08010448 <_fstat_r>:
 8010448:	b538      	push	{r3, r4, r5, lr}
 801044a:	4d07      	ldr	r5, [pc, #28]	; (8010468 <_fstat_r+0x20>)
 801044c:	2300      	movs	r3, #0
 801044e:	4604      	mov	r4, r0
 8010450:	4608      	mov	r0, r1
 8010452:	4611      	mov	r1, r2
 8010454:	602b      	str	r3, [r5, #0]
 8010456:	f7f2 fd68 	bl	8002f2a <_fstat>
 801045a:	1c43      	adds	r3, r0, #1
 801045c:	d102      	bne.n	8010464 <_fstat_r+0x1c>
 801045e:	682b      	ldr	r3, [r5, #0]
 8010460:	b103      	cbz	r3, 8010464 <_fstat_r+0x1c>
 8010462:	6023      	str	r3, [r4, #0]
 8010464:	bd38      	pop	{r3, r4, r5, pc}
 8010466:	bf00      	nop
 8010468:	200036c4 	.word	0x200036c4

0801046c <_isatty_r>:
 801046c:	b538      	push	{r3, r4, r5, lr}
 801046e:	4d06      	ldr	r5, [pc, #24]	; (8010488 <_isatty_r+0x1c>)
 8010470:	2300      	movs	r3, #0
 8010472:	4604      	mov	r4, r0
 8010474:	4608      	mov	r0, r1
 8010476:	602b      	str	r3, [r5, #0]
 8010478:	f7f2 fd67 	bl	8002f4a <_isatty>
 801047c:	1c43      	adds	r3, r0, #1
 801047e:	d102      	bne.n	8010486 <_isatty_r+0x1a>
 8010480:	682b      	ldr	r3, [r5, #0]
 8010482:	b103      	cbz	r3, 8010486 <_isatty_r+0x1a>
 8010484:	6023      	str	r3, [r4, #0]
 8010486:	bd38      	pop	{r3, r4, r5, pc}
 8010488:	200036c4 	.word	0x200036c4

0801048c <__ascii_mbtowc>:
 801048c:	b082      	sub	sp, #8
 801048e:	b901      	cbnz	r1, 8010492 <__ascii_mbtowc+0x6>
 8010490:	a901      	add	r1, sp, #4
 8010492:	b142      	cbz	r2, 80104a6 <__ascii_mbtowc+0x1a>
 8010494:	b14b      	cbz	r3, 80104aa <__ascii_mbtowc+0x1e>
 8010496:	7813      	ldrb	r3, [r2, #0]
 8010498:	600b      	str	r3, [r1, #0]
 801049a:	7812      	ldrb	r2, [r2, #0]
 801049c:	1e10      	subs	r0, r2, #0
 801049e:	bf18      	it	ne
 80104a0:	2001      	movne	r0, #1
 80104a2:	b002      	add	sp, #8
 80104a4:	4770      	bx	lr
 80104a6:	4610      	mov	r0, r2
 80104a8:	e7fb      	b.n	80104a2 <__ascii_mbtowc+0x16>
 80104aa:	f06f 0001 	mvn.w	r0, #1
 80104ae:	e7f8      	b.n	80104a2 <__ascii_mbtowc+0x16>

080104b0 <_realloc_r>:
 80104b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104b4:	4680      	mov	r8, r0
 80104b6:	4614      	mov	r4, r2
 80104b8:	460e      	mov	r6, r1
 80104ba:	b921      	cbnz	r1, 80104c6 <_realloc_r+0x16>
 80104bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80104c0:	4611      	mov	r1, r2
 80104c2:	f7fc bdbd 	b.w	800d040 <_malloc_r>
 80104c6:	b92a      	cbnz	r2, 80104d4 <_realloc_r+0x24>
 80104c8:	f7fc fd4e 	bl	800cf68 <_free_r>
 80104cc:	4625      	mov	r5, r4
 80104ce:	4628      	mov	r0, r5
 80104d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104d4:	f000 f828 	bl	8010528 <_malloc_usable_size_r>
 80104d8:	4284      	cmp	r4, r0
 80104da:	4607      	mov	r7, r0
 80104dc:	d802      	bhi.n	80104e4 <_realloc_r+0x34>
 80104de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80104e2:	d812      	bhi.n	801050a <_realloc_r+0x5a>
 80104e4:	4621      	mov	r1, r4
 80104e6:	4640      	mov	r0, r8
 80104e8:	f7fc fdaa 	bl	800d040 <_malloc_r>
 80104ec:	4605      	mov	r5, r0
 80104ee:	2800      	cmp	r0, #0
 80104f0:	d0ed      	beq.n	80104ce <_realloc_r+0x1e>
 80104f2:	42bc      	cmp	r4, r7
 80104f4:	4622      	mov	r2, r4
 80104f6:	4631      	mov	r1, r6
 80104f8:	bf28      	it	cs
 80104fa:	463a      	movcs	r2, r7
 80104fc:	f7fc fd1e 	bl	800cf3c <memcpy>
 8010500:	4631      	mov	r1, r6
 8010502:	4640      	mov	r0, r8
 8010504:	f7fc fd30 	bl	800cf68 <_free_r>
 8010508:	e7e1      	b.n	80104ce <_realloc_r+0x1e>
 801050a:	4635      	mov	r5, r6
 801050c:	e7df      	b.n	80104ce <_realloc_r+0x1e>

0801050e <__ascii_wctomb>:
 801050e:	b149      	cbz	r1, 8010524 <__ascii_wctomb+0x16>
 8010510:	2aff      	cmp	r2, #255	; 0xff
 8010512:	bf85      	ittet	hi
 8010514:	238a      	movhi	r3, #138	; 0x8a
 8010516:	6003      	strhi	r3, [r0, #0]
 8010518:	700a      	strbls	r2, [r1, #0]
 801051a:	f04f 30ff 	movhi.w	r0, #4294967295
 801051e:	bf98      	it	ls
 8010520:	2001      	movls	r0, #1
 8010522:	4770      	bx	lr
 8010524:	4608      	mov	r0, r1
 8010526:	4770      	bx	lr

08010528 <_malloc_usable_size_r>:
 8010528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801052c:	1f18      	subs	r0, r3, #4
 801052e:	2b00      	cmp	r3, #0
 8010530:	bfbc      	itt	lt
 8010532:	580b      	ldrlt	r3, [r1, r0]
 8010534:	18c0      	addlt	r0, r0, r3
 8010536:	4770      	bx	lr

08010538 <_init>:
 8010538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801053a:	bf00      	nop
 801053c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801053e:	bc08      	pop	{r3}
 8010540:	469e      	mov	lr, r3
 8010542:	4770      	bx	lr

08010544 <_fini>:
 8010544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010546:	bf00      	nop
 8010548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801054a:	bc08      	pop	{r3}
 801054c:	469e      	mov	lr, r3
 801054e:	4770      	bx	lr
