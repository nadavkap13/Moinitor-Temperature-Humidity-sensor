
Temperture_Monitoring_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009620  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  080097b0  080097b0  000197b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009938  08009938  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009938  08009938  00019938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009940  08009940  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08009940  08009940  00019940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800994c  0800994c  0001994c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009954  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000334c  20000074  080099c8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200033c0  080099c8  000233c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000208db  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045de  00000000  00000000  0004097f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001970  00000000  00000000  00044f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017d8  00000000  00000000  000468d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000550d  00000000  00000000  000480a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d244  00000000  00000000  0004d5b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102b1b  00000000  00000000  0006a7f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016d314  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070a8  00000000  00000000  0016d364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009798 	.word	0x08009798

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08009798 	.word	0x08009798

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b974 	b.w	80004e4 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468e      	mov	lr, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14d      	bne.n	80002be <__udivmoddi4+0xaa>
 8000222:	428a      	cmp	r2, r1
 8000224:	4694      	mov	ip, r2
 8000226:	d969      	bls.n	80002fc <__udivmoddi4+0xe8>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b152      	cbz	r2, 8000244 <__udivmoddi4+0x30>
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	f1c2 0120 	rsb	r1, r2, #32
 8000236:	fa20 f101 	lsr.w	r1, r0, r1
 800023a:	fa0c fc02 	lsl.w	ip, ip, r2
 800023e:	ea41 0e03 	orr.w	lr, r1, r3
 8000242:	4094      	lsls	r4, r2
 8000244:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000248:	0c21      	lsrs	r1, r4, #16
 800024a:	fbbe f6f8 	udiv	r6, lr, r8
 800024e:	fa1f f78c 	uxth.w	r7, ip
 8000252:	fb08 e316 	mls	r3, r8, r6, lr
 8000256:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025a:	fb06 f107 	mul.w	r1, r6, r7
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295
 800026a:	f080 811f 	bcs.w	80004ac <__udivmoddi4+0x298>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 811c 	bls.w	80004ac <__udivmoddi4+0x298>
 8000274:	3e02      	subs	r6, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 f707 	mul.w	r7, r0, r7
 800028c:	42a7      	cmp	r7, r4
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x92>
 8000290:	eb1c 0404 	adds.w	r4, ip, r4
 8000294:	f100 33ff 	add.w	r3, r0, #4294967295
 8000298:	f080 810a 	bcs.w	80004b0 <__udivmoddi4+0x29c>
 800029c:	42a7      	cmp	r7, r4
 800029e:	f240 8107 	bls.w	80004b0 <__udivmoddi4+0x29c>
 80002a2:	4464      	add	r4, ip
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002aa:	1be4      	subs	r4, r4, r7
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa4>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xc2>
 80002c2:	2d00      	cmp	r5, #0
 80002c4:	f000 80ef 	beq.w	80004a6 <__udivmoddi4+0x292>
 80002c8:	2600      	movs	r6, #0
 80002ca:	e9c5 0100 	strd	r0, r1, [r5]
 80002ce:	4630      	mov	r0, r6
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f683 	clz	r6, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d14a      	bne.n	8000374 <__udivmoddi4+0x160>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd4>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80f9 	bhi.w	80004da <__udivmoddi4+0x2c6>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	469e      	mov	lr, r3
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa4>
 80002f6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa4>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xec>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 8092 	bne.w	800042e <__udivmoddi4+0x21a>
 800030a:	eba1 010c 	sub.w	r1, r1, ip
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2601      	movs	r6, #1
 8000318:	0c20      	lsrs	r0, r4, #16
 800031a:	fbb1 f3f7 	udiv	r3, r1, r7
 800031e:	fb07 1113 	mls	r1, r7, r3, r1
 8000322:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000326:	fb0e f003 	mul.w	r0, lr, r3
 800032a:	4288      	cmp	r0, r1
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x12c>
 800032e:	eb1c 0101 	adds.w	r1, ip, r1
 8000332:	f103 38ff 	add.w	r8, r3, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x12a>
 8000338:	4288      	cmp	r0, r1
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2c0>
 800033e:	4643      	mov	r3, r8
 8000340:	1a09      	subs	r1, r1, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb1 f0f7 	udiv	r0, r1, r7
 8000348:	fb07 1110 	mls	r1, r7, r0, r1
 800034c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x156>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x154>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2ca>
 8000368:	4608      	mov	r0, r1
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000372:	e79c      	b.n	80002ae <__udivmoddi4+0x9a>
 8000374:	f1c6 0720 	rsb	r7, r6, #32
 8000378:	40b3      	lsls	r3, r6
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa20 f407 	lsr.w	r4, r0, r7
 8000386:	fa01 f306 	lsl.w	r3, r1, r6
 800038a:	431c      	orrs	r4, r3
 800038c:	40f9      	lsrs	r1, r7
 800038e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000392:	fa00 f306 	lsl.w	r3, r0, r6
 8000396:	fbb1 f8f9 	udiv	r8, r1, r9
 800039a:	0c20      	lsrs	r0, r4, #16
 800039c:	fa1f fe8c 	uxth.w	lr, ip
 80003a0:	fb09 1118 	mls	r1, r9, r8, r1
 80003a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a8:	fb08 f00e 	mul.w	r0, r8, lr
 80003ac:	4288      	cmp	r0, r1
 80003ae:	fa02 f206 	lsl.w	r2, r2, r6
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b8>
 80003b4:	eb1c 0101 	adds.w	r1, ip, r1
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2bc>
 80003c0:	4288      	cmp	r0, r1
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2bc>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4461      	add	r1, ip
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d4:	fb09 1110 	mls	r1, r9, r0, r1
 80003d8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e0:	458e      	cmp	lr, r1
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1e2>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2b4>
 80003ee:	458e      	cmp	lr, r1
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2b4>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4461      	add	r1, ip
 80003f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fa:	fba0 9402 	umull	r9, r4, r0, r2
 80003fe:	eba1 010e 	sub.w	r1, r1, lr
 8000402:	42a1      	cmp	r1, r4
 8000404:	46c8      	mov	r8, r9
 8000406:	46a6      	mov	lr, r4
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x2a4>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x2a0>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x212>
 800040e:	ebb3 0208 	subs.w	r2, r3, r8
 8000412:	eb61 010e 	sbc.w	r1, r1, lr
 8000416:	fa01 f707 	lsl.w	r7, r1, r7
 800041a:	fa22 f306 	lsr.w	r3, r2, r6
 800041e:	40f1      	lsrs	r1, r6
 8000420:	431f      	orrs	r7, r3
 8000422:	e9c5 7100 	strd	r7, r1, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1c2 0320 	rsb	r3, r2, #32
 8000432:	40d8      	lsrs	r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	fa21 f303 	lsr.w	r3, r1, r3
 800043c:	4091      	lsls	r1, r2
 800043e:	4301      	orrs	r1, r0
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb3 f0f7 	udiv	r0, r3, r7
 800044c:	fb07 3610 	mls	r6, r7, r0, r3
 8000450:	0c0b      	lsrs	r3, r1, #16
 8000452:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000456:	fb00 f60e 	mul.w	r6, r0, lr
 800045a:	429e      	cmp	r6, r3
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x260>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b8>
 800046c:	429e      	cmp	r6, r3
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b8>
 8000470:	3802      	subs	r0, #2
 8000472:	4463      	add	r3, ip
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	b289      	uxth	r1, r1
 8000478:	fbb3 f6f7 	udiv	r6, r3, r7
 800047c:	fb07 3316 	mls	r3, r7, r6, r3
 8000480:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000484:	fb06 f30e 	mul.w	r3, r6, lr
 8000488:	428b      	cmp	r3, r1
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x28a>
 800048c:	eb1c 0101 	adds.w	r1, ip, r1
 8000490:	f106 38ff 	add.w	r8, r6, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000496:	428b      	cmp	r3, r1
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 800049a:	3e02      	subs	r6, #2
 800049c:	4461      	add	r1, ip
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0x104>
 80004a6:	462e      	mov	r6, r5
 80004a8:	4628      	mov	r0, r5
 80004aa:	e705      	b.n	80002b8 <__udivmoddi4+0xa4>
 80004ac:	4606      	mov	r6, r0
 80004ae:	e6e3      	b.n	8000278 <__udivmoddi4+0x64>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6f8      	b.n	80002a6 <__udivmoddi4+0x92>
 80004b4:	454b      	cmp	r3, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f8>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f8>
 80004c4:	4646      	mov	r6, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x28a>
 80004c8:	4620      	mov	r0, r4
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1e2>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x260>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b8>
 80004d4:	3b02      	subs	r3, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x12c>
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xde>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x156>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <_ZN3DHTC1EP12GPIO_TypeDeft>:

GPIO_InitTypeDef gpioStruct;
extern uint8_t DHT_data[5];
extern TIM_HandleTypeDef htim1;

DHT::DHT(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	4613      	mov	r3, r2
 80004f4:	80fb      	strh	r3, [r7, #6]
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	2200      	movs	r2, #0
 80004fa:	60da      	str	r2, [r3, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	2200      	movs	r2, #0
 8000500:	741a      	strb	r2, [r3, #16]
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	2200      	movs	r2, #0
 8000506:	745a      	strb	r2, [r3, #17]
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	2200      	movs	r2, #0
 800050c:	749a      	strb	r2, [r3, #18]
	_GPIOx = GPIOx;
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	68ba      	ldr	r2, [r7, #8]
 8000512:	601a      	str	r2, [r3, #0]
	_GPIO_Pin = GPIO_Pin;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	88fa      	ldrh	r2, [r7, #6]
 8000518:	809a      	strh	r2, [r3, #4]
	dhtPin = WAKING;
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	2200      	movs	r2, #0
 800051e:	719a      	strb	r2, [r3, #6]
	bitcount=0;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]

}
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	4618      	mov	r0, r3
 800052a:	3714      	adds	r7, #20
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr

08000534 <_ZN3DHT11setGpioExtiEv>:

 void DHT::setGpioExti()
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpioStruct = {0};
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]
	gpioStruct.Pin = _GPIO_Pin;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	889b      	ldrh	r3, [r3, #4]
 8000550:	60fb      	str	r3, [r7, #12]
	gpioStruct.Mode = GPIO_MODE_IT_FALLING;
 8000552:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000556:	613b      	str	r3, [r7, #16]
	gpioStruct.Pull = GPIO_PULLUP;
 8000558:	2301      	movs	r3, #1
 800055a:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(_GPIOx, &gpioStruct);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f107 020c 	add.w	r2, r7, #12
 8000564:	4611      	mov	r1, r2
 8000566:	4618      	mov	r0, r3
 8000568:	f001 f91e 	bl	80017a8 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800056c:	2017      	movs	r0, #23
 800056e:	f001 f88d 	bl	800168c <HAL_NVIC_EnableIRQ>
}
 8000572:	bf00      	nop
 8000574:	3720      	adds	r7, #32
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
	...

0800057c <_ZN3DHT13Dht_readAsyncEv>:

void DHT::Dht_readAsync()
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpioStruct;
	gpioStruct.Pin = pin_4_Pin;
 8000584:	2320      	movs	r3, #32
 8000586:	60fb      	str	r3, [r7, #12]
	gpioStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000588:	2301      	movs	r3, #1
 800058a:	613b      	str	r3, [r7, #16]
	gpioStruct.Pull = GPIO_NOPULL;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
	gpioStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000590:	2300      	movs	r3, #0
 8000592:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(pin_4_GPIO_Port, &gpioStruct);
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	4619      	mov	r1, r3
 800059a:	480b      	ldr	r0, [pc, #44]	; (80005c8 <_ZN3DHT13Dht_readAsyncEv+0x4c>)
 800059c:	f001 f904 	bl	80017a8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(pin_4_GPIO_Port, pin_4_Pin,GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2120      	movs	r1, #32
 80005a4:	4808      	ldr	r0, [pc, #32]	; (80005c8 <_ZN3DHT13Dht_readAsyncEv+0x4c>)
 80005a6:	f001 faa9 	bl	8001afc <HAL_GPIO_WritePin>
	HAL_Delay(18);
 80005aa:	2012      	movs	r0, #18
 80005ac:	f000 ff76 	bl	800149c <HAL_Delay>
	HAL_GPIO_WritePin(pin_4_GPIO_Port, pin_4_Pin,GPIO_PIN_SET);
 80005b0:	2201      	movs	r2, #1
 80005b2:	2120      	movs	r1, #32
 80005b4:	4804      	ldr	r0, [pc, #16]	; (80005c8 <_ZN3DHT13Dht_readAsyncEv+0x4c>)
 80005b6:	f001 faa1 	bl	8001afc <HAL_GPIO_WritePin>
	setGpioExti();
 80005ba:	6878      	ldr	r0, [r7, #4]
 80005bc:	f7ff ffba 	bl	8000534 <_ZN3DHT11setGpioExtiEv>

}
 80005c0:	bf00      	nop
 80005c2:	3720      	adds	r7, #32
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	48000400 	.word	0x48000400

080005cc <_ZN3DHT19Dht_onGpioInterruptEt>:

void DHT::Dht_onGpioInterrupt(uint16_t pin)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	460b      	mov	r3, r1
 80005d6:	807b      	strh	r3, [r7, #2]
	uint32_t counter;
	if(_GPIO_Pin==pin){
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	889b      	ldrh	r3, [r3, #4]
 80005dc:	887a      	ldrh	r2, [r7, #2]
 80005de:	429a      	cmp	r2, r3
 80005e0:	f040 8086 	bne.w	80006f0 <_ZN3DHT19Dht_onGpioInterruptEt+0x124>
		switch (dhtPin){
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	799b      	ldrb	r3, [r3, #6]
 80005e8:	2b04      	cmp	r3, #4
 80005ea:	d87d      	bhi.n	80006e8 <_ZN3DHT19Dht_onGpioInterruptEt+0x11c>
 80005ec:	a201      	add	r2, pc, #4	; (adr r2, 80005f4 <_ZN3DHT19Dht_onGpioInterruptEt+0x28>)
 80005ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f2:	bf00      	nop
 80005f4:	08000609 	.word	0x08000609
 80005f8:	08000611 	.word	0x08000611
 80005fc:	08000619 	.word	0x08000619
 8000600:	08000629 	.word	0x08000629
 8000604:	080006e1 	.word	0x080006e1
		case WAKING:
			dhtPin=WAIT_RESPONSE_START;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2201      	movs	r2, #1
 800060c:	719a      	strb	r2, [r3, #6]
			break;
 800060e:	e06b      	b.n	80006e8 <_ZN3DHT19Dht_onGpioInterruptEt+0x11c>
		case WAIT_RESPONSE_START:
			dhtPin=WAIT_RESPONSE_STOP;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2202      	movs	r2, #2
 8000614:	719a      	strb	r2, [r3, #6]
			break;
 8000616:	e067      	b.n	80006e8 <_ZN3DHT19Dht_onGpioInterruptEt+0x11c>
		case WAIT_RESPONSE_STOP:
			counter = __HAL_TIM_GET_COUNTER(&htim1);
 8000618:	4b38      	ldr	r3, [pc, #224]	; (80006fc <_ZN3DHT19Dht_onGpioInterruptEt+0x130>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800061e:	60fb      	str	r3, [r7, #12]
			dhtPin=RECEIVING_BITS;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2203      	movs	r2, #3
 8000624:	719a      	strb	r2, [r3, #6]
			break;
 8000626:	e05f      	b.n	80006e8 <_ZN3DHT19Dht_onGpioInterruptEt+0x11c>
		case RECEIVING_BITS:
			counter = __HAL_TIM_GET_COUNTER(&htim1);
 8000628:	4b34      	ldr	r3, [pc, #208]	; (80006fc <_ZN3DHT19Dht_onGpioInterruptEt+0x130>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800062e:	60fb      	str	r3, [r7, #12]
			if(counter<=100)  {
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	2b64      	cmp	r3, #100	; 0x64
 8000634:	d812      	bhi.n	800065c <_ZN3DHT19Dht_onGpioInterruptEt+0x90>
				dht_byte&= ~(1<<(7-p));
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	7c1b      	ldrb	r3, [r3, #16]
 800063a:	b25a      	sxtb	r2, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	7c9b      	ldrb	r3, [r3, #18]
 8000640:	f1c3 0307 	rsb	r3, r3, #7
 8000644:	2101      	movs	r1, #1
 8000646:	fa01 f303 	lsl.w	r3, r1, r3
 800064a:	b25b      	sxtb	r3, r3
 800064c:	43db      	mvns	r3, r3
 800064e:	b25b      	sxtb	r3, r3
 8000650:	4013      	ands	r3, r2
 8000652:	b25b      	sxtb	r3, r3
 8000654:	b2da      	uxtb	r2, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	741a      	strb	r2, [r3, #16]
 800065a:	e00f      	b.n	800067c <_ZN3DHT19Dht_onGpioInterruptEt+0xb0>
			}
			else {
				dht_byte|= (1<<(7-p));
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	7c1b      	ldrb	r3, [r3, #16]
 8000660:	b25a      	sxtb	r2, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	7c9b      	ldrb	r3, [r3, #18]
 8000666:	f1c3 0307 	rsb	r3, r3, #7
 800066a:	2101      	movs	r1, #1
 800066c:	fa01 f303 	lsl.w	r3, r1, r3
 8000670:	b25b      	sxtb	r3, r3
 8000672:	4313      	orrs	r3, r2
 8000674:	b25b      	sxtb	r3, r3
 8000676:	b2da      	uxtb	r2, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	741a      	strb	r2, [r3, #16]
			}

			p++;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	7c9b      	ldrb	r3, [r3, #18]
 8000680:	3301      	adds	r3, #1
 8000682:	b2da      	uxtb	r2, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	749a      	strb	r2, [r3, #18]
			bitcount++;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	689b      	ldr	r3, [r3, #8]
 800068c:	1c5a      	adds	r2, r3, #1
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	609a      	str	r2, [r3, #8]

			if(bitcount%8==0){
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	689b      	ldr	r3, [r3, #8]
 8000696:	f003 0307 	and.w	r3, r3, #7
 800069a:	2b00      	cmp	r3, #0
 800069c:	d112      	bne.n	80006c4 <_ZN3DHT19Dht_onGpioInterruptEt+0xf8>
				DHT_data[m]=dht_byte;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	7c5b      	ldrb	r3, [r3, #17]
 80006a2:	461a      	mov	r2, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	7c19      	ldrb	r1, [r3, #16]
 80006a8:	4b15      	ldr	r3, [pc, #84]	; (8000700 <_ZN3DHT19Dht_onGpioInterruptEt+0x134>)
 80006aa:	5499      	strb	r1, [r3, r2]
				dht_byte=0;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2200      	movs	r2, #0
 80006b0:	741a      	strb	r2, [r3, #16]
				m++;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	7c5b      	ldrb	r3, [r3, #17]
 80006b6:	3301      	adds	r3, #1
 80006b8:	b2da      	uxtb	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	745a      	strb	r2, [r3, #17]
				p=0;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	2200      	movs	r2, #0
 80006c2:	749a      	strb	r2, [r3, #18]
			}

			if(bitcount>=40){
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	2b27      	cmp	r3, #39	; 0x27
 80006ca:	dd0c      	ble.n	80006e6 <_ZN3DHT19Dht_onGpioInterruptEt+0x11a>
				bitcount=0;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
				m=0;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2200      	movs	r2, #0
 80006d6:	745a      	strb	r2, [r3, #17]

			dhtPin=DATA_RECEIVED;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2204      	movs	r2, #4
 80006dc:	719a      	strb	r2, [r3, #6]
			}
			break;
 80006de:	e002      	b.n	80006e6 <_ZN3DHT19Dht_onGpioInterruptEt+0x11a>
		case DATA_RECEIVED:
			counter = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
			break;
 80006e4:	e000      	b.n	80006e8 <_ZN3DHT19Dht_onGpioInterruptEt+0x11c>
			break;
 80006e6:	bf00      	nop
		}
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 80006e8:	4b04      	ldr	r3, [pc, #16]	; (80006fc <_ZN3DHT19Dht_onGpioInterruptEt+0x130>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2200      	movs	r2, #0
 80006ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 80006f0:	bf00      	nop
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	20000150 	.word	0x20000150
 8000700:	200002dc 	.word	0x200002dc

08000704 <_ZN12CliContainerD1Ev>:
class CliContainer{
private:
	clicommand_entry * commands[20];
	int funcounter = 0;
public:
	~CliContainer(){}
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4618      	mov	r0, r3
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
	...

0800071c <_ZN12CliContainer9doCommandEPKcS1_>:
		commands[funcounter]->CommandName = CommandName;
		commands[funcounter]->command = clicommand;
		funcounter++;
	}

	void doCommand( const char * cmd, const char * param){
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
		for (int j = 0; j <funcounter; j++) {
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000730:	697a      	ldr	r2, [r7, #20]
 8000732:	429a      	cmp	r2, r3
 8000734:	da1e      	bge.n	8000774 <_ZN12CliContainer9doCommandEPKcS1_+0x58>
			if (strcmp(cmd,commands[j]->CommandName) == 0) {
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	697a      	ldr	r2, [r7, #20]
 800073a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4619      	mov	r1, r3
 8000742:	68b8      	ldr	r0, [r7, #8]
 8000744:	f7ff fd44 	bl	80001d0 <strcmp>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d10e      	bne.n	800076c <_ZN12CliContainer9doCommandEPKcS1_+0x50>
				commands[j]->command->doCommand(param);
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	697a      	ldr	r2, [r7, #20]
 8000752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000756:	6858      	ldr	r0, [r3, #4]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	697a      	ldr	r2, [r7, #20]
 800075c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	6879      	ldr	r1, [r7, #4]
 8000768:	4798      	blx	r3
				return;
 800076a:	e006      	b.n	800077a <_ZN12CliContainer9doCommandEPKcS1_+0x5e>
		for (int j = 0; j <funcounter; j++) {
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	3301      	adds	r3, #1
 8000770:	617b      	str	r3, [r7, #20]
 8000772:	e7db      	b.n	800072c <_ZN12CliContainer9doCommandEPKcS1_+0x10>
			}

		}
		printf("Invalid command\r\n");
 8000774:	4802      	ldr	r0, [pc, #8]	; (8000780 <_ZN12CliContainer9doCommandEPKcS1_+0x64>)
 8000776:	f008 fb7f 	bl	8008e78 <puts>
	}
 800077a:	3718      	adds	r7, #24
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	080097b0 	.word	0x080097b0

08000784 <_ZN12CliContainerC1Ev>:
class CliContainer{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2200      	movs	r2, #0
 8000790:	651a      	str	r2, [r3, #80]	; 0x50
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4618      	mov	r0, r3
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <_Z8commTaskv>:
int cmdcount = 0;
int cmdprint = 0;



int commTask() {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 80007a6:	1db9      	adds	r1, r7, #6
 80007a8:	230a      	movs	r3, #10
 80007aa:	2201      	movs	r2, #1
 80007ac:	4839      	ldr	r0, [pc, #228]	; (8000894 <_Z8commTaskv+0xf4>)
 80007ae:	f003 fefd 	bl	80045ac <HAL_UART_Receive>
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK) {
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d025      	beq.n	8000808 <_Z8commTaskv+0x68>
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0) {
 80007bc:	4b35      	ldr	r3, [pc, #212]	; (8000894 <_Z8commTaskv+0xf4>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	69db      	ldr	r3, [r3, #28]
 80007c2:	f003 0308 	and.w	r3, r3, #8
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	bf14      	ite	ne
 80007ca:	2301      	movne	r3, #1
 80007cc:	2300      	moveq	r3, #0
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d003      	beq.n	80007dc <_Z8commTaskv+0x3c>
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 80007d4:	4b2f      	ldr	r3, [pc, #188]	; (8000894 <_Z8commTaskv+0xf4>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2208      	movs	r2, #8
 80007da:	621a      	str	r2, [r3, #32]
		}

		// here we have a time to print the command
		while (cmdprint < cmdcount) {
 80007dc:	4b2e      	ldr	r3, [pc, #184]	; (8000898 <_Z8commTaskv+0xf8>)
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	4b2e      	ldr	r3, [pc, #184]	; (800089c <_Z8commTaskv+0xfc>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	da0d      	bge.n	8000804 <_Z8commTaskv+0x64>
			HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 80007e8:	4b2b      	ldr	r3, [pc, #172]	; (8000898 <_Z8commTaskv+0xf8>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	1c5a      	adds	r2, r3, #1
 80007ee:	492a      	ldr	r1, [pc, #168]	; (8000898 <_Z8commTaskv+0xf8>)
 80007f0:	600a      	str	r2, [r1, #0]
 80007f2:	4a2b      	ldr	r2, [pc, #172]	; (80008a0 <_Z8commTaskv+0x100>)
 80007f4:	1899      	adds	r1, r3, r2
 80007f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007fa:	2201      	movs	r2, #1
 80007fc:	4825      	ldr	r0, [pc, #148]	; (8000894 <_Z8commTaskv+0xf4>)
 80007fe:	f003 fe41 	bl	8004484 <HAL_UART_Transmit>
		while (cmdprint < cmdcount) {
 8000802:	e7eb      	b.n	80007dc <_Z8commTaskv+0x3c>
		}

		return 0;
 8000804:	2300      	movs	r3, #0
 8000806:	e040      	b.n	800088a <_Z8commTaskv+0xea>
	}

	if (ch != '\r' && ch != '\n') {
 8000808:	79bb      	ldrb	r3, [r7, #6]
 800080a:	2b0d      	cmp	r3, #13
 800080c:	d016      	beq.n	800083c <_Z8commTaskv+0x9c>
 800080e:	79bb      	ldrb	r3, [r7, #6]
 8000810:	2b0a      	cmp	r3, #10
 8000812:	d013      	beq.n	800083c <_Z8commTaskv+0x9c>
		//HAL_UART_Transmit(&huart2, &ch, 1, 0xFFFF);

		if (cmdcount >= MAX_BUFFER_LENGTH) {
 8000814:	4b21      	ldr	r3, [pc, #132]	; (800089c <_Z8commTaskv+0xfc>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b63      	cmp	r3, #99	; 0x63
 800081a:	dd05      	ble.n	8000828 <_Z8commTaskv+0x88>
			cmdcount = 0;
 800081c:	4b1f      	ldr	r3, [pc, #124]	; (800089c <_Z8commTaskv+0xfc>)
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
			cmdprint = 0;
 8000822:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <_Z8commTaskv+0xf8>)
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 8000828:	4b1c      	ldr	r3, [pc, #112]	; (800089c <_Z8commTaskv+0xfc>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	1c5a      	adds	r2, r3, #1
 800082e:	491b      	ldr	r1, [pc, #108]	; (800089c <_Z8commTaskv+0xfc>)
 8000830:	600a      	str	r2, [r1, #0]
 8000832:	79b9      	ldrb	r1, [r7, #6]
 8000834:	4a1a      	ldr	r2, [pc, #104]	; (80008a0 <_Z8commTaskv+0x100>)
 8000836:	54d1      	strb	r1, [r2, r3]
		return 0;
 8000838:	2300      	movs	r3, #0
 800083a:	e026      	b.n	800088a <_Z8commTaskv+0xea>
	}

	// here we have a time to print the command
	while (cmdprint < cmdcount) {
 800083c:	4b16      	ldr	r3, [pc, #88]	; (8000898 <_Z8commTaskv+0xf8>)
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	4b16      	ldr	r3, [pc, #88]	; (800089c <_Z8commTaskv+0xfc>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	429a      	cmp	r2, r3
 8000846:	da0d      	bge.n	8000864 <_Z8commTaskv+0xc4>
		HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8000848:	4b13      	ldr	r3, [pc, #76]	; (8000898 <_Z8commTaskv+0xf8>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	1c5a      	adds	r2, r3, #1
 800084e:	4912      	ldr	r1, [pc, #72]	; (8000898 <_Z8commTaskv+0xf8>)
 8000850:	600a      	str	r2, [r1, #0]
 8000852:	4a13      	ldr	r2, [pc, #76]	; (80008a0 <_Z8commTaskv+0x100>)
 8000854:	1899      	adds	r1, r3, r2
 8000856:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800085a:	2201      	movs	r2, #1
 800085c:	480d      	ldr	r0, [pc, #52]	; (8000894 <_Z8commTaskv+0xf4>)
 800085e:	f003 fe11 	bl	8004484 <HAL_UART_Transmit>
	while (cmdprint < cmdcount) {
 8000862:	e7eb      	b.n	800083c <_Z8commTaskv+0x9c>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n", 2, 0xFFFF);
 8000864:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000868:	2202      	movs	r2, #2
 800086a:	490e      	ldr	r1, [pc, #56]	; (80008a4 <_Z8commTaskv+0x104>)
 800086c:	4809      	ldr	r0, [pc, #36]	; (8000894 <_Z8commTaskv+0xf4>)
 800086e:	f003 fe09 	bl	8004484 <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 8000872:	4b0a      	ldr	r3, [pc, #40]	; (800089c <_Z8commTaskv+0xfc>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <_Z8commTaskv+0x100>)
 8000878:	2100      	movs	r1, #0
 800087a:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 800087c:	4b07      	ldr	r3, [pc, #28]	; (800089c <_Z8commTaskv+0xfc>)
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
	cmdprint = 0;
 8000882:	4b05      	ldr	r3, [pc, #20]	; (8000898 <_Z8commTaskv+0xf8>)
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
	return 1;
 8000888:	2301      	movs	r3, #1
}
 800088a:	4618      	mov	r0, r3
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000234 	.word	0x20000234
 8000898:	2000014c 	.word	0x2000014c
 800089c:	20000148 	.word	0x20000148
 80008a0:	20000090 	.word	0x20000090
 80008a4:	080097c4 	.word	0x080097c4

080008a8 <_Z13handleCommandv>:

void handleCommand() {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	; 0x28
 80008ac:	af00      	add	r7, sp, #0
	char cmd[20];
	char param[20];

	container.doCommand(cmd,param);
 80008ae:	463a      	mov	r2, r7
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	4803      	ldr	r0, [pc, #12]	; (80008c4 <_Z13handleCommandv+0x1c>)
 80008b8:	f7ff ff30 	bl	800071c <_ZN12CliContainer9doCommandEPKcS1_>
}
 80008bc:	bf00      	nop
 80008be:	3728      	adds	r7, #40	; 0x28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	200000f4 	.word	0x200000f4

080008c8 <_Z41__static_initialization_and_destruction_0ii>:
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d107      	bne.n	80008e8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008de:	4293      	cmp	r3, r2
 80008e0:	d102      	bne.n	80008e8 <_Z41__static_initialization_and_destruction_0ii+0x20>
CliContainer container;
 80008e2:	4809      	ldr	r0, [pc, #36]	; (8000908 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80008e4:	f7ff ff4e 	bl	8000784 <_ZN12CliContainerC1Ev>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d107      	bne.n	80008fe <_Z41__static_initialization_and_destruction_0ii+0x36>
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d102      	bne.n	80008fe <_Z41__static_initialization_and_destruction_0ii+0x36>
 80008f8:	4803      	ldr	r0, [pc, #12]	; (8000908 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80008fa:	f7ff ff03 	bl	8000704 <_ZN12CliContainerD1Ev>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200000f4 	.word	0x200000f4

0800090c <_GLOBAL__sub_I_cmdbuffer>:
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
 8000910:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000914:	2001      	movs	r0, #1
 8000916:	f7ff ffd7 	bl	80008c8 <_Z41__static_initialization_and_destruction_0ii>
 800091a:	bd80      	pop	{r7, pc}

0800091c <_GLOBAL__sub_D_cmdbuffer>:
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
 8000920:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000924:	2000      	movs	r0, #0
 8000926:	f7ff ffcf 	bl	80008c8 <_Z41__static_initialization_and_destruction_0ii>
 800092a:	bd80      	pop	{r7, pc}

0800092c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000930:	f000 fd74 	bl	800141c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000934:	f000 f846 	bl	80009c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000938:	f000 f9aa 	bl	8000c90 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800093c:	f000 f978 	bl	8000c30 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000940:	f000 f8e6 	bl	8000b10 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000944:	f000 f93e 	bl	8000bc4 <MX_TIM6_Init>
  MX_TIM1_Init();
 8000948:	f000 f88e 	bl	8000a68 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800094c:	f004 ff5a 	bl	8005804 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of DHT_MONITOR */
  DHT_MONITORHandle = osSemaphoreNew(1, 1, &DHT_MONITOR_attributes);
 8000950:	4a11      	ldr	r2, [pc, #68]	; (8000998 <main+0x6c>)
 8000952:	2101      	movs	r1, #1
 8000954:	2001      	movs	r0, #1
 8000956:	f005 f84c 	bl	80059f2 <osSemaphoreNew>
 800095a:	4603      	mov	r3, r0
 800095c:	4a0f      	ldr	r2, [pc, #60]	; (800099c <main+0x70>)
 800095e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of READ_TEMP */
  READ_TEMPHandle = osThreadNew(READ_TEMP_func, NULL, &READ_TEMP_attributes);
 8000960:	4a0f      	ldr	r2, [pc, #60]	; (80009a0 <main+0x74>)
 8000962:	2100      	movs	r1, #0
 8000964:	480f      	ldr	r0, [pc, #60]	; (80009a4 <main+0x78>)
 8000966:	f004 ff97 	bl	8005898 <osThreadNew>
 800096a:	4603      	mov	r3, r0
 800096c:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <main+0x7c>)
 800096e:	6013      	str	r3, [r2, #0]

  /* creation of COMTASK */
  COMTASKHandle = osThreadNew(comtask_func, NULL, &COMTASK_attributes);
 8000970:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <main+0x80>)
 8000972:	2100      	movs	r1, #0
 8000974:	480e      	ldr	r0, [pc, #56]	; (80009b0 <main+0x84>)
 8000976:	f004 ff8f 	bl	8005898 <osThreadNew>
 800097a:	4603      	mov	r3, r0
 800097c:	4a0d      	ldr	r2, [pc, #52]	; (80009b4 <main+0x88>)
 800097e:	6013      	str	r3, [r2, #0]

  /* creation of MONITOR_TEMP */
  MONITOR_TEMPHandle = osThreadNew(monitor_func, NULL, &MONITOR_TEMP_attributes);
 8000980:	4a0d      	ldr	r2, [pc, #52]	; (80009b8 <main+0x8c>)
 8000982:	2100      	movs	r1, #0
 8000984:	480d      	ldr	r0, [pc, #52]	; (80009bc <main+0x90>)
 8000986:	f004 ff87 	bl	8005898 <osThreadNew>
 800098a:	4603      	mov	r3, r0
 800098c:	4a0c      	ldr	r2, [pc, #48]	; (80009c0 <main+0x94>)
 800098e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000990:	f004 ff5c 	bl	800584c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000994:	e7fe      	b.n	8000994 <main+0x68>
 8000996:	bf00      	nop
 8000998:	0800987c 	.word	0x0800987c
 800099c:	200002c4 	.word	0x200002c4
 80009a0:	08009810 	.word	0x08009810
 80009a4:	08000e59 	.word	0x08000e59
 80009a8:	200002b8 	.word	0x200002b8
 80009ac:	08009834 	.word	0x08009834
 80009b0:	08000e79 	.word	0x08000e79
 80009b4:	200002bc 	.word	0x200002bc
 80009b8:	08009858 	.word	0x08009858
 80009bc:	08000e9d 	.word	0x08000e9d
 80009c0:	200002c0 	.word	0x200002c0

080009c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b096      	sub	sp, #88	; 0x58
 80009c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	2244      	movs	r2, #68	; 0x44
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f008 f9da 	bl	8008d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d8:	463b      	mov	r3, r7
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009ea:	f001 f8c5 	bl	8001b78 <HAL_PWREx_ControlVoltageScaling>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009f4:	f000 f9e6 	bl	8000dc4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009f8:	2302      	movs	r3, #2
 80009fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a00:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a02:	2310      	movs	r3, #16
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a06:	2302      	movs	r3, #2
 8000a08:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a12:	230a      	movs	r3, #10
 8000a14:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a16:	2307      	movs	r3, #7
 8000a18:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	4618      	mov	r0, r3
 8000a28:	f001 f8fc 	bl	8001c24 <HAL_RCC_OscConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a32:	f000 f9c7 	bl	8000dc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a36:	230f      	movs	r3, #15
 8000a38:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a4a:	463b      	mov	r3, r7
 8000a4c:	2104      	movs	r1, #4
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f001 fcc4 	bl	80023dc <HAL_RCC_ClockConfig>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a5a:	f000 f9b3 	bl	8000dc4 <Error_Handler>
  }
}
 8000a5e:	bf00      	nop
 8000a60:	3758      	adds	r7, #88	; 0x58
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b088      	sub	sp, #32
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a6e:	f107 0310 	add.w	r3, r7, #16
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a86:	4b20      	ldr	r3, [pc, #128]	; (8000b08 <MX_TIM1_Init+0xa0>)
 8000a88:	4a20      	ldr	r2, [pc, #128]	; (8000b0c <MX_TIM1_Init+0xa4>)
 8000a8a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8000a8c:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <MX_TIM1_Init+0xa0>)
 8000a8e:	224f      	movs	r2, #79	; 0x4f
 8000a90:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a92:	4b1d      	ldr	r3, [pc, #116]	; (8000b08 <MX_TIM1_Init+0xa0>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a98:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <MX_TIM1_Init+0xa0>)
 8000a9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a9e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa0:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <MX_TIM1_Init+0xa0>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000aa6:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <MX_TIM1_Init+0xa0>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aac:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <MX_TIM1_Init+0xa0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ab2:	4815      	ldr	r0, [pc, #84]	; (8000b08 <MX_TIM1_Init+0xa0>)
 8000ab4:	f002 fba4 	bl	8003200 <HAL_TIM_Base_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000abe:	f000 f981 	bl	8000dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ac8:	f107 0310 	add.w	r3, r7, #16
 8000acc:	4619      	mov	r1, r3
 8000ace:	480e      	ldr	r0, [pc, #56]	; (8000b08 <MX_TIM1_Init+0xa0>)
 8000ad0:	f002 fee8 	bl	80038a4 <HAL_TIM_ConfigClockSource>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000ada:	f000 f973 	bl	8000dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	4619      	mov	r1, r3
 8000aee:	4806      	ldr	r0, [pc, #24]	; (8000b08 <MX_TIM1_Init+0xa0>)
 8000af0:	f003 fbd4 	bl	800429c <HAL_TIMEx_MasterConfigSynchronization>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000afa:	f000 f963 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	3720      	adds	r7, #32
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000150 	.word	0x20000150
 8000b0c:	40012c00 	.word	0x40012c00

08000b10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b22:	463b      	mov	r3, r7
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
 8000b30:	615a      	str	r2, [r3, #20]
 8000b32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b34:	4b21      	ldr	r3, [pc, #132]	; (8000bbc <MX_TIM3_Init+0xac>)
 8000b36:	4a22      	ldr	r2, [pc, #136]	; (8000bc0 <MX_TIM3_Init+0xb0>)
 8000b38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 8000b3a:	4b20      	ldr	r3, [pc, #128]	; (8000bbc <MX_TIM3_Init+0xac>)
 8000b3c:	f240 321f 	movw	r2, #799	; 0x31f
 8000b40:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b42:	4b1e      	ldr	r3, [pc, #120]	; (8000bbc <MX_TIM3_Init+0xac>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 8000b48:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <MX_TIM3_Init+0xac>)
 8000b4a:	22c8      	movs	r2, #200	; 0xc8
 8000b4c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b4e:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <MX_TIM3_Init+0xac>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b54:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <MX_TIM3_Init+0xac>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b5a:	4818      	ldr	r0, [pc, #96]	; (8000bbc <MX_TIM3_Init+0xac>)
 8000b5c:	f002 fc18 	bl	8003390 <HAL_TIM_PWM_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000b66:	f000 f92d 	bl	8000dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	4619      	mov	r1, r3
 8000b78:	4810      	ldr	r0, [pc, #64]	; (8000bbc <MX_TIM3_Init+0xac>)
 8000b7a:	f003 fb8f 	bl	800429c <HAL_TIMEx_MasterConfigSynchronization>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000b84:	f000 f91e 	bl	8000dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b88:	2360      	movs	r3, #96	; 0x60
 8000b8a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b98:	463b      	mov	r3, r7
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4807      	ldr	r0, [pc, #28]	; (8000bbc <MX_TIM3_Init+0xac>)
 8000ba0:	f002 fd6c 	bl	800367c <HAL_TIM_PWM_ConfigChannel>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000baa:	f000 f90b 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bae:	4803      	ldr	r0, [pc, #12]	; (8000bbc <MX_TIM3_Init+0xac>)
 8000bb0:	f000 fa36 	bl	8001020 <HAL_TIM_MspPostInit>

}
 8000bb4:	bf00      	nop
 8000bb6:	3728      	adds	r7, #40	; 0x28
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	2000019c 	.word	0x2000019c
 8000bc0:	40000400 	.word	0x40000400

08000bc4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MX_TIM6_Init+0x64>)
 8000bd6:	4a15      	ldr	r2, [pc, #84]	; (8000c2c <MX_TIM6_Init+0x68>)
 8000bd8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <MX_TIM6_Init+0x64>)
 8000bdc:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000be0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_TIM6_Init+0x64>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <MX_TIM6_Init+0x64>)
 8000bea:	220a      	movs	r2, #10
 8000bec:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_TIM6_Init+0x64>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000bf4:	480c      	ldr	r0, [pc, #48]	; (8000c28 <MX_TIM6_Init+0x64>)
 8000bf6:	f002 fb03 	bl	8003200 <HAL_TIM_Base_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000c00:	f000 f8e0 	bl	8000dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c04:	2300      	movs	r3, #0
 8000c06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_TIM6_Init+0x64>)
 8000c12:	f003 fb43 	bl	800429c <HAL_TIMEx_MasterConfigSynchronization>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000c1c:	f000 f8d2 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200001e8 	.word	0x200001e8
 8000c2c:	40001000 	.word	0x40001000

08000c30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c34:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <MX_USART2_UART_Init+0x58>)
 8000c36:	4a15      	ldr	r2, [pc, #84]	; (8000c8c <MX_USART2_UART_Init+0x5c>)
 8000c38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c3a:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <MX_USART2_UART_Init+0x58>)
 8000c3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <MX_USART2_UART_Init+0x58>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <MX_USART2_UART_Init+0x58>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <MX_USART2_UART_Init+0x58>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_USART2_UART_Init+0x58>)
 8000c56:	220c      	movs	r2, #12
 8000c58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <MX_USART2_UART_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_USART2_UART_Init+0x58>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <MX_USART2_UART_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MX_USART2_UART_Init+0x58>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_USART2_UART_Init+0x58>)
 8000c74:	f003 fbb8 	bl	80043e8 <HAL_UART_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c7e:	f000 f8a1 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000234 	.word	0x20000234
 8000c8c:	40004400 	.word	0x40004400

08000c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	4b3a      	ldr	r3, [pc, #232]	; (8000d90 <MX_GPIO_Init+0x100>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	4a39      	ldr	r2, [pc, #228]	; (8000d90 <MX_GPIO_Init+0x100>)
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb2:	4b37      	ldr	r3, [pc, #220]	; (8000d90 <MX_GPIO_Init+0x100>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cbe:	4b34      	ldr	r3, [pc, #208]	; (8000d90 <MX_GPIO_Init+0x100>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	4a33      	ldr	r2, [pc, #204]	; (8000d90 <MX_GPIO_Init+0x100>)
 8000cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cca:	4b31      	ldr	r3, [pc, #196]	; (8000d90 <MX_GPIO_Init+0x100>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	4b2e      	ldr	r3, [pc, #184]	; (8000d90 <MX_GPIO_Init+0x100>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	4a2d      	ldr	r2, [pc, #180]	; (8000d90 <MX_GPIO_Init+0x100>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce2:	4b2b      	ldr	r3, [pc, #172]	; (8000d90 <MX_GPIO_Init+0x100>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	4b28      	ldr	r3, [pc, #160]	; (8000d90 <MX_GPIO_Init+0x100>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	4a27      	ldr	r2, [pc, #156]	; (8000d90 <MX_GPIO_Init+0x100>)
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfa:	4b25      	ldr	r3, [pc, #148]	; (8000d90 <MX_GPIO_Init+0x100>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2120      	movs	r1, #32
 8000d0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0e:	f000 fef5 	bl	8001afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d18:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	481a      	ldr	r0, [pc, #104]	; (8000d94 <MX_GPIO_Init+0x104>)
 8000d2a:	f000 fd3d 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d2e:	2320      	movs	r3, #32
 8000d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d32:	2301      	movs	r3, #1
 8000d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d48:	f000 fd2e 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : pin_4_Pin */
  GPIO_InitStruct.Pin = pin_4_Pin;
 8000d4c:	2320      	movs	r3, #32
 8000d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d50:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(pin_4_GPIO_Port, &GPIO_InitStruct);
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	4619      	mov	r1, r3
 8000d60:	480d      	ldr	r0, [pc, #52]	; (8000d98 <MX_GPIO_Init+0x108>)
 8000d62:	f000 fd21 	bl	80017a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2105      	movs	r1, #5
 8000d6a:	2017      	movs	r0, #23
 8000d6c:	f000 fc72 	bl	8001654 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d70:	2017      	movs	r0, #23
 8000d72:	f000 fc8b 	bl	800168c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2105      	movs	r1, #5
 8000d7a:	2028      	movs	r0, #40	; 0x28
 8000d7c:	f000 fc6a 	bl	8001654 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d80:	2028      	movs	r0, #40	; 0x28
 8000d82:	f000 fc83 	bl	800168c <HAL_NVIC_EnableIRQ>

}
 8000d86:	bf00      	nop
 8000d88:	3728      	adds	r7, #40	; 0x28
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40021000 	.word	0x40021000
 8000d94:	48000800 	.word	0x48000800
 8000d98:	48000400 	.word	0x48000400

08000d9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d101      	bne.n	8000db2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dae:	f000 fb55 	bl	800145c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  mycallback();
 8000db2:	f000 f833 	bl	8000e1c <mycallback>

  /* USER CODE END Callback 1 */
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40014400 	.word	0x40014400

08000dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc8:	b672      	cpsid	i
}
 8000dca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <Error_Handler+0x8>
	...

08000dd0 <_write>:

DHT dht = DHT(GPIOB,pin_4_Pin);
uint8_t DHT_data[5];
int alarm_on = 0;

int _write(int fd, char *ptr, int len) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	f04f 33ff 	mov.w	r3, #4294967295
 8000de4:	68b9      	ldr	r1, [r7, #8]
 8000de6:	4804      	ldr	r0, [pc, #16]	; (8000df8 <_write+0x28>)
 8000de8:	f003 fb4c 	bl	8004484 <HAL_UART_Transmit>
	return len;
 8000dec:	687b      	ldr	r3, [r7, #4]
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000234 	.word	0x20000234

08000dfc <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	80fb      	strh	r3, [r7, #6]
	dht.Dht_onGpioInterrupt(pin_4_Pin);
 8000e06:	2120      	movs	r1, #32
 8000e08:	4803      	ldr	r0, [pc, #12]	; (8000e18 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000e0a:	f7ff fbdf 	bl	80005cc <_ZN3DHT19Dht_onGpioInterruptEt>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200002c8 	.word	0x200002c8

08000e1c <mycallback>:
void mycallback(){
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
	...

08000e2c <mymaininit>:

void mymaininit()
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000e30:	2036      	movs	r0, #54	; 0x36
 8000e32:	f000 fc2b 	bl	800168c <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim3);
 8000e36:	4805      	ldr	r0, [pc, #20]	; (8000e4c <mymaininit+0x20>)
 8000e38:	f002 fa3a 	bl	80032b0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 8000e3c:	4804      	ldr	r0, [pc, #16]	; (8000e50 <mymaininit+0x24>)
 8000e3e:	f002 fa37 	bl	80032b0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim1);
 8000e42:	4804      	ldr	r0, [pc, #16]	; (8000e54 <mymaininit+0x28>)
 8000e44:	f002 fa34 	bl	80032b0 <HAL_TIM_Base_Start_IT>

}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	2000019c 	.word	0x2000019c
 8000e50:	200001e8 	.word	0x200001e8
 8000e54:	20000150 	.word	0x20000150

08000e58 <READ_TEMP_func>:
			 printf("temp is : %d\n\r humid is : %d\r\n", DHT_data[2],DHT_data[0]);
		}
}

void READ_TEMP_func(void *argument)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	  mymaininit();
 8000e60:	f7ff ffe4 	bl	8000e2c <mymaininit>

  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(DHT_MONITORHandle, 0xFF);
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <READ_TEMP_func+0x1c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	21ff      	movs	r1, #255	; 0xff
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f004 fe4a 	bl	8005b04 <osSemaphoreAcquire>
 8000e70:	e7f8      	b.n	8000e64 <READ_TEMP_func+0xc>
 8000e72:	bf00      	nop
 8000e74:	200002c4 	.word	0x200002c4

08000e78 <comtask_func>:
  }
  /* USER CODE END 5 */
}

void comtask_func(void *argument)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN comtask_func */

	/* Infinite loop */
	for (;;) {

		if (commTask()) {
 8000e80:	f7ff fc8e 	bl	80007a0 <_Z8commTaskv>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	bf14      	ite	ne
 8000e8a:	2301      	movne	r3, #1
 8000e8c:	2300      	moveq	r3, #0
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d0f5      	beq.n	8000e80 <comtask_func+0x8>
			handleCommand();
 8000e94:	f7ff fd08 	bl	80008a8 <_Z13handleCommandv>
		if (commTask()) {
 8000e98:	e7f2      	b.n	8000e80 <comtask_func+0x8>
	...

08000e9c <monitor_func>:
		}
	}
	/* USER CODE END comtask_func */
}
void monitor_func(void *argument)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 /* USER CODE BEGIN monitor_func */
 /* Infinite loop */
 for(;;)
 {
	 osSemaphoreRelease(DHT_MONITORHandle);
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <monitor_func+0x24>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f004 fe7d 	bl	8005ba8 <osSemaphoreRelease>
	 dht.Dht_readAsync();
 8000eae:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <monitor_func+0x28>)
 8000eb0:	f7ff fb64 	bl	800057c <_ZN3DHT13Dht_readAsyncEv>
	 osDelay(1000);
 8000eb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eb8:	f004 fd80 	bl	80059bc <osDelay>
	 osSemaphoreRelease(DHT_MONITORHandle);
 8000ebc:	e7f2      	b.n	8000ea4 <monitor_func+0x8>
 8000ebe:	bf00      	nop
 8000ec0:	200002c4 	.word	0x200002c4
 8000ec4:	200002c8 	.word	0x200002c8

08000ec8 <_Z41__static_initialization_and_destruction_0ii>:
		FRAME_0,FRAME_1,
		FRAME_0,FRAME_1,
		FRAME_2,FRAME_2,FRAME_0,
		0

};
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d109      	bne.n	8000eec <_Z41__static_initialization_and_destruction_0ii+0x24>
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d104      	bne.n	8000eec <_Z41__static_initialization_and_destruction_0ii+0x24>
DHT dht = DHT(GPIOB,pin_4_Pin);
 8000ee2:	2220      	movs	r2, #32
 8000ee4:	4903      	ldr	r1, [pc, #12]	; (8000ef4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8000ee6:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8000ee8:	f7ff fafe 	bl	80004e8 <_ZN3DHTC1EP12GPIO_TypeDeft>
};
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	48000400 	.word	0x48000400
 8000ef8:	200002c8 	.word	0x200002c8

08000efc <_GLOBAL__sub_I_dht>:
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f04:	2001      	movs	r0, #1
 8000f06:	f7ff ffdf 	bl	8000ec8 <_Z41__static_initialization_and_destruction_0ii>
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f16:	4a10      	ldr	r2, [pc, #64]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f34:	6593      	str	r3, [r2, #88]	; 0x58
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	210f      	movs	r1, #15
 8000f46:	f06f 0001 	mvn.w	r0, #1
 8000f4a:	f000 fb83 	bl	8001654 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40021000 	.word	0x40021000

08000f5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a1a      	ldr	r2, [pc, #104]	; (8000fd4 <HAL_TIM_Base_MspInit+0x78>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d114      	bne.n	8000f98 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <HAL_TIM_Base_MspInit+0x7c>)
 8000f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f72:	4a19      	ldr	r2, [pc, #100]	; (8000fd8 <HAL_TIM_Base_MspInit+0x7c>)
 8000f74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f78:	6613      	str	r3, [r2, #96]	; 0x60
 8000f7a:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <HAL_TIM_Base_MspInit+0x7c>)
 8000f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2105      	movs	r1, #5
 8000f8a:	2019      	movs	r0, #25
 8000f8c:	f000 fb62 	bl	8001654 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000f90:	2019      	movs	r0, #25
 8000f92:	f000 fb7b 	bl	800168c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000f96:	e018      	b.n	8000fca <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0f      	ldr	r2, [pc, #60]	; (8000fdc <HAL_TIM_Base_MspInit+0x80>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d113      	bne.n	8000fca <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <HAL_TIM_Base_MspInit+0x7c>)
 8000fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa6:	4a0c      	ldr	r2, [pc, #48]	; (8000fd8 <HAL_TIM_Base_MspInit+0x7c>)
 8000fa8:	f043 0310 	orr.w	r3, r3, #16
 8000fac:	6593      	str	r3, [r2, #88]	; 0x58
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <HAL_TIM_Base_MspInit+0x7c>)
 8000fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb2:	f003 0310 	and.w	r3, r3, #16
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2105      	movs	r1, #5
 8000fbe:	2036      	movs	r0, #54	; 0x36
 8000fc0:	f000 fb48 	bl	8001654 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fc4:	2036      	movs	r0, #54	; 0x36
 8000fc6:	f000 fb61 	bl	800168c <HAL_NVIC_EnableIRQ>
}
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40012c00 	.word	0x40012c00
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40001000 	.word	0x40001000

08000fe0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <HAL_TIM_PWM_MspInit+0x38>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d10b      	bne.n	800100a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_TIM_PWM_MspInit+0x3c>)
 8000ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff6:	4a09      	ldr	r2, [pc, #36]	; (800101c <HAL_TIM_PWM_MspInit+0x3c>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ffe:	4b07      	ldr	r3, [pc, #28]	; (800101c <HAL_TIM_PWM_MspInit+0x3c>)
 8001000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800100a:	bf00      	nop
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40000400 	.word	0x40000400
 800101c:	40021000 	.word	0x40021000

08001020 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a11      	ldr	r2, [pc, #68]	; (8001084 <HAL_TIM_MspPostInit+0x64>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d11b      	bne.n	800107a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <HAL_TIM_MspPostInit+0x68>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	4a10      	ldr	r2, [pc, #64]	; (8001088 <HAL_TIM_MspPostInit+0x68>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <HAL_TIM_MspPostInit+0x68>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800105a:	2310      	movs	r3, #16
 800105c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800106a:	2302      	movs	r3, #2
 800106c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	4619      	mov	r1, r3
 8001074:	4805      	ldr	r0, [pc, #20]	; (800108c <HAL_TIM_MspPostInit+0x6c>)
 8001076:	f000 fb97 	bl	80017a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800107a:	bf00      	nop
 800107c:	3720      	adds	r7, #32
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40000400 	.word	0x40000400
 8001088:	40021000 	.word	0x40021000
 800108c:	48000400 	.word	0x48000400

08001090 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b0ac      	sub	sp, #176	; 0xb0
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	2288      	movs	r2, #136	; 0x88
 80010ae:	2100      	movs	r1, #0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f007 fe6b 	bl	8008d8c <memset>
  if(huart->Instance==USART2)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a25      	ldr	r2, [pc, #148]	; (8001150 <HAL_UART_MspInit+0xc0>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d143      	bne.n	8001148 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010c0:	2302      	movs	r3, #2
 80010c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4618      	mov	r0, r3
 80010ce:	f001 fbdb 	bl	8002888 <HAL_RCCEx_PeriphCLKConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010d8:	f7ff fe74 	bl	8000dc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <HAL_UART_MspInit+0xc4>)
 80010de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e0:	4a1c      	ldr	r2, [pc, #112]	; (8001154 <HAL_UART_MspInit+0xc4>)
 80010e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e6:	6593      	str	r3, [r2, #88]	; 0x58
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <HAL_UART_MspInit+0xc4>)
 80010ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <HAL_UART_MspInit+0xc4>)
 80010f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f8:	4a16      	ldr	r2, [pc, #88]	; (8001154 <HAL_UART_MspInit+0xc4>)
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <HAL_UART_MspInit+0xc4>)
 8001102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800110c:	230c      	movs	r3, #12
 800110e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111e:	2303      	movs	r3, #3
 8001120:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001124:	2307      	movs	r3, #7
 8001126:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800112e:	4619      	mov	r1, r3
 8001130:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001134:	f000 fb38 	bl	80017a8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001138:	2200      	movs	r2, #0
 800113a:	2105      	movs	r1, #5
 800113c:	2026      	movs	r0, #38	; 0x26
 800113e:	f000 fa89 	bl	8001654 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001142:	2026      	movs	r0, #38	; 0x26
 8001144:	f000 faa2 	bl	800168c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001148:	bf00      	nop
 800114a:	37b0      	adds	r7, #176	; 0xb0
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40004400 	.word	0x40004400
 8001154:	40021000 	.word	0x40021000

08001158 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08c      	sub	sp, #48	; 0x30
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001168:	2200      	movs	r2, #0
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	2019      	movs	r0, #25
 800116e:	f000 fa71 	bl	8001654 <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001172:	2019      	movs	r0, #25
 8001174:	f000 fa8a 	bl	800168c <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8001178:	4b1e      	ldr	r3, [pc, #120]	; (80011f4 <HAL_InitTick+0x9c>)
 800117a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800117c:	4a1d      	ldr	r2, [pc, #116]	; (80011f4 <HAL_InitTick+0x9c>)
 800117e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001182:	6613      	str	r3, [r2, #96]	; 0x60
 8001184:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <HAL_InitTick+0x9c>)
 8001186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001190:	f107 0210 	add.w	r2, r7, #16
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4611      	mov	r1, r2
 800119a:	4618      	mov	r0, r3
 800119c:	f001 fae2 	bl	8002764 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80011a0:	f001 faca 	bl	8002738 <HAL_RCC_GetPCLK2Freq>
 80011a4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a8:	4a13      	ldr	r2, [pc, #76]	; (80011f8 <HAL_InitTick+0xa0>)
 80011aa:	fba2 2303 	umull	r2, r3, r2, r3
 80011ae:	0c9b      	lsrs	r3, r3, #18
 80011b0:	3b01      	subs	r3, #1
 80011b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <HAL_InitTick+0xa4>)
 80011b6:	4a12      	ldr	r2, [pc, #72]	; (8001200 <HAL_InitTick+0xa8>)
 80011b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <HAL_InitTick+0xa4>)
 80011bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011c0:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 80011c2:	4a0e      	ldr	r2, [pc, #56]	; (80011fc <HAL_InitTick+0xa4>)
 80011c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c6:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <HAL_InitTick+0xa4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ce:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <HAL_InitTick+0xa4>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 80011d4:	4809      	ldr	r0, [pc, #36]	; (80011fc <HAL_InitTick+0xa4>)
 80011d6:	f002 f813 	bl	8003200 <HAL_TIM_Base_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d104      	bne.n	80011ea <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 80011e0:	4806      	ldr	r0, [pc, #24]	; (80011fc <HAL_InitTick+0xa4>)
 80011e2:	f002 f865 	bl	80032b0 <HAL_TIM_Base_Start_IT>
 80011e6:	4603      	mov	r3, r0
 80011e8:	e000      	b.n	80011ec <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3730      	adds	r7, #48	; 0x30
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40021000 	.word	0x40021000
 80011f8:	431bde83 	.word	0x431bde83
 80011fc:	200002e4 	.word	0x200002e4
 8001200:	40014400 	.word	0x40014400

08001204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <NMI_Handler+0x4>

0800120a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800120e:	e7fe      	b.n	800120e <HardFault_Handler+0x4>

08001210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <MemManage_Handler+0x4>

08001216 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <BusFault_Handler+0x4>

0800121c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <UsageFault_Handler+0x4>

08001222 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(pin_4_Pin);
 8001234:	2020      	movs	r0, #32
 8001236:	f000 fc79 	bl	8001b2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001244:	4803      	ldr	r0, [pc, #12]	; (8001254 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001246:	f002 f8fa 	bl	800343e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800124a:	4803      	ldr	r0, [pc, #12]	; (8001258 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800124c:	f002 f8f7 	bl	800343e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000150 	.word	0x20000150
 8001258:	200002e4 	.word	0x200002e4

0800125c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <USART2_IRQHandler+0x10>)
 8001262:	f003 fa75 	bl	8004750 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000234 	.word	0x20000234

08001270 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001274:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001278:	f000 fc58 	bl	8001b2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}

08001280 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001284:	4802      	ldr	r0, [pc, #8]	; (8001290 <TIM6_DAC_IRQHandler+0x10>)
 8001286:	f002 f8da 	bl	800343e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200001e8 	.word	0x200001e8

08001294 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	e00a      	b.n	80012bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012a6:	f3af 8000 	nop.w
 80012aa:	4601      	mov	r1, r0
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	1c5a      	adds	r2, r3, #1
 80012b0:	60ba      	str	r2, [r7, #8]
 80012b2:	b2ca      	uxtb	r2, r1
 80012b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	3301      	adds	r3, #1
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	697a      	ldr	r2, [r7, #20]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	dbf0      	blt.n	80012a6 <_read+0x12>
	}

return len;
 80012c4:	687b      	ldr	r3, [r7, #4]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <_close>:
	}
	return len;
}

int _close(int file)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
	return -1;
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012da:	4618      	mov	r0, r3
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
 80012ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012f6:	605a      	str	r2, [r3, #4]
	return 0;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <_isatty>:

int _isatty(int file)
{
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
	return 1;
 800130e:	2301      	movs	r3, #1
}
 8001310:	4618      	mov	r0, r3
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
	return 0;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
	...

08001338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001340:	4a14      	ldr	r2, [pc, #80]	; (8001394 <_sbrk+0x5c>)
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <_sbrk+0x60>)
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <_sbrk+0x64>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d102      	bne.n	800135a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <_sbrk+0x64>)
 8001356:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <_sbrk+0x68>)
 8001358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <_sbrk+0x64>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	429a      	cmp	r2, r3
 8001366:	d207      	bcs.n	8001378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001368:	f007 fcd8 	bl	8008d1c <__errno>
 800136c:	4603      	mov	r3, r0
 800136e:	220c      	movs	r2, #12
 8001370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001372:	f04f 33ff 	mov.w	r3, #4294967295
 8001376:	e009      	b.n	800138c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <_sbrk+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800137e:	4b07      	ldr	r3, [pc, #28]	; (800139c <_sbrk+0x64>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	4a05      	ldr	r2, [pc, #20]	; (800139c <_sbrk+0x64>)
 8001388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800138a:	68fb      	ldr	r3, [r7, #12]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20018000 	.word	0x20018000
 8001398:	00000400 	.word	0x00000400
 800139c:	20000330 	.word	0x20000330
 80013a0:	200033c0 	.word	0x200033c0

080013a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <SystemInit+0x20>)
 80013aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ae:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <SystemInit+0x20>)
 80013b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001400 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013cc:	f7ff ffea 	bl	80013a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d0:	480c      	ldr	r0, [pc, #48]	; (8001404 <LoopForever+0x6>)
  ldr r1, =_edata
 80013d2:	490d      	ldr	r1, [pc, #52]	; (8001408 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013d4:	4a0d      	ldr	r2, [pc, #52]	; (800140c <LoopForever+0xe>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d8:	e002      	b.n	80013e0 <LoopCopyDataInit>

080013da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013de:	3304      	adds	r3, #4

080013e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e4:	d3f9      	bcc.n	80013da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013e6:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013e8:	4c0a      	ldr	r4, [pc, #40]	; (8001414 <LoopForever+0x16>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013ec:	e001      	b.n	80013f2 <LoopFillZerobss>

080013ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f0:	3204      	adds	r2, #4

080013f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f4:	d3fb      	bcc.n	80013ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013f6:	f007 fc97 	bl	8008d28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013fa:	f7ff fa97 	bl	800092c <main>

080013fe <LoopForever>:

LoopForever:
    b LoopForever
 80013fe:	e7fe      	b.n	80013fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001400:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001408:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800140c:	08009954 	.word	0x08009954
  ldr r2, =_sbss
 8001410:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001414:	200033c0 	.word	0x200033c0

08001418 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001418:	e7fe      	b.n	8001418 <ADC1_2_IRQHandler>
	...

0800141c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001422:	2300      	movs	r3, #0
 8001424:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001426:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <HAL_Init+0x3c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a0b      	ldr	r2, [pc, #44]	; (8001458 <HAL_Init+0x3c>)
 800142c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001430:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001432:	2003      	movs	r0, #3
 8001434:	f000 f903 	bl	800163e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001438:	2005      	movs	r0, #5
 800143a:	f7ff fe8d 	bl	8001158 <HAL_InitTick>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d002      	beq.n	800144a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	71fb      	strb	r3, [r7, #7]
 8001448:	e001      	b.n	800144e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800144a:	f7ff fd5f 	bl	8000f0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800144e:	79fb      	ldrb	r3, [r7, #7]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40022000 	.word	0x40022000

0800145c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_IncTick+0x20>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_IncTick+0x24>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4413      	add	r3, r2
 800146c:	4a04      	ldr	r2, [pc, #16]	; (8001480 <HAL_IncTick+0x24>)
 800146e:	6013      	str	r3, [r2, #0]
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	20000008 	.word	0x20000008
 8001480:	20000334 	.word	0x20000334

08001484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return uwTick;
 8001488:	4b03      	ldr	r3, [pc, #12]	; (8001498 <HAL_GetTick+0x14>)
 800148a:	681b      	ldr	r3, [r3, #0]
}
 800148c:	4618      	mov	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	20000334 	.word	0x20000334

0800149c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a4:	f7ff ffee 	bl	8001484 <HAL_GetTick>
 80014a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b4:	d005      	beq.n	80014c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <HAL_Delay+0x44>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4413      	add	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014c2:	bf00      	nop
 80014c4:	f7ff ffde 	bl	8001484 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d8f7      	bhi.n	80014c4 <HAL_Delay+0x28>
  {
  }
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000008 	.word	0x20000008

080014e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001500:	4013      	ands	r3, r2
 8001502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800150c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001516:	4a04      	ldr	r2, [pc, #16]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	60d3      	str	r3, [r2, #12]
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <__NVIC_GetPriorityGrouping+0x18>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	f003 0307 	and.w	r3, r3, #7
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	2b00      	cmp	r3, #0
 8001558:	db0b      	blt.n	8001572 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	f003 021f 	and.w	r2, r3, #31
 8001560:	4907      	ldr	r1, [pc, #28]	; (8001580 <__NVIC_EnableIRQ+0x38>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	2001      	movs	r0, #1
 800156a:	fa00 f202 	lsl.w	r2, r0, r2
 800156e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000e100 	.word	0xe000e100

08001584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	6039      	str	r1, [r7, #0]
 800158e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001594:	2b00      	cmp	r3, #0
 8001596:	db0a      	blt.n	80015ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	b2da      	uxtb	r2, r3
 800159c:	490c      	ldr	r1, [pc, #48]	; (80015d0 <__NVIC_SetPriority+0x4c>)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	0112      	lsls	r2, r2, #4
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	440b      	add	r3, r1
 80015a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ac:	e00a      	b.n	80015c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4908      	ldr	r1, [pc, #32]	; (80015d4 <__NVIC_SetPriority+0x50>)
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	3b04      	subs	r3, #4
 80015bc:	0112      	lsls	r2, r2, #4
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	440b      	add	r3, r1
 80015c2:	761a      	strb	r2, [r3, #24]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000e100 	.word	0xe000e100
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b089      	sub	sp, #36	; 0x24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f1c3 0307 	rsb	r3, r3, #7
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	bf28      	it	cs
 80015f6:	2304      	movcs	r3, #4
 80015f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3304      	adds	r3, #4
 80015fe:	2b06      	cmp	r3, #6
 8001600:	d902      	bls.n	8001608 <NVIC_EncodePriority+0x30>
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3b03      	subs	r3, #3
 8001606:	e000      	b.n	800160a <NVIC_EncodePriority+0x32>
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	f04f 32ff 	mov.w	r2, #4294967295
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43da      	mvns	r2, r3
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	401a      	ands	r2, r3
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001620:	f04f 31ff 	mov.w	r1, #4294967295
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
 800162a:	43d9      	mvns	r1, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	4313      	orrs	r3, r2
         );
}
 8001632:	4618      	mov	r0, r3
 8001634:	3724      	adds	r7, #36	; 0x24
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff ff4c 	bl	80014e4 <__NVIC_SetPriorityGrouping>
}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001666:	f7ff ff61 	bl	800152c <__NVIC_GetPriorityGrouping>
 800166a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	68b9      	ldr	r1, [r7, #8]
 8001670:	6978      	ldr	r0, [r7, #20]
 8001672:	f7ff ffb1 	bl	80015d8 <NVIC_EncodePriority>
 8001676:	4602      	mov	r2, r0
 8001678:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167c:	4611      	mov	r1, r2
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff ff80 	bl	8001584 <__NVIC_SetPriority>
}
 8001684:	bf00      	nop
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff ff54 	bl	8001548 <__NVIC_EnableIRQ>
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016b0:	2300      	movs	r3, #0
 80016b2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d008      	beq.n	80016d2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2204      	movs	r2, #4
 80016c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e022      	b.n	8001718 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 020e 	bic.w	r2, r2, #14
 80016e0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0201 	bic.w	r2, r2, #1
 80016f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	f003 021c 	and.w	r2, r3, #28
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	2101      	movs	r1, #1
 8001700:	fa01 f202 	lsl.w	r2, r1, r2
 8001704:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2201      	movs	r2, #1
 800170a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001716:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001718:	4618      	mov	r0, r3
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800172c:	2300      	movs	r3, #0
 800172e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d005      	beq.n	8001748 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2204      	movs	r2, #4
 8001740:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	73fb      	strb	r3, [r7, #15]
 8001746:	e029      	b.n	800179c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 020e 	bic.w	r2, r2, #14
 8001756:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0201 	bic.w	r2, r2, #1
 8001766:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176c:	f003 021c 	and.w	r2, r3, #28
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	2101      	movs	r1, #1
 8001776:	fa01 f202 	lsl.w	r2, r1, r2
 800177a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	4798      	blx	r3
    }
  }
  return status;
 800179c:	7bfb      	ldrb	r3, [r7, #15]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b087      	sub	sp, #28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b6:	e17f      	b.n	8001ab8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	2101      	movs	r1, #1
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	fa01 f303 	lsl.w	r3, r1, r3
 80017c4:	4013      	ands	r3, r2
 80017c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 8171 	beq.w	8001ab2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d005      	beq.n	80017e8 <HAL_GPIO_Init+0x40>
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d130      	bne.n	800184a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	2203      	movs	r2, #3
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4013      	ands	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	68da      	ldr	r2, [r3, #12]
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4313      	orrs	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800181e:	2201      	movs	r2, #1
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43db      	mvns	r3, r3
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	4013      	ands	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	091b      	lsrs	r3, r3, #4
 8001834:	f003 0201 	and.w	r2, r3, #1
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4313      	orrs	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f003 0303 	and.w	r3, r3, #3
 8001852:	2b03      	cmp	r3, #3
 8001854:	d118      	bne.n	8001888 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800185c:	2201      	movs	r2, #1
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4013      	ands	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	08db      	lsrs	r3, r3, #3
 8001872:	f003 0201 	and.w	r2, r3, #1
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4313      	orrs	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	2b03      	cmp	r3, #3
 8001892:	d017      	beq.n	80018c4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2203      	movs	r2, #3
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4013      	ands	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d123      	bne.n	8001918 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	08da      	lsrs	r2, r3, #3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3208      	adds	r2, #8
 80018d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	220f      	movs	r2, #15
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	691a      	ldr	r2, [r3, #16]
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	4313      	orrs	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	08da      	lsrs	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3208      	adds	r2, #8
 8001912:	6939      	ldr	r1, [r7, #16]
 8001914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2203      	movs	r2, #3
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4013      	ands	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0203 	and.w	r2, r3, #3
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	4313      	orrs	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 80ac 	beq.w	8001ab2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	4b5f      	ldr	r3, [pc, #380]	; (8001ad8 <HAL_GPIO_Init+0x330>)
 800195c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800195e:	4a5e      	ldr	r2, [pc, #376]	; (8001ad8 <HAL_GPIO_Init+0x330>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6613      	str	r3, [r2, #96]	; 0x60
 8001966:	4b5c      	ldr	r3, [pc, #368]	; (8001ad8 <HAL_GPIO_Init+0x330>)
 8001968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001972:	4a5a      	ldr	r2, [pc, #360]	; (8001adc <HAL_GPIO_Init+0x334>)
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	089b      	lsrs	r3, r3, #2
 8001978:	3302      	adds	r3, #2
 800197a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	220f      	movs	r2, #15
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	4013      	ands	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800199c:	d025      	beq.n	80019ea <HAL_GPIO_Init+0x242>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a4f      	ldr	r2, [pc, #316]	; (8001ae0 <HAL_GPIO_Init+0x338>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d01f      	beq.n	80019e6 <HAL_GPIO_Init+0x23e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a4e      	ldr	r2, [pc, #312]	; (8001ae4 <HAL_GPIO_Init+0x33c>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d019      	beq.n	80019e2 <HAL_GPIO_Init+0x23a>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a4d      	ldr	r2, [pc, #308]	; (8001ae8 <HAL_GPIO_Init+0x340>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d013      	beq.n	80019de <HAL_GPIO_Init+0x236>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a4c      	ldr	r2, [pc, #304]	; (8001aec <HAL_GPIO_Init+0x344>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d00d      	beq.n	80019da <HAL_GPIO_Init+0x232>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a4b      	ldr	r2, [pc, #300]	; (8001af0 <HAL_GPIO_Init+0x348>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d007      	beq.n	80019d6 <HAL_GPIO_Init+0x22e>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a4a      	ldr	r2, [pc, #296]	; (8001af4 <HAL_GPIO_Init+0x34c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d101      	bne.n	80019d2 <HAL_GPIO_Init+0x22a>
 80019ce:	2306      	movs	r3, #6
 80019d0:	e00c      	b.n	80019ec <HAL_GPIO_Init+0x244>
 80019d2:	2307      	movs	r3, #7
 80019d4:	e00a      	b.n	80019ec <HAL_GPIO_Init+0x244>
 80019d6:	2305      	movs	r3, #5
 80019d8:	e008      	b.n	80019ec <HAL_GPIO_Init+0x244>
 80019da:	2304      	movs	r3, #4
 80019dc:	e006      	b.n	80019ec <HAL_GPIO_Init+0x244>
 80019de:	2303      	movs	r3, #3
 80019e0:	e004      	b.n	80019ec <HAL_GPIO_Init+0x244>
 80019e2:	2302      	movs	r3, #2
 80019e4:	e002      	b.n	80019ec <HAL_GPIO_Init+0x244>
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <HAL_GPIO_Init+0x244>
 80019ea:	2300      	movs	r3, #0
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	f002 0203 	and.w	r2, r2, #3
 80019f2:	0092      	lsls	r2, r2, #2
 80019f4:	4093      	lsls	r3, r2
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019fc:	4937      	ldr	r1, [pc, #220]	; (8001adc <HAL_GPIO_Init+0x334>)
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	089b      	lsrs	r3, r3, #2
 8001a02:	3302      	adds	r3, #2
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a0a:	4b3b      	ldr	r3, [pc, #236]	; (8001af8 <HAL_GPIO_Init+0x350>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	43db      	mvns	r3, r3
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	4013      	ands	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a2e:	4a32      	ldr	r2, [pc, #200]	; (8001af8 <HAL_GPIO_Init+0x350>)
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a34:	4b30      	ldr	r3, [pc, #192]	; (8001af8 <HAL_GPIO_Init+0x350>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a58:	4a27      	ldr	r2, [pc, #156]	; (8001af8 <HAL_GPIO_Init+0x350>)
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a5e:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <HAL_GPIO_Init+0x350>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	43db      	mvns	r3, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a82:	4a1d      	ldr	r2, [pc, #116]	; (8001af8 <HAL_GPIO_Init+0x350>)
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a88:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <HAL_GPIO_Init+0x350>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001aac:	4a12      	ldr	r2, [pc, #72]	; (8001af8 <HAL_GPIO_Init+0x350>)
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f47f ae78 	bne.w	80017b8 <HAL_GPIO_Init+0x10>
  }
}
 8001ac8:	bf00      	nop
 8001aca:	bf00      	nop
 8001acc:	371c      	adds	r7, #28
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40010000 	.word	0x40010000
 8001ae0:	48000400 	.word	0x48000400
 8001ae4:	48000800 	.word	0x48000800
 8001ae8:	48000c00 	.word	0x48000c00
 8001aec:	48001000 	.word	0x48001000
 8001af0:	48001400 	.word	0x48001400
 8001af4:	48001800 	.word	0x48001800
 8001af8:	40010400 	.word	0x40010400

08001afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	807b      	strh	r3, [r7, #2]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b0c:	787b      	ldrb	r3, [r7, #1]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b12:	887a      	ldrh	r2, [r7, #2]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b18:	e002      	b.n	8001b20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b1a:	887a      	ldrh	r2, [r7, #2]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b36:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b38:	695a      	ldr	r2, [r3, #20]
 8001b3a:	88fb      	ldrh	r3, [r7, #6]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d006      	beq.n	8001b50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b42:	4a05      	ldr	r2, [pc, #20]	; (8001b58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b44:	88fb      	ldrh	r3, [r7, #6]
 8001b46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b48:	88fb      	ldrh	r3, [r7, #6]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff f956 	bl	8000dfc <HAL_GPIO_EXTI_Callback>
  }
}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40010400 	.word	0x40010400

08001b5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b60:	4b04      	ldr	r3, [pc, #16]	; (8001b74 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	40007000 	.word	0x40007000

08001b78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b86:	d130      	bne.n	8001bea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b88:	4b23      	ldr	r3, [pc, #140]	; (8001c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b94:	d038      	beq.n	8001c08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b96:	4b20      	ldr	r3, [pc, #128]	; (8001c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b9e:	4a1e      	ldr	r2, [pc, #120]	; (8001c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ba0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ba4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ba6:	4b1d      	ldr	r3, [pc, #116]	; (8001c1c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2232      	movs	r2, #50	; 0x32
 8001bac:	fb02 f303 	mul.w	r3, r2, r3
 8001bb0:	4a1b      	ldr	r2, [pc, #108]	; (8001c20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb6:	0c9b      	lsrs	r3, r3, #18
 8001bb8:	3301      	adds	r3, #1
 8001bba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bbc:	e002      	b.n	8001bc4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bc4:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bd0:	d102      	bne.n	8001bd8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1f2      	bne.n	8001bbe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001be4:	d110      	bne.n	8001c08 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e00f      	b.n	8001c0a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf6:	d007      	beq.n	8001c08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c00:	4a05      	ldr	r2, [pc, #20]	; (8001c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c06:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40007000 	.word	0x40007000
 8001c1c:	20000000 	.word	0x20000000
 8001c20:	431bde83 	.word	0x431bde83

08001c24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e3ca      	b.n	80023cc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c36:	4b97      	ldr	r3, [pc, #604]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c40:	4b94      	ldr	r3, [pc, #592]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0310 	and.w	r3, r3, #16
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 80e4 	beq.w	8001e20 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d007      	beq.n	8001c6e <HAL_RCC_OscConfig+0x4a>
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	2b0c      	cmp	r3, #12
 8001c62:	f040 808b 	bne.w	8001d7c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	f040 8087 	bne.w	8001d7c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c6e:	4b89      	ldr	r3, [pc, #548]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d005      	beq.n	8001c86 <HAL_RCC_OscConfig+0x62>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e3a2      	b.n	80023cc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a1a      	ldr	r2, [r3, #32]
 8001c8a:	4b82      	ldr	r3, [pc, #520]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d004      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x7c>
 8001c96:	4b7f      	ldr	r3, [pc, #508]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c9e:	e005      	b.n	8001cac <HAL_RCC_OscConfig+0x88>
 8001ca0:	4b7c      	ldr	r3, [pc, #496]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ca6:	091b      	lsrs	r3, r3, #4
 8001ca8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d223      	bcs.n	8001cf8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f000 fd87 	bl	80027c8 <RCC_SetFlashLatencyFromMSIRange>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e383      	b.n	80023cc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cc4:	4b73      	ldr	r3, [pc, #460]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a72      	ldr	r2, [pc, #456]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001cca:	f043 0308 	orr.w	r3, r3, #8
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	4b70      	ldr	r3, [pc, #448]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	496d      	ldr	r1, [pc, #436]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ce2:	4b6c      	ldr	r3, [pc, #432]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	021b      	lsls	r3, r3, #8
 8001cf0:	4968      	ldr	r1, [pc, #416]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	604b      	str	r3, [r1, #4]
 8001cf6:	e025      	b.n	8001d44 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cf8:	4b66      	ldr	r3, [pc, #408]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a65      	ldr	r2, [pc, #404]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001cfe:	f043 0308 	orr.w	r3, r3, #8
 8001d02:	6013      	str	r3, [r2, #0]
 8001d04:	4b63      	ldr	r3, [pc, #396]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	4960      	ldr	r1, [pc, #384]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d16:	4b5f      	ldr	r3, [pc, #380]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	021b      	lsls	r3, r3, #8
 8001d24:	495b      	ldr	r1, [pc, #364]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d109      	bne.n	8001d44 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f000 fd47 	bl	80027c8 <RCC_SetFlashLatencyFromMSIRange>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e343      	b.n	80023cc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d44:	f000 fc4a 	bl	80025dc <HAL_RCC_GetSysClockFreq>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	4b52      	ldr	r3, [pc, #328]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	091b      	lsrs	r3, r3, #4
 8001d50:	f003 030f 	and.w	r3, r3, #15
 8001d54:	4950      	ldr	r1, [pc, #320]	; (8001e98 <HAL_RCC_OscConfig+0x274>)
 8001d56:	5ccb      	ldrb	r3, [r1, r3]
 8001d58:	f003 031f 	and.w	r3, r3, #31
 8001d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d60:	4a4e      	ldr	r2, [pc, #312]	; (8001e9c <HAL_RCC_OscConfig+0x278>)
 8001d62:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d64:	4b4e      	ldr	r3, [pc, #312]	; (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff f9f5 	bl	8001158 <HAL_InitTick>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d052      	beq.n	8001e1e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	e327      	b.n	80023cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d032      	beq.n	8001dea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d84:	4b43      	ldr	r3, [pc, #268]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a42      	ldr	r2, [pc, #264]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d90:	f7ff fb78 	bl	8001484 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d98:	f7ff fb74 	bl	8001484 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e310      	b.n	80023cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001daa:	4b3a      	ldr	r3, [pc, #232]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001db6:	4b37      	ldr	r3, [pc, #220]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a36      	ldr	r2, [pc, #216]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001dbc:	f043 0308 	orr.w	r3, r3, #8
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	4b34      	ldr	r3, [pc, #208]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	4931      	ldr	r1, [pc, #196]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dd4:	4b2f      	ldr	r3, [pc, #188]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	021b      	lsls	r3, r3, #8
 8001de2:	492c      	ldr	r1, [pc, #176]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	604b      	str	r3, [r1, #4]
 8001de8:	e01a      	b.n	8001e20 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dea:	4b2a      	ldr	r3, [pc, #168]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a29      	ldr	r2, [pc, #164]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001df0:	f023 0301 	bic.w	r3, r3, #1
 8001df4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001df6:	f7ff fb45 	bl	8001484 <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dfe:	f7ff fb41 	bl	8001484 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e2dd      	b.n	80023cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e10:	4b20      	ldr	r3, [pc, #128]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1f0      	bne.n	8001dfe <HAL_RCC_OscConfig+0x1da>
 8001e1c:	e000      	b.n	8001e20 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e1e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d074      	beq.n	8001f16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	2b08      	cmp	r3, #8
 8001e30:	d005      	beq.n	8001e3e <HAL_RCC_OscConfig+0x21a>
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	2b0c      	cmp	r3, #12
 8001e36:	d10e      	bne.n	8001e56 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	2b03      	cmp	r3, #3
 8001e3c:	d10b      	bne.n	8001e56 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d064      	beq.n	8001f14 <HAL_RCC_OscConfig+0x2f0>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d160      	bne.n	8001f14 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e2ba      	b.n	80023cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e5e:	d106      	bne.n	8001e6e <HAL_RCC_OscConfig+0x24a>
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a0b      	ldr	r2, [pc, #44]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	e026      	b.n	8001ebc <HAL_RCC_OscConfig+0x298>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e76:	d115      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x280>
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a05      	ldr	r2, [pc, #20]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001e7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	4b03      	ldr	r3, [pc, #12]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a02      	ldr	r2, [pc, #8]	; (8001e94 <HAL_RCC_OscConfig+0x270>)
 8001e8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8e:	6013      	str	r3, [r2, #0]
 8001e90:	e014      	b.n	8001ebc <HAL_RCC_OscConfig+0x298>
 8001e92:	bf00      	nop
 8001e94:	40021000 	.word	0x40021000
 8001e98:	0800988c 	.word	0x0800988c
 8001e9c:	20000000 	.word	0x20000000
 8001ea0:	20000004 	.word	0x20000004
 8001ea4:	4ba0      	ldr	r3, [pc, #640]	; (8002128 <HAL_RCC_OscConfig+0x504>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a9f      	ldr	r2, [pc, #636]	; (8002128 <HAL_RCC_OscConfig+0x504>)
 8001eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	4b9d      	ldr	r3, [pc, #628]	; (8002128 <HAL_RCC_OscConfig+0x504>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a9c      	ldr	r2, [pc, #624]	; (8002128 <HAL_RCC_OscConfig+0x504>)
 8001eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d013      	beq.n	8001eec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec4:	f7ff fade 	bl	8001484 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ecc:	f7ff fada 	bl	8001484 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b64      	cmp	r3, #100	; 0x64
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e276      	b.n	80023cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ede:	4b92      	ldr	r3, [pc, #584]	; (8002128 <HAL_RCC_OscConfig+0x504>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0x2a8>
 8001eea:	e014      	b.n	8001f16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eec:	f7ff faca 	bl	8001484 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef4:	f7ff fac6 	bl	8001484 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b64      	cmp	r3, #100	; 0x64
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e262      	b.n	80023cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f06:	4b88      	ldr	r3, [pc, #544]	; (8002128 <HAL_RCC_OscConfig+0x504>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f0      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x2d0>
 8001f12:	e000      	b.n	8001f16 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d060      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	2b04      	cmp	r3, #4
 8001f26:	d005      	beq.n	8001f34 <HAL_RCC_OscConfig+0x310>
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	2b0c      	cmp	r3, #12
 8001f2c:	d119      	bne.n	8001f62 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d116      	bne.n	8001f62 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f34:	4b7c      	ldr	r3, [pc, #496]	; (8002128 <HAL_RCC_OscConfig+0x504>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d005      	beq.n	8001f4c <HAL_RCC_OscConfig+0x328>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e23f      	b.n	80023cc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4c:	4b76      	ldr	r3, [pc, #472]	; (8002128 <HAL_RCC_OscConfig+0x504>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	061b      	lsls	r3, r3, #24
 8001f5a:	4973      	ldr	r1, [pc, #460]	; (8002128 <HAL_RCC_OscConfig+0x504>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f60:	e040      	b.n	8001fe4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d023      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f6a:	4b6f      	ldr	r3, [pc, #444]	; (8002128 <HAL_RCC_OscConfig+0x504>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a6e      	ldr	r2, [pc, #440]	; (8002128 <HAL_RCC_OscConfig+0x504>)
 8001f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f76:	f7ff fa85 	bl	8001484 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f7e:	f7ff fa81 	bl	8001484 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e21d      	b.n	80023cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f90:	4b65      	ldr	r3, [pc, #404]	; (8002128 <HAL_RCC_OscConfig+0x504>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0f0      	beq.n	8001f7e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9c:	4b62      	ldr	r3, [pc, #392]	; (8002128 <HAL_RCC_OscConfig+0x504>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	061b      	lsls	r3, r3, #24
 8001faa:	495f      	ldr	r1, [pc, #380]	; (8002128 <HAL_RCC_OscConfig+0x504>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	604b      	str	r3, [r1, #4]
 8001fb0:	e018      	b.n	8001fe4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fb2:	4b5d      	ldr	r3, [pc, #372]	; (8002128 <HAL_RCC_OscConfig+0x504>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a5c      	ldr	r2, [pc, #368]	; (8002128 <HAL_RCC_OscConfig+0x504>)
 8001fb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbe:	f7ff fa61 	bl	8001484 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc6:	f7ff fa5d 	bl	8001484 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e1f9      	b.n	80023cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fd8:	4b53      	ldr	r3, [pc, #332]	; (8002128 <HAL_RCC_OscConfig+0x504>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1f0      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0308 	and.w	r3, r3, #8
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d03c      	beq.n	800206a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d01c      	beq.n	8002032 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ff8:	4b4b      	ldr	r3, [pc, #300]	; (8002128 <HAL_RCC_OscConfig+0x504>)
 8001ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ffe:	4a4a      	ldr	r2, [pc, #296]	; (8002128 <HAL_RCC_OscConfig+0x504>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002008:	f7ff fa3c 	bl	8001484 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002010:	f7ff fa38 	bl	8001484 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e1d4      	b.n	80023cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002022:	4b41      	ldr	r3, [pc, #260]	; (8002128 <HAL_RCC_OscConfig+0x504>)
 8002024:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0ef      	beq.n	8002010 <HAL_RCC_OscConfig+0x3ec>
 8002030:	e01b      	b.n	800206a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002032:	4b3d      	ldr	r3, [pc, #244]	; (8002128 <HAL_RCC_OscConfig+0x504>)
 8002034:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002038:	4a3b      	ldr	r2, [pc, #236]	; (8002128 <HAL_RCC_OscConfig+0x504>)
 800203a:	f023 0301 	bic.w	r3, r3, #1
 800203e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002042:	f7ff fa1f 	bl	8001484 <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800204a:	f7ff fa1b 	bl	8001484 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e1b7      	b.n	80023cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800205c:	4b32      	ldr	r3, [pc, #200]	; (8002128 <HAL_RCC_OscConfig+0x504>)
 800205e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1ef      	bne.n	800204a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 80a6 	beq.w	80021c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002078:	2300      	movs	r3, #0
 800207a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800207c:	4b2a      	ldr	r3, [pc, #168]	; (8002128 <HAL_RCC_OscConfig+0x504>)
 800207e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10d      	bne.n	80020a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002088:	4b27      	ldr	r3, [pc, #156]	; (8002128 <HAL_RCC_OscConfig+0x504>)
 800208a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208c:	4a26      	ldr	r2, [pc, #152]	; (8002128 <HAL_RCC_OscConfig+0x504>)
 800208e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002092:	6593      	str	r3, [r2, #88]	; 0x58
 8002094:	4b24      	ldr	r3, [pc, #144]	; (8002128 <HAL_RCC_OscConfig+0x504>)
 8002096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020a0:	2301      	movs	r3, #1
 80020a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020a4:	4b21      	ldr	r3, [pc, #132]	; (800212c <HAL_RCC_OscConfig+0x508>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d118      	bne.n	80020e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020b0:	4b1e      	ldr	r3, [pc, #120]	; (800212c <HAL_RCC_OscConfig+0x508>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a1d      	ldr	r2, [pc, #116]	; (800212c <HAL_RCC_OscConfig+0x508>)
 80020b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020bc:	f7ff f9e2 	bl	8001484 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c4:	f7ff f9de 	bl	8001484 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e17a      	b.n	80023cc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020d6:	4b15      	ldr	r3, [pc, #84]	; (800212c <HAL_RCC_OscConfig+0x508>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0f0      	beq.n	80020c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d108      	bne.n	80020fc <HAL_RCC_OscConfig+0x4d8>
 80020ea:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <HAL_RCC_OscConfig+0x504>)
 80020ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f0:	4a0d      	ldr	r2, [pc, #52]	; (8002128 <HAL_RCC_OscConfig+0x504>)
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020fa:	e029      	b.n	8002150 <HAL_RCC_OscConfig+0x52c>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	2b05      	cmp	r3, #5
 8002102:	d115      	bne.n	8002130 <HAL_RCC_OscConfig+0x50c>
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <HAL_RCC_OscConfig+0x504>)
 8002106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210a:	4a07      	ldr	r2, [pc, #28]	; (8002128 <HAL_RCC_OscConfig+0x504>)
 800210c:	f043 0304 	orr.w	r3, r3, #4
 8002110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002114:	4b04      	ldr	r3, [pc, #16]	; (8002128 <HAL_RCC_OscConfig+0x504>)
 8002116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211a:	4a03      	ldr	r2, [pc, #12]	; (8002128 <HAL_RCC_OscConfig+0x504>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002124:	e014      	b.n	8002150 <HAL_RCC_OscConfig+0x52c>
 8002126:	bf00      	nop
 8002128:	40021000 	.word	0x40021000
 800212c:	40007000 	.word	0x40007000
 8002130:	4b9c      	ldr	r3, [pc, #624]	; (80023a4 <HAL_RCC_OscConfig+0x780>)
 8002132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002136:	4a9b      	ldr	r2, [pc, #620]	; (80023a4 <HAL_RCC_OscConfig+0x780>)
 8002138:	f023 0301 	bic.w	r3, r3, #1
 800213c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002140:	4b98      	ldr	r3, [pc, #608]	; (80023a4 <HAL_RCC_OscConfig+0x780>)
 8002142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002146:	4a97      	ldr	r2, [pc, #604]	; (80023a4 <HAL_RCC_OscConfig+0x780>)
 8002148:	f023 0304 	bic.w	r3, r3, #4
 800214c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d016      	beq.n	8002186 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002158:	f7ff f994 	bl	8001484 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800215e:	e00a      	b.n	8002176 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002160:	f7ff f990 	bl	8001484 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	f241 3288 	movw	r2, #5000	; 0x1388
 800216e:	4293      	cmp	r3, r2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e12a      	b.n	80023cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002176:	4b8b      	ldr	r3, [pc, #556]	; (80023a4 <HAL_RCC_OscConfig+0x780>)
 8002178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0ed      	beq.n	8002160 <HAL_RCC_OscConfig+0x53c>
 8002184:	e015      	b.n	80021b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002186:	f7ff f97d 	bl	8001484 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800218c:	e00a      	b.n	80021a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800218e:	f7ff f979 	bl	8001484 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	f241 3288 	movw	r2, #5000	; 0x1388
 800219c:	4293      	cmp	r3, r2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e113      	b.n	80023cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021a4:	4b7f      	ldr	r3, [pc, #508]	; (80023a4 <HAL_RCC_OscConfig+0x780>)
 80021a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1ed      	bne.n	800218e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021b2:	7ffb      	ldrb	r3, [r7, #31]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d105      	bne.n	80021c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b8:	4b7a      	ldr	r3, [pc, #488]	; (80023a4 <HAL_RCC_OscConfig+0x780>)
 80021ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021bc:	4a79      	ldr	r2, [pc, #484]	; (80023a4 <HAL_RCC_OscConfig+0x780>)
 80021be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021c2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 80fe 	beq.w	80023ca <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	f040 80d0 	bne.w	8002378 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021d8:	4b72      	ldr	r3, [pc, #456]	; (80023a4 <HAL_RCC_OscConfig+0x780>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f003 0203 	and.w	r2, r3, #3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d130      	bne.n	800224e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	3b01      	subs	r3, #1
 80021f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d127      	bne.n	800224e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002208:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800220a:	429a      	cmp	r2, r3
 800220c:	d11f      	bne.n	800224e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002218:	2a07      	cmp	r2, #7
 800221a:	bf14      	ite	ne
 800221c:	2201      	movne	r2, #1
 800221e:	2200      	moveq	r2, #0
 8002220:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002222:	4293      	cmp	r3, r2
 8002224:	d113      	bne.n	800224e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002230:	085b      	lsrs	r3, r3, #1
 8002232:	3b01      	subs	r3, #1
 8002234:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002236:	429a      	cmp	r2, r3
 8002238:	d109      	bne.n	800224e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	085b      	lsrs	r3, r3, #1
 8002246:	3b01      	subs	r3, #1
 8002248:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800224a:	429a      	cmp	r2, r3
 800224c:	d06e      	beq.n	800232c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	2b0c      	cmp	r3, #12
 8002252:	d069      	beq.n	8002328 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002254:	4b53      	ldr	r3, [pc, #332]	; (80023a4 <HAL_RCC_OscConfig+0x780>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d105      	bne.n	800226c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002260:	4b50      	ldr	r3, [pc, #320]	; (80023a4 <HAL_RCC_OscConfig+0x780>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e0ad      	b.n	80023cc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002270:	4b4c      	ldr	r3, [pc, #304]	; (80023a4 <HAL_RCC_OscConfig+0x780>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a4b      	ldr	r2, [pc, #300]	; (80023a4 <HAL_RCC_OscConfig+0x780>)
 8002276:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800227a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800227c:	f7ff f902 	bl	8001484 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002284:	f7ff f8fe 	bl	8001484 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e09a      	b.n	80023cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002296:	4b43      	ldr	r3, [pc, #268]	; (80023a4 <HAL_RCC_OscConfig+0x780>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022a2:	4b40      	ldr	r3, [pc, #256]	; (80023a4 <HAL_RCC_OscConfig+0x780>)
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	4b40      	ldr	r3, [pc, #256]	; (80023a8 <HAL_RCC_OscConfig+0x784>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022b2:	3a01      	subs	r2, #1
 80022b4:	0112      	lsls	r2, r2, #4
 80022b6:	4311      	orrs	r1, r2
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022bc:	0212      	lsls	r2, r2, #8
 80022be:	4311      	orrs	r1, r2
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022c4:	0852      	lsrs	r2, r2, #1
 80022c6:	3a01      	subs	r2, #1
 80022c8:	0552      	lsls	r2, r2, #21
 80022ca:	4311      	orrs	r1, r2
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022d0:	0852      	lsrs	r2, r2, #1
 80022d2:	3a01      	subs	r2, #1
 80022d4:	0652      	lsls	r2, r2, #25
 80022d6:	4311      	orrs	r1, r2
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022dc:	0912      	lsrs	r2, r2, #4
 80022de:	0452      	lsls	r2, r2, #17
 80022e0:	430a      	orrs	r2, r1
 80022e2:	4930      	ldr	r1, [pc, #192]	; (80023a4 <HAL_RCC_OscConfig+0x780>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022e8:	4b2e      	ldr	r3, [pc, #184]	; (80023a4 <HAL_RCC_OscConfig+0x780>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a2d      	ldr	r2, [pc, #180]	; (80023a4 <HAL_RCC_OscConfig+0x780>)
 80022ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022f4:	4b2b      	ldr	r3, [pc, #172]	; (80023a4 <HAL_RCC_OscConfig+0x780>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	4a2a      	ldr	r2, [pc, #168]	; (80023a4 <HAL_RCC_OscConfig+0x780>)
 80022fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002300:	f7ff f8c0 	bl	8001484 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002308:	f7ff f8bc 	bl	8001484 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e058      	b.n	80023cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800231a:	4b22      	ldr	r3, [pc, #136]	; (80023a4 <HAL_RCC_OscConfig+0x780>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f0      	beq.n	8002308 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002326:	e050      	b.n	80023ca <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e04f      	b.n	80023cc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800232c:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <HAL_RCC_OscConfig+0x780>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d148      	bne.n	80023ca <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002338:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <HAL_RCC_OscConfig+0x780>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a19      	ldr	r2, [pc, #100]	; (80023a4 <HAL_RCC_OscConfig+0x780>)
 800233e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002342:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002344:	4b17      	ldr	r3, [pc, #92]	; (80023a4 <HAL_RCC_OscConfig+0x780>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	4a16      	ldr	r2, [pc, #88]	; (80023a4 <HAL_RCC_OscConfig+0x780>)
 800234a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800234e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002350:	f7ff f898 	bl	8001484 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002358:	f7ff f894 	bl	8001484 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e030      	b.n	80023cc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800236a:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <HAL_RCC_OscConfig+0x780>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0x734>
 8002376:	e028      	b.n	80023ca <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	2b0c      	cmp	r3, #12
 800237c:	d023      	beq.n	80023c6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <HAL_RCC_OscConfig+0x780>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a08      	ldr	r2, [pc, #32]	; (80023a4 <HAL_RCC_OscConfig+0x780>)
 8002384:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002388:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238a:	f7ff f87b 	bl	8001484 <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002390:	e00c      	b.n	80023ac <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002392:	f7ff f877 	bl	8001484 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d905      	bls.n	80023ac <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e013      	b.n	80023cc <HAL_RCC_OscConfig+0x7a8>
 80023a4:	40021000 	.word	0x40021000
 80023a8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ac:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <HAL_RCC_OscConfig+0x7b0>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1ec      	bne.n	8002392 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <HAL_RCC_OscConfig+0x7b0>)
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	4905      	ldr	r1, [pc, #20]	; (80023d4 <HAL_RCC_OscConfig+0x7b0>)
 80023be:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <HAL_RCC_OscConfig+0x7b4>)
 80023c0:	4013      	ands	r3, r2
 80023c2:	60cb      	str	r3, [r1, #12]
 80023c4:	e001      	b.n	80023ca <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e000      	b.n	80023cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3720      	adds	r7, #32
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40021000 	.word	0x40021000
 80023d8:	feeefffc 	.word	0xfeeefffc

080023dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0e7      	b.n	80025c0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023f0:	4b75      	ldr	r3, [pc, #468]	; (80025c8 <HAL_RCC_ClockConfig+0x1ec>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d910      	bls.n	8002420 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fe:	4b72      	ldr	r3, [pc, #456]	; (80025c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 0207 	bic.w	r2, r3, #7
 8002406:	4970      	ldr	r1, [pc, #448]	; (80025c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	4313      	orrs	r3, r2
 800240c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800240e:	4b6e      	ldr	r3, [pc, #440]	; (80025c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d001      	beq.n	8002420 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e0cf      	b.n	80025c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d010      	beq.n	800244e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	4b66      	ldr	r3, [pc, #408]	; (80025cc <HAL_RCC_ClockConfig+0x1f0>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002438:	429a      	cmp	r2, r3
 800243a:	d908      	bls.n	800244e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800243c:	4b63      	ldr	r3, [pc, #396]	; (80025cc <HAL_RCC_ClockConfig+0x1f0>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	4960      	ldr	r1, [pc, #384]	; (80025cc <HAL_RCC_ClockConfig+0x1f0>)
 800244a:	4313      	orrs	r3, r2
 800244c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d04c      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b03      	cmp	r3, #3
 8002460:	d107      	bne.n	8002472 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002462:	4b5a      	ldr	r3, [pc, #360]	; (80025cc <HAL_RCC_ClockConfig+0x1f0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d121      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e0a6      	b.n	80025c0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d107      	bne.n	800248a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800247a:	4b54      	ldr	r3, [pc, #336]	; (80025cc <HAL_RCC_ClockConfig+0x1f0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d115      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e09a      	b.n	80025c0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d107      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002492:	4b4e      	ldr	r3, [pc, #312]	; (80025cc <HAL_RCC_ClockConfig+0x1f0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d109      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e08e      	b.n	80025c0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024a2:	4b4a      	ldr	r3, [pc, #296]	; (80025cc <HAL_RCC_ClockConfig+0x1f0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e086      	b.n	80025c0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024b2:	4b46      	ldr	r3, [pc, #280]	; (80025cc <HAL_RCC_ClockConfig+0x1f0>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f023 0203 	bic.w	r2, r3, #3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	4943      	ldr	r1, [pc, #268]	; (80025cc <HAL_RCC_ClockConfig+0x1f0>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024c4:	f7fe ffde 	bl	8001484 <HAL_GetTick>
 80024c8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ca:	e00a      	b.n	80024e2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024cc:	f7fe ffda 	bl	8001484 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024da:	4293      	cmp	r3, r2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e06e      	b.n	80025c0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e2:	4b3a      	ldr	r3, [pc, #232]	; (80025cc <HAL_RCC_ClockConfig+0x1f0>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 020c 	and.w	r2, r3, #12
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d1eb      	bne.n	80024cc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d010      	beq.n	8002522 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	4b31      	ldr	r3, [pc, #196]	; (80025cc <HAL_RCC_ClockConfig+0x1f0>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800250c:	429a      	cmp	r2, r3
 800250e:	d208      	bcs.n	8002522 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002510:	4b2e      	ldr	r3, [pc, #184]	; (80025cc <HAL_RCC_ClockConfig+0x1f0>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	492b      	ldr	r1, [pc, #172]	; (80025cc <HAL_RCC_ClockConfig+0x1f0>)
 800251e:	4313      	orrs	r3, r2
 8002520:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002522:	4b29      	ldr	r3, [pc, #164]	; (80025c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d210      	bcs.n	8002552 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002530:	4b25      	ldr	r3, [pc, #148]	; (80025c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f023 0207 	bic.w	r2, r3, #7
 8002538:	4923      	ldr	r1, [pc, #140]	; (80025c8 <HAL_RCC_ClockConfig+0x1ec>)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	4313      	orrs	r3, r2
 800253e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002540:	4b21      	ldr	r3, [pc, #132]	; (80025c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d001      	beq.n	8002552 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e036      	b.n	80025c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	2b00      	cmp	r3, #0
 800255c:	d008      	beq.n	8002570 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800255e:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <HAL_RCC_ClockConfig+0x1f0>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	4918      	ldr	r1, [pc, #96]	; (80025cc <HAL_RCC_ClockConfig+0x1f0>)
 800256c:	4313      	orrs	r3, r2
 800256e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0308 	and.w	r3, r3, #8
 8002578:	2b00      	cmp	r3, #0
 800257a:	d009      	beq.n	8002590 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800257c:	4b13      	ldr	r3, [pc, #76]	; (80025cc <HAL_RCC_ClockConfig+0x1f0>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	4910      	ldr	r1, [pc, #64]	; (80025cc <HAL_RCC_ClockConfig+0x1f0>)
 800258c:	4313      	orrs	r3, r2
 800258e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002590:	f000 f824 	bl	80025dc <HAL_RCC_GetSysClockFreq>
 8002594:	4602      	mov	r2, r0
 8002596:	4b0d      	ldr	r3, [pc, #52]	; (80025cc <HAL_RCC_ClockConfig+0x1f0>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	091b      	lsrs	r3, r3, #4
 800259c:	f003 030f 	and.w	r3, r3, #15
 80025a0:	490b      	ldr	r1, [pc, #44]	; (80025d0 <HAL_RCC_ClockConfig+0x1f4>)
 80025a2:	5ccb      	ldrb	r3, [r1, r3]
 80025a4:	f003 031f 	and.w	r3, r3, #31
 80025a8:	fa22 f303 	lsr.w	r3, r2, r3
 80025ac:	4a09      	ldr	r2, [pc, #36]	; (80025d4 <HAL_RCC_ClockConfig+0x1f8>)
 80025ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025b0:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <HAL_RCC_ClockConfig+0x1fc>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fe fdcf 	bl	8001158 <HAL_InitTick>
 80025ba:	4603      	mov	r3, r0
 80025bc:	72fb      	strb	r3, [r7, #11]

  return status;
 80025be:	7afb      	ldrb	r3, [r7, #11]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40022000 	.word	0x40022000
 80025cc:	40021000 	.word	0x40021000
 80025d0:	0800988c 	.word	0x0800988c
 80025d4:	20000000 	.word	0x20000000
 80025d8:	20000004 	.word	0x20000004

080025dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	b089      	sub	sp, #36	; 0x24
 80025e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	2300      	movs	r3, #0
 80025e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ea:	4b3e      	ldr	r3, [pc, #248]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 030c 	and.w	r3, r3, #12
 80025f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025f4:	4b3b      	ldr	r3, [pc, #236]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f003 0303 	and.w	r3, r3, #3
 80025fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d005      	beq.n	8002610 <HAL_RCC_GetSysClockFreq+0x34>
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	2b0c      	cmp	r3, #12
 8002608:	d121      	bne.n	800264e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d11e      	bne.n	800264e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002610:	4b34      	ldr	r3, [pc, #208]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0308 	and.w	r3, r3, #8
 8002618:	2b00      	cmp	r3, #0
 800261a:	d107      	bne.n	800262c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800261c:	4b31      	ldr	r3, [pc, #196]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800261e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002622:	0a1b      	lsrs	r3, r3, #8
 8002624:	f003 030f 	and.w	r3, r3, #15
 8002628:	61fb      	str	r3, [r7, #28]
 800262a:	e005      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800262c:	4b2d      	ldr	r3, [pc, #180]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	091b      	lsrs	r3, r3, #4
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002638:	4a2b      	ldr	r2, [pc, #172]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002640:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10d      	bne.n	8002664 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800264c:	e00a      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	2b04      	cmp	r3, #4
 8002652:	d102      	bne.n	800265a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002654:	4b25      	ldr	r3, [pc, #148]	; (80026ec <HAL_RCC_GetSysClockFreq+0x110>)
 8002656:	61bb      	str	r3, [r7, #24]
 8002658:	e004      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	2b08      	cmp	r3, #8
 800265e:	d101      	bne.n	8002664 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002660:	4b23      	ldr	r3, [pc, #140]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002662:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	2b0c      	cmp	r3, #12
 8002668:	d134      	bne.n	80026d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800266a:	4b1e      	ldr	r3, [pc, #120]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d003      	beq.n	8002682 <HAL_RCC_GetSysClockFreq+0xa6>
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2b03      	cmp	r3, #3
 800267e:	d003      	beq.n	8002688 <HAL_RCC_GetSysClockFreq+0xac>
 8002680:	e005      	b.n	800268e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002682:	4b1a      	ldr	r3, [pc, #104]	; (80026ec <HAL_RCC_GetSysClockFreq+0x110>)
 8002684:	617b      	str	r3, [r7, #20]
      break;
 8002686:	e005      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002688:	4b19      	ldr	r3, [pc, #100]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800268a:	617b      	str	r3, [r7, #20]
      break;
 800268c:	e002      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	617b      	str	r3, [r7, #20]
      break;
 8002692:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002694:	4b13      	ldr	r3, [pc, #76]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	091b      	lsrs	r3, r3, #4
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	3301      	adds	r3, #1
 80026a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026a2:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	0a1b      	lsrs	r3, r3, #8
 80026a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	fb03 f202 	mul.w	r2, r3, r2
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026ba:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	0e5b      	lsrs	r3, r3, #25
 80026c0:	f003 0303 	and.w	r3, r3, #3
 80026c4:	3301      	adds	r3, #1
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026d4:	69bb      	ldr	r3, [r7, #24]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3724      	adds	r7, #36	; 0x24
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	40021000 	.word	0x40021000
 80026e8:	080098a4 	.word	0x080098a4
 80026ec:	00f42400 	.word	0x00f42400
 80026f0:	007a1200 	.word	0x007a1200

080026f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026f8:	4b03      	ldr	r3, [pc, #12]	; (8002708 <HAL_RCC_GetHCLKFreq+0x14>)
 80026fa:	681b      	ldr	r3, [r3, #0]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	20000000 	.word	0x20000000

0800270c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002710:	f7ff fff0 	bl	80026f4 <HAL_RCC_GetHCLKFreq>
 8002714:	4602      	mov	r2, r0
 8002716:	4b06      	ldr	r3, [pc, #24]	; (8002730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	0a1b      	lsrs	r3, r3, #8
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	4904      	ldr	r1, [pc, #16]	; (8002734 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002722:	5ccb      	ldrb	r3, [r1, r3]
 8002724:	f003 031f 	and.w	r3, r3, #31
 8002728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800272c:	4618      	mov	r0, r3
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40021000 	.word	0x40021000
 8002734:	0800989c 	.word	0x0800989c

08002738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800273c:	f7ff ffda 	bl	80026f4 <HAL_RCC_GetHCLKFreq>
 8002740:	4602      	mov	r2, r0
 8002742:	4b06      	ldr	r3, [pc, #24]	; (800275c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	0adb      	lsrs	r3, r3, #11
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	4904      	ldr	r1, [pc, #16]	; (8002760 <HAL_RCC_GetPCLK2Freq+0x28>)
 800274e:	5ccb      	ldrb	r3, [r1, r3]
 8002750:	f003 031f 	and.w	r3, r3, #31
 8002754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002758:	4618      	mov	r0, r3
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40021000 	.word	0x40021000
 8002760:	0800989c 	.word	0x0800989c

08002764 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	220f      	movs	r2, #15
 8002772:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002774:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <HAL_RCC_GetClockConfig+0x5c>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 0203 	and.w	r2, r3, #3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002780:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <HAL_RCC_GetClockConfig+0x5c>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800278c:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <HAL_RCC_GetClockConfig+0x5c>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002798:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <HAL_RCC_GetClockConfig+0x5c>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	08db      	lsrs	r3, r3, #3
 800279e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80027a6:	4b07      	ldr	r3, [pc, #28]	; (80027c4 <HAL_RCC_GetClockConfig+0x60>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0207 	and.w	r2, r3, #7
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	601a      	str	r2, [r3, #0]
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40022000 	.word	0x40022000

080027c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027d0:	2300      	movs	r3, #0
 80027d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027d4:	4b2a      	ldr	r3, [pc, #168]	; (8002880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027e0:	f7ff f9bc 	bl	8001b5c <HAL_PWREx_GetVoltageRange>
 80027e4:	6178      	str	r0, [r7, #20]
 80027e6:	e014      	b.n	8002812 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027e8:	4b25      	ldr	r3, [pc, #148]	; (8002880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ec:	4a24      	ldr	r2, [pc, #144]	; (8002880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f2:	6593      	str	r3, [r2, #88]	; 0x58
 80027f4:	4b22      	ldr	r3, [pc, #136]	; (8002880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002800:	f7ff f9ac 	bl	8001b5c <HAL_PWREx_GetVoltageRange>
 8002804:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002806:	4b1e      	ldr	r3, [pc, #120]	; (8002880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280a:	4a1d      	ldr	r2, [pc, #116]	; (8002880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800280c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002810:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002818:	d10b      	bne.n	8002832 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b80      	cmp	r3, #128	; 0x80
 800281e:	d919      	bls.n	8002854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2ba0      	cmp	r3, #160	; 0xa0
 8002824:	d902      	bls.n	800282c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002826:	2302      	movs	r3, #2
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	e013      	b.n	8002854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800282c:	2301      	movs	r3, #1
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	e010      	b.n	8002854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b80      	cmp	r3, #128	; 0x80
 8002836:	d902      	bls.n	800283e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002838:	2303      	movs	r3, #3
 800283a:	613b      	str	r3, [r7, #16]
 800283c:	e00a      	b.n	8002854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b80      	cmp	r3, #128	; 0x80
 8002842:	d102      	bne.n	800284a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002844:	2302      	movs	r3, #2
 8002846:	613b      	str	r3, [r7, #16]
 8002848:	e004      	b.n	8002854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b70      	cmp	r3, #112	; 0x70
 800284e:	d101      	bne.n	8002854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002850:	2301      	movs	r3, #1
 8002852:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002854:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f023 0207 	bic.w	r2, r3, #7
 800285c:	4909      	ldr	r1, [pc, #36]	; (8002884 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	4313      	orrs	r3, r2
 8002862:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002864:	4b07      	ldr	r3, [pc, #28]	; (8002884 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	429a      	cmp	r2, r3
 8002870:	d001      	beq.n	8002876 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40021000 	.word	0x40021000
 8002884:	40022000 	.word	0x40022000

08002888 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002890:	2300      	movs	r3, #0
 8002892:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002894:	2300      	movs	r3, #0
 8002896:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d041      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028ac:	d02a      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80028ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028b2:	d824      	bhi.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028b8:	d008      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80028ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028be:	d81e      	bhi.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00a      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80028c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028c8:	d010      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80028ca:	e018      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028cc:	4b86      	ldr	r3, [pc, #536]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	4a85      	ldr	r2, [pc, #532]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028d8:	e015      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3304      	adds	r3, #4
 80028de:	2100      	movs	r1, #0
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 fabb 	bl	8002e5c <RCCEx_PLLSAI1_Config>
 80028e6:	4603      	mov	r3, r0
 80028e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028ea:	e00c      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3320      	adds	r3, #32
 80028f0:	2100      	movs	r1, #0
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 fba6 	bl	8003044 <RCCEx_PLLSAI2_Config>
 80028f8:	4603      	mov	r3, r0
 80028fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028fc:	e003      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	74fb      	strb	r3, [r7, #19]
      break;
 8002902:	e000      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002904:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002906:	7cfb      	ldrb	r3, [r7, #19]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10b      	bne.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800290c:	4b76      	ldr	r3, [pc, #472]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002912:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800291a:	4973      	ldr	r1, [pc, #460]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800291c:	4313      	orrs	r3, r2
 800291e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002922:	e001      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002924:	7cfb      	ldrb	r3, [r7, #19]
 8002926:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d041      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002938:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800293c:	d02a      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800293e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002942:	d824      	bhi.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002944:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002948:	d008      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800294a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800294e:	d81e      	bhi.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00a      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002954:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002958:	d010      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800295a:	e018      	b.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800295c:	4b62      	ldr	r3, [pc, #392]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	4a61      	ldr	r2, [pc, #388]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002966:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002968:	e015      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	3304      	adds	r3, #4
 800296e:	2100      	movs	r1, #0
 8002970:	4618      	mov	r0, r3
 8002972:	f000 fa73 	bl	8002e5c <RCCEx_PLLSAI1_Config>
 8002976:	4603      	mov	r3, r0
 8002978:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800297a:	e00c      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3320      	adds	r3, #32
 8002980:	2100      	movs	r1, #0
 8002982:	4618      	mov	r0, r3
 8002984:	f000 fb5e 	bl	8003044 <RCCEx_PLLSAI2_Config>
 8002988:	4603      	mov	r3, r0
 800298a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800298c:	e003      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	74fb      	strb	r3, [r7, #19]
      break;
 8002992:	e000      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002994:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002996:	7cfb      	ldrb	r3, [r7, #19]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10b      	bne.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800299c:	4b52      	ldr	r3, [pc, #328]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800299e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029aa:	494f      	ldr	r1, [pc, #316]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029b2:	e001      	b.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029b4:	7cfb      	ldrb	r3, [r7, #19]
 80029b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 80a0 	beq.w	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029c6:	2300      	movs	r3, #0
 80029c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029ca:	4b47      	ldr	r3, [pc, #284]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x152>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80029da:	2300      	movs	r3, #0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00d      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e0:	4b41      	ldr	r3, [pc, #260]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e4:	4a40      	ldr	r2, [pc, #256]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ea:	6593      	str	r3, [r2, #88]	; 0x58
 80029ec:	4b3e      	ldr	r3, [pc, #248]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029f8:	2301      	movs	r3, #1
 80029fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029fc:	4b3b      	ldr	r3, [pc, #236]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a3a      	ldr	r2, [pc, #232]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a08:	f7fe fd3c 	bl	8001484 <HAL_GetTick>
 8002a0c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a0e:	e009      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a10:	f7fe fd38 	bl	8001484 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d902      	bls.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	74fb      	strb	r3, [r7, #19]
        break;
 8002a22:	e005      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a24:	4b31      	ldr	r3, [pc, #196]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0ef      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002a30:	7cfb      	ldrb	r3, [r7, #19]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d15c      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a36:	4b2c      	ldr	r3, [pc, #176]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a40:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d01f      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d019      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a54:	4b24      	ldr	r3, [pc, #144]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a60:	4b21      	ldr	r3, [pc, #132]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a66:	4a20      	ldr	r2, [pc, #128]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a70:	4b1d      	ldr	r3, [pc, #116]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a76:	4a1c      	ldr	r2, [pc, #112]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a80:	4a19      	ldr	r2, [pc, #100]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d016      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a92:	f7fe fcf7 	bl	8001484 <HAL_GetTick>
 8002a96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a98:	e00b      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a9a:	f7fe fcf3 	bl	8001484 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d902      	bls.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	74fb      	strb	r3, [r7, #19]
            break;
 8002ab0:	e006      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ab2:	4b0d      	ldr	r3, [pc, #52]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0ec      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002ac0:	7cfb      	ldrb	r3, [r7, #19]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ac6:	4b08      	ldr	r3, [pc, #32]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002acc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ad6:	4904      	ldr	r1, [pc, #16]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ade:	e009      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ae0:	7cfb      	ldrb	r3, [r7, #19]
 8002ae2:	74bb      	strb	r3, [r7, #18]
 8002ae4:	e006      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002ae6:	bf00      	nop
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af0:	7cfb      	ldrb	r3, [r7, #19]
 8002af2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002af4:	7c7b      	ldrb	r3, [r7, #17]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d105      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002afa:	4b9e      	ldr	r3, [pc, #632]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afe:	4a9d      	ldr	r2, [pc, #628]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00a      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b12:	4b98      	ldr	r3, [pc, #608]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b18:	f023 0203 	bic.w	r2, r3, #3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b20:	4994      	ldr	r1, [pc, #592]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00a      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b34:	4b8f      	ldr	r3, [pc, #572]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3a:	f023 020c 	bic.w	r2, r3, #12
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b42:	498c      	ldr	r1, [pc, #560]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0304 	and.w	r3, r3, #4
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00a      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b56:	4b87      	ldr	r3, [pc, #540]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	4983      	ldr	r1, [pc, #524]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00a      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b78:	4b7e      	ldr	r3, [pc, #504]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b86:	497b      	ldr	r1, [pc, #492]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0310 	and.w	r3, r3, #16
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00a      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b9a:	4b76      	ldr	r3, [pc, #472]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba8:	4972      	ldr	r1, [pc, #456]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0320 	and.w	r3, r3, #32
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00a      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bbc:	4b6d      	ldr	r3, [pc, #436]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bca:	496a      	ldr	r1, [pc, #424]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00a      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bde:	4b65      	ldr	r3, [pc, #404]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bec:	4961      	ldr	r1, [pc, #388]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00a      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c00:	4b5c      	ldr	r3, [pc, #368]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c0e:	4959      	ldr	r1, [pc, #356]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00a      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c22:	4b54      	ldr	r3, [pc, #336]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c30:	4950      	ldr	r1, [pc, #320]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00a      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c44:	4b4b      	ldr	r3, [pc, #300]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c52:	4948      	ldr	r1, [pc, #288]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00a      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c66:	4b43      	ldr	r3, [pc, #268]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c74:	493f      	ldr	r1, [pc, #252]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d028      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c88:	4b3a      	ldr	r3, [pc, #232]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c96:	4937      	ldr	r1, [pc, #220]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ca2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ca6:	d106      	bne.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ca8:	4b32      	ldr	r3, [pc, #200]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	4a31      	ldr	r2, [pc, #196]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cb2:	60d3      	str	r3, [r2, #12]
 8002cb4:	e011      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cbe:	d10c      	bne.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 f8c8 	bl	8002e5c <RCCEx_PLLSAI1_Config>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002cd0:	7cfb      	ldrb	r3, [r7, #19]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002cd6:	7cfb      	ldrb	r3, [r7, #19]
 8002cd8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d028      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ce6:	4b23      	ldr	r3, [pc, #140]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf4:	491f      	ldr	r1, [pc, #124]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d04:	d106      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d06:	4b1b      	ldr	r3, [pc, #108]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	4a1a      	ldr	r2, [pc, #104]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d10:	60d3      	str	r3, [r2, #12]
 8002d12:	e011      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d1c:	d10c      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	3304      	adds	r3, #4
 8002d22:	2101      	movs	r1, #1
 8002d24:	4618      	mov	r0, r3
 8002d26:	f000 f899 	bl	8002e5c <RCCEx_PLLSAI1_Config>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d2e:	7cfb      	ldrb	r3, [r7, #19]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002d34:	7cfb      	ldrb	r3, [r7, #19]
 8002d36:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d02b      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d44:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d52:	4908      	ldr	r1, [pc, #32]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d62:	d109      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d64:	4b03      	ldr	r3, [pc, #12]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	4a02      	ldr	r2, [pc, #8]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d6e:	60d3      	str	r3, [r2, #12]
 8002d70:	e014      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002d72:	bf00      	nop
 8002d74:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d80:	d10c      	bne.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3304      	adds	r3, #4
 8002d86:	2101      	movs	r1, #1
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 f867 	bl	8002e5c <RCCEx_PLLSAI1_Config>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d92:	7cfb      	ldrb	r3, [r7, #19]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002d98:	7cfb      	ldrb	r3, [r7, #19]
 8002d9a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d02f      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002da8:	4b2b      	ldr	r3, [pc, #172]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002db6:	4928      	ldr	r1, [pc, #160]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dc6:	d10d      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3304      	adds	r3, #4
 8002dcc:	2102      	movs	r1, #2
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 f844 	bl	8002e5c <RCCEx_PLLSAI1_Config>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dd8:	7cfb      	ldrb	r3, [r7, #19]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d014      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002dde:	7cfb      	ldrb	r3, [r7, #19]
 8002de0:	74bb      	strb	r3, [r7, #18]
 8002de2:	e011      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002de8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dec:	d10c      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	3320      	adds	r3, #32
 8002df2:	2102      	movs	r1, #2
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 f925 	bl	8003044 <RCCEx_PLLSAI2_Config>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dfe:	7cfb      	ldrb	r3, [r7, #19]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e04:	7cfb      	ldrb	r3, [r7, #19]
 8002e06:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00a      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e14:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e22:	490d      	ldr	r1, [pc, #52]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00b      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e36:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e46:	4904      	ldr	r1, [pc, #16]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e4e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40021000 	.word	0x40021000

08002e5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e66:	2300      	movs	r3, #0
 8002e68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e6a:	4b75      	ldr	r3, [pc, #468]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d018      	beq.n	8002ea8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e76:	4b72      	ldr	r3, [pc, #456]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f003 0203 	and.w	r2, r3, #3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d10d      	bne.n	8002ea2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
       ||
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d009      	beq.n	8002ea2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e8e:	4b6c      	ldr	r3, [pc, #432]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	091b      	lsrs	r3, r3, #4
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	1c5a      	adds	r2, r3, #1
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
       ||
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d047      	beq.n	8002f32 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	73fb      	strb	r3, [r7, #15]
 8002ea6:	e044      	b.n	8002f32 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d018      	beq.n	8002ee2 <RCCEx_PLLSAI1_Config+0x86>
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d825      	bhi.n	8002f00 <RCCEx_PLLSAI1_Config+0xa4>
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d002      	beq.n	8002ebe <RCCEx_PLLSAI1_Config+0x62>
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d009      	beq.n	8002ed0 <RCCEx_PLLSAI1_Config+0x74>
 8002ebc:	e020      	b.n	8002f00 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ebe:	4b60      	ldr	r3, [pc, #384]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d11d      	bne.n	8002f06 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ece:	e01a      	b.n	8002f06 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ed0:	4b5b      	ldr	r3, [pc, #364]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d116      	bne.n	8002f0a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ee0:	e013      	b.n	8002f0a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ee2:	4b57      	ldr	r3, [pc, #348]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10f      	bne.n	8002f0e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002eee:	4b54      	ldr	r3, [pc, #336]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d109      	bne.n	8002f0e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002efe:	e006      	b.n	8002f0e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
      break;
 8002f04:	e004      	b.n	8002f10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f06:	bf00      	nop
 8002f08:	e002      	b.n	8002f10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f0a:	bf00      	nop
 8002f0c:	e000      	b.n	8002f10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10d      	bne.n	8002f32 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f16:	4b4a      	ldr	r3, [pc, #296]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6819      	ldr	r1, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	011b      	lsls	r3, r3, #4
 8002f2a:	430b      	orrs	r3, r1
 8002f2c:	4944      	ldr	r1, [pc, #272]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d17d      	bne.n	8003034 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f38:	4b41      	ldr	r3, [pc, #260]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a40      	ldr	r2, [pc, #256]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f44:	f7fe fa9e 	bl	8001484 <HAL_GetTick>
 8002f48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f4a:	e009      	b.n	8002f60 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f4c:	f7fe fa9a 	bl	8001484 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d902      	bls.n	8002f60 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	73fb      	strb	r3, [r7, #15]
        break;
 8002f5e:	e005      	b.n	8002f6c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f60:	4b37      	ldr	r3, [pc, #220]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1ef      	bne.n	8002f4c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d160      	bne.n	8003034 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d111      	bne.n	8002f9c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f78:	4b31      	ldr	r3, [pc, #196]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6892      	ldr	r2, [r2, #8]
 8002f88:	0211      	lsls	r1, r2, #8
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	68d2      	ldr	r2, [r2, #12]
 8002f8e:	0912      	lsrs	r2, r2, #4
 8002f90:	0452      	lsls	r2, r2, #17
 8002f92:	430a      	orrs	r2, r1
 8002f94:	492a      	ldr	r1, [pc, #168]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	610b      	str	r3, [r1, #16]
 8002f9a:	e027      	b.n	8002fec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d112      	bne.n	8002fc8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fa2:	4b27      	ldr	r3, [pc, #156]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002faa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6892      	ldr	r2, [r2, #8]
 8002fb2:	0211      	lsls	r1, r2, #8
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6912      	ldr	r2, [r2, #16]
 8002fb8:	0852      	lsrs	r2, r2, #1
 8002fba:	3a01      	subs	r2, #1
 8002fbc:	0552      	lsls	r2, r2, #21
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	491f      	ldr	r1, [pc, #124]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	610b      	str	r3, [r1, #16]
 8002fc6:	e011      	b.n	8002fec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fc8:	4b1d      	ldr	r3, [pc, #116]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002fd0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6892      	ldr	r2, [r2, #8]
 8002fd8:	0211      	lsls	r1, r2, #8
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6952      	ldr	r2, [r2, #20]
 8002fde:	0852      	lsrs	r2, r2, #1
 8002fe0:	3a01      	subs	r2, #1
 8002fe2:	0652      	lsls	r2, r2, #25
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	4916      	ldr	r1, [pc, #88]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002fec:	4b14      	ldr	r3, [pc, #80]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a13      	ldr	r2, [pc, #76]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ff6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff8:	f7fe fa44 	bl	8001484 <HAL_GetTick>
 8002ffc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ffe:	e009      	b.n	8003014 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003000:	f7fe fa40 	bl	8001484 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d902      	bls.n	8003014 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	73fb      	strb	r3, [r7, #15]
          break;
 8003012:	e005      	b.n	8003020 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003014:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0ef      	beq.n	8003000 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003020:	7bfb      	ldrb	r3, [r7, #15]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d106      	bne.n	8003034 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003026:	4b06      	ldr	r3, [pc, #24]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003028:	691a      	ldr	r2, [r3, #16]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	4904      	ldr	r1, [pc, #16]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003030:	4313      	orrs	r3, r2
 8003032:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003034:	7bfb      	ldrb	r3, [r7, #15]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40021000 	.word	0x40021000

08003044 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800304e:	2300      	movs	r3, #0
 8003050:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003052:	4b6a      	ldr	r3, [pc, #424]	; (80031fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d018      	beq.n	8003090 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800305e:	4b67      	ldr	r3, [pc, #412]	; (80031fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f003 0203 	and.w	r2, r3, #3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d10d      	bne.n	800308a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
       ||
 8003072:	2b00      	cmp	r3, #0
 8003074:	d009      	beq.n	800308a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003076:	4b61      	ldr	r3, [pc, #388]	; (80031fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	091b      	lsrs	r3, r3, #4
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	1c5a      	adds	r2, r3, #1
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
       ||
 8003086:	429a      	cmp	r2, r3
 8003088:	d047      	beq.n	800311a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	73fb      	strb	r3, [r7, #15]
 800308e:	e044      	b.n	800311a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b03      	cmp	r3, #3
 8003096:	d018      	beq.n	80030ca <RCCEx_PLLSAI2_Config+0x86>
 8003098:	2b03      	cmp	r3, #3
 800309a:	d825      	bhi.n	80030e8 <RCCEx_PLLSAI2_Config+0xa4>
 800309c:	2b01      	cmp	r3, #1
 800309e:	d002      	beq.n	80030a6 <RCCEx_PLLSAI2_Config+0x62>
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d009      	beq.n	80030b8 <RCCEx_PLLSAI2_Config+0x74>
 80030a4:	e020      	b.n	80030e8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030a6:	4b55      	ldr	r3, [pc, #340]	; (80031fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d11d      	bne.n	80030ee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b6:	e01a      	b.n	80030ee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030b8:	4b50      	ldr	r3, [pc, #320]	; (80031fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d116      	bne.n	80030f2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030c8:	e013      	b.n	80030f2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030ca:	4b4c      	ldr	r3, [pc, #304]	; (80031fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10f      	bne.n	80030f6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030d6:	4b49      	ldr	r3, [pc, #292]	; (80031fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d109      	bne.n	80030f6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030e6:	e006      	b.n	80030f6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
      break;
 80030ec:	e004      	b.n	80030f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030ee:	bf00      	nop
 80030f0:	e002      	b.n	80030f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030f2:	bf00      	nop
 80030f4:	e000      	b.n	80030f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10d      	bne.n	800311a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030fe:	4b3f      	ldr	r3, [pc, #252]	; (80031fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6819      	ldr	r1, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	3b01      	subs	r3, #1
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	430b      	orrs	r3, r1
 8003114:	4939      	ldr	r1, [pc, #228]	; (80031fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003116:	4313      	orrs	r3, r2
 8003118:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800311a:	7bfb      	ldrb	r3, [r7, #15]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d167      	bne.n	80031f0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003120:	4b36      	ldr	r3, [pc, #216]	; (80031fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a35      	ldr	r2, [pc, #212]	; (80031fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800312a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800312c:	f7fe f9aa 	bl	8001484 <HAL_GetTick>
 8003130:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003132:	e009      	b.n	8003148 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003134:	f7fe f9a6 	bl	8001484 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d902      	bls.n	8003148 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	73fb      	strb	r3, [r7, #15]
        break;
 8003146:	e005      	b.n	8003154 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003148:	4b2c      	ldr	r3, [pc, #176]	; (80031fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1ef      	bne.n	8003134 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003154:	7bfb      	ldrb	r3, [r7, #15]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d14a      	bne.n	80031f0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d111      	bne.n	8003184 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003160:	4b26      	ldr	r3, [pc, #152]	; (80031fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6892      	ldr	r2, [r2, #8]
 8003170:	0211      	lsls	r1, r2, #8
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	68d2      	ldr	r2, [r2, #12]
 8003176:	0912      	lsrs	r2, r2, #4
 8003178:	0452      	lsls	r2, r2, #17
 800317a:	430a      	orrs	r2, r1
 800317c:	491f      	ldr	r1, [pc, #124]	; (80031fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800317e:	4313      	orrs	r3, r2
 8003180:	614b      	str	r3, [r1, #20]
 8003182:	e011      	b.n	80031a8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003184:	4b1d      	ldr	r3, [pc, #116]	; (80031fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800318c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6892      	ldr	r2, [r2, #8]
 8003194:	0211      	lsls	r1, r2, #8
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6912      	ldr	r2, [r2, #16]
 800319a:	0852      	lsrs	r2, r2, #1
 800319c:	3a01      	subs	r2, #1
 800319e:	0652      	lsls	r2, r2, #25
 80031a0:	430a      	orrs	r2, r1
 80031a2:	4916      	ldr	r1, [pc, #88]	; (80031fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80031a8:	4b14      	ldr	r3, [pc, #80]	; (80031fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a13      	ldr	r2, [pc, #76]	; (80031fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b4:	f7fe f966 	bl	8001484 <HAL_GetTick>
 80031b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031ba:	e009      	b.n	80031d0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031bc:	f7fe f962 	bl	8001484 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d902      	bls.n	80031d0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	73fb      	strb	r3, [r7, #15]
          break;
 80031ce:	e005      	b.n	80031dc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031d0:	4b0a      	ldr	r3, [pc, #40]	; (80031fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0ef      	beq.n	80031bc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d106      	bne.n	80031f0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80031e2:	4b06      	ldr	r3, [pc, #24]	; (80031fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80031e4:	695a      	ldr	r2, [r3, #20]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	4904      	ldr	r1, [pc, #16]	; (80031fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40021000 	.word	0x40021000

08003200 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e049      	b.n	80032a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d106      	bne.n	800322c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7fd fe98 	bl	8000f5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3304      	adds	r3, #4
 800323c:	4619      	mov	r1, r3
 800323e:	4610      	mov	r0, r2
 8003240:	f000 fc22 	bl	8003a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
	...

080032b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d001      	beq.n	80032c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e04f      	b.n	8003368 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0201 	orr.w	r2, r2, #1
 80032de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a23      	ldr	r2, [pc, #140]	; (8003374 <HAL_TIM_Base_Start_IT+0xc4>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d01d      	beq.n	8003326 <HAL_TIM_Base_Start_IT+0x76>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f2:	d018      	beq.n	8003326 <HAL_TIM_Base_Start_IT+0x76>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a1f      	ldr	r2, [pc, #124]	; (8003378 <HAL_TIM_Base_Start_IT+0xc8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d013      	beq.n	8003326 <HAL_TIM_Base_Start_IT+0x76>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a1e      	ldr	r2, [pc, #120]	; (800337c <HAL_TIM_Base_Start_IT+0xcc>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d00e      	beq.n	8003326 <HAL_TIM_Base_Start_IT+0x76>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a1c      	ldr	r2, [pc, #112]	; (8003380 <HAL_TIM_Base_Start_IT+0xd0>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d009      	beq.n	8003326 <HAL_TIM_Base_Start_IT+0x76>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a1b      	ldr	r2, [pc, #108]	; (8003384 <HAL_TIM_Base_Start_IT+0xd4>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d004      	beq.n	8003326 <HAL_TIM_Base_Start_IT+0x76>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a19      	ldr	r2, [pc, #100]	; (8003388 <HAL_TIM_Base_Start_IT+0xd8>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d115      	bne.n	8003352 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	4b17      	ldr	r3, [pc, #92]	; (800338c <HAL_TIM_Base_Start_IT+0xdc>)
 800332e:	4013      	ands	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2b06      	cmp	r3, #6
 8003336:	d015      	beq.n	8003364 <HAL_TIM_Base_Start_IT+0xb4>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800333e:	d011      	beq.n	8003364 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003350:	e008      	b.n	8003364 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0201 	orr.w	r2, r2, #1
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	e000      	b.n	8003366 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003364:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	40012c00 	.word	0x40012c00
 8003378:	40000400 	.word	0x40000400
 800337c:	40000800 	.word	0x40000800
 8003380:	40000c00 	.word	0x40000c00
 8003384:	40013400 	.word	0x40013400
 8003388:	40014000 	.word	0x40014000
 800338c:	00010007 	.word	0x00010007

08003390 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e049      	b.n	8003436 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d106      	bne.n	80033bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7fd fe12 	bl	8000fe0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2202      	movs	r2, #2
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3304      	adds	r3, #4
 80033cc:	4619      	mov	r1, r3
 80033ce:	4610      	mov	r0, r2
 80033d0:	f000 fb5a 	bl	8003a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b082      	sub	sp, #8
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b02      	cmp	r3, #2
 8003452:	d122      	bne.n	800349a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b02      	cmp	r3, #2
 8003460:	d11b      	bne.n	800349a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f06f 0202 	mvn.w	r2, #2
 800346a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	f003 0303 	and.w	r3, r3, #3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 fae2 	bl	8003a4a <HAL_TIM_IC_CaptureCallback>
 8003486:	e005      	b.n	8003494 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 fad4 	bl	8003a36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 fae5 	bl	8003a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b04      	cmp	r3, #4
 80034a6:	d122      	bne.n	80034ee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d11b      	bne.n	80034ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f06f 0204 	mvn.w	r2, #4
 80034be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 fab8 	bl	8003a4a <HAL_TIM_IC_CaptureCallback>
 80034da:	e005      	b.n	80034e8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 faaa 	bl	8003a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fabb 	bl	8003a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	f003 0308 	and.w	r3, r3, #8
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d122      	bne.n	8003542 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b08      	cmp	r3, #8
 8003508:	d11b      	bne.n	8003542 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f06f 0208 	mvn.w	r2, #8
 8003512:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2204      	movs	r2, #4
 8003518:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	f003 0303 	and.w	r3, r3, #3
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 fa8e 	bl	8003a4a <HAL_TIM_IC_CaptureCallback>
 800352e:	e005      	b.n	800353c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 fa80 	bl	8003a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fa91 	bl	8003a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	f003 0310 	and.w	r3, r3, #16
 800354c:	2b10      	cmp	r3, #16
 800354e:	d122      	bne.n	8003596 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f003 0310 	and.w	r3, r3, #16
 800355a:	2b10      	cmp	r3, #16
 800355c:	d11b      	bne.n	8003596 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f06f 0210 	mvn.w	r2, #16
 8003566:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2208      	movs	r2, #8
 800356c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003578:	2b00      	cmp	r3, #0
 800357a:	d003      	beq.n	8003584 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 fa64 	bl	8003a4a <HAL_TIM_IC_CaptureCallback>
 8003582:	e005      	b.n	8003590 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 fa56 	bl	8003a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 fa67 	bl	8003a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d10e      	bne.n	80035c2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d107      	bne.n	80035c2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f06f 0201 	mvn.w	r2, #1
 80035ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7fd fbed 	bl	8000d9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035cc:	2b80      	cmp	r3, #128	; 0x80
 80035ce:	d10e      	bne.n	80035ee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035da:	2b80      	cmp	r3, #128	; 0x80
 80035dc:	d107      	bne.n	80035ee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 fee9 	bl	80043c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035fc:	d10e      	bne.n	800361c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003608:	2b80      	cmp	r3, #128	; 0x80
 800360a:	d107      	bne.n	800361c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fedc 	bl	80043d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003626:	2b40      	cmp	r3, #64	; 0x40
 8003628:	d10e      	bne.n	8003648 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003634:	2b40      	cmp	r3, #64	; 0x40
 8003636:	d107      	bne.n	8003648 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 fa15 	bl	8003a72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	2b20      	cmp	r3, #32
 8003654:	d10e      	bne.n	8003674 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f003 0320 	and.w	r3, r3, #32
 8003660:	2b20      	cmp	r3, #32
 8003662:	d107      	bne.n	8003674 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f06f 0220 	mvn.w	r2, #32
 800366c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 fe9c 	bl	80043ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003674:	bf00      	nop
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003688:	2300      	movs	r3, #0
 800368a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003692:	2b01      	cmp	r3, #1
 8003694:	d101      	bne.n	800369a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003696:	2302      	movs	r3, #2
 8003698:	e0ff      	b.n	800389a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b14      	cmp	r3, #20
 80036a6:	f200 80f0 	bhi.w	800388a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80036aa:	a201      	add	r2, pc, #4	; (adr r2, 80036b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b0:	08003705 	.word	0x08003705
 80036b4:	0800388b 	.word	0x0800388b
 80036b8:	0800388b 	.word	0x0800388b
 80036bc:	0800388b 	.word	0x0800388b
 80036c0:	08003745 	.word	0x08003745
 80036c4:	0800388b 	.word	0x0800388b
 80036c8:	0800388b 	.word	0x0800388b
 80036cc:	0800388b 	.word	0x0800388b
 80036d0:	08003787 	.word	0x08003787
 80036d4:	0800388b 	.word	0x0800388b
 80036d8:	0800388b 	.word	0x0800388b
 80036dc:	0800388b 	.word	0x0800388b
 80036e0:	080037c7 	.word	0x080037c7
 80036e4:	0800388b 	.word	0x0800388b
 80036e8:	0800388b 	.word	0x0800388b
 80036ec:	0800388b 	.word	0x0800388b
 80036f0:	08003809 	.word	0x08003809
 80036f4:	0800388b 	.word	0x0800388b
 80036f8:	0800388b 	.word	0x0800388b
 80036fc:	0800388b 	.word	0x0800388b
 8003700:	08003849 	.word	0x08003849
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68b9      	ldr	r1, [r7, #8]
 800370a:	4618      	mov	r0, r3
 800370c:	f000 fa56 	bl	8003bbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	699a      	ldr	r2, [r3, #24]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0208 	orr.w	r2, r2, #8
 800371e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699a      	ldr	r2, [r3, #24]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0204 	bic.w	r2, r2, #4
 800372e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6999      	ldr	r1, [r3, #24]
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	691a      	ldr	r2, [r3, #16]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	619a      	str	r2, [r3, #24]
      break;
 8003742:	e0a5      	b.n	8003890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68b9      	ldr	r1, [r7, #8]
 800374a:	4618      	mov	r0, r3
 800374c:	f000 fac6 	bl	8003cdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699a      	ldr	r2, [r3, #24]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800375e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699a      	ldr	r2, [r3, #24]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800376e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6999      	ldr	r1, [r3, #24]
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	021a      	lsls	r2, r3, #8
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	619a      	str	r2, [r3, #24]
      break;
 8003784:	e084      	b.n	8003890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68b9      	ldr	r1, [r7, #8]
 800378c:	4618      	mov	r0, r3
 800378e:	f000 fb2f 	bl	8003df0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	69da      	ldr	r2, [r3, #28]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f042 0208 	orr.w	r2, r2, #8
 80037a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	69da      	ldr	r2, [r3, #28]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 0204 	bic.w	r2, r2, #4
 80037b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	69d9      	ldr	r1, [r3, #28]
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	691a      	ldr	r2, [r3, #16]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	61da      	str	r2, [r3, #28]
      break;
 80037c4:	e064      	b.n	8003890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68b9      	ldr	r1, [r7, #8]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 fb97 	bl	8003f00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69da      	ldr	r2, [r3, #28]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	69da      	ldr	r2, [r3, #28]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	69d9      	ldr	r1, [r3, #28]
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	021a      	lsls	r2, r3, #8
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	61da      	str	r2, [r3, #28]
      break;
 8003806:	e043      	b.n	8003890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68b9      	ldr	r1, [r7, #8]
 800380e:	4618      	mov	r0, r3
 8003810:	f000 fbe0 	bl	8003fd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0208 	orr.w	r2, r2, #8
 8003822:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0204 	bic.w	r2, r2, #4
 8003832:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	691a      	ldr	r2, [r3, #16]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003846:	e023      	b.n	8003890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68b9      	ldr	r1, [r7, #8]
 800384e:	4618      	mov	r0, r3
 8003850:	f000 fc24 	bl	800409c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003862:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003872:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	021a      	lsls	r2, r3, #8
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003888:	e002      	b.n	8003890 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	75fb      	strb	r3, [r7, #23]
      break;
 800388e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003898:	7dfb      	ldrb	r3, [r7, #23]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3718      	adds	r7, #24
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop

080038a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ae:	2300      	movs	r3, #0
 80038b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d101      	bne.n	80038c0 <HAL_TIM_ConfigClockSource+0x1c>
 80038bc:	2302      	movs	r3, #2
 80038be:	e0b6      	b.n	8003a2e <HAL_TIM_ConfigClockSource+0x18a>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038fc:	d03e      	beq.n	800397c <HAL_TIM_ConfigClockSource+0xd8>
 80038fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003902:	f200 8087 	bhi.w	8003a14 <HAL_TIM_ConfigClockSource+0x170>
 8003906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800390a:	f000 8086 	beq.w	8003a1a <HAL_TIM_ConfigClockSource+0x176>
 800390e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003912:	d87f      	bhi.n	8003a14 <HAL_TIM_ConfigClockSource+0x170>
 8003914:	2b70      	cmp	r3, #112	; 0x70
 8003916:	d01a      	beq.n	800394e <HAL_TIM_ConfigClockSource+0xaa>
 8003918:	2b70      	cmp	r3, #112	; 0x70
 800391a:	d87b      	bhi.n	8003a14 <HAL_TIM_ConfigClockSource+0x170>
 800391c:	2b60      	cmp	r3, #96	; 0x60
 800391e:	d050      	beq.n	80039c2 <HAL_TIM_ConfigClockSource+0x11e>
 8003920:	2b60      	cmp	r3, #96	; 0x60
 8003922:	d877      	bhi.n	8003a14 <HAL_TIM_ConfigClockSource+0x170>
 8003924:	2b50      	cmp	r3, #80	; 0x50
 8003926:	d03c      	beq.n	80039a2 <HAL_TIM_ConfigClockSource+0xfe>
 8003928:	2b50      	cmp	r3, #80	; 0x50
 800392a:	d873      	bhi.n	8003a14 <HAL_TIM_ConfigClockSource+0x170>
 800392c:	2b40      	cmp	r3, #64	; 0x40
 800392e:	d058      	beq.n	80039e2 <HAL_TIM_ConfigClockSource+0x13e>
 8003930:	2b40      	cmp	r3, #64	; 0x40
 8003932:	d86f      	bhi.n	8003a14 <HAL_TIM_ConfigClockSource+0x170>
 8003934:	2b30      	cmp	r3, #48	; 0x30
 8003936:	d064      	beq.n	8003a02 <HAL_TIM_ConfigClockSource+0x15e>
 8003938:	2b30      	cmp	r3, #48	; 0x30
 800393a:	d86b      	bhi.n	8003a14 <HAL_TIM_ConfigClockSource+0x170>
 800393c:	2b20      	cmp	r3, #32
 800393e:	d060      	beq.n	8003a02 <HAL_TIM_ConfigClockSource+0x15e>
 8003940:	2b20      	cmp	r3, #32
 8003942:	d867      	bhi.n	8003a14 <HAL_TIM_ConfigClockSource+0x170>
 8003944:	2b00      	cmp	r3, #0
 8003946:	d05c      	beq.n	8003a02 <HAL_TIM_ConfigClockSource+0x15e>
 8003948:	2b10      	cmp	r3, #16
 800394a:	d05a      	beq.n	8003a02 <HAL_TIM_ConfigClockSource+0x15e>
 800394c:	e062      	b.n	8003a14 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6818      	ldr	r0, [r3, #0]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	6899      	ldr	r1, [r3, #8]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f000 fc7d 	bl	800425c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003970:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	609a      	str	r2, [r3, #8]
      break;
 800397a:	e04f      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6818      	ldr	r0, [r3, #0]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	6899      	ldr	r1, [r3, #8]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f000 fc66 	bl	800425c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800399e:	609a      	str	r2, [r3, #8]
      break;
 80039a0:	e03c      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6818      	ldr	r0, [r3, #0]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	6859      	ldr	r1, [r3, #4]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	461a      	mov	r2, r3
 80039b0:	f000 fbda 	bl	8004168 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2150      	movs	r1, #80	; 0x50
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 fc33 	bl	8004226 <TIM_ITRx_SetConfig>
      break;
 80039c0:	e02c      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6818      	ldr	r0, [r3, #0]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	6859      	ldr	r1, [r3, #4]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	461a      	mov	r2, r3
 80039d0:	f000 fbf9 	bl	80041c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2160      	movs	r1, #96	; 0x60
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 fc23 	bl	8004226 <TIM_ITRx_SetConfig>
      break;
 80039e0:	e01c      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6818      	ldr	r0, [r3, #0]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	6859      	ldr	r1, [r3, #4]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	461a      	mov	r2, r3
 80039f0:	f000 fbba 	bl	8004168 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2140      	movs	r1, #64	; 0x40
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 fc13 	bl	8004226 <TIM_ITRx_SetConfig>
      break;
 8003a00:	e00c      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	f000 fc0a 	bl	8004226 <TIM_ITRx_SetConfig>
      break;
 8003a12:	e003      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	73fb      	strb	r3, [r7, #15]
      break;
 8003a18:	e000      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003a1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b083      	sub	sp, #12
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
	...

08003a88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a40      	ldr	r2, [pc, #256]	; (8003b9c <TIM_Base_SetConfig+0x114>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d013      	beq.n	8003ac8 <TIM_Base_SetConfig+0x40>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa6:	d00f      	beq.n	8003ac8 <TIM_Base_SetConfig+0x40>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a3d      	ldr	r2, [pc, #244]	; (8003ba0 <TIM_Base_SetConfig+0x118>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d00b      	beq.n	8003ac8 <TIM_Base_SetConfig+0x40>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a3c      	ldr	r2, [pc, #240]	; (8003ba4 <TIM_Base_SetConfig+0x11c>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d007      	beq.n	8003ac8 <TIM_Base_SetConfig+0x40>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a3b      	ldr	r2, [pc, #236]	; (8003ba8 <TIM_Base_SetConfig+0x120>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d003      	beq.n	8003ac8 <TIM_Base_SetConfig+0x40>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a3a      	ldr	r2, [pc, #232]	; (8003bac <TIM_Base_SetConfig+0x124>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d108      	bne.n	8003ada <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ace:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a2f      	ldr	r2, [pc, #188]	; (8003b9c <TIM_Base_SetConfig+0x114>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d01f      	beq.n	8003b22 <TIM_Base_SetConfig+0x9a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae8:	d01b      	beq.n	8003b22 <TIM_Base_SetConfig+0x9a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a2c      	ldr	r2, [pc, #176]	; (8003ba0 <TIM_Base_SetConfig+0x118>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d017      	beq.n	8003b22 <TIM_Base_SetConfig+0x9a>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a2b      	ldr	r2, [pc, #172]	; (8003ba4 <TIM_Base_SetConfig+0x11c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d013      	beq.n	8003b22 <TIM_Base_SetConfig+0x9a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a2a      	ldr	r2, [pc, #168]	; (8003ba8 <TIM_Base_SetConfig+0x120>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d00f      	beq.n	8003b22 <TIM_Base_SetConfig+0x9a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a29      	ldr	r2, [pc, #164]	; (8003bac <TIM_Base_SetConfig+0x124>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d00b      	beq.n	8003b22 <TIM_Base_SetConfig+0x9a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a28      	ldr	r2, [pc, #160]	; (8003bb0 <TIM_Base_SetConfig+0x128>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d007      	beq.n	8003b22 <TIM_Base_SetConfig+0x9a>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a27      	ldr	r2, [pc, #156]	; (8003bb4 <TIM_Base_SetConfig+0x12c>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d003      	beq.n	8003b22 <TIM_Base_SetConfig+0x9a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a26      	ldr	r2, [pc, #152]	; (8003bb8 <TIM_Base_SetConfig+0x130>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d108      	bne.n	8003b34 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a10      	ldr	r2, [pc, #64]	; (8003b9c <TIM_Base_SetConfig+0x114>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d00f      	beq.n	8003b80 <TIM_Base_SetConfig+0xf8>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a12      	ldr	r2, [pc, #72]	; (8003bac <TIM_Base_SetConfig+0x124>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d00b      	beq.n	8003b80 <TIM_Base_SetConfig+0xf8>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a11      	ldr	r2, [pc, #68]	; (8003bb0 <TIM_Base_SetConfig+0x128>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d007      	beq.n	8003b80 <TIM_Base_SetConfig+0xf8>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a10      	ldr	r2, [pc, #64]	; (8003bb4 <TIM_Base_SetConfig+0x12c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d003      	beq.n	8003b80 <TIM_Base_SetConfig+0xf8>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a0f      	ldr	r2, [pc, #60]	; (8003bb8 <TIM_Base_SetConfig+0x130>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d103      	bne.n	8003b88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	615a      	str	r2, [r3, #20]
}
 8003b8e:	bf00      	nop
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	40012c00 	.word	0x40012c00
 8003ba0:	40000400 	.word	0x40000400
 8003ba4:	40000800 	.word	0x40000800
 8003ba8:	40000c00 	.word	0x40000c00
 8003bac:	40013400 	.word	0x40013400
 8003bb0:	40014000 	.word	0x40014000
 8003bb4:	40014400 	.word	0x40014400
 8003bb8:	40014800 	.word	0x40014800

08003bbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	f023 0201 	bic.w	r2, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f023 0303 	bic.w	r3, r3, #3
 8003bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f023 0302 	bic.w	r3, r3, #2
 8003c08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a2c      	ldr	r2, [pc, #176]	; (8003cc8 <TIM_OC1_SetConfig+0x10c>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d00f      	beq.n	8003c3c <TIM_OC1_SetConfig+0x80>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a2b      	ldr	r2, [pc, #172]	; (8003ccc <TIM_OC1_SetConfig+0x110>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d00b      	beq.n	8003c3c <TIM_OC1_SetConfig+0x80>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a2a      	ldr	r2, [pc, #168]	; (8003cd0 <TIM_OC1_SetConfig+0x114>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d007      	beq.n	8003c3c <TIM_OC1_SetConfig+0x80>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a29      	ldr	r2, [pc, #164]	; (8003cd4 <TIM_OC1_SetConfig+0x118>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d003      	beq.n	8003c3c <TIM_OC1_SetConfig+0x80>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a28      	ldr	r2, [pc, #160]	; (8003cd8 <TIM_OC1_SetConfig+0x11c>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d10c      	bne.n	8003c56 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f023 0308 	bic.w	r3, r3, #8
 8003c42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f023 0304 	bic.w	r3, r3, #4
 8003c54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a1b      	ldr	r2, [pc, #108]	; (8003cc8 <TIM_OC1_SetConfig+0x10c>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00f      	beq.n	8003c7e <TIM_OC1_SetConfig+0xc2>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a1a      	ldr	r2, [pc, #104]	; (8003ccc <TIM_OC1_SetConfig+0x110>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d00b      	beq.n	8003c7e <TIM_OC1_SetConfig+0xc2>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a19      	ldr	r2, [pc, #100]	; (8003cd0 <TIM_OC1_SetConfig+0x114>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d007      	beq.n	8003c7e <TIM_OC1_SetConfig+0xc2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a18      	ldr	r2, [pc, #96]	; (8003cd4 <TIM_OC1_SetConfig+0x118>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d003      	beq.n	8003c7e <TIM_OC1_SetConfig+0xc2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a17      	ldr	r2, [pc, #92]	; (8003cd8 <TIM_OC1_SetConfig+0x11c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d111      	bne.n	8003ca2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	621a      	str	r2, [r3, #32]
}
 8003cbc:	bf00      	nop
 8003cbe:	371c      	adds	r7, #28
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	40012c00 	.word	0x40012c00
 8003ccc:	40013400 	.word	0x40013400
 8003cd0:	40014000 	.word	0x40014000
 8003cd4:	40014400 	.word	0x40014400
 8003cd8:	40014800 	.word	0x40014800

08003cdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	f023 0210 	bic.w	r2, r3, #16
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	021b      	lsls	r3, r3, #8
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f023 0320 	bic.w	r3, r3, #32
 8003d2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a28      	ldr	r2, [pc, #160]	; (8003ddc <TIM_OC2_SetConfig+0x100>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d003      	beq.n	8003d48 <TIM_OC2_SetConfig+0x6c>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a27      	ldr	r2, [pc, #156]	; (8003de0 <TIM_OC2_SetConfig+0x104>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d10d      	bne.n	8003d64 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a1d      	ldr	r2, [pc, #116]	; (8003ddc <TIM_OC2_SetConfig+0x100>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d00f      	beq.n	8003d8c <TIM_OC2_SetConfig+0xb0>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a1c      	ldr	r2, [pc, #112]	; (8003de0 <TIM_OC2_SetConfig+0x104>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d00b      	beq.n	8003d8c <TIM_OC2_SetConfig+0xb0>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a1b      	ldr	r2, [pc, #108]	; (8003de4 <TIM_OC2_SetConfig+0x108>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d007      	beq.n	8003d8c <TIM_OC2_SetConfig+0xb0>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a1a      	ldr	r2, [pc, #104]	; (8003de8 <TIM_OC2_SetConfig+0x10c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d003      	beq.n	8003d8c <TIM_OC2_SetConfig+0xb0>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a19      	ldr	r2, [pc, #100]	; (8003dec <TIM_OC2_SetConfig+0x110>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d113      	bne.n	8003db4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	621a      	str	r2, [r3, #32]
}
 8003dce:	bf00      	nop
 8003dd0:	371c      	adds	r7, #28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	40012c00 	.word	0x40012c00
 8003de0:	40013400 	.word	0x40013400
 8003de4:	40014000 	.word	0x40014000
 8003de8:	40014400 	.word	0x40014400
 8003dec:	40014800 	.word	0x40014800

08003df0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f023 0303 	bic.w	r3, r3, #3
 8003e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	021b      	lsls	r3, r3, #8
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a27      	ldr	r2, [pc, #156]	; (8003eec <TIM_OC3_SetConfig+0xfc>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d003      	beq.n	8003e5a <TIM_OC3_SetConfig+0x6a>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a26      	ldr	r2, [pc, #152]	; (8003ef0 <TIM_OC3_SetConfig+0x100>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d10d      	bne.n	8003e76 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	021b      	lsls	r3, r3, #8
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a1c      	ldr	r2, [pc, #112]	; (8003eec <TIM_OC3_SetConfig+0xfc>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d00f      	beq.n	8003e9e <TIM_OC3_SetConfig+0xae>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a1b      	ldr	r2, [pc, #108]	; (8003ef0 <TIM_OC3_SetConfig+0x100>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00b      	beq.n	8003e9e <TIM_OC3_SetConfig+0xae>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a1a      	ldr	r2, [pc, #104]	; (8003ef4 <TIM_OC3_SetConfig+0x104>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d007      	beq.n	8003e9e <TIM_OC3_SetConfig+0xae>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a19      	ldr	r2, [pc, #100]	; (8003ef8 <TIM_OC3_SetConfig+0x108>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d003      	beq.n	8003e9e <TIM_OC3_SetConfig+0xae>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a18      	ldr	r2, [pc, #96]	; (8003efc <TIM_OC3_SetConfig+0x10c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d113      	bne.n	8003ec6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003eac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	621a      	str	r2, [r3, #32]
}
 8003ee0:	bf00      	nop
 8003ee2:	371c      	adds	r7, #28
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	40012c00 	.word	0x40012c00
 8003ef0:	40013400 	.word	0x40013400
 8003ef4:	40014000 	.word	0x40014000
 8003ef8:	40014400 	.word	0x40014400
 8003efc:	40014800 	.word	0x40014800

08003f00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	021b      	lsls	r3, r3, #8
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	031b      	lsls	r3, r3, #12
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a18      	ldr	r2, [pc, #96]	; (8003fc0 <TIM_OC4_SetConfig+0xc0>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d00f      	beq.n	8003f84 <TIM_OC4_SetConfig+0x84>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a17      	ldr	r2, [pc, #92]	; (8003fc4 <TIM_OC4_SetConfig+0xc4>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d00b      	beq.n	8003f84 <TIM_OC4_SetConfig+0x84>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a16      	ldr	r2, [pc, #88]	; (8003fc8 <TIM_OC4_SetConfig+0xc8>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d007      	beq.n	8003f84 <TIM_OC4_SetConfig+0x84>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a15      	ldr	r2, [pc, #84]	; (8003fcc <TIM_OC4_SetConfig+0xcc>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d003      	beq.n	8003f84 <TIM_OC4_SetConfig+0x84>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a14      	ldr	r2, [pc, #80]	; (8003fd0 <TIM_OC4_SetConfig+0xd0>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d109      	bne.n	8003f98 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	019b      	lsls	r3, r3, #6
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	621a      	str	r2, [r3, #32]
}
 8003fb2:	bf00      	nop
 8003fb4:	371c      	adds	r7, #28
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	40012c00 	.word	0x40012c00
 8003fc4:	40013400 	.word	0x40013400
 8003fc8:	40014000 	.word	0x40014000
 8003fcc:	40014400 	.word	0x40014400
 8003fd0:	40014800 	.word	0x40014800

08003fd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004018:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	041b      	lsls	r3, r3, #16
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	4313      	orrs	r3, r2
 8004024:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a17      	ldr	r2, [pc, #92]	; (8004088 <TIM_OC5_SetConfig+0xb4>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d00f      	beq.n	800404e <TIM_OC5_SetConfig+0x7a>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a16      	ldr	r2, [pc, #88]	; (800408c <TIM_OC5_SetConfig+0xb8>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d00b      	beq.n	800404e <TIM_OC5_SetConfig+0x7a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a15      	ldr	r2, [pc, #84]	; (8004090 <TIM_OC5_SetConfig+0xbc>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d007      	beq.n	800404e <TIM_OC5_SetConfig+0x7a>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a14      	ldr	r2, [pc, #80]	; (8004094 <TIM_OC5_SetConfig+0xc0>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d003      	beq.n	800404e <TIM_OC5_SetConfig+0x7a>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a13      	ldr	r2, [pc, #76]	; (8004098 <TIM_OC5_SetConfig+0xc4>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d109      	bne.n	8004062 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004054:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	021b      	lsls	r3, r3, #8
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	4313      	orrs	r3, r2
 8004060:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	621a      	str	r2, [r3, #32]
}
 800407c:	bf00      	nop
 800407e:	371c      	adds	r7, #28
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	40012c00 	.word	0x40012c00
 800408c:	40013400 	.word	0x40013400
 8004090:	40014000 	.word	0x40014000
 8004094:	40014400 	.word	0x40014400
 8004098:	40014800 	.word	0x40014800

0800409c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800409c:	b480      	push	{r7}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	021b      	lsls	r3, r3, #8
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	4313      	orrs	r3, r2
 80040da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	051b      	lsls	r3, r3, #20
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a18      	ldr	r2, [pc, #96]	; (8004154 <TIM_OC6_SetConfig+0xb8>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d00f      	beq.n	8004118 <TIM_OC6_SetConfig+0x7c>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a17      	ldr	r2, [pc, #92]	; (8004158 <TIM_OC6_SetConfig+0xbc>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d00b      	beq.n	8004118 <TIM_OC6_SetConfig+0x7c>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a16      	ldr	r2, [pc, #88]	; (800415c <TIM_OC6_SetConfig+0xc0>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d007      	beq.n	8004118 <TIM_OC6_SetConfig+0x7c>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a15      	ldr	r2, [pc, #84]	; (8004160 <TIM_OC6_SetConfig+0xc4>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d003      	beq.n	8004118 <TIM_OC6_SetConfig+0x7c>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a14      	ldr	r2, [pc, #80]	; (8004164 <TIM_OC6_SetConfig+0xc8>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d109      	bne.n	800412c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800411e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	029b      	lsls	r3, r3, #10
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	4313      	orrs	r3, r2
 800412a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	621a      	str	r2, [r3, #32]
}
 8004146:	bf00      	nop
 8004148:	371c      	adds	r7, #28
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	40012c00 	.word	0x40012c00
 8004158:	40013400 	.word	0x40013400
 800415c:	40014000 	.word	0x40014000
 8004160:	40014400 	.word	0x40014400
 8004164:	40014800 	.word	0x40014800

08004168 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	f023 0201 	bic.w	r2, r3, #1
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004192:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f023 030a 	bic.w	r3, r3, #10
 80041a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	621a      	str	r2, [r3, #32]
}
 80041ba:	bf00      	nop
 80041bc:	371c      	adds	r7, #28
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b087      	sub	sp, #28
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	60f8      	str	r0, [r7, #12]
 80041ce:	60b9      	str	r1, [r7, #8]
 80041d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	f023 0210 	bic.w	r2, r3, #16
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	031b      	lsls	r3, r3, #12
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004202:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4313      	orrs	r3, r2
 800420c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	621a      	str	r2, [r3, #32]
}
 800421a:	bf00      	nop
 800421c:	371c      	adds	r7, #28
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004226:	b480      	push	{r7}
 8004228:	b085      	sub	sp, #20
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4313      	orrs	r3, r2
 8004244:	f043 0307 	orr.w	r3, r3, #7
 8004248:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	609a      	str	r2, [r3, #8]
}
 8004250:	bf00      	nop
 8004252:	3714      	adds	r7, #20
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800425c:	b480      	push	{r7}
 800425e:	b087      	sub	sp, #28
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
 8004268:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004276:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	021a      	lsls	r2, r3, #8
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	431a      	orrs	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	4313      	orrs	r3, r2
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	4313      	orrs	r3, r2
 8004288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	609a      	str	r2, [r3, #8]
}
 8004290:	bf00      	nop
 8004292:	371c      	adds	r7, #28
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d101      	bne.n	80042b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042b0:	2302      	movs	r3, #2
 80042b2:	e068      	b.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2202      	movs	r2, #2
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a2e      	ldr	r2, [pc, #184]	; (8004394 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d004      	beq.n	80042e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a2d      	ldr	r2, [pc, #180]	; (8004398 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d108      	bne.n	80042fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80042ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004300:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	4313      	orrs	r3, r2
 800430a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a1e      	ldr	r2, [pc, #120]	; (8004394 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d01d      	beq.n	800435a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004326:	d018      	beq.n	800435a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a1b      	ldr	r2, [pc, #108]	; (800439c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d013      	beq.n	800435a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a1a      	ldr	r2, [pc, #104]	; (80043a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d00e      	beq.n	800435a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a18      	ldr	r2, [pc, #96]	; (80043a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d009      	beq.n	800435a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a13      	ldr	r2, [pc, #76]	; (8004398 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d004      	beq.n	800435a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a14      	ldr	r2, [pc, #80]	; (80043a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d10c      	bne.n	8004374 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004360:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	4313      	orrs	r3, r2
 800436a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	40012c00 	.word	0x40012c00
 8004398:	40013400 	.word	0x40013400
 800439c:	40000400 	.word	0x40000400
 80043a0:	40000800 	.word	0x40000800
 80043a4:	40000c00 	.word	0x40000c00
 80043a8:	40014000 	.word	0x40014000

080043ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e040      	b.n	800447c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d106      	bne.n	8004410 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7fc fe40 	bl	8001090 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2224      	movs	r2, #36	; 0x24
 8004414:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0201 	bic.w	r2, r2, #1
 8004424:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fc94 	bl	8004d54 <UART_SetConfig>
 800442c:	4603      	mov	r3, r0
 800442e:	2b01      	cmp	r3, #1
 8004430:	d101      	bne.n	8004436 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e022      	b.n	800447c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	2b00      	cmp	r3, #0
 800443c:	d002      	beq.n	8004444 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 ff40 	bl	80052c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004452:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689a      	ldr	r2, [r3, #8]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004462:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f042 0201 	orr.w	r2, r2, #1
 8004472:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 ffc7 	bl	8005408 <UART_CheckIdleState>
 800447a:	4603      	mov	r3, r0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b08a      	sub	sp, #40	; 0x28
 8004488:	af02      	add	r7, sp, #8
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	603b      	str	r3, [r7, #0]
 8004490:	4613      	mov	r3, r2
 8004492:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004498:	2b20      	cmp	r3, #32
 800449a:	f040 8082 	bne.w	80045a2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d002      	beq.n	80044aa <HAL_UART_Transmit+0x26>
 80044a4:	88fb      	ldrh	r3, [r7, #6]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e07a      	b.n	80045a4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d101      	bne.n	80044bc <HAL_UART_Transmit+0x38>
 80044b8:	2302      	movs	r3, #2
 80044ba:	e073      	b.n	80045a4 <HAL_UART_Transmit+0x120>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2221      	movs	r2, #33	; 0x21
 80044d0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044d2:	f7fc ffd7 	bl	8001484 <HAL_GetTick>
 80044d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	88fa      	ldrh	r2, [r7, #6]
 80044dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	88fa      	ldrh	r2, [r7, #6]
 80044e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044f0:	d108      	bne.n	8004504 <HAL_UART_Transmit+0x80>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d104      	bne.n	8004504 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	61bb      	str	r3, [r7, #24]
 8004502:	e003      	b.n	800450c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004508:	2300      	movs	r3, #0
 800450a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004514:	e02d      	b.n	8004572 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2200      	movs	r2, #0
 800451e:	2180      	movs	r1, #128	; 0x80
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 ffba 	bl	800549a <UART_WaitOnFlagUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e039      	b.n	80045a4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10b      	bne.n	800454e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	881a      	ldrh	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004542:	b292      	uxth	r2, r2
 8004544:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	3302      	adds	r3, #2
 800454a:	61bb      	str	r3, [r7, #24]
 800454c:	e008      	b.n	8004560 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	781a      	ldrb	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	b292      	uxth	r2, r2
 8004558:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	3301      	adds	r3, #1
 800455e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004566:	b29b      	uxth	r3, r3
 8004568:	3b01      	subs	r3, #1
 800456a:	b29a      	uxth	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1cb      	bne.n	8004516 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2200      	movs	r2, #0
 8004586:	2140      	movs	r1, #64	; 0x40
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 ff86 	bl	800549a <UART_WaitOnFlagUntilTimeout>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e005      	b.n	80045a4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2220      	movs	r2, #32
 800459c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800459e:	2300      	movs	r3, #0
 80045a0:	e000      	b.n	80045a4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80045a2:	2302      	movs	r3, #2
  }
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3720      	adds	r7, #32
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b08a      	sub	sp, #40	; 0x28
 80045b0:	af02      	add	r7, sp, #8
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	603b      	str	r3, [r7, #0]
 80045b8:	4613      	mov	r3, r2
 80045ba:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045c0:	2b20      	cmp	r3, #32
 80045c2:	f040 80bf 	bne.w	8004744 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d002      	beq.n	80045d2 <HAL_UART_Receive+0x26>
 80045cc:	88fb      	ldrh	r3, [r7, #6]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e0b7      	b.n	8004746 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d101      	bne.n	80045e4 <HAL_UART_Receive+0x38>
 80045e0:	2302      	movs	r3, #2
 80045e2:	e0b0      	b.n	8004746 <HAL_UART_Receive+0x19a>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2222      	movs	r2, #34	; 0x22
 80045f8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004600:	f7fc ff40 	bl	8001484 <HAL_GetTick>
 8004604:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	88fa      	ldrh	r2, [r7, #6]
 800460a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	88fa      	ldrh	r2, [r7, #6]
 8004612:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800461e:	d10e      	bne.n	800463e <HAL_UART_Receive+0x92>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d105      	bne.n	8004634 <HAL_UART_Receive+0x88>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800462e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004632:	e02d      	b.n	8004690 <HAL_UART_Receive+0xe4>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	22ff      	movs	r2, #255	; 0xff
 8004638:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800463c:	e028      	b.n	8004690 <HAL_UART_Receive+0xe4>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10d      	bne.n	8004662 <HAL_UART_Receive+0xb6>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d104      	bne.n	8004658 <HAL_UART_Receive+0xac>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	22ff      	movs	r2, #255	; 0xff
 8004652:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004656:	e01b      	b.n	8004690 <HAL_UART_Receive+0xe4>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	227f      	movs	r2, #127	; 0x7f
 800465c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004660:	e016      	b.n	8004690 <HAL_UART_Receive+0xe4>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800466a:	d10d      	bne.n	8004688 <HAL_UART_Receive+0xdc>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d104      	bne.n	800467e <HAL_UART_Receive+0xd2>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	227f      	movs	r2, #127	; 0x7f
 8004678:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800467c:	e008      	b.n	8004690 <HAL_UART_Receive+0xe4>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	223f      	movs	r2, #63	; 0x3f
 8004682:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004686:	e003      	b.n	8004690 <HAL_UART_Receive+0xe4>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004696:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a0:	d108      	bne.n	80046b4 <HAL_UART_Receive+0x108>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d104      	bne.n	80046b4 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80046aa:	2300      	movs	r3, #0
 80046ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	61bb      	str	r3, [r7, #24]
 80046b2:	e003      	b.n	80046bc <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046b8:	2300      	movs	r3, #0
 80046ba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80046c4:	e033      	b.n	800472e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2200      	movs	r2, #0
 80046ce:	2120      	movs	r1, #32
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 fee2 	bl	800549a <UART_WaitOnFlagUntilTimeout>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e032      	b.n	8004746 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10c      	bne.n	8004700 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	8a7b      	ldrh	r3, [r7, #18]
 80046f0:	4013      	ands	r3, r2
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	3302      	adds	r3, #2
 80046fc:	61bb      	str	r3, [r7, #24]
 80046fe:	e00d      	b.n	800471c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004706:	b29b      	uxth	r3, r3
 8004708:	b2da      	uxtb	r2, r3
 800470a:	8a7b      	ldrh	r3, [r7, #18]
 800470c:	b2db      	uxtb	r3, r3
 800470e:	4013      	ands	r3, r2
 8004710:	b2da      	uxtb	r2, r3
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	3301      	adds	r3, #1
 800471a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004722:	b29b      	uxth	r3, r3
 8004724:	3b01      	subs	r3, #1
 8004726:	b29a      	uxth	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004734:	b29b      	uxth	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1c5      	bne.n	80046c6 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2220      	movs	r2, #32
 800473e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004740:	2300      	movs	r3, #0
 8004742:	e000      	b.n	8004746 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004744:	2302      	movs	r3, #2
  }
}
 8004746:	4618      	mov	r0, r3
 8004748:	3720      	adds	r7, #32
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
	...

08004750 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b0ba      	sub	sp, #232	; 0xe8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004776:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800477a:	f640 030f 	movw	r3, #2063	; 0x80f
 800477e:	4013      	ands	r3, r2
 8004780:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004784:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004788:	2b00      	cmp	r3, #0
 800478a:	d115      	bne.n	80047b8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800478c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004790:	f003 0320 	and.w	r3, r3, #32
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00f      	beq.n	80047b8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800479c:	f003 0320 	and.w	r3, r3, #32
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d009      	beq.n	80047b8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 82a6 	beq.w	8004cfa <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	4798      	blx	r3
      }
      return;
 80047b6:	e2a0      	b.n	8004cfa <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80047b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 8117 	beq.w	80049f0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80047c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d106      	bne.n	80047dc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80047ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80047d2:	4b85      	ldr	r3, [pc, #532]	; (80049e8 <HAL_UART_IRQHandler+0x298>)
 80047d4:	4013      	ands	r3, r2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 810a 	beq.w	80049f0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80047dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d011      	beq.n	800480c <HAL_UART_IRQHandler+0xbc>
 80047e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00b      	beq.n	800480c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2201      	movs	r2, #1
 80047fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004802:	f043 0201 	orr.w	r2, r3, #1
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800480c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d011      	beq.n	800483c <HAL_UART_IRQHandler+0xec>
 8004818:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00b      	beq.n	800483c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2202      	movs	r2, #2
 800482a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004832:	f043 0204 	orr.w	r2, r3, #4
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800483c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b00      	cmp	r3, #0
 8004846:	d011      	beq.n	800486c <HAL_UART_IRQHandler+0x11c>
 8004848:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00b      	beq.n	800486c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2204      	movs	r2, #4
 800485a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004862:	f043 0202 	orr.w	r2, r3, #2
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800486c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004870:	f003 0308 	and.w	r3, r3, #8
 8004874:	2b00      	cmp	r3, #0
 8004876:	d017      	beq.n	80048a8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800487c:	f003 0320 	and.w	r3, r3, #32
 8004880:	2b00      	cmp	r3, #0
 8004882:	d105      	bne.n	8004890 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004888:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00b      	beq.n	80048a8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2208      	movs	r2, #8
 8004896:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800489e:	f043 0208 	orr.w	r2, r3, #8
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80048a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d012      	beq.n	80048da <HAL_UART_IRQHandler+0x18a>
 80048b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00c      	beq.n	80048da <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048d0:	f043 0220 	orr.w	r2, r3, #32
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 820c 	beq.w	8004cfe <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80048e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ea:	f003 0320 	and.w	r3, r3, #32
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00d      	beq.n	800490e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048f6:	f003 0320 	and.w	r3, r3, #32
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d007      	beq.n	800490e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004914:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004922:	2b40      	cmp	r3, #64	; 0x40
 8004924:	d005      	beq.n	8004932 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004926:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800492a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800492e:	2b00      	cmp	r3, #0
 8004930:	d04f      	beq.n	80049d2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 fe75 	bl	8005622 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004942:	2b40      	cmp	r3, #64	; 0x40
 8004944:	d141      	bne.n	80049ca <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	3308      	adds	r3, #8
 800494c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004950:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004954:	e853 3f00 	ldrex	r3, [r3]
 8004958:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800495c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004960:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004964:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	3308      	adds	r3, #8
 800496e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004972:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004976:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800497e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004982:	e841 2300 	strex	r3, r2, [r1]
 8004986:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800498a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1d9      	bne.n	8004946 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004996:	2b00      	cmp	r3, #0
 8004998:	d013      	beq.n	80049c2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499e:	4a13      	ldr	r2, [pc, #76]	; (80049ec <HAL_UART_IRQHandler+0x29c>)
 80049a0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fc febc 	bl	8001724 <HAL_DMA_Abort_IT>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d017      	beq.n	80049e2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80049bc:	4610      	mov	r0, r2
 80049be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c0:	e00f      	b.n	80049e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f9b0 	bl	8004d28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c8:	e00b      	b.n	80049e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f9ac 	bl	8004d28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d0:	e007      	b.n	80049e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f9a8 	bl	8004d28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80049e0:	e18d      	b.n	8004cfe <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e2:	bf00      	nop
    return;
 80049e4:	e18b      	b.n	8004cfe <HAL_UART_IRQHandler+0x5ae>
 80049e6:	bf00      	nop
 80049e8:	04000120 	.word	0x04000120
 80049ec:	080056e9 	.word	0x080056e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	f040 8146 	bne.w	8004c86 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80049fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049fe:	f003 0310 	and.w	r3, r3, #16
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 813f 	beq.w	8004c86 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a0c:	f003 0310 	and.w	r3, r3, #16
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 8138 	beq.w	8004c86 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2210      	movs	r2, #16
 8004a1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a28:	2b40      	cmp	r3, #64	; 0x40
 8004a2a:	f040 80b4 	bne.w	8004b96 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a3a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 815f 	beq.w	8004d02 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	f080 8157 	bcs.w	8004d02 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0320 	and.w	r3, r3, #32
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f040 8085 	bne.w	8004b7a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a7c:	e853 3f00 	ldrex	r3, [r3]
 8004a80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	461a      	mov	r2, r3
 8004a96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a9e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004aa6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004aaa:	e841 2300 	strex	r3, r2, [r1]
 8004aae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004ab2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1da      	bne.n	8004a70 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	3308      	adds	r3, #8
 8004ac0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ac4:	e853 3f00 	ldrex	r3, [r3]
 8004ac8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004aca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004acc:	f023 0301 	bic.w	r3, r3, #1
 8004ad0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	3308      	adds	r3, #8
 8004ada:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ade:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004ae2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ae6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004aea:	e841 2300 	strex	r3, r2, [r1]
 8004aee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004af0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1e1      	bne.n	8004aba <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	3308      	adds	r3, #8
 8004afc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b00:	e853 3f00 	ldrex	r3, [r3]
 8004b04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3308      	adds	r3, #8
 8004b16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b22:	e841 2300 	strex	r3, r2, [r1]
 8004b26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1e3      	bne.n	8004af6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2220      	movs	r2, #32
 8004b32:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b42:	e853 3f00 	ldrex	r3, [r3]
 8004b46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b4a:	f023 0310 	bic.w	r3, r3, #16
 8004b4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	461a      	mov	r2, r3
 8004b58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b5e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b64:	e841 2300 	strex	r3, r2, [r1]
 8004b68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1e4      	bne.n	8004b3a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7fc fd97 	bl	80016a8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f8d4 	bl	8004d3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b94:	e0b5      	b.n	8004d02 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 80a7 	beq.w	8004d06 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004bb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 80a2 	beq.w	8004d06 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bca:	e853 3f00 	ldrex	r3, [r3]
 8004bce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	461a      	mov	r2, r3
 8004be0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004be4:	647b      	str	r3, [r7, #68]	; 0x44
 8004be6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004bea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bec:	e841 2300 	strex	r3, r2, [r1]
 8004bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1e4      	bne.n	8004bc2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	3308      	adds	r3, #8
 8004bfe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	e853 3f00 	ldrex	r3, [r3]
 8004c06:	623b      	str	r3, [r7, #32]
   return(result);
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	f023 0301 	bic.w	r3, r3, #1
 8004c0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3308      	adds	r3, #8
 8004c18:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c1c:	633a      	str	r2, [r7, #48]	; 0x30
 8004c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c24:	e841 2300 	strex	r3, r2, [r1]
 8004c28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1e3      	bne.n	8004bf8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2220      	movs	r2, #32
 8004c34:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	e853 3f00 	ldrex	r3, [r3]
 8004c4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f023 0310 	bic.w	r3, r3, #16
 8004c56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c64:	61fb      	str	r3, [r7, #28]
 8004c66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c68:	69b9      	ldr	r1, [r7, #24]
 8004c6a:	69fa      	ldr	r2, [r7, #28]
 8004c6c:	e841 2300 	strex	r3, r2, [r1]
 8004c70:	617b      	str	r3, [r7, #20]
   return(result);
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1e4      	bne.n	8004c42 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f85c 	bl	8004d3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c84:	e03f      	b.n	8004d06 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00e      	beq.n	8004cb0 <HAL_UART_IRQHandler+0x560>
 8004c92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d008      	beq.n	8004cb0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004ca6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 fd5d 	bl	8005768 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004cae:	e02d      	b.n	8004d0c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00e      	beq.n	8004cda <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d008      	beq.n	8004cda <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d01c      	beq.n	8004d0a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	4798      	blx	r3
    }
    return;
 8004cd8:	e017      	b.n	8004d0a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d012      	beq.n	8004d0c <HAL_UART_IRQHandler+0x5bc>
 8004ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00c      	beq.n	8004d0c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 fd0e 	bl	8005714 <UART_EndTransmit_IT>
    return;
 8004cf8:	e008      	b.n	8004d0c <HAL_UART_IRQHandler+0x5bc>
      return;
 8004cfa:	bf00      	nop
 8004cfc:	e006      	b.n	8004d0c <HAL_UART_IRQHandler+0x5bc>
    return;
 8004cfe:	bf00      	nop
 8004d00:	e004      	b.n	8004d0c <HAL_UART_IRQHandler+0x5bc>
      return;
 8004d02:	bf00      	nop
 8004d04:	e002      	b.n	8004d0c <HAL_UART_IRQHandler+0x5bc>
      return;
 8004d06:	bf00      	nop
 8004d08:	e000      	b.n	8004d0c <HAL_UART_IRQHandler+0x5bc>
    return;
 8004d0a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004d0c:	37e8      	adds	r7, #232	; 0xe8
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop

08004d14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d58:	b08a      	sub	sp, #40	; 0x28
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	431a      	orrs	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	4ba4      	ldr	r3, [pc, #656]	; (8005014 <UART_SetConfig+0x2c0>)
 8004d84:	4013      	ands	r3, r2
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	6812      	ldr	r2, [r2, #0]
 8004d8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d8c:	430b      	orrs	r3, r1
 8004d8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	68da      	ldr	r2, [r3, #12]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a99      	ldr	r2, [pc, #612]	; (8005018 <UART_SetConfig+0x2c4>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d004      	beq.n	8004dc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a90      	ldr	r2, [pc, #576]	; (800501c <UART_SetConfig+0x2c8>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d126      	bne.n	8004e2c <UART_SetConfig+0xd8>
 8004dde:	4b90      	ldr	r3, [pc, #576]	; (8005020 <UART_SetConfig+0x2cc>)
 8004de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de4:	f003 0303 	and.w	r3, r3, #3
 8004de8:	2b03      	cmp	r3, #3
 8004dea:	d81b      	bhi.n	8004e24 <UART_SetConfig+0xd0>
 8004dec:	a201      	add	r2, pc, #4	; (adr r2, 8004df4 <UART_SetConfig+0xa0>)
 8004dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df2:	bf00      	nop
 8004df4:	08004e05 	.word	0x08004e05
 8004df8:	08004e15 	.word	0x08004e15
 8004dfc:	08004e0d 	.word	0x08004e0d
 8004e00:	08004e1d 	.word	0x08004e1d
 8004e04:	2301      	movs	r3, #1
 8004e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e0a:	e116      	b.n	800503a <UART_SetConfig+0x2e6>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e12:	e112      	b.n	800503a <UART_SetConfig+0x2e6>
 8004e14:	2304      	movs	r3, #4
 8004e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e1a:	e10e      	b.n	800503a <UART_SetConfig+0x2e6>
 8004e1c:	2308      	movs	r3, #8
 8004e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e22:	e10a      	b.n	800503a <UART_SetConfig+0x2e6>
 8004e24:	2310      	movs	r3, #16
 8004e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e2a:	e106      	b.n	800503a <UART_SetConfig+0x2e6>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a7c      	ldr	r2, [pc, #496]	; (8005024 <UART_SetConfig+0x2d0>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d138      	bne.n	8004ea8 <UART_SetConfig+0x154>
 8004e36:	4b7a      	ldr	r3, [pc, #488]	; (8005020 <UART_SetConfig+0x2cc>)
 8004e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3c:	f003 030c 	and.w	r3, r3, #12
 8004e40:	2b0c      	cmp	r3, #12
 8004e42:	d82d      	bhi.n	8004ea0 <UART_SetConfig+0x14c>
 8004e44:	a201      	add	r2, pc, #4	; (adr r2, 8004e4c <UART_SetConfig+0xf8>)
 8004e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4a:	bf00      	nop
 8004e4c:	08004e81 	.word	0x08004e81
 8004e50:	08004ea1 	.word	0x08004ea1
 8004e54:	08004ea1 	.word	0x08004ea1
 8004e58:	08004ea1 	.word	0x08004ea1
 8004e5c:	08004e91 	.word	0x08004e91
 8004e60:	08004ea1 	.word	0x08004ea1
 8004e64:	08004ea1 	.word	0x08004ea1
 8004e68:	08004ea1 	.word	0x08004ea1
 8004e6c:	08004e89 	.word	0x08004e89
 8004e70:	08004ea1 	.word	0x08004ea1
 8004e74:	08004ea1 	.word	0x08004ea1
 8004e78:	08004ea1 	.word	0x08004ea1
 8004e7c:	08004e99 	.word	0x08004e99
 8004e80:	2300      	movs	r3, #0
 8004e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e86:	e0d8      	b.n	800503a <UART_SetConfig+0x2e6>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e8e:	e0d4      	b.n	800503a <UART_SetConfig+0x2e6>
 8004e90:	2304      	movs	r3, #4
 8004e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e96:	e0d0      	b.n	800503a <UART_SetConfig+0x2e6>
 8004e98:	2308      	movs	r3, #8
 8004e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e9e:	e0cc      	b.n	800503a <UART_SetConfig+0x2e6>
 8004ea0:	2310      	movs	r3, #16
 8004ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ea6:	e0c8      	b.n	800503a <UART_SetConfig+0x2e6>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a5e      	ldr	r2, [pc, #376]	; (8005028 <UART_SetConfig+0x2d4>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d125      	bne.n	8004efe <UART_SetConfig+0x1aa>
 8004eb2:	4b5b      	ldr	r3, [pc, #364]	; (8005020 <UART_SetConfig+0x2cc>)
 8004eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ebc:	2b30      	cmp	r3, #48	; 0x30
 8004ebe:	d016      	beq.n	8004eee <UART_SetConfig+0x19a>
 8004ec0:	2b30      	cmp	r3, #48	; 0x30
 8004ec2:	d818      	bhi.n	8004ef6 <UART_SetConfig+0x1a2>
 8004ec4:	2b20      	cmp	r3, #32
 8004ec6:	d00a      	beq.n	8004ede <UART_SetConfig+0x18a>
 8004ec8:	2b20      	cmp	r3, #32
 8004eca:	d814      	bhi.n	8004ef6 <UART_SetConfig+0x1a2>
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d002      	beq.n	8004ed6 <UART_SetConfig+0x182>
 8004ed0:	2b10      	cmp	r3, #16
 8004ed2:	d008      	beq.n	8004ee6 <UART_SetConfig+0x192>
 8004ed4:	e00f      	b.n	8004ef6 <UART_SetConfig+0x1a2>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004edc:	e0ad      	b.n	800503a <UART_SetConfig+0x2e6>
 8004ede:	2302      	movs	r3, #2
 8004ee0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ee4:	e0a9      	b.n	800503a <UART_SetConfig+0x2e6>
 8004ee6:	2304      	movs	r3, #4
 8004ee8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eec:	e0a5      	b.n	800503a <UART_SetConfig+0x2e6>
 8004eee:	2308      	movs	r3, #8
 8004ef0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ef4:	e0a1      	b.n	800503a <UART_SetConfig+0x2e6>
 8004ef6:	2310      	movs	r3, #16
 8004ef8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004efc:	e09d      	b.n	800503a <UART_SetConfig+0x2e6>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a4a      	ldr	r2, [pc, #296]	; (800502c <UART_SetConfig+0x2d8>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d125      	bne.n	8004f54 <UART_SetConfig+0x200>
 8004f08:	4b45      	ldr	r3, [pc, #276]	; (8005020 <UART_SetConfig+0x2cc>)
 8004f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f12:	2bc0      	cmp	r3, #192	; 0xc0
 8004f14:	d016      	beq.n	8004f44 <UART_SetConfig+0x1f0>
 8004f16:	2bc0      	cmp	r3, #192	; 0xc0
 8004f18:	d818      	bhi.n	8004f4c <UART_SetConfig+0x1f8>
 8004f1a:	2b80      	cmp	r3, #128	; 0x80
 8004f1c:	d00a      	beq.n	8004f34 <UART_SetConfig+0x1e0>
 8004f1e:	2b80      	cmp	r3, #128	; 0x80
 8004f20:	d814      	bhi.n	8004f4c <UART_SetConfig+0x1f8>
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d002      	beq.n	8004f2c <UART_SetConfig+0x1d8>
 8004f26:	2b40      	cmp	r3, #64	; 0x40
 8004f28:	d008      	beq.n	8004f3c <UART_SetConfig+0x1e8>
 8004f2a:	e00f      	b.n	8004f4c <UART_SetConfig+0x1f8>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f32:	e082      	b.n	800503a <UART_SetConfig+0x2e6>
 8004f34:	2302      	movs	r3, #2
 8004f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f3a:	e07e      	b.n	800503a <UART_SetConfig+0x2e6>
 8004f3c:	2304      	movs	r3, #4
 8004f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f42:	e07a      	b.n	800503a <UART_SetConfig+0x2e6>
 8004f44:	2308      	movs	r3, #8
 8004f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f4a:	e076      	b.n	800503a <UART_SetConfig+0x2e6>
 8004f4c:	2310      	movs	r3, #16
 8004f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f52:	e072      	b.n	800503a <UART_SetConfig+0x2e6>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a35      	ldr	r2, [pc, #212]	; (8005030 <UART_SetConfig+0x2dc>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d12a      	bne.n	8004fb4 <UART_SetConfig+0x260>
 8004f5e:	4b30      	ldr	r3, [pc, #192]	; (8005020 <UART_SetConfig+0x2cc>)
 8004f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f6c:	d01a      	beq.n	8004fa4 <UART_SetConfig+0x250>
 8004f6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f72:	d81b      	bhi.n	8004fac <UART_SetConfig+0x258>
 8004f74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f78:	d00c      	beq.n	8004f94 <UART_SetConfig+0x240>
 8004f7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f7e:	d815      	bhi.n	8004fac <UART_SetConfig+0x258>
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d003      	beq.n	8004f8c <UART_SetConfig+0x238>
 8004f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f88:	d008      	beq.n	8004f9c <UART_SetConfig+0x248>
 8004f8a:	e00f      	b.n	8004fac <UART_SetConfig+0x258>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f92:	e052      	b.n	800503a <UART_SetConfig+0x2e6>
 8004f94:	2302      	movs	r3, #2
 8004f96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f9a:	e04e      	b.n	800503a <UART_SetConfig+0x2e6>
 8004f9c:	2304      	movs	r3, #4
 8004f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fa2:	e04a      	b.n	800503a <UART_SetConfig+0x2e6>
 8004fa4:	2308      	movs	r3, #8
 8004fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004faa:	e046      	b.n	800503a <UART_SetConfig+0x2e6>
 8004fac:	2310      	movs	r3, #16
 8004fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fb2:	e042      	b.n	800503a <UART_SetConfig+0x2e6>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a17      	ldr	r2, [pc, #92]	; (8005018 <UART_SetConfig+0x2c4>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d13a      	bne.n	8005034 <UART_SetConfig+0x2e0>
 8004fbe:	4b18      	ldr	r3, [pc, #96]	; (8005020 <UART_SetConfig+0x2cc>)
 8004fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004fc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fcc:	d01a      	beq.n	8005004 <UART_SetConfig+0x2b0>
 8004fce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fd2:	d81b      	bhi.n	800500c <UART_SetConfig+0x2b8>
 8004fd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fd8:	d00c      	beq.n	8004ff4 <UART_SetConfig+0x2a0>
 8004fda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fde:	d815      	bhi.n	800500c <UART_SetConfig+0x2b8>
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d003      	beq.n	8004fec <UART_SetConfig+0x298>
 8004fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fe8:	d008      	beq.n	8004ffc <UART_SetConfig+0x2a8>
 8004fea:	e00f      	b.n	800500c <UART_SetConfig+0x2b8>
 8004fec:	2300      	movs	r3, #0
 8004fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ff2:	e022      	b.n	800503a <UART_SetConfig+0x2e6>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ffa:	e01e      	b.n	800503a <UART_SetConfig+0x2e6>
 8004ffc:	2304      	movs	r3, #4
 8004ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005002:	e01a      	b.n	800503a <UART_SetConfig+0x2e6>
 8005004:	2308      	movs	r3, #8
 8005006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800500a:	e016      	b.n	800503a <UART_SetConfig+0x2e6>
 800500c:	2310      	movs	r3, #16
 800500e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005012:	e012      	b.n	800503a <UART_SetConfig+0x2e6>
 8005014:	efff69f3 	.word	0xefff69f3
 8005018:	40008000 	.word	0x40008000
 800501c:	40013800 	.word	0x40013800
 8005020:	40021000 	.word	0x40021000
 8005024:	40004400 	.word	0x40004400
 8005028:	40004800 	.word	0x40004800
 800502c:	40004c00 	.word	0x40004c00
 8005030:	40005000 	.word	0x40005000
 8005034:	2310      	movs	r3, #16
 8005036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a9f      	ldr	r2, [pc, #636]	; (80052bc <UART_SetConfig+0x568>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d17a      	bne.n	800513a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005044:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005048:	2b08      	cmp	r3, #8
 800504a:	d824      	bhi.n	8005096 <UART_SetConfig+0x342>
 800504c:	a201      	add	r2, pc, #4	; (adr r2, 8005054 <UART_SetConfig+0x300>)
 800504e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005052:	bf00      	nop
 8005054:	08005079 	.word	0x08005079
 8005058:	08005097 	.word	0x08005097
 800505c:	08005081 	.word	0x08005081
 8005060:	08005097 	.word	0x08005097
 8005064:	08005087 	.word	0x08005087
 8005068:	08005097 	.word	0x08005097
 800506c:	08005097 	.word	0x08005097
 8005070:	08005097 	.word	0x08005097
 8005074:	0800508f 	.word	0x0800508f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005078:	f7fd fb48 	bl	800270c <HAL_RCC_GetPCLK1Freq>
 800507c:	61f8      	str	r0, [r7, #28]
        break;
 800507e:	e010      	b.n	80050a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005080:	4b8f      	ldr	r3, [pc, #572]	; (80052c0 <UART_SetConfig+0x56c>)
 8005082:	61fb      	str	r3, [r7, #28]
        break;
 8005084:	e00d      	b.n	80050a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005086:	f7fd faa9 	bl	80025dc <HAL_RCC_GetSysClockFreq>
 800508a:	61f8      	str	r0, [r7, #28]
        break;
 800508c:	e009      	b.n	80050a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800508e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005092:	61fb      	str	r3, [r7, #28]
        break;
 8005094:	e005      	b.n	80050a2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005096:	2300      	movs	r3, #0
 8005098:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80050a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f000 80fb 	beq.w	80052a0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	4613      	mov	r3, r2
 80050b0:	005b      	lsls	r3, r3, #1
 80050b2:	4413      	add	r3, r2
 80050b4:	69fa      	ldr	r2, [r7, #28]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d305      	bcc.n	80050c6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050c0:	69fa      	ldr	r2, [r7, #28]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d903      	bls.n	80050ce <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80050cc:	e0e8      	b.n	80052a0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	2200      	movs	r2, #0
 80050d2:	461c      	mov	r4, r3
 80050d4:	4615      	mov	r5, r2
 80050d6:	f04f 0200 	mov.w	r2, #0
 80050da:	f04f 0300 	mov.w	r3, #0
 80050de:	022b      	lsls	r3, r5, #8
 80050e0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80050e4:	0222      	lsls	r2, r4, #8
 80050e6:	68f9      	ldr	r1, [r7, #12]
 80050e8:	6849      	ldr	r1, [r1, #4]
 80050ea:	0849      	lsrs	r1, r1, #1
 80050ec:	2000      	movs	r0, #0
 80050ee:	4688      	mov	r8, r1
 80050f0:	4681      	mov	r9, r0
 80050f2:	eb12 0a08 	adds.w	sl, r2, r8
 80050f6:	eb43 0b09 	adc.w	fp, r3, r9
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	603b      	str	r3, [r7, #0]
 8005102:	607a      	str	r2, [r7, #4]
 8005104:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005108:	4650      	mov	r0, sl
 800510a:	4659      	mov	r1, fp
 800510c:	f7fb f86a 	bl	80001e4 <__aeabi_uldivmod>
 8005110:	4602      	mov	r2, r0
 8005112:	460b      	mov	r3, r1
 8005114:	4613      	mov	r3, r2
 8005116:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800511e:	d308      	bcc.n	8005132 <UART_SetConfig+0x3de>
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005126:	d204      	bcs.n	8005132 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	60da      	str	r2, [r3, #12]
 8005130:	e0b6      	b.n	80052a0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005138:	e0b2      	b.n	80052a0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005142:	d15e      	bne.n	8005202 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005144:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005148:	2b08      	cmp	r3, #8
 800514a:	d828      	bhi.n	800519e <UART_SetConfig+0x44a>
 800514c:	a201      	add	r2, pc, #4	; (adr r2, 8005154 <UART_SetConfig+0x400>)
 800514e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005152:	bf00      	nop
 8005154:	08005179 	.word	0x08005179
 8005158:	08005181 	.word	0x08005181
 800515c:	08005189 	.word	0x08005189
 8005160:	0800519f 	.word	0x0800519f
 8005164:	0800518f 	.word	0x0800518f
 8005168:	0800519f 	.word	0x0800519f
 800516c:	0800519f 	.word	0x0800519f
 8005170:	0800519f 	.word	0x0800519f
 8005174:	08005197 	.word	0x08005197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005178:	f7fd fac8 	bl	800270c <HAL_RCC_GetPCLK1Freq>
 800517c:	61f8      	str	r0, [r7, #28]
        break;
 800517e:	e014      	b.n	80051aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005180:	f7fd fada 	bl	8002738 <HAL_RCC_GetPCLK2Freq>
 8005184:	61f8      	str	r0, [r7, #28]
        break;
 8005186:	e010      	b.n	80051aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005188:	4b4d      	ldr	r3, [pc, #308]	; (80052c0 <UART_SetConfig+0x56c>)
 800518a:	61fb      	str	r3, [r7, #28]
        break;
 800518c:	e00d      	b.n	80051aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800518e:	f7fd fa25 	bl	80025dc <HAL_RCC_GetSysClockFreq>
 8005192:	61f8      	str	r0, [r7, #28]
        break;
 8005194:	e009      	b.n	80051aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800519a:	61fb      	str	r3, [r7, #28]
        break;
 800519c:	e005      	b.n	80051aa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800519e:	2300      	movs	r3, #0
 80051a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80051a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d077      	beq.n	80052a0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	005a      	lsls	r2, r3, #1
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	085b      	lsrs	r3, r3, #1
 80051ba:	441a      	add	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	2b0f      	cmp	r3, #15
 80051ca:	d916      	bls.n	80051fa <UART_SetConfig+0x4a6>
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051d2:	d212      	bcs.n	80051fa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	f023 030f 	bic.w	r3, r3, #15
 80051dc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	085b      	lsrs	r3, r3, #1
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	f003 0307 	and.w	r3, r3, #7
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	8afb      	ldrh	r3, [r7, #22]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	8afa      	ldrh	r2, [r7, #22]
 80051f6:	60da      	str	r2, [r3, #12]
 80051f8:	e052      	b.n	80052a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005200:	e04e      	b.n	80052a0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005202:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005206:	2b08      	cmp	r3, #8
 8005208:	d827      	bhi.n	800525a <UART_SetConfig+0x506>
 800520a:	a201      	add	r2, pc, #4	; (adr r2, 8005210 <UART_SetConfig+0x4bc>)
 800520c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005210:	08005235 	.word	0x08005235
 8005214:	0800523d 	.word	0x0800523d
 8005218:	08005245 	.word	0x08005245
 800521c:	0800525b 	.word	0x0800525b
 8005220:	0800524b 	.word	0x0800524b
 8005224:	0800525b 	.word	0x0800525b
 8005228:	0800525b 	.word	0x0800525b
 800522c:	0800525b 	.word	0x0800525b
 8005230:	08005253 	.word	0x08005253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005234:	f7fd fa6a 	bl	800270c <HAL_RCC_GetPCLK1Freq>
 8005238:	61f8      	str	r0, [r7, #28]
        break;
 800523a:	e014      	b.n	8005266 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800523c:	f7fd fa7c 	bl	8002738 <HAL_RCC_GetPCLK2Freq>
 8005240:	61f8      	str	r0, [r7, #28]
        break;
 8005242:	e010      	b.n	8005266 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005244:	4b1e      	ldr	r3, [pc, #120]	; (80052c0 <UART_SetConfig+0x56c>)
 8005246:	61fb      	str	r3, [r7, #28]
        break;
 8005248:	e00d      	b.n	8005266 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800524a:	f7fd f9c7 	bl	80025dc <HAL_RCC_GetSysClockFreq>
 800524e:	61f8      	str	r0, [r7, #28]
        break;
 8005250:	e009      	b.n	8005266 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005256:	61fb      	str	r3, [r7, #28]
        break;
 8005258:	e005      	b.n	8005266 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800525a:	2300      	movs	r3, #0
 800525c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005264:	bf00      	nop
    }

    if (pclk != 0U)
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d019      	beq.n	80052a0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	085a      	lsrs	r2, r3, #1
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	441a      	add	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	fbb2 f3f3 	udiv	r3, r2, r3
 800527e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	2b0f      	cmp	r3, #15
 8005284:	d909      	bls.n	800529a <UART_SetConfig+0x546>
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800528c:	d205      	bcs.n	800529a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	b29a      	uxth	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	60da      	str	r2, [r3, #12]
 8005298:	e002      	b.n	80052a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80052ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3728      	adds	r7, #40	; 0x28
 80052b4:	46bd      	mov	sp, r7
 80052b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052ba:	bf00      	nop
 80052bc:	40008000 	.word	0x40008000
 80052c0:	00f42400 	.word	0x00f42400

080052c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00a      	beq.n	80052ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00a      	beq.n	8005310 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00a      	beq.n	8005332 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	f003 0308 	and.w	r3, r3, #8
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00a      	beq.n	8005354 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	f003 0310 	and.w	r3, r3, #16
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00a      	beq.n	8005376 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	f003 0320 	and.w	r3, r3, #32
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00a      	beq.n	8005398 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d01a      	beq.n	80053da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053c2:	d10a      	bne.n	80053da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00a      	beq.n	80053fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	430a      	orrs	r2, r1
 80053fa:	605a      	str	r2, [r3, #4]
  }
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af02      	add	r7, sp, #8
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005418:	f7fc f834 	bl	8001484 <HAL_GetTick>
 800541c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0308 	and.w	r3, r3, #8
 8005428:	2b08      	cmp	r3, #8
 800542a:	d10e      	bne.n	800544a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800542c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f82d 	bl	800549a <UART_WaitOnFlagUntilTimeout>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e023      	b.n	8005492 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0304 	and.w	r3, r3, #4
 8005454:	2b04      	cmp	r3, #4
 8005456:	d10e      	bne.n	8005476 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005458:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f817 	bl	800549a <UART_WaitOnFlagUntilTimeout>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e00d      	b.n	8005492 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2220      	movs	r2, #32
 800547a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2220      	movs	r2, #32
 8005480:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b09c      	sub	sp, #112	; 0x70
 800549e:	af00      	add	r7, sp, #0
 80054a0:	60f8      	str	r0, [r7, #12]
 80054a2:	60b9      	str	r1, [r7, #8]
 80054a4:	603b      	str	r3, [r7, #0]
 80054a6:	4613      	mov	r3, r2
 80054a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054aa:	e0a5      	b.n	80055f8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b2:	f000 80a1 	beq.w	80055f8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054b6:	f7fb ffe5 	bl	8001484 <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d302      	bcc.n	80054cc <UART_WaitOnFlagUntilTimeout+0x32>
 80054c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d13e      	bne.n	800554a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054d4:	e853 3f00 	ldrex	r3, [r3]
 80054d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80054da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054e0:	667b      	str	r3, [r7, #100]	; 0x64
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054ec:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80054f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054f2:	e841 2300 	strex	r3, r2, [r1]
 80054f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80054f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1e6      	bne.n	80054cc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	3308      	adds	r3, #8
 8005504:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005508:	e853 3f00 	ldrex	r3, [r3]
 800550c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800550e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005510:	f023 0301 	bic.w	r3, r3, #1
 8005514:	663b      	str	r3, [r7, #96]	; 0x60
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	3308      	adds	r3, #8
 800551c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800551e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005520:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005522:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005524:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005526:	e841 2300 	strex	r3, r2, [r1]
 800552a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800552c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1e5      	bne.n	80054fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2220      	movs	r2, #32
 8005536:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2220      	movs	r2, #32
 800553c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e067      	b.n	800561a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0304 	and.w	r3, r3, #4
 8005554:	2b00      	cmp	r3, #0
 8005556:	d04f      	beq.n	80055f8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005566:	d147      	bne.n	80055f8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005570:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557a:	e853 3f00 	ldrex	r3, [r3]
 800557e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005586:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	461a      	mov	r2, r3
 800558e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005590:	637b      	str	r3, [r7, #52]	; 0x34
 8005592:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005594:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005596:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005598:	e841 2300 	strex	r3, r2, [r1]
 800559c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800559e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1e6      	bne.n	8005572 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	3308      	adds	r3, #8
 80055aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	e853 3f00 	ldrex	r3, [r3]
 80055b2:	613b      	str	r3, [r7, #16]
   return(result);
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	f023 0301 	bic.w	r3, r3, #1
 80055ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3308      	adds	r3, #8
 80055c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80055c4:	623a      	str	r2, [r7, #32]
 80055c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c8:	69f9      	ldr	r1, [r7, #28]
 80055ca:	6a3a      	ldr	r2, [r7, #32]
 80055cc:	e841 2300 	strex	r3, r2, [r1]
 80055d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1e5      	bne.n	80055a4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2220      	movs	r2, #32
 80055dc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2220      	movs	r2, #32
 80055e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e010      	b.n	800561a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	69da      	ldr	r2, [r3, #28]
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	4013      	ands	r3, r2
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	429a      	cmp	r2, r3
 8005606:	bf0c      	ite	eq
 8005608:	2301      	moveq	r3, #1
 800560a:	2300      	movne	r3, #0
 800560c:	b2db      	uxtb	r3, r3
 800560e:	461a      	mov	r2, r3
 8005610:	79fb      	ldrb	r3, [r7, #7]
 8005612:	429a      	cmp	r2, r3
 8005614:	f43f af4a 	beq.w	80054ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3770      	adds	r7, #112	; 0x70
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005622:	b480      	push	{r7}
 8005624:	b095      	sub	sp, #84	; 0x54
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005632:	e853 3f00 	ldrex	r3, [r3]
 8005636:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800563e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	461a      	mov	r2, r3
 8005646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005648:	643b      	str	r3, [r7, #64]	; 0x40
 800564a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800564e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005650:	e841 2300 	strex	r3, r2, [r1]
 8005654:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1e6      	bne.n	800562a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	3308      	adds	r3, #8
 8005662:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005664:	6a3b      	ldr	r3, [r7, #32]
 8005666:	e853 3f00 	ldrex	r3, [r3]
 800566a:	61fb      	str	r3, [r7, #28]
   return(result);
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	f023 0301 	bic.w	r3, r3, #1
 8005672:	64bb      	str	r3, [r7, #72]	; 0x48
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3308      	adds	r3, #8
 800567a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800567c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800567e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005680:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005682:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005684:	e841 2300 	strex	r3, r2, [r1]
 8005688:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1e5      	bne.n	800565c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005694:	2b01      	cmp	r3, #1
 8005696:	d118      	bne.n	80056ca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	e853 3f00 	ldrex	r3, [r3]
 80056a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	f023 0310 	bic.w	r3, r3, #16
 80056ac:	647b      	str	r3, [r7, #68]	; 0x44
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	461a      	mov	r2, r3
 80056b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056b6:	61bb      	str	r3, [r7, #24]
 80056b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ba:	6979      	ldr	r1, [r7, #20]
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	e841 2300 	strex	r3, r2, [r1]
 80056c2:	613b      	str	r3, [r7, #16]
   return(result);
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1e6      	bne.n	8005698 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2220      	movs	r2, #32
 80056ce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	665a      	str	r2, [r3, #100]	; 0x64
}
 80056dc:	bf00      	nop
 80056de:	3754      	adds	r7, #84	; 0x54
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f7ff fb0e 	bl	8004d28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800570c:	bf00      	nop
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b088      	sub	sp, #32
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	e853 3f00 	ldrex	r3, [r3]
 8005728:	60bb      	str	r3, [r7, #8]
   return(result);
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005730:	61fb      	str	r3, [r7, #28]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	461a      	mov	r2, r3
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	61bb      	str	r3, [r7, #24]
 800573c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573e:	6979      	ldr	r1, [r7, #20]
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	e841 2300 	strex	r3, r2, [r1]
 8005746:	613b      	str	r3, [r7, #16]
   return(result);
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1e6      	bne.n	800571c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2220      	movs	r2, #32
 8005752:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7ff fada 	bl	8004d14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005760:	bf00      	nop
 8005762:	3720      	adds	r7, #32
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <__NVIC_SetPriority>:
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	4603      	mov	r3, r0
 8005784:	6039      	str	r1, [r7, #0]
 8005786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800578c:	2b00      	cmp	r3, #0
 800578e:	db0a      	blt.n	80057a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	b2da      	uxtb	r2, r3
 8005794:	490c      	ldr	r1, [pc, #48]	; (80057c8 <__NVIC_SetPriority+0x4c>)
 8005796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800579a:	0112      	lsls	r2, r2, #4
 800579c:	b2d2      	uxtb	r2, r2
 800579e:	440b      	add	r3, r1
 80057a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80057a4:	e00a      	b.n	80057bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	4908      	ldr	r1, [pc, #32]	; (80057cc <__NVIC_SetPriority+0x50>)
 80057ac:	79fb      	ldrb	r3, [r7, #7]
 80057ae:	f003 030f 	and.w	r3, r3, #15
 80057b2:	3b04      	subs	r3, #4
 80057b4:	0112      	lsls	r2, r2, #4
 80057b6:	b2d2      	uxtb	r2, r2
 80057b8:	440b      	add	r3, r1
 80057ba:	761a      	strb	r2, [r3, #24]
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr
 80057c8:	e000e100 	.word	0xe000e100
 80057cc:	e000ed00 	.word	0xe000ed00

080057d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80057d0:	b580      	push	{r7, lr}
 80057d2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80057d4:	4b05      	ldr	r3, [pc, #20]	; (80057ec <SysTick_Handler+0x1c>)
 80057d6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80057d8:	f002 f93e 	bl	8007a58 <xTaskGetSchedulerState>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d001      	beq.n	80057e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80057e2:	f003 f821 	bl	8008828 <xPortSysTickHandler>
  }
}
 80057e6:	bf00      	nop
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	e000e010 	.word	0xe000e010

080057f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80057f0:	b580      	push	{r7, lr}
 80057f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80057f4:	2100      	movs	r1, #0
 80057f6:	f06f 0004 	mvn.w	r0, #4
 80057fa:	f7ff ffbf 	bl	800577c <__NVIC_SetPriority>
#endif
}
 80057fe:	bf00      	nop
 8005800:	bd80      	pop	{r7, pc}
	...

08005804 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800580a:	f3ef 8305 	mrs	r3, IPSR
 800580e:	603b      	str	r3, [r7, #0]
  return(result);
 8005810:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005816:	f06f 0305 	mvn.w	r3, #5
 800581a:	607b      	str	r3, [r7, #4]
 800581c:	e00c      	b.n	8005838 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800581e:	4b0a      	ldr	r3, [pc, #40]	; (8005848 <osKernelInitialize+0x44>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d105      	bne.n	8005832 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005826:	4b08      	ldr	r3, [pc, #32]	; (8005848 <osKernelInitialize+0x44>)
 8005828:	2201      	movs	r2, #1
 800582a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800582c:	2300      	movs	r3, #0
 800582e:	607b      	str	r3, [r7, #4]
 8005830:	e002      	b.n	8005838 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005832:	f04f 33ff 	mov.w	r3, #4294967295
 8005836:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005838:	687b      	ldr	r3, [r7, #4]
}
 800583a:	4618      	mov	r0, r3
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	20000338 	.word	0x20000338

0800584c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005852:	f3ef 8305 	mrs	r3, IPSR
 8005856:	603b      	str	r3, [r7, #0]
  return(result);
 8005858:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <osKernelStart+0x1a>
    stat = osErrorISR;
 800585e:	f06f 0305 	mvn.w	r3, #5
 8005862:	607b      	str	r3, [r7, #4]
 8005864:	e010      	b.n	8005888 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005866:	4b0b      	ldr	r3, [pc, #44]	; (8005894 <osKernelStart+0x48>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d109      	bne.n	8005882 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800586e:	f7ff ffbf 	bl	80057f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005872:	4b08      	ldr	r3, [pc, #32]	; (8005894 <osKernelStart+0x48>)
 8005874:	2202      	movs	r2, #2
 8005876:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005878:	f001 fca6 	bl	80071c8 <vTaskStartScheduler>
      stat = osOK;
 800587c:	2300      	movs	r3, #0
 800587e:	607b      	str	r3, [r7, #4]
 8005880:	e002      	b.n	8005888 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005882:	f04f 33ff 	mov.w	r3, #4294967295
 8005886:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005888:	687b      	ldr	r3, [r7, #4]
}
 800588a:	4618      	mov	r0, r3
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	20000338 	.word	0x20000338

08005898 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005898:	b580      	push	{r7, lr}
 800589a:	b08e      	sub	sp, #56	; 0x38
 800589c:	af04      	add	r7, sp, #16
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80058a4:	2300      	movs	r3, #0
 80058a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058a8:	f3ef 8305 	mrs	r3, IPSR
 80058ac:	617b      	str	r3, [r7, #20]
  return(result);
 80058ae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d17e      	bne.n	80059b2 <osThreadNew+0x11a>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d07b      	beq.n	80059b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80058ba:	2380      	movs	r3, #128	; 0x80
 80058bc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80058be:	2318      	movs	r3, #24
 80058c0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80058c2:	2300      	movs	r3, #0
 80058c4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80058c6:	f04f 33ff 	mov.w	r3, #4294967295
 80058ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d045      	beq.n	800595e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d002      	beq.n	80058e0 <osThreadNew+0x48>
        name = attr->name;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d008      	beq.n	8005906 <osThreadNew+0x6e>
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	2b38      	cmp	r3, #56	; 0x38
 80058f8:	d805      	bhi.n	8005906 <osThreadNew+0x6e>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <osThreadNew+0x72>
        return (NULL);
 8005906:	2300      	movs	r3, #0
 8005908:	e054      	b.n	80059b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d003      	beq.n	800591a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	089b      	lsrs	r3, r3, #2
 8005918:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00e      	beq.n	8005940 <osThreadNew+0xa8>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	2b5b      	cmp	r3, #91	; 0x5b
 8005928:	d90a      	bls.n	8005940 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800592e:	2b00      	cmp	r3, #0
 8005930:	d006      	beq.n	8005940 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d002      	beq.n	8005940 <osThreadNew+0xa8>
        mem = 1;
 800593a:	2301      	movs	r3, #1
 800593c:	61bb      	str	r3, [r7, #24]
 800593e:	e010      	b.n	8005962 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10c      	bne.n	8005962 <osThreadNew+0xca>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d108      	bne.n	8005962 <osThreadNew+0xca>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d104      	bne.n	8005962 <osThreadNew+0xca>
          mem = 0;
 8005958:	2300      	movs	r3, #0
 800595a:	61bb      	str	r3, [r7, #24]
 800595c:	e001      	b.n	8005962 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800595e:	2300      	movs	r3, #0
 8005960:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d110      	bne.n	800598a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005970:	9202      	str	r2, [sp, #8]
 8005972:	9301      	str	r3, [sp, #4]
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	6a3a      	ldr	r2, [r7, #32]
 800597c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f001 fa4c 	bl	8006e1c <xTaskCreateStatic>
 8005984:	4603      	mov	r3, r0
 8005986:	613b      	str	r3, [r7, #16]
 8005988:	e013      	b.n	80059b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d110      	bne.n	80059b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	b29a      	uxth	r2, r3
 8005994:	f107 0310 	add.w	r3, r7, #16
 8005998:	9301      	str	r3, [sp, #4]
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f001 fa97 	bl	8006ed6 <xTaskCreate>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d001      	beq.n	80059b2 <osThreadNew+0x11a>
            hTask = NULL;
 80059ae:	2300      	movs	r3, #0
 80059b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80059b2:	693b      	ldr	r3, [r7, #16]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3728      	adds	r7, #40	; 0x28
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059c4:	f3ef 8305 	mrs	r3, IPSR
 80059c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80059ca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d003      	beq.n	80059d8 <osDelay+0x1c>
    stat = osErrorISR;
 80059d0:	f06f 0305 	mvn.w	r3, #5
 80059d4:	60fb      	str	r3, [r7, #12]
 80059d6:	e007      	b.n	80059e8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80059d8:	2300      	movs	r3, #0
 80059da:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d002      	beq.n	80059e8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f001 fbbc 	bl	8007160 <vTaskDelay>
    }
  }

  return (stat);
 80059e8:	68fb      	ldr	r3, [r7, #12]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b08a      	sub	sp, #40	; 0x28
 80059f6:	af02      	add	r7, sp, #8
 80059f8:	60f8      	str	r0, [r7, #12]
 80059fa:	60b9      	str	r1, [r7, #8]
 80059fc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80059fe:	2300      	movs	r3, #0
 8005a00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a02:	f3ef 8305 	mrs	r3, IPSR
 8005a06:	613b      	str	r3, [r7, #16]
  return(result);
 8005a08:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d175      	bne.n	8005afa <osSemaphoreNew+0x108>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d072      	beq.n	8005afa <osSemaphoreNew+0x108>
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d86e      	bhi.n	8005afa <osSemaphoreNew+0x108>
    mem = -1;
 8005a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a20:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d015      	beq.n	8005a54 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d006      	beq.n	8005a3e <osSemaphoreNew+0x4c>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	2b4f      	cmp	r3, #79	; 0x4f
 8005a36:	d902      	bls.n	8005a3e <osSemaphoreNew+0x4c>
        mem = 1;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	61bb      	str	r3, [r7, #24]
 8005a3c:	e00c      	b.n	8005a58 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d108      	bne.n	8005a58 <osSemaphoreNew+0x66>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d104      	bne.n	8005a58 <osSemaphoreNew+0x66>
          mem = 0;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	61bb      	str	r3, [r7, #24]
 8005a52:	e001      	b.n	8005a58 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005a54:	2300      	movs	r3, #0
 8005a56:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5e:	d04c      	beq.n	8005afa <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d128      	bne.n	8005ab8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d10a      	bne.n	8005a82 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	2203      	movs	r2, #3
 8005a72:	9200      	str	r2, [sp, #0]
 8005a74:	2200      	movs	r2, #0
 8005a76:	2100      	movs	r1, #0
 8005a78:	2001      	movs	r0, #1
 8005a7a:	f000 fa29 	bl	8005ed0 <xQueueGenericCreateStatic>
 8005a7e:	61f8      	str	r0, [r7, #28]
 8005a80:	e005      	b.n	8005a8e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005a82:	2203      	movs	r2, #3
 8005a84:	2100      	movs	r1, #0
 8005a86:	2001      	movs	r0, #1
 8005a88:	f000 fa9a 	bl	8005fc0 <xQueueGenericCreate>
 8005a8c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d022      	beq.n	8005ada <osSemaphoreNew+0xe8>
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d01f      	beq.n	8005ada <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	2100      	movs	r1, #0
 8005aa0:	69f8      	ldr	r0, [r7, #28]
 8005aa2:	f000 fb55 	bl	8006150 <xQueueGenericSend>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d016      	beq.n	8005ada <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005aac:	69f8      	ldr	r0, [r7, #28]
 8005aae:	f000 ffe1 	bl	8006a74 <vQueueDelete>
            hSemaphore = NULL;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	61fb      	str	r3, [r7, #28]
 8005ab6:	e010      	b.n	8005ada <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d108      	bne.n	8005ad0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	68b9      	ldr	r1, [r7, #8]
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 fad7 	bl	800607a <xQueueCreateCountingSemaphoreStatic>
 8005acc:	61f8      	str	r0, [r7, #28]
 8005ace:	e004      	b.n	8005ada <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005ad0:	68b9      	ldr	r1, [r7, #8]
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f000 fb08 	bl	80060e8 <xQueueCreateCountingSemaphore>
 8005ad8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00c      	beq.n	8005afa <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <osSemaphoreNew+0xfc>
          name = attr->name;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	617b      	str	r3, [r7, #20]
 8005aec:	e001      	b.n	8005af2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005aee:	2300      	movs	r3, #0
 8005af0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005af2:	6979      	ldr	r1, [r7, #20]
 8005af4:	69f8      	ldr	r0, [r7, #28]
 8005af6:	f001 f909 	bl	8006d0c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005afa:	69fb      	ldr	r3, [r7, #28]
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3720      	adds	r7, #32
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b086      	sub	sp, #24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005b12:	2300      	movs	r3, #0
 8005b14:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d103      	bne.n	8005b24 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005b1c:	f06f 0303 	mvn.w	r3, #3
 8005b20:	617b      	str	r3, [r7, #20]
 8005b22:	e039      	b.n	8005b98 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b24:	f3ef 8305 	mrs	r3, IPSR
 8005b28:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d022      	beq.n	8005b76 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d003      	beq.n	8005b3e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005b36:	f06f 0303 	mvn.w	r3, #3
 8005b3a:	617b      	str	r3, [r7, #20]
 8005b3c:	e02c      	b.n	8005b98 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005b42:	f107 0308 	add.w	r3, r7, #8
 8005b46:	461a      	mov	r2, r3
 8005b48:	2100      	movs	r1, #0
 8005b4a:	6938      	ldr	r0, [r7, #16]
 8005b4c:	f000 ff12 	bl	8006974 <xQueueReceiveFromISR>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d003      	beq.n	8005b5e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005b56:	f06f 0302 	mvn.w	r3, #2
 8005b5a:	617b      	str	r3, [r7, #20]
 8005b5c:	e01c      	b.n	8005b98 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d019      	beq.n	8005b98 <osSemaphoreAcquire+0x94>
 8005b64:	4b0f      	ldr	r3, [pc, #60]	; (8005ba4 <osSemaphoreAcquire+0xa0>)
 8005b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b6a:	601a      	str	r2, [r3, #0]
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	f3bf 8f6f 	isb	sy
 8005b74:	e010      	b.n	8005b98 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005b76:	6839      	ldr	r1, [r7, #0]
 8005b78:	6938      	ldr	r0, [r7, #16]
 8005b7a:	f000 fdef 	bl	800675c <xQueueSemaphoreTake>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d009      	beq.n	8005b98 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d003      	beq.n	8005b92 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005b8a:	f06f 0301 	mvn.w	r3, #1
 8005b8e:	617b      	str	r3, [r7, #20]
 8005b90:	e002      	b.n	8005b98 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005b92:	f06f 0302 	mvn.w	r3, #2
 8005b96:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005b98:	697b      	ldr	r3, [r7, #20]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3718      	adds	r7, #24
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	e000ed04 	.word	0xe000ed04

08005ba8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d103      	bne.n	8005bc6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005bbe:	f06f 0303 	mvn.w	r3, #3
 8005bc2:	617b      	str	r3, [r7, #20]
 8005bc4:	e02c      	b.n	8005c20 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bc6:	f3ef 8305 	mrs	r3, IPSR
 8005bca:	60fb      	str	r3, [r7, #12]
  return(result);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d01a      	beq.n	8005c08 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005bd6:	f107 0308 	add.w	r3, r7, #8
 8005bda:	4619      	mov	r1, r3
 8005bdc:	6938      	ldr	r0, [r7, #16]
 8005bde:	f000 fc50 	bl	8006482 <xQueueGiveFromISR>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d003      	beq.n	8005bf0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005be8:	f06f 0302 	mvn.w	r3, #2
 8005bec:	617b      	str	r3, [r7, #20]
 8005bee:	e017      	b.n	8005c20 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d014      	beq.n	8005c20 <osSemaphoreRelease+0x78>
 8005bf6:	4b0d      	ldr	r3, [pc, #52]	; (8005c2c <osSemaphoreRelease+0x84>)
 8005bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	e00b      	b.n	8005c20 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005c08:	2300      	movs	r3, #0
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	6938      	ldr	r0, [r7, #16]
 8005c10:	f000 fa9e 	bl	8006150 <xQueueGenericSend>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d002      	beq.n	8005c20 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005c1a:	f06f 0302 	mvn.w	r3, #2
 8005c1e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005c20:	697b      	ldr	r3, [r7, #20]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3718      	adds	r7, #24
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	e000ed04 	.word	0xe000ed04

08005c30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4a07      	ldr	r2, [pc, #28]	; (8005c5c <vApplicationGetIdleTaskMemory+0x2c>)
 8005c40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	4a06      	ldr	r2, [pc, #24]	; (8005c60 <vApplicationGetIdleTaskMemory+0x30>)
 8005c46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2280      	movs	r2, #128	; 0x80
 8005c4c:	601a      	str	r2, [r3, #0]
}
 8005c4e:	bf00      	nop
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	2000033c 	.word	0x2000033c
 8005c60:	20000398 	.word	0x20000398

08005c64 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	4a07      	ldr	r2, [pc, #28]	; (8005c90 <vApplicationGetTimerTaskMemory+0x2c>)
 8005c74:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	4a06      	ldr	r2, [pc, #24]	; (8005c94 <vApplicationGetTimerTaskMemory+0x30>)
 8005c7a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c82:	601a      	str	r2, [r3, #0]
}
 8005c84:	bf00      	nop
 8005c86:	3714      	adds	r7, #20
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	20000598 	.word	0x20000598
 8005c94:	200005f4 	.word	0x200005f4

08005c98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f103 0208 	add.w	r2, r3, #8
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f04f 32ff 	mov.w	r2, #4294967295
 8005cb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f103 0208 	add.w	r2, r3, #8
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f103 0208 	add.w	r2, r3, #8
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ce6:	bf00      	nop
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b085      	sub	sp, #20
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
 8005cfa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	689a      	ldr	r2, [r3, #8]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	1c5a      	adds	r2, r3, #1
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	601a      	str	r2, [r3, #0]
}
 8005d2e:	bf00      	nop
 8005d30:	3714      	adds	r7, #20
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b085      	sub	sp, #20
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
 8005d42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d50:	d103      	bne.n	8005d5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	e00c      	b.n	8005d74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	3308      	adds	r3, #8
 8005d5e:	60fb      	str	r3, [r7, #12]
 8005d60:	e002      	b.n	8005d68 <vListInsert+0x2e>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	60fb      	str	r3, [r7, #12]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d2f6      	bcs.n	8005d62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	1c5a      	adds	r2, r3, #1
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	601a      	str	r2, [r3, #0]
}
 8005da0:	bf00      	nop
 8005da2:	3714      	adds	r7, #20
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	6892      	ldr	r2, [r2, #8]
 8005dc2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	6852      	ldr	r2, [r2, #4]
 8005dcc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d103      	bne.n	8005de0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	689a      	ldr	r2, [r3, #8]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	1e5a      	subs	r2, r3, #1
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10a      	bne.n	8005e2a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e18:	f383 8811 	msr	BASEPRI, r3
 8005e1c:	f3bf 8f6f 	isb	sy
 8005e20:	f3bf 8f4f 	dsb	sy
 8005e24:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005e26:	bf00      	nop
 8005e28:	e7fe      	b.n	8005e28 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005e2a:	f002 fc6b 	bl	8008704 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e36:	68f9      	ldr	r1, [r7, #12]
 8005e38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e3a:	fb01 f303 	mul.w	r3, r1, r3
 8005e3e:	441a      	add	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	68f9      	ldr	r1, [r7, #12]
 8005e5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e60:	fb01 f303 	mul.w	r3, r1, r3
 8005e64:	441a      	add	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	22ff      	movs	r2, #255	; 0xff
 8005e6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	22ff      	movs	r2, #255	; 0xff
 8005e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d114      	bne.n	8005eaa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d01a      	beq.n	8005ebe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	3310      	adds	r3, #16
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f001 fc25 	bl	80076dc <xTaskRemoveFromEventList>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d012      	beq.n	8005ebe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e98:	4b0c      	ldr	r3, [pc, #48]	; (8005ecc <xQueueGenericReset+0xcc>)
 8005e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e9e:	601a      	str	r2, [r3, #0]
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	e009      	b.n	8005ebe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	3310      	adds	r3, #16
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7ff fef2 	bl	8005c98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	3324      	adds	r3, #36	; 0x24
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7ff feed 	bl	8005c98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005ebe:	f002 fc51 	bl	8008764 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005ec2:	2301      	movs	r3, #1
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	e000ed04 	.word	0xe000ed04

08005ed0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b08e      	sub	sp, #56	; 0x38
 8005ed4:	af02      	add	r7, sp, #8
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
 8005edc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10a      	bne.n	8005efa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee8:	f383 8811 	msr	BASEPRI, r3
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ef6:	bf00      	nop
 8005ef8:	e7fe      	b.n	8005ef8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d10a      	bne.n	8005f16 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f04:	f383 8811 	msr	BASEPRI, r3
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f12:	bf00      	nop
 8005f14:	e7fe      	b.n	8005f14 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d002      	beq.n	8005f22 <xQueueGenericCreateStatic+0x52>
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d001      	beq.n	8005f26 <xQueueGenericCreateStatic+0x56>
 8005f22:	2301      	movs	r3, #1
 8005f24:	e000      	b.n	8005f28 <xQueueGenericCreateStatic+0x58>
 8005f26:	2300      	movs	r3, #0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10a      	bne.n	8005f42 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f30:	f383 8811 	msr	BASEPRI, r3
 8005f34:	f3bf 8f6f 	isb	sy
 8005f38:	f3bf 8f4f 	dsb	sy
 8005f3c:	623b      	str	r3, [r7, #32]
}
 8005f3e:	bf00      	nop
 8005f40:	e7fe      	b.n	8005f40 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d102      	bne.n	8005f4e <xQueueGenericCreateStatic+0x7e>
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <xQueueGenericCreateStatic+0x82>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e000      	b.n	8005f54 <xQueueGenericCreateStatic+0x84>
 8005f52:	2300      	movs	r3, #0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10a      	bne.n	8005f6e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	61fb      	str	r3, [r7, #28]
}
 8005f6a:	bf00      	nop
 8005f6c:	e7fe      	b.n	8005f6c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f6e:	2350      	movs	r3, #80	; 0x50
 8005f70:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	2b50      	cmp	r3, #80	; 0x50
 8005f76:	d00a      	beq.n	8005f8e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7c:	f383 8811 	msr	BASEPRI, r3
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	61bb      	str	r3, [r7, #24]
}
 8005f8a:	bf00      	nop
 8005f8c:	e7fe      	b.n	8005f8c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005f8e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00d      	beq.n	8005fb6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005fa2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa8:	9300      	str	r3, [sp, #0]
 8005faa:	4613      	mov	r3, r2
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	68b9      	ldr	r1, [r7, #8]
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 f83f 	bl	8006034 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3730      	adds	r7, #48	; 0x30
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b08a      	sub	sp, #40	; 0x28
 8005fc4:	af02      	add	r7, sp, #8
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10a      	bne.n	8005fea <xQueueGenericCreate+0x2a>
	__asm volatile
 8005fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd8:	f383 8811 	msr	BASEPRI, r3
 8005fdc:	f3bf 8f6f 	isb	sy
 8005fe0:	f3bf 8f4f 	dsb	sy
 8005fe4:	613b      	str	r3, [r7, #16]
}
 8005fe6:	bf00      	nop
 8005fe8:	e7fe      	b.n	8005fe8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	fb02 f303 	mul.w	r3, r2, r3
 8005ff2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	3350      	adds	r3, #80	; 0x50
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f002 fca5 	bl	8008948 <pvPortMalloc>
 8005ffe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d011      	beq.n	800602a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	3350      	adds	r3, #80	; 0x50
 800600e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006018:	79fa      	ldrb	r2, [r7, #7]
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	4613      	mov	r3, r2
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	68b9      	ldr	r1, [r7, #8]
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 f805 	bl	8006034 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800602a:	69bb      	ldr	r3, [r7, #24]
	}
 800602c:	4618      	mov	r0, r3
 800602e:	3720      	adds	r7, #32
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
 8006040:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d103      	bne.n	8006050 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	69ba      	ldr	r2, [r7, #24]
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	e002      	b.n	8006056 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006062:	2101      	movs	r1, #1
 8006064:	69b8      	ldr	r0, [r7, #24]
 8006066:	f7ff fecb 	bl	8005e00 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	78fa      	ldrb	r2, [r7, #3]
 800606e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006072:	bf00      	nop
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800607a:	b580      	push	{r7, lr}
 800607c:	b08a      	sub	sp, #40	; 0x28
 800607e:	af02      	add	r7, sp, #8
 8006080:	60f8      	str	r0, [r7, #12]
 8006082:	60b9      	str	r1, [r7, #8]
 8006084:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10a      	bne.n	80060a2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800608c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006090:	f383 8811 	msr	BASEPRI, r3
 8006094:	f3bf 8f6f 	isb	sy
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	61bb      	str	r3, [r7, #24]
}
 800609e:	bf00      	nop
 80060a0:	e7fe      	b.n	80060a0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d90a      	bls.n	80060c0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80060aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ae:	f383 8811 	msr	BASEPRI, r3
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	f3bf 8f4f 	dsb	sy
 80060ba:	617b      	str	r3, [r7, #20]
}
 80060bc:	bf00      	nop
 80060be:	e7fe      	b.n	80060be <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80060c0:	2302      	movs	r3, #2
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	2100      	movs	r1, #0
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f7ff ff00 	bl	8005ed0 <xQueueGenericCreateStatic>
 80060d0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d002      	beq.n	80060de <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80060de:	69fb      	ldr	r3, [r7, #28]
	}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3720      	adds	r7, #32
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10a      	bne.n	800610e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80060f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fc:	f383 8811 	msr	BASEPRI, r3
 8006100:	f3bf 8f6f 	isb	sy
 8006104:	f3bf 8f4f 	dsb	sy
 8006108:	613b      	str	r3, [r7, #16]
}
 800610a:	bf00      	nop
 800610c:	e7fe      	b.n	800610c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800610e:	683a      	ldr	r2, [r7, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	429a      	cmp	r2, r3
 8006114:	d90a      	bls.n	800612c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	60fb      	str	r3, [r7, #12]
}
 8006128:	bf00      	nop
 800612a:	e7fe      	b.n	800612a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800612c:	2202      	movs	r2, #2
 800612e:	2100      	movs	r1, #0
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7ff ff45 	bl	8005fc0 <xQueueGenericCreate>
 8006136:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d002      	beq.n	8006144 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	683a      	ldr	r2, [r7, #0]
 8006142:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006144:	697b      	ldr	r3, [r7, #20]
	}
 8006146:	4618      	mov	r0, r3
 8006148:	3718      	adds	r7, #24
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
	...

08006150 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b08e      	sub	sp, #56	; 0x38
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
 800615c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800615e:	2300      	movs	r3, #0
 8006160:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10a      	bne.n	8006182 <xQueueGenericSend+0x32>
	__asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800617e:	bf00      	nop
 8006180:	e7fe      	b.n	8006180 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d103      	bne.n	8006190 <xQueueGenericSend+0x40>
 8006188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <xQueueGenericSend+0x44>
 8006190:	2301      	movs	r3, #1
 8006192:	e000      	b.n	8006196 <xQueueGenericSend+0x46>
 8006194:	2300      	movs	r3, #0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10a      	bne.n	80061b0 <xQueueGenericSend+0x60>
	__asm volatile
 800619a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80061ac:	bf00      	nop
 80061ae:	e7fe      	b.n	80061ae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d103      	bne.n	80061be <xQueueGenericSend+0x6e>
 80061b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d101      	bne.n	80061c2 <xQueueGenericSend+0x72>
 80061be:	2301      	movs	r3, #1
 80061c0:	e000      	b.n	80061c4 <xQueueGenericSend+0x74>
 80061c2:	2300      	movs	r3, #0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10a      	bne.n	80061de <xQueueGenericSend+0x8e>
	__asm volatile
 80061c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	623b      	str	r3, [r7, #32]
}
 80061da:	bf00      	nop
 80061dc:	e7fe      	b.n	80061dc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061de:	f001 fc3b 	bl	8007a58 <xTaskGetSchedulerState>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d102      	bne.n	80061ee <xQueueGenericSend+0x9e>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <xQueueGenericSend+0xa2>
 80061ee:	2301      	movs	r3, #1
 80061f0:	e000      	b.n	80061f4 <xQueueGenericSend+0xa4>
 80061f2:	2300      	movs	r3, #0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10a      	bne.n	800620e <xQueueGenericSend+0xbe>
	__asm volatile
 80061f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fc:	f383 8811 	msr	BASEPRI, r3
 8006200:	f3bf 8f6f 	isb	sy
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	61fb      	str	r3, [r7, #28]
}
 800620a:	bf00      	nop
 800620c:	e7fe      	b.n	800620c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800620e:	f002 fa79 	bl	8008704 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800621a:	429a      	cmp	r2, r3
 800621c:	d302      	bcc.n	8006224 <xQueueGenericSend+0xd4>
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2b02      	cmp	r3, #2
 8006222:	d129      	bne.n	8006278 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006224:	683a      	ldr	r2, [r7, #0]
 8006226:	68b9      	ldr	r1, [r7, #8]
 8006228:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800622a:	f000 fc5e 	bl	8006aea <prvCopyDataToQueue>
 800622e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006234:	2b00      	cmp	r3, #0
 8006236:	d010      	beq.n	800625a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623a:	3324      	adds	r3, #36	; 0x24
 800623c:	4618      	mov	r0, r3
 800623e:	f001 fa4d 	bl	80076dc <xTaskRemoveFromEventList>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d013      	beq.n	8006270 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006248:	4b3f      	ldr	r3, [pc, #252]	; (8006348 <xQueueGenericSend+0x1f8>)
 800624a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	e00a      	b.n	8006270 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800625a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625c:	2b00      	cmp	r3, #0
 800625e:	d007      	beq.n	8006270 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006260:	4b39      	ldr	r3, [pc, #228]	; (8006348 <xQueueGenericSend+0x1f8>)
 8006262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006270:	f002 fa78 	bl	8008764 <vPortExitCritical>
				return pdPASS;
 8006274:	2301      	movs	r3, #1
 8006276:	e063      	b.n	8006340 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d103      	bne.n	8006286 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800627e:	f002 fa71 	bl	8008764 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006282:	2300      	movs	r3, #0
 8006284:	e05c      	b.n	8006340 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006288:	2b00      	cmp	r3, #0
 800628a:	d106      	bne.n	800629a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800628c:	f107 0314 	add.w	r3, r7, #20
 8006290:	4618      	mov	r0, r3
 8006292:	f001 fa87 	bl	80077a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006296:	2301      	movs	r3, #1
 8006298:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800629a:	f002 fa63 	bl	8008764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800629e:	f000 fff9 	bl	8007294 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062a2:	f002 fa2f 	bl	8008704 <vPortEnterCritical>
 80062a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062ac:	b25b      	sxtb	r3, r3
 80062ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b2:	d103      	bne.n	80062bc <xQueueGenericSend+0x16c>
 80062b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062c2:	b25b      	sxtb	r3, r3
 80062c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c8:	d103      	bne.n	80062d2 <xQueueGenericSend+0x182>
 80062ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062d2:	f002 fa47 	bl	8008764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062d6:	1d3a      	adds	r2, r7, #4
 80062d8:	f107 0314 	add.w	r3, r7, #20
 80062dc:	4611      	mov	r1, r2
 80062de:	4618      	mov	r0, r3
 80062e0:	f001 fa76 	bl	80077d0 <xTaskCheckForTimeOut>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d124      	bne.n	8006334 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80062ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062ec:	f000 fcf5 	bl	8006cda <prvIsQueueFull>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d018      	beq.n	8006328 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80062f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f8:	3310      	adds	r3, #16
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	4611      	mov	r1, r2
 80062fe:	4618      	mov	r0, r3
 8006300:	f001 f99c 	bl	800763c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006306:	f000 fc80 	bl	8006c0a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800630a:	f000 ffd1 	bl	80072b0 <xTaskResumeAll>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	f47f af7c 	bne.w	800620e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006316:	4b0c      	ldr	r3, [pc, #48]	; (8006348 <xQueueGenericSend+0x1f8>)
 8006318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800631c:	601a      	str	r2, [r3, #0]
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	f3bf 8f6f 	isb	sy
 8006326:	e772      	b.n	800620e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006328:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800632a:	f000 fc6e 	bl	8006c0a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800632e:	f000 ffbf 	bl	80072b0 <xTaskResumeAll>
 8006332:	e76c      	b.n	800620e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006336:	f000 fc68 	bl	8006c0a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800633a:	f000 ffb9 	bl	80072b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800633e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006340:	4618      	mov	r0, r3
 8006342:	3738      	adds	r7, #56	; 0x38
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	e000ed04 	.word	0xe000ed04

0800634c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b090      	sub	sp, #64	; 0x40
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
 8006358:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800635e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006360:	2b00      	cmp	r3, #0
 8006362:	d10a      	bne.n	800637a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006368:	f383 8811 	msr	BASEPRI, r3
 800636c:	f3bf 8f6f 	isb	sy
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006376:	bf00      	nop
 8006378:	e7fe      	b.n	8006378 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d103      	bne.n	8006388 <xQueueGenericSendFromISR+0x3c>
 8006380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006384:	2b00      	cmp	r3, #0
 8006386:	d101      	bne.n	800638c <xQueueGenericSendFromISR+0x40>
 8006388:	2301      	movs	r3, #1
 800638a:	e000      	b.n	800638e <xQueueGenericSendFromISR+0x42>
 800638c:	2300      	movs	r3, #0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10a      	bne.n	80063a8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006396:	f383 8811 	msr	BASEPRI, r3
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80063a4:	bf00      	nop
 80063a6:	e7fe      	b.n	80063a6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d103      	bne.n	80063b6 <xQueueGenericSendFromISR+0x6a>
 80063ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d101      	bne.n	80063ba <xQueueGenericSendFromISR+0x6e>
 80063b6:	2301      	movs	r3, #1
 80063b8:	e000      	b.n	80063bc <xQueueGenericSendFromISR+0x70>
 80063ba:	2300      	movs	r3, #0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10a      	bne.n	80063d6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80063c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	623b      	str	r3, [r7, #32]
}
 80063d2:	bf00      	nop
 80063d4:	e7fe      	b.n	80063d4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063d6:	f002 fa77 	bl	80088c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80063da:	f3ef 8211 	mrs	r2, BASEPRI
 80063de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e2:	f383 8811 	msr	BASEPRI, r3
 80063e6:	f3bf 8f6f 	isb	sy
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	61fa      	str	r2, [r7, #28]
 80063f0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80063f2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063f4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063fe:	429a      	cmp	r2, r3
 8006400:	d302      	bcc.n	8006408 <xQueueGenericSendFromISR+0xbc>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2b02      	cmp	r3, #2
 8006406:	d12f      	bne.n	8006468 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800640e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006416:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006418:	683a      	ldr	r2, [r7, #0]
 800641a:	68b9      	ldr	r1, [r7, #8]
 800641c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800641e:	f000 fb64 	bl	8006aea <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006422:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800642a:	d112      	bne.n	8006452 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800642c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006430:	2b00      	cmp	r3, #0
 8006432:	d016      	beq.n	8006462 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006436:	3324      	adds	r3, #36	; 0x24
 8006438:	4618      	mov	r0, r3
 800643a:	f001 f94f 	bl	80076dc <xTaskRemoveFromEventList>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00e      	beq.n	8006462 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00b      	beq.n	8006462 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2201      	movs	r2, #1
 800644e:	601a      	str	r2, [r3, #0]
 8006450:	e007      	b.n	8006462 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006452:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006456:	3301      	adds	r3, #1
 8006458:	b2db      	uxtb	r3, r3
 800645a:	b25a      	sxtb	r2, r3
 800645c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006462:	2301      	movs	r3, #1
 8006464:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006466:	e001      	b.n	800646c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006468:	2300      	movs	r3, #0
 800646a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800646c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800646e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006476:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800647a:	4618      	mov	r0, r3
 800647c:	3740      	adds	r7, #64	; 0x40
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b08e      	sub	sp, #56	; 0x38
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
 800648a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10a      	bne.n	80064ac <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649a:	f383 8811 	msr	BASEPRI, r3
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f3bf 8f4f 	dsb	sy
 80064a6:	623b      	str	r3, [r7, #32]
}
 80064a8:	bf00      	nop
 80064aa:	e7fe      	b.n	80064aa <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80064ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00a      	beq.n	80064ca <xQueueGiveFromISR+0x48>
	__asm volatile
 80064b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b8:	f383 8811 	msr	BASEPRI, r3
 80064bc:	f3bf 8f6f 	isb	sy
 80064c0:	f3bf 8f4f 	dsb	sy
 80064c4:	61fb      	str	r3, [r7, #28]
}
 80064c6:	bf00      	nop
 80064c8:	e7fe      	b.n	80064c8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80064ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d103      	bne.n	80064da <xQueueGiveFromISR+0x58>
 80064d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <xQueueGiveFromISR+0x5c>
 80064da:	2301      	movs	r3, #1
 80064dc:	e000      	b.n	80064e0 <xQueueGiveFromISR+0x5e>
 80064de:	2300      	movs	r3, #0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10a      	bne.n	80064fa <xQueueGiveFromISR+0x78>
	__asm volatile
 80064e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e8:	f383 8811 	msr	BASEPRI, r3
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	61bb      	str	r3, [r7, #24]
}
 80064f6:	bf00      	nop
 80064f8:	e7fe      	b.n	80064f8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064fa:	f002 f9e5 	bl	80088c8 <vPortValidateInterruptPriority>
	__asm volatile
 80064fe:	f3ef 8211 	mrs	r2, BASEPRI
 8006502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006506:	f383 8811 	msr	BASEPRI, r3
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	617a      	str	r2, [r7, #20]
 8006514:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006516:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006518:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800651a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006524:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006526:	429a      	cmp	r2, r3
 8006528:	d22b      	bcs.n	8006582 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800652a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006536:	1c5a      	adds	r2, r3, #1
 8006538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800653c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006544:	d112      	bne.n	800656c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654a:	2b00      	cmp	r3, #0
 800654c:	d016      	beq.n	800657c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800654e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006550:	3324      	adds	r3, #36	; 0x24
 8006552:	4618      	mov	r0, r3
 8006554:	f001 f8c2 	bl	80076dc <xTaskRemoveFromEventList>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00e      	beq.n	800657c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00b      	beq.n	800657c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	2201      	movs	r2, #1
 8006568:	601a      	str	r2, [r3, #0]
 800656a:	e007      	b.n	800657c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800656c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006570:	3301      	adds	r3, #1
 8006572:	b2db      	uxtb	r3, r3
 8006574:	b25a      	sxtb	r2, r3
 8006576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800657c:	2301      	movs	r3, #1
 800657e:	637b      	str	r3, [r7, #52]	; 0x34
 8006580:	e001      	b.n	8006586 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006582:	2300      	movs	r3, #0
 8006584:	637b      	str	r3, [r7, #52]	; 0x34
 8006586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006588:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f383 8811 	msr	BASEPRI, r3
}
 8006590:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006594:	4618      	mov	r0, r3
 8006596:	3738      	adds	r7, #56	; 0x38
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b08c      	sub	sp, #48	; 0x30
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80065a8:	2300      	movs	r3, #0
 80065aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80065b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10a      	bne.n	80065cc <xQueueReceive+0x30>
	__asm volatile
 80065b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ba:	f383 8811 	msr	BASEPRI, r3
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	623b      	str	r3, [r7, #32]
}
 80065c8:	bf00      	nop
 80065ca:	e7fe      	b.n	80065ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d103      	bne.n	80065da <xQueueReceive+0x3e>
 80065d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d101      	bne.n	80065de <xQueueReceive+0x42>
 80065da:	2301      	movs	r3, #1
 80065dc:	e000      	b.n	80065e0 <xQueueReceive+0x44>
 80065de:	2300      	movs	r3, #0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10a      	bne.n	80065fa <xQueueReceive+0x5e>
	__asm volatile
 80065e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e8:	f383 8811 	msr	BASEPRI, r3
 80065ec:	f3bf 8f6f 	isb	sy
 80065f0:	f3bf 8f4f 	dsb	sy
 80065f4:	61fb      	str	r3, [r7, #28]
}
 80065f6:	bf00      	nop
 80065f8:	e7fe      	b.n	80065f8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065fa:	f001 fa2d 	bl	8007a58 <xTaskGetSchedulerState>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d102      	bne.n	800660a <xQueueReceive+0x6e>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d101      	bne.n	800660e <xQueueReceive+0x72>
 800660a:	2301      	movs	r3, #1
 800660c:	e000      	b.n	8006610 <xQueueReceive+0x74>
 800660e:	2300      	movs	r3, #0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10a      	bne.n	800662a <xQueueReceive+0x8e>
	__asm volatile
 8006614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006618:	f383 8811 	msr	BASEPRI, r3
 800661c:	f3bf 8f6f 	isb	sy
 8006620:	f3bf 8f4f 	dsb	sy
 8006624:	61bb      	str	r3, [r7, #24]
}
 8006626:	bf00      	nop
 8006628:	e7fe      	b.n	8006628 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800662a:	f002 f86b 	bl	8008704 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800662e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006632:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	2b00      	cmp	r3, #0
 8006638:	d01f      	beq.n	800667a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800663a:	68b9      	ldr	r1, [r7, #8]
 800663c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800663e:	f000 fabe 	bl	8006bbe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006644:	1e5a      	subs	r2, r3, #1
 8006646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006648:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800664a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00f      	beq.n	8006672 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006654:	3310      	adds	r3, #16
 8006656:	4618      	mov	r0, r3
 8006658:	f001 f840 	bl	80076dc <xTaskRemoveFromEventList>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d007      	beq.n	8006672 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006662:	4b3d      	ldr	r3, [pc, #244]	; (8006758 <xQueueReceive+0x1bc>)
 8006664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006668:	601a      	str	r2, [r3, #0]
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006672:	f002 f877 	bl	8008764 <vPortExitCritical>
				return pdPASS;
 8006676:	2301      	movs	r3, #1
 8006678:	e069      	b.n	800674e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d103      	bne.n	8006688 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006680:	f002 f870 	bl	8008764 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006684:	2300      	movs	r3, #0
 8006686:	e062      	b.n	800674e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668a:	2b00      	cmp	r3, #0
 800668c:	d106      	bne.n	800669c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800668e:	f107 0310 	add.w	r3, r7, #16
 8006692:	4618      	mov	r0, r3
 8006694:	f001 f886 	bl	80077a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006698:	2301      	movs	r3, #1
 800669a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800669c:	f002 f862 	bl	8008764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80066a0:	f000 fdf8 	bl	8007294 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066a4:	f002 f82e 	bl	8008704 <vPortEnterCritical>
 80066a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066ae:	b25b      	sxtb	r3, r3
 80066b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b4:	d103      	bne.n	80066be <xQueueReceive+0x122>
 80066b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066c4:	b25b      	sxtb	r3, r3
 80066c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ca:	d103      	bne.n	80066d4 <xQueueReceive+0x138>
 80066cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066d4:	f002 f846 	bl	8008764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066d8:	1d3a      	adds	r2, r7, #4
 80066da:	f107 0310 	add.w	r3, r7, #16
 80066de:	4611      	mov	r1, r2
 80066e0:	4618      	mov	r0, r3
 80066e2:	f001 f875 	bl	80077d0 <xTaskCheckForTimeOut>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d123      	bne.n	8006734 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066ee:	f000 fade 	bl	8006cae <prvIsQueueEmpty>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d017      	beq.n	8006728 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80066f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fa:	3324      	adds	r3, #36	; 0x24
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	4611      	mov	r1, r2
 8006700:	4618      	mov	r0, r3
 8006702:	f000 ff9b 	bl	800763c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006708:	f000 fa7f 	bl	8006c0a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800670c:	f000 fdd0 	bl	80072b0 <xTaskResumeAll>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d189      	bne.n	800662a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006716:	4b10      	ldr	r3, [pc, #64]	; (8006758 <xQueueReceive+0x1bc>)
 8006718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800671c:	601a      	str	r2, [r3, #0]
 800671e:	f3bf 8f4f 	dsb	sy
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	e780      	b.n	800662a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800672a:	f000 fa6e 	bl	8006c0a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800672e:	f000 fdbf 	bl	80072b0 <xTaskResumeAll>
 8006732:	e77a      	b.n	800662a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006734:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006736:	f000 fa68 	bl	8006c0a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800673a:	f000 fdb9 	bl	80072b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800673e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006740:	f000 fab5 	bl	8006cae <prvIsQueueEmpty>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	f43f af6f 	beq.w	800662a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800674c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800674e:	4618      	mov	r0, r3
 8006750:	3730      	adds	r7, #48	; 0x30
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	e000ed04 	.word	0xe000ed04

0800675c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b08e      	sub	sp, #56	; 0x38
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006766:	2300      	movs	r3, #0
 8006768:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800676e:	2300      	movs	r3, #0
 8006770:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006774:	2b00      	cmp	r3, #0
 8006776:	d10a      	bne.n	800678e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677c:	f383 8811 	msr	BASEPRI, r3
 8006780:	f3bf 8f6f 	isb	sy
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	623b      	str	r3, [r7, #32]
}
 800678a:	bf00      	nop
 800678c:	e7fe      	b.n	800678c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800678e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00a      	beq.n	80067ac <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679a:	f383 8811 	msr	BASEPRI, r3
 800679e:	f3bf 8f6f 	isb	sy
 80067a2:	f3bf 8f4f 	dsb	sy
 80067a6:	61fb      	str	r3, [r7, #28]
}
 80067a8:	bf00      	nop
 80067aa:	e7fe      	b.n	80067aa <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067ac:	f001 f954 	bl	8007a58 <xTaskGetSchedulerState>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d102      	bne.n	80067bc <xQueueSemaphoreTake+0x60>
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d101      	bne.n	80067c0 <xQueueSemaphoreTake+0x64>
 80067bc:	2301      	movs	r3, #1
 80067be:	e000      	b.n	80067c2 <xQueueSemaphoreTake+0x66>
 80067c0:	2300      	movs	r3, #0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10a      	bne.n	80067dc <xQueueSemaphoreTake+0x80>
	__asm volatile
 80067c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ca:	f383 8811 	msr	BASEPRI, r3
 80067ce:	f3bf 8f6f 	isb	sy
 80067d2:	f3bf 8f4f 	dsb	sy
 80067d6:	61bb      	str	r3, [r7, #24]
}
 80067d8:	bf00      	nop
 80067da:	e7fe      	b.n	80067da <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80067dc:	f001 ff92 	bl	8008704 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80067e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80067e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d024      	beq.n	8006836 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80067ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ee:	1e5a      	subs	r2, r3, #1
 80067f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d104      	bne.n	8006806 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80067fc:	f001 faa2 	bl	8007d44 <pvTaskIncrementMutexHeldCount>
 8006800:	4602      	mov	r2, r0
 8006802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006804:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00f      	beq.n	800682e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800680e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006810:	3310      	adds	r3, #16
 8006812:	4618      	mov	r0, r3
 8006814:	f000 ff62 	bl	80076dc <xTaskRemoveFromEventList>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d007      	beq.n	800682e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800681e:	4b54      	ldr	r3, [pc, #336]	; (8006970 <xQueueSemaphoreTake+0x214>)
 8006820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006824:	601a      	str	r2, [r3, #0]
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800682e:	f001 ff99 	bl	8008764 <vPortExitCritical>
				return pdPASS;
 8006832:	2301      	movs	r3, #1
 8006834:	e097      	b.n	8006966 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d111      	bne.n	8006860 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800683c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00a      	beq.n	8006858 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006846:	f383 8811 	msr	BASEPRI, r3
 800684a:	f3bf 8f6f 	isb	sy
 800684e:	f3bf 8f4f 	dsb	sy
 8006852:	617b      	str	r3, [r7, #20]
}
 8006854:	bf00      	nop
 8006856:	e7fe      	b.n	8006856 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006858:	f001 ff84 	bl	8008764 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800685c:	2300      	movs	r3, #0
 800685e:	e082      	b.n	8006966 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006862:	2b00      	cmp	r3, #0
 8006864:	d106      	bne.n	8006874 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006866:	f107 030c 	add.w	r3, r7, #12
 800686a:	4618      	mov	r0, r3
 800686c:	f000 ff9a 	bl	80077a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006870:	2301      	movs	r3, #1
 8006872:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006874:	f001 ff76 	bl	8008764 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006878:	f000 fd0c 	bl	8007294 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800687c:	f001 ff42 	bl	8008704 <vPortEnterCritical>
 8006880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006882:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006886:	b25b      	sxtb	r3, r3
 8006888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800688c:	d103      	bne.n	8006896 <xQueueSemaphoreTake+0x13a>
 800688e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006890:	2200      	movs	r2, #0
 8006892:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006898:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800689c:	b25b      	sxtb	r3, r3
 800689e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a2:	d103      	bne.n	80068ac <xQueueSemaphoreTake+0x150>
 80068a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068ac:	f001 ff5a 	bl	8008764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068b0:	463a      	mov	r2, r7
 80068b2:	f107 030c 	add.w	r3, r7, #12
 80068b6:	4611      	mov	r1, r2
 80068b8:	4618      	mov	r0, r3
 80068ba:	f000 ff89 	bl	80077d0 <xTaskCheckForTimeOut>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d132      	bne.n	800692a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068c6:	f000 f9f2 	bl	8006cae <prvIsQueueEmpty>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d026      	beq.n	800691e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d109      	bne.n	80068ec <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80068d8:	f001 ff14 	bl	8008704 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80068dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	4618      	mov	r0, r3
 80068e2:	f001 f8d7 	bl	8007a94 <xTaskPriorityInherit>
 80068e6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80068e8:	f001 ff3c 	bl	8008764 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80068ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ee:	3324      	adds	r3, #36	; 0x24
 80068f0:	683a      	ldr	r2, [r7, #0]
 80068f2:	4611      	mov	r1, r2
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 fea1 	bl	800763c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80068fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068fc:	f000 f985 	bl	8006c0a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006900:	f000 fcd6 	bl	80072b0 <xTaskResumeAll>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	f47f af68 	bne.w	80067dc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800690c:	4b18      	ldr	r3, [pc, #96]	; (8006970 <xQueueSemaphoreTake+0x214>)
 800690e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006912:	601a      	str	r2, [r3, #0]
 8006914:	f3bf 8f4f 	dsb	sy
 8006918:	f3bf 8f6f 	isb	sy
 800691c:	e75e      	b.n	80067dc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800691e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006920:	f000 f973 	bl	8006c0a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006924:	f000 fcc4 	bl	80072b0 <xTaskResumeAll>
 8006928:	e758      	b.n	80067dc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800692a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800692c:	f000 f96d 	bl	8006c0a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006930:	f000 fcbe 	bl	80072b0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006934:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006936:	f000 f9ba 	bl	8006cae <prvIsQueueEmpty>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	f43f af4d 	beq.w	80067dc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00d      	beq.n	8006964 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006948:	f001 fedc 	bl	8008704 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800694c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800694e:	f000 f8b4 	bl	8006aba <prvGetDisinheritPriorityAfterTimeout>
 8006952:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800695a:	4618      	mov	r0, r3
 800695c:	f001 f970 	bl	8007c40 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006960:	f001 ff00 	bl	8008764 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006964:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006966:	4618      	mov	r0, r3
 8006968:	3738      	adds	r7, #56	; 0x38
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	e000ed04 	.word	0xe000ed04

08006974 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b08e      	sub	sp, #56	; 0x38
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10a      	bne.n	80069a0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800698a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	623b      	str	r3, [r7, #32]
}
 800699c:	bf00      	nop
 800699e:	e7fe      	b.n	800699e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d103      	bne.n	80069ae <xQueueReceiveFromISR+0x3a>
 80069a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <xQueueReceiveFromISR+0x3e>
 80069ae:	2301      	movs	r3, #1
 80069b0:	e000      	b.n	80069b4 <xQueueReceiveFromISR+0x40>
 80069b2:	2300      	movs	r3, #0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10a      	bne.n	80069ce <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80069b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069bc:	f383 8811 	msr	BASEPRI, r3
 80069c0:	f3bf 8f6f 	isb	sy
 80069c4:	f3bf 8f4f 	dsb	sy
 80069c8:	61fb      	str	r3, [r7, #28]
}
 80069ca:	bf00      	nop
 80069cc:	e7fe      	b.n	80069cc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069ce:	f001 ff7b 	bl	80088c8 <vPortValidateInterruptPriority>
	__asm volatile
 80069d2:	f3ef 8211 	mrs	r2, BASEPRI
 80069d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069da:	f383 8811 	msr	BASEPRI, r3
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	61ba      	str	r2, [r7, #24]
 80069e8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80069ea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80069ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d02f      	beq.n	8006a5a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80069fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a04:	68b9      	ldr	r1, [r7, #8]
 8006a06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a08:	f000 f8d9 	bl	8006bbe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0e:	1e5a      	subs	r2, r3, #1
 8006a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a12:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006a14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a1c:	d112      	bne.n	8006a44 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d016      	beq.n	8006a54 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a28:	3310      	adds	r3, #16
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f000 fe56 	bl	80076dc <xTaskRemoveFromEventList>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00e      	beq.n	8006a54 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00b      	beq.n	8006a54 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	601a      	str	r2, [r3, #0]
 8006a42:	e007      	b.n	8006a54 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006a44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a48:	3301      	adds	r3, #1
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	b25a      	sxtb	r2, r3
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006a54:	2301      	movs	r3, #1
 8006a56:	637b      	str	r3, [r7, #52]	; 0x34
 8006a58:	e001      	b.n	8006a5e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a60:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f383 8811 	msr	BASEPRI, r3
}
 8006a68:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3738      	adds	r7, #56	; 0x38
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10a      	bne.n	8006a9c <vQueueDelete+0x28>
	__asm volatile
 8006a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8a:	f383 8811 	msr	BASEPRI, r3
 8006a8e:	f3bf 8f6f 	isb	sy
 8006a92:	f3bf 8f4f 	dsb	sy
 8006a96:	60bb      	str	r3, [r7, #8]
}
 8006a98:	bf00      	nop
 8006a9a:	e7fe      	b.n	8006a9a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f000 f95f 	bl	8006d60 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d102      	bne.n	8006ab2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f002 f817 	bl	8008ae0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006ab2:	bf00      	nop
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006aba:	b480      	push	{r7}
 8006abc:	b085      	sub	sp, #20
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d006      	beq.n	8006ad8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006ad4:	60fb      	str	r3, [r7, #12]
 8006ad6:	e001      	b.n	8006adc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006adc:	68fb      	ldr	r3, [r7, #12]
	}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b086      	sub	sp, #24
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	60f8      	str	r0, [r7, #12]
 8006af2:	60b9      	str	r1, [r7, #8]
 8006af4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006af6:	2300      	movs	r3, #0
 8006af8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10d      	bne.n	8006b24 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d14d      	bne.n	8006bac <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	4618      	mov	r0, r3
 8006b16:	f001 f825 	bl	8007b64 <xTaskPriorityDisinherit>
 8006b1a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	609a      	str	r2, [r3, #8]
 8006b22:	e043      	b.n	8006bac <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d119      	bne.n	8006b5e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6858      	ldr	r0, [r3, #4]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b32:	461a      	mov	r2, r3
 8006b34:	68b9      	ldr	r1, [r7, #8]
 8006b36:	f002 f91b 	bl	8008d70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b42:	441a      	add	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d32b      	bcc.n	8006bac <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	605a      	str	r2, [r3, #4]
 8006b5c:	e026      	b.n	8006bac <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	68d8      	ldr	r0, [r3, #12]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b66:	461a      	mov	r2, r3
 8006b68:	68b9      	ldr	r1, [r7, #8]
 8006b6a:	f002 f901 	bl	8008d70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	68da      	ldr	r2, [r3, #12]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b76:	425b      	negs	r3, r3
 8006b78:	441a      	add	r2, r3
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	68da      	ldr	r2, [r3, #12]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d207      	bcs.n	8006b9a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	689a      	ldr	r2, [r3, #8]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b92:	425b      	negs	r3, r3
 8006b94:	441a      	add	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d105      	bne.n	8006bac <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d002      	beq.n	8006bac <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	1c5a      	adds	r2, r3, #1
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006bb4:	697b      	ldr	r3, [r7, #20]
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3718      	adds	r7, #24
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b082      	sub	sp, #8
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
 8006bc6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d018      	beq.n	8006c02 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	68da      	ldr	r2, [r3, #12]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd8:	441a      	add	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	68da      	ldr	r2, [r3, #12]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d303      	bcc.n	8006bf2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68d9      	ldr	r1, [r3, #12]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	6838      	ldr	r0, [r7, #0]
 8006bfe:	f002 f8b7 	bl	8008d70 <memcpy>
	}
}
 8006c02:	bf00      	nop
 8006c04:	3708      	adds	r7, #8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b084      	sub	sp, #16
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006c12:	f001 fd77 	bl	8008704 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c1c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c1e:	e011      	b.n	8006c44 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d012      	beq.n	8006c4e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	3324      	adds	r3, #36	; 0x24
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f000 fd55 	bl	80076dc <xTaskRemoveFromEventList>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d001      	beq.n	8006c3c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006c38:	f000 fe2c 	bl	8007894 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006c3c:	7bfb      	ldrb	r3, [r7, #15]
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	dce9      	bgt.n	8006c20 <prvUnlockQueue+0x16>
 8006c4c:	e000      	b.n	8006c50 <prvUnlockQueue+0x46>
					break;
 8006c4e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	22ff      	movs	r2, #255	; 0xff
 8006c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006c58:	f001 fd84 	bl	8008764 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006c5c:	f001 fd52 	bl	8008704 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c66:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c68:	e011      	b.n	8006c8e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d012      	beq.n	8006c98 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	3310      	adds	r3, #16
 8006c76:	4618      	mov	r0, r3
 8006c78:	f000 fd30 	bl	80076dc <xTaskRemoveFromEventList>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d001      	beq.n	8006c86 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006c82:	f000 fe07 	bl	8007894 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006c86:	7bbb      	ldrb	r3, [r7, #14]
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	dce9      	bgt.n	8006c6a <prvUnlockQueue+0x60>
 8006c96:	e000      	b.n	8006c9a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006c98:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	22ff      	movs	r2, #255	; 0xff
 8006c9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006ca2:	f001 fd5f 	bl	8008764 <vPortExitCritical>
}
 8006ca6:	bf00      	nop
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b084      	sub	sp, #16
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006cb6:	f001 fd25 	bl	8008704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d102      	bne.n	8006cc8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	60fb      	str	r3, [r7, #12]
 8006cc6:	e001      	b.n	8006ccc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ccc:	f001 fd4a 	bl	8008764 <vPortExitCritical>

	return xReturn;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b084      	sub	sp, #16
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ce2:	f001 fd0f 	bl	8008704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d102      	bne.n	8006cf8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	60fb      	str	r3, [r7, #12]
 8006cf6:	e001      	b.n	8006cfc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006cfc:	f001 fd32 	bl	8008764 <vPortExitCritical>

	return xReturn;
 8006d00:	68fb      	ldr	r3, [r7, #12]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
	...

08006d0c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d16:	2300      	movs	r3, #0
 8006d18:	60fb      	str	r3, [r7, #12]
 8006d1a:	e014      	b.n	8006d46 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006d1c:	4a0f      	ldr	r2, [pc, #60]	; (8006d5c <vQueueAddToRegistry+0x50>)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10b      	bne.n	8006d40 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006d28:	490c      	ldr	r1, [pc, #48]	; (8006d5c <vQueueAddToRegistry+0x50>)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	683a      	ldr	r2, [r7, #0]
 8006d2e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006d32:	4a0a      	ldr	r2, [pc, #40]	; (8006d5c <vQueueAddToRegistry+0x50>)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	00db      	lsls	r3, r3, #3
 8006d38:	4413      	add	r3, r2
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006d3e:	e006      	b.n	8006d4e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	3301      	adds	r3, #1
 8006d44:	60fb      	str	r3, [r7, #12]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2b07      	cmp	r3, #7
 8006d4a:	d9e7      	bls.n	8006d1c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006d4c:	bf00      	nop
 8006d4e:	bf00      	nop
 8006d50:	3714      	adds	r7, #20
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	200009f4 	.word	0x200009f4

08006d60 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006d60:	b480      	push	{r7}
 8006d62:	b085      	sub	sp, #20
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d68:	2300      	movs	r3, #0
 8006d6a:	60fb      	str	r3, [r7, #12]
 8006d6c:	e016      	b.n	8006d9c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006d6e:	4a10      	ldr	r2, [pc, #64]	; (8006db0 <vQueueUnregisterQueue+0x50>)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	00db      	lsls	r3, r3, #3
 8006d74:	4413      	add	r3, r2
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d10b      	bne.n	8006d96 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006d7e:	4a0c      	ldr	r2, [pc, #48]	; (8006db0 <vQueueUnregisterQueue+0x50>)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2100      	movs	r1, #0
 8006d84:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006d88:	4a09      	ldr	r2, [pc, #36]	; (8006db0 <vQueueUnregisterQueue+0x50>)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	00db      	lsls	r3, r3, #3
 8006d8e:	4413      	add	r3, r2
 8006d90:	2200      	movs	r2, #0
 8006d92:	605a      	str	r2, [r3, #4]
				break;
 8006d94:	e006      	b.n	8006da4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	60fb      	str	r3, [r7, #12]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2b07      	cmp	r3, #7
 8006da0:	d9e5      	bls.n	8006d6e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006da2:	bf00      	nop
 8006da4:	bf00      	nop
 8006da6:	3714      	adds	r7, #20
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	200009f4 	.word	0x200009f4

08006db4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b086      	sub	sp, #24
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006dc4:	f001 fc9e 	bl	8008704 <vPortEnterCritical>
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006dce:	b25b      	sxtb	r3, r3
 8006dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd4:	d103      	bne.n	8006dde <vQueueWaitForMessageRestricted+0x2a>
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006de4:	b25b      	sxtb	r3, r3
 8006de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dea:	d103      	bne.n	8006df4 <vQueueWaitForMessageRestricted+0x40>
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006df4:	f001 fcb6 	bl	8008764 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d106      	bne.n	8006e0e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	3324      	adds	r3, #36	; 0x24
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	68b9      	ldr	r1, [r7, #8]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f000 fc3b 	bl	8007684 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006e0e:	6978      	ldr	r0, [r7, #20]
 8006e10:	f7ff fefb 	bl	8006c0a <prvUnlockQueue>
	}
 8006e14:	bf00      	nop
 8006e16:	3718      	adds	r7, #24
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b08e      	sub	sp, #56	; 0x38
 8006e20:	af04      	add	r7, sp, #16
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
 8006e28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10a      	bne.n	8006e46 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e34:	f383 8811 	msr	BASEPRI, r3
 8006e38:	f3bf 8f6f 	isb	sy
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	623b      	str	r3, [r7, #32]
}
 8006e42:	bf00      	nop
 8006e44:	e7fe      	b.n	8006e44 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10a      	bne.n	8006e62 <xTaskCreateStatic+0x46>
	__asm volatile
 8006e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e50:	f383 8811 	msr	BASEPRI, r3
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	61fb      	str	r3, [r7, #28]
}
 8006e5e:	bf00      	nop
 8006e60:	e7fe      	b.n	8006e60 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006e62:	235c      	movs	r3, #92	; 0x5c
 8006e64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	2b5c      	cmp	r3, #92	; 0x5c
 8006e6a:	d00a      	beq.n	8006e82 <xTaskCreateStatic+0x66>
	__asm volatile
 8006e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e70:	f383 8811 	msr	BASEPRI, r3
 8006e74:	f3bf 8f6f 	isb	sy
 8006e78:	f3bf 8f4f 	dsb	sy
 8006e7c:	61bb      	str	r3, [r7, #24]
}
 8006e7e:	bf00      	nop
 8006e80:	e7fe      	b.n	8006e80 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006e82:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d01e      	beq.n	8006ec8 <xTaskCreateStatic+0xac>
 8006e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d01b      	beq.n	8006ec8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e92:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e98:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9c:	2202      	movs	r2, #2
 8006e9e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	9303      	str	r3, [sp, #12]
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea8:	9302      	str	r3, [sp, #8]
 8006eaa:	f107 0314 	add.w	r3, r7, #20
 8006eae:	9301      	str	r3, [sp, #4]
 8006eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	68b9      	ldr	r1, [r7, #8]
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f000 f850 	bl	8006f60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ec0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ec2:	f000 f8dd 	bl	8007080 <prvAddNewTaskToReadyList>
 8006ec6:	e001      	b.n	8006ecc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ecc:	697b      	ldr	r3, [r7, #20]
	}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3728      	adds	r7, #40	; 0x28
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b08c      	sub	sp, #48	; 0x30
 8006eda:	af04      	add	r7, sp, #16
 8006edc:	60f8      	str	r0, [r7, #12]
 8006ede:	60b9      	str	r1, [r7, #8]
 8006ee0:	603b      	str	r3, [r7, #0]
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ee6:	88fb      	ldrh	r3, [r7, #6]
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4618      	mov	r0, r3
 8006eec:	f001 fd2c 	bl	8008948 <pvPortMalloc>
 8006ef0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00e      	beq.n	8006f16 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006ef8:	205c      	movs	r0, #92	; 0x5c
 8006efa:	f001 fd25 	bl	8008948 <pvPortMalloc>
 8006efe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d003      	beq.n	8006f0e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	631a      	str	r2, [r3, #48]	; 0x30
 8006f0c:	e005      	b.n	8006f1a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006f0e:	6978      	ldr	r0, [r7, #20]
 8006f10:	f001 fde6 	bl	8008ae0 <vPortFree>
 8006f14:	e001      	b.n	8006f1a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006f16:	2300      	movs	r3, #0
 8006f18:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d017      	beq.n	8006f50 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f28:	88fa      	ldrh	r2, [r7, #6]
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	9303      	str	r3, [sp, #12]
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	9302      	str	r3, [sp, #8]
 8006f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f34:	9301      	str	r3, [sp, #4]
 8006f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	68b9      	ldr	r1, [r7, #8]
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f000 f80e 	bl	8006f60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f44:	69f8      	ldr	r0, [r7, #28]
 8006f46:	f000 f89b 	bl	8007080 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	61bb      	str	r3, [r7, #24]
 8006f4e:	e002      	b.n	8006f56 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006f50:	f04f 33ff 	mov.w	r3, #4294967295
 8006f54:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006f56:	69bb      	ldr	r3, [r7, #24]
	}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3720      	adds	r7, #32
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b088      	sub	sp, #32
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
 8006f6c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f70:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	461a      	mov	r2, r3
 8006f78:	21a5      	movs	r1, #165	; 0xa5
 8006f7a:	f001 ff07 	bl	8008d8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	f023 0307 	bic.w	r3, r3, #7
 8006f96:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	f003 0307 	and.w	r3, r3, #7
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00a      	beq.n	8006fb8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa6:	f383 8811 	msr	BASEPRI, r3
 8006faa:	f3bf 8f6f 	isb	sy
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	617b      	str	r3, [r7, #20]
}
 8006fb4:	bf00      	nop
 8006fb6:	e7fe      	b.n	8006fb6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d01f      	beq.n	8006ffe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	61fb      	str	r3, [r7, #28]
 8006fc2:	e012      	b.n	8006fea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	4413      	add	r3, r2
 8006fca:	7819      	ldrb	r1, [r3, #0]
 8006fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	3334      	adds	r3, #52	; 0x34
 8006fd4:	460a      	mov	r2, r1
 8006fd6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	4413      	add	r3, r2
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d006      	beq.n	8006ff2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	61fb      	str	r3, [r7, #28]
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	2b0f      	cmp	r3, #15
 8006fee:	d9e9      	bls.n	8006fc4 <prvInitialiseNewTask+0x64>
 8006ff0:	e000      	b.n	8006ff4 <prvInitialiseNewTask+0x94>
			{
				break;
 8006ff2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ffc:	e003      	b.n	8007006 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007008:	2b37      	cmp	r3, #55	; 0x37
 800700a:	d901      	bls.n	8007010 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800700c:	2337      	movs	r3, #55	; 0x37
 800700e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007012:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007014:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007018:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800701a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800701c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701e:	2200      	movs	r2, #0
 8007020:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007024:	3304      	adds	r3, #4
 8007026:	4618      	mov	r0, r3
 8007028:	f7fe fe56 	bl	8005cd8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800702c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800702e:	3318      	adds	r3, #24
 8007030:	4618      	mov	r0, r3
 8007032:	f7fe fe51 	bl	8005cd8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800703a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800703c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007044:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800704a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800704c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704e:	2200      	movs	r2, #0
 8007050:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007054:	2200      	movs	r2, #0
 8007056:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800705a:	683a      	ldr	r2, [r7, #0]
 800705c:	68f9      	ldr	r1, [r7, #12]
 800705e:	69b8      	ldr	r0, [r7, #24]
 8007060:	f001 fa26 	bl	80084b0 <pxPortInitialiseStack>
 8007064:	4602      	mov	r2, r0
 8007066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007068:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800706a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800706c:	2b00      	cmp	r3, #0
 800706e:	d002      	beq.n	8007076 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007074:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007076:	bf00      	nop
 8007078:	3720      	adds	r7, #32
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
	...

08007080 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007088:	f001 fb3c 	bl	8008704 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800708c:	4b2d      	ldr	r3, [pc, #180]	; (8007144 <prvAddNewTaskToReadyList+0xc4>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3301      	adds	r3, #1
 8007092:	4a2c      	ldr	r2, [pc, #176]	; (8007144 <prvAddNewTaskToReadyList+0xc4>)
 8007094:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007096:	4b2c      	ldr	r3, [pc, #176]	; (8007148 <prvAddNewTaskToReadyList+0xc8>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d109      	bne.n	80070b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800709e:	4a2a      	ldr	r2, [pc, #168]	; (8007148 <prvAddNewTaskToReadyList+0xc8>)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80070a4:	4b27      	ldr	r3, [pc, #156]	; (8007144 <prvAddNewTaskToReadyList+0xc4>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d110      	bne.n	80070ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80070ac:	f000 fc16 	bl	80078dc <prvInitialiseTaskLists>
 80070b0:	e00d      	b.n	80070ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80070b2:	4b26      	ldr	r3, [pc, #152]	; (800714c <prvAddNewTaskToReadyList+0xcc>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d109      	bne.n	80070ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80070ba:	4b23      	ldr	r3, [pc, #140]	; (8007148 <prvAddNewTaskToReadyList+0xc8>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d802      	bhi.n	80070ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80070c8:	4a1f      	ldr	r2, [pc, #124]	; (8007148 <prvAddNewTaskToReadyList+0xc8>)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80070ce:	4b20      	ldr	r3, [pc, #128]	; (8007150 <prvAddNewTaskToReadyList+0xd0>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	3301      	adds	r3, #1
 80070d4:	4a1e      	ldr	r2, [pc, #120]	; (8007150 <prvAddNewTaskToReadyList+0xd0>)
 80070d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80070d8:	4b1d      	ldr	r3, [pc, #116]	; (8007150 <prvAddNewTaskToReadyList+0xd0>)
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070e4:	4b1b      	ldr	r3, [pc, #108]	; (8007154 <prvAddNewTaskToReadyList+0xd4>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d903      	bls.n	80070f4 <prvAddNewTaskToReadyList+0x74>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f0:	4a18      	ldr	r2, [pc, #96]	; (8007154 <prvAddNewTaskToReadyList+0xd4>)
 80070f2:	6013      	str	r3, [r2, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f8:	4613      	mov	r3, r2
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4a15      	ldr	r2, [pc, #84]	; (8007158 <prvAddNewTaskToReadyList+0xd8>)
 8007102:	441a      	add	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	3304      	adds	r3, #4
 8007108:	4619      	mov	r1, r3
 800710a:	4610      	mov	r0, r2
 800710c:	f7fe fdf1 	bl	8005cf2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007110:	f001 fb28 	bl	8008764 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007114:	4b0d      	ldr	r3, [pc, #52]	; (800714c <prvAddNewTaskToReadyList+0xcc>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00e      	beq.n	800713a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800711c:	4b0a      	ldr	r3, [pc, #40]	; (8007148 <prvAddNewTaskToReadyList+0xc8>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007126:	429a      	cmp	r2, r3
 8007128:	d207      	bcs.n	800713a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800712a:	4b0c      	ldr	r3, [pc, #48]	; (800715c <prvAddNewTaskToReadyList+0xdc>)
 800712c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007130:	601a      	str	r2, [r3, #0]
 8007132:	f3bf 8f4f 	dsb	sy
 8007136:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800713a:	bf00      	nop
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	20000f08 	.word	0x20000f08
 8007148:	20000a34 	.word	0x20000a34
 800714c:	20000f14 	.word	0x20000f14
 8007150:	20000f24 	.word	0x20000f24
 8007154:	20000f10 	.word	0x20000f10
 8007158:	20000a38 	.word	0x20000a38
 800715c:	e000ed04 	.word	0xe000ed04

08007160 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007168:	2300      	movs	r3, #0
 800716a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d017      	beq.n	80071a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007172:	4b13      	ldr	r3, [pc, #76]	; (80071c0 <vTaskDelay+0x60>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00a      	beq.n	8007190 <vTaskDelay+0x30>
	__asm volatile
 800717a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717e:	f383 8811 	msr	BASEPRI, r3
 8007182:	f3bf 8f6f 	isb	sy
 8007186:	f3bf 8f4f 	dsb	sy
 800718a:	60bb      	str	r3, [r7, #8]
}
 800718c:	bf00      	nop
 800718e:	e7fe      	b.n	800718e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007190:	f000 f880 	bl	8007294 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007194:	2100      	movs	r1, #0
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fde8 	bl	8007d6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800719c:	f000 f888 	bl	80072b0 <xTaskResumeAll>
 80071a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d107      	bne.n	80071b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80071a8:	4b06      	ldr	r3, [pc, #24]	; (80071c4 <vTaskDelay+0x64>)
 80071aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ae:	601a      	str	r2, [r3, #0]
 80071b0:	f3bf 8f4f 	dsb	sy
 80071b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80071b8:	bf00      	nop
 80071ba:	3710      	adds	r7, #16
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	20000f30 	.word	0x20000f30
 80071c4:	e000ed04 	.word	0xe000ed04

080071c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b08a      	sub	sp, #40	; 0x28
 80071cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80071ce:	2300      	movs	r3, #0
 80071d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80071d2:	2300      	movs	r3, #0
 80071d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80071d6:	463a      	mov	r2, r7
 80071d8:	1d39      	adds	r1, r7, #4
 80071da:	f107 0308 	add.w	r3, r7, #8
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fe fd26 	bl	8005c30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80071e4:	6839      	ldr	r1, [r7, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	68ba      	ldr	r2, [r7, #8]
 80071ea:	9202      	str	r2, [sp, #8]
 80071ec:	9301      	str	r3, [sp, #4]
 80071ee:	2300      	movs	r3, #0
 80071f0:	9300      	str	r3, [sp, #0]
 80071f2:	2300      	movs	r3, #0
 80071f4:	460a      	mov	r2, r1
 80071f6:	4921      	ldr	r1, [pc, #132]	; (800727c <vTaskStartScheduler+0xb4>)
 80071f8:	4821      	ldr	r0, [pc, #132]	; (8007280 <vTaskStartScheduler+0xb8>)
 80071fa:	f7ff fe0f 	bl	8006e1c <xTaskCreateStatic>
 80071fe:	4603      	mov	r3, r0
 8007200:	4a20      	ldr	r2, [pc, #128]	; (8007284 <vTaskStartScheduler+0xbc>)
 8007202:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007204:	4b1f      	ldr	r3, [pc, #124]	; (8007284 <vTaskStartScheduler+0xbc>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d002      	beq.n	8007212 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800720c:	2301      	movs	r3, #1
 800720e:	617b      	str	r3, [r7, #20]
 8007210:	e001      	b.n	8007216 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007212:	2300      	movs	r3, #0
 8007214:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d102      	bne.n	8007222 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800721c:	f000 fdfa 	bl	8007e14 <xTimerCreateTimerTask>
 8007220:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d116      	bne.n	8007256 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722c:	f383 8811 	msr	BASEPRI, r3
 8007230:	f3bf 8f6f 	isb	sy
 8007234:	f3bf 8f4f 	dsb	sy
 8007238:	613b      	str	r3, [r7, #16]
}
 800723a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800723c:	4b12      	ldr	r3, [pc, #72]	; (8007288 <vTaskStartScheduler+0xc0>)
 800723e:	f04f 32ff 	mov.w	r2, #4294967295
 8007242:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007244:	4b11      	ldr	r3, [pc, #68]	; (800728c <vTaskStartScheduler+0xc4>)
 8007246:	2201      	movs	r2, #1
 8007248:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800724a:	4b11      	ldr	r3, [pc, #68]	; (8007290 <vTaskStartScheduler+0xc8>)
 800724c:	2200      	movs	r2, #0
 800724e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007250:	f001 f9b6 	bl	80085c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007254:	e00e      	b.n	8007274 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800725c:	d10a      	bne.n	8007274 <vTaskStartScheduler+0xac>
	__asm volatile
 800725e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007262:	f383 8811 	msr	BASEPRI, r3
 8007266:	f3bf 8f6f 	isb	sy
 800726a:	f3bf 8f4f 	dsb	sy
 800726e:	60fb      	str	r3, [r7, #12]
}
 8007270:	bf00      	nop
 8007272:	e7fe      	b.n	8007272 <vTaskStartScheduler+0xaa>
}
 8007274:	bf00      	nop
 8007276:	3718      	adds	r7, #24
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	080097f8 	.word	0x080097f8
 8007280:	080078ad 	.word	0x080078ad
 8007284:	20000f2c 	.word	0x20000f2c
 8007288:	20000f28 	.word	0x20000f28
 800728c:	20000f14 	.word	0x20000f14
 8007290:	20000f0c 	.word	0x20000f0c

08007294 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007294:	b480      	push	{r7}
 8007296:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007298:	4b04      	ldr	r3, [pc, #16]	; (80072ac <vTaskSuspendAll+0x18>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	3301      	adds	r3, #1
 800729e:	4a03      	ldr	r2, [pc, #12]	; (80072ac <vTaskSuspendAll+0x18>)
 80072a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80072a2:	bf00      	nop
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	20000f30 	.word	0x20000f30

080072b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80072b6:	2300      	movs	r3, #0
 80072b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80072ba:	2300      	movs	r3, #0
 80072bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80072be:	4b42      	ldr	r3, [pc, #264]	; (80073c8 <xTaskResumeAll+0x118>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10a      	bne.n	80072dc <xTaskResumeAll+0x2c>
	__asm volatile
 80072c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ca:	f383 8811 	msr	BASEPRI, r3
 80072ce:	f3bf 8f6f 	isb	sy
 80072d2:	f3bf 8f4f 	dsb	sy
 80072d6:	603b      	str	r3, [r7, #0]
}
 80072d8:	bf00      	nop
 80072da:	e7fe      	b.n	80072da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80072dc:	f001 fa12 	bl	8008704 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80072e0:	4b39      	ldr	r3, [pc, #228]	; (80073c8 <xTaskResumeAll+0x118>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	3b01      	subs	r3, #1
 80072e6:	4a38      	ldr	r2, [pc, #224]	; (80073c8 <xTaskResumeAll+0x118>)
 80072e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072ea:	4b37      	ldr	r3, [pc, #220]	; (80073c8 <xTaskResumeAll+0x118>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d162      	bne.n	80073b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80072f2:	4b36      	ldr	r3, [pc, #216]	; (80073cc <xTaskResumeAll+0x11c>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d05e      	beq.n	80073b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072fa:	e02f      	b.n	800735c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072fc:	4b34      	ldr	r3, [pc, #208]	; (80073d0 <xTaskResumeAll+0x120>)
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	3318      	adds	r3, #24
 8007308:	4618      	mov	r0, r3
 800730a:	f7fe fd4f 	bl	8005dac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	3304      	adds	r3, #4
 8007312:	4618      	mov	r0, r3
 8007314:	f7fe fd4a 	bl	8005dac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800731c:	4b2d      	ldr	r3, [pc, #180]	; (80073d4 <xTaskResumeAll+0x124>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	429a      	cmp	r2, r3
 8007322:	d903      	bls.n	800732c <xTaskResumeAll+0x7c>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007328:	4a2a      	ldr	r2, [pc, #168]	; (80073d4 <xTaskResumeAll+0x124>)
 800732a:	6013      	str	r3, [r2, #0]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007330:	4613      	mov	r3, r2
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	4413      	add	r3, r2
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	4a27      	ldr	r2, [pc, #156]	; (80073d8 <xTaskResumeAll+0x128>)
 800733a:	441a      	add	r2, r3
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	3304      	adds	r3, #4
 8007340:	4619      	mov	r1, r3
 8007342:	4610      	mov	r0, r2
 8007344:	f7fe fcd5 	bl	8005cf2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800734c:	4b23      	ldr	r3, [pc, #140]	; (80073dc <xTaskResumeAll+0x12c>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007352:	429a      	cmp	r2, r3
 8007354:	d302      	bcc.n	800735c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007356:	4b22      	ldr	r3, [pc, #136]	; (80073e0 <xTaskResumeAll+0x130>)
 8007358:	2201      	movs	r2, #1
 800735a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800735c:	4b1c      	ldr	r3, [pc, #112]	; (80073d0 <xTaskResumeAll+0x120>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1cb      	bne.n	80072fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d001      	beq.n	800736e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800736a:	f000 fb55 	bl	8007a18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800736e:	4b1d      	ldr	r3, [pc, #116]	; (80073e4 <xTaskResumeAll+0x134>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d010      	beq.n	800739c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800737a:	f000 f847 	bl	800740c <xTaskIncrementTick>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d002      	beq.n	800738a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007384:	4b16      	ldr	r3, [pc, #88]	; (80073e0 <xTaskResumeAll+0x130>)
 8007386:	2201      	movs	r2, #1
 8007388:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	3b01      	subs	r3, #1
 800738e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1f1      	bne.n	800737a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007396:	4b13      	ldr	r3, [pc, #76]	; (80073e4 <xTaskResumeAll+0x134>)
 8007398:	2200      	movs	r2, #0
 800739a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800739c:	4b10      	ldr	r3, [pc, #64]	; (80073e0 <xTaskResumeAll+0x130>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d009      	beq.n	80073b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80073a4:	2301      	movs	r3, #1
 80073a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80073a8:	4b0f      	ldr	r3, [pc, #60]	; (80073e8 <xTaskResumeAll+0x138>)
 80073aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073ae:	601a      	str	r2, [r3, #0]
 80073b0:	f3bf 8f4f 	dsb	sy
 80073b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073b8:	f001 f9d4 	bl	8008764 <vPortExitCritical>

	return xAlreadyYielded;
 80073bc:	68bb      	ldr	r3, [r7, #8]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	20000f30 	.word	0x20000f30
 80073cc:	20000f08 	.word	0x20000f08
 80073d0:	20000ec8 	.word	0x20000ec8
 80073d4:	20000f10 	.word	0x20000f10
 80073d8:	20000a38 	.word	0x20000a38
 80073dc:	20000a34 	.word	0x20000a34
 80073e0:	20000f1c 	.word	0x20000f1c
 80073e4:	20000f18 	.word	0x20000f18
 80073e8:	e000ed04 	.word	0xe000ed04

080073ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80073f2:	4b05      	ldr	r3, [pc, #20]	; (8007408 <xTaskGetTickCount+0x1c>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80073f8:	687b      	ldr	r3, [r7, #4]
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	370c      	adds	r7, #12
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	20000f0c 	.word	0x20000f0c

0800740c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b086      	sub	sp, #24
 8007410:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007412:	2300      	movs	r3, #0
 8007414:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007416:	4b4f      	ldr	r3, [pc, #316]	; (8007554 <xTaskIncrementTick+0x148>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	f040 808f 	bne.w	800753e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007420:	4b4d      	ldr	r3, [pc, #308]	; (8007558 <xTaskIncrementTick+0x14c>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	3301      	adds	r3, #1
 8007426:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007428:	4a4b      	ldr	r2, [pc, #300]	; (8007558 <xTaskIncrementTick+0x14c>)
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d120      	bne.n	8007476 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007434:	4b49      	ldr	r3, [pc, #292]	; (800755c <xTaskIncrementTick+0x150>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00a      	beq.n	8007454 <xTaskIncrementTick+0x48>
	__asm volatile
 800743e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	603b      	str	r3, [r7, #0]
}
 8007450:	bf00      	nop
 8007452:	e7fe      	b.n	8007452 <xTaskIncrementTick+0x46>
 8007454:	4b41      	ldr	r3, [pc, #260]	; (800755c <xTaskIncrementTick+0x150>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	60fb      	str	r3, [r7, #12]
 800745a:	4b41      	ldr	r3, [pc, #260]	; (8007560 <xTaskIncrementTick+0x154>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a3f      	ldr	r2, [pc, #252]	; (800755c <xTaskIncrementTick+0x150>)
 8007460:	6013      	str	r3, [r2, #0]
 8007462:	4a3f      	ldr	r2, [pc, #252]	; (8007560 <xTaskIncrementTick+0x154>)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6013      	str	r3, [r2, #0]
 8007468:	4b3e      	ldr	r3, [pc, #248]	; (8007564 <xTaskIncrementTick+0x158>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	3301      	adds	r3, #1
 800746e:	4a3d      	ldr	r2, [pc, #244]	; (8007564 <xTaskIncrementTick+0x158>)
 8007470:	6013      	str	r3, [r2, #0]
 8007472:	f000 fad1 	bl	8007a18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007476:	4b3c      	ldr	r3, [pc, #240]	; (8007568 <xTaskIncrementTick+0x15c>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	429a      	cmp	r2, r3
 800747e:	d349      	bcc.n	8007514 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007480:	4b36      	ldr	r3, [pc, #216]	; (800755c <xTaskIncrementTick+0x150>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d104      	bne.n	8007494 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800748a:	4b37      	ldr	r3, [pc, #220]	; (8007568 <xTaskIncrementTick+0x15c>)
 800748c:	f04f 32ff 	mov.w	r2, #4294967295
 8007490:	601a      	str	r2, [r3, #0]
					break;
 8007492:	e03f      	b.n	8007514 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007494:	4b31      	ldr	r3, [pc, #196]	; (800755c <xTaskIncrementTick+0x150>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80074a4:	693a      	ldr	r2, [r7, #16]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d203      	bcs.n	80074b4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80074ac:	4a2e      	ldr	r2, [pc, #184]	; (8007568 <xTaskIncrementTick+0x15c>)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80074b2:	e02f      	b.n	8007514 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	3304      	adds	r3, #4
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7fe fc77 	bl	8005dac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d004      	beq.n	80074d0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	3318      	adds	r3, #24
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7fe fc6e 	bl	8005dac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d4:	4b25      	ldr	r3, [pc, #148]	; (800756c <xTaskIncrementTick+0x160>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d903      	bls.n	80074e4 <xTaskIncrementTick+0xd8>
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e0:	4a22      	ldr	r2, [pc, #136]	; (800756c <xTaskIncrementTick+0x160>)
 80074e2:	6013      	str	r3, [r2, #0]
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074e8:	4613      	mov	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	4a1f      	ldr	r2, [pc, #124]	; (8007570 <xTaskIncrementTick+0x164>)
 80074f2:	441a      	add	r2, r3
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	3304      	adds	r3, #4
 80074f8:	4619      	mov	r1, r3
 80074fa:	4610      	mov	r0, r2
 80074fc:	f7fe fbf9 	bl	8005cf2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007504:	4b1b      	ldr	r3, [pc, #108]	; (8007574 <xTaskIncrementTick+0x168>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750a:	429a      	cmp	r2, r3
 800750c:	d3b8      	bcc.n	8007480 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800750e:	2301      	movs	r3, #1
 8007510:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007512:	e7b5      	b.n	8007480 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007514:	4b17      	ldr	r3, [pc, #92]	; (8007574 <xTaskIncrementTick+0x168>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800751a:	4915      	ldr	r1, [pc, #84]	; (8007570 <xTaskIncrementTick+0x164>)
 800751c:	4613      	mov	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	440b      	add	r3, r1
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b01      	cmp	r3, #1
 800752a:	d901      	bls.n	8007530 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800752c:	2301      	movs	r3, #1
 800752e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007530:	4b11      	ldr	r3, [pc, #68]	; (8007578 <xTaskIncrementTick+0x16c>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d007      	beq.n	8007548 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007538:	2301      	movs	r3, #1
 800753a:	617b      	str	r3, [r7, #20]
 800753c:	e004      	b.n	8007548 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800753e:	4b0f      	ldr	r3, [pc, #60]	; (800757c <xTaskIncrementTick+0x170>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	3301      	adds	r3, #1
 8007544:	4a0d      	ldr	r2, [pc, #52]	; (800757c <xTaskIncrementTick+0x170>)
 8007546:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007548:	697b      	ldr	r3, [r7, #20]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3718      	adds	r7, #24
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	20000f30 	.word	0x20000f30
 8007558:	20000f0c 	.word	0x20000f0c
 800755c:	20000ec0 	.word	0x20000ec0
 8007560:	20000ec4 	.word	0x20000ec4
 8007564:	20000f20 	.word	0x20000f20
 8007568:	20000f28 	.word	0x20000f28
 800756c:	20000f10 	.word	0x20000f10
 8007570:	20000a38 	.word	0x20000a38
 8007574:	20000a34 	.word	0x20000a34
 8007578:	20000f1c 	.word	0x20000f1c
 800757c:	20000f18 	.word	0x20000f18

08007580 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007586:	4b28      	ldr	r3, [pc, #160]	; (8007628 <vTaskSwitchContext+0xa8>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d003      	beq.n	8007596 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800758e:	4b27      	ldr	r3, [pc, #156]	; (800762c <vTaskSwitchContext+0xac>)
 8007590:	2201      	movs	r2, #1
 8007592:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007594:	e041      	b.n	800761a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007596:	4b25      	ldr	r3, [pc, #148]	; (800762c <vTaskSwitchContext+0xac>)
 8007598:	2200      	movs	r2, #0
 800759a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800759c:	4b24      	ldr	r3, [pc, #144]	; (8007630 <vTaskSwitchContext+0xb0>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	60fb      	str	r3, [r7, #12]
 80075a2:	e010      	b.n	80075c6 <vTaskSwitchContext+0x46>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10a      	bne.n	80075c0 <vTaskSwitchContext+0x40>
	__asm volatile
 80075aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ae:	f383 8811 	msr	BASEPRI, r3
 80075b2:	f3bf 8f6f 	isb	sy
 80075b6:	f3bf 8f4f 	dsb	sy
 80075ba:	607b      	str	r3, [r7, #4]
}
 80075bc:	bf00      	nop
 80075be:	e7fe      	b.n	80075be <vTaskSwitchContext+0x3e>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	3b01      	subs	r3, #1
 80075c4:	60fb      	str	r3, [r7, #12]
 80075c6:	491b      	ldr	r1, [pc, #108]	; (8007634 <vTaskSwitchContext+0xb4>)
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	4613      	mov	r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4413      	add	r3, r2
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	440b      	add	r3, r1
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d0e4      	beq.n	80075a4 <vTaskSwitchContext+0x24>
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	4613      	mov	r3, r2
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	4413      	add	r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4a13      	ldr	r2, [pc, #76]	; (8007634 <vTaskSwitchContext+0xb4>)
 80075e6:	4413      	add	r3, r2
 80075e8:	60bb      	str	r3, [r7, #8]
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	685a      	ldr	r2, [r3, #4]
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	605a      	str	r2, [r3, #4]
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	685a      	ldr	r2, [r3, #4]
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	3308      	adds	r3, #8
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d104      	bne.n	800760a <vTaskSwitchContext+0x8a>
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	685a      	ldr	r2, [r3, #4]
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	605a      	str	r2, [r3, #4]
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	4a09      	ldr	r2, [pc, #36]	; (8007638 <vTaskSwitchContext+0xb8>)
 8007612:	6013      	str	r3, [r2, #0]
 8007614:	4a06      	ldr	r2, [pc, #24]	; (8007630 <vTaskSwitchContext+0xb0>)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6013      	str	r3, [r2, #0]
}
 800761a:	bf00      	nop
 800761c:	3714      	adds	r7, #20
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	20000f30 	.word	0x20000f30
 800762c:	20000f1c 	.word	0x20000f1c
 8007630:	20000f10 	.word	0x20000f10
 8007634:	20000a38 	.word	0x20000a38
 8007638:	20000a34 	.word	0x20000a34

0800763c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10a      	bne.n	8007662 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800764c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007650:	f383 8811 	msr	BASEPRI, r3
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	60fb      	str	r3, [r7, #12]
}
 800765e:	bf00      	nop
 8007660:	e7fe      	b.n	8007660 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007662:	4b07      	ldr	r3, [pc, #28]	; (8007680 <vTaskPlaceOnEventList+0x44>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	3318      	adds	r3, #24
 8007668:	4619      	mov	r1, r3
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f7fe fb65 	bl	8005d3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007670:	2101      	movs	r1, #1
 8007672:	6838      	ldr	r0, [r7, #0]
 8007674:	f000 fb7a 	bl	8007d6c <prvAddCurrentTaskToDelayedList>
}
 8007678:	bf00      	nop
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	20000a34 	.word	0x20000a34

08007684 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007684:	b580      	push	{r7, lr}
 8007686:	b086      	sub	sp, #24
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10a      	bne.n	80076ac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769a:	f383 8811 	msr	BASEPRI, r3
 800769e:	f3bf 8f6f 	isb	sy
 80076a2:	f3bf 8f4f 	dsb	sy
 80076a6:	617b      	str	r3, [r7, #20]
}
 80076a8:	bf00      	nop
 80076aa:	e7fe      	b.n	80076aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80076ac:	4b0a      	ldr	r3, [pc, #40]	; (80076d8 <vTaskPlaceOnEventListRestricted+0x54>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	3318      	adds	r3, #24
 80076b2:	4619      	mov	r1, r3
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f7fe fb1c 	bl	8005cf2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d002      	beq.n	80076c6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80076c0:	f04f 33ff 	mov.w	r3, #4294967295
 80076c4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80076c6:	6879      	ldr	r1, [r7, #4]
 80076c8:	68b8      	ldr	r0, [r7, #8]
 80076ca:	f000 fb4f 	bl	8007d6c <prvAddCurrentTaskToDelayedList>
	}
 80076ce:	bf00      	nop
 80076d0:	3718      	adds	r7, #24
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	20000a34 	.word	0x20000a34

080076dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b086      	sub	sp, #24
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10a      	bne.n	8007708 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80076f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	60fb      	str	r3, [r7, #12]
}
 8007704:	bf00      	nop
 8007706:	e7fe      	b.n	8007706 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	3318      	adds	r3, #24
 800770c:	4618      	mov	r0, r3
 800770e:	f7fe fb4d 	bl	8005dac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007712:	4b1e      	ldr	r3, [pc, #120]	; (800778c <xTaskRemoveFromEventList+0xb0>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d11d      	bne.n	8007756 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	3304      	adds	r3, #4
 800771e:	4618      	mov	r0, r3
 8007720:	f7fe fb44 	bl	8005dac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007728:	4b19      	ldr	r3, [pc, #100]	; (8007790 <xTaskRemoveFromEventList+0xb4>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	429a      	cmp	r2, r3
 800772e:	d903      	bls.n	8007738 <xTaskRemoveFromEventList+0x5c>
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007734:	4a16      	ldr	r2, [pc, #88]	; (8007790 <xTaskRemoveFromEventList+0xb4>)
 8007736:	6013      	str	r3, [r2, #0]
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800773c:	4613      	mov	r3, r2
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	4413      	add	r3, r2
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	4a13      	ldr	r2, [pc, #76]	; (8007794 <xTaskRemoveFromEventList+0xb8>)
 8007746:	441a      	add	r2, r3
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	3304      	adds	r3, #4
 800774c:	4619      	mov	r1, r3
 800774e:	4610      	mov	r0, r2
 8007750:	f7fe facf 	bl	8005cf2 <vListInsertEnd>
 8007754:	e005      	b.n	8007762 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	3318      	adds	r3, #24
 800775a:	4619      	mov	r1, r3
 800775c:	480e      	ldr	r0, [pc, #56]	; (8007798 <xTaskRemoveFromEventList+0xbc>)
 800775e:	f7fe fac8 	bl	8005cf2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007766:	4b0d      	ldr	r3, [pc, #52]	; (800779c <xTaskRemoveFromEventList+0xc0>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776c:	429a      	cmp	r2, r3
 800776e:	d905      	bls.n	800777c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007770:	2301      	movs	r3, #1
 8007772:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007774:	4b0a      	ldr	r3, [pc, #40]	; (80077a0 <xTaskRemoveFromEventList+0xc4>)
 8007776:	2201      	movs	r2, #1
 8007778:	601a      	str	r2, [r3, #0]
 800777a:	e001      	b.n	8007780 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800777c:	2300      	movs	r3, #0
 800777e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007780:	697b      	ldr	r3, [r7, #20]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3718      	adds	r7, #24
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	20000f30 	.word	0x20000f30
 8007790:	20000f10 	.word	0x20000f10
 8007794:	20000a38 	.word	0x20000a38
 8007798:	20000ec8 	.word	0x20000ec8
 800779c:	20000a34 	.word	0x20000a34
 80077a0:	20000f1c 	.word	0x20000f1c

080077a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80077ac:	4b06      	ldr	r3, [pc, #24]	; (80077c8 <vTaskInternalSetTimeOutState+0x24>)
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80077b4:	4b05      	ldr	r3, [pc, #20]	; (80077cc <vTaskInternalSetTimeOutState+0x28>)
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	605a      	str	r2, [r3, #4]
}
 80077bc:	bf00      	nop
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr
 80077c8:	20000f20 	.word	0x20000f20
 80077cc:	20000f0c 	.word	0x20000f0c

080077d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b088      	sub	sp, #32
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d10a      	bne.n	80077f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80077e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e4:	f383 8811 	msr	BASEPRI, r3
 80077e8:	f3bf 8f6f 	isb	sy
 80077ec:	f3bf 8f4f 	dsb	sy
 80077f0:	613b      	str	r3, [r7, #16]
}
 80077f2:	bf00      	nop
 80077f4:	e7fe      	b.n	80077f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d10a      	bne.n	8007812 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80077fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007800:	f383 8811 	msr	BASEPRI, r3
 8007804:	f3bf 8f6f 	isb	sy
 8007808:	f3bf 8f4f 	dsb	sy
 800780c:	60fb      	str	r3, [r7, #12]
}
 800780e:	bf00      	nop
 8007810:	e7fe      	b.n	8007810 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007812:	f000 ff77 	bl	8008704 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007816:	4b1d      	ldr	r3, [pc, #116]	; (800788c <xTaskCheckForTimeOut+0xbc>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	69ba      	ldr	r2, [r7, #24]
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782e:	d102      	bne.n	8007836 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007830:	2300      	movs	r3, #0
 8007832:	61fb      	str	r3, [r7, #28]
 8007834:	e023      	b.n	800787e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	4b15      	ldr	r3, [pc, #84]	; (8007890 <xTaskCheckForTimeOut+0xc0>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	429a      	cmp	r2, r3
 8007840:	d007      	beq.n	8007852 <xTaskCheckForTimeOut+0x82>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	69ba      	ldr	r2, [r7, #24]
 8007848:	429a      	cmp	r2, r3
 800784a:	d302      	bcc.n	8007852 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800784c:	2301      	movs	r3, #1
 800784e:	61fb      	str	r3, [r7, #28]
 8007850:	e015      	b.n	800787e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	429a      	cmp	r2, r3
 800785a:	d20b      	bcs.n	8007874 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	1ad2      	subs	r2, r2, r3
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7ff ff9b 	bl	80077a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800786e:	2300      	movs	r3, #0
 8007870:	61fb      	str	r3, [r7, #28]
 8007872:	e004      	b.n	800787e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	2200      	movs	r2, #0
 8007878:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800787a:	2301      	movs	r3, #1
 800787c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800787e:	f000 ff71 	bl	8008764 <vPortExitCritical>

	return xReturn;
 8007882:	69fb      	ldr	r3, [r7, #28]
}
 8007884:	4618      	mov	r0, r3
 8007886:	3720      	adds	r7, #32
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	20000f0c 	.word	0x20000f0c
 8007890:	20000f20 	.word	0x20000f20

08007894 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007894:	b480      	push	{r7}
 8007896:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007898:	4b03      	ldr	r3, [pc, #12]	; (80078a8 <vTaskMissedYield+0x14>)
 800789a:	2201      	movs	r2, #1
 800789c:	601a      	str	r2, [r3, #0]
}
 800789e:	bf00      	nop
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	20000f1c 	.word	0x20000f1c

080078ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80078b4:	f000 f852 	bl	800795c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80078b8:	4b06      	ldr	r3, [pc, #24]	; (80078d4 <prvIdleTask+0x28>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d9f9      	bls.n	80078b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80078c0:	4b05      	ldr	r3, [pc, #20]	; (80078d8 <prvIdleTask+0x2c>)
 80078c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078c6:	601a      	str	r2, [r3, #0]
 80078c8:	f3bf 8f4f 	dsb	sy
 80078cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80078d0:	e7f0      	b.n	80078b4 <prvIdleTask+0x8>
 80078d2:	bf00      	nop
 80078d4:	20000a38 	.word	0x20000a38
 80078d8:	e000ed04 	.word	0xe000ed04

080078dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078e2:	2300      	movs	r3, #0
 80078e4:	607b      	str	r3, [r7, #4]
 80078e6:	e00c      	b.n	8007902 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	4613      	mov	r3, r2
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	4413      	add	r3, r2
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	4a12      	ldr	r2, [pc, #72]	; (800793c <prvInitialiseTaskLists+0x60>)
 80078f4:	4413      	add	r3, r2
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7fe f9ce 	bl	8005c98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	3301      	adds	r3, #1
 8007900:	607b      	str	r3, [r7, #4]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2b37      	cmp	r3, #55	; 0x37
 8007906:	d9ef      	bls.n	80078e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007908:	480d      	ldr	r0, [pc, #52]	; (8007940 <prvInitialiseTaskLists+0x64>)
 800790a:	f7fe f9c5 	bl	8005c98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800790e:	480d      	ldr	r0, [pc, #52]	; (8007944 <prvInitialiseTaskLists+0x68>)
 8007910:	f7fe f9c2 	bl	8005c98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007914:	480c      	ldr	r0, [pc, #48]	; (8007948 <prvInitialiseTaskLists+0x6c>)
 8007916:	f7fe f9bf 	bl	8005c98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800791a:	480c      	ldr	r0, [pc, #48]	; (800794c <prvInitialiseTaskLists+0x70>)
 800791c:	f7fe f9bc 	bl	8005c98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007920:	480b      	ldr	r0, [pc, #44]	; (8007950 <prvInitialiseTaskLists+0x74>)
 8007922:	f7fe f9b9 	bl	8005c98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007926:	4b0b      	ldr	r3, [pc, #44]	; (8007954 <prvInitialiseTaskLists+0x78>)
 8007928:	4a05      	ldr	r2, [pc, #20]	; (8007940 <prvInitialiseTaskLists+0x64>)
 800792a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800792c:	4b0a      	ldr	r3, [pc, #40]	; (8007958 <prvInitialiseTaskLists+0x7c>)
 800792e:	4a05      	ldr	r2, [pc, #20]	; (8007944 <prvInitialiseTaskLists+0x68>)
 8007930:	601a      	str	r2, [r3, #0]
}
 8007932:	bf00      	nop
 8007934:	3708      	adds	r7, #8
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	20000a38 	.word	0x20000a38
 8007940:	20000e98 	.word	0x20000e98
 8007944:	20000eac 	.word	0x20000eac
 8007948:	20000ec8 	.word	0x20000ec8
 800794c:	20000edc 	.word	0x20000edc
 8007950:	20000ef4 	.word	0x20000ef4
 8007954:	20000ec0 	.word	0x20000ec0
 8007958:	20000ec4 	.word	0x20000ec4

0800795c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007962:	e019      	b.n	8007998 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007964:	f000 fece 	bl	8008704 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007968:	4b10      	ldr	r3, [pc, #64]	; (80079ac <prvCheckTasksWaitingTermination+0x50>)
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	3304      	adds	r3, #4
 8007974:	4618      	mov	r0, r3
 8007976:	f7fe fa19 	bl	8005dac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800797a:	4b0d      	ldr	r3, [pc, #52]	; (80079b0 <prvCheckTasksWaitingTermination+0x54>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	3b01      	subs	r3, #1
 8007980:	4a0b      	ldr	r2, [pc, #44]	; (80079b0 <prvCheckTasksWaitingTermination+0x54>)
 8007982:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007984:	4b0b      	ldr	r3, [pc, #44]	; (80079b4 <prvCheckTasksWaitingTermination+0x58>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	3b01      	subs	r3, #1
 800798a:	4a0a      	ldr	r2, [pc, #40]	; (80079b4 <prvCheckTasksWaitingTermination+0x58>)
 800798c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800798e:	f000 fee9 	bl	8008764 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f810 	bl	80079b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007998:	4b06      	ldr	r3, [pc, #24]	; (80079b4 <prvCheckTasksWaitingTermination+0x58>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1e1      	bne.n	8007964 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80079a0:	bf00      	nop
 80079a2:	bf00      	nop
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	20000edc 	.word	0x20000edc
 80079b0:	20000f08 	.word	0x20000f08
 80079b4:	20000ef0 	.word	0x20000ef0

080079b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d108      	bne.n	80079dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ce:	4618      	mov	r0, r3
 80079d0:	f001 f886 	bl	8008ae0 <vPortFree>
				vPortFree( pxTCB );
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f001 f883 	bl	8008ae0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80079da:	e018      	b.n	8007a0e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d103      	bne.n	80079ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f001 f87a 	bl	8008ae0 <vPortFree>
	}
 80079ec:	e00f      	b.n	8007a0e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d00a      	beq.n	8007a0e <prvDeleteTCB+0x56>
	__asm volatile
 80079f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fc:	f383 8811 	msr	BASEPRI, r3
 8007a00:	f3bf 8f6f 	isb	sy
 8007a04:	f3bf 8f4f 	dsb	sy
 8007a08:	60fb      	str	r3, [r7, #12]
}
 8007a0a:	bf00      	nop
 8007a0c:	e7fe      	b.n	8007a0c <prvDeleteTCB+0x54>
	}
 8007a0e:	bf00      	nop
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
	...

08007a18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a1e:	4b0c      	ldr	r3, [pc, #48]	; (8007a50 <prvResetNextTaskUnblockTime+0x38>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d104      	bne.n	8007a32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a28:	4b0a      	ldr	r3, [pc, #40]	; (8007a54 <prvResetNextTaskUnblockTime+0x3c>)
 8007a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007a30:	e008      	b.n	8007a44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a32:	4b07      	ldr	r3, [pc, #28]	; (8007a50 <prvResetNextTaskUnblockTime+0x38>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	4a04      	ldr	r2, [pc, #16]	; (8007a54 <prvResetNextTaskUnblockTime+0x3c>)
 8007a42:	6013      	str	r3, [r2, #0]
}
 8007a44:	bf00      	nop
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr
 8007a50:	20000ec0 	.word	0x20000ec0
 8007a54:	20000f28 	.word	0x20000f28

08007a58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007a5e:	4b0b      	ldr	r3, [pc, #44]	; (8007a8c <xTaskGetSchedulerState+0x34>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d102      	bne.n	8007a6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007a66:	2301      	movs	r3, #1
 8007a68:	607b      	str	r3, [r7, #4]
 8007a6a:	e008      	b.n	8007a7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a6c:	4b08      	ldr	r3, [pc, #32]	; (8007a90 <xTaskGetSchedulerState+0x38>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d102      	bne.n	8007a7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007a74:	2302      	movs	r3, #2
 8007a76:	607b      	str	r3, [r7, #4]
 8007a78:	e001      	b.n	8007a7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007a7e:	687b      	ldr	r3, [r7, #4]
	}
 8007a80:	4618      	mov	r0, r3
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr
 8007a8c:	20000f14 	.word	0x20000f14
 8007a90:	20000f30 	.word	0x20000f30

08007a94 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d051      	beq.n	8007b4e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aae:	4b2a      	ldr	r3, [pc, #168]	; (8007b58 <xTaskPriorityInherit+0xc4>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d241      	bcs.n	8007b3c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	db06      	blt.n	8007ace <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ac0:	4b25      	ldr	r3, [pc, #148]	; (8007b58 <xTaskPriorityInherit+0xc4>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	6959      	ldr	r1, [r3, #20]
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4413      	add	r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4a1f      	ldr	r2, [pc, #124]	; (8007b5c <xTaskPriorityInherit+0xc8>)
 8007ae0:	4413      	add	r3, r2
 8007ae2:	4299      	cmp	r1, r3
 8007ae4:	d122      	bne.n	8007b2c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	3304      	adds	r3, #4
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7fe f95e 	bl	8005dac <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007af0:	4b19      	ldr	r3, [pc, #100]	; (8007b58 <xTaskPriorityInherit+0xc4>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007afe:	4b18      	ldr	r3, [pc, #96]	; (8007b60 <xTaskPriorityInherit+0xcc>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d903      	bls.n	8007b0e <xTaskPriorityInherit+0x7a>
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0a:	4a15      	ldr	r2, [pc, #84]	; (8007b60 <xTaskPriorityInherit+0xcc>)
 8007b0c:	6013      	str	r3, [r2, #0]
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b12:	4613      	mov	r3, r2
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	4413      	add	r3, r2
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	4a10      	ldr	r2, [pc, #64]	; (8007b5c <xTaskPriorityInherit+0xc8>)
 8007b1c:	441a      	add	r2, r3
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	3304      	adds	r3, #4
 8007b22:	4619      	mov	r1, r3
 8007b24:	4610      	mov	r0, r2
 8007b26:	f7fe f8e4 	bl	8005cf2 <vListInsertEnd>
 8007b2a:	e004      	b.n	8007b36 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007b2c:	4b0a      	ldr	r3, [pc, #40]	; (8007b58 <xTaskPriorityInherit+0xc4>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007b36:	2301      	movs	r3, #1
 8007b38:	60fb      	str	r3, [r7, #12]
 8007b3a:	e008      	b.n	8007b4e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b40:	4b05      	ldr	r3, [pc, #20]	; (8007b58 <xTaskPriorityInherit+0xc4>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d201      	bcs.n	8007b4e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
	}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	20000a34 	.word	0x20000a34
 8007b5c:	20000a38 	.word	0x20000a38
 8007b60:	20000f10 	.word	0x20000f10

08007b64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b086      	sub	sp, #24
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007b70:	2300      	movs	r3, #0
 8007b72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d056      	beq.n	8007c28 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007b7a:	4b2e      	ldr	r3, [pc, #184]	; (8007c34 <xTaskPriorityDisinherit+0xd0>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	693a      	ldr	r2, [r7, #16]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d00a      	beq.n	8007b9a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b88:	f383 8811 	msr	BASEPRI, r3
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f3bf 8f4f 	dsb	sy
 8007b94:	60fb      	str	r3, [r7, #12]
}
 8007b96:	bf00      	nop
 8007b98:	e7fe      	b.n	8007b98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d10a      	bne.n	8007bb8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba6:	f383 8811 	msr	BASEPRI, r3
 8007baa:	f3bf 8f6f 	isb	sy
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	60bb      	str	r3, [r7, #8]
}
 8007bb4:	bf00      	nop
 8007bb6:	e7fe      	b.n	8007bb6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bbc:	1e5a      	subs	r2, r3, #1
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d02c      	beq.n	8007c28 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d128      	bne.n	8007c28 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	3304      	adds	r3, #4
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7fe f8e6 	bl	8005dac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf8:	4b0f      	ldr	r3, [pc, #60]	; (8007c38 <xTaskPriorityDisinherit+0xd4>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d903      	bls.n	8007c08 <xTaskPriorityDisinherit+0xa4>
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c04:	4a0c      	ldr	r2, [pc, #48]	; (8007c38 <xTaskPriorityDisinherit+0xd4>)
 8007c06:	6013      	str	r3, [r2, #0]
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4413      	add	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4a09      	ldr	r2, [pc, #36]	; (8007c3c <xTaskPriorityDisinherit+0xd8>)
 8007c16:	441a      	add	r2, r3
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	3304      	adds	r3, #4
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	4610      	mov	r0, r2
 8007c20:	f7fe f867 	bl	8005cf2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007c24:	2301      	movs	r3, #1
 8007c26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c28:	697b      	ldr	r3, [r7, #20]
	}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3718      	adds	r7, #24
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	20000a34 	.word	0x20000a34
 8007c38:	20000f10 	.word	0x20000f10
 8007c3c:	20000a38 	.word	0x20000a38

08007c40 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b088      	sub	sp, #32
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d06a      	beq.n	8007d2e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10a      	bne.n	8007c76 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c64:	f383 8811 	msr	BASEPRI, r3
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	60fb      	str	r3, [r7, #12]
}
 8007c72:	bf00      	nop
 8007c74:	e7fe      	b.n	8007c74 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c7a:	683a      	ldr	r2, [r7, #0]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d902      	bls.n	8007c86 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	61fb      	str	r3, [r7, #28]
 8007c84:	e002      	b.n	8007c8c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c8a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c90:	69fa      	ldr	r2, [r7, #28]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d04b      	beq.n	8007d2e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c9a:	697a      	ldr	r2, [r7, #20]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d146      	bne.n	8007d2e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007ca0:	4b25      	ldr	r3, [pc, #148]	; (8007d38 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	69ba      	ldr	r2, [r7, #24]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d10a      	bne.n	8007cc0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cae:	f383 8811 	msr	BASEPRI, r3
 8007cb2:	f3bf 8f6f 	isb	sy
 8007cb6:	f3bf 8f4f 	dsb	sy
 8007cba:	60bb      	str	r3, [r7, #8]
}
 8007cbc:	bf00      	nop
 8007cbe:	e7fe      	b.n	8007cbe <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	69fa      	ldr	r2, [r7, #28]
 8007cca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	699b      	ldr	r3, [r3, #24]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	db04      	blt.n	8007cde <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	6959      	ldr	r1, [r3, #20]
 8007ce2:	693a      	ldr	r2, [r7, #16]
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	4413      	add	r3, r2
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	4a13      	ldr	r2, [pc, #76]	; (8007d3c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007cee:	4413      	add	r3, r2
 8007cf0:	4299      	cmp	r1, r3
 8007cf2:	d11c      	bne.n	8007d2e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	3304      	adds	r3, #4
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7fe f857 	bl	8005dac <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d02:	4b0f      	ldr	r3, [pc, #60]	; (8007d40 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d903      	bls.n	8007d12 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0e:	4a0c      	ldr	r2, [pc, #48]	; (8007d40 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007d10:	6013      	str	r3, [r2, #0]
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d16:	4613      	mov	r3, r2
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	4413      	add	r3, r2
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	4a07      	ldr	r2, [pc, #28]	; (8007d3c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007d20:	441a      	add	r2, r3
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	3304      	adds	r3, #4
 8007d26:	4619      	mov	r1, r3
 8007d28:	4610      	mov	r0, r2
 8007d2a:	f7fd ffe2 	bl	8005cf2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d2e:	bf00      	nop
 8007d30:	3720      	adds	r7, #32
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	20000a34 	.word	0x20000a34
 8007d3c:	20000a38 	.word	0x20000a38
 8007d40:	20000f10 	.word	0x20000f10

08007d44 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007d44:	b480      	push	{r7}
 8007d46:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007d48:	4b07      	ldr	r3, [pc, #28]	; (8007d68 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d004      	beq.n	8007d5a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007d50:	4b05      	ldr	r3, [pc, #20]	; (8007d68 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d56:	3201      	adds	r2, #1
 8007d58:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007d5a:	4b03      	ldr	r3, [pc, #12]	; (8007d68 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
	}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr
 8007d68:	20000a34 	.word	0x20000a34

08007d6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d76:	4b21      	ldr	r3, [pc, #132]	; (8007dfc <prvAddCurrentTaskToDelayedList+0x90>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d7c:	4b20      	ldr	r3, [pc, #128]	; (8007e00 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	3304      	adds	r3, #4
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7fe f812 	bl	8005dac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d8e:	d10a      	bne.n	8007da6 <prvAddCurrentTaskToDelayedList+0x3a>
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d007      	beq.n	8007da6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d96:	4b1a      	ldr	r3, [pc, #104]	; (8007e00 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	3304      	adds	r3, #4
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	4819      	ldr	r0, [pc, #100]	; (8007e04 <prvAddCurrentTaskToDelayedList+0x98>)
 8007da0:	f7fd ffa7 	bl	8005cf2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007da4:	e026      	b.n	8007df4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4413      	add	r3, r2
 8007dac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007dae:	4b14      	ldr	r3, [pc, #80]	; (8007e00 <prvAddCurrentTaskToDelayedList+0x94>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	68ba      	ldr	r2, [r7, #8]
 8007db4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007db6:	68ba      	ldr	r2, [r7, #8]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d209      	bcs.n	8007dd2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dbe:	4b12      	ldr	r3, [pc, #72]	; (8007e08 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	4b0f      	ldr	r3, [pc, #60]	; (8007e00 <prvAddCurrentTaskToDelayedList+0x94>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	3304      	adds	r3, #4
 8007dc8:	4619      	mov	r1, r3
 8007dca:	4610      	mov	r0, r2
 8007dcc:	f7fd ffb5 	bl	8005d3a <vListInsert>
}
 8007dd0:	e010      	b.n	8007df4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dd2:	4b0e      	ldr	r3, [pc, #56]	; (8007e0c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	4b0a      	ldr	r3, [pc, #40]	; (8007e00 <prvAddCurrentTaskToDelayedList+0x94>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	3304      	adds	r3, #4
 8007ddc:	4619      	mov	r1, r3
 8007dde:	4610      	mov	r0, r2
 8007de0:	f7fd ffab 	bl	8005d3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007de4:	4b0a      	ldr	r3, [pc, #40]	; (8007e10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d202      	bcs.n	8007df4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007dee:	4a08      	ldr	r2, [pc, #32]	; (8007e10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	6013      	str	r3, [r2, #0]
}
 8007df4:	bf00      	nop
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	20000f0c 	.word	0x20000f0c
 8007e00:	20000a34 	.word	0x20000a34
 8007e04:	20000ef4 	.word	0x20000ef4
 8007e08:	20000ec4 	.word	0x20000ec4
 8007e0c:	20000ec0 	.word	0x20000ec0
 8007e10:	20000f28 	.word	0x20000f28

08007e14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b08a      	sub	sp, #40	; 0x28
 8007e18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007e1e:	f000 fb07 	bl	8008430 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007e22:	4b1c      	ldr	r3, [pc, #112]	; (8007e94 <xTimerCreateTimerTask+0x80>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d021      	beq.n	8007e6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007e32:	1d3a      	adds	r2, r7, #4
 8007e34:	f107 0108 	add.w	r1, r7, #8
 8007e38:	f107 030c 	add.w	r3, r7, #12
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f7fd ff11 	bl	8005c64 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007e42:	6879      	ldr	r1, [r7, #4]
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	9202      	str	r2, [sp, #8]
 8007e4a:	9301      	str	r3, [sp, #4]
 8007e4c:	2302      	movs	r3, #2
 8007e4e:	9300      	str	r3, [sp, #0]
 8007e50:	2300      	movs	r3, #0
 8007e52:	460a      	mov	r2, r1
 8007e54:	4910      	ldr	r1, [pc, #64]	; (8007e98 <xTimerCreateTimerTask+0x84>)
 8007e56:	4811      	ldr	r0, [pc, #68]	; (8007e9c <xTimerCreateTimerTask+0x88>)
 8007e58:	f7fe ffe0 	bl	8006e1c <xTaskCreateStatic>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	4a10      	ldr	r2, [pc, #64]	; (8007ea0 <xTimerCreateTimerTask+0x8c>)
 8007e60:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007e62:	4b0f      	ldr	r3, [pc, #60]	; (8007ea0 <xTimerCreateTimerTask+0x8c>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d001      	beq.n	8007e6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d10a      	bne.n	8007e8a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e78:	f383 8811 	msr	BASEPRI, r3
 8007e7c:	f3bf 8f6f 	isb	sy
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	613b      	str	r3, [r7, #16]
}
 8007e86:	bf00      	nop
 8007e88:	e7fe      	b.n	8007e88 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007e8a:	697b      	ldr	r3, [r7, #20]
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3718      	adds	r7, #24
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	20000f64 	.word	0x20000f64
 8007e98:	08009800 	.word	0x08009800
 8007e9c:	08007fd9 	.word	0x08007fd9
 8007ea0:	20000f68 	.word	0x20000f68

08007ea4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b08a      	sub	sp, #40	; 0x28
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	607a      	str	r2, [r7, #4]
 8007eb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10a      	bne.n	8007ed2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec0:	f383 8811 	msr	BASEPRI, r3
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	623b      	str	r3, [r7, #32]
}
 8007ece:	bf00      	nop
 8007ed0:	e7fe      	b.n	8007ed0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007ed2:	4b1a      	ldr	r3, [pc, #104]	; (8007f3c <xTimerGenericCommand+0x98>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d02a      	beq.n	8007f30 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	2b05      	cmp	r3, #5
 8007eea:	dc18      	bgt.n	8007f1e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007eec:	f7ff fdb4 	bl	8007a58 <xTaskGetSchedulerState>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d109      	bne.n	8007f0a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007ef6:	4b11      	ldr	r3, [pc, #68]	; (8007f3c <xTimerGenericCommand+0x98>)
 8007ef8:	6818      	ldr	r0, [r3, #0]
 8007efa:	f107 0110 	add.w	r1, r7, #16
 8007efe:	2300      	movs	r3, #0
 8007f00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f02:	f7fe f925 	bl	8006150 <xQueueGenericSend>
 8007f06:	6278      	str	r0, [r7, #36]	; 0x24
 8007f08:	e012      	b.n	8007f30 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007f0a:	4b0c      	ldr	r3, [pc, #48]	; (8007f3c <xTimerGenericCommand+0x98>)
 8007f0c:	6818      	ldr	r0, [r3, #0]
 8007f0e:	f107 0110 	add.w	r1, r7, #16
 8007f12:	2300      	movs	r3, #0
 8007f14:	2200      	movs	r2, #0
 8007f16:	f7fe f91b 	bl	8006150 <xQueueGenericSend>
 8007f1a:	6278      	str	r0, [r7, #36]	; 0x24
 8007f1c:	e008      	b.n	8007f30 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007f1e:	4b07      	ldr	r3, [pc, #28]	; (8007f3c <xTimerGenericCommand+0x98>)
 8007f20:	6818      	ldr	r0, [r3, #0]
 8007f22:	f107 0110 	add.w	r1, r7, #16
 8007f26:	2300      	movs	r3, #0
 8007f28:	683a      	ldr	r2, [r7, #0]
 8007f2a:	f7fe fa0f 	bl	800634c <xQueueGenericSendFromISR>
 8007f2e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3728      	adds	r7, #40	; 0x28
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	20000f64 	.word	0x20000f64

08007f40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b088      	sub	sp, #32
 8007f44:	af02      	add	r7, sp, #8
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f4a:	4b22      	ldr	r3, [pc, #136]	; (8007fd4 <prvProcessExpiredTimer+0x94>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	3304      	adds	r3, #4
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7fd ff27 	bl	8005dac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f64:	f003 0304 	and.w	r3, r3, #4
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d022      	beq.n	8007fb2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	699a      	ldr	r2, [r3, #24]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	18d1      	adds	r1, r2, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	683a      	ldr	r2, [r7, #0]
 8007f78:	6978      	ldr	r0, [r7, #20]
 8007f7a:	f000 f8d1 	bl	8008120 <prvInsertTimerInActiveList>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d01f      	beq.n	8007fc4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f84:	2300      	movs	r3, #0
 8007f86:	9300      	str	r3, [sp, #0]
 8007f88:	2300      	movs	r3, #0
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	2100      	movs	r1, #0
 8007f8e:	6978      	ldr	r0, [r7, #20]
 8007f90:	f7ff ff88 	bl	8007ea4 <xTimerGenericCommand>
 8007f94:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d113      	bne.n	8007fc4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa0:	f383 8811 	msr	BASEPRI, r3
 8007fa4:	f3bf 8f6f 	isb	sy
 8007fa8:	f3bf 8f4f 	dsb	sy
 8007fac:	60fb      	str	r3, [r7, #12]
}
 8007fae:	bf00      	nop
 8007fb0:	e7fe      	b.n	8007fb0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fb8:	f023 0301 	bic.w	r3, r3, #1
 8007fbc:	b2da      	uxtb	r2, r3
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	6a1b      	ldr	r3, [r3, #32]
 8007fc8:	6978      	ldr	r0, [r7, #20]
 8007fca:	4798      	blx	r3
}
 8007fcc:	bf00      	nop
 8007fce:	3718      	adds	r7, #24
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	20000f5c 	.word	0x20000f5c

08007fd8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007fe0:	f107 0308 	add.w	r3, r7, #8
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f000 f857 	bl	8008098 <prvGetNextExpireTime>
 8007fea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	4619      	mov	r1, r3
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	f000 f803 	bl	8007ffc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007ff6:	f000 f8d5 	bl	80081a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ffa:	e7f1      	b.n	8007fe0 <prvTimerTask+0x8>

08007ffc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008006:	f7ff f945 	bl	8007294 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800800a:	f107 0308 	add.w	r3, r7, #8
 800800e:	4618      	mov	r0, r3
 8008010:	f000 f866 	bl	80080e0 <prvSampleTimeNow>
 8008014:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d130      	bne.n	800807e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d10a      	bne.n	8008038 <prvProcessTimerOrBlockTask+0x3c>
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	429a      	cmp	r2, r3
 8008028:	d806      	bhi.n	8008038 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800802a:	f7ff f941 	bl	80072b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800802e:	68f9      	ldr	r1, [r7, #12]
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f7ff ff85 	bl	8007f40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008036:	e024      	b.n	8008082 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d008      	beq.n	8008050 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800803e:	4b13      	ldr	r3, [pc, #76]	; (800808c <prvProcessTimerOrBlockTask+0x90>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d101      	bne.n	800804c <prvProcessTimerOrBlockTask+0x50>
 8008048:	2301      	movs	r3, #1
 800804a:	e000      	b.n	800804e <prvProcessTimerOrBlockTask+0x52>
 800804c:	2300      	movs	r3, #0
 800804e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008050:	4b0f      	ldr	r3, [pc, #60]	; (8008090 <prvProcessTimerOrBlockTask+0x94>)
 8008052:	6818      	ldr	r0, [r3, #0]
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	1ad3      	subs	r3, r2, r3
 800805a:	683a      	ldr	r2, [r7, #0]
 800805c:	4619      	mov	r1, r3
 800805e:	f7fe fea9 	bl	8006db4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008062:	f7ff f925 	bl	80072b0 <xTaskResumeAll>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d10a      	bne.n	8008082 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800806c:	4b09      	ldr	r3, [pc, #36]	; (8008094 <prvProcessTimerOrBlockTask+0x98>)
 800806e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008072:	601a      	str	r2, [r3, #0]
 8008074:	f3bf 8f4f 	dsb	sy
 8008078:	f3bf 8f6f 	isb	sy
}
 800807c:	e001      	b.n	8008082 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800807e:	f7ff f917 	bl	80072b0 <xTaskResumeAll>
}
 8008082:	bf00      	nop
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	20000f60 	.word	0x20000f60
 8008090:	20000f64 	.word	0x20000f64
 8008094:	e000ed04 	.word	0xe000ed04

08008098 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80080a0:	4b0e      	ldr	r3, [pc, #56]	; (80080dc <prvGetNextExpireTime+0x44>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d101      	bne.n	80080ae <prvGetNextExpireTime+0x16>
 80080aa:	2201      	movs	r2, #1
 80080ac:	e000      	b.n	80080b0 <prvGetNextExpireTime+0x18>
 80080ae:	2200      	movs	r2, #0
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d105      	bne.n	80080c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080bc:	4b07      	ldr	r3, [pc, #28]	; (80080dc <prvGetNextExpireTime+0x44>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	60fb      	str	r3, [r7, #12]
 80080c6:	e001      	b.n	80080cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80080c8:	2300      	movs	r3, #0
 80080ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80080cc:	68fb      	ldr	r3, [r7, #12]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3714      	adds	r7, #20
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	20000f5c 	.word	0x20000f5c

080080e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80080e8:	f7ff f980 	bl	80073ec <xTaskGetTickCount>
 80080ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80080ee:	4b0b      	ldr	r3, [pc, #44]	; (800811c <prvSampleTimeNow+0x3c>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d205      	bcs.n	8008104 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80080f8:	f000 f936 	bl	8008368 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	601a      	str	r2, [r3, #0]
 8008102:	e002      	b.n	800810a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800810a:	4a04      	ldr	r2, [pc, #16]	; (800811c <prvSampleTimeNow+0x3c>)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008110:	68fb      	ldr	r3, [r7, #12]
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	20000f6c 	.word	0x20000f6c

08008120 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	607a      	str	r2, [r7, #4]
 800812c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800812e:	2300      	movs	r3, #0
 8008130:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	68ba      	ldr	r2, [r7, #8]
 8008136:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	429a      	cmp	r2, r3
 8008144:	d812      	bhi.n	800816c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	1ad2      	subs	r2, r2, r3
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	699b      	ldr	r3, [r3, #24]
 8008150:	429a      	cmp	r2, r3
 8008152:	d302      	bcc.n	800815a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008154:	2301      	movs	r3, #1
 8008156:	617b      	str	r3, [r7, #20]
 8008158:	e01b      	b.n	8008192 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800815a:	4b10      	ldr	r3, [pc, #64]	; (800819c <prvInsertTimerInActiveList+0x7c>)
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	3304      	adds	r3, #4
 8008162:	4619      	mov	r1, r3
 8008164:	4610      	mov	r0, r2
 8008166:	f7fd fde8 	bl	8005d3a <vListInsert>
 800816a:	e012      	b.n	8008192 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	429a      	cmp	r2, r3
 8008172:	d206      	bcs.n	8008182 <prvInsertTimerInActiveList+0x62>
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	429a      	cmp	r2, r3
 800817a:	d302      	bcc.n	8008182 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800817c:	2301      	movs	r3, #1
 800817e:	617b      	str	r3, [r7, #20]
 8008180:	e007      	b.n	8008192 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008182:	4b07      	ldr	r3, [pc, #28]	; (80081a0 <prvInsertTimerInActiveList+0x80>)
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	3304      	adds	r3, #4
 800818a:	4619      	mov	r1, r3
 800818c:	4610      	mov	r0, r2
 800818e:	f7fd fdd4 	bl	8005d3a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008192:	697b      	ldr	r3, [r7, #20]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3718      	adds	r7, #24
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}
 800819c:	20000f60 	.word	0x20000f60
 80081a0:	20000f5c 	.word	0x20000f5c

080081a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b08e      	sub	sp, #56	; 0x38
 80081a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80081aa:	e0ca      	b.n	8008342 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	da18      	bge.n	80081e4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80081b2:	1d3b      	adds	r3, r7, #4
 80081b4:	3304      	adds	r3, #4
 80081b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80081b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d10a      	bne.n	80081d4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80081be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c2:	f383 8811 	msr	BASEPRI, r3
 80081c6:	f3bf 8f6f 	isb	sy
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	61fb      	str	r3, [r7, #28]
}
 80081d0:	bf00      	nop
 80081d2:	e7fe      	b.n	80081d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80081d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081da:	6850      	ldr	r0, [r2, #4]
 80081dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081de:	6892      	ldr	r2, [r2, #8]
 80081e0:	4611      	mov	r1, r2
 80081e2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f2c0 80aa 	blt.w	8008340 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80081f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f2:	695b      	ldr	r3, [r3, #20]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d004      	beq.n	8008202 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fa:	3304      	adds	r3, #4
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7fd fdd5 	bl	8005dac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008202:	463b      	mov	r3, r7
 8008204:	4618      	mov	r0, r3
 8008206:	f7ff ff6b 	bl	80080e0 <prvSampleTimeNow>
 800820a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2b09      	cmp	r3, #9
 8008210:	f200 8097 	bhi.w	8008342 <prvProcessReceivedCommands+0x19e>
 8008214:	a201      	add	r2, pc, #4	; (adr r2, 800821c <prvProcessReceivedCommands+0x78>)
 8008216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821a:	bf00      	nop
 800821c:	08008245 	.word	0x08008245
 8008220:	08008245 	.word	0x08008245
 8008224:	08008245 	.word	0x08008245
 8008228:	080082b9 	.word	0x080082b9
 800822c:	080082cd 	.word	0x080082cd
 8008230:	08008317 	.word	0x08008317
 8008234:	08008245 	.word	0x08008245
 8008238:	08008245 	.word	0x08008245
 800823c:	080082b9 	.word	0x080082b9
 8008240:	080082cd 	.word	0x080082cd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008246:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800824a:	f043 0301 	orr.w	r3, r3, #1
 800824e:	b2da      	uxtb	r2, r3
 8008250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008252:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008256:	68ba      	ldr	r2, [r7, #8]
 8008258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	18d1      	adds	r1, r2, r3
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008264:	f7ff ff5c 	bl	8008120 <prvInsertTimerInActiveList>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d069      	beq.n	8008342 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800826e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008270:	6a1b      	ldr	r3, [r3, #32]
 8008272:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008274:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008278:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800827c:	f003 0304 	and.w	r3, r3, #4
 8008280:	2b00      	cmp	r3, #0
 8008282:	d05e      	beq.n	8008342 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008284:	68ba      	ldr	r2, [r7, #8]
 8008286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	441a      	add	r2, r3
 800828c:	2300      	movs	r3, #0
 800828e:	9300      	str	r3, [sp, #0]
 8008290:	2300      	movs	r3, #0
 8008292:	2100      	movs	r1, #0
 8008294:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008296:	f7ff fe05 	bl	8007ea4 <xTimerGenericCommand>
 800829a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800829c:	6a3b      	ldr	r3, [r7, #32]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d14f      	bne.n	8008342 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80082a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a6:	f383 8811 	msr	BASEPRI, r3
 80082aa:	f3bf 8f6f 	isb	sy
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	61bb      	str	r3, [r7, #24]
}
 80082b4:	bf00      	nop
 80082b6:	e7fe      	b.n	80082b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082be:	f023 0301 	bic.w	r3, r3, #1
 80082c2:	b2da      	uxtb	r2, r3
 80082c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80082ca:	e03a      	b.n	8008342 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80082cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082d2:	f043 0301 	orr.w	r3, r3, #1
 80082d6:	b2da      	uxtb	r2, r3
 80082d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80082de:	68ba      	ldr	r2, [r7, #8]
 80082e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80082e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e6:	699b      	ldr	r3, [r3, #24]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d10a      	bne.n	8008302 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80082ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f0:	f383 8811 	msr	BASEPRI, r3
 80082f4:	f3bf 8f6f 	isb	sy
 80082f8:	f3bf 8f4f 	dsb	sy
 80082fc:	617b      	str	r3, [r7, #20]
}
 80082fe:	bf00      	nop
 8008300:	e7fe      	b.n	8008300 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008304:	699a      	ldr	r2, [r3, #24]
 8008306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008308:	18d1      	adds	r1, r2, r3
 800830a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800830e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008310:	f7ff ff06 	bl	8008120 <prvInsertTimerInActiveList>
					break;
 8008314:	e015      	b.n	8008342 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008318:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800831c:	f003 0302 	and.w	r3, r3, #2
 8008320:	2b00      	cmp	r3, #0
 8008322:	d103      	bne.n	800832c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008324:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008326:	f000 fbdb 	bl	8008ae0 <vPortFree>
 800832a:	e00a      	b.n	8008342 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800832c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008332:	f023 0301 	bic.w	r3, r3, #1
 8008336:	b2da      	uxtb	r2, r3
 8008338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800833e:	e000      	b.n	8008342 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008340:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008342:	4b08      	ldr	r3, [pc, #32]	; (8008364 <prvProcessReceivedCommands+0x1c0>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	1d39      	adds	r1, r7, #4
 8008348:	2200      	movs	r2, #0
 800834a:	4618      	mov	r0, r3
 800834c:	f7fe f926 	bl	800659c <xQueueReceive>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	f47f af2a 	bne.w	80081ac <prvProcessReceivedCommands+0x8>
	}
}
 8008358:	bf00      	nop
 800835a:	bf00      	nop
 800835c:	3730      	adds	r7, #48	; 0x30
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	20000f64 	.word	0x20000f64

08008368 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b088      	sub	sp, #32
 800836c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800836e:	e048      	b.n	8008402 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008370:	4b2d      	ldr	r3, [pc, #180]	; (8008428 <prvSwitchTimerLists+0xc0>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800837a:	4b2b      	ldr	r3, [pc, #172]	; (8008428 <prvSwitchTimerLists+0xc0>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	3304      	adds	r3, #4
 8008388:	4618      	mov	r0, r3
 800838a:	f7fd fd0f 	bl	8005dac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6a1b      	ldr	r3, [r3, #32]
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800839c:	f003 0304 	and.w	r3, r3, #4
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d02e      	beq.n	8008402 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	699b      	ldr	r3, [r3, #24]
 80083a8:	693a      	ldr	r2, [r7, #16]
 80083aa:	4413      	add	r3, r2
 80083ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d90e      	bls.n	80083d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	68ba      	ldr	r2, [r7, #8]
 80083ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80083c2:	4b19      	ldr	r3, [pc, #100]	; (8008428 <prvSwitchTimerLists+0xc0>)
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	3304      	adds	r3, #4
 80083ca:	4619      	mov	r1, r3
 80083cc:	4610      	mov	r0, r2
 80083ce:	f7fd fcb4 	bl	8005d3a <vListInsert>
 80083d2:	e016      	b.n	8008402 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80083d4:	2300      	movs	r3, #0
 80083d6:	9300      	str	r3, [sp, #0]
 80083d8:	2300      	movs	r3, #0
 80083da:	693a      	ldr	r2, [r7, #16]
 80083dc:	2100      	movs	r1, #0
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	f7ff fd60 	bl	8007ea4 <xTimerGenericCommand>
 80083e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d10a      	bne.n	8008402 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80083ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f0:	f383 8811 	msr	BASEPRI, r3
 80083f4:	f3bf 8f6f 	isb	sy
 80083f8:	f3bf 8f4f 	dsb	sy
 80083fc:	603b      	str	r3, [r7, #0]
}
 80083fe:	bf00      	nop
 8008400:	e7fe      	b.n	8008400 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008402:	4b09      	ldr	r3, [pc, #36]	; (8008428 <prvSwitchTimerLists+0xc0>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d1b1      	bne.n	8008370 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800840c:	4b06      	ldr	r3, [pc, #24]	; (8008428 <prvSwitchTimerLists+0xc0>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008412:	4b06      	ldr	r3, [pc, #24]	; (800842c <prvSwitchTimerLists+0xc4>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a04      	ldr	r2, [pc, #16]	; (8008428 <prvSwitchTimerLists+0xc0>)
 8008418:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800841a:	4a04      	ldr	r2, [pc, #16]	; (800842c <prvSwitchTimerLists+0xc4>)
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	6013      	str	r3, [r2, #0]
}
 8008420:	bf00      	nop
 8008422:	3718      	adds	r7, #24
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}
 8008428:	20000f5c 	.word	0x20000f5c
 800842c:	20000f60 	.word	0x20000f60

08008430 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008436:	f000 f965 	bl	8008704 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800843a:	4b15      	ldr	r3, [pc, #84]	; (8008490 <prvCheckForValidListAndQueue+0x60>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d120      	bne.n	8008484 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008442:	4814      	ldr	r0, [pc, #80]	; (8008494 <prvCheckForValidListAndQueue+0x64>)
 8008444:	f7fd fc28 	bl	8005c98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008448:	4813      	ldr	r0, [pc, #76]	; (8008498 <prvCheckForValidListAndQueue+0x68>)
 800844a:	f7fd fc25 	bl	8005c98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800844e:	4b13      	ldr	r3, [pc, #76]	; (800849c <prvCheckForValidListAndQueue+0x6c>)
 8008450:	4a10      	ldr	r2, [pc, #64]	; (8008494 <prvCheckForValidListAndQueue+0x64>)
 8008452:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008454:	4b12      	ldr	r3, [pc, #72]	; (80084a0 <prvCheckForValidListAndQueue+0x70>)
 8008456:	4a10      	ldr	r2, [pc, #64]	; (8008498 <prvCheckForValidListAndQueue+0x68>)
 8008458:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800845a:	2300      	movs	r3, #0
 800845c:	9300      	str	r3, [sp, #0]
 800845e:	4b11      	ldr	r3, [pc, #68]	; (80084a4 <prvCheckForValidListAndQueue+0x74>)
 8008460:	4a11      	ldr	r2, [pc, #68]	; (80084a8 <prvCheckForValidListAndQueue+0x78>)
 8008462:	2110      	movs	r1, #16
 8008464:	200a      	movs	r0, #10
 8008466:	f7fd fd33 	bl	8005ed0 <xQueueGenericCreateStatic>
 800846a:	4603      	mov	r3, r0
 800846c:	4a08      	ldr	r2, [pc, #32]	; (8008490 <prvCheckForValidListAndQueue+0x60>)
 800846e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008470:	4b07      	ldr	r3, [pc, #28]	; (8008490 <prvCheckForValidListAndQueue+0x60>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d005      	beq.n	8008484 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008478:	4b05      	ldr	r3, [pc, #20]	; (8008490 <prvCheckForValidListAndQueue+0x60>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	490b      	ldr	r1, [pc, #44]	; (80084ac <prvCheckForValidListAndQueue+0x7c>)
 800847e:	4618      	mov	r0, r3
 8008480:	f7fe fc44 	bl	8006d0c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008484:	f000 f96e 	bl	8008764 <vPortExitCritical>
}
 8008488:	bf00      	nop
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	20000f64 	.word	0x20000f64
 8008494:	20000f34 	.word	0x20000f34
 8008498:	20000f48 	.word	0x20000f48
 800849c:	20000f5c 	.word	0x20000f5c
 80084a0:	20000f60 	.word	0x20000f60
 80084a4:	20001010 	.word	0x20001010
 80084a8:	20000f70 	.word	0x20000f70
 80084ac:	08009808 	.word	0x08009808

080084b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80084b0:	b480      	push	{r7}
 80084b2:	b085      	sub	sp, #20
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	3b04      	subs	r3, #4
 80084c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80084c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	3b04      	subs	r3, #4
 80084ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	f023 0201 	bic.w	r2, r3, #1
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	3b04      	subs	r3, #4
 80084de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80084e0:	4a0c      	ldr	r2, [pc, #48]	; (8008514 <pxPortInitialiseStack+0x64>)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	3b14      	subs	r3, #20
 80084ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	3b04      	subs	r3, #4
 80084f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f06f 0202 	mvn.w	r2, #2
 80084fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	3b20      	subs	r3, #32
 8008504:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008506:	68fb      	ldr	r3, [r7, #12]
}
 8008508:	4618      	mov	r0, r3
 800850a:	3714      	adds	r7, #20
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr
 8008514:	08008519 	.word	0x08008519

08008518 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800851e:	2300      	movs	r3, #0
 8008520:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008522:	4b12      	ldr	r3, [pc, #72]	; (800856c <prvTaskExitError+0x54>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800852a:	d00a      	beq.n	8008542 <prvTaskExitError+0x2a>
	__asm volatile
 800852c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008530:	f383 8811 	msr	BASEPRI, r3
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	60fb      	str	r3, [r7, #12]
}
 800853e:	bf00      	nop
 8008540:	e7fe      	b.n	8008540 <prvTaskExitError+0x28>
	__asm volatile
 8008542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008546:	f383 8811 	msr	BASEPRI, r3
 800854a:	f3bf 8f6f 	isb	sy
 800854e:	f3bf 8f4f 	dsb	sy
 8008552:	60bb      	str	r3, [r7, #8]
}
 8008554:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008556:	bf00      	nop
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d0fc      	beq.n	8008558 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800855e:	bf00      	nop
 8008560:	bf00      	nop
 8008562:	3714      	adds	r7, #20
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr
 800856c:	2000000c 	.word	0x2000000c

08008570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008570:	4b07      	ldr	r3, [pc, #28]	; (8008590 <pxCurrentTCBConst2>)
 8008572:	6819      	ldr	r1, [r3, #0]
 8008574:	6808      	ldr	r0, [r1, #0]
 8008576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800857a:	f380 8809 	msr	PSP, r0
 800857e:	f3bf 8f6f 	isb	sy
 8008582:	f04f 0000 	mov.w	r0, #0
 8008586:	f380 8811 	msr	BASEPRI, r0
 800858a:	4770      	bx	lr
 800858c:	f3af 8000 	nop.w

08008590 <pxCurrentTCBConst2>:
 8008590:	20000a34 	.word	0x20000a34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008594:	bf00      	nop
 8008596:	bf00      	nop

08008598 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008598:	4808      	ldr	r0, [pc, #32]	; (80085bc <prvPortStartFirstTask+0x24>)
 800859a:	6800      	ldr	r0, [r0, #0]
 800859c:	6800      	ldr	r0, [r0, #0]
 800859e:	f380 8808 	msr	MSP, r0
 80085a2:	f04f 0000 	mov.w	r0, #0
 80085a6:	f380 8814 	msr	CONTROL, r0
 80085aa:	b662      	cpsie	i
 80085ac:	b661      	cpsie	f
 80085ae:	f3bf 8f4f 	dsb	sy
 80085b2:	f3bf 8f6f 	isb	sy
 80085b6:	df00      	svc	0
 80085b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80085ba:	bf00      	nop
 80085bc:	e000ed08 	.word	0xe000ed08

080085c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80085c6:	4b46      	ldr	r3, [pc, #280]	; (80086e0 <xPortStartScheduler+0x120>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a46      	ldr	r2, [pc, #280]	; (80086e4 <xPortStartScheduler+0x124>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d10a      	bne.n	80085e6 <xPortStartScheduler+0x26>
	__asm volatile
 80085d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d4:	f383 8811 	msr	BASEPRI, r3
 80085d8:	f3bf 8f6f 	isb	sy
 80085dc:	f3bf 8f4f 	dsb	sy
 80085e0:	613b      	str	r3, [r7, #16]
}
 80085e2:	bf00      	nop
 80085e4:	e7fe      	b.n	80085e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80085e6:	4b3e      	ldr	r3, [pc, #248]	; (80086e0 <xPortStartScheduler+0x120>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a3f      	ldr	r2, [pc, #252]	; (80086e8 <xPortStartScheduler+0x128>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d10a      	bne.n	8008606 <xPortStartScheduler+0x46>
	__asm volatile
 80085f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f4:	f383 8811 	msr	BASEPRI, r3
 80085f8:	f3bf 8f6f 	isb	sy
 80085fc:	f3bf 8f4f 	dsb	sy
 8008600:	60fb      	str	r3, [r7, #12]
}
 8008602:	bf00      	nop
 8008604:	e7fe      	b.n	8008604 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008606:	4b39      	ldr	r3, [pc, #228]	; (80086ec <xPortStartScheduler+0x12c>)
 8008608:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	b2db      	uxtb	r3, r3
 8008610:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	22ff      	movs	r2, #255	; 0xff
 8008616:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	b2db      	uxtb	r3, r3
 800861e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008620:	78fb      	ldrb	r3, [r7, #3]
 8008622:	b2db      	uxtb	r3, r3
 8008624:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008628:	b2da      	uxtb	r2, r3
 800862a:	4b31      	ldr	r3, [pc, #196]	; (80086f0 <xPortStartScheduler+0x130>)
 800862c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800862e:	4b31      	ldr	r3, [pc, #196]	; (80086f4 <xPortStartScheduler+0x134>)
 8008630:	2207      	movs	r2, #7
 8008632:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008634:	e009      	b.n	800864a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008636:	4b2f      	ldr	r3, [pc, #188]	; (80086f4 <xPortStartScheduler+0x134>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	3b01      	subs	r3, #1
 800863c:	4a2d      	ldr	r2, [pc, #180]	; (80086f4 <xPortStartScheduler+0x134>)
 800863e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008640:	78fb      	ldrb	r3, [r7, #3]
 8008642:	b2db      	uxtb	r3, r3
 8008644:	005b      	lsls	r3, r3, #1
 8008646:	b2db      	uxtb	r3, r3
 8008648:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800864a:	78fb      	ldrb	r3, [r7, #3]
 800864c:	b2db      	uxtb	r3, r3
 800864e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008652:	2b80      	cmp	r3, #128	; 0x80
 8008654:	d0ef      	beq.n	8008636 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008656:	4b27      	ldr	r3, [pc, #156]	; (80086f4 <xPortStartScheduler+0x134>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f1c3 0307 	rsb	r3, r3, #7
 800865e:	2b04      	cmp	r3, #4
 8008660:	d00a      	beq.n	8008678 <xPortStartScheduler+0xb8>
	__asm volatile
 8008662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008666:	f383 8811 	msr	BASEPRI, r3
 800866a:	f3bf 8f6f 	isb	sy
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	60bb      	str	r3, [r7, #8]
}
 8008674:	bf00      	nop
 8008676:	e7fe      	b.n	8008676 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008678:	4b1e      	ldr	r3, [pc, #120]	; (80086f4 <xPortStartScheduler+0x134>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	021b      	lsls	r3, r3, #8
 800867e:	4a1d      	ldr	r2, [pc, #116]	; (80086f4 <xPortStartScheduler+0x134>)
 8008680:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008682:	4b1c      	ldr	r3, [pc, #112]	; (80086f4 <xPortStartScheduler+0x134>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800868a:	4a1a      	ldr	r2, [pc, #104]	; (80086f4 <xPortStartScheduler+0x134>)
 800868c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	b2da      	uxtb	r2, r3
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008696:	4b18      	ldr	r3, [pc, #96]	; (80086f8 <xPortStartScheduler+0x138>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a17      	ldr	r2, [pc, #92]	; (80086f8 <xPortStartScheduler+0x138>)
 800869c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80086a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80086a2:	4b15      	ldr	r3, [pc, #84]	; (80086f8 <xPortStartScheduler+0x138>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a14      	ldr	r2, [pc, #80]	; (80086f8 <xPortStartScheduler+0x138>)
 80086a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80086ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80086ae:	f000 f8dd 	bl	800886c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80086b2:	4b12      	ldr	r3, [pc, #72]	; (80086fc <xPortStartScheduler+0x13c>)
 80086b4:	2200      	movs	r2, #0
 80086b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80086b8:	f000 f8fc 	bl	80088b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80086bc:	4b10      	ldr	r3, [pc, #64]	; (8008700 <xPortStartScheduler+0x140>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a0f      	ldr	r2, [pc, #60]	; (8008700 <xPortStartScheduler+0x140>)
 80086c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80086c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80086c8:	f7ff ff66 	bl	8008598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80086cc:	f7fe ff58 	bl	8007580 <vTaskSwitchContext>
	prvTaskExitError();
 80086d0:	f7ff ff22 	bl	8008518 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3718      	adds	r7, #24
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	e000ed00 	.word	0xe000ed00
 80086e4:	410fc271 	.word	0x410fc271
 80086e8:	410fc270 	.word	0x410fc270
 80086ec:	e000e400 	.word	0xe000e400
 80086f0:	20001060 	.word	0x20001060
 80086f4:	20001064 	.word	0x20001064
 80086f8:	e000ed20 	.word	0xe000ed20
 80086fc:	2000000c 	.word	0x2000000c
 8008700:	e000ef34 	.word	0xe000ef34

08008704 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
	__asm volatile
 800870a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870e:	f383 8811 	msr	BASEPRI, r3
 8008712:	f3bf 8f6f 	isb	sy
 8008716:	f3bf 8f4f 	dsb	sy
 800871a:	607b      	str	r3, [r7, #4]
}
 800871c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800871e:	4b0f      	ldr	r3, [pc, #60]	; (800875c <vPortEnterCritical+0x58>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	3301      	adds	r3, #1
 8008724:	4a0d      	ldr	r2, [pc, #52]	; (800875c <vPortEnterCritical+0x58>)
 8008726:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008728:	4b0c      	ldr	r3, [pc, #48]	; (800875c <vPortEnterCritical+0x58>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d10f      	bne.n	8008750 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008730:	4b0b      	ldr	r3, [pc, #44]	; (8008760 <vPortEnterCritical+0x5c>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	b2db      	uxtb	r3, r3
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00a      	beq.n	8008750 <vPortEnterCritical+0x4c>
	__asm volatile
 800873a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873e:	f383 8811 	msr	BASEPRI, r3
 8008742:	f3bf 8f6f 	isb	sy
 8008746:	f3bf 8f4f 	dsb	sy
 800874a:	603b      	str	r3, [r7, #0]
}
 800874c:	bf00      	nop
 800874e:	e7fe      	b.n	800874e <vPortEnterCritical+0x4a>
	}
}
 8008750:	bf00      	nop
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr
 800875c:	2000000c 	.word	0x2000000c
 8008760:	e000ed04 	.word	0xe000ed04

08008764 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800876a:	4b12      	ldr	r3, [pc, #72]	; (80087b4 <vPortExitCritical+0x50>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d10a      	bne.n	8008788 <vPortExitCritical+0x24>
	__asm volatile
 8008772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008776:	f383 8811 	msr	BASEPRI, r3
 800877a:	f3bf 8f6f 	isb	sy
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	607b      	str	r3, [r7, #4]
}
 8008784:	bf00      	nop
 8008786:	e7fe      	b.n	8008786 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008788:	4b0a      	ldr	r3, [pc, #40]	; (80087b4 <vPortExitCritical+0x50>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	3b01      	subs	r3, #1
 800878e:	4a09      	ldr	r2, [pc, #36]	; (80087b4 <vPortExitCritical+0x50>)
 8008790:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008792:	4b08      	ldr	r3, [pc, #32]	; (80087b4 <vPortExitCritical+0x50>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d105      	bne.n	80087a6 <vPortExitCritical+0x42>
 800879a:	2300      	movs	r3, #0
 800879c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	f383 8811 	msr	BASEPRI, r3
}
 80087a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80087a6:	bf00      	nop
 80087a8:	370c      	adds	r7, #12
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	2000000c 	.word	0x2000000c
	...

080087c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80087c0:	f3ef 8009 	mrs	r0, PSP
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	4b15      	ldr	r3, [pc, #84]	; (8008820 <pxCurrentTCBConst>)
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	f01e 0f10 	tst.w	lr, #16
 80087d0:	bf08      	it	eq
 80087d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80087d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087da:	6010      	str	r0, [r2, #0]
 80087dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80087e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80087e4:	f380 8811 	msr	BASEPRI, r0
 80087e8:	f3bf 8f4f 	dsb	sy
 80087ec:	f3bf 8f6f 	isb	sy
 80087f0:	f7fe fec6 	bl	8007580 <vTaskSwitchContext>
 80087f4:	f04f 0000 	mov.w	r0, #0
 80087f8:	f380 8811 	msr	BASEPRI, r0
 80087fc:	bc09      	pop	{r0, r3}
 80087fe:	6819      	ldr	r1, [r3, #0]
 8008800:	6808      	ldr	r0, [r1, #0]
 8008802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008806:	f01e 0f10 	tst.w	lr, #16
 800880a:	bf08      	it	eq
 800880c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008810:	f380 8809 	msr	PSP, r0
 8008814:	f3bf 8f6f 	isb	sy
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop
 800881c:	f3af 8000 	nop.w

08008820 <pxCurrentTCBConst>:
 8008820:	20000a34 	.word	0x20000a34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008824:	bf00      	nop
 8008826:	bf00      	nop

08008828 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
	__asm volatile
 800882e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008832:	f383 8811 	msr	BASEPRI, r3
 8008836:	f3bf 8f6f 	isb	sy
 800883a:	f3bf 8f4f 	dsb	sy
 800883e:	607b      	str	r3, [r7, #4]
}
 8008840:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008842:	f7fe fde3 	bl	800740c <xTaskIncrementTick>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d003      	beq.n	8008854 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800884c:	4b06      	ldr	r3, [pc, #24]	; (8008868 <xPortSysTickHandler+0x40>)
 800884e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008852:	601a      	str	r2, [r3, #0]
 8008854:	2300      	movs	r3, #0
 8008856:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	f383 8811 	msr	BASEPRI, r3
}
 800885e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008860:	bf00      	nop
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	e000ed04 	.word	0xe000ed04

0800886c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800886c:	b480      	push	{r7}
 800886e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008870:	4b0b      	ldr	r3, [pc, #44]	; (80088a0 <vPortSetupTimerInterrupt+0x34>)
 8008872:	2200      	movs	r2, #0
 8008874:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008876:	4b0b      	ldr	r3, [pc, #44]	; (80088a4 <vPortSetupTimerInterrupt+0x38>)
 8008878:	2200      	movs	r2, #0
 800887a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800887c:	4b0a      	ldr	r3, [pc, #40]	; (80088a8 <vPortSetupTimerInterrupt+0x3c>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a0a      	ldr	r2, [pc, #40]	; (80088ac <vPortSetupTimerInterrupt+0x40>)
 8008882:	fba2 2303 	umull	r2, r3, r2, r3
 8008886:	099b      	lsrs	r3, r3, #6
 8008888:	4a09      	ldr	r2, [pc, #36]	; (80088b0 <vPortSetupTimerInterrupt+0x44>)
 800888a:	3b01      	subs	r3, #1
 800888c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800888e:	4b04      	ldr	r3, [pc, #16]	; (80088a0 <vPortSetupTimerInterrupt+0x34>)
 8008890:	2207      	movs	r2, #7
 8008892:	601a      	str	r2, [r3, #0]
}
 8008894:	bf00      	nop
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	e000e010 	.word	0xe000e010
 80088a4:	e000e018 	.word	0xe000e018
 80088a8:	20000000 	.word	0x20000000
 80088ac:	10624dd3 	.word	0x10624dd3
 80088b0:	e000e014 	.word	0xe000e014

080088b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80088b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80088c4 <vPortEnableVFP+0x10>
 80088b8:	6801      	ldr	r1, [r0, #0]
 80088ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80088be:	6001      	str	r1, [r0, #0]
 80088c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80088c2:	bf00      	nop
 80088c4:	e000ed88 	.word	0xe000ed88

080088c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80088c8:	b480      	push	{r7}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80088ce:	f3ef 8305 	mrs	r3, IPSR
 80088d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2b0f      	cmp	r3, #15
 80088d8:	d914      	bls.n	8008904 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80088da:	4a17      	ldr	r2, [pc, #92]	; (8008938 <vPortValidateInterruptPriority+0x70>)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	4413      	add	r3, r2
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80088e4:	4b15      	ldr	r3, [pc, #84]	; (800893c <vPortValidateInterruptPriority+0x74>)
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	7afa      	ldrb	r2, [r7, #11]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d20a      	bcs.n	8008904 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80088ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f2:	f383 8811 	msr	BASEPRI, r3
 80088f6:	f3bf 8f6f 	isb	sy
 80088fa:	f3bf 8f4f 	dsb	sy
 80088fe:	607b      	str	r3, [r7, #4]
}
 8008900:	bf00      	nop
 8008902:	e7fe      	b.n	8008902 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008904:	4b0e      	ldr	r3, [pc, #56]	; (8008940 <vPortValidateInterruptPriority+0x78>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800890c:	4b0d      	ldr	r3, [pc, #52]	; (8008944 <vPortValidateInterruptPriority+0x7c>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	429a      	cmp	r2, r3
 8008912:	d90a      	bls.n	800892a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008918:	f383 8811 	msr	BASEPRI, r3
 800891c:	f3bf 8f6f 	isb	sy
 8008920:	f3bf 8f4f 	dsb	sy
 8008924:	603b      	str	r3, [r7, #0]
}
 8008926:	bf00      	nop
 8008928:	e7fe      	b.n	8008928 <vPortValidateInterruptPriority+0x60>
	}
 800892a:	bf00      	nop
 800892c:	3714      	adds	r7, #20
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	e000e3f0 	.word	0xe000e3f0
 800893c:	20001060 	.word	0x20001060
 8008940:	e000ed0c 	.word	0xe000ed0c
 8008944:	20001064 	.word	0x20001064

08008948 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b08a      	sub	sp, #40	; 0x28
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008950:	2300      	movs	r3, #0
 8008952:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008954:	f7fe fc9e 	bl	8007294 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008958:	4b5b      	ldr	r3, [pc, #364]	; (8008ac8 <pvPortMalloc+0x180>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d101      	bne.n	8008964 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008960:	f000 f920 	bl	8008ba4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008964:	4b59      	ldr	r3, [pc, #356]	; (8008acc <pvPortMalloc+0x184>)
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4013      	ands	r3, r2
 800896c:	2b00      	cmp	r3, #0
 800896e:	f040 8093 	bne.w	8008a98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d01d      	beq.n	80089b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008978:	2208      	movs	r2, #8
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4413      	add	r3, r2
 800897e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f003 0307 	and.w	r3, r3, #7
 8008986:	2b00      	cmp	r3, #0
 8008988:	d014      	beq.n	80089b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f023 0307 	bic.w	r3, r3, #7
 8008990:	3308      	adds	r3, #8
 8008992:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f003 0307 	and.w	r3, r3, #7
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00a      	beq.n	80089b4 <pvPortMalloc+0x6c>
	__asm volatile
 800899e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	617b      	str	r3, [r7, #20]
}
 80089b0:	bf00      	nop
 80089b2:	e7fe      	b.n	80089b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d06e      	beq.n	8008a98 <pvPortMalloc+0x150>
 80089ba:	4b45      	ldr	r3, [pc, #276]	; (8008ad0 <pvPortMalloc+0x188>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d869      	bhi.n	8008a98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80089c4:	4b43      	ldr	r3, [pc, #268]	; (8008ad4 <pvPortMalloc+0x18c>)
 80089c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80089c8:	4b42      	ldr	r3, [pc, #264]	; (8008ad4 <pvPortMalloc+0x18c>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089ce:	e004      	b.n	80089da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80089d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80089d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d903      	bls.n	80089ec <pvPortMalloc+0xa4>
 80089e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d1f1      	bne.n	80089d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80089ec:	4b36      	ldr	r3, [pc, #216]	; (8008ac8 <pvPortMalloc+0x180>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d050      	beq.n	8008a98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089f6:	6a3b      	ldr	r3, [r7, #32]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2208      	movs	r2, #8
 80089fc:	4413      	add	r3, r2
 80089fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	6a3b      	ldr	r3, [r7, #32]
 8008a06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0a:	685a      	ldr	r2, [r3, #4]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	1ad2      	subs	r2, r2, r3
 8008a10:	2308      	movs	r3, #8
 8008a12:	005b      	lsls	r3, r3, #1
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d91f      	bls.n	8008a58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	f003 0307 	and.w	r3, r3, #7
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00a      	beq.n	8008a40 <pvPortMalloc+0xf8>
	__asm volatile
 8008a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2e:	f383 8811 	msr	BASEPRI, r3
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	613b      	str	r3, [r7, #16]
}
 8008a3c:	bf00      	nop
 8008a3e:	e7fe      	b.n	8008a3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a42:	685a      	ldr	r2, [r3, #4]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	1ad2      	subs	r2, r2, r3
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a52:	69b8      	ldr	r0, [r7, #24]
 8008a54:	f000 f908 	bl	8008c68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a58:	4b1d      	ldr	r3, [pc, #116]	; (8008ad0 <pvPortMalloc+0x188>)
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	1ad3      	subs	r3, r2, r3
 8008a62:	4a1b      	ldr	r2, [pc, #108]	; (8008ad0 <pvPortMalloc+0x188>)
 8008a64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a66:	4b1a      	ldr	r3, [pc, #104]	; (8008ad0 <pvPortMalloc+0x188>)
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	4b1b      	ldr	r3, [pc, #108]	; (8008ad8 <pvPortMalloc+0x190>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d203      	bcs.n	8008a7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a72:	4b17      	ldr	r3, [pc, #92]	; (8008ad0 <pvPortMalloc+0x188>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a18      	ldr	r2, [pc, #96]	; (8008ad8 <pvPortMalloc+0x190>)
 8008a78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7c:	685a      	ldr	r2, [r3, #4]
 8008a7e:	4b13      	ldr	r3, [pc, #76]	; (8008acc <pvPortMalloc+0x184>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	431a      	orrs	r2, r3
 8008a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008a8e:	4b13      	ldr	r3, [pc, #76]	; (8008adc <pvPortMalloc+0x194>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	3301      	adds	r3, #1
 8008a94:	4a11      	ldr	r2, [pc, #68]	; (8008adc <pvPortMalloc+0x194>)
 8008a96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a98:	f7fe fc0a 	bl	80072b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	f003 0307 	and.w	r3, r3, #7
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d00a      	beq.n	8008abc <pvPortMalloc+0x174>
	__asm volatile
 8008aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aaa:	f383 8811 	msr	BASEPRI, r3
 8008aae:	f3bf 8f6f 	isb	sy
 8008ab2:	f3bf 8f4f 	dsb	sy
 8008ab6:	60fb      	str	r3, [r7, #12]
}
 8008ab8:	bf00      	nop
 8008aba:	e7fe      	b.n	8008aba <pvPortMalloc+0x172>
	return pvReturn;
 8008abc:	69fb      	ldr	r3, [r7, #28]
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3728      	adds	r7, #40	; 0x28
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	20003398 	.word	0x20003398
 8008acc:	200033ac 	.word	0x200033ac
 8008ad0:	2000339c 	.word	0x2000339c
 8008ad4:	20003390 	.word	0x20003390
 8008ad8:	200033a0 	.word	0x200033a0
 8008adc:	200033a4 	.word	0x200033a4

08008ae0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d04d      	beq.n	8008b8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008af2:	2308      	movs	r3, #8
 8008af4:	425b      	negs	r3, r3
 8008af6:	697a      	ldr	r2, [r7, #20]
 8008af8:	4413      	add	r3, r2
 8008afa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	685a      	ldr	r2, [r3, #4]
 8008b04:	4b24      	ldr	r3, [pc, #144]	; (8008b98 <vPortFree+0xb8>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4013      	ands	r3, r2
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d10a      	bne.n	8008b24 <vPortFree+0x44>
	__asm volatile
 8008b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b12:	f383 8811 	msr	BASEPRI, r3
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	60fb      	str	r3, [r7, #12]
}
 8008b20:	bf00      	nop
 8008b22:	e7fe      	b.n	8008b22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00a      	beq.n	8008b42 <vPortFree+0x62>
	__asm volatile
 8008b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b30:	f383 8811 	msr	BASEPRI, r3
 8008b34:	f3bf 8f6f 	isb	sy
 8008b38:	f3bf 8f4f 	dsb	sy
 8008b3c:	60bb      	str	r3, [r7, #8]
}
 8008b3e:	bf00      	nop
 8008b40:	e7fe      	b.n	8008b40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	685a      	ldr	r2, [r3, #4]
 8008b46:	4b14      	ldr	r3, [pc, #80]	; (8008b98 <vPortFree+0xb8>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d01e      	beq.n	8008b8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d11a      	bne.n	8008b8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	685a      	ldr	r2, [r3, #4]
 8008b5c:	4b0e      	ldr	r3, [pc, #56]	; (8008b98 <vPortFree+0xb8>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	43db      	mvns	r3, r3
 8008b62:	401a      	ands	r2, r3
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b68:	f7fe fb94 	bl	8007294 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	685a      	ldr	r2, [r3, #4]
 8008b70:	4b0a      	ldr	r3, [pc, #40]	; (8008b9c <vPortFree+0xbc>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4413      	add	r3, r2
 8008b76:	4a09      	ldr	r2, [pc, #36]	; (8008b9c <vPortFree+0xbc>)
 8008b78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b7a:	6938      	ldr	r0, [r7, #16]
 8008b7c:	f000 f874 	bl	8008c68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008b80:	4b07      	ldr	r3, [pc, #28]	; (8008ba0 <vPortFree+0xc0>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	3301      	adds	r3, #1
 8008b86:	4a06      	ldr	r2, [pc, #24]	; (8008ba0 <vPortFree+0xc0>)
 8008b88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008b8a:	f7fe fb91 	bl	80072b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b8e:	bf00      	nop
 8008b90:	3718      	adds	r7, #24
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	200033ac 	.word	0x200033ac
 8008b9c:	2000339c 	.word	0x2000339c
 8008ba0:	200033a8 	.word	0x200033a8

08008ba4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008baa:	f242 3328 	movw	r3, #9000	; 0x2328
 8008bae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008bb0:	4b27      	ldr	r3, [pc, #156]	; (8008c50 <prvHeapInit+0xac>)
 8008bb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f003 0307 	and.w	r3, r3, #7
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00c      	beq.n	8008bd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	3307      	adds	r3, #7
 8008bc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f023 0307 	bic.w	r3, r3, #7
 8008bca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008bcc:	68ba      	ldr	r2, [r7, #8]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	4a1f      	ldr	r2, [pc, #124]	; (8008c50 <prvHeapInit+0xac>)
 8008bd4:	4413      	add	r3, r2
 8008bd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008bdc:	4a1d      	ldr	r2, [pc, #116]	; (8008c54 <prvHeapInit+0xb0>)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008be2:	4b1c      	ldr	r3, [pc, #112]	; (8008c54 <prvHeapInit+0xb0>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	68ba      	ldr	r2, [r7, #8]
 8008bec:	4413      	add	r3, r2
 8008bee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008bf0:	2208      	movs	r2, #8
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	1a9b      	subs	r3, r3, r2
 8008bf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f023 0307 	bic.w	r3, r3, #7
 8008bfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	4a15      	ldr	r2, [pc, #84]	; (8008c58 <prvHeapInit+0xb4>)
 8008c04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008c06:	4b14      	ldr	r3, [pc, #80]	; (8008c58 <prvHeapInit+0xb4>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008c0e:	4b12      	ldr	r3, [pc, #72]	; (8008c58 <prvHeapInit+0xb4>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2200      	movs	r2, #0
 8008c14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	1ad2      	subs	r2, r2, r3
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c24:	4b0c      	ldr	r3, [pc, #48]	; (8008c58 <prvHeapInit+0xb4>)
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	4a0a      	ldr	r2, [pc, #40]	; (8008c5c <prvHeapInit+0xb8>)
 8008c32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	4a09      	ldr	r2, [pc, #36]	; (8008c60 <prvHeapInit+0xbc>)
 8008c3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c3c:	4b09      	ldr	r3, [pc, #36]	; (8008c64 <prvHeapInit+0xc0>)
 8008c3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008c42:	601a      	str	r2, [r3, #0]
}
 8008c44:	bf00      	nop
 8008c46:	3714      	adds	r7, #20
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr
 8008c50:	20001068 	.word	0x20001068
 8008c54:	20003390 	.word	0x20003390
 8008c58:	20003398 	.word	0x20003398
 8008c5c:	200033a0 	.word	0x200033a0
 8008c60:	2000339c 	.word	0x2000339c
 8008c64:	200033ac 	.word	0x200033ac

08008c68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c70:	4b28      	ldr	r3, [pc, #160]	; (8008d14 <prvInsertBlockIntoFreeList+0xac>)
 8008c72:	60fb      	str	r3, [r7, #12]
 8008c74:	e002      	b.n	8008c7c <prvInsertBlockIntoFreeList+0x14>
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	60fb      	str	r3, [r7, #12]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d8f7      	bhi.n	8008c76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	68ba      	ldr	r2, [r7, #8]
 8008c90:	4413      	add	r3, r2
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d108      	bne.n	8008caa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	685a      	ldr	r2, [r3, #4]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	441a      	add	r2, r3
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	68ba      	ldr	r2, [r7, #8]
 8008cb4:	441a      	add	r2, r3
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d118      	bne.n	8008cf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	4b15      	ldr	r3, [pc, #84]	; (8008d18 <prvInsertBlockIntoFreeList+0xb0>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d00d      	beq.n	8008ce6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	685a      	ldr	r2, [r3, #4]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	441a      	add	r2, r3
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	601a      	str	r2, [r3, #0]
 8008ce4:	e008      	b.n	8008cf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ce6:	4b0c      	ldr	r3, [pc, #48]	; (8008d18 <prvInsertBlockIntoFreeList+0xb0>)
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	601a      	str	r2, [r3, #0]
 8008cee:	e003      	b.n	8008cf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d002      	beq.n	8008d06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d06:	bf00      	nop
 8008d08:	3714      	adds	r7, #20
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr
 8008d12:	bf00      	nop
 8008d14:	20003390 	.word	0x20003390
 8008d18:	20003398 	.word	0x20003398

08008d1c <__errno>:
 8008d1c:	4b01      	ldr	r3, [pc, #4]	; (8008d24 <__errno+0x8>)
 8008d1e:	6818      	ldr	r0, [r3, #0]
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	20000010 	.word	0x20000010

08008d28 <__libc_init_array>:
 8008d28:	b570      	push	{r4, r5, r6, lr}
 8008d2a:	4d0d      	ldr	r5, [pc, #52]	; (8008d60 <__libc_init_array+0x38>)
 8008d2c:	4c0d      	ldr	r4, [pc, #52]	; (8008d64 <__libc_init_array+0x3c>)
 8008d2e:	1b64      	subs	r4, r4, r5
 8008d30:	10a4      	asrs	r4, r4, #2
 8008d32:	2600      	movs	r6, #0
 8008d34:	42a6      	cmp	r6, r4
 8008d36:	d109      	bne.n	8008d4c <__libc_init_array+0x24>
 8008d38:	4d0b      	ldr	r5, [pc, #44]	; (8008d68 <__libc_init_array+0x40>)
 8008d3a:	4c0c      	ldr	r4, [pc, #48]	; (8008d6c <__libc_init_array+0x44>)
 8008d3c:	f000 fd2c 	bl	8009798 <_init>
 8008d40:	1b64      	subs	r4, r4, r5
 8008d42:	10a4      	asrs	r4, r4, #2
 8008d44:	2600      	movs	r6, #0
 8008d46:	42a6      	cmp	r6, r4
 8008d48:	d105      	bne.n	8008d56 <__libc_init_array+0x2e>
 8008d4a:	bd70      	pop	{r4, r5, r6, pc}
 8008d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d50:	4798      	blx	r3
 8008d52:	3601      	adds	r6, #1
 8008d54:	e7ee      	b.n	8008d34 <__libc_init_array+0xc>
 8008d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d5a:	4798      	blx	r3
 8008d5c:	3601      	adds	r6, #1
 8008d5e:	e7f2      	b.n	8008d46 <__libc_init_array+0x1e>
 8008d60:	08009940 	.word	0x08009940
 8008d64:	08009940 	.word	0x08009940
 8008d68:	08009940 	.word	0x08009940
 8008d6c:	0800994c 	.word	0x0800994c

08008d70 <memcpy>:
 8008d70:	440a      	add	r2, r1
 8008d72:	4291      	cmp	r1, r2
 8008d74:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d78:	d100      	bne.n	8008d7c <memcpy+0xc>
 8008d7a:	4770      	bx	lr
 8008d7c:	b510      	push	{r4, lr}
 8008d7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d86:	4291      	cmp	r1, r2
 8008d88:	d1f9      	bne.n	8008d7e <memcpy+0xe>
 8008d8a:	bd10      	pop	{r4, pc}

08008d8c <memset>:
 8008d8c:	4402      	add	r2, r0
 8008d8e:	4603      	mov	r3, r0
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d100      	bne.n	8008d96 <memset+0xa>
 8008d94:	4770      	bx	lr
 8008d96:	f803 1b01 	strb.w	r1, [r3], #1
 8008d9a:	e7f9      	b.n	8008d90 <memset+0x4>

08008d9c <_puts_r>:
 8008d9c:	b570      	push	{r4, r5, r6, lr}
 8008d9e:	460e      	mov	r6, r1
 8008da0:	4605      	mov	r5, r0
 8008da2:	b118      	cbz	r0, 8008dac <_puts_r+0x10>
 8008da4:	6983      	ldr	r3, [r0, #24]
 8008da6:	b90b      	cbnz	r3, 8008dac <_puts_r+0x10>
 8008da8:	f000 fa48 	bl	800923c <__sinit>
 8008dac:	69ab      	ldr	r3, [r5, #24]
 8008dae:	68ac      	ldr	r4, [r5, #8]
 8008db0:	b913      	cbnz	r3, 8008db8 <_puts_r+0x1c>
 8008db2:	4628      	mov	r0, r5
 8008db4:	f000 fa42 	bl	800923c <__sinit>
 8008db8:	4b2c      	ldr	r3, [pc, #176]	; (8008e6c <_puts_r+0xd0>)
 8008dba:	429c      	cmp	r4, r3
 8008dbc:	d120      	bne.n	8008e00 <_puts_r+0x64>
 8008dbe:	686c      	ldr	r4, [r5, #4]
 8008dc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008dc2:	07db      	lsls	r3, r3, #31
 8008dc4:	d405      	bmi.n	8008dd2 <_puts_r+0x36>
 8008dc6:	89a3      	ldrh	r3, [r4, #12]
 8008dc8:	0598      	lsls	r0, r3, #22
 8008dca:	d402      	bmi.n	8008dd2 <_puts_r+0x36>
 8008dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dce:	f000 fad3 	bl	8009378 <__retarget_lock_acquire_recursive>
 8008dd2:	89a3      	ldrh	r3, [r4, #12]
 8008dd4:	0719      	lsls	r1, r3, #28
 8008dd6:	d51d      	bpl.n	8008e14 <_puts_r+0x78>
 8008dd8:	6923      	ldr	r3, [r4, #16]
 8008dda:	b1db      	cbz	r3, 8008e14 <_puts_r+0x78>
 8008ddc:	3e01      	subs	r6, #1
 8008dde:	68a3      	ldr	r3, [r4, #8]
 8008de0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008de4:	3b01      	subs	r3, #1
 8008de6:	60a3      	str	r3, [r4, #8]
 8008de8:	bb39      	cbnz	r1, 8008e3a <_puts_r+0x9e>
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	da38      	bge.n	8008e60 <_puts_r+0xc4>
 8008dee:	4622      	mov	r2, r4
 8008df0:	210a      	movs	r1, #10
 8008df2:	4628      	mov	r0, r5
 8008df4:	f000 f848 	bl	8008e88 <__swbuf_r>
 8008df8:	3001      	adds	r0, #1
 8008dfa:	d011      	beq.n	8008e20 <_puts_r+0x84>
 8008dfc:	250a      	movs	r5, #10
 8008dfe:	e011      	b.n	8008e24 <_puts_r+0x88>
 8008e00:	4b1b      	ldr	r3, [pc, #108]	; (8008e70 <_puts_r+0xd4>)
 8008e02:	429c      	cmp	r4, r3
 8008e04:	d101      	bne.n	8008e0a <_puts_r+0x6e>
 8008e06:	68ac      	ldr	r4, [r5, #8]
 8008e08:	e7da      	b.n	8008dc0 <_puts_r+0x24>
 8008e0a:	4b1a      	ldr	r3, [pc, #104]	; (8008e74 <_puts_r+0xd8>)
 8008e0c:	429c      	cmp	r4, r3
 8008e0e:	bf08      	it	eq
 8008e10:	68ec      	ldreq	r4, [r5, #12]
 8008e12:	e7d5      	b.n	8008dc0 <_puts_r+0x24>
 8008e14:	4621      	mov	r1, r4
 8008e16:	4628      	mov	r0, r5
 8008e18:	f000 f888 	bl	8008f2c <__swsetup_r>
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	d0dd      	beq.n	8008ddc <_puts_r+0x40>
 8008e20:	f04f 35ff 	mov.w	r5, #4294967295
 8008e24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e26:	07da      	lsls	r2, r3, #31
 8008e28:	d405      	bmi.n	8008e36 <_puts_r+0x9a>
 8008e2a:	89a3      	ldrh	r3, [r4, #12]
 8008e2c:	059b      	lsls	r3, r3, #22
 8008e2e:	d402      	bmi.n	8008e36 <_puts_r+0x9a>
 8008e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e32:	f000 faa2 	bl	800937a <__retarget_lock_release_recursive>
 8008e36:	4628      	mov	r0, r5
 8008e38:	bd70      	pop	{r4, r5, r6, pc}
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	da04      	bge.n	8008e48 <_puts_r+0xac>
 8008e3e:	69a2      	ldr	r2, [r4, #24]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	dc06      	bgt.n	8008e52 <_puts_r+0xb6>
 8008e44:	290a      	cmp	r1, #10
 8008e46:	d004      	beq.n	8008e52 <_puts_r+0xb6>
 8008e48:	6823      	ldr	r3, [r4, #0]
 8008e4a:	1c5a      	adds	r2, r3, #1
 8008e4c:	6022      	str	r2, [r4, #0]
 8008e4e:	7019      	strb	r1, [r3, #0]
 8008e50:	e7c5      	b.n	8008dde <_puts_r+0x42>
 8008e52:	4622      	mov	r2, r4
 8008e54:	4628      	mov	r0, r5
 8008e56:	f000 f817 	bl	8008e88 <__swbuf_r>
 8008e5a:	3001      	adds	r0, #1
 8008e5c:	d1bf      	bne.n	8008dde <_puts_r+0x42>
 8008e5e:	e7df      	b.n	8008e20 <_puts_r+0x84>
 8008e60:	6823      	ldr	r3, [r4, #0]
 8008e62:	250a      	movs	r5, #10
 8008e64:	1c5a      	adds	r2, r3, #1
 8008e66:	6022      	str	r2, [r4, #0]
 8008e68:	701d      	strb	r5, [r3, #0]
 8008e6a:	e7db      	b.n	8008e24 <_puts_r+0x88>
 8008e6c:	080098f8 	.word	0x080098f8
 8008e70:	08009918 	.word	0x08009918
 8008e74:	080098d8 	.word	0x080098d8

08008e78 <puts>:
 8008e78:	4b02      	ldr	r3, [pc, #8]	; (8008e84 <puts+0xc>)
 8008e7a:	4601      	mov	r1, r0
 8008e7c:	6818      	ldr	r0, [r3, #0]
 8008e7e:	f7ff bf8d 	b.w	8008d9c <_puts_r>
 8008e82:	bf00      	nop
 8008e84:	20000010 	.word	0x20000010

08008e88 <__swbuf_r>:
 8008e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e8a:	460e      	mov	r6, r1
 8008e8c:	4614      	mov	r4, r2
 8008e8e:	4605      	mov	r5, r0
 8008e90:	b118      	cbz	r0, 8008e9a <__swbuf_r+0x12>
 8008e92:	6983      	ldr	r3, [r0, #24]
 8008e94:	b90b      	cbnz	r3, 8008e9a <__swbuf_r+0x12>
 8008e96:	f000 f9d1 	bl	800923c <__sinit>
 8008e9a:	4b21      	ldr	r3, [pc, #132]	; (8008f20 <__swbuf_r+0x98>)
 8008e9c:	429c      	cmp	r4, r3
 8008e9e:	d12b      	bne.n	8008ef8 <__swbuf_r+0x70>
 8008ea0:	686c      	ldr	r4, [r5, #4]
 8008ea2:	69a3      	ldr	r3, [r4, #24]
 8008ea4:	60a3      	str	r3, [r4, #8]
 8008ea6:	89a3      	ldrh	r3, [r4, #12]
 8008ea8:	071a      	lsls	r2, r3, #28
 8008eaa:	d52f      	bpl.n	8008f0c <__swbuf_r+0x84>
 8008eac:	6923      	ldr	r3, [r4, #16]
 8008eae:	b36b      	cbz	r3, 8008f0c <__swbuf_r+0x84>
 8008eb0:	6923      	ldr	r3, [r4, #16]
 8008eb2:	6820      	ldr	r0, [r4, #0]
 8008eb4:	1ac0      	subs	r0, r0, r3
 8008eb6:	6963      	ldr	r3, [r4, #20]
 8008eb8:	b2f6      	uxtb	r6, r6
 8008eba:	4283      	cmp	r3, r0
 8008ebc:	4637      	mov	r7, r6
 8008ebe:	dc04      	bgt.n	8008eca <__swbuf_r+0x42>
 8008ec0:	4621      	mov	r1, r4
 8008ec2:	4628      	mov	r0, r5
 8008ec4:	f000 f926 	bl	8009114 <_fflush_r>
 8008ec8:	bb30      	cbnz	r0, 8008f18 <__swbuf_r+0x90>
 8008eca:	68a3      	ldr	r3, [r4, #8]
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	60a3      	str	r3, [r4, #8]
 8008ed0:	6823      	ldr	r3, [r4, #0]
 8008ed2:	1c5a      	adds	r2, r3, #1
 8008ed4:	6022      	str	r2, [r4, #0]
 8008ed6:	701e      	strb	r6, [r3, #0]
 8008ed8:	6963      	ldr	r3, [r4, #20]
 8008eda:	3001      	adds	r0, #1
 8008edc:	4283      	cmp	r3, r0
 8008ede:	d004      	beq.n	8008eea <__swbuf_r+0x62>
 8008ee0:	89a3      	ldrh	r3, [r4, #12]
 8008ee2:	07db      	lsls	r3, r3, #31
 8008ee4:	d506      	bpl.n	8008ef4 <__swbuf_r+0x6c>
 8008ee6:	2e0a      	cmp	r6, #10
 8008ee8:	d104      	bne.n	8008ef4 <__swbuf_r+0x6c>
 8008eea:	4621      	mov	r1, r4
 8008eec:	4628      	mov	r0, r5
 8008eee:	f000 f911 	bl	8009114 <_fflush_r>
 8008ef2:	b988      	cbnz	r0, 8008f18 <__swbuf_r+0x90>
 8008ef4:	4638      	mov	r0, r7
 8008ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ef8:	4b0a      	ldr	r3, [pc, #40]	; (8008f24 <__swbuf_r+0x9c>)
 8008efa:	429c      	cmp	r4, r3
 8008efc:	d101      	bne.n	8008f02 <__swbuf_r+0x7a>
 8008efe:	68ac      	ldr	r4, [r5, #8]
 8008f00:	e7cf      	b.n	8008ea2 <__swbuf_r+0x1a>
 8008f02:	4b09      	ldr	r3, [pc, #36]	; (8008f28 <__swbuf_r+0xa0>)
 8008f04:	429c      	cmp	r4, r3
 8008f06:	bf08      	it	eq
 8008f08:	68ec      	ldreq	r4, [r5, #12]
 8008f0a:	e7ca      	b.n	8008ea2 <__swbuf_r+0x1a>
 8008f0c:	4621      	mov	r1, r4
 8008f0e:	4628      	mov	r0, r5
 8008f10:	f000 f80c 	bl	8008f2c <__swsetup_r>
 8008f14:	2800      	cmp	r0, #0
 8008f16:	d0cb      	beq.n	8008eb0 <__swbuf_r+0x28>
 8008f18:	f04f 37ff 	mov.w	r7, #4294967295
 8008f1c:	e7ea      	b.n	8008ef4 <__swbuf_r+0x6c>
 8008f1e:	bf00      	nop
 8008f20:	080098f8 	.word	0x080098f8
 8008f24:	08009918 	.word	0x08009918
 8008f28:	080098d8 	.word	0x080098d8

08008f2c <__swsetup_r>:
 8008f2c:	4b32      	ldr	r3, [pc, #200]	; (8008ff8 <__swsetup_r+0xcc>)
 8008f2e:	b570      	push	{r4, r5, r6, lr}
 8008f30:	681d      	ldr	r5, [r3, #0]
 8008f32:	4606      	mov	r6, r0
 8008f34:	460c      	mov	r4, r1
 8008f36:	b125      	cbz	r5, 8008f42 <__swsetup_r+0x16>
 8008f38:	69ab      	ldr	r3, [r5, #24]
 8008f3a:	b913      	cbnz	r3, 8008f42 <__swsetup_r+0x16>
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	f000 f97d 	bl	800923c <__sinit>
 8008f42:	4b2e      	ldr	r3, [pc, #184]	; (8008ffc <__swsetup_r+0xd0>)
 8008f44:	429c      	cmp	r4, r3
 8008f46:	d10f      	bne.n	8008f68 <__swsetup_r+0x3c>
 8008f48:	686c      	ldr	r4, [r5, #4]
 8008f4a:	89a3      	ldrh	r3, [r4, #12]
 8008f4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f50:	0719      	lsls	r1, r3, #28
 8008f52:	d42c      	bmi.n	8008fae <__swsetup_r+0x82>
 8008f54:	06dd      	lsls	r5, r3, #27
 8008f56:	d411      	bmi.n	8008f7c <__swsetup_r+0x50>
 8008f58:	2309      	movs	r3, #9
 8008f5a:	6033      	str	r3, [r6, #0]
 8008f5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f60:	81a3      	strh	r3, [r4, #12]
 8008f62:	f04f 30ff 	mov.w	r0, #4294967295
 8008f66:	e03e      	b.n	8008fe6 <__swsetup_r+0xba>
 8008f68:	4b25      	ldr	r3, [pc, #148]	; (8009000 <__swsetup_r+0xd4>)
 8008f6a:	429c      	cmp	r4, r3
 8008f6c:	d101      	bne.n	8008f72 <__swsetup_r+0x46>
 8008f6e:	68ac      	ldr	r4, [r5, #8]
 8008f70:	e7eb      	b.n	8008f4a <__swsetup_r+0x1e>
 8008f72:	4b24      	ldr	r3, [pc, #144]	; (8009004 <__swsetup_r+0xd8>)
 8008f74:	429c      	cmp	r4, r3
 8008f76:	bf08      	it	eq
 8008f78:	68ec      	ldreq	r4, [r5, #12]
 8008f7a:	e7e6      	b.n	8008f4a <__swsetup_r+0x1e>
 8008f7c:	0758      	lsls	r0, r3, #29
 8008f7e:	d512      	bpl.n	8008fa6 <__swsetup_r+0x7a>
 8008f80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f82:	b141      	cbz	r1, 8008f96 <__swsetup_r+0x6a>
 8008f84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f88:	4299      	cmp	r1, r3
 8008f8a:	d002      	beq.n	8008f92 <__swsetup_r+0x66>
 8008f8c:	4630      	mov	r0, r6
 8008f8e:	f000 fa5b 	bl	8009448 <_free_r>
 8008f92:	2300      	movs	r3, #0
 8008f94:	6363      	str	r3, [r4, #52]	; 0x34
 8008f96:	89a3      	ldrh	r3, [r4, #12]
 8008f98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f9c:	81a3      	strh	r3, [r4, #12]
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	6063      	str	r3, [r4, #4]
 8008fa2:	6923      	ldr	r3, [r4, #16]
 8008fa4:	6023      	str	r3, [r4, #0]
 8008fa6:	89a3      	ldrh	r3, [r4, #12]
 8008fa8:	f043 0308 	orr.w	r3, r3, #8
 8008fac:	81a3      	strh	r3, [r4, #12]
 8008fae:	6923      	ldr	r3, [r4, #16]
 8008fb0:	b94b      	cbnz	r3, 8008fc6 <__swsetup_r+0x9a>
 8008fb2:	89a3      	ldrh	r3, [r4, #12]
 8008fb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008fb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fbc:	d003      	beq.n	8008fc6 <__swsetup_r+0x9a>
 8008fbe:	4621      	mov	r1, r4
 8008fc0:	4630      	mov	r0, r6
 8008fc2:	f000 fa01 	bl	80093c8 <__smakebuf_r>
 8008fc6:	89a0      	ldrh	r0, [r4, #12]
 8008fc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008fcc:	f010 0301 	ands.w	r3, r0, #1
 8008fd0:	d00a      	beq.n	8008fe8 <__swsetup_r+0xbc>
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	60a3      	str	r3, [r4, #8]
 8008fd6:	6963      	ldr	r3, [r4, #20]
 8008fd8:	425b      	negs	r3, r3
 8008fda:	61a3      	str	r3, [r4, #24]
 8008fdc:	6923      	ldr	r3, [r4, #16]
 8008fde:	b943      	cbnz	r3, 8008ff2 <__swsetup_r+0xc6>
 8008fe0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008fe4:	d1ba      	bne.n	8008f5c <__swsetup_r+0x30>
 8008fe6:	bd70      	pop	{r4, r5, r6, pc}
 8008fe8:	0781      	lsls	r1, r0, #30
 8008fea:	bf58      	it	pl
 8008fec:	6963      	ldrpl	r3, [r4, #20]
 8008fee:	60a3      	str	r3, [r4, #8]
 8008ff0:	e7f4      	b.n	8008fdc <__swsetup_r+0xb0>
 8008ff2:	2000      	movs	r0, #0
 8008ff4:	e7f7      	b.n	8008fe6 <__swsetup_r+0xba>
 8008ff6:	bf00      	nop
 8008ff8:	20000010 	.word	0x20000010
 8008ffc:	080098f8 	.word	0x080098f8
 8009000:	08009918 	.word	0x08009918
 8009004:	080098d8 	.word	0x080098d8

08009008 <__sflush_r>:
 8009008:	898a      	ldrh	r2, [r1, #12]
 800900a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800900e:	4605      	mov	r5, r0
 8009010:	0710      	lsls	r0, r2, #28
 8009012:	460c      	mov	r4, r1
 8009014:	d458      	bmi.n	80090c8 <__sflush_r+0xc0>
 8009016:	684b      	ldr	r3, [r1, #4]
 8009018:	2b00      	cmp	r3, #0
 800901a:	dc05      	bgt.n	8009028 <__sflush_r+0x20>
 800901c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800901e:	2b00      	cmp	r3, #0
 8009020:	dc02      	bgt.n	8009028 <__sflush_r+0x20>
 8009022:	2000      	movs	r0, #0
 8009024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009028:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800902a:	2e00      	cmp	r6, #0
 800902c:	d0f9      	beq.n	8009022 <__sflush_r+0x1a>
 800902e:	2300      	movs	r3, #0
 8009030:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009034:	682f      	ldr	r7, [r5, #0]
 8009036:	602b      	str	r3, [r5, #0]
 8009038:	d032      	beq.n	80090a0 <__sflush_r+0x98>
 800903a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800903c:	89a3      	ldrh	r3, [r4, #12]
 800903e:	075a      	lsls	r2, r3, #29
 8009040:	d505      	bpl.n	800904e <__sflush_r+0x46>
 8009042:	6863      	ldr	r3, [r4, #4]
 8009044:	1ac0      	subs	r0, r0, r3
 8009046:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009048:	b10b      	cbz	r3, 800904e <__sflush_r+0x46>
 800904a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800904c:	1ac0      	subs	r0, r0, r3
 800904e:	2300      	movs	r3, #0
 8009050:	4602      	mov	r2, r0
 8009052:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009054:	6a21      	ldr	r1, [r4, #32]
 8009056:	4628      	mov	r0, r5
 8009058:	47b0      	blx	r6
 800905a:	1c43      	adds	r3, r0, #1
 800905c:	89a3      	ldrh	r3, [r4, #12]
 800905e:	d106      	bne.n	800906e <__sflush_r+0x66>
 8009060:	6829      	ldr	r1, [r5, #0]
 8009062:	291d      	cmp	r1, #29
 8009064:	d82c      	bhi.n	80090c0 <__sflush_r+0xb8>
 8009066:	4a2a      	ldr	r2, [pc, #168]	; (8009110 <__sflush_r+0x108>)
 8009068:	40ca      	lsrs	r2, r1
 800906a:	07d6      	lsls	r6, r2, #31
 800906c:	d528      	bpl.n	80090c0 <__sflush_r+0xb8>
 800906e:	2200      	movs	r2, #0
 8009070:	6062      	str	r2, [r4, #4]
 8009072:	04d9      	lsls	r1, r3, #19
 8009074:	6922      	ldr	r2, [r4, #16]
 8009076:	6022      	str	r2, [r4, #0]
 8009078:	d504      	bpl.n	8009084 <__sflush_r+0x7c>
 800907a:	1c42      	adds	r2, r0, #1
 800907c:	d101      	bne.n	8009082 <__sflush_r+0x7a>
 800907e:	682b      	ldr	r3, [r5, #0]
 8009080:	b903      	cbnz	r3, 8009084 <__sflush_r+0x7c>
 8009082:	6560      	str	r0, [r4, #84]	; 0x54
 8009084:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009086:	602f      	str	r7, [r5, #0]
 8009088:	2900      	cmp	r1, #0
 800908a:	d0ca      	beq.n	8009022 <__sflush_r+0x1a>
 800908c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009090:	4299      	cmp	r1, r3
 8009092:	d002      	beq.n	800909a <__sflush_r+0x92>
 8009094:	4628      	mov	r0, r5
 8009096:	f000 f9d7 	bl	8009448 <_free_r>
 800909a:	2000      	movs	r0, #0
 800909c:	6360      	str	r0, [r4, #52]	; 0x34
 800909e:	e7c1      	b.n	8009024 <__sflush_r+0x1c>
 80090a0:	6a21      	ldr	r1, [r4, #32]
 80090a2:	2301      	movs	r3, #1
 80090a4:	4628      	mov	r0, r5
 80090a6:	47b0      	blx	r6
 80090a8:	1c41      	adds	r1, r0, #1
 80090aa:	d1c7      	bne.n	800903c <__sflush_r+0x34>
 80090ac:	682b      	ldr	r3, [r5, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d0c4      	beq.n	800903c <__sflush_r+0x34>
 80090b2:	2b1d      	cmp	r3, #29
 80090b4:	d001      	beq.n	80090ba <__sflush_r+0xb2>
 80090b6:	2b16      	cmp	r3, #22
 80090b8:	d101      	bne.n	80090be <__sflush_r+0xb6>
 80090ba:	602f      	str	r7, [r5, #0]
 80090bc:	e7b1      	b.n	8009022 <__sflush_r+0x1a>
 80090be:	89a3      	ldrh	r3, [r4, #12]
 80090c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090c4:	81a3      	strh	r3, [r4, #12]
 80090c6:	e7ad      	b.n	8009024 <__sflush_r+0x1c>
 80090c8:	690f      	ldr	r7, [r1, #16]
 80090ca:	2f00      	cmp	r7, #0
 80090cc:	d0a9      	beq.n	8009022 <__sflush_r+0x1a>
 80090ce:	0793      	lsls	r3, r2, #30
 80090d0:	680e      	ldr	r6, [r1, #0]
 80090d2:	bf08      	it	eq
 80090d4:	694b      	ldreq	r3, [r1, #20]
 80090d6:	600f      	str	r7, [r1, #0]
 80090d8:	bf18      	it	ne
 80090da:	2300      	movne	r3, #0
 80090dc:	eba6 0807 	sub.w	r8, r6, r7
 80090e0:	608b      	str	r3, [r1, #8]
 80090e2:	f1b8 0f00 	cmp.w	r8, #0
 80090e6:	dd9c      	ble.n	8009022 <__sflush_r+0x1a>
 80090e8:	6a21      	ldr	r1, [r4, #32]
 80090ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80090ec:	4643      	mov	r3, r8
 80090ee:	463a      	mov	r2, r7
 80090f0:	4628      	mov	r0, r5
 80090f2:	47b0      	blx	r6
 80090f4:	2800      	cmp	r0, #0
 80090f6:	dc06      	bgt.n	8009106 <__sflush_r+0xfe>
 80090f8:	89a3      	ldrh	r3, [r4, #12]
 80090fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090fe:	81a3      	strh	r3, [r4, #12]
 8009100:	f04f 30ff 	mov.w	r0, #4294967295
 8009104:	e78e      	b.n	8009024 <__sflush_r+0x1c>
 8009106:	4407      	add	r7, r0
 8009108:	eba8 0800 	sub.w	r8, r8, r0
 800910c:	e7e9      	b.n	80090e2 <__sflush_r+0xda>
 800910e:	bf00      	nop
 8009110:	20400001 	.word	0x20400001

08009114 <_fflush_r>:
 8009114:	b538      	push	{r3, r4, r5, lr}
 8009116:	690b      	ldr	r3, [r1, #16]
 8009118:	4605      	mov	r5, r0
 800911a:	460c      	mov	r4, r1
 800911c:	b913      	cbnz	r3, 8009124 <_fflush_r+0x10>
 800911e:	2500      	movs	r5, #0
 8009120:	4628      	mov	r0, r5
 8009122:	bd38      	pop	{r3, r4, r5, pc}
 8009124:	b118      	cbz	r0, 800912e <_fflush_r+0x1a>
 8009126:	6983      	ldr	r3, [r0, #24]
 8009128:	b90b      	cbnz	r3, 800912e <_fflush_r+0x1a>
 800912a:	f000 f887 	bl	800923c <__sinit>
 800912e:	4b14      	ldr	r3, [pc, #80]	; (8009180 <_fflush_r+0x6c>)
 8009130:	429c      	cmp	r4, r3
 8009132:	d11b      	bne.n	800916c <_fflush_r+0x58>
 8009134:	686c      	ldr	r4, [r5, #4]
 8009136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d0ef      	beq.n	800911e <_fflush_r+0xa>
 800913e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009140:	07d0      	lsls	r0, r2, #31
 8009142:	d404      	bmi.n	800914e <_fflush_r+0x3a>
 8009144:	0599      	lsls	r1, r3, #22
 8009146:	d402      	bmi.n	800914e <_fflush_r+0x3a>
 8009148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800914a:	f000 f915 	bl	8009378 <__retarget_lock_acquire_recursive>
 800914e:	4628      	mov	r0, r5
 8009150:	4621      	mov	r1, r4
 8009152:	f7ff ff59 	bl	8009008 <__sflush_r>
 8009156:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009158:	07da      	lsls	r2, r3, #31
 800915a:	4605      	mov	r5, r0
 800915c:	d4e0      	bmi.n	8009120 <_fflush_r+0xc>
 800915e:	89a3      	ldrh	r3, [r4, #12]
 8009160:	059b      	lsls	r3, r3, #22
 8009162:	d4dd      	bmi.n	8009120 <_fflush_r+0xc>
 8009164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009166:	f000 f908 	bl	800937a <__retarget_lock_release_recursive>
 800916a:	e7d9      	b.n	8009120 <_fflush_r+0xc>
 800916c:	4b05      	ldr	r3, [pc, #20]	; (8009184 <_fflush_r+0x70>)
 800916e:	429c      	cmp	r4, r3
 8009170:	d101      	bne.n	8009176 <_fflush_r+0x62>
 8009172:	68ac      	ldr	r4, [r5, #8]
 8009174:	e7df      	b.n	8009136 <_fflush_r+0x22>
 8009176:	4b04      	ldr	r3, [pc, #16]	; (8009188 <_fflush_r+0x74>)
 8009178:	429c      	cmp	r4, r3
 800917a:	bf08      	it	eq
 800917c:	68ec      	ldreq	r4, [r5, #12]
 800917e:	e7da      	b.n	8009136 <_fflush_r+0x22>
 8009180:	080098f8 	.word	0x080098f8
 8009184:	08009918 	.word	0x08009918
 8009188:	080098d8 	.word	0x080098d8

0800918c <std>:
 800918c:	2300      	movs	r3, #0
 800918e:	b510      	push	{r4, lr}
 8009190:	4604      	mov	r4, r0
 8009192:	e9c0 3300 	strd	r3, r3, [r0]
 8009196:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800919a:	6083      	str	r3, [r0, #8]
 800919c:	8181      	strh	r1, [r0, #12]
 800919e:	6643      	str	r3, [r0, #100]	; 0x64
 80091a0:	81c2      	strh	r2, [r0, #14]
 80091a2:	6183      	str	r3, [r0, #24]
 80091a4:	4619      	mov	r1, r3
 80091a6:	2208      	movs	r2, #8
 80091a8:	305c      	adds	r0, #92	; 0x5c
 80091aa:	f7ff fdef 	bl	8008d8c <memset>
 80091ae:	4b05      	ldr	r3, [pc, #20]	; (80091c4 <std+0x38>)
 80091b0:	6263      	str	r3, [r4, #36]	; 0x24
 80091b2:	4b05      	ldr	r3, [pc, #20]	; (80091c8 <std+0x3c>)
 80091b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80091b6:	4b05      	ldr	r3, [pc, #20]	; (80091cc <std+0x40>)
 80091b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80091ba:	4b05      	ldr	r3, [pc, #20]	; (80091d0 <std+0x44>)
 80091bc:	6224      	str	r4, [r4, #32]
 80091be:	6323      	str	r3, [r4, #48]	; 0x30
 80091c0:	bd10      	pop	{r4, pc}
 80091c2:	bf00      	nop
 80091c4:	08009629 	.word	0x08009629
 80091c8:	0800964b 	.word	0x0800964b
 80091cc:	08009683 	.word	0x08009683
 80091d0:	080096a7 	.word	0x080096a7

080091d4 <_cleanup_r>:
 80091d4:	4901      	ldr	r1, [pc, #4]	; (80091dc <_cleanup_r+0x8>)
 80091d6:	f000 b8af 	b.w	8009338 <_fwalk_reent>
 80091da:	bf00      	nop
 80091dc:	08009115 	.word	0x08009115

080091e0 <__sfmoreglue>:
 80091e0:	b570      	push	{r4, r5, r6, lr}
 80091e2:	2268      	movs	r2, #104	; 0x68
 80091e4:	1e4d      	subs	r5, r1, #1
 80091e6:	4355      	muls	r5, r2
 80091e8:	460e      	mov	r6, r1
 80091ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80091ee:	f000 f997 	bl	8009520 <_malloc_r>
 80091f2:	4604      	mov	r4, r0
 80091f4:	b140      	cbz	r0, 8009208 <__sfmoreglue+0x28>
 80091f6:	2100      	movs	r1, #0
 80091f8:	e9c0 1600 	strd	r1, r6, [r0]
 80091fc:	300c      	adds	r0, #12
 80091fe:	60a0      	str	r0, [r4, #8]
 8009200:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009204:	f7ff fdc2 	bl	8008d8c <memset>
 8009208:	4620      	mov	r0, r4
 800920a:	bd70      	pop	{r4, r5, r6, pc}

0800920c <__sfp_lock_acquire>:
 800920c:	4801      	ldr	r0, [pc, #4]	; (8009214 <__sfp_lock_acquire+0x8>)
 800920e:	f000 b8b3 	b.w	8009378 <__retarget_lock_acquire_recursive>
 8009212:	bf00      	nop
 8009214:	200033b1 	.word	0x200033b1

08009218 <__sfp_lock_release>:
 8009218:	4801      	ldr	r0, [pc, #4]	; (8009220 <__sfp_lock_release+0x8>)
 800921a:	f000 b8ae 	b.w	800937a <__retarget_lock_release_recursive>
 800921e:	bf00      	nop
 8009220:	200033b1 	.word	0x200033b1

08009224 <__sinit_lock_acquire>:
 8009224:	4801      	ldr	r0, [pc, #4]	; (800922c <__sinit_lock_acquire+0x8>)
 8009226:	f000 b8a7 	b.w	8009378 <__retarget_lock_acquire_recursive>
 800922a:	bf00      	nop
 800922c:	200033b2 	.word	0x200033b2

08009230 <__sinit_lock_release>:
 8009230:	4801      	ldr	r0, [pc, #4]	; (8009238 <__sinit_lock_release+0x8>)
 8009232:	f000 b8a2 	b.w	800937a <__retarget_lock_release_recursive>
 8009236:	bf00      	nop
 8009238:	200033b2 	.word	0x200033b2

0800923c <__sinit>:
 800923c:	b510      	push	{r4, lr}
 800923e:	4604      	mov	r4, r0
 8009240:	f7ff fff0 	bl	8009224 <__sinit_lock_acquire>
 8009244:	69a3      	ldr	r3, [r4, #24]
 8009246:	b11b      	cbz	r3, 8009250 <__sinit+0x14>
 8009248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800924c:	f7ff bff0 	b.w	8009230 <__sinit_lock_release>
 8009250:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009254:	6523      	str	r3, [r4, #80]	; 0x50
 8009256:	4b13      	ldr	r3, [pc, #76]	; (80092a4 <__sinit+0x68>)
 8009258:	4a13      	ldr	r2, [pc, #76]	; (80092a8 <__sinit+0x6c>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	62a2      	str	r2, [r4, #40]	; 0x28
 800925e:	42a3      	cmp	r3, r4
 8009260:	bf04      	itt	eq
 8009262:	2301      	moveq	r3, #1
 8009264:	61a3      	streq	r3, [r4, #24]
 8009266:	4620      	mov	r0, r4
 8009268:	f000 f820 	bl	80092ac <__sfp>
 800926c:	6060      	str	r0, [r4, #4]
 800926e:	4620      	mov	r0, r4
 8009270:	f000 f81c 	bl	80092ac <__sfp>
 8009274:	60a0      	str	r0, [r4, #8]
 8009276:	4620      	mov	r0, r4
 8009278:	f000 f818 	bl	80092ac <__sfp>
 800927c:	2200      	movs	r2, #0
 800927e:	60e0      	str	r0, [r4, #12]
 8009280:	2104      	movs	r1, #4
 8009282:	6860      	ldr	r0, [r4, #4]
 8009284:	f7ff ff82 	bl	800918c <std>
 8009288:	68a0      	ldr	r0, [r4, #8]
 800928a:	2201      	movs	r2, #1
 800928c:	2109      	movs	r1, #9
 800928e:	f7ff ff7d 	bl	800918c <std>
 8009292:	68e0      	ldr	r0, [r4, #12]
 8009294:	2202      	movs	r2, #2
 8009296:	2112      	movs	r1, #18
 8009298:	f7ff ff78 	bl	800918c <std>
 800929c:	2301      	movs	r3, #1
 800929e:	61a3      	str	r3, [r4, #24]
 80092a0:	e7d2      	b.n	8009248 <__sinit+0xc>
 80092a2:	bf00      	nop
 80092a4:	080098d4 	.word	0x080098d4
 80092a8:	080091d5 	.word	0x080091d5

080092ac <__sfp>:
 80092ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ae:	4607      	mov	r7, r0
 80092b0:	f7ff ffac 	bl	800920c <__sfp_lock_acquire>
 80092b4:	4b1e      	ldr	r3, [pc, #120]	; (8009330 <__sfp+0x84>)
 80092b6:	681e      	ldr	r6, [r3, #0]
 80092b8:	69b3      	ldr	r3, [r6, #24]
 80092ba:	b913      	cbnz	r3, 80092c2 <__sfp+0x16>
 80092bc:	4630      	mov	r0, r6
 80092be:	f7ff ffbd 	bl	800923c <__sinit>
 80092c2:	3648      	adds	r6, #72	; 0x48
 80092c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80092c8:	3b01      	subs	r3, #1
 80092ca:	d503      	bpl.n	80092d4 <__sfp+0x28>
 80092cc:	6833      	ldr	r3, [r6, #0]
 80092ce:	b30b      	cbz	r3, 8009314 <__sfp+0x68>
 80092d0:	6836      	ldr	r6, [r6, #0]
 80092d2:	e7f7      	b.n	80092c4 <__sfp+0x18>
 80092d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80092d8:	b9d5      	cbnz	r5, 8009310 <__sfp+0x64>
 80092da:	4b16      	ldr	r3, [pc, #88]	; (8009334 <__sfp+0x88>)
 80092dc:	60e3      	str	r3, [r4, #12]
 80092de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80092e2:	6665      	str	r5, [r4, #100]	; 0x64
 80092e4:	f000 f847 	bl	8009376 <__retarget_lock_init_recursive>
 80092e8:	f7ff ff96 	bl	8009218 <__sfp_lock_release>
 80092ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80092f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80092f4:	6025      	str	r5, [r4, #0]
 80092f6:	61a5      	str	r5, [r4, #24]
 80092f8:	2208      	movs	r2, #8
 80092fa:	4629      	mov	r1, r5
 80092fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009300:	f7ff fd44 	bl	8008d8c <memset>
 8009304:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009308:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800930c:	4620      	mov	r0, r4
 800930e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009310:	3468      	adds	r4, #104	; 0x68
 8009312:	e7d9      	b.n	80092c8 <__sfp+0x1c>
 8009314:	2104      	movs	r1, #4
 8009316:	4638      	mov	r0, r7
 8009318:	f7ff ff62 	bl	80091e0 <__sfmoreglue>
 800931c:	4604      	mov	r4, r0
 800931e:	6030      	str	r0, [r6, #0]
 8009320:	2800      	cmp	r0, #0
 8009322:	d1d5      	bne.n	80092d0 <__sfp+0x24>
 8009324:	f7ff ff78 	bl	8009218 <__sfp_lock_release>
 8009328:	230c      	movs	r3, #12
 800932a:	603b      	str	r3, [r7, #0]
 800932c:	e7ee      	b.n	800930c <__sfp+0x60>
 800932e:	bf00      	nop
 8009330:	080098d4 	.word	0x080098d4
 8009334:	ffff0001 	.word	0xffff0001

08009338 <_fwalk_reent>:
 8009338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800933c:	4606      	mov	r6, r0
 800933e:	4688      	mov	r8, r1
 8009340:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009344:	2700      	movs	r7, #0
 8009346:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800934a:	f1b9 0901 	subs.w	r9, r9, #1
 800934e:	d505      	bpl.n	800935c <_fwalk_reent+0x24>
 8009350:	6824      	ldr	r4, [r4, #0]
 8009352:	2c00      	cmp	r4, #0
 8009354:	d1f7      	bne.n	8009346 <_fwalk_reent+0xe>
 8009356:	4638      	mov	r0, r7
 8009358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800935c:	89ab      	ldrh	r3, [r5, #12]
 800935e:	2b01      	cmp	r3, #1
 8009360:	d907      	bls.n	8009372 <_fwalk_reent+0x3a>
 8009362:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009366:	3301      	adds	r3, #1
 8009368:	d003      	beq.n	8009372 <_fwalk_reent+0x3a>
 800936a:	4629      	mov	r1, r5
 800936c:	4630      	mov	r0, r6
 800936e:	47c0      	blx	r8
 8009370:	4307      	orrs	r7, r0
 8009372:	3568      	adds	r5, #104	; 0x68
 8009374:	e7e9      	b.n	800934a <_fwalk_reent+0x12>

08009376 <__retarget_lock_init_recursive>:
 8009376:	4770      	bx	lr

08009378 <__retarget_lock_acquire_recursive>:
 8009378:	4770      	bx	lr

0800937a <__retarget_lock_release_recursive>:
 800937a:	4770      	bx	lr

0800937c <__swhatbuf_r>:
 800937c:	b570      	push	{r4, r5, r6, lr}
 800937e:	460e      	mov	r6, r1
 8009380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009384:	2900      	cmp	r1, #0
 8009386:	b096      	sub	sp, #88	; 0x58
 8009388:	4614      	mov	r4, r2
 800938a:	461d      	mov	r5, r3
 800938c:	da08      	bge.n	80093a0 <__swhatbuf_r+0x24>
 800938e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	602a      	str	r2, [r5, #0]
 8009396:	061a      	lsls	r2, r3, #24
 8009398:	d410      	bmi.n	80093bc <__swhatbuf_r+0x40>
 800939a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800939e:	e00e      	b.n	80093be <__swhatbuf_r+0x42>
 80093a0:	466a      	mov	r2, sp
 80093a2:	f000 f9a7 	bl	80096f4 <_fstat_r>
 80093a6:	2800      	cmp	r0, #0
 80093a8:	dbf1      	blt.n	800938e <__swhatbuf_r+0x12>
 80093aa:	9a01      	ldr	r2, [sp, #4]
 80093ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80093b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80093b4:	425a      	negs	r2, r3
 80093b6:	415a      	adcs	r2, r3
 80093b8:	602a      	str	r2, [r5, #0]
 80093ba:	e7ee      	b.n	800939a <__swhatbuf_r+0x1e>
 80093bc:	2340      	movs	r3, #64	; 0x40
 80093be:	2000      	movs	r0, #0
 80093c0:	6023      	str	r3, [r4, #0]
 80093c2:	b016      	add	sp, #88	; 0x58
 80093c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080093c8 <__smakebuf_r>:
 80093c8:	898b      	ldrh	r3, [r1, #12]
 80093ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80093cc:	079d      	lsls	r5, r3, #30
 80093ce:	4606      	mov	r6, r0
 80093d0:	460c      	mov	r4, r1
 80093d2:	d507      	bpl.n	80093e4 <__smakebuf_r+0x1c>
 80093d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80093d8:	6023      	str	r3, [r4, #0]
 80093da:	6123      	str	r3, [r4, #16]
 80093dc:	2301      	movs	r3, #1
 80093de:	6163      	str	r3, [r4, #20]
 80093e0:	b002      	add	sp, #8
 80093e2:	bd70      	pop	{r4, r5, r6, pc}
 80093e4:	ab01      	add	r3, sp, #4
 80093e6:	466a      	mov	r2, sp
 80093e8:	f7ff ffc8 	bl	800937c <__swhatbuf_r>
 80093ec:	9900      	ldr	r1, [sp, #0]
 80093ee:	4605      	mov	r5, r0
 80093f0:	4630      	mov	r0, r6
 80093f2:	f000 f895 	bl	8009520 <_malloc_r>
 80093f6:	b948      	cbnz	r0, 800940c <__smakebuf_r+0x44>
 80093f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093fc:	059a      	lsls	r2, r3, #22
 80093fe:	d4ef      	bmi.n	80093e0 <__smakebuf_r+0x18>
 8009400:	f023 0303 	bic.w	r3, r3, #3
 8009404:	f043 0302 	orr.w	r3, r3, #2
 8009408:	81a3      	strh	r3, [r4, #12]
 800940a:	e7e3      	b.n	80093d4 <__smakebuf_r+0xc>
 800940c:	4b0d      	ldr	r3, [pc, #52]	; (8009444 <__smakebuf_r+0x7c>)
 800940e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009410:	89a3      	ldrh	r3, [r4, #12]
 8009412:	6020      	str	r0, [r4, #0]
 8009414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009418:	81a3      	strh	r3, [r4, #12]
 800941a:	9b00      	ldr	r3, [sp, #0]
 800941c:	6163      	str	r3, [r4, #20]
 800941e:	9b01      	ldr	r3, [sp, #4]
 8009420:	6120      	str	r0, [r4, #16]
 8009422:	b15b      	cbz	r3, 800943c <__smakebuf_r+0x74>
 8009424:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009428:	4630      	mov	r0, r6
 800942a:	f000 f975 	bl	8009718 <_isatty_r>
 800942e:	b128      	cbz	r0, 800943c <__smakebuf_r+0x74>
 8009430:	89a3      	ldrh	r3, [r4, #12]
 8009432:	f023 0303 	bic.w	r3, r3, #3
 8009436:	f043 0301 	orr.w	r3, r3, #1
 800943a:	81a3      	strh	r3, [r4, #12]
 800943c:	89a0      	ldrh	r0, [r4, #12]
 800943e:	4305      	orrs	r5, r0
 8009440:	81a5      	strh	r5, [r4, #12]
 8009442:	e7cd      	b.n	80093e0 <__smakebuf_r+0x18>
 8009444:	080091d5 	.word	0x080091d5

08009448 <_free_r>:
 8009448:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800944a:	2900      	cmp	r1, #0
 800944c:	d044      	beq.n	80094d8 <_free_r+0x90>
 800944e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009452:	9001      	str	r0, [sp, #4]
 8009454:	2b00      	cmp	r3, #0
 8009456:	f1a1 0404 	sub.w	r4, r1, #4
 800945a:	bfb8      	it	lt
 800945c:	18e4      	addlt	r4, r4, r3
 800945e:	f000 f97d 	bl	800975c <__malloc_lock>
 8009462:	4a1e      	ldr	r2, [pc, #120]	; (80094dc <_free_r+0x94>)
 8009464:	9801      	ldr	r0, [sp, #4]
 8009466:	6813      	ldr	r3, [r2, #0]
 8009468:	b933      	cbnz	r3, 8009478 <_free_r+0x30>
 800946a:	6063      	str	r3, [r4, #4]
 800946c:	6014      	str	r4, [r2, #0]
 800946e:	b003      	add	sp, #12
 8009470:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009474:	f000 b978 	b.w	8009768 <__malloc_unlock>
 8009478:	42a3      	cmp	r3, r4
 800947a:	d908      	bls.n	800948e <_free_r+0x46>
 800947c:	6825      	ldr	r5, [r4, #0]
 800947e:	1961      	adds	r1, r4, r5
 8009480:	428b      	cmp	r3, r1
 8009482:	bf01      	itttt	eq
 8009484:	6819      	ldreq	r1, [r3, #0]
 8009486:	685b      	ldreq	r3, [r3, #4]
 8009488:	1949      	addeq	r1, r1, r5
 800948a:	6021      	streq	r1, [r4, #0]
 800948c:	e7ed      	b.n	800946a <_free_r+0x22>
 800948e:	461a      	mov	r2, r3
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	b10b      	cbz	r3, 8009498 <_free_r+0x50>
 8009494:	42a3      	cmp	r3, r4
 8009496:	d9fa      	bls.n	800948e <_free_r+0x46>
 8009498:	6811      	ldr	r1, [r2, #0]
 800949a:	1855      	adds	r5, r2, r1
 800949c:	42a5      	cmp	r5, r4
 800949e:	d10b      	bne.n	80094b8 <_free_r+0x70>
 80094a0:	6824      	ldr	r4, [r4, #0]
 80094a2:	4421      	add	r1, r4
 80094a4:	1854      	adds	r4, r2, r1
 80094a6:	42a3      	cmp	r3, r4
 80094a8:	6011      	str	r1, [r2, #0]
 80094aa:	d1e0      	bne.n	800946e <_free_r+0x26>
 80094ac:	681c      	ldr	r4, [r3, #0]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	6053      	str	r3, [r2, #4]
 80094b2:	4421      	add	r1, r4
 80094b4:	6011      	str	r1, [r2, #0]
 80094b6:	e7da      	b.n	800946e <_free_r+0x26>
 80094b8:	d902      	bls.n	80094c0 <_free_r+0x78>
 80094ba:	230c      	movs	r3, #12
 80094bc:	6003      	str	r3, [r0, #0]
 80094be:	e7d6      	b.n	800946e <_free_r+0x26>
 80094c0:	6825      	ldr	r5, [r4, #0]
 80094c2:	1961      	adds	r1, r4, r5
 80094c4:	428b      	cmp	r3, r1
 80094c6:	bf04      	itt	eq
 80094c8:	6819      	ldreq	r1, [r3, #0]
 80094ca:	685b      	ldreq	r3, [r3, #4]
 80094cc:	6063      	str	r3, [r4, #4]
 80094ce:	bf04      	itt	eq
 80094d0:	1949      	addeq	r1, r1, r5
 80094d2:	6021      	streq	r1, [r4, #0]
 80094d4:	6054      	str	r4, [r2, #4]
 80094d6:	e7ca      	b.n	800946e <_free_r+0x26>
 80094d8:	b003      	add	sp, #12
 80094da:	bd30      	pop	{r4, r5, pc}
 80094dc:	200033b4 	.word	0x200033b4

080094e0 <sbrk_aligned>:
 80094e0:	b570      	push	{r4, r5, r6, lr}
 80094e2:	4e0e      	ldr	r6, [pc, #56]	; (800951c <sbrk_aligned+0x3c>)
 80094e4:	460c      	mov	r4, r1
 80094e6:	6831      	ldr	r1, [r6, #0]
 80094e8:	4605      	mov	r5, r0
 80094ea:	b911      	cbnz	r1, 80094f2 <sbrk_aligned+0x12>
 80094ec:	f000 f88c 	bl	8009608 <_sbrk_r>
 80094f0:	6030      	str	r0, [r6, #0]
 80094f2:	4621      	mov	r1, r4
 80094f4:	4628      	mov	r0, r5
 80094f6:	f000 f887 	bl	8009608 <_sbrk_r>
 80094fa:	1c43      	adds	r3, r0, #1
 80094fc:	d00a      	beq.n	8009514 <sbrk_aligned+0x34>
 80094fe:	1cc4      	adds	r4, r0, #3
 8009500:	f024 0403 	bic.w	r4, r4, #3
 8009504:	42a0      	cmp	r0, r4
 8009506:	d007      	beq.n	8009518 <sbrk_aligned+0x38>
 8009508:	1a21      	subs	r1, r4, r0
 800950a:	4628      	mov	r0, r5
 800950c:	f000 f87c 	bl	8009608 <_sbrk_r>
 8009510:	3001      	adds	r0, #1
 8009512:	d101      	bne.n	8009518 <sbrk_aligned+0x38>
 8009514:	f04f 34ff 	mov.w	r4, #4294967295
 8009518:	4620      	mov	r0, r4
 800951a:	bd70      	pop	{r4, r5, r6, pc}
 800951c:	200033b8 	.word	0x200033b8

08009520 <_malloc_r>:
 8009520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009524:	1ccd      	adds	r5, r1, #3
 8009526:	f025 0503 	bic.w	r5, r5, #3
 800952a:	3508      	adds	r5, #8
 800952c:	2d0c      	cmp	r5, #12
 800952e:	bf38      	it	cc
 8009530:	250c      	movcc	r5, #12
 8009532:	2d00      	cmp	r5, #0
 8009534:	4607      	mov	r7, r0
 8009536:	db01      	blt.n	800953c <_malloc_r+0x1c>
 8009538:	42a9      	cmp	r1, r5
 800953a:	d905      	bls.n	8009548 <_malloc_r+0x28>
 800953c:	230c      	movs	r3, #12
 800953e:	603b      	str	r3, [r7, #0]
 8009540:	2600      	movs	r6, #0
 8009542:	4630      	mov	r0, r6
 8009544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009548:	4e2e      	ldr	r6, [pc, #184]	; (8009604 <_malloc_r+0xe4>)
 800954a:	f000 f907 	bl	800975c <__malloc_lock>
 800954e:	6833      	ldr	r3, [r6, #0]
 8009550:	461c      	mov	r4, r3
 8009552:	bb34      	cbnz	r4, 80095a2 <_malloc_r+0x82>
 8009554:	4629      	mov	r1, r5
 8009556:	4638      	mov	r0, r7
 8009558:	f7ff ffc2 	bl	80094e0 <sbrk_aligned>
 800955c:	1c43      	adds	r3, r0, #1
 800955e:	4604      	mov	r4, r0
 8009560:	d14d      	bne.n	80095fe <_malloc_r+0xde>
 8009562:	6834      	ldr	r4, [r6, #0]
 8009564:	4626      	mov	r6, r4
 8009566:	2e00      	cmp	r6, #0
 8009568:	d140      	bne.n	80095ec <_malloc_r+0xcc>
 800956a:	6823      	ldr	r3, [r4, #0]
 800956c:	4631      	mov	r1, r6
 800956e:	4638      	mov	r0, r7
 8009570:	eb04 0803 	add.w	r8, r4, r3
 8009574:	f000 f848 	bl	8009608 <_sbrk_r>
 8009578:	4580      	cmp	r8, r0
 800957a:	d13a      	bne.n	80095f2 <_malloc_r+0xd2>
 800957c:	6821      	ldr	r1, [r4, #0]
 800957e:	3503      	adds	r5, #3
 8009580:	1a6d      	subs	r5, r5, r1
 8009582:	f025 0503 	bic.w	r5, r5, #3
 8009586:	3508      	adds	r5, #8
 8009588:	2d0c      	cmp	r5, #12
 800958a:	bf38      	it	cc
 800958c:	250c      	movcc	r5, #12
 800958e:	4629      	mov	r1, r5
 8009590:	4638      	mov	r0, r7
 8009592:	f7ff ffa5 	bl	80094e0 <sbrk_aligned>
 8009596:	3001      	adds	r0, #1
 8009598:	d02b      	beq.n	80095f2 <_malloc_r+0xd2>
 800959a:	6823      	ldr	r3, [r4, #0]
 800959c:	442b      	add	r3, r5
 800959e:	6023      	str	r3, [r4, #0]
 80095a0:	e00e      	b.n	80095c0 <_malloc_r+0xa0>
 80095a2:	6822      	ldr	r2, [r4, #0]
 80095a4:	1b52      	subs	r2, r2, r5
 80095a6:	d41e      	bmi.n	80095e6 <_malloc_r+0xc6>
 80095a8:	2a0b      	cmp	r2, #11
 80095aa:	d916      	bls.n	80095da <_malloc_r+0xba>
 80095ac:	1961      	adds	r1, r4, r5
 80095ae:	42a3      	cmp	r3, r4
 80095b0:	6025      	str	r5, [r4, #0]
 80095b2:	bf18      	it	ne
 80095b4:	6059      	strne	r1, [r3, #4]
 80095b6:	6863      	ldr	r3, [r4, #4]
 80095b8:	bf08      	it	eq
 80095ba:	6031      	streq	r1, [r6, #0]
 80095bc:	5162      	str	r2, [r4, r5]
 80095be:	604b      	str	r3, [r1, #4]
 80095c0:	4638      	mov	r0, r7
 80095c2:	f104 060b 	add.w	r6, r4, #11
 80095c6:	f000 f8cf 	bl	8009768 <__malloc_unlock>
 80095ca:	f026 0607 	bic.w	r6, r6, #7
 80095ce:	1d23      	adds	r3, r4, #4
 80095d0:	1af2      	subs	r2, r6, r3
 80095d2:	d0b6      	beq.n	8009542 <_malloc_r+0x22>
 80095d4:	1b9b      	subs	r3, r3, r6
 80095d6:	50a3      	str	r3, [r4, r2]
 80095d8:	e7b3      	b.n	8009542 <_malloc_r+0x22>
 80095da:	6862      	ldr	r2, [r4, #4]
 80095dc:	42a3      	cmp	r3, r4
 80095de:	bf0c      	ite	eq
 80095e0:	6032      	streq	r2, [r6, #0]
 80095e2:	605a      	strne	r2, [r3, #4]
 80095e4:	e7ec      	b.n	80095c0 <_malloc_r+0xa0>
 80095e6:	4623      	mov	r3, r4
 80095e8:	6864      	ldr	r4, [r4, #4]
 80095ea:	e7b2      	b.n	8009552 <_malloc_r+0x32>
 80095ec:	4634      	mov	r4, r6
 80095ee:	6876      	ldr	r6, [r6, #4]
 80095f0:	e7b9      	b.n	8009566 <_malloc_r+0x46>
 80095f2:	230c      	movs	r3, #12
 80095f4:	603b      	str	r3, [r7, #0]
 80095f6:	4638      	mov	r0, r7
 80095f8:	f000 f8b6 	bl	8009768 <__malloc_unlock>
 80095fc:	e7a1      	b.n	8009542 <_malloc_r+0x22>
 80095fe:	6025      	str	r5, [r4, #0]
 8009600:	e7de      	b.n	80095c0 <_malloc_r+0xa0>
 8009602:	bf00      	nop
 8009604:	200033b4 	.word	0x200033b4

08009608 <_sbrk_r>:
 8009608:	b538      	push	{r3, r4, r5, lr}
 800960a:	4d06      	ldr	r5, [pc, #24]	; (8009624 <_sbrk_r+0x1c>)
 800960c:	2300      	movs	r3, #0
 800960e:	4604      	mov	r4, r0
 8009610:	4608      	mov	r0, r1
 8009612:	602b      	str	r3, [r5, #0]
 8009614:	f7f7 fe90 	bl	8001338 <_sbrk>
 8009618:	1c43      	adds	r3, r0, #1
 800961a:	d102      	bne.n	8009622 <_sbrk_r+0x1a>
 800961c:	682b      	ldr	r3, [r5, #0]
 800961e:	b103      	cbz	r3, 8009622 <_sbrk_r+0x1a>
 8009620:	6023      	str	r3, [r4, #0]
 8009622:	bd38      	pop	{r3, r4, r5, pc}
 8009624:	200033bc 	.word	0x200033bc

08009628 <__sread>:
 8009628:	b510      	push	{r4, lr}
 800962a:	460c      	mov	r4, r1
 800962c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009630:	f000 f8a0 	bl	8009774 <_read_r>
 8009634:	2800      	cmp	r0, #0
 8009636:	bfab      	itete	ge
 8009638:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800963a:	89a3      	ldrhlt	r3, [r4, #12]
 800963c:	181b      	addge	r3, r3, r0
 800963e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009642:	bfac      	ite	ge
 8009644:	6563      	strge	r3, [r4, #84]	; 0x54
 8009646:	81a3      	strhlt	r3, [r4, #12]
 8009648:	bd10      	pop	{r4, pc}

0800964a <__swrite>:
 800964a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800964e:	461f      	mov	r7, r3
 8009650:	898b      	ldrh	r3, [r1, #12]
 8009652:	05db      	lsls	r3, r3, #23
 8009654:	4605      	mov	r5, r0
 8009656:	460c      	mov	r4, r1
 8009658:	4616      	mov	r6, r2
 800965a:	d505      	bpl.n	8009668 <__swrite+0x1e>
 800965c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009660:	2302      	movs	r3, #2
 8009662:	2200      	movs	r2, #0
 8009664:	f000 f868 	bl	8009738 <_lseek_r>
 8009668:	89a3      	ldrh	r3, [r4, #12]
 800966a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800966e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009672:	81a3      	strh	r3, [r4, #12]
 8009674:	4632      	mov	r2, r6
 8009676:	463b      	mov	r3, r7
 8009678:	4628      	mov	r0, r5
 800967a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800967e:	f000 b817 	b.w	80096b0 <_write_r>

08009682 <__sseek>:
 8009682:	b510      	push	{r4, lr}
 8009684:	460c      	mov	r4, r1
 8009686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800968a:	f000 f855 	bl	8009738 <_lseek_r>
 800968e:	1c43      	adds	r3, r0, #1
 8009690:	89a3      	ldrh	r3, [r4, #12]
 8009692:	bf15      	itete	ne
 8009694:	6560      	strne	r0, [r4, #84]	; 0x54
 8009696:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800969a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800969e:	81a3      	strheq	r3, [r4, #12]
 80096a0:	bf18      	it	ne
 80096a2:	81a3      	strhne	r3, [r4, #12]
 80096a4:	bd10      	pop	{r4, pc}

080096a6 <__sclose>:
 80096a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096aa:	f000 b813 	b.w	80096d4 <_close_r>
	...

080096b0 <_write_r>:
 80096b0:	b538      	push	{r3, r4, r5, lr}
 80096b2:	4d07      	ldr	r5, [pc, #28]	; (80096d0 <_write_r+0x20>)
 80096b4:	4604      	mov	r4, r0
 80096b6:	4608      	mov	r0, r1
 80096b8:	4611      	mov	r1, r2
 80096ba:	2200      	movs	r2, #0
 80096bc:	602a      	str	r2, [r5, #0]
 80096be:	461a      	mov	r2, r3
 80096c0:	f7f7 fb86 	bl	8000dd0 <_write>
 80096c4:	1c43      	adds	r3, r0, #1
 80096c6:	d102      	bne.n	80096ce <_write_r+0x1e>
 80096c8:	682b      	ldr	r3, [r5, #0]
 80096ca:	b103      	cbz	r3, 80096ce <_write_r+0x1e>
 80096cc:	6023      	str	r3, [r4, #0]
 80096ce:	bd38      	pop	{r3, r4, r5, pc}
 80096d0:	200033bc 	.word	0x200033bc

080096d4 <_close_r>:
 80096d4:	b538      	push	{r3, r4, r5, lr}
 80096d6:	4d06      	ldr	r5, [pc, #24]	; (80096f0 <_close_r+0x1c>)
 80096d8:	2300      	movs	r3, #0
 80096da:	4604      	mov	r4, r0
 80096dc:	4608      	mov	r0, r1
 80096de:	602b      	str	r3, [r5, #0]
 80096e0:	f7f7 fdf5 	bl	80012ce <_close>
 80096e4:	1c43      	adds	r3, r0, #1
 80096e6:	d102      	bne.n	80096ee <_close_r+0x1a>
 80096e8:	682b      	ldr	r3, [r5, #0]
 80096ea:	b103      	cbz	r3, 80096ee <_close_r+0x1a>
 80096ec:	6023      	str	r3, [r4, #0]
 80096ee:	bd38      	pop	{r3, r4, r5, pc}
 80096f0:	200033bc 	.word	0x200033bc

080096f4 <_fstat_r>:
 80096f4:	b538      	push	{r3, r4, r5, lr}
 80096f6:	4d07      	ldr	r5, [pc, #28]	; (8009714 <_fstat_r+0x20>)
 80096f8:	2300      	movs	r3, #0
 80096fa:	4604      	mov	r4, r0
 80096fc:	4608      	mov	r0, r1
 80096fe:	4611      	mov	r1, r2
 8009700:	602b      	str	r3, [r5, #0]
 8009702:	f7f7 fdf0 	bl	80012e6 <_fstat>
 8009706:	1c43      	adds	r3, r0, #1
 8009708:	d102      	bne.n	8009710 <_fstat_r+0x1c>
 800970a:	682b      	ldr	r3, [r5, #0]
 800970c:	b103      	cbz	r3, 8009710 <_fstat_r+0x1c>
 800970e:	6023      	str	r3, [r4, #0]
 8009710:	bd38      	pop	{r3, r4, r5, pc}
 8009712:	bf00      	nop
 8009714:	200033bc 	.word	0x200033bc

08009718 <_isatty_r>:
 8009718:	b538      	push	{r3, r4, r5, lr}
 800971a:	4d06      	ldr	r5, [pc, #24]	; (8009734 <_isatty_r+0x1c>)
 800971c:	2300      	movs	r3, #0
 800971e:	4604      	mov	r4, r0
 8009720:	4608      	mov	r0, r1
 8009722:	602b      	str	r3, [r5, #0]
 8009724:	f7f7 fdef 	bl	8001306 <_isatty>
 8009728:	1c43      	adds	r3, r0, #1
 800972a:	d102      	bne.n	8009732 <_isatty_r+0x1a>
 800972c:	682b      	ldr	r3, [r5, #0]
 800972e:	b103      	cbz	r3, 8009732 <_isatty_r+0x1a>
 8009730:	6023      	str	r3, [r4, #0]
 8009732:	bd38      	pop	{r3, r4, r5, pc}
 8009734:	200033bc 	.word	0x200033bc

08009738 <_lseek_r>:
 8009738:	b538      	push	{r3, r4, r5, lr}
 800973a:	4d07      	ldr	r5, [pc, #28]	; (8009758 <_lseek_r+0x20>)
 800973c:	4604      	mov	r4, r0
 800973e:	4608      	mov	r0, r1
 8009740:	4611      	mov	r1, r2
 8009742:	2200      	movs	r2, #0
 8009744:	602a      	str	r2, [r5, #0]
 8009746:	461a      	mov	r2, r3
 8009748:	f7f7 fde8 	bl	800131c <_lseek>
 800974c:	1c43      	adds	r3, r0, #1
 800974e:	d102      	bne.n	8009756 <_lseek_r+0x1e>
 8009750:	682b      	ldr	r3, [r5, #0]
 8009752:	b103      	cbz	r3, 8009756 <_lseek_r+0x1e>
 8009754:	6023      	str	r3, [r4, #0]
 8009756:	bd38      	pop	{r3, r4, r5, pc}
 8009758:	200033bc 	.word	0x200033bc

0800975c <__malloc_lock>:
 800975c:	4801      	ldr	r0, [pc, #4]	; (8009764 <__malloc_lock+0x8>)
 800975e:	f7ff be0b 	b.w	8009378 <__retarget_lock_acquire_recursive>
 8009762:	bf00      	nop
 8009764:	200033b0 	.word	0x200033b0

08009768 <__malloc_unlock>:
 8009768:	4801      	ldr	r0, [pc, #4]	; (8009770 <__malloc_unlock+0x8>)
 800976a:	f7ff be06 	b.w	800937a <__retarget_lock_release_recursive>
 800976e:	bf00      	nop
 8009770:	200033b0 	.word	0x200033b0

08009774 <_read_r>:
 8009774:	b538      	push	{r3, r4, r5, lr}
 8009776:	4d07      	ldr	r5, [pc, #28]	; (8009794 <_read_r+0x20>)
 8009778:	4604      	mov	r4, r0
 800977a:	4608      	mov	r0, r1
 800977c:	4611      	mov	r1, r2
 800977e:	2200      	movs	r2, #0
 8009780:	602a      	str	r2, [r5, #0]
 8009782:	461a      	mov	r2, r3
 8009784:	f7f7 fd86 	bl	8001294 <_read>
 8009788:	1c43      	adds	r3, r0, #1
 800978a:	d102      	bne.n	8009792 <_read_r+0x1e>
 800978c:	682b      	ldr	r3, [r5, #0]
 800978e:	b103      	cbz	r3, 8009792 <_read_r+0x1e>
 8009790:	6023      	str	r3, [r4, #0]
 8009792:	bd38      	pop	{r3, r4, r5, pc}
 8009794:	200033bc 	.word	0x200033bc

08009798 <_init>:
 8009798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800979a:	bf00      	nop
 800979c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800979e:	bc08      	pop	{r3}
 80097a0:	469e      	mov	lr, r3
 80097a2:	4770      	bx	lr

080097a4 <_fini>:
 80097a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a6:	bf00      	nop
 80097a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097aa:	bc08      	pop	{r3}
 80097ac:	469e      	mov	lr, r3
 80097ae:	4770      	bx	lr
