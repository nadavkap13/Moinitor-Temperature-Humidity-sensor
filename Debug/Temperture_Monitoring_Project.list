
Temperture_Monitoring_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  0800cd94  0800cd94  0001cd94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2b0  0800d2b0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800d2b0  0800d2b0  0001d2b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2b8  0800d2b8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800d2b8  0800d2b8  0001d2b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800d2c0  0800d2c0  0001d2c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800d2c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003428  20000078  0800d340  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200034a0  0800d340  000234a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000288bf  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000566e  00000000  00000000  00048967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e88  00000000  00000000  0004dfd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c90  00000000  00000000  0004fe60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000070f0  00000000  00000000  00051af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002442a  00000000  00000000  00058be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010470f  00000000  00000000  0007d00a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00181719  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008fe8  00000000  00000000  0018176c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cd7c 	.word	0x0800cd7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800cd7c 	.word	0x0800cd7c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_uldivmod>:
 8000618:	b953      	cbnz	r3, 8000630 <__aeabi_uldivmod+0x18>
 800061a:	b94a      	cbnz	r2, 8000630 <__aeabi_uldivmod+0x18>
 800061c:	2900      	cmp	r1, #0
 800061e:	bf08      	it	eq
 8000620:	2800      	cmpeq	r0, #0
 8000622:	bf1c      	itt	ne
 8000624:	f04f 31ff 	movne.w	r1, #4294967295
 8000628:	f04f 30ff 	movne.w	r0, #4294967295
 800062c:	f000 b974 	b.w	8000918 <__aeabi_idiv0>
 8000630:	f1ad 0c08 	sub.w	ip, sp, #8
 8000634:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000638:	f000 f806 	bl	8000648 <__udivmoddi4>
 800063c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000640:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000644:	b004      	add	sp, #16
 8000646:	4770      	bx	lr

08000648 <__udivmoddi4>:
 8000648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800064c:	9d08      	ldr	r5, [sp, #32]
 800064e:	4604      	mov	r4, r0
 8000650:	468e      	mov	lr, r1
 8000652:	2b00      	cmp	r3, #0
 8000654:	d14d      	bne.n	80006f2 <__udivmoddi4+0xaa>
 8000656:	428a      	cmp	r2, r1
 8000658:	4694      	mov	ip, r2
 800065a:	d969      	bls.n	8000730 <__udivmoddi4+0xe8>
 800065c:	fab2 f282 	clz	r2, r2
 8000660:	b152      	cbz	r2, 8000678 <__udivmoddi4+0x30>
 8000662:	fa01 f302 	lsl.w	r3, r1, r2
 8000666:	f1c2 0120 	rsb	r1, r2, #32
 800066a:	fa20 f101 	lsr.w	r1, r0, r1
 800066e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000672:	ea41 0e03 	orr.w	lr, r1, r3
 8000676:	4094      	lsls	r4, r2
 8000678:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800067c:	0c21      	lsrs	r1, r4, #16
 800067e:	fbbe f6f8 	udiv	r6, lr, r8
 8000682:	fa1f f78c 	uxth.w	r7, ip
 8000686:	fb08 e316 	mls	r3, r8, r6, lr
 800068a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800068e:	fb06 f107 	mul.w	r1, r6, r7
 8000692:	4299      	cmp	r1, r3
 8000694:	d90a      	bls.n	80006ac <__udivmoddi4+0x64>
 8000696:	eb1c 0303 	adds.w	r3, ip, r3
 800069a:	f106 30ff 	add.w	r0, r6, #4294967295
 800069e:	f080 811f 	bcs.w	80008e0 <__udivmoddi4+0x298>
 80006a2:	4299      	cmp	r1, r3
 80006a4:	f240 811c 	bls.w	80008e0 <__udivmoddi4+0x298>
 80006a8:	3e02      	subs	r6, #2
 80006aa:	4463      	add	r3, ip
 80006ac:	1a5b      	subs	r3, r3, r1
 80006ae:	b2a4      	uxth	r4, r4
 80006b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80006b4:	fb08 3310 	mls	r3, r8, r0, r3
 80006b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006bc:	fb00 f707 	mul.w	r7, r0, r7
 80006c0:	42a7      	cmp	r7, r4
 80006c2:	d90a      	bls.n	80006da <__udivmoddi4+0x92>
 80006c4:	eb1c 0404 	adds.w	r4, ip, r4
 80006c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80006cc:	f080 810a 	bcs.w	80008e4 <__udivmoddi4+0x29c>
 80006d0:	42a7      	cmp	r7, r4
 80006d2:	f240 8107 	bls.w	80008e4 <__udivmoddi4+0x29c>
 80006d6:	4464      	add	r4, ip
 80006d8:	3802      	subs	r0, #2
 80006da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006de:	1be4      	subs	r4, r4, r7
 80006e0:	2600      	movs	r6, #0
 80006e2:	b11d      	cbz	r5, 80006ec <__udivmoddi4+0xa4>
 80006e4:	40d4      	lsrs	r4, r2
 80006e6:	2300      	movs	r3, #0
 80006e8:	e9c5 4300 	strd	r4, r3, [r5]
 80006ec:	4631      	mov	r1, r6
 80006ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006f2:	428b      	cmp	r3, r1
 80006f4:	d909      	bls.n	800070a <__udivmoddi4+0xc2>
 80006f6:	2d00      	cmp	r5, #0
 80006f8:	f000 80ef 	beq.w	80008da <__udivmoddi4+0x292>
 80006fc:	2600      	movs	r6, #0
 80006fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000702:	4630      	mov	r0, r6
 8000704:	4631      	mov	r1, r6
 8000706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070a:	fab3 f683 	clz	r6, r3
 800070e:	2e00      	cmp	r6, #0
 8000710:	d14a      	bne.n	80007a8 <__udivmoddi4+0x160>
 8000712:	428b      	cmp	r3, r1
 8000714:	d302      	bcc.n	800071c <__udivmoddi4+0xd4>
 8000716:	4282      	cmp	r2, r0
 8000718:	f200 80f9 	bhi.w	800090e <__udivmoddi4+0x2c6>
 800071c:	1a84      	subs	r4, r0, r2
 800071e:	eb61 0303 	sbc.w	r3, r1, r3
 8000722:	2001      	movs	r0, #1
 8000724:	469e      	mov	lr, r3
 8000726:	2d00      	cmp	r5, #0
 8000728:	d0e0      	beq.n	80006ec <__udivmoddi4+0xa4>
 800072a:	e9c5 4e00 	strd	r4, lr, [r5]
 800072e:	e7dd      	b.n	80006ec <__udivmoddi4+0xa4>
 8000730:	b902      	cbnz	r2, 8000734 <__udivmoddi4+0xec>
 8000732:	deff      	udf	#255	; 0xff
 8000734:	fab2 f282 	clz	r2, r2
 8000738:	2a00      	cmp	r2, #0
 800073a:	f040 8092 	bne.w	8000862 <__udivmoddi4+0x21a>
 800073e:	eba1 010c 	sub.w	r1, r1, ip
 8000742:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000746:	fa1f fe8c 	uxth.w	lr, ip
 800074a:	2601      	movs	r6, #1
 800074c:	0c20      	lsrs	r0, r4, #16
 800074e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000752:	fb07 1113 	mls	r1, r7, r3, r1
 8000756:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800075a:	fb0e f003 	mul.w	r0, lr, r3
 800075e:	4288      	cmp	r0, r1
 8000760:	d908      	bls.n	8000774 <__udivmoddi4+0x12c>
 8000762:	eb1c 0101 	adds.w	r1, ip, r1
 8000766:	f103 38ff 	add.w	r8, r3, #4294967295
 800076a:	d202      	bcs.n	8000772 <__udivmoddi4+0x12a>
 800076c:	4288      	cmp	r0, r1
 800076e:	f200 80cb 	bhi.w	8000908 <__udivmoddi4+0x2c0>
 8000772:	4643      	mov	r3, r8
 8000774:	1a09      	subs	r1, r1, r0
 8000776:	b2a4      	uxth	r4, r4
 8000778:	fbb1 f0f7 	udiv	r0, r1, r7
 800077c:	fb07 1110 	mls	r1, r7, r0, r1
 8000780:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000784:	fb0e fe00 	mul.w	lr, lr, r0
 8000788:	45a6      	cmp	lr, r4
 800078a:	d908      	bls.n	800079e <__udivmoddi4+0x156>
 800078c:	eb1c 0404 	adds.w	r4, ip, r4
 8000790:	f100 31ff 	add.w	r1, r0, #4294967295
 8000794:	d202      	bcs.n	800079c <__udivmoddi4+0x154>
 8000796:	45a6      	cmp	lr, r4
 8000798:	f200 80bb 	bhi.w	8000912 <__udivmoddi4+0x2ca>
 800079c:	4608      	mov	r0, r1
 800079e:	eba4 040e 	sub.w	r4, r4, lr
 80007a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007a6:	e79c      	b.n	80006e2 <__udivmoddi4+0x9a>
 80007a8:	f1c6 0720 	rsb	r7, r6, #32
 80007ac:	40b3      	lsls	r3, r6
 80007ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80007b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007b6:	fa20 f407 	lsr.w	r4, r0, r7
 80007ba:	fa01 f306 	lsl.w	r3, r1, r6
 80007be:	431c      	orrs	r4, r3
 80007c0:	40f9      	lsrs	r1, r7
 80007c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007c6:	fa00 f306 	lsl.w	r3, r0, r6
 80007ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80007ce:	0c20      	lsrs	r0, r4, #16
 80007d0:	fa1f fe8c 	uxth.w	lr, ip
 80007d4:	fb09 1118 	mls	r1, r9, r8, r1
 80007d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007dc:	fb08 f00e 	mul.w	r0, r8, lr
 80007e0:	4288      	cmp	r0, r1
 80007e2:	fa02 f206 	lsl.w	r2, r2, r6
 80007e6:	d90b      	bls.n	8000800 <__udivmoddi4+0x1b8>
 80007e8:	eb1c 0101 	adds.w	r1, ip, r1
 80007ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80007f0:	f080 8088 	bcs.w	8000904 <__udivmoddi4+0x2bc>
 80007f4:	4288      	cmp	r0, r1
 80007f6:	f240 8085 	bls.w	8000904 <__udivmoddi4+0x2bc>
 80007fa:	f1a8 0802 	sub.w	r8, r8, #2
 80007fe:	4461      	add	r1, ip
 8000800:	1a09      	subs	r1, r1, r0
 8000802:	b2a4      	uxth	r4, r4
 8000804:	fbb1 f0f9 	udiv	r0, r1, r9
 8000808:	fb09 1110 	mls	r1, r9, r0, r1
 800080c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000810:	fb00 fe0e 	mul.w	lr, r0, lr
 8000814:	458e      	cmp	lr, r1
 8000816:	d908      	bls.n	800082a <__udivmoddi4+0x1e2>
 8000818:	eb1c 0101 	adds.w	r1, ip, r1
 800081c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000820:	d26c      	bcs.n	80008fc <__udivmoddi4+0x2b4>
 8000822:	458e      	cmp	lr, r1
 8000824:	d96a      	bls.n	80008fc <__udivmoddi4+0x2b4>
 8000826:	3802      	subs	r0, #2
 8000828:	4461      	add	r1, ip
 800082a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800082e:	fba0 9402 	umull	r9, r4, r0, r2
 8000832:	eba1 010e 	sub.w	r1, r1, lr
 8000836:	42a1      	cmp	r1, r4
 8000838:	46c8      	mov	r8, r9
 800083a:	46a6      	mov	lr, r4
 800083c:	d356      	bcc.n	80008ec <__udivmoddi4+0x2a4>
 800083e:	d053      	beq.n	80008e8 <__udivmoddi4+0x2a0>
 8000840:	b15d      	cbz	r5, 800085a <__udivmoddi4+0x212>
 8000842:	ebb3 0208 	subs.w	r2, r3, r8
 8000846:	eb61 010e 	sbc.w	r1, r1, lr
 800084a:	fa01 f707 	lsl.w	r7, r1, r7
 800084e:	fa22 f306 	lsr.w	r3, r2, r6
 8000852:	40f1      	lsrs	r1, r6
 8000854:	431f      	orrs	r7, r3
 8000856:	e9c5 7100 	strd	r7, r1, [r5]
 800085a:	2600      	movs	r6, #0
 800085c:	4631      	mov	r1, r6
 800085e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000862:	f1c2 0320 	rsb	r3, r2, #32
 8000866:	40d8      	lsrs	r0, r3
 8000868:	fa0c fc02 	lsl.w	ip, ip, r2
 800086c:	fa21 f303 	lsr.w	r3, r1, r3
 8000870:	4091      	lsls	r1, r2
 8000872:	4301      	orrs	r1, r0
 8000874:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000878:	fa1f fe8c 	uxth.w	lr, ip
 800087c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000880:	fb07 3610 	mls	r6, r7, r0, r3
 8000884:	0c0b      	lsrs	r3, r1, #16
 8000886:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800088a:	fb00 f60e 	mul.w	r6, r0, lr
 800088e:	429e      	cmp	r6, r3
 8000890:	fa04 f402 	lsl.w	r4, r4, r2
 8000894:	d908      	bls.n	80008a8 <__udivmoddi4+0x260>
 8000896:	eb1c 0303 	adds.w	r3, ip, r3
 800089a:	f100 38ff 	add.w	r8, r0, #4294967295
 800089e:	d22f      	bcs.n	8000900 <__udivmoddi4+0x2b8>
 80008a0:	429e      	cmp	r6, r3
 80008a2:	d92d      	bls.n	8000900 <__udivmoddi4+0x2b8>
 80008a4:	3802      	subs	r0, #2
 80008a6:	4463      	add	r3, ip
 80008a8:	1b9b      	subs	r3, r3, r6
 80008aa:	b289      	uxth	r1, r1
 80008ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80008b0:	fb07 3316 	mls	r3, r7, r6, r3
 80008b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b8:	fb06 f30e 	mul.w	r3, r6, lr
 80008bc:	428b      	cmp	r3, r1
 80008be:	d908      	bls.n	80008d2 <__udivmoddi4+0x28a>
 80008c0:	eb1c 0101 	adds.w	r1, ip, r1
 80008c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80008c8:	d216      	bcs.n	80008f8 <__udivmoddi4+0x2b0>
 80008ca:	428b      	cmp	r3, r1
 80008cc:	d914      	bls.n	80008f8 <__udivmoddi4+0x2b0>
 80008ce:	3e02      	subs	r6, #2
 80008d0:	4461      	add	r1, ip
 80008d2:	1ac9      	subs	r1, r1, r3
 80008d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008d8:	e738      	b.n	800074c <__udivmoddi4+0x104>
 80008da:	462e      	mov	r6, r5
 80008dc:	4628      	mov	r0, r5
 80008de:	e705      	b.n	80006ec <__udivmoddi4+0xa4>
 80008e0:	4606      	mov	r6, r0
 80008e2:	e6e3      	b.n	80006ac <__udivmoddi4+0x64>
 80008e4:	4618      	mov	r0, r3
 80008e6:	e6f8      	b.n	80006da <__udivmoddi4+0x92>
 80008e8:	454b      	cmp	r3, r9
 80008ea:	d2a9      	bcs.n	8000840 <__udivmoddi4+0x1f8>
 80008ec:	ebb9 0802 	subs.w	r8, r9, r2
 80008f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008f4:	3801      	subs	r0, #1
 80008f6:	e7a3      	b.n	8000840 <__udivmoddi4+0x1f8>
 80008f8:	4646      	mov	r6, r8
 80008fa:	e7ea      	b.n	80008d2 <__udivmoddi4+0x28a>
 80008fc:	4620      	mov	r0, r4
 80008fe:	e794      	b.n	800082a <__udivmoddi4+0x1e2>
 8000900:	4640      	mov	r0, r8
 8000902:	e7d1      	b.n	80008a8 <__udivmoddi4+0x260>
 8000904:	46d0      	mov	r8, sl
 8000906:	e77b      	b.n	8000800 <__udivmoddi4+0x1b8>
 8000908:	3b02      	subs	r3, #2
 800090a:	4461      	add	r1, ip
 800090c:	e732      	b.n	8000774 <__udivmoddi4+0x12c>
 800090e:	4630      	mov	r0, r6
 8000910:	e709      	b.n	8000726 <__udivmoddi4+0xde>
 8000912:	4464      	add	r4, ip
 8000914:	3802      	subs	r0, #2
 8000916:	e742      	b.n	800079e <__udivmoddi4+0x156>

08000918 <__aeabi_idiv0>:
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop

0800091c <_ZN3CliD1Ev>:
#include "main.h"
class Cli{
public:
	virtual void doCommand(const char * param) = 0;

	virtual ~Cli(){}
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	4a04      	ldr	r2, [pc, #16]	; (8000938 <_ZN3CliD1Ev+0x1c>)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4618      	mov	r0, r3
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	0800cf78 	.word	0x0800cf78

0800093c <_ZN3CliD0Ev>:
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f7ff ffe9 	bl	800091c <_ZN3CliD1Ev>
 800094a:	2104      	movs	r1, #4
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f00a fbad 	bl	800b0ac <_ZdlPvj>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4618      	mov	r0, r3
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <_ZN12CliContainer15RegisterCommandEPKcP3Cli>:
	clicommand_entry commands[20];
	int funcounter = 0;
public:
	CliContainer(){}
	~CliContainer(){}
	void RegisterCommand(const  char* CommandName, Cli * clicommand) {
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
		commands[funcounter].CommandName = CommandName;
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	68b9      	ldr	r1, [r7, #8]
 8000972:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
		commands[funcounter].command = clicommand;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800097c:	68fa      	ldr	r2, [r7, #12]
 800097e:	00db      	lsls	r3, r3, #3
 8000980:	4413      	add	r3, r2
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	605a      	str	r2, [r3, #4]
		funcounter++;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800098c:	1c5a      	adds	r2, r3, #1
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	}
 8000994:	bf00      	nop
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <_ZN3CliC1Ev>:
class Cli{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	4a04      	ldr	r2, [pc, #16]	; (80009bc <_ZN3CliC1Ev+0x1c>)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4618      	mov	r0, r3
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	0800cf78 	.word	0x0800cf78

080009c0 <_ZN5ledOnC1EP3LED>:
extern BUZZER buzzer;
class ledOn : public Cli{
private:
	LED * _led;
public:
	ledOn(LED * led){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ffe7 	bl	80009a0 <_ZN3CliC1Ev>
 80009d2:	4a05      	ldr	r2, [pc, #20]	; (80009e8 <_ZN5ledOnC1EP3LED+0x28>)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	601a      	str	r2, [r3, #0]
		_led = led;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	683a      	ldr	r2, [r7, #0]
 80009dc:	605a      	str	r2, [r3, #4]
	}
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4618      	mov	r0, r3
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	0800cf64 	.word	0x0800cf64

080009ec <_ZN5ledOn9doCommandEPKc>:
	void doCommand(const char * param) override{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
		_led->Led_On();
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 fcac 	bl	8001358 <_ZN3LED6Led_OnEv>
	}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <_ZN6ledOffC1EP3LED>:
};
class ledOff : public Cli{
private:
	LED * _led;
public:
	ledOff(LED * led){
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff ffc3 	bl	80009a0 <_ZN3CliC1Ev>
 8000a1a:	4a05      	ldr	r2, [pc, #20]	; (8000a30 <_ZN6ledOffC1EP3LED+0x28>)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	601a      	str	r2, [r3, #0]
		_led = led;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	683a      	ldr	r2, [r7, #0]
 8000a24:	605a      	str	r2, [r3, #4]
	}
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	0800cf50 	.word	0x0800cf50

08000a34 <_ZN6ledOff9doCommandEPKc>:
	void doCommand(const char * param) override{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
		_led->Led_Off();
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 fc98 	bl	8001378 <_ZN3LED7Led_OffEv>
	}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <_ZN8ledBlinkC1EP3LED>:
};
class ledBlink : public Cli{
private:
	LED * _led;
public:
	ledBlink(LED * led){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ff9f 	bl	80009a0 <_ZN3CliC1Ev>
 8000a62:	4a05      	ldr	r2, [pc, #20]	; (8000a78 <_ZN8ledBlinkC1EP3LED+0x28>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	601a      	str	r2, [r3, #0]
		_led = led;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	683a      	ldr	r2, [r7, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
	}
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4618      	mov	r0, r3
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	0800cf3c 	.word	0x0800cf3c

08000a7c <_ZN8ledBlink9doCommandEPKc>:
	void doCommand(const char * param) override{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
		_led->Led_Blink();
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 fc84 	bl	8001398 <_ZN3LED9Led_BlinkEv>
	}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <_ZN8rtcstartC1EP4_RTC>:

class rtcstart : public Cli{
private:
	_RTC * _rtc;
public:
	rtcstart(_RTC * rtc){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ff7b 	bl	80009a0 <_ZN3CliC1Ev>
 8000aaa:	4a05      	ldr	r2, [pc, #20]	; (8000ac0 <_ZN8rtcstartC1EP4_RTC+0x28>)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	601a      	str	r2, [r3, #0]
		_rtc = rtc;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	683a      	ldr	r2, [r7, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
	}
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	0800cf28 	.word	0x0800cf28

08000ac4 <_ZN8rtcstart9doCommandEPKc>:
	void doCommand(const char * param) override{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]

		_rtc->rtcStart();
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 fc92 	bl	80013fc <_ZN4_RTC8rtcStartEv>
	}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <_ZN10rtcgettimeC1EP4_RTC>:
};
class rtcgettime : public Cli{
private:
	_RTC * _rtc;
public:
	rtcgettime(_RTC * rtc){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff57 	bl	80009a0 <_ZN3CliC1Ev>
 8000af2:	4a05      	ldr	r2, [pc, #20]	; (8000b08 <_ZN10rtcgettimeC1EP4_RTC+0x28>)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	601a      	str	r2, [r3, #0]
		_rtc = rtc;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	683a      	ldr	r2, [r7, #0]
 8000afc:	605a      	str	r2, [r3, #4]
	}
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4618      	mov	r0, r3
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	0800cf14 	.word	0x0800cf14

08000b0c <_ZN10rtcgettime9doCommandEPKc>:
	void doCommand(const char * param) override{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]

		_rtc->rtcGetTime();
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 fd16 	bl	800154c <_ZN4_RTC10rtcGetTimeEv>

	}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <_ZN10rtcsettimeC1EP4_RTC>:
};
class rtcsettime : public Cli{
private:
	_RTC * _rtc;
public:
	rtcsettime(_RTC * rtc){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff ff33 	bl	80009a0 <_ZN3CliC1Ev>
 8000b3a:	4a05      	ldr	r2, [pc, #20]	; (8000b50 <_ZN10rtcsettimeC1EP4_RTC+0x28>)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	601a      	str	r2, [r3, #0]
		_rtc = rtc;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	683a      	ldr	r2, [r7, #0]
 8000b44:	605a      	str	r2, [r3, #4]
	}
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	0800cf00 	.word	0x0800cf00

08000b54 <_ZN10rtcsettime9doCommandEPKc>:
	void doCommand(const char * param) override{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b098      	sub	sp, #96	; 0x60
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]

		char * token;
		char s[3] = ":";
 8000b5e:	4b3b      	ldr	r3, [pc, #236]	; (8000c4c <_ZN10rtcsettime9doCommandEPKc+0xf8>)
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8000b66:	2300      	movs	r3, #0
 8000b68:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
		char temp[50];
		strcpy(temp,param);
 8000b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b70:	6839      	ldr	r1, [r7, #0]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f00a fd5b 	bl	800b62e <strcpy>
		DateTime tempdate;

		token = strtok(temp, s);
 8000b78:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b80:	4611      	mov	r1, r2
 8000b82:	4618      	mov	r0, r3
 8000b84:	f00a fd5c 	bl	800b640 <strtok>
 8000b88:	65f8      	str	r0, [r7, #92]	; 0x5c
		tempdate.hours = atoi(token);
 8000b8a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000b8c:	f00a fac7 	bl	800b11e <atoi>
 8000b90:	4603      	mov	r3, r0
 8000b92:	613b      	str	r3, [r7, #16]
		token = strtok(NULL, s);
 8000b94:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b98:	4619      	mov	r1, r3
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f00a fd50 	bl	800b640 <strtok>
 8000ba0:	65f8      	str	r0, [r7, #92]	; 0x5c

		tempdate.min = atoi(token);
 8000ba2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000ba4:	f00a fabb 	bl	800b11e <atoi>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	60fb      	str	r3, [r7, #12]
		token = strtok(NULL, s);
 8000bac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	f00a fd44 	bl	800b640 <strtok>
 8000bb8:	65f8      	str	r0, [r7, #92]	; 0x5c

		tempdate.sec = atoi(token);
 8000bba:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000bbc:	f00a faaf 	bl	800b11e <atoi>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	60bb      	str	r3, [r7, #8]
		token = strtok(NULL, s);
 8000bc4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000bc8:	4619      	mov	r1, r3
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f00a fd38 	bl	800b640 <strtok>
 8000bd0:	65f8      	str	r0, [r7, #92]	; 0x5c

		tempdate.weekDay = atoi(token);
 8000bd2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000bd4:	f00a faa3 	bl	800b11e <atoi>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	617b      	str	r3, [r7, #20]
		token = strtok(NULL, s);
 8000bdc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000be0:	4619      	mov	r1, r3
 8000be2:	2000      	movs	r0, #0
 8000be4:	f00a fd2c 	bl	800b640 <strtok>
 8000be8:	65f8      	str	r0, [r7, #92]	; 0x5c

		tempdate.day = atoi(token);
 8000bea:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000bec:	f00a fa97 	bl	800b11e <atoi>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	61bb      	str	r3, [r7, #24]
		token = strtok(NULL, s);
 8000bf4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f00a fd20 	bl	800b640 <strtok>
 8000c00:	65f8      	str	r0, [r7, #92]	; 0x5c

		tempdate.month = atoi(token);
 8000c02:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000c04:	f00a fa8b 	bl	800b11e <atoi>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	61fb      	str	r3, [r7, #28]
		token = strtok(NULL, s);
 8000c0c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c10:	4619      	mov	r1, r3
 8000c12:	2000      	movs	r0, #0
 8000c14:	f00a fd14 	bl	800b640 <strtok>
 8000c18:	65f8      	str	r0, [r7, #92]	; 0x5c

		tempdate.year = atoi(token);
 8000c1a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000c1c:	f00a fa7f 	bl	800b11e <atoi>
 8000c20:	4603      	mov	r3, r0
 8000c22:	623b      	str	r3, [r7, #32]
		token = strtok(NULL, s);
 8000c24:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c28:	4619      	mov	r1, r3
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f00a fd08 	bl	800b640 <strtok>
 8000c30:	65f8      	str	r0, [r7, #92]	; 0x5c




		_rtc->rtcSetTime(&tempdate);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f107 0208 	add.w	r2, r7, #8
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 fd03 	bl	8001648 <_ZN4_RTC10rtcSetTimeEP9DateTime_>
	}
 8000c42:	bf00      	nop
 8000c44:	3760      	adds	r7, #96	; 0x60
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	0800cd94 	.word	0x0800cd94

08000c50 <_ZN7rtcstopC1EP4_RTC>:
};
class rtcstop : public Cli{
private:
	_RTC * _rtc;
public:
	rtcstop(_RTC * rtc){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fe9f 	bl	80009a0 <_ZN3CliC1Ev>
 8000c62:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <_ZN7rtcstopC1EP4_RTC+0x28>)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	601a      	str	r2, [r3, #0]
		_rtc = rtc;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	683a      	ldr	r2, [r7, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
	}
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	0800ceec 	.word	0x0800ceec

08000c7c <_ZN7rtcstop9doCommandEPKc>:
	void doCommand(const char * param) override{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]

		_rtc->rtcStop();
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 fbe5 	bl	800145a <_ZN4_RTC7rtcStopEv>
	}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <_ZN8buzzeronC1EP6BUZZER>:
};
class buzzeron : public Cli{
private:
	BUZZER * _buzzer;
public:
	buzzeron(BUZZER * buzzer){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fe7b 	bl	80009a0 <_ZN3CliC1Ev>
 8000caa:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <_ZN8buzzeronC1EP6BUZZER+0x28>)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	601a      	str	r2, [r3, #0]
		_buzzer = buzzer;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	683a      	ldr	r2, [r7, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
	}
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	0800ced8 	.word	0x0800ced8

08000cc4 <_ZN8buzzeron9doCommandEPKc>:
	void doCommand(const char * param) override{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
		_buzzer->buzzerStartPlay();
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f001 f8c6 	bl	8001e64 <_ZN6BUZZER15buzzerStartPlayEv>
	}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <_ZN9buzzeroffC1EP6BUZZER>:
};
class buzzeroff : public Cli{
private:
	BUZZER * _buzzer;
public:
	buzzeroff(BUZZER * buzzer){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fe57 	bl	80009a0 <_ZN3CliC1Ev>
 8000cf2:	4a05      	ldr	r2, [pc, #20]	; (8000d08 <_ZN9buzzeroffC1EP6BUZZER+0x28>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	601a      	str	r2, [r3, #0]
		_buzzer = buzzer;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	683a      	ldr	r2, [r7, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
	}
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4618      	mov	r0, r3
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	0800cec4 	.word	0x0800cec4

08000d0c <_ZN9buzzeroff9doCommandEPKc>:
	void doCommand(const char * param) override{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
		_buzzer->buzzerStopPlay();
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f001 f8ba 	bl	8001e94 <_ZN6BUZZER14buzzerStopPlayEv>
	}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <_ZN12CliContainer16initCLIcontainerEv>:
};


void CliContainer::initCLIcontainer(){
 8000d28:	b590      	push	{r4, r7, lr}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	container.RegisterCommand("ledon",new ledOn(&ledblue));
 8000d30:	2008      	movs	r0, #8
 8000d32:	f00a f9bd 	bl	800b0b0 <_Znwj>
 8000d36:	4603      	mov	r3, r0
 8000d38:	461c      	mov	r4, r3
 8000d3a:	493e      	ldr	r1, [pc, #248]	; (8000e34 <_ZN12CliContainer16initCLIcontainerEv+0x10c>)
 8000d3c:	4620      	mov	r0, r4
 8000d3e:	f7ff fe3f 	bl	80009c0 <_ZN5ledOnC1EP3LED>
 8000d42:	4622      	mov	r2, r4
 8000d44:	493c      	ldr	r1, [pc, #240]	; (8000e38 <_ZN12CliContainer16initCLIcontainerEv+0x110>)
 8000d46:	483d      	ldr	r0, [pc, #244]	; (8000e3c <_ZN12CliContainer16initCLIcontainerEv+0x114>)
 8000d48:	f7ff fe08 	bl	800095c <_ZN12CliContainer15RegisterCommandEPKcP3Cli>
	container.RegisterCommand("ledoff",new ledOff(&ledblue));
 8000d4c:	2008      	movs	r0, #8
 8000d4e:	f00a f9af 	bl	800b0b0 <_Znwj>
 8000d52:	4603      	mov	r3, r0
 8000d54:	461c      	mov	r4, r3
 8000d56:	4937      	ldr	r1, [pc, #220]	; (8000e34 <_ZN12CliContainer16initCLIcontainerEv+0x10c>)
 8000d58:	4620      	mov	r0, r4
 8000d5a:	f7ff fe55 	bl	8000a08 <_ZN6ledOffC1EP3LED>
 8000d5e:	4622      	mov	r2, r4
 8000d60:	4937      	ldr	r1, [pc, #220]	; (8000e40 <_ZN12CliContainer16initCLIcontainerEv+0x118>)
 8000d62:	4836      	ldr	r0, [pc, #216]	; (8000e3c <_ZN12CliContainer16initCLIcontainerEv+0x114>)
 8000d64:	f7ff fdfa 	bl	800095c <_ZN12CliContainer15RegisterCommandEPKcP3Cli>
	container.RegisterCommand("ledblink",new ledBlink(&ledblue));
 8000d68:	2008      	movs	r0, #8
 8000d6a:	f00a f9a1 	bl	800b0b0 <_Znwj>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	461c      	mov	r4, r3
 8000d72:	4930      	ldr	r1, [pc, #192]	; (8000e34 <_ZN12CliContainer16initCLIcontainerEv+0x10c>)
 8000d74:	4620      	mov	r0, r4
 8000d76:	f7ff fe6b 	bl	8000a50 <_ZN8ledBlinkC1EP3LED>
 8000d7a:	4622      	mov	r2, r4
 8000d7c:	4931      	ldr	r1, [pc, #196]	; (8000e44 <_ZN12CliContainer16initCLIcontainerEv+0x11c>)
 8000d7e:	482f      	ldr	r0, [pc, #188]	; (8000e3c <_ZN12CliContainer16initCLIcontainerEv+0x114>)
 8000d80:	f7ff fdec 	bl	800095c <_ZN12CliContainer15RegisterCommandEPKcP3Cli>
	container.RegisterCommand("settime",new rtcsettime(&rtc));
 8000d84:	2008      	movs	r0, #8
 8000d86:	f00a f993 	bl	800b0b0 <_Znwj>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	461c      	mov	r4, r3
 8000d8e:	492e      	ldr	r1, [pc, #184]	; (8000e48 <_ZN12CliContainer16initCLIcontainerEv+0x120>)
 8000d90:	4620      	mov	r0, r4
 8000d92:	f7ff fec9 	bl	8000b28 <_ZN10rtcsettimeC1EP4_RTC>
 8000d96:	4622      	mov	r2, r4
 8000d98:	492c      	ldr	r1, [pc, #176]	; (8000e4c <_ZN12CliContainer16initCLIcontainerEv+0x124>)
 8000d9a:	4828      	ldr	r0, [pc, #160]	; (8000e3c <_ZN12CliContainer16initCLIcontainerEv+0x114>)
 8000d9c:	f7ff fdde 	bl	800095c <_ZN12CliContainer15RegisterCommandEPKcP3Cli>
	container.RegisterCommand("gettime",new rtcgettime(&rtc));
 8000da0:	2008      	movs	r0, #8
 8000da2:	f00a f985 	bl	800b0b0 <_Znwj>
 8000da6:	4603      	mov	r3, r0
 8000da8:	461c      	mov	r4, r3
 8000daa:	4927      	ldr	r1, [pc, #156]	; (8000e48 <_ZN12CliContainer16initCLIcontainerEv+0x120>)
 8000dac:	4620      	mov	r0, r4
 8000dae:	f7ff fe97 	bl	8000ae0 <_ZN10rtcgettimeC1EP4_RTC>
 8000db2:	4622      	mov	r2, r4
 8000db4:	4926      	ldr	r1, [pc, #152]	; (8000e50 <_ZN12CliContainer16initCLIcontainerEv+0x128>)
 8000db6:	4821      	ldr	r0, [pc, #132]	; (8000e3c <_ZN12CliContainer16initCLIcontainerEv+0x114>)
 8000db8:	f7ff fdd0 	bl	800095c <_ZN12CliContainer15RegisterCommandEPKcP3Cli>
	container.RegisterCommand("rtcstart",new rtcstart(&rtc));
 8000dbc:	2008      	movs	r0, #8
 8000dbe:	f00a f977 	bl	800b0b0 <_Znwj>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	461c      	mov	r4, r3
 8000dc6:	4920      	ldr	r1, [pc, #128]	; (8000e48 <_ZN12CliContainer16initCLIcontainerEv+0x120>)
 8000dc8:	4620      	mov	r0, r4
 8000dca:	f7ff fe65 	bl	8000a98 <_ZN8rtcstartC1EP4_RTC>
 8000dce:	4622      	mov	r2, r4
 8000dd0:	4920      	ldr	r1, [pc, #128]	; (8000e54 <_ZN12CliContainer16initCLIcontainerEv+0x12c>)
 8000dd2:	481a      	ldr	r0, [pc, #104]	; (8000e3c <_ZN12CliContainer16initCLIcontainerEv+0x114>)
 8000dd4:	f7ff fdc2 	bl	800095c <_ZN12CliContainer15RegisterCommandEPKcP3Cli>
	container.RegisterCommand("rtcstop",new rtcstop(&rtc));
 8000dd8:	2008      	movs	r0, #8
 8000dda:	f00a f969 	bl	800b0b0 <_Znwj>
 8000dde:	4603      	mov	r3, r0
 8000de0:	461c      	mov	r4, r3
 8000de2:	4919      	ldr	r1, [pc, #100]	; (8000e48 <_ZN12CliContainer16initCLIcontainerEv+0x120>)
 8000de4:	4620      	mov	r0, r4
 8000de6:	f7ff ff33 	bl	8000c50 <_ZN7rtcstopC1EP4_RTC>
 8000dea:	4622      	mov	r2, r4
 8000dec:	491a      	ldr	r1, [pc, #104]	; (8000e58 <_ZN12CliContainer16initCLIcontainerEv+0x130>)
 8000dee:	4813      	ldr	r0, [pc, #76]	; (8000e3c <_ZN12CliContainer16initCLIcontainerEv+0x114>)
 8000df0:	f7ff fdb4 	bl	800095c <_ZN12CliContainer15RegisterCommandEPKcP3Cli>
	container.RegisterCommand("play",new buzzeron(&buzzer));
 8000df4:	2008      	movs	r0, #8
 8000df6:	f00a f95b 	bl	800b0b0 <_Znwj>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	461c      	mov	r4, r3
 8000dfe:	4917      	ldr	r1, [pc, #92]	; (8000e5c <_ZN12CliContainer16initCLIcontainerEv+0x134>)
 8000e00:	4620      	mov	r0, r4
 8000e02:	f7ff ff49 	bl	8000c98 <_ZN8buzzeronC1EP6BUZZER>
 8000e06:	4622      	mov	r2, r4
 8000e08:	4915      	ldr	r1, [pc, #84]	; (8000e60 <_ZN12CliContainer16initCLIcontainerEv+0x138>)
 8000e0a:	480c      	ldr	r0, [pc, #48]	; (8000e3c <_ZN12CliContainer16initCLIcontainerEv+0x114>)
 8000e0c:	f7ff fda6 	bl	800095c <_ZN12CliContainer15RegisterCommandEPKcP3Cli>
	container.RegisterCommand("stop",new buzzeroff(&buzzer));
 8000e10:	2008      	movs	r0, #8
 8000e12:	f00a f94d 	bl	800b0b0 <_Znwj>
 8000e16:	4603      	mov	r3, r0
 8000e18:	461c      	mov	r4, r3
 8000e1a:	4910      	ldr	r1, [pc, #64]	; (8000e5c <_ZN12CliContainer16initCLIcontainerEv+0x134>)
 8000e1c:	4620      	mov	r0, r4
 8000e1e:	f7ff ff5f 	bl	8000ce0 <_ZN9buzzeroffC1EP6BUZZER>
 8000e22:	4622      	mov	r2, r4
 8000e24:	490f      	ldr	r1, [pc, #60]	; (8000e64 <_ZN12CliContainer16initCLIcontainerEv+0x13c>)
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <_ZN12CliContainer16initCLIcontainerEv+0x114>)
 8000e28:	f7ff fd98 	bl	800095c <_ZN12CliContainer15RegisterCommandEPKcP3Cli>
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd90      	pop	{r4, r7, pc}
 8000e34:	200003a8 	.word	0x200003a8
 8000e38:	0800cd98 	.word	0x0800cd98
 8000e3c:	20000304 	.word	0x20000304
 8000e40:	0800cda0 	.word	0x0800cda0
 8000e44:	0800cda8 	.word	0x0800cda8
 8000e48:	200002f8 	.word	0x200002f8
 8000e4c:	0800cdb4 	.word	0x0800cdb4
 8000e50:	0800cdbc 	.word	0x0800cdbc
 8000e54:	0800cdc4 	.word	0x0800cdc4
 8000e58:	0800cdd0 	.word	0x0800cdd0
 8000e5c:	200003bc 	.word	0x200003bc
 8000e60:	0800cdd8 	.word	0x0800cdd8
 8000e64:	0800cde0 	.word	0x0800cde0

08000e68 <_ZN9buzzeroffD1Ev>:
class buzzeroff : public Cli{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <_ZN9buzzeroffD1Ev+0x20>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fd4f 	bl	800091c <_ZN3CliD1Ev>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4618      	mov	r0, r3
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	0800cec4 	.word	0x0800cec4

08000e8c <_ZN9buzzeroffD0Ev>:
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff ffe7 	bl	8000e68 <_ZN9buzzeroffD1Ev>
 8000e9a:	2108      	movs	r1, #8
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f00a f905 	bl	800b0ac <_ZdlPvj>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <_ZN8buzzeronD1Ev>:
class buzzeron : public Cli{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	4a05      	ldr	r2, [pc, #20]	; (8000ecc <_ZN8buzzeronD1Ev+0x20>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fd2d 	bl	800091c <_ZN3CliD1Ev>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	0800ced8 	.word	0x0800ced8

08000ed0 <_ZN8buzzeronD0Ev>:
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ffe7 	bl	8000eac <_ZN8buzzeronD1Ev>
 8000ede:	2108      	movs	r1, #8
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f00a f8e3 	bl	800b0ac <_ZdlPvj>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <_ZN7rtcstopD1Ev>:
class rtcstop : public Cli{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	4a05      	ldr	r2, [pc, #20]	; (8000f10 <_ZN7rtcstopD1Ev+0x20>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fd0b 	bl	800091c <_ZN3CliD1Ev>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	0800ceec 	.word	0x0800ceec

08000f14 <_ZN7rtcstopD0Ev>:
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff ffe7 	bl	8000ef0 <_ZN7rtcstopD1Ev>
 8000f22:	2108      	movs	r1, #8
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f00a f8c1 	bl	800b0ac <_ZdlPvj>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <_ZN10rtcsettimeD1Ev>:
class rtcsettime : public Cli{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	4a05      	ldr	r2, [pc, #20]	; (8000f54 <_ZN10rtcsettimeD1Ev+0x20>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fce9 	bl	800091c <_ZN3CliD1Ev>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	0800cf00 	.word	0x0800cf00

08000f58 <_ZN10rtcsettimeD0Ev>:
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff ffe7 	bl	8000f34 <_ZN10rtcsettimeD1Ev>
 8000f66:	2108      	movs	r1, #8
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f00a f89f 	bl	800b0ac <_ZdlPvj>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <_ZN10rtcgettimeD1Ev>:
class rtcgettime : public Cli{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <_ZN10rtcgettimeD1Ev+0x20>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fcc7 	bl	800091c <_ZN3CliD1Ev>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4618      	mov	r0, r3
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	0800cf14 	.word	0x0800cf14

08000f9c <_ZN10rtcgettimeD0Ev>:
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ffe7 	bl	8000f78 <_ZN10rtcgettimeD1Ev>
 8000faa:	2108      	movs	r1, #8
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f00a f87d 	bl	800b0ac <_ZdlPvj>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <_ZN8rtcstartD1Ev>:
class rtcstart : public Cli{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	4a05      	ldr	r2, [pc, #20]	; (8000fdc <_ZN8rtcstartD1Ev+0x20>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fca5 	bl	800091c <_ZN3CliD1Ev>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	0800cf28 	.word	0x0800cf28

08000fe0 <_ZN8rtcstartD0Ev>:
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ffe7 	bl	8000fbc <_ZN8rtcstartD1Ev>
 8000fee:	2108      	movs	r1, #8
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f00a f85b 	bl	800b0ac <_ZdlPvj>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <_ZN8ledBlinkD1Ev>:
class ledBlink : public Cli{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	4a05      	ldr	r2, [pc, #20]	; (8001020 <_ZN8ledBlinkD1Ev+0x20>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fc83 	bl	800091c <_ZN3CliD1Ev>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	0800cf3c 	.word	0x0800cf3c

08001024 <_ZN8ledBlinkD0Ev>:
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff ffe7 	bl	8001000 <_ZN8ledBlinkD1Ev>
 8001032:	2108      	movs	r1, #8
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f00a f839 	bl	800b0ac <_ZdlPvj>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <_ZN6ledOffD1Ev>:
class ledOff : public Cli{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	4a05      	ldr	r2, [pc, #20]	; (8001064 <_ZN6ledOffD1Ev+0x20>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fc61 	bl	800091c <_ZN3CliD1Ev>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	0800cf50 	.word	0x0800cf50

08001068 <_ZN6ledOffD0Ev>:
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ffe7 	bl	8001044 <_ZN6ledOffD1Ev>
 8001076:	2108      	movs	r1, #8
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f00a f817 	bl	800b0ac <_ZdlPvj>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <_ZN5ledOnD1Ev>:
class ledOn : public Cli{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	4a05      	ldr	r2, [pc, #20]	; (80010a8 <_ZN5ledOnD1Ev+0x20>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fc3f 	bl	800091c <_ZN3CliD1Ev>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4618      	mov	r0, r3
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	0800cf64 	.word	0x0800cf64

080010ac <_ZN5ledOnD0Ev>:
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ffe7 	bl	8001088 <_ZN5ledOnD1Ev>
 80010ba:	2108      	movs	r1, #8
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f009 fff5 	bl	800b0ac <_ZdlPvj>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <_ZN3DHTC1EP12GPIO_TypeDeft>:

GPIO_InitTypeDef gpioStruct;
static uint8_t DHT_data[5];
extern TIM_HandleTypeDef htim1;

DHT::DHT(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	4613      	mov	r3, r2
 80010d8:	80fb      	strh	r3, [r7, #6]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2200      	movs	r2, #0
 80010de:	615a      	str	r2, [r3, #20]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2200      	movs	r2, #0
 80010e4:	761a      	strb	r2, [r3, #24]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2200      	movs	r2, #0
 80010ea:	765a      	strb	r2, [r3, #25]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2200      	movs	r2, #0
 80010f0:	769a      	strb	r2, [r3, #26]
	_GPIOx = GPIOx;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	68ba      	ldr	r2, [r7, #8]
 80010f6:	601a      	str	r2, [r3, #0]
	_GPIO_Pin = GPIO_Pin;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	88fa      	ldrh	r2, [r7, #6]
 80010fc:	809a      	strh	r2, [r3, #4]
	dhtPin = WAKING;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2200      	movs	r2, #0
 8001102:	719a      	strb	r2, [r3, #6]
	bitcount=0;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	2200      	movs	r2, #0
 8001108:	611a      	str	r2, [r3, #16]

}
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	4618      	mov	r0, r3
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <_ZN3DHT11setGpioExtiEv>:

 void DHT::setGpioExti()
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpioStruct = {0};
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
	gpioStruct.Pin = _GPIO_Pin;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	889b      	ldrh	r3, [r3, #4]
 8001134:	60fb      	str	r3, [r7, #12]
	gpioStruct.Mode = GPIO_MODE_IT_FALLING;
 8001136:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800113a:	613b      	str	r3, [r7, #16]
	gpioStruct.Pull = GPIO_PULLUP;
 800113c:	2301      	movs	r3, #1
 800113e:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(_GPIOx, &gpioStruct);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f107 020c 	add.w	r2, r7, #12
 8001148:	4611      	mov	r1, r2
 800114a:	4618      	mov	r0, r3
 800114c:	f001 fc7e 	bl	8002a4c <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001150:	2017      	movs	r0, #23
 8001152:	f001 fbed 	bl	8002930 <HAL_NVIC_EnableIRQ>
}
 8001156:	bf00      	nop
 8001158:	3720      	adds	r7, #32
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <_ZN3DHT13Dht_readAsyncEv>:

void DHT::Dht_readAsync()
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpioStruct;
	gpioStruct.Pin = pin_4_Pin;
 8001168:	2320      	movs	r3, #32
 800116a:	60fb      	str	r3, [r7, #12]
	gpioStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116c:	2301      	movs	r3, #1
 800116e:	613b      	str	r3, [r7, #16]
	gpioStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
	gpioStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(pin_4_GPIO_Port, &gpioStruct);
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	4619      	mov	r1, r3
 800117e:	480b      	ldr	r0, [pc, #44]	; (80011ac <_ZN3DHT13Dht_readAsyncEv+0x4c>)
 8001180:	f001 fc64 	bl	8002a4c <HAL_GPIO_Init>

	HAL_GPIO_WritePin(pin_4_GPIO_Port, pin_4_Pin,GPIO_PIN_RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	2120      	movs	r1, #32
 8001188:	4808      	ldr	r0, [pc, #32]	; (80011ac <_ZN3DHT13Dht_readAsyncEv+0x4c>)
 800118a:	f001 fe09 	bl	8002da0 <HAL_GPIO_WritePin>
	HAL_Delay(18);
 800118e:	2012      	movs	r0, #18
 8001190:	f001 fad6 	bl	8002740 <HAL_Delay>
	HAL_GPIO_WritePin(pin_4_GPIO_Port, pin_4_Pin,GPIO_PIN_SET);
 8001194:	2201      	movs	r2, #1
 8001196:	2120      	movs	r1, #32
 8001198:	4804      	ldr	r0, [pc, #16]	; (80011ac <_ZN3DHT13Dht_readAsyncEv+0x4c>)
 800119a:	f001 fe01 	bl	8002da0 <HAL_GPIO_WritePin>
	setGpioExti();
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ffba 	bl	8001118 <_ZN3DHT11setGpioExtiEv>

}
 80011a4:	bf00      	nop
 80011a6:	3720      	adds	r7, #32
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	48000400 	.word	0x48000400

080011b0 <_ZN3DHT19Dht_onGpioInterruptEt>:

void DHT::Dht_onGpioInterrupt(uint16_t pin)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	807b      	strh	r3, [r7, #2]
	uint32_t counter;
	if(_GPIO_Pin==pin){
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	889b      	ldrh	r3, [r3, #4]
 80011c0:	887a      	ldrh	r2, [r7, #2]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	f040 8086 	bne.w	80012d4 <_ZN3DHT19Dht_onGpioInterruptEt+0x124>
		switch (dhtPin){
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	799b      	ldrb	r3, [r3, #6]
 80011cc:	2b04      	cmp	r3, #4
 80011ce:	d87d      	bhi.n	80012cc <_ZN3DHT19Dht_onGpioInterruptEt+0x11c>
 80011d0:	a201      	add	r2, pc, #4	; (adr r2, 80011d8 <_ZN3DHT19Dht_onGpioInterruptEt+0x28>)
 80011d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d6:	bf00      	nop
 80011d8:	080011ed 	.word	0x080011ed
 80011dc:	080011f5 	.word	0x080011f5
 80011e0:	080011fd 	.word	0x080011fd
 80011e4:	0800120d 	.word	0x0800120d
 80011e8:	080012c5 	.word	0x080012c5
		case WAKING:
			dhtPin=WAIT_RESPONSE_START;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2201      	movs	r2, #1
 80011f0:	719a      	strb	r2, [r3, #6]
			break;
 80011f2:	e06b      	b.n	80012cc <_ZN3DHT19Dht_onGpioInterruptEt+0x11c>
		case WAIT_RESPONSE_START:
			dhtPin=WAIT_RESPONSE_STOP;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2202      	movs	r2, #2
 80011f8:	719a      	strb	r2, [r3, #6]
			break;
 80011fa:	e067      	b.n	80012cc <_ZN3DHT19Dht_onGpioInterruptEt+0x11c>
		case WAIT_RESPONSE_STOP:
			counter = __HAL_TIM_GET_COUNTER(&htim1);
 80011fc:	4b38      	ldr	r3, [pc, #224]	; (80012e0 <_ZN3DHT19Dht_onGpioInterruptEt+0x130>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001202:	60fb      	str	r3, [r7, #12]
			dhtPin=RECEIVING_BITS;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2203      	movs	r2, #3
 8001208:	719a      	strb	r2, [r3, #6]
			break;
 800120a:	e05f      	b.n	80012cc <_ZN3DHT19Dht_onGpioInterruptEt+0x11c>
		case RECEIVING_BITS:
			counter = __HAL_TIM_GET_COUNTER(&htim1);
 800120c:	4b34      	ldr	r3, [pc, #208]	; (80012e0 <_ZN3DHT19Dht_onGpioInterruptEt+0x130>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001212:	60fb      	str	r3, [r7, #12]
			if(counter<=100)  {
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2b64      	cmp	r3, #100	; 0x64
 8001218:	d812      	bhi.n	8001240 <_ZN3DHT19Dht_onGpioInterruptEt+0x90>
				dht_byte&= ~(1<<(7-p));
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	7e1b      	ldrb	r3, [r3, #24]
 800121e:	b25a      	sxtb	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	7e9b      	ldrb	r3, [r3, #26]
 8001224:	f1c3 0307 	rsb	r3, r3, #7
 8001228:	2101      	movs	r1, #1
 800122a:	fa01 f303 	lsl.w	r3, r1, r3
 800122e:	b25b      	sxtb	r3, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	b25b      	sxtb	r3, r3
 8001234:	4013      	ands	r3, r2
 8001236:	b25b      	sxtb	r3, r3
 8001238:	b2da      	uxtb	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	761a      	strb	r2, [r3, #24]
 800123e:	e00f      	b.n	8001260 <_ZN3DHT19Dht_onGpioInterruptEt+0xb0>
			}
			else {
				dht_byte|= (1<<(7-p));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	7e1b      	ldrb	r3, [r3, #24]
 8001244:	b25a      	sxtb	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	7e9b      	ldrb	r3, [r3, #26]
 800124a:	f1c3 0307 	rsb	r3, r3, #7
 800124e:	2101      	movs	r1, #1
 8001250:	fa01 f303 	lsl.w	r3, r1, r3
 8001254:	b25b      	sxtb	r3, r3
 8001256:	4313      	orrs	r3, r2
 8001258:	b25b      	sxtb	r3, r3
 800125a:	b2da      	uxtb	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	761a      	strb	r2, [r3, #24]
			}

			p++;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	7e9b      	ldrb	r3, [r3, #26]
 8001264:	3301      	adds	r3, #1
 8001266:	b2da      	uxtb	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	769a      	strb	r2, [r3, #26]
			bitcount++;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	1c5a      	adds	r2, r3, #1
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	611a      	str	r2, [r3, #16]

			if(bitcount%8==0){
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	2b00      	cmp	r3, #0
 8001280:	d112      	bne.n	80012a8 <_ZN3DHT19Dht_onGpioInterruptEt+0xf8>
				DHT_data[m]=dht_byte;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	7e5b      	ldrb	r3, [r3, #25]
 8001286:	461a      	mov	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	7e19      	ldrb	r1, [r3, #24]
 800128c:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <_ZN3DHT19Dht_onGpioInterruptEt+0x134>)
 800128e:	5499      	strb	r1, [r3, r2]
				dht_byte=0;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	761a      	strb	r2, [r3, #24]
				m++;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	7e5b      	ldrb	r3, [r3, #25]
 800129a:	3301      	adds	r3, #1
 800129c:	b2da      	uxtb	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	765a      	strb	r2, [r3, #25]
				p=0;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	769a      	strb	r2, [r3, #26]
			}

			if(bitcount>=40){
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	2b27      	cmp	r3, #39	; 0x27
 80012ae:	dd0c      	ble.n	80012ca <_ZN3DHT19Dht_onGpioInterruptEt+0x11a>
				bitcount=0;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
				m=0;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	765a      	strb	r2, [r3, #25]

			dhtPin=DATA_RECEIVED;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2204      	movs	r2, #4
 80012c0:	719a      	strb	r2, [r3, #6]
			}
			break;
 80012c2:	e002      	b.n	80012ca <_ZN3DHT19Dht_onGpioInterruptEt+0x11a>
		case DATA_RECEIVED:
			counter = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
			break;
 80012c8:	e000      	b.n	80012cc <_ZN3DHT19Dht_onGpioInterruptEt+0x11c>
			break;
 80012ca:	bf00      	nop
		}
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <_ZN3DHT19Dht_onGpioInterruptEt+0x130>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2200      	movs	r2, #0
 80012d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	2000015c 	.word	0x2000015c
 80012e4:	20000094 	.word	0x20000094

080012e8 <_ZN3DHT11Dht_hasDataEv>:

int DHT::Dht_hasData(){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	if (dhtPin==DATA_RECEIVED){
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	799b      	ldrb	r3, [r3, #6]
 80012f4:	2b04      	cmp	r3, #4
 80012f6:	d10e      	bne.n	8001316 <_ZN3DHT11Dht_hasDataEv+0x2e>
		Temperature = (double)DHT_data[2];
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <_ZN3DHT11Dht_hasDataEv+0x38>)
 80012fa:	789b      	ldrb	r3, [r3, #2]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f911 	bl	8000524 <__aeabi_ui2d>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	e9c1 2302 	strd	r2, r3, [r1, #8]
		dhtPin=WAKING;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	719a      	strb	r2, [r3, #6]
		return 1;
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <_ZN3DHT11Dht_hasDataEv+0x30>
	}
	return 0;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000094 	.word	0x20000094

08001324 <_ZN3LEDC1EP12GPIO_TypeDeft>:
#include <stdio.h>
#include "mymain.h"
#include "main.h"
#include "LED.h"

LED::LED(GPIO_TypeDef* GPIOx,uint16_t GPIO_Pin):
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	4613      	mov	r3, r2
 8001330:	80fb      	strh	r3, [r7, #6]
		GPIOx(GPIOx),GPIO_Pin(GPIO_Pin)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	68ba      	ldr	r2, [r7, #8]
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	88fa      	ldrh	r2, [r7, #6]
 800133c:	809a      	strh	r2, [r3, #4]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2232      	movs	r2, #50	; 0x32
 8001348:	60da      	str	r2, [r3, #12]
{
}
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4618      	mov	r0, r3
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <_ZN3LED6Led_OnEv>:

void LED::Led_On()
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6818      	ldr	r0, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	889b      	ldrh	r3, [r3, #4]
 8001368:	2201      	movs	r2, #1
 800136a:	4619      	mov	r1, r3
 800136c:	f001 fd18 	bl	8002da0 <HAL_GPIO_WritePin>

}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <_ZN3LED7Led_OffEv>:
void LED::Led_Off()
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6818      	ldr	r0, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	889b      	ldrh	r3, [r3, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	4619      	mov	r1, r3
 800138c:	f001 fd08 	bl	8002da0 <HAL_GPIO_WritePin>

}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <_ZN3LED9Led_BlinkEv>:
void LED::LED_delay(int num){
	delay = num;
}
void LED::Led_Blink()
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	if (blinkcount >= delay){
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	db0a      	blt.n	80013c2 <_ZN3LED9Led_BlinkEv+0x2a>
		HAL_GPIO_TogglePin(GPIOx,GPIO_Pin);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	889b      	ldrh	r3, [r3, #4]
 80013b4:	4619      	mov	r1, r3
 80013b6:	4610      	mov	r0, r2
 80013b8:	f001 fd0a 	bl	8002dd0 <HAL_GPIO_TogglePin>
		blinkcount = 0;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
	}
		blinkcount++;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	1c5a      	adds	r2, r3, #1
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	609a      	str	r2, [r3, #8]
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <_ZN4_RTCC1EP19__I2C_HandleTypeDefm>:
		304,
		334,
		365
};

_RTC::_RTC(I2C_HandleTypeDef * hi2c, uint32_t devAddr)
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
{
  _hi2c = hi2c;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	601a      	str	r2, [r3, #0]
  _devAddr = devAddr;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	711a      	strb	r2, [r3, #4]
}
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	4618      	mov	r0, r3
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <_ZN4_RTC8rtcStartEv>:

void _RTC::rtcStart()
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af04      	add	r7, sp, #16
 8001402:	6078      	str	r0, [r7, #4]
	uint8_t sec = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(_hi2c, _devAddr, 0, 1, &sec, 1, 0xFF);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6818      	ldr	r0, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	791b      	ldrb	r3, [r3, #4]
 8001410:	b299      	uxth	r1, r3
 8001412:	23ff      	movs	r3, #255	; 0xff
 8001414:	9302      	str	r3, [sp, #8]
 8001416:	2301      	movs	r3, #1
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	f107 030f 	add.w	r3, r7, #15
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	2301      	movs	r3, #1
 8001422:	2200      	movs	r2, #0
 8001424:	f001 feaa 	bl	800317c <HAL_I2C_Mem_Read>
	sec &= ~RTC_START_STOP;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800142e:	b2db      	uxtb	r3, r3
 8001430:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(_hi2c, _devAddr, 0, 1, &sec, 1, 0xFF);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6818      	ldr	r0, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	791b      	ldrb	r3, [r3, #4]
 800143a:	b299      	uxth	r1, r3
 800143c:	23ff      	movs	r3, #255	; 0xff
 800143e:	9302      	str	r3, [sp, #8]
 8001440:	2301      	movs	r3, #1
 8001442:	9301      	str	r3, [sp, #4]
 8001444:	f107 030f 	add.w	r3, r7, #15
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	2301      	movs	r3, #1
 800144c:	2200      	movs	r2, #0
 800144e:	f001 fd81 	bl	8002f54 <HAL_I2C_Mem_Write>
}
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <_ZN4_RTC7rtcStopEv>:

void _RTC::rtcStop()
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b088      	sub	sp, #32
 800145e:	af04      	add	r7, sp, #16
 8001460:	6078      	str	r0, [r7, #4]
	uint8_t sec = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(_hi2c,_devAddr, 0, 1, &sec, 1, 0xFF);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6818      	ldr	r0, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	791b      	ldrb	r3, [r3, #4]
 800146e:	b299      	uxth	r1, r3
 8001470:	23ff      	movs	r3, #255	; 0xff
 8001472:	9302      	str	r3, [sp, #8]
 8001474:	2301      	movs	r3, #1
 8001476:	9301      	str	r3, [sp, #4]
 8001478:	f107 030f 	add.w	r3, r7, #15
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	2301      	movs	r3, #1
 8001480:	2200      	movs	r2, #0
 8001482:	f001 fe7b 	bl	800317c <HAL_I2C_Mem_Read>
	sec |= RTC_START_STOP;
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800148c:	b2db      	uxtb	r3, r3
 800148e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(_hi2c, _devAddr, 0, 1, &sec, 1, 0xFF);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6818      	ldr	r0, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	791b      	ldrb	r3, [r3, #4]
 8001498:	b299      	uxth	r1, r3
 800149a:	23ff      	movs	r3, #255	; 0xff
 800149c:	9302      	str	r3, [sp, #8]
 800149e:	2301      	movs	r3, #1
 80014a0:	9301      	str	r3, [sp, #4]
 80014a2:	f107 030f 	add.w	r3, r7, #15
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2301      	movs	r3, #1
 80014aa:	2200      	movs	r2, #0
 80014ac:	f001 fd52 	bl	8002f54 <HAL_I2C_Mem_Write>
}
 80014b0:	bf00      	nop
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <_ZL8bcdToInth>:
	HAL_I2C_Mem_Read(_hi2c, _devAddr, 0, 1, &sec, 1, 0xFF);
	return (sec & RTC_START_STOP) == 0;
}

static int bcdToInt(uint8_t bcd)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
	return (bcd >> 4) * 10 + (bcd & 0x0F);
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	091b      	lsrs	r3, r3, #4
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	461a      	mov	r2, r3
 80014ca:	4613      	mov	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	461a      	mov	r2, r3
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	4413      	add	r3, r2
}
 80014dc:	4618      	mov	r0, r3
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <_ZL8intToBcdiii>:

static uint8_t intToBcd(int value, int minVal, int maxVal)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
	if (value < minVal || value > maxVal) {
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	db03      	blt.n	8001504 <_ZL8intToBcdiii+0x1c>
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	429a      	cmp	r2, r3
 8001502:	dd01      	ble.n	8001508 <_ZL8intToBcdiii+0x20>
		return 0;
 8001504:	2300      	movs	r3, #0
 8001506:	e018      	b.n	800153a <_ZL8intToBcdiii+0x52>
	}

	return ((value / 10) << 4) | (value % 10);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4a0f      	ldr	r2, [pc, #60]	; (8001548 <_ZL8intToBcdiii+0x60>)
 800150c:	fb82 1203 	smull	r1, r2, r2, r3
 8001510:	1092      	asrs	r2, r2, #2
 8001512:	17db      	asrs	r3, r3, #31
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	011b      	lsls	r3, r3, #4
 8001518:	b258      	sxtb	r0, r3
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <_ZL8intToBcdiii+0x60>)
 800151e:	fb83 1302 	smull	r1, r3, r3, r2
 8001522:	1099      	asrs	r1, r3, #2
 8001524:	17d3      	asrs	r3, r2, #31
 8001526:	1ac9      	subs	r1, r1, r3
 8001528:	460b      	mov	r3, r1
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	1ad1      	subs	r1, r2, r3
 8001532:	b24b      	sxtb	r3, r1
 8001534:	4303      	orrs	r3, r0
 8001536:	b25b      	sxtb	r3, r3
 8001538:	b2db      	uxtb	r3, r3
}
 800153a:	4618      	mov	r0, r3
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	66666667 	.word	0x66666667

0800154c <_ZN4_RTC10rtcGetTimeEv>:

void _RTC::rtcGetTime()
{
 800154c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800154e:	b08b      	sub	sp, #44	; 0x2c
 8001550:	af04      	add	r7, sp, #16
 8001552:	6078      	str	r0, [r7, #4]
	uint8_t buffer[RTC_DATE_TIME_SIZE];
	DateTime * mytime = new DateTime;
 8001554:	201c      	movs	r0, #28
 8001556:	f009 fdab 	bl	800b0b0 <_Znwj>
 800155a:	4603      	mov	r3, r0
 800155c:	617b      	str	r3, [r7, #20]
	if(HAL_I2C_Mem_Read(_hi2c, _devAddr, 0, 1, buffer, RTC_DATE_TIME_SIZE, 0xFF) == HAL_OK){
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6818      	ldr	r0, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	791b      	ldrb	r3, [r3, #4]
 8001566:	b299      	uxth	r1, r3
 8001568:	23ff      	movs	r3, #255	; 0xff
 800156a:	9302      	str	r3, [sp, #8]
 800156c:	2307      	movs	r3, #7
 800156e:	9301      	str	r3, [sp, #4]
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	2301      	movs	r3, #1
 8001578:	2200      	movs	r2, #0
 800157a:	f001 fdff 	bl	800317c <HAL_I2C_Mem_Read>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	bf0c      	ite	eq
 8001584:	2301      	moveq	r3, #1
 8001586:	2300      	movne	r3, #0
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <_ZN4_RTC10rtcGetTimeEv+0x4a>
		printf("read is good\r\n");
 800158e:	482b      	ldr	r0, [pc, #172]	; (800163c <_ZN4_RTC10rtcGetTimeEv+0xf0>)
 8001590:	f009 ff80 	bl	800b494 <puts>
 8001594:	e002      	b.n	800159c <_ZN4_RTC10rtcGetTimeEv+0x50>
	}
	else{
		printf("write is bad\r\n");
 8001596:	482a      	ldr	r0, [pc, #168]	; (8001640 <_ZN4_RTC10rtcGetTimeEv+0xf4>)
 8001598:	f009 ff7c 	bl	800b494 <puts>
	}

	// remove stop bit if set
	buffer[0] &= ~RTC_START_STOP;
 800159c:	7b3b      	ldrb	r3, [r7, #12]
 800159e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	733b      	strb	r3, [r7, #12]
	mytime->sec = bcdToInt(buffer[0]);
 80015a6:	7b3b      	ldrb	r3, [r7, #12]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff85 	bl	80014b8 <_ZL8bcdToInth>
 80015ae:	4602      	mov	r2, r0
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	601a      	str	r2, [r3, #0]
	mytime->min = bcdToInt(buffer[1]);
 80015b4:	7b7b      	ldrb	r3, [r7, #13]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff ff7e 	bl	80014b8 <_ZL8bcdToInth>
 80015bc:	4602      	mov	r2, r0
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	605a      	str	r2, [r3, #4]
	mytime->hours = bcdToInt(buffer[2]);
 80015c2:	7bbb      	ldrb	r3, [r7, #14]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff77 	bl	80014b8 <_ZL8bcdToInth>
 80015ca:	4602      	mov	r2, r0
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	609a      	str	r2, [r3, #8]
	mytime->weekDay = buffer[3] & 0x07;
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	f003 0207 	and.w	r2, r3, #7
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	60da      	str	r2, [r3, #12]
	mytime->day = bcdToInt(buffer[4]);
 80015da:	7c3b      	ldrb	r3, [r7, #16]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff6b 	bl	80014b8 <_ZL8bcdToInth>
 80015e2:	4602      	mov	r2, r0
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	611a      	str	r2, [r3, #16]
	mytime->month = bcdToInt(buffer[5]);
 80015e8:	7c7b      	ldrb	r3, [r7, #17]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff ff64 	bl	80014b8 <_ZL8bcdToInth>
 80015f0:	4602      	mov	r2, r0
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	615a      	str	r2, [r3, #20]
	mytime->year = bcdToInt(buffer[6]);
 80015f6:	7cbb      	ldrb	r3, [r7, #18]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff5d 	bl	80014b8 <_ZL8bcdToInth>
 80015fe:	4602      	mov	r2, r0
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	619a      	str	r2, [r3, #24]
	printf("date is %02d:%02d:%02d  %02d %02d/%02d/%02d \r\n ",mytime->hours,mytime->min,mytime->sec,mytime->weekDay,mytime->day,mytime->month,mytime->year);
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	689c      	ldr	r4, [r3, #8]
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	685d      	ldr	r5, [r3, #4]
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	681e      	ldr	r6, [r3, #0]
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	6912      	ldr	r2, [r2, #16]
 8001618:	6979      	ldr	r1, [r7, #20]
 800161a:	6949      	ldr	r1, [r1, #20]
 800161c:	6978      	ldr	r0, [r7, #20]
 800161e:	6980      	ldr	r0, [r0, #24]
 8001620:	9003      	str	r0, [sp, #12]
 8001622:	9102      	str	r1, [sp, #8]
 8001624:	9201      	str	r2, [sp, #4]
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	4633      	mov	r3, r6
 800162a:	462a      	mov	r2, r5
 800162c:	4621      	mov	r1, r4
 800162e:	4805      	ldr	r0, [pc, #20]	; (8001644 <_ZN4_RTC10rtcGetTimeEv+0xf8>)
 8001630:	f009 feaa 	bl	800b388 <iprintf>
}
 8001634:	bf00      	nop
 8001636:	371c      	adds	r7, #28
 8001638:	46bd      	mov	sp, r7
 800163a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800163c:	0800cde8 	.word	0x0800cde8
 8001640:	0800cdf8 	.word	0x0800cdf8
 8001644:	0800ce08 	.word	0x0800ce08

08001648 <_ZN4_RTC10rtcSetTimeEP9DateTime_>:
//	seconds += (dateTime.year / 4) * SecondsInDay;
//	return seconds;
//}

void _RTC::rtcSetTime(DateTime * _datetime)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b088      	sub	sp, #32
 800164c:	af04      	add	r7, sp, #16
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
	dateTime = _datetime;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	609a      	str	r2, [r3, #8]
	uint8_t buffer[RTC_DATE_TIME_SIZE];

	buffer[0] = intToBcd(dateTime->sec, 0, 59);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	223b      	movs	r2, #59	; 0x3b
 8001660:	2100      	movs	r1, #0
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff ff40 	bl	80014e8 <_ZL8intToBcdiii>
 8001668:	4603      	mov	r3, r0
 800166a:	723b      	strb	r3, [r7, #8]
	buffer[1] = intToBcd(dateTime->min, 0, 59);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	223b      	movs	r2, #59	; 0x3b
 8001674:	2100      	movs	r1, #0
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff ff36 	bl	80014e8 <_ZL8intToBcdiii>
 800167c:	4603      	mov	r3, r0
 800167e:	727b      	strb	r3, [r7, #9]
	buffer[2] = intToBcd(dateTime->hours, 0, 59);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	223b      	movs	r2, #59	; 0x3b
 8001688:	2100      	movs	r1, #0
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ff2c 	bl	80014e8 <_ZL8intToBcdiii>
 8001690:	4603      	mov	r3, r0
 8001692:	72bb      	strb	r3, [r7, #10]
	buffer[3] = dateTime->weekDay < 1 || dateTime->weekDay > 7 ? 0 : dateTime->weekDay;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	2b00      	cmp	r3, #0
 800169c:	dd09      	ble.n	80016b2 <_ZN4_RTC10rtcSetTimeEP9DateTime_+0x6a>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	2b07      	cmp	r3, #7
 80016a6:	dc04      	bgt.n	80016b2 <_ZN4_RTC10rtcSetTimeEP9DateTime_+0x6a>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	e000      	b.n	80016b4 <_ZN4_RTC10rtcSetTimeEP9DateTime_+0x6c>
 80016b2:	2300      	movs	r3, #0
 80016b4:	72fb      	strb	r3, [r7, #11]
	buffer[4] = intToBcd(dateTime->day, 1, 31);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	221f      	movs	r2, #31
 80016be:	2101      	movs	r1, #1
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff11 	bl	80014e8 <_ZL8intToBcdiii>
 80016c6:	4603      	mov	r3, r0
 80016c8:	733b      	strb	r3, [r7, #12]
	buffer[5] = intToBcd(dateTime->month, 1, 12);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	695b      	ldr	r3, [r3, #20]
 80016d0:	220c      	movs	r2, #12
 80016d2:	2101      	movs	r1, #1
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff07 	bl	80014e8 <_ZL8intToBcdiii>
 80016da:	4603      	mov	r3, r0
 80016dc:	737b      	strb	r3, [r7, #13]
	buffer[6] = intToBcd(dateTime->year, 1, 99);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	2263      	movs	r2, #99	; 0x63
 80016e6:	2101      	movs	r1, #1
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fefd 	bl	80014e8 <_ZL8intToBcdiii>
 80016ee:	4603      	mov	r3, r0
 80016f0:	73bb      	strb	r3, [r7, #14]

	if(HAL_I2C_Mem_Write(_hi2c, _devAddr, 0, 1, buffer, RTC_DATE_TIME_SIZE, 0xFF) == HAL_OK){
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6818      	ldr	r0, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	791b      	ldrb	r3, [r3, #4]
 80016fa:	b299      	uxth	r1, r3
 80016fc:	23ff      	movs	r3, #255	; 0xff
 80016fe:	9302      	str	r3, [sp, #8]
 8001700:	2307      	movs	r3, #7
 8001702:	9301      	str	r3, [sp, #4]
 8001704:	f107 0308 	add.w	r3, r7, #8
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	2301      	movs	r3, #1
 800170c:	2200      	movs	r2, #0
 800170e:	f001 fc21 	bl	8002f54 <HAL_I2C_Mem_Write>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	bf0c      	ite	eq
 8001718:	2301      	moveq	r3, #1
 800171a:	2300      	movne	r3, #0
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <_ZN4_RTC10rtcSetTimeEP9DateTime_+0xe2>
		printf("write is good\r\n");
 8001722:	4805      	ldr	r0, [pc, #20]	; (8001738 <_ZN4_RTC10rtcSetTimeEP9DateTime_+0xf0>)
 8001724:	f009 feb6 	bl	800b494 <puts>
	}
	else{
		printf("write is bad\r\n");
	}
}
 8001728:	e002      	b.n	8001730 <_ZN4_RTC10rtcSetTimeEP9DateTime_+0xe8>
		printf("write is bad\r\n");
 800172a:	4804      	ldr	r0, [pc, #16]	; (800173c <_ZN4_RTC10rtcSetTimeEP9DateTime_+0xf4>)
 800172c:	f009 feb2 	bl	800b494 <puts>
}
 8001730:	bf00      	nop
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	0800ce38 	.word	0x0800ce38
 800173c:	0800cdf8 	.word	0x0800cdf8

08001740 <_ZN12CliContainer9doCommandEPcS0_>:

	void doCommand( char * cmd,  char * param){
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
		for (int j = 0; j <funcounter; j++) {
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	429a      	cmp	r2, r3
 800175a:	da1d      	bge.n	8001798 <_ZN12CliContainer9doCommandEPcS0_+0x58>
			if (strcmp(cmd,commands[j].CommandName) == 0) {
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8001764:	4619      	mov	r1, r3
 8001766:	68b8      	ldr	r0, [r7, #8]
 8001768:	f7fe fd32 	bl	80001d0 <strcmp>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10e      	bne.n	8001790 <_ZN12CliContainer9doCommandEPcS0_+0x50>
				commands[j].command->doCommand(param);
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	4413      	add	r3, r2
 800177a:	6858      	ldr	r0, [r3, #4]
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	4413      	add	r3, r2
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	4798      	blx	r3
				return;
 800178e:	e006      	b.n	800179e <_ZN12CliContainer9doCommandEPcS0_+0x5e>
		for (int j = 0; j <funcounter; j++) {
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	3301      	adds	r3, #1
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	e7db      	b.n	8001750 <_ZN12CliContainer9doCommandEPcS0_+0x10>
			}

		}
		printf("Invalid command\r\n");
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <_ZN12CliContainer9doCommandEPcS0_+0x64>)
 800179a:	f009 fe7b 	bl	800b494 <puts>
	}
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	0800ce48 	.word	0x0800ce48

080017a8 <_Z8commTaskv>:
int cmdcount = 0;
int cmdprint = 0;
extern CliContainer container;


int commTask() {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 80017ae:	1db9      	adds	r1, r7, #6
 80017b0:	230a      	movs	r3, #10
 80017b2:	2201      	movs	r2, #1
 80017b4:	4839      	ldr	r0, [pc, #228]	; (800189c <_Z8commTaskv+0xf4>)
 80017b6:	f005 f8bf 	bl	8006938 <HAL_UART_Receive>
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK) {
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d025      	beq.n	8001810 <_Z8commTaskv+0x68>
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0) {
 80017c4:	4b35      	ldr	r3, [pc, #212]	; (800189c <_Z8commTaskv+0xf4>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	bf14      	ite	ne
 80017d2:	2301      	movne	r3, #1
 80017d4:	2300      	moveq	r3, #0
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <_Z8commTaskv+0x3c>
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 80017dc:	4b2f      	ldr	r3, [pc, #188]	; (800189c <_Z8commTaskv+0xf4>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2208      	movs	r2, #8
 80017e2:	621a      	str	r2, [r3, #32]
		}

		// here we have a time to print the command
		while (cmdprint < cmdcount) {
 80017e4:	4b2e      	ldr	r3, [pc, #184]	; (80018a0 <_Z8commTaskv+0xf8>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b2e      	ldr	r3, [pc, #184]	; (80018a4 <_Z8commTaskv+0xfc>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	da0d      	bge.n	800180c <_Z8commTaskv+0x64>
			HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 80017f0:	4b2b      	ldr	r3, [pc, #172]	; (80018a0 <_Z8commTaskv+0xf8>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	1c5a      	adds	r2, r3, #1
 80017f6:	492a      	ldr	r1, [pc, #168]	; (80018a0 <_Z8commTaskv+0xf8>)
 80017f8:	600a      	str	r2, [r1, #0]
 80017fa:	4a2b      	ldr	r2, [pc, #172]	; (80018a8 <_Z8commTaskv+0x100>)
 80017fc:	1899      	adds	r1, r3, r2
 80017fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001802:	2201      	movs	r2, #1
 8001804:	4825      	ldr	r0, [pc, #148]	; (800189c <_Z8commTaskv+0xf4>)
 8001806:	f005 f803 	bl	8006810 <HAL_UART_Transmit>
		while (cmdprint < cmdcount) {
 800180a:	e7eb      	b.n	80017e4 <_Z8commTaskv+0x3c>
		}

		return 0;
 800180c:	2300      	movs	r3, #0
 800180e:	e040      	b.n	8001892 <_Z8commTaskv+0xea>
	}

	if (ch != '\r' && ch != '\n') {
 8001810:	79bb      	ldrb	r3, [r7, #6]
 8001812:	2b0d      	cmp	r3, #13
 8001814:	d016      	beq.n	8001844 <_Z8commTaskv+0x9c>
 8001816:	79bb      	ldrb	r3, [r7, #6]
 8001818:	2b0a      	cmp	r3, #10
 800181a:	d013      	beq.n	8001844 <_Z8commTaskv+0x9c>
		//HAL_UART_Transmit(&huart2, &ch, 1, 0xFFFF);

		if (cmdcount >= MAX_BUFFER_LENGTH) {
 800181c:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <_Z8commTaskv+0xfc>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b63      	cmp	r3, #99	; 0x63
 8001822:	dd05      	ble.n	8001830 <_Z8commTaskv+0x88>
			cmdcount = 0;
 8001824:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <_Z8commTaskv+0xfc>)
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
			cmdprint = 0;
 800182a:	4b1d      	ldr	r3, [pc, #116]	; (80018a0 <_Z8commTaskv+0xf8>)
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 8001830:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <_Z8commTaskv+0xfc>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	1c5a      	adds	r2, r3, #1
 8001836:	491b      	ldr	r1, [pc, #108]	; (80018a4 <_Z8commTaskv+0xfc>)
 8001838:	600a      	str	r2, [r1, #0]
 800183a:	79b9      	ldrb	r1, [r7, #6]
 800183c:	4a1a      	ldr	r2, [pc, #104]	; (80018a8 <_Z8commTaskv+0x100>)
 800183e:	54d1      	strb	r1, [r2, r3]
		return 0;
 8001840:	2300      	movs	r3, #0
 8001842:	e026      	b.n	8001892 <_Z8commTaskv+0xea>
	}

	// here we have a time to print the command
	while (cmdprint < cmdcount) {
 8001844:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <_Z8commTaskv+0xf8>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <_Z8commTaskv+0xfc>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	429a      	cmp	r2, r3
 800184e:	da0d      	bge.n	800186c <_Z8commTaskv+0xc4>
		HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8001850:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <_Z8commTaskv+0xf8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	1c5a      	adds	r2, r3, #1
 8001856:	4912      	ldr	r1, [pc, #72]	; (80018a0 <_Z8commTaskv+0xf8>)
 8001858:	600a      	str	r2, [r1, #0]
 800185a:	4a13      	ldr	r2, [pc, #76]	; (80018a8 <_Z8commTaskv+0x100>)
 800185c:	1899      	adds	r1, r3, r2
 800185e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001862:	2201      	movs	r2, #1
 8001864:	480d      	ldr	r0, [pc, #52]	; (800189c <_Z8commTaskv+0xf4>)
 8001866:	f004 ffd3 	bl	8006810 <HAL_UART_Transmit>
	while (cmdprint < cmdcount) {
 800186a:	e7eb      	b.n	8001844 <_Z8commTaskv+0x9c>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n", 2, 0xFFFF);
 800186c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001870:	2202      	movs	r2, #2
 8001872:	490e      	ldr	r1, [pc, #56]	; (80018ac <_Z8commTaskv+0x104>)
 8001874:	4809      	ldr	r0, [pc, #36]	; (800189c <_Z8commTaskv+0xf4>)
 8001876:	f004 ffcb 	bl	8006810 <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 800187a:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <_Z8commTaskv+0xfc>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <_Z8commTaskv+0x100>)
 8001880:	2100      	movs	r1, #0
 8001882:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 8001884:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <_Z8commTaskv+0xfc>)
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
	cmdprint = 0;
 800188a:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <_Z8commTaskv+0xf8>)
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
	return 1;
 8001890:	2301      	movs	r3, #1
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000240 	.word	0x20000240
 80018a0:	20000104 	.word	0x20000104
 80018a4:	20000100 	.word	0x20000100
 80018a8:	2000009c 	.word	0x2000009c
 80018ac:	0800ce5c 	.word	0x0800ce5c

080018b0 <_Z13handleCommandv>:

void handleCommand() {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b092      	sub	sp, #72	; 0x48
 80018b4:	af00      	add	r7, sp, #0
	char cmd[20];
	char param[50];
	sscanf((const char*) cmdbuffer, "%s %s", cmd, param);
 80018b6:	463b      	mov	r3, r7
 80018b8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80018bc:	4907      	ldr	r1, [pc, #28]	; (80018dc <_Z13handleCommandv+0x2c>)
 80018be:	4808      	ldr	r0, [pc, #32]	; (80018e0 <_Z13handleCommandv+0x30>)
 80018c0:	f009 fe44 	bl	800b54c <siscanf>

	container.doCommand(cmd,param);
 80018c4:	463a      	mov	r2, r7
 80018c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018ca:	4619      	mov	r1, r3
 80018cc:	4805      	ldr	r0, [pc, #20]	; (80018e4 <_Z13handleCommandv+0x34>)
 80018ce:	f7ff ff37 	bl	8001740 <_ZN12CliContainer9doCommandEPcS0_>
}
 80018d2:	bf00      	nop
 80018d4:	3748      	adds	r7, #72	; 0x48
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	0800ce60 	.word	0x0800ce60
 80018e0:	2000009c 	.word	0x2000009c
 80018e4:	20000304 	.word	0x20000304

080018e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018ec:	f000 fee8 	bl	80026c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018f0:	f000 f848 	bl	8001984 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018f4:	f000 fa0a 	bl	8001d0c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80018f8:	f000 f9d8 	bl	8001cac <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80018fc:	f000 f928 	bl	8001b50 <MX_TIM3_Init>
  MX_TIM6_Init();
 8001900:	f000 f99e 	bl	8001c40 <MX_TIM6_Init>
  MX_TIM1_Init();
 8001904:	f000 f8d0 	bl	8001aa8 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001908:	f000 f88e 	bl	8001a28 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800190c:	f006 f940 	bl	8007b90 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of DHT_MONITOR */
  DHT_MONITORHandle = osSemaphoreNew(1, 1, &DHT_MONITOR_attributes);
 8001910:	4a11      	ldr	r2, [pc, #68]	; (8001958 <main+0x70>)
 8001912:	2101      	movs	r1, #1
 8001914:	2001      	movs	r0, #1
 8001916:	f006 fa32 	bl	8007d7e <osSemaphoreNew>
 800191a:	4603      	mov	r3, r0
 800191c:	4a0f      	ldr	r2, [pc, #60]	; (800195c <main+0x74>)
 800191e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of READ_TEMP */
  READ_TEMPHandle = osThreadNew(READ_TEMP_func, NULL, &READ_TEMP_attributes);
 8001920:	4a0f      	ldr	r2, [pc, #60]	; (8001960 <main+0x78>)
 8001922:	2100      	movs	r1, #0
 8001924:	480f      	ldr	r0, [pc, #60]	; (8001964 <main+0x7c>)
 8001926:	f006 f97d 	bl	8007c24 <osThreadNew>
 800192a:	4603      	mov	r3, r0
 800192c:	4a0e      	ldr	r2, [pc, #56]	; (8001968 <main+0x80>)
 800192e:	6013      	str	r3, [r2, #0]

  /* creation of COMTASK */
  COMTASKHandle = osThreadNew(comtask_func, NULL, &COMTASK_attributes);
 8001930:	4a0e      	ldr	r2, [pc, #56]	; (800196c <main+0x84>)
 8001932:	2100      	movs	r1, #0
 8001934:	480e      	ldr	r0, [pc, #56]	; (8001970 <main+0x88>)
 8001936:	f006 f975 	bl	8007c24 <osThreadNew>
 800193a:	4603      	mov	r3, r0
 800193c:	4a0d      	ldr	r2, [pc, #52]	; (8001974 <main+0x8c>)
 800193e:	6013      	str	r3, [r2, #0]

  /* creation of MONITOR_TEMP */
  MONITOR_TEMPHandle = osThreadNew(monitor_func, NULL, &MONITOR_TEMP_attributes);
 8001940:	4a0d      	ldr	r2, [pc, #52]	; (8001978 <main+0x90>)
 8001942:	2100      	movs	r1, #0
 8001944:	480d      	ldr	r0, [pc, #52]	; (800197c <main+0x94>)
 8001946:	f006 f96d 	bl	8007c24 <osThreadNew>
 800194a:	4603      	mov	r3, r0
 800194c:	4a0c      	ldr	r2, [pc, #48]	; (8001980 <main+0x98>)
 800194e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001950:	f006 f942 	bl	8007bd8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001954:	e7fe      	b.n	8001954 <main+0x6c>
 8001956:	bf00      	nop
 8001958:	0800cff0 	.word	0x0800cff0
 800195c:	200002d0 	.word	0x200002d0
 8001960:	0800cf84 	.word	0x0800cf84
 8001964:	08001f81 	.word	0x08001f81
 8001968:	200002c4 	.word	0x200002c4
 800196c:	0800cfa8 	.word	0x0800cfa8
 8001970:	08001fad 	.word	0x08001fad
 8001974:	200002c8 	.word	0x200002c8
 8001978:	0800cfcc 	.word	0x0800cfcc
 800197c:	08001fd1 	.word	0x08001fd1
 8001980:	200002cc 	.word	0x200002cc

08001984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b096      	sub	sp, #88	; 0x58
 8001988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	2244      	movs	r2, #68	; 0x44
 8001990:	2100      	movs	r1, #0
 8001992:	4618      	mov	r0, r3
 8001994:	f009 fc10 	bl	800b1b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001998:	463b      	mov	r3, r7
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	60da      	str	r2, [r3, #12]
 80019a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80019a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019aa:	f002 f84d 	bl	8003a48 <HAL_PWREx_ControlVoltageScaling>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80019b4:	f000 fa44 	bl	8001e40 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019b8:	2302      	movs	r3, #2
 80019ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019c2:	2310      	movs	r3, #16
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019c6:	2302      	movs	r3, #2
 80019c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019ca:	2302      	movs	r3, #2
 80019cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019ce:	2301      	movs	r3, #1
 80019d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80019d2:	230a      	movs	r3, #10
 80019d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80019d6:	2307      	movs	r3, #7
 80019d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019da:	2302      	movs	r3, #2
 80019dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019de:	2302      	movs	r3, #2
 80019e0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	4618      	mov	r0, r3
 80019e8:	f002 f884 	bl	8003af4 <HAL_RCC_OscConfig>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80019f2:	f000 fa25 	bl	8001e40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019f6:	230f      	movs	r3, #15
 80019f8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019fa:	2303      	movs	r3, #3
 80019fc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a0a:	463b      	mov	r3, r7
 8001a0c:	2104      	movs	r1, #4
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f002 fc4c 	bl	80042ac <HAL_RCC_ClockConfig>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a1a:	f000 fa11 	bl	8001e40 <Error_Handler>
  }
}
 8001a1e:	bf00      	nop
 8001a20:	3758      	adds	r7, #88	; 0x58
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <MX_I2C1_Init+0x74>)
 8001a2e:	4a1c      	ldr	r2, [pc, #112]	; (8001aa0 <MX_I2C1_Init+0x78>)
 8001a30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001a32:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <MX_I2C1_Init+0x74>)
 8001a34:	4a1b      	ldr	r2, [pc, #108]	; (8001aa4 <MX_I2C1_Init+0x7c>)
 8001a36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a38:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <MX_I2C1_Init+0x74>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a3e:	4b17      	ldr	r3, [pc, #92]	; (8001a9c <MX_I2C1_Init+0x74>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a44:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <MX_I2C1_Init+0x74>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a4a:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <MX_I2C1_Init+0x74>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <MX_I2C1_Init+0x74>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a56:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <MX_I2C1_Init+0x74>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <MX_I2C1_Init+0x74>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a62:	480e      	ldr	r0, [pc, #56]	; (8001a9c <MX_I2C1_Init+0x74>)
 8001a64:	f001 f9e6 	bl	8002e34 <HAL_I2C_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a6e:	f000 f9e7 	bl	8001e40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a72:	2100      	movs	r1, #0
 8001a74:	4809      	ldr	r0, [pc, #36]	; (8001a9c <MX_I2C1_Init+0x74>)
 8001a76:	f001 ff41 	bl	80038fc <HAL_I2CEx_ConfigAnalogFilter>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a80:	f000 f9de 	bl	8001e40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a84:	2100      	movs	r1, #0
 8001a86:	4805      	ldr	r0, [pc, #20]	; (8001a9c <MX_I2C1_Init+0x74>)
 8001a88:	f001 ff83 	bl	8003992 <HAL_I2CEx_ConfigDigitalFilter>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a92:	f000 f9d5 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000108 	.word	0x20000108
 8001aa0:	40005400 	.word	0x40005400
 8001aa4:	10909cec 	.word	0x10909cec

08001aa8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b088      	sub	sp, #32
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aae:	f107 0310 	add.w	r3, r7, #16
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001abc:	1d3b      	adds	r3, r7, #4
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ac6:	4b20      	ldr	r3, [pc, #128]	; (8001b48 <MX_TIM1_Init+0xa0>)
 8001ac8:	4a20      	ldr	r2, [pc, #128]	; (8001b4c <MX_TIM1_Init+0xa4>)
 8001aca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8001acc:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <MX_TIM1_Init+0xa0>)
 8001ace:	224f      	movs	r2, #79	; 0x4f
 8001ad0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad2:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <MX_TIM1_Init+0xa0>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ad8:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <MX_TIM1_Init+0xa0>)
 8001ada:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ade:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae0:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <MX_TIM1_Init+0xa0>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ae6:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <MX_TIM1_Init+0xa0>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aec:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <MX_TIM1_Init+0xa0>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001af2:	4815      	ldr	r0, [pc, #84]	; (8001b48 <MX_TIM1_Init+0xa0>)
 8001af4:	f003 faec 	bl	80050d0 <HAL_TIM_Base_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001afe:	f000 f99f 	bl	8001e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b08:	f107 0310 	add.w	r3, r7, #16
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	480e      	ldr	r0, [pc, #56]	; (8001b48 <MX_TIM1_Init+0xa0>)
 8001b10:	f004 f868 	bl	8005be4 <HAL_TIM_ConfigClockSource>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001b1a:	f000 f991 	bl	8001e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b22:	2300      	movs	r3, #0
 8001b24:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4806      	ldr	r0, [pc, #24]	; (8001b48 <MX_TIM1_Init+0xa0>)
 8001b30:	f004 fd7a 	bl	8006628 <HAL_TIMEx_MasterConfigSynchronization>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b3a:	f000 f981 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b3e:	bf00      	nop
 8001b40:	3720      	adds	r7, #32
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	2000015c 	.word	0x2000015c
 8001b4c:	40012c00 	.word	0x40012c00

08001b50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08e      	sub	sp, #56	; 0x38
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]
 8001b60:	609a      	str	r2, [r3, #8]
 8001b62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b64:	f107 031c 	add.w	r3, r7, #28
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b70:	463b      	mov	r3, r7
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]
 8001b7a:	60da      	str	r2, [r3, #12]
 8001b7c:	611a      	str	r2, [r3, #16]
 8001b7e:	615a      	str	r2, [r3, #20]
 8001b80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b82:	4b2d      	ldr	r3, [pc, #180]	; (8001c38 <MX_TIM3_Init+0xe8>)
 8001b84:	4a2d      	ldr	r2, [pc, #180]	; (8001c3c <MX_TIM3_Init+0xec>)
 8001b86:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 8001b88:	4b2b      	ldr	r3, [pc, #172]	; (8001c38 <MX_TIM3_Init+0xe8>)
 8001b8a:	f240 321f 	movw	r2, #799	; 0x31f
 8001b8e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b90:	4b29      	ldr	r3, [pc, #164]	; (8001c38 <MX_TIM3_Init+0xe8>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001b96:	4b28      	ldr	r3, [pc, #160]	; (8001c38 <MX_TIM3_Init+0xe8>)
 8001b98:	2264      	movs	r2, #100	; 0x64
 8001b9a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9c:	4b26      	ldr	r3, [pc, #152]	; (8001c38 <MX_TIM3_Init+0xe8>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba2:	4b25      	ldr	r3, [pc, #148]	; (8001c38 <MX_TIM3_Init+0xe8>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ba8:	4823      	ldr	r0, [pc, #140]	; (8001c38 <MX_TIM3_Init+0xe8>)
 8001baa:	f003 fa91 	bl	80050d0 <HAL_TIM_Base_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001bb4:	f000 f944 	bl	8001e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	481c      	ldr	r0, [pc, #112]	; (8001c38 <MX_TIM3_Init+0xe8>)
 8001bc6:	f004 f80d 	bl	8005be4 <HAL_TIM_ConfigClockSource>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001bd0:	f000 f936 	bl	8001e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001bd4:	4818      	ldr	r0, [pc, #96]	; (8001c38 <MX_TIM3_Init+0xe8>)
 8001bd6:	f003 fbd3 	bl	8005380 <HAL_TIM_PWM_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001be0:	f000 f92e 	bl	8001e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bec:	f107 031c 	add.w	r3, r7, #28
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4811      	ldr	r0, [pc, #68]	; (8001c38 <MX_TIM3_Init+0xe8>)
 8001bf4:	f004 fd18 	bl	8006628 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001bfe:	f000 f91f 	bl	8001e40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c02:	2360      	movs	r3, #96	; 0x60
 8001c04:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8001c06:	2332      	movs	r3, #50	; 0x32
 8001c08:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c12:	463b      	mov	r3, r7
 8001c14:	2200      	movs	r2, #0
 8001c16:	4619      	mov	r1, r3
 8001c18:	4807      	ldr	r0, [pc, #28]	; (8001c38 <MX_TIM3_Init+0xe8>)
 8001c1a:	f003 fecf 	bl	80059bc <HAL_TIM_PWM_ConfigChannel>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001c24:	f000 f90c 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c28:	4803      	ldr	r0, [pc, #12]	; (8001c38 <MX_TIM3_Init+0xe8>)
 8001c2a:	f000 fb1f 	bl	800226c <HAL_TIM_MspPostInit>

}
 8001c2e:	bf00      	nop
 8001c30:	3738      	adds	r7, #56	; 0x38
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	200001a8 	.word	0x200001a8
 8001c3c:	40000400 	.word	0x40000400

08001c40 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c50:	4b14      	ldr	r3, [pc, #80]	; (8001ca4 <MX_TIM6_Init+0x64>)
 8001c52:	4a15      	ldr	r2, [pc, #84]	; (8001ca8 <MX_TIM6_Init+0x68>)
 8001c54:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8001c56:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <MX_TIM6_Init+0x64>)
 8001c58:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001c5c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5e:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <MX_TIM6_Init+0x64>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 8001c64:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <MX_TIM6_Init+0x64>)
 8001c66:	220a      	movs	r2, #10
 8001c68:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <MX_TIM6_Init+0x64>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c70:	480c      	ldr	r0, [pc, #48]	; (8001ca4 <MX_TIM6_Init+0x64>)
 8001c72:	f003 fa2d 	bl	80050d0 <HAL_TIM_Base_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001c7c:	f000 f8e0 	bl	8001e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c80:	2300      	movs	r3, #0
 8001c82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <MX_TIM6_Init+0x64>)
 8001c8e:	f004 fccb 	bl	8006628 <HAL_TIMEx_MasterConfigSynchronization>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001c98:	f000 f8d2 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c9c:	bf00      	nop
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	200001f4 	.word	0x200001f4
 8001ca8:	40001000 	.word	0x40001000

08001cac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cb0:	4b14      	ldr	r3, [pc, #80]	; (8001d04 <MX_USART2_UART_Init+0x58>)
 8001cb2:	4a15      	ldr	r2, [pc, #84]	; (8001d08 <MX_USART2_UART_Init+0x5c>)
 8001cb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cb6:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <MX_USART2_UART_Init+0x58>)
 8001cb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <MX_USART2_UART_Init+0x58>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <MX_USART2_UART_Init+0x58>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cca:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <MX_USART2_UART_Init+0x58>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <MX_USART2_UART_Init+0x58>)
 8001cd2:	220c      	movs	r2, #12
 8001cd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <MX_USART2_UART_Init+0x58>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <MX_USART2_UART_Init+0x58>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ce2:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <MX_USART2_UART_Init+0x58>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <MX_USART2_UART_Init+0x58>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cee:	4805      	ldr	r0, [pc, #20]	; (8001d04 <MX_USART2_UART_Init+0x58>)
 8001cf0:	f004 fd40 	bl	8006774 <HAL_UART_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001cfa:	f000 f8a1 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000240 	.word	0x20000240
 8001d08:	40004400 	.word	0x40004400

08001d0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	; 0x28
 8001d10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	605a      	str	r2, [r3, #4]
 8001d1c:	609a      	str	r2, [r3, #8]
 8001d1e:	60da      	str	r2, [r3, #12]
 8001d20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d22:	4b3a      	ldr	r3, [pc, #232]	; (8001e0c <MX_GPIO_Init+0x100>)
 8001d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d26:	4a39      	ldr	r2, [pc, #228]	; (8001e0c <MX_GPIO_Init+0x100>)
 8001d28:	f043 0304 	orr.w	r3, r3, #4
 8001d2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d2e:	4b37      	ldr	r3, [pc, #220]	; (8001e0c <MX_GPIO_Init+0x100>)
 8001d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d32:	f003 0304 	and.w	r3, r3, #4
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d3a:	4b34      	ldr	r3, [pc, #208]	; (8001e0c <MX_GPIO_Init+0x100>)
 8001d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3e:	4a33      	ldr	r2, [pc, #204]	; (8001e0c <MX_GPIO_Init+0x100>)
 8001d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d46:	4b31      	ldr	r3, [pc, #196]	; (8001e0c <MX_GPIO_Init+0x100>)
 8001d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d52:	4b2e      	ldr	r3, [pc, #184]	; (8001e0c <MX_GPIO_Init+0x100>)
 8001d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d56:	4a2d      	ldr	r2, [pc, #180]	; (8001e0c <MX_GPIO_Init+0x100>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d5e:	4b2b      	ldr	r3, [pc, #172]	; (8001e0c <MX_GPIO_Init+0x100>)
 8001d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6a:	4b28      	ldr	r3, [pc, #160]	; (8001e0c <MX_GPIO_Init+0x100>)
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6e:	4a27      	ldr	r2, [pc, #156]	; (8001e0c <MX_GPIO_Init+0x100>)
 8001d70:	f043 0302 	orr.w	r3, r3, #2
 8001d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d76:	4b25      	ldr	r3, [pc, #148]	; (8001e0c <MX_GPIO_Init+0x100>)
 8001d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d82:	2200      	movs	r2, #0
 8001d84:	2120      	movs	r1, #32
 8001d86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d8a:	f001 f809 	bl	8002da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d94:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001d98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d9e:	f107 0314 	add.w	r3, r7, #20
 8001da2:	4619      	mov	r1, r3
 8001da4:	481a      	ldr	r0, [pc, #104]	; (8001e10 <MX_GPIO_Init+0x104>)
 8001da6:	f000 fe51 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001daa:	2320      	movs	r3, #32
 8001dac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dae:	2301      	movs	r3, #1
 8001db0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db6:	2300      	movs	r3, #0
 8001db8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001dba:	f107 0314 	add.w	r3, r7, #20
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc4:	f000 fe42 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : pin_4_Pin */
  GPIO_InitStruct.Pin = pin_4_Pin;
 8001dc8:	2320      	movs	r3, #32
 8001dca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dcc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001dd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(pin_4_GPIO_Port, &GPIO_InitStruct);
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	4619      	mov	r1, r3
 8001ddc:	480d      	ldr	r0, [pc, #52]	; (8001e14 <MX_GPIO_Init+0x108>)
 8001dde:	f000 fe35 	bl	8002a4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001de2:	2200      	movs	r2, #0
 8001de4:	2105      	movs	r1, #5
 8001de6:	2017      	movs	r0, #23
 8001de8:	f000 fd86 	bl	80028f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001dec:	2017      	movs	r0, #23
 8001dee:	f000 fd9f 	bl	8002930 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001df2:	2200      	movs	r2, #0
 8001df4:	2105      	movs	r1, #5
 8001df6:	2028      	movs	r0, #40	; 0x28
 8001df8:	f000 fd7e 	bl	80028f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001dfc:	2028      	movs	r0, #40	; 0x28
 8001dfe:	f000 fd97 	bl	8002930 <HAL_NVIC_EnableIRQ>

}
 8001e02:	bf00      	nop
 8001e04:	3728      	adds	r7, #40	; 0x28
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	48000800 	.word	0x48000800
 8001e14:	48000400 	.word	0x48000400

08001e18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a05      	ldr	r2, [pc, #20]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d101      	bne.n	8001e2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e2a:	f000 fc69 	bl	8002700 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  mycallback();
 8001e2e:	f000 f883 	bl	8001f38 <mycallback>

  /* USER CODE END Callback 1 */
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40014400 	.word	0x40014400

08001e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e44:	b672      	cpsid	i
}
 8001e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e48:	e7fe      	b.n	8001e48 <Error_Handler+0x8>

08001e4a <_ZN6BUZZERC1EP17TIM_HandleTypeDef>:


int count = 0;
int frame = 0;

BUZZER::BUZZER(TIM_HandleTypeDef *htim)
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	6039      	str	r1, [r7, #0]
{
	htim = htim;

}
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <_ZN6BUZZER15buzzerStartPlayEv>:
void BUZZER::buzzerStartPlay()
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(&htim3);
 8001e6c:	4808      	ldr	r0, [pc, #32]	; (8001e90 <_ZN6BUZZER15buzzerStartPlayEv+0x2c>)
 8001e6e:	f003 f987 	bl	8005180 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001e72:	2100      	movs	r1, #0
 8001e74:	4806      	ldr	r0, [pc, #24]	; (8001e90 <_ZN6BUZZER15buzzerStartPlayEv+0x2c>)
 8001e76:	f003 fae5 	bl	8005444 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_AUTORELOAD(&htim3,150);
 8001e7a:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <_ZN6BUZZER15buzzerStartPlayEv+0x2c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2296      	movs	r2, #150	; 0x96
 8001e80:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e82:	4b03      	ldr	r3, [pc, #12]	; (8001e90 <_ZN6BUZZER15buzzerStartPlayEv+0x2c>)
 8001e84:	2296      	movs	r2, #150	; 0x96
 8001e86:	60da      	str	r2, [r3, #12]
}
 8001e88:	bf00      	nop
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	200001a8 	.word	0x200001a8

08001e94 <_ZN6BUZZER14buzzerStopPlayEv>:
void BUZZER::buzzerStopPlay()
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop(&htim3);
 8001e9c:	4805      	ldr	r0, [pc, #20]	; (8001eb4 <_ZN6BUZZER14buzzerStopPlayEv+0x20>)
 8001e9e:	f003 f9d7 	bl	8005250 <HAL_TIM_Base_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	4803      	ldr	r0, [pc, #12]	; (8001eb4 <_ZN6BUZZER14buzzerStopPlayEv+0x20>)
 8001ea6:	f003 fbd3 	bl	8005650 <HAL_TIM_PWM_Stop>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	200001a8 	.word	0x200001a8

08001eb8 <_ZN12CliContainerC1Ev>:
	CliContainer(){}
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <_ZN12CliContainerD1Ev>:
	~CliContainer(){}
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <_write>:
CliContainer container = CliContainer();
LED ledblue = LED(LD2_GPIO_Port, LD2_Pin);
BUZZER buzzer = BUZZER(&htim3);
int alarm_on = 0;

int _write(int fd, char *ptr, int len) {
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	f04f 33ff 	mov.w	r3, #4294967295
 8001f00:	68b9      	ldr	r1, [r7, #8]
 8001f02:	4804      	ldr	r0, [pc, #16]	; (8001f14 <_write+0x28>)
 8001f04:	f004 fc84 	bl	8006810 <HAL_UART_Transmit>
	return len;
 8001f08:	687b      	ldr	r3, [r7, #4]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000240 	.word	0x20000240

08001f18 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	80fb      	strh	r3, [r7, #6]
	dht.Dht_onGpioInterrupt(pin_4_Pin);
 8001f22:	2120      	movs	r1, #32
 8001f24:	4803      	ldr	r0, [pc, #12]	; (8001f34 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001f26:	f7ff f943 	bl	80011b0 <_ZN3DHT19Dht_onGpioInterruptEt>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	200002d8 	.word	0x200002d8

08001f38 <mycallback>:
void mycallback(){
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0

}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <mymaininit>:

void mymaininit()
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001f4c:	2036      	movs	r0, #54	; 0x36
 8001f4e:	f000 fcef 	bl	8002930 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim6);
 8001f52:	4807      	ldr	r0, [pc, #28]	; (8001f70 <mymaininit+0x28>)
 8001f54:	f003 f9a4 	bl	80052a0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim3);
 8001f58:	4806      	ldr	r0, [pc, #24]	; (8001f74 <mymaininit+0x2c>)
 8001f5a:	f003 f911 	bl	8005180 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim1);
 8001f5e:	4806      	ldr	r0, [pc, #24]	; (8001f78 <mymaininit+0x30>)
 8001f60:	f003 f99e 	bl	80052a0 <HAL_TIM_Base_Start_IT>
	container.initCLIcontainer();
 8001f64:	4805      	ldr	r0, [pc, #20]	; (8001f7c <mymaininit+0x34>)
 8001f66:	f7fe fedf 	bl	8000d28 <_ZN12CliContainer16initCLIcontainerEv>
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	200001f4 	.word	0x200001f4
 8001f74:	200001a8 	.word	0x200001a8
 8001f78:	2000015c 	.word	0x2000015c
 8001f7c:	20000304 	.word	0x20000304

08001f80 <READ_TEMP_func>:

		}
}

void READ_TEMP_func(void *argument)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	  mymaininit();
 8001f88:	f7ff ffde 	bl	8001f48 <mymaininit>

  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(DHT_MONITORHandle, 0xFF);
 8001f8c:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <READ_TEMP_func+0x24>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	21ff      	movs	r1, #255	; 0xff
 8001f92:	4618      	mov	r0, r3
 8001f94:	f005 ff7c 	bl	8007e90 <osSemaphoreAcquire>
	  if(dht.Dht_hasData()){
 8001f98:	4803      	ldr	r0, [pc, #12]	; (8001fa8 <READ_TEMP_func+0x28>)
 8001f9a:	f7ff f9a5 	bl	80012e8 <_ZN3DHT11Dht_hasDataEv>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
	  osSemaphoreAcquire(DHT_MONITORHandle, 0xFF);
 8001fa2:	e7f3      	b.n	8001f8c <READ_TEMP_func+0xc>
 8001fa4:	200002d0 	.word	0x200002d0
 8001fa8:	200002d8 	.word	0x200002d8

08001fac <comtask_func>:
  }
  /* USER CODE END 5 */
}

void comtask_func(void *argument)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN comtask_func */

	/* Infinite loop */
	for (;;) {

		if (commTask()) {
 8001fb4:	f7ff fbf8 	bl	80017a8 <_Z8commTaskv>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	bf14      	ite	ne
 8001fbe:	2301      	movne	r3, #1
 8001fc0:	2300      	moveq	r3, #0
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f5      	beq.n	8001fb4 <comtask_func+0x8>
			handleCommand();
 8001fc8:	f7ff fc72 	bl	80018b0 <_Z13handleCommandv>
		if (commTask()) {
 8001fcc:	e7f2      	b.n	8001fb4 <comtask_func+0x8>
	...

08001fd0 <monitor_func>:
		}
	}
	/* USER CODE END comtask_func */
}
void monitor_func(void *argument)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 /* USER CODE BEGIN monitor_func */
 /* Infinite loop */
 for(;;)
 {
	 osSemaphoreRelease(DHT_MONITORHandle);
 8001fd8:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <monitor_func+0x24>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f005 ffa9 	bl	8007f34 <osSemaphoreRelease>
	 dht.Dht_readAsync();
 8001fe2:	4805      	ldr	r0, [pc, #20]	; (8001ff8 <monitor_func+0x28>)
 8001fe4:	f7ff f8bc 	bl	8001160 <_ZN3DHT13Dht_readAsyncEv>
	 osDelay(1000);
 8001fe8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fec:	f005 feac 	bl	8007d48 <osDelay>
	 osSemaphoreRelease(DHT_MONITORHandle);
 8001ff0:	e7f2      	b.n	8001fd8 <monitor_func+0x8>
 8001ff2:	bf00      	nop
 8001ff4:	200002d0 	.word	0x200002d0
 8001ff8:	200002d8 	.word	0x200002d8

08001ffc <_Z41__static_initialization_and_destruction_0ii>:
		FRAME_0,FRAME_1,
		FRAME_0,FRAME_1,
		FRAME_2,FRAME_2,FRAME_0,
		0

};
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d11b      	bne.n	8002044 <_Z41__static_initialization_and_destruction_0ii+0x48>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002012:	4293      	cmp	r3, r2
 8002014:	d116      	bne.n	8002044 <_Z41__static_initialization_and_destruction_0ii+0x48>
DHT dht = DHT(GPIOB,pin_4_Pin);
 8002016:	2220      	movs	r2, #32
 8002018:	4912      	ldr	r1, [pc, #72]	; (8002064 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800201a:	4813      	ldr	r0, [pc, #76]	; (8002068 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800201c:	f7ff f856 	bl	80010cc <_ZN3DHTC1EP12GPIO_TypeDeft>
_RTC rtc = _RTC(&hi2c1,0xD0);
 8002020:	22d0      	movs	r2, #208	; 0xd0
 8002022:	4912      	ldr	r1, [pc, #72]	; (800206c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8002024:	4812      	ldr	r0, [pc, #72]	; (8002070 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8002026:	f7ff f9d5 	bl	80013d4 <_ZN4_RTCC1EP19__I2C_HandleTypeDefm>
CliContainer container = CliContainer();
 800202a:	4812      	ldr	r0, [pc, #72]	; (8002074 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800202c:	f7ff ff44 	bl	8001eb8 <_ZN12CliContainerC1Ev>
LED ledblue = LED(LD2_GPIO_Port, LD2_Pin);
 8002030:	2220      	movs	r2, #32
 8002032:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002036:	4810      	ldr	r0, [pc, #64]	; (8002078 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8002038:	f7ff f974 	bl	8001324 <_ZN3LEDC1EP12GPIO_TypeDeft>
BUZZER buzzer = BUZZER(&htim3);
 800203c:	490f      	ldr	r1, [pc, #60]	; (800207c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800203e:	4810      	ldr	r0, [pc, #64]	; (8002080 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002040:	f7ff ff03 	bl	8001e4a <_ZN6BUZZERC1EP17TIM_HandleTypeDef>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d107      	bne.n	800205a <_Z41__static_initialization_and_destruction_0ii+0x5e>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002050:	4293      	cmp	r3, r2
 8002052:	d102      	bne.n	800205a <_Z41__static_initialization_and_destruction_0ii+0x5e>
CliContainer container = CliContainer();
 8002054:	4807      	ldr	r0, [pc, #28]	; (8002074 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8002056:	f7ff ff3e 	bl	8001ed6 <_ZN12CliContainerD1Ev>
};
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	48000400 	.word	0x48000400
 8002068:	200002d8 	.word	0x200002d8
 800206c:	20000108 	.word	0x20000108
 8002070:	200002f8 	.word	0x200002f8
 8002074:	20000304 	.word	0x20000304
 8002078:	200003a8 	.word	0x200003a8
 800207c:	200001a8 	.word	0x200001a8
 8002080:	200003bc 	.word	0x200003bc

08002084 <_GLOBAL__sub_I_dht>:
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
 8002088:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800208c:	2001      	movs	r0, #1
 800208e:	f7ff ffb5 	bl	8001ffc <_Z41__static_initialization_and_destruction_0ii>
 8002092:	bd80      	pop	{r7, pc}

08002094 <_GLOBAL__sub_D_dht>:
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
 8002098:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800209c:	2000      	movs	r0, #0
 800209e:	f7ff ffad 	bl	8001ffc <_Z41__static_initialization_and_destruction_0ii>
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020aa:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <HAL_MspInit+0x4c>)
 80020ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ae:	4a10      	ldr	r2, [pc, #64]	; (80020f0 <HAL_MspInit+0x4c>)
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	6613      	str	r3, [r2, #96]	; 0x60
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <HAL_MspInit+0x4c>)
 80020b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	607b      	str	r3, [r7, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020c2:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <HAL_MspInit+0x4c>)
 80020c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c6:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <HAL_MspInit+0x4c>)
 80020c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020cc:	6593      	str	r3, [r2, #88]	; 0x58
 80020ce:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <HAL_MspInit+0x4c>)
 80020d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020da:	2200      	movs	r2, #0
 80020dc:	210f      	movs	r1, #15
 80020de:	f06f 0001 	mvn.w	r0, #1
 80020e2:	f000 fc09 	bl	80028f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40021000 	.word	0x40021000

080020f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b0ac      	sub	sp, #176	; 0xb0
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	60da      	str	r2, [r3, #12]
 800210a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	2288      	movs	r2, #136	; 0x88
 8002112:	2100      	movs	r1, #0
 8002114:	4618      	mov	r0, r3
 8002116:	f009 f84f 	bl	800b1b8 <memset>
  if(hi2c->Instance==I2C1)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a21      	ldr	r2, [pc, #132]	; (80021a4 <HAL_I2C_MspInit+0xb0>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d13b      	bne.n	800219c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002124:	2340      	movs	r3, #64	; 0x40
 8002126:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002128:	2300      	movs	r3, #0
 800212a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	4618      	mov	r0, r3
 8002132:	f002 fb11 	bl	8004758 <HAL_RCCEx_PeriphCLKConfig>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800213c:	f7ff fe80 	bl	8001e40 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002140:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <HAL_I2C_MspInit+0xb4>)
 8002142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002144:	4a18      	ldr	r2, [pc, #96]	; (80021a8 <HAL_I2C_MspInit+0xb4>)
 8002146:	f043 0302 	orr.w	r3, r3, #2
 800214a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800214c:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <HAL_I2C_MspInit+0xb4>)
 800214e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002158:	f44f 7340 	mov.w	r3, #768	; 0x300
 800215c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002160:	2312      	movs	r3, #18
 8002162:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216c:	2303      	movs	r3, #3
 800216e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002172:	2304      	movs	r3, #4
 8002174:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002178:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800217c:	4619      	mov	r1, r3
 800217e:	480b      	ldr	r0, [pc, #44]	; (80021ac <HAL_I2C_MspInit+0xb8>)
 8002180:	f000 fc64 	bl	8002a4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002184:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <HAL_I2C_MspInit+0xb4>)
 8002186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002188:	4a07      	ldr	r2, [pc, #28]	; (80021a8 <HAL_I2C_MspInit+0xb4>)
 800218a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800218e:	6593      	str	r3, [r2, #88]	; 0x58
 8002190:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <HAL_I2C_MspInit+0xb4>)
 8002192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800219c:	bf00      	nop
 800219e:	37b0      	adds	r7, #176	; 0xb0
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40005400 	.word	0x40005400
 80021a8:	40021000 	.word	0x40021000
 80021ac:	48000400 	.word	0x48000400

080021b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a27      	ldr	r2, [pc, #156]	; (800225c <HAL_TIM_Base_MspInit+0xac>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d114      	bne.n	80021ec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021c2:	4b27      	ldr	r3, [pc, #156]	; (8002260 <HAL_TIM_Base_MspInit+0xb0>)
 80021c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c6:	4a26      	ldr	r2, [pc, #152]	; (8002260 <HAL_TIM_Base_MspInit+0xb0>)
 80021c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021cc:	6613      	str	r3, [r2, #96]	; 0x60
 80021ce:	4b24      	ldr	r3, [pc, #144]	; (8002260 <HAL_TIM_Base_MspInit+0xb0>)
 80021d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 80021da:	2200      	movs	r2, #0
 80021dc:	2105      	movs	r1, #5
 80021de:	2019      	movs	r0, #25
 80021e0:	f000 fb8a 	bl	80028f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80021e4:	2019      	movs	r0, #25
 80021e6:	f000 fba3 	bl	8002930 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80021ea:	e032      	b.n	8002252 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a1c      	ldr	r2, [pc, #112]	; (8002264 <HAL_TIM_Base_MspInit+0xb4>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d114      	bne.n	8002220 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021f6:	4b1a      	ldr	r3, [pc, #104]	; (8002260 <HAL_TIM_Base_MspInit+0xb0>)
 80021f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fa:	4a19      	ldr	r2, [pc, #100]	; (8002260 <HAL_TIM_Base_MspInit+0xb0>)
 80021fc:	f043 0302 	orr.w	r3, r3, #2
 8002200:	6593      	str	r3, [r2, #88]	; 0x58
 8002202:	4b17      	ldr	r3, [pc, #92]	; (8002260 <HAL_TIM_Base_MspInit+0xb0>)
 8002204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	613b      	str	r3, [r7, #16]
 800220c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800220e:	2200      	movs	r2, #0
 8002210:	2105      	movs	r1, #5
 8002212:	201d      	movs	r0, #29
 8002214:	f000 fb70 	bl	80028f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002218:	201d      	movs	r0, #29
 800221a:	f000 fb89 	bl	8002930 <HAL_NVIC_EnableIRQ>
}
 800221e:	e018      	b.n	8002252 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM6)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a10      	ldr	r2, [pc, #64]	; (8002268 <HAL_TIM_Base_MspInit+0xb8>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d113      	bne.n	8002252 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800222a:	4b0d      	ldr	r3, [pc, #52]	; (8002260 <HAL_TIM_Base_MspInit+0xb0>)
 800222c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222e:	4a0c      	ldr	r2, [pc, #48]	; (8002260 <HAL_TIM_Base_MspInit+0xb0>)
 8002230:	f043 0310 	orr.w	r3, r3, #16
 8002234:	6593      	str	r3, [r2, #88]	; 0x58
 8002236:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <HAL_TIM_Base_MspInit+0xb0>)
 8002238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002242:	2200      	movs	r2, #0
 8002244:	2105      	movs	r1, #5
 8002246:	2036      	movs	r0, #54	; 0x36
 8002248:	f000 fb56 	bl	80028f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800224c:	2036      	movs	r0, #54	; 0x36
 800224e:	f000 fb6f 	bl	8002930 <HAL_NVIC_EnableIRQ>
}
 8002252:	bf00      	nop
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40012c00 	.word	0x40012c00
 8002260:	40021000 	.word	0x40021000
 8002264:	40000400 	.word	0x40000400
 8002268:	40001000 	.word	0x40001000

0800226c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f107 030c 	add.w	r3, r7, #12
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a11      	ldr	r2, [pc, #68]	; (80022d0 <HAL_TIM_MspPostInit+0x64>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d11b      	bne.n	80022c6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800228e:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <HAL_TIM_MspPostInit+0x68>)
 8002290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002292:	4a10      	ldr	r2, [pc, #64]	; (80022d4 <HAL_TIM_MspPostInit+0x68>)
 8002294:	f043 0302 	orr.w	r3, r3, #2
 8002298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800229a:	4b0e      	ldr	r3, [pc, #56]	; (80022d4 <HAL_TIM_MspPostInit+0x68>)
 800229c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	60bb      	str	r3, [r7, #8]
 80022a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80022a6:	2310      	movs	r3, #16
 80022a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022aa:	2302      	movs	r3, #2
 80022ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022b6:	2302      	movs	r3, #2
 80022b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ba:	f107 030c 	add.w	r3, r7, #12
 80022be:	4619      	mov	r1, r3
 80022c0:	4805      	ldr	r0, [pc, #20]	; (80022d8 <HAL_TIM_MspPostInit+0x6c>)
 80022c2:	f000 fbc3 	bl	8002a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80022c6:	bf00      	nop
 80022c8:	3720      	adds	r7, #32
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40000400 	.word	0x40000400
 80022d4:	40021000 	.word	0x40021000
 80022d8:	48000400 	.word	0x48000400

080022dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b0ac      	sub	sp, #176	; 0xb0
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
 80022f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022f4:	f107 0314 	add.w	r3, r7, #20
 80022f8:	2288      	movs	r2, #136	; 0x88
 80022fa:	2100      	movs	r1, #0
 80022fc:	4618      	mov	r0, r3
 80022fe:	f008 ff5b 	bl	800b1b8 <memset>
  if(huart->Instance==USART2)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a25      	ldr	r2, [pc, #148]	; (800239c <HAL_UART_MspInit+0xc0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d143      	bne.n	8002394 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800230c:	2302      	movs	r3, #2
 800230e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002310:	2300      	movs	r3, #0
 8002312:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	4618      	mov	r0, r3
 800231a:	f002 fa1d 	bl	8004758 <HAL_RCCEx_PeriphCLKConfig>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002324:	f7ff fd8c 	bl	8001e40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002328:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <HAL_UART_MspInit+0xc4>)
 800232a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232c:	4a1c      	ldr	r2, [pc, #112]	; (80023a0 <HAL_UART_MspInit+0xc4>)
 800232e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002332:	6593      	str	r3, [r2, #88]	; 0x58
 8002334:	4b1a      	ldr	r3, [pc, #104]	; (80023a0 <HAL_UART_MspInit+0xc4>)
 8002336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002340:	4b17      	ldr	r3, [pc, #92]	; (80023a0 <HAL_UART_MspInit+0xc4>)
 8002342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002344:	4a16      	ldr	r2, [pc, #88]	; (80023a0 <HAL_UART_MspInit+0xc4>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800234c:	4b14      	ldr	r3, [pc, #80]	; (80023a0 <HAL_UART_MspInit+0xc4>)
 800234e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002358:	230c      	movs	r3, #12
 800235a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235e:	2302      	movs	r3, #2
 8002360:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236a:	2303      	movs	r3, #3
 800236c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002370:	2307      	movs	r3, #7
 8002372:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002376:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800237a:	4619      	mov	r1, r3
 800237c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002380:	f000 fb64 	bl	8002a4c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002384:	2200      	movs	r2, #0
 8002386:	2105      	movs	r1, #5
 8002388:	2026      	movs	r0, #38	; 0x26
 800238a:	f000 fab5 	bl	80028f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800238e:	2026      	movs	r0, #38	; 0x26
 8002390:	f000 face 	bl	8002930 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002394:	bf00      	nop
 8002396:	37b0      	adds	r7, #176	; 0xb0
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40004400 	.word	0x40004400
 80023a0:	40021000 	.word	0x40021000

080023a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08c      	sub	sp, #48	; 0x30
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80023b4:	2200      	movs	r2, #0
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	2019      	movs	r0, #25
 80023ba:	f000 fa9d 	bl	80028f8 <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80023be:	2019      	movs	r0, #25
 80023c0:	f000 fab6 	bl	8002930 <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 80023c4:	4b1e      	ldr	r3, [pc, #120]	; (8002440 <HAL_InitTick+0x9c>)
 80023c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023c8:	4a1d      	ldr	r2, [pc, #116]	; (8002440 <HAL_InitTick+0x9c>)
 80023ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ce:	6613      	str	r3, [r2, #96]	; 0x60
 80023d0:	4b1b      	ldr	r3, [pc, #108]	; (8002440 <HAL_InitTick+0x9c>)
 80023d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80023dc:	f107 0210 	add.w	r2, r7, #16
 80023e0:	f107 0314 	add.w	r3, r7, #20
 80023e4:	4611      	mov	r1, r2
 80023e6:	4618      	mov	r0, r3
 80023e8:	f002 f924 	bl	8004634 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80023ec:	f002 f90c 	bl	8004608 <HAL_RCC_GetPCLK2Freq>
 80023f0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80023f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f4:	4a13      	ldr	r2, [pc, #76]	; (8002444 <HAL_InitTick+0xa0>)
 80023f6:	fba2 2303 	umull	r2, r3, r2, r3
 80023fa:	0c9b      	lsrs	r3, r3, #18
 80023fc:	3b01      	subs	r3, #1
 80023fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8002400:	4b11      	ldr	r3, [pc, #68]	; (8002448 <HAL_InitTick+0xa4>)
 8002402:	4a12      	ldr	r2, [pc, #72]	; (800244c <HAL_InitTick+0xa8>)
 8002404:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8002406:	4b10      	ldr	r3, [pc, #64]	; (8002448 <HAL_InitTick+0xa4>)
 8002408:	f240 32e7 	movw	r2, #999	; 0x3e7
 800240c:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 800240e:	4a0e      	ldr	r2, [pc, #56]	; (8002448 <HAL_InitTick+0xa4>)
 8002410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002412:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <HAL_InitTick+0xa4>)
 8002416:	2200      	movs	r2, #0
 8002418:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800241a:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <HAL_InitTick+0xa4>)
 800241c:	2200      	movs	r2, #0
 800241e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8002420:	4809      	ldr	r0, [pc, #36]	; (8002448 <HAL_InitTick+0xa4>)
 8002422:	f002 fe55 	bl	80050d0 <HAL_TIM_Base_Init>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d104      	bne.n	8002436 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 800242c:	4806      	ldr	r0, [pc, #24]	; (8002448 <HAL_InitTick+0xa4>)
 800242e:	f002 ff37 	bl	80052a0 <HAL_TIM_Base_Start_IT>
 8002432:	4603      	mov	r3, r0
 8002434:	e000      	b.n	8002438 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
}
 8002438:	4618      	mov	r0, r3
 800243a:	3730      	adds	r7, #48	; 0x30
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40021000 	.word	0x40021000
 8002444:	431bde83 	.word	0x431bde83
 8002448:	200003c0 	.word	0x200003c0
 800244c:	40014400 	.word	0x40014400

08002450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002454:	e7fe      	b.n	8002454 <NMI_Handler+0x4>

08002456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800245a:	e7fe      	b.n	800245a <HardFault_Handler+0x4>

0800245c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002460:	e7fe      	b.n	8002460 <MemManage_Handler+0x4>

08002462 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002466:	e7fe      	b.n	8002466 <BusFault_Handler+0x4>

08002468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800246c:	e7fe      	b.n	800246c <UsageFault_Handler+0x4>

0800246e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(pin_4_Pin);
 8002480:	2020      	movs	r0, #32
 8002482:	f000 fcbf 	bl	8002e04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002490:	4803      	ldr	r0, [pc, #12]	; (80024a0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002492:	f003 f973 	bl	800577c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002496:	4803      	ldr	r0, [pc, #12]	; (80024a4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002498:	f003 f970 	bl	800577c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800249c:	bf00      	nop
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	2000015c 	.word	0x2000015c
 80024a4:	200003c0 	.word	0x200003c0

080024a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024ac:	4802      	ldr	r0, [pc, #8]	; (80024b8 <TIM3_IRQHandler+0x10>)
 80024ae:	f003 f965 	bl	800577c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	200001a8 	.word	0x200001a8

080024bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024c0:	4802      	ldr	r0, [pc, #8]	; (80024cc <USART2_IRQHandler+0x10>)
 80024c2:	f004 fb0b 	bl	8006adc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000240 	.word	0x20000240

080024d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80024d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80024d8:	f000 fc94 	bl	8002e04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024dc:	bf00      	nop
 80024de:	bd80      	pop	{r7, pc}

080024e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80024e4:	4802      	ldr	r0, [pc, #8]	; (80024f0 <TIM6_DAC_IRQHandler+0x10>)
 80024e6:	f003 f949 	bl	800577c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	200001f4 	.word	0x200001f4

080024f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
	return 1;
 80024f8:	2301      	movs	r3, #1
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <_kill>:

int _kill(int pid, int sig)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800250e:	f008 fe0b 	bl	800b128 <__errno>
 8002512:	4603      	mov	r3, r0
 8002514:	2216      	movs	r2, #22
 8002516:	601a      	str	r2, [r3, #0]
	return -1;
 8002518:	f04f 33ff 	mov.w	r3, #4294967295
}
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <_exit>:

void _exit (int status)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800252c:	f04f 31ff 	mov.w	r1, #4294967295
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff ffe7 	bl	8002504 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002536:	e7fe      	b.n	8002536 <_exit+0x12>

08002538 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]
 8002548:	e00a      	b.n	8002560 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800254a:	f3af 8000 	nop.w
 800254e:	4601      	mov	r1, r0
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	60ba      	str	r2, [r7, #8]
 8002556:	b2ca      	uxtb	r2, r1
 8002558:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	3301      	adds	r3, #1
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	429a      	cmp	r2, r3
 8002566:	dbf0      	blt.n	800254a <_read+0x12>
	}

return len;
 8002568:	687b      	ldr	r3, [r7, #4]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
	return -1;
 800257a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800257e:	4618      	mov	r0, r3
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800259a:	605a      	str	r2, [r3, #4]
	return 0;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <_isatty>:

int _isatty(int file)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
	return 1;
 80025b2:	2301      	movs	r3, #1
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
	return 0;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025e4:	4a14      	ldr	r2, [pc, #80]	; (8002638 <_sbrk+0x5c>)
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <_sbrk+0x60>)
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025f0:	4b13      	ldr	r3, [pc, #76]	; (8002640 <_sbrk+0x64>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d102      	bne.n	80025fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025f8:	4b11      	ldr	r3, [pc, #68]	; (8002640 <_sbrk+0x64>)
 80025fa:	4a12      	ldr	r2, [pc, #72]	; (8002644 <_sbrk+0x68>)
 80025fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025fe:	4b10      	ldr	r3, [pc, #64]	; (8002640 <_sbrk+0x64>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4413      	add	r3, r2
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	429a      	cmp	r2, r3
 800260a:	d207      	bcs.n	800261c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800260c:	f008 fd8c 	bl	800b128 <__errno>
 8002610:	4603      	mov	r3, r0
 8002612:	220c      	movs	r2, #12
 8002614:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002616:	f04f 33ff 	mov.w	r3, #4294967295
 800261a:	e009      	b.n	8002630 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800261c:	4b08      	ldr	r3, [pc, #32]	; (8002640 <_sbrk+0x64>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002622:	4b07      	ldr	r3, [pc, #28]	; (8002640 <_sbrk+0x64>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4413      	add	r3, r2
 800262a:	4a05      	ldr	r2, [pc, #20]	; (8002640 <_sbrk+0x64>)
 800262c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800262e:	68fb      	ldr	r3, [r7, #12]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20018000 	.word	0x20018000
 800263c:	00000400 	.word	0x00000400
 8002640:	2000040c 	.word	0x2000040c
 8002644:	200034a0 	.word	0x200034a0

08002648 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <SystemInit+0x20>)
 800264e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002652:	4a05      	ldr	r2, [pc, #20]	; (8002668 <SystemInit+0x20>)
 8002654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800265c:	bf00      	nop
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800266c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002670:	f7ff ffea 	bl	8002648 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002674:	480c      	ldr	r0, [pc, #48]	; (80026a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002676:	490d      	ldr	r1, [pc, #52]	; (80026ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002678:	4a0d      	ldr	r2, [pc, #52]	; (80026b0 <LoopForever+0xe>)
  movs r3, #0
 800267a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800267c:	e002      	b.n	8002684 <LoopCopyDataInit>

0800267e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800267e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002682:	3304      	adds	r3, #4

08002684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002688:	d3f9      	bcc.n	800267e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800268a:	4a0a      	ldr	r2, [pc, #40]	; (80026b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800268c:	4c0a      	ldr	r4, [pc, #40]	; (80026b8 <LoopForever+0x16>)
  movs r3, #0
 800268e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002690:	e001      	b.n	8002696 <LoopFillZerobss>

08002692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002694:	3204      	adds	r2, #4

08002696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002698:	d3fb      	bcc.n	8002692 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800269a:	f008 fd4b 	bl	800b134 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800269e:	f7ff f923 	bl	80018e8 <main>

080026a2 <LoopForever>:

LoopForever:
    b LoopForever
 80026a2:	e7fe      	b.n	80026a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80026a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80026a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026ac:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80026b0:	0800d2c8 	.word	0x0800d2c8
  ldr r2, =_sbss
 80026b4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80026b8:	200034a0 	.word	0x200034a0

080026bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026bc:	e7fe      	b.n	80026bc <ADC1_2_IRQHandler>
	...

080026c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026ca:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <HAL_Init+0x3c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a0b      	ldr	r2, [pc, #44]	; (80026fc <HAL_Init+0x3c>)
 80026d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026d6:	2003      	movs	r0, #3
 80026d8:	f000 f903 	bl	80028e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026dc:	2005      	movs	r0, #5
 80026de:	f7ff fe61 	bl	80023a4 <HAL_InitTick>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d002      	beq.n	80026ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	71fb      	strb	r3, [r7, #7]
 80026ec:	e001      	b.n	80026f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026ee:	f7ff fcd9 	bl	80020a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026f2:	79fb      	ldrb	r3, [r7, #7]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40022000 	.word	0x40022000

08002700 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002704:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_IncTick+0x20>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	461a      	mov	r2, r3
 800270a:	4b06      	ldr	r3, [pc, #24]	; (8002724 <HAL_IncTick+0x24>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4413      	add	r3, r2
 8002710:	4a04      	ldr	r2, [pc, #16]	; (8002724 <HAL_IncTick+0x24>)
 8002712:	6013      	str	r3, [r2, #0]
}
 8002714:	bf00      	nop
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	20000008 	.word	0x20000008
 8002724:	20000410 	.word	0x20000410

08002728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return uwTick;
 800272c:	4b03      	ldr	r3, [pc, #12]	; (800273c <HAL_GetTick+0x14>)
 800272e:	681b      	ldr	r3, [r3, #0]
}
 8002730:	4618      	mov	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	20000410 	.word	0x20000410

08002740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002748:	f7ff ffee 	bl	8002728 <HAL_GetTick>
 800274c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002758:	d005      	beq.n	8002766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800275a:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <HAL_Delay+0x44>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4413      	add	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002766:	bf00      	nop
 8002768:	f7ff ffde 	bl	8002728 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	429a      	cmp	r2, r3
 8002776:	d8f7      	bhi.n	8002768 <HAL_Delay+0x28>
  {
  }
}
 8002778:	bf00      	nop
 800277a:	bf00      	nop
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20000008 	.word	0x20000008

08002788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002798:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <__NVIC_SetPriorityGrouping+0x44>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027a4:	4013      	ands	r3, r2
 80027a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ba:	4a04      	ldr	r2, [pc, #16]	; (80027cc <__NVIC_SetPriorityGrouping+0x44>)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	60d3      	str	r3, [r2, #12]
}
 80027c0:	bf00      	nop
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027d4:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <__NVIC_GetPriorityGrouping+0x18>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	0a1b      	lsrs	r3, r3, #8
 80027da:	f003 0307 	and.w	r3, r3, #7
}
 80027de:	4618      	mov	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	db0b      	blt.n	8002816 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	f003 021f 	and.w	r2, r3, #31
 8002804:	4907      	ldr	r1, [pc, #28]	; (8002824 <__NVIC_EnableIRQ+0x38>)
 8002806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	2001      	movs	r0, #1
 800280e:	fa00 f202 	lsl.w	r2, r0, r2
 8002812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	e000e100 	.word	0xe000e100

08002828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	6039      	str	r1, [r7, #0]
 8002832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002838:	2b00      	cmp	r3, #0
 800283a:	db0a      	blt.n	8002852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	b2da      	uxtb	r2, r3
 8002840:	490c      	ldr	r1, [pc, #48]	; (8002874 <__NVIC_SetPriority+0x4c>)
 8002842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002846:	0112      	lsls	r2, r2, #4
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	440b      	add	r3, r1
 800284c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002850:	e00a      	b.n	8002868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	b2da      	uxtb	r2, r3
 8002856:	4908      	ldr	r1, [pc, #32]	; (8002878 <__NVIC_SetPriority+0x50>)
 8002858:	79fb      	ldrb	r3, [r7, #7]
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	3b04      	subs	r3, #4
 8002860:	0112      	lsls	r2, r2, #4
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	440b      	add	r3, r1
 8002866:	761a      	strb	r2, [r3, #24]
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	e000e100 	.word	0xe000e100
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800287c:	b480      	push	{r7}
 800287e:	b089      	sub	sp, #36	; 0x24
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f1c3 0307 	rsb	r3, r3, #7
 8002896:	2b04      	cmp	r3, #4
 8002898:	bf28      	it	cs
 800289a:	2304      	movcs	r3, #4
 800289c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	3304      	adds	r3, #4
 80028a2:	2b06      	cmp	r3, #6
 80028a4:	d902      	bls.n	80028ac <NVIC_EncodePriority+0x30>
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3b03      	subs	r3, #3
 80028aa:	e000      	b.n	80028ae <NVIC_EncodePriority+0x32>
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b0:	f04f 32ff 	mov.w	r2, #4294967295
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43da      	mvns	r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	401a      	ands	r2, r3
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c4:	f04f 31ff 	mov.w	r1, #4294967295
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	fa01 f303 	lsl.w	r3, r1, r3
 80028ce:	43d9      	mvns	r1, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d4:	4313      	orrs	r3, r2
         );
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3724      	adds	r7, #36	; 0x24
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b082      	sub	sp, #8
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff ff4c 	bl	8002788 <__NVIC_SetPriorityGrouping>
}
 80028f0:	bf00      	nop
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800290a:	f7ff ff61 	bl	80027d0 <__NVIC_GetPriorityGrouping>
 800290e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	68b9      	ldr	r1, [r7, #8]
 8002914:	6978      	ldr	r0, [r7, #20]
 8002916:	f7ff ffb1 	bl	800287c <NVIC_EncodePriority>
 800291a:	4602      	mov	r2, r0
 800291c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002920:	4611      	mov	r1, r2
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff ff80 	bl	8002828 <__NVIC_SetPriority>
}
 8002928:	bf00      	nop
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800293a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff ff54 	bl	80027ec <__NVIC_EnableIRQ>
}
 8002944:	bf00      	nop
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002954:	2300      	movs	r3, #0
 8002956:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d008      	beq.n	8002976 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2204      	movs	r2, #4
 8002968:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e022      	b.n	80029bc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 020e 	bic.w	r2, r2, #14
 8002984:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0201 	bic.w	r2, r2, #1
 8002994:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	f003 021c 	and.w	r2, r3, #28
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	2101      	movs	r1, #1
 80029a4:	fa01 f202 	lsl.w	r2, r1, r2
 80029a8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d005      	beq.n	80029ec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2204      	movs	r2, #4
 80029e4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	73fb      	strb	r3, [r7, #15]
 80029ea:	e029      	b.n	8002a40 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 020e 	bic.w	r2, r2, #14
 80029fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 0201 	bic.w	r2, r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a10:	f003 021c 	and.w	r2, r3, #28
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	2101      	movs	r1, #1
 8002a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a1e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	4798      	blx	r3
    }
  }
  return status;
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a5a:	e17f      	b.n	8002d5c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	2101      	movs	r1, #1
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	fa01 f303 	lsl.w	r3, r1, r3
 8002a68:	4013      	ands	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 8171 	beq.w	8002d56 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d005      	beq.n	8002a8c <HAL_GPIO_Init+0x40>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d130      	bne.n	8002aee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	2203      	movs	r2, #3
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	68da      	ldr	r2, [r3, #12]
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	43db      	mvns	r3, r3
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	091b      	lsrs	r3, r3, #4
 8002ad8:	f003 0201 	and.w	r2, r3, #1
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	2b03      	cmp	r3, #3
 8002af8:	d118      	bne.n	8002b2c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002b00:	2201      	movs	r2, #1
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	08db      	lsrs	r3, r3, #3
 8002b16:	f003 0201 	and.w	r2, r3, #1
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 0303 	and.w	r3, r3, #3
 8002b34:	2b03      	cmp	r3, #3
 8002b36:	d017      	beq.n	8002b68 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	2203      	movs	r2, #3
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 0303 	and.w	r3, r3, #3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d123      	bne.n	8002bbc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	08da      	lsrs	r2, r3, #3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3208      	adds	r2, #8
 8002b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b80:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	220f      	movs	r2, #15
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	4013      	ands	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	08da      	lsrs	r2, r3, #3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3208      	adds	r2, #8
 8002bb6:	6939      	ldr	r1, [r7, #16]
 8002bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 0203 	and.w	r2, r3, #3
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 80ac 	beq.w	8002d56 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bfe:	4b5f      	ldr	r3, [pc, #380]	; (8002d7c <HAL_GPIO_Init+0x330>)
 8002c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c02:	4a5e      	ldr	r2, [pc, #376]	; (8002d7c <HAL_GPIO_Init+0x330>)
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	6613      	str	r3, [r2, #96]	; 0x60
 8002c0a:	4b5c      	ldr	r3, [pc, #368]	; (8002d7c <HAL_GPIO_Init+0x330>)
 8002c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	60bb      	str	r3, [r7, #8]
 8002c14:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c16:	4a5a      	ldr	r2, [pc, #360]	; (8002d80 <HAL_GPIO_Init+0x334>)
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	089b      	lsrs	r3, r3, #2
 8002c1c:	3302      	adds	r3, #2
 8002c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c22:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	220f      	movs	r2, #15
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	43db      	mvns	r3, r3
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	4013      	ands	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c40:	d025      	beq.n	8002c8e <HAL_GPIO_Init+0x242>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a4f      	ldr	r2, [pc, #316]	; (8002d84 <HAL_GPIO_Init+0x338>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d01f      	beq.n	8002c8a <HAL_GPIO_Init+0x23e>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a4e      	ldr	r2, [pc, #312]	; (8002d88 <HAL_GPIO_Init+0x33c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d019      	beq.n	8002c86 <HAL_GPIO_Init+0x23a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a4d      	ldr	r2, [pc, #308]	; (8002d8c <HAL_GPIO_Init+0x340>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d013      	beq.n	8002c82 <HAL_GPIO_Init+0x236>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a4c      	ldr	r2, [pc, #304]	; (8002d90 <HAL_GPIO_Init+0x344>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00d      	beq.n	8002c7e <HAL_GPIO_Init+0x232>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a4b      	ldr	r2, [pc, #300]	; (8002d94 <HAL_GPIO_Init+0x348>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d007      	beq.n	8002c7a <HAL_GPIO_Init+0x22e>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a4a      	ldr	r2, [pc, #296]	; (8002d98 <HAL_GPIO_Init+0x34c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d101      	bne.n	8002c76 <HAL_GPIO_Init+0x22a>
 8002c72:	2306      	movs	r3, #6
 8002c74:	e00c      	b.n	8002c90 <HAL_GPIO_Init+0x244>
 8002c76:	2307      	movs	r3, #7
 8002c78:	e00a      	b.n	8002c90 <HAL_GPIO_Init+0x244>
 8002c7a:	2305      	movs	r3, #5
 8002c7c:	e008      	b.n	8002c90 <HAL_GPIO_Init+0x244>
 8002c7e:	2304      	movs	r3, #4
 8002c80:	e006      	b.n	8002c90 <HAL_GPIO_Init+0x244>
 8002c82:	2303      	movs	r3, #3
 8002c84:	e004      	b.n	8002c90 <HAL_GPIO_Init+0x244>
 8002c86:	2302      	movs	r3, #2
 8002c88:	e002      	b.n	8002c90 <HAL_GPIO_Init+0x244>
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e000      	b.n	8002c90 <HAL_GPIO_Init+0x244>
 8002c8e:	2300      	movs	r3, #0
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	f002 0203 	and.w	r2, r2, #3
 8002c96:	0092      	lsls	r2, r2, #2
 8002c98:	4093      	lsls	r3, r2
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ca0:	4937      	ldr	r1, [pc, #220]	; (8002d80 <HAL_GPIO_Init+0x334>)
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	089b      	lsrs	r3, r3, #2
 8002ca6:	3302      	adds	r3, #2
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cae:	4b3b      	ldr	r3, [pc, #236]	; (8002d9c <HAL_GPIO_Init+0x350>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002cd2:	4a32      	ldr	r2, [pc, #200]	; (8002d9c <HAL_GPIO_Init+0x350>)
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002cd8:	4b30      	ldr	r3, [pc, #192]	; (8002d9c <HAL_GPIO_Init+0x350>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002cfc:	4a27      	ldr	r2, [pc, #156]	; (8002d9c <HAL_GPIO_Init+0x350>)
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d02:	4b26      	ldr	r3, [pc, #152]	; (8002d9c <HAL_GPIO_Init+0x350>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d26:	4a1d      	ldr	r2, [pc, #116]	; (8002d9c <HAL_GPIO_Init+0x350>)
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d2c:	4b1b      	ldr	r3, [pc, #108]	; (8002d9c <HAL_GPIO_Init+0x350>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	43db      	mvns	r3, r3
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d50:	4a12      	ldr	r2, [pc, #72]	; (8002d9c <HAL_GPIO_Init+0x350>)
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	fa22 f303 	lsr.w	r3, r2, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f47f ae78 	bne.w	8002a5c <HAL_GPIO_Init+0x10>
  }
}
 8002d6c:	bf00      	nop
 8002d6e:	bf00      	nop
 8002d70:	371c      	adds	r7, #28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	40010000 	.word	0x40010000
 8002d84:	48000400 	.word	0x48000400
 8002d88:	48000800 	.word	0x48000800
 8002d8c:	48000c00 	.word	0x48000c00
 8002d90:	48001000 	.word	0x48001000
 8002d94:	48001400 	.word	0x48001400
 8002d98:	48001800 	.word	0x48001800
 8002d9c:	40010400 	.word	0x40010400

08002da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	807b      	strh	r3, [r7, #2]
 8002dac:	4613      	mov	r3, r2
 8002dae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002db0:	787b      	ldrb	r3, [r7, #1]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002db6:	887a      	ldrh	r2, [r7, #2]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002dbc:	e002      	b.n	8002dc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dbe:	887a      	ldrh	r2, [r7, #2]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002de2:	887a      	ldrh	r2, [r7, #2]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4013      	ands	r3, r2
 8002de8:	041a      	lsls	r2, r3, #16
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	43d9      	mvns	r1, r3
 8002dee:	887b      	ldrh	r3, [r7, #2]
 8002df0:	400b      	ands	r3, r1
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	619a      	str	r2, [r3, #24]
}
 8002df8:	bf00      	nop
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e0e:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e10:	695a      	ldr	r2, [r3, #20]
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	4013      	ands	r3, r2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d006      	beq.n	8002e28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e1a:	4a05      	ldr	r2, [pc, #20]	; (8002e30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e1c:	88fb      	ldrh	r3, [r7, #6]
 8002e1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e20:	88fb      	ldrh	r3, [r7, #6]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff f878 	bl	8001f18 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e28:	bf00      	nop
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40010400 	.word	0x40010400

08002e34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e081      	b.n	8002f4a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d106      	bne.n	8002e60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7ff f94a 	bl	80020f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2224      	movs	r2, #36	; 0x24
 8002e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 0201 	bic.w	r2, r2, #1
 8002e76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e84:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e94:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d107      	bne.n	8002eae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689a      	ldr	r2, [r3, #8]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eaa:	609a      	str	r2, [r3, #8]
 8002eac:	e006      	b.n	8002ebc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002eba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d104      	bne.n	8002ece <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ecc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6812      	ldr	r2, [r2, #0]
 8002ed8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002edc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ee0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ef0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691a      	ldr	r2, [r3, #16]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	69d9      	ldr	r1, [r3, #28]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1a      	ldr	r2, [r3, #32]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0201 	orr.w	r2, r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2220      	movs	r2, #32
 8002f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b088      	sub	sp, #32
 8002f58:	af02      	add	r7, sp, #8
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	4608      	mov	r0, r1
 8002f5e:	4611      	mov	r1, r2
 8002f60:	461a      	mov	r2, r3
 8002f62:	4603      	mov	r3, r0
 8002f64:	817b      	strh	r3, [r7, #10]
 8002f66:	460b      	mov	r3, r1
 8002f68:	813b      	strh	r3, [r7, #8]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b20      	cmp	r3, #32
 8002f78:	f040 80f9 	bne.w	800316e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <HAL_I2C_Mem_Write+0x34>
 8002f82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d105      	bne.n	8002f94 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f8e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0ed      	b.n	8003170 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d101      	bne.n	8002fa2 <HAL_I2C_Mem_Write+0x4e>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e0e6      	b.n	8003170 <HAL_I2C_Mem_Write+0x21c>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002faa:	f7ff fbbd 	bl	8002728 <HAL_GetTick>
 8002fae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	2319      	movs	r3, #25
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 fac3 	bl	8003548 <I2C_WaitOnFlagUntilTimeout>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e0d1      	b.n	8003170 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2221      	movs	r2, #33	; 0x21
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2240      	movs	r2, #64	; 0x40
 8002fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6a3a      	ldr	r2, [r7, #32]
 8002fe6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002fec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ff4:	88f8      	ldrh	r0, [r7, #6]
 8002ff6:	893a      	ldrh	r2, [r7, #8]
 8002ff8:	8979      	ldrh	r1, [r7, #10]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	9301      	str	r3, [sp, #4]
 8002ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	4603      	mov	r3, r0
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 f9d3 	bl	80033b0 <I2C_RequestMemoryWrite>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d005      	beq.n	800301c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e0a9      	b.n	8003170 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003020:	b29b      	uxth	r3, r3
 8003022:	2bff      	cmp	r3, #255	; 0xff
 8003024:	d90e      	bls.n	8003044 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	22ff      	movs	r2, #255	; 0xff
 800302a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003030:	b2da      	uxtb	r2, r3
 8003032:	8979      	ldrh	r1, [r7, #10]
 8003034:	2300      	movs	r3, #0
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 fc2b 	bl	8003898 <I2C_TransferConfig>
 8003042:	e00f      	b.n	8003064 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003048:	b29a      	uxth	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003052:	b2da      	uxtb	r2, r3
 8003054:	8979      	ldrh	r1, [r7, #10]
 8003056:	2300      	movs	r3, #0
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 fc1a 	bl	8003898 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 faad 	bl	80035c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e07b      	b.n	8003170 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	781a      	ldrb	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003092:	b29b      	uxth	r3, r3
 8003094:	3b01      	subs	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d034      	beq.n	800311c <HAL_I2C_Mem_Write+0x1c8>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d130      	bne.n	800311c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c0:	2200      	movs	r2, #0
 80030c2:	2180      	movs	r1, #128	; 0x80
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 fa3f 	bl	8003548 <I2C_WaitOnFlagUntilTimeout>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e04d      	b.n	8003170 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d8:	b29b      	uxth	r3, r3
 80030da:	2bff      	cmp	r3, #255	; 0xff
 80030dc:	d90e      	bls.n	80030fc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	22ff      	movs	r2, #255	; 0xff
 80030e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	8979      	ldrh	r1, [r7, #10]
 80030ec:	2300      	movs	r3, #0
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 fbcf 	bl	8003898 <I2C_TransferConfig>
 80030fa:	e00f      	b.n	800311c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310a:	b2da      	uxtb	r2, r3
 800310c:	8979      	ldrh	r1, [r7, #10]
 800310e:	2300      	movs	r3, #0
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 fbbe 	bl	8003898 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003120:	b29b      	uxth	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d19e      	bne.n	8003064 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 fa8c 	bl	8003648 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e01a      	b.n	8003170 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2220      	movs	r2, #32
 8003140:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6859      	ldr	r1, [r3, #4]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <HAL_I2C_Mem_Write+0x224>)
 800314e:	400b      	ands	r3, r1
 8003150:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2220      	movs	r2, #32
 8003156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	e000      	b.n	8003170 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800316e:	2302      	movs	r3, #2
  }
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	fe00e800 	.word	0xfe00e800

0800317c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b088      	sub	sp, #32
 8003180:	af02      	add	r7, sp, #8
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	4608      	mov	r0, r1
 8003186:	4611      	mov	r1, r2
 8003188:	461a      	mov	r2, r3
 800318a:	4603      	mov	r3, r0
 800318c:	817b      	strh	r3, [r7, #10]
 800318e:	460b      	mov	r3, r1
 8003190:	813b      	strh	r3, [r7, #8]
 8003192:	4613      	mov	r3, r2
 8003194:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b20      	cmp	r3, #32
 80031a0:	f040 80fd 	bne.w	800339e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80031a4:	6a3b      	ldr	r3, [r7, #32]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <HAL_I2C_Mem_Read+0x34>
 80031aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d105      	bne.n	80031bc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e0f1      	b.n	80033a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d101      	bne.n	80031ca <HAL_I2C_Mem_Read+0x4e>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e0ea      	b.n	80033a0 <HAL_I2C_Mem_Read+0x224>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031d2:	f7ff faa9 	bl	8002728 <HAL_GetTick>
 80031d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	2319      	movs	r3, #25
 80031de:	2201      	movs	r2, #1
 80031e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f000 f9af 	bl	8003548 <I2C_WaitOnFlagUntilTimeout>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0d5      	b.n	80033a0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2222      	movs	r2, #34	; 0x22
 80031f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2240      	movs	r2, #64	; 0x40
 8003200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6a3a      	ldr	r2, [r7, #32]
 800320e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003214:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800321c:	88f8      	ldrh	r0, [r7, #6]
 800321e:	893a      	ldrh	r2, [r7, #8]
 8003220:	8979      	ldrh	r1, [r7, #10]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	9301      	str	r3, [sp, #4]
 8003226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	4603      	mov	r3, r0
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 f913 	bl	8003458 <I2C_RequestMemoryRead>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e0ad      	b.n	80033a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003248:	b29b      	uxth	r3, r3
 800324a:	2bff      	cmp	r3, #255	; 0xff
 800324c:	d90e      	bls.n	800326c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	22ff      	movs	r2, #255	; 0xff
 8003252:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003258:	b2da      	uxtb	r2, r3
 800325a:	8979      	ldrh	r1, [r7, #10]
 800325c:	4b52      	ldr	r3, [pc, #328]	; (80033a8 <HAL_I2C_Mem_Read+0x22c>)
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 fb17 	bl	8003898 <I2C_TransferConfig>
 800326a:	e00f      	b.n	800328c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003270:	b29a      	uxth	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327a:	b2da      	uxtb	r2, r3
 800327c:	8979      	ldrh	r1, [r7, #10]
 800327e:	4b4a      	ldr	r3, [pc, #296]	; (80033a8 <HAL_I2C_Mem_Read+0x22c>)
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 fb06 	bl	8003898 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003292:	2200      	movs	r2, #0
 8003294:	2104      	movs	r1, #4
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 f956 	bl	8003548 <I2C_WaitOnFlagUntilTimeout>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e07c      	b.n	80033a0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	b2d2      	uxtb	r2, r2
 80032b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	1c5a      	adds	r2, r3, #1
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032dc:	b29b      	uxth	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d034      	beq.n	800334c <HAL_I2C_Mem_Read+0x1d0>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d130      	bne.n	800334c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f0:	2200      	movs	r2, #0
 80032f2:	2180      	movs	r1, #128	; 0x80
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 f927 	bl	8003548 <I2C_WaitOnFlagUntilTimeout>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e04d      	b.n	80033a0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003308:	b29b      	uxth	r3, r3
 800330a:	2bff      	cmp	r3, #255	; 0xff
 800330c:	d90e      	bls.n	800332c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	22ff      	movs	r2, #255	; 0xff
 8003312:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003318:	b2da      	uxtb	r2, r3
 800331a:	8979      	ldrh	r1, [r7, #10]
 800331c:	2300      	movs	r3, #0
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 fab7 	bl	8003898 <I2C_TransferConfig>
 800332a:	e00f      	b.n	800334c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003330:	b29a      	uxth	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333a:	b2da      	uxtb	r2, r3
 800333c:	8979      	ldrh	r1, [r7, #10]
 800333e:	2300      	movs	r3, #0
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 faa6 	bl	8003898 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003350:	b29b      	uxth	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d19a      	bne.n	800328c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 f974 	bl	8003648 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e01a      	b.n	80033a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2220      	movs	r2, #32
 8003370:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6859      	ldr	r1, [r3, #4]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <HAL_I2C_Mem_Read+0x230>)
 800337e:	400b      	ands	r3, r1
 8003380:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2220      	movs	r2, #32
 8003386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800339a:	2300      	movs	r3, #0
 800339c:	e000      	b.n	80033a0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800339e:	2302      	movs	r3, #2
  }
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	80002400 	.word	0x80002400
 80033ac:	fe00e800 	.word	0xfe00e800

080033b0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af02      	add	r7, sp, #8
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	4608      	mov	r0, r1
 80033ba:	4611      	mov	r1, r2
 80033bc:	461a      	mov	r2, r3
 80033be:	4603      	mov	r3, r0
 80033c0:	817b      	strh	r3, [r7, #10]
 80033c2:	460b      	mov	r3, r1
 80033c4:	813b      	strh	r3, [r7, #8]
 80033c6:	4613      	mov	r3, r2
 80033c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80033ca:	88fb      	ldrh	r3, [r7, #6]
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	8979      	ldrh	r1, [r7, #10]
 80033d0:	4b20      	ldr	r3, [pc, #128]	; (8003454 <I2C_RequestMemoryWrite+0xa4>)
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 fa5d 	bl	8003898 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033de:	69fa      	ldr	r2, [r7, #28]
 80033e0:	69b9      	ldr	r1, [r7, #24]
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f000 f8f0 	bl	80035c8 <I2C_WaitOnTXISFlagUntilTimeout>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e02c      	b.n	800344c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033f2:	88fb      	ldrh	r3, [r7, #6]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d105      	bne.n	8003404 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033f8:	893b      	ldrh	r3, [r7, #8]
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	629a      	str	r2, [r3, #40]	; 0x28
 8003402:	e015      	b.n	8003430 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003404:	893b      	ldrh	r3, [r7, #8]
 8003406:	0a1b      	lsrs	r3, r3, #8
 8003408:	b29b      	uxth	r3, r3
 800340a:	b2da      	uxtb	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003412:	69fa      	ldr	r2, [r7, #28]
 8003414:	69b9      	ldr	r1, [r7, #24]
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 f8d6 	bl	80035c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e012      	b.n	800344c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003426:	893b      	ldrh	r3, [r7, #8]
 8003428:	b2da      	uxtb	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	2200      	movs	r2, #0
 8003438:	2180      	movs	r1, #128	; 0x80
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 f884 	bl	8003548 <I2C_WaitOnFlagUntilTimeout>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	80002000 	.word	0x80002000

08003458 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af02      	add	r7, sp, #8
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	4608      	mov	r0, r1
 8003462:	4611      	mov	r1, r2
 8003464:	461a      	mov	r2, r3
 8003466:	4603      	mov	r3, r0
 8003468:	817b      	strh	r3, [r7, #10]
 800346a:	460b      	mov	r3, r1
 800346c:	813b      	strh	r3, [r7, #8]
 800346e:	4613      	mov	r3, r2
 8003470:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003472:	88fb      	ldrh	r3, [r7, #6]
 8003474:	b2da      	uxtb	r2, r3
 8003476:	8979      	ldrh	r1, [r7, #10]
 8003478:	4b20      	ldr	r3, [pc, #128]	; (80034fc <I2C_RequestMemoryRead+0xa4>)
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	2300      	movs	r3, #0
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 fa0a 	bl	8003898 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003484:	69fa      	ldr	r2, [r7, #28]
 8003486:	69b9      	ldr	r1, [r7, #24]
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f000 f89d 	bl	80035c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e02c      	b.n	80034f2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003498:	88fb      	ldrh	r3, [r7, #6]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d105      	bne.n	80034aa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800349e:	893b      	ldrh	r3, [r7, #8]
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	629a      	str	r2, [r3, #40]	; 0x28
 80034a8:	e015      	b.n	80034d6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80034aa:	893b      	ldrh	r3, [r7, #8]
 80034ac:	0a1b      	lsrs	r3, r3, #8
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034b8:	69fa      	ldr	r2, [r7, #28]
 80034ba:	69b9      	ldr	r1, [r7, #24]
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f000 f883 	bl	80035c8 <I2C_WaitOnTXISFlagUntilTimeout>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e012      	b.n	80034f2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034cc:	893b      	ldrh	r3, [r7, #8]
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	2200      	movs	r2, #0
 80034de:	2140      	movs	r1, #64	; 0x40
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 f831 	bl	8003548 <I2C_WaitOnFlagUntilTimeout>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e000      	b.n	80034f2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	80002000 	.word	0x80002000

08003500 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b02      	cmp	r3, #2
 8003514:	d103      	bne.n	800351e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2200      	movs	r2, #0
 800351c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b01      	cmp	r3, #1
 800352a:	d007      	beq.n	800353c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699a      	ldr	r2, [r3, #24]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0201 	orr.w	r2, r2, #1
 800353a:	619a      	str	r2, [r3, #24]
  }
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	603b      	str	r3, [r7, #0]
 8003554:	4613      	mov	r3, r2
 8003556:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003558:	e022      	b.n	80035a0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003560:	d01e      	beq.n	80035a0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003562:	f7ff f8e1 	bl	8002728 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	429a      	cmp	r2, r3
 8003570:	d302      	bcc.n	8003578 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d113      	bne.n	80035a0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357c:	f043 0220 	orr.w	r2, r3, #32
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2220      	movs	r2, #32
 8003588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e00f      	b.n	80035c0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	699a      	ldr	r2, [r3, #24]
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	4013      	ands	r3, r2
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	bf0c      	ite	eq
 80035b0:	2301      	moveq	r3, #1
 80035b2:	2300      	movne	r3, #0
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	461a      	mov	r2, r3
 80035b8:	79fb      	ldrb	r3, [r7, #7]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d0cd      	beq.n	800355a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035d4:	e02c      	b.n	8003630 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	68b9      	ldr	r1, [r7, #8]
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 f870 	bl	80036c0 <I2C_IsErrorOccurred>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e02a      	b.n	8003640 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f0:	d01e      	beq.n	8003630 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f2:	f7ff f899 	bl	8002728 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d302      	bcc.n	8003608 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d113      	bne.n	8003630 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360c:	f043 0220 	orr.w	r2, r3, #32
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e007      	b.n	8003640 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b02      	cmp	r3, #2
 800363c:	d1cb      	bne.n	80035d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003654:	e028      	b.n	80036a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	68b9      	ldr	r1, [r7, #8]
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 f830 	bl	80036c0 <I2C_IsErrorOccurred>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e026      	b.n	80036b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800366a:	f7ff f85d 	bl	8002728 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	429a      	cmp	r2, r3
 8003678:	d302      	bcc.n	8003680 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d113      	bne.n	80036a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003684:	f043 0220 	orr.w	r2, r3, #32
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e007      	b.n	80036b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	f003 0320 	and.w	r3, r3, #32
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	d1cf      	bne.n	8003656 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08a      	sub	sp, #40	; 0x28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80036da:	2300      	movs	r3, #0
 80036dc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d075      	beq.n	80037d8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2210      	movs	r2, #16
 80036f2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036f4:	e056      	b.n	80037a4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fc:	d052      	beq.n	80037a4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036fe:	f7ff f813 	bl	8002728 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	429a      	cmp	r2, r3
 800370c:	d302      	bcc.n	8003714 <I2C_IsErrorOccurred+0x54>
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d147      	bne.n	80037a4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800371e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003726:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003736:	d12e      	bne.n	8003796 <I2C_IsErrorOccurred+0xd6>
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800373e:	d02a      	beq.n	8003796 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003740:	7cfb      	ldrb	r3, [r7, #19]
 8003742:	2b20      	cmp	r3, #32
 8003744:	d027      	beq.n	8003796 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003754:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003756:	f7fe ffe7 	bl	8002728 <HAL_GetTick>
 800375a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800375c:	e01b      	b.n	8003796 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800375e:	f7fe ffe3 	bl	8002728 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b19      	cmp	r3, #25
 800376a:	d914      	bls.n	8003796 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003770:	f043 0220 	orr.w	r2, r3, #32
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	f003 0320 	and.w	r3, r3, #32
 80037a0:	2b20      	cmp	r3, #32
 80037a2:	d1dc      	bne.n	800375e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	f003 0320 	and.w	r3, r3, #32
 80037ae:	2b20      	cmp	r3, #32
 80037b0:	d003      	beq.n	80037ba <I2C_IsErrorOccurred+0xfa>
 80037b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d09d      	beq.n	80036f6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80037ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d103      	bne.n	80037ca <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2220      	movs	r2, #32
 80037c8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	f043 0304 	orr.w	r3, r3, #4
 80037d0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00b      	beq.n	8003802 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	f043 0301 	orr.w	r3, r3, #1
 80037f0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00b      	beq.n	8003824 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	f043 0308 	orr.w	r3, r3, #8
 8003812:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800381c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00b      	beq.n	8003846 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	f043 0302 	orr.w	r3, r3, #2
 8003834:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800383e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003846:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800384a:	2b00      	cmp	r3, #0
 800384c:	d01c      	beq.n	8003888 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f7ff fe56 	bl	8003500 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6859      	ldr	r1, [r3, #4]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	4b0d      	ldr	r3, [pc, #52]	; (8003894 <I2C_IsErrorOccurred+0x1d4>)
 8003860:	400b      	ands	r3, r1
 8003862:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	431a      	orrs	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2220      	movs	r2, #32
 8003874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800388c:	4618      	mov	r0, r3
 800388e:	3728      	adds	r7, #40	; 0x28
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	fe00e800 	.word	0xfe00e800

08003898 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	607b      	str	r3, [r7, #4]
 80038a2:	460b      	mov	r3, r1
 80038a4:	817b      	strh	r3, [r7, #10]
 80038a6:	4613      	mov	r3, r2
 80038a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038aa:	897b      	ldrh	r3, [r7, #10]
 80038ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038b0:	7a7b      	ldrb	r3, [r7, #9]
 80038b2:	041b      	lsls	r3, r3, #16
 80038b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038b8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038c6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	0d5b      	lsrs	r3, r3, #21
 80038d2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80038d6:	4b08      	ldr	r3, [pc, #32]	; (80038f8 <I2C_TransferConfig+0x60>)
 80038d8:	430b      	orrs	r3, r1
 80038da:	43db      	mvns	r3, r3
 80038dc:	ea02 0103 	and.w	r1, r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038ea:	bf00      	nop
 80038ec:	371c      	adds	r7, #28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	03ff63ff 	.word	0x03ff63ff

080038fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b20      	cmp	r3, #32
 8003910:	d138      	bne.n	8003984 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800391c:	2302      	movs	r3, #2
 800391e:	e032      	b.n	8003986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2224      	movs	r2, #36	; 0x24
 800392c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0201 	bic.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800394e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6819      	ldr	r1, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0201 	orr.w	r2, r2, #1
 800396e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2220      	movs	r2, #32
 8003974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003980:	2300      	movs	r3, #0
 8003982:	e000      	b.n	8003986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003984:	2302      	movs	r3, #2
  }
}
 8003986:	4618      	mov	r0, r3
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003992:	b480      	push	{r7}
 8003994:	b085      	sub	sp, #20
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
 800399a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b20      	cmp	r3, #32
 80039a6:	d139      	bne.n	8003a1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d101      	bne.n	80039b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039b2:	2302      	movs	r3, #2
 80039b4:	e033      	b.n	8003a1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2224      	movs	r2, #36	; 0x24
 80039c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0201 	bic.w	r2, r2, #1
 80039d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	021b      	lsls	r3, r3, #8
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	e000      	b.n	8003a1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a1c:	2302      	movs	r3, #2
  }
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
	...

08003a2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a30:	4b04      	ldr	r3, [pc, #16]	; (8003a44 <HAL_PWREx_GetVoltageRange+0x18>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	40007000 	.word	0x40007000

08003a48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a56:	d130      	bne.n	8003aba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a58:	4b23      	ldr	r3, [pc, #140]	; (8003ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a64:	d038      	beq.n	8003ad8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a66:	4b20      	ldr	r3, [pc, #128]	; (8003ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a6e:	4a1e      	ldr	r2, [pc, #120]	; (8003ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a74:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a76:	4b1d      	ldr	r3, [pc, #116]	; (8003aec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2232      	movs	r2, #50	; 0x32
 8003a7c:	fb02 f303 	mul.w	r3, r2, r3
 8003a80:	4a1b      	ldr	r2, [pc, #108]	; (8003af0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a82:	fba2 2303 	umull	r2, r3, r2, r3
 8003a86:	0c9b      	lsrs	r3, r3, #18
 8003a88:	3301      	adds	r3, #1
 8003a8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a8c:	e002      	b.n	8003a94 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	3b01      	subs	r3, #1
 8003a92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a94:	4b14      	ldr	r3, [pc, #80]	; (8003ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aa0:	d102      	bne.n	8003aa8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1f2      	bne.n	8003a8e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003aa8:	4b0f      	ldr	r3, [pc, #60]	; (8003ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ab4:	d110      	bne.n	8003ad8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e00f      	b.n	8003ada <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003aba:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ac6:	d007      	beq.n	8003ad8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ac8:	4b07      	ldr	r3, [pc, #28]	; (8003ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ad0:	4a05      	ldr	r2, [pc, #20]	; (8003ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ad2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ad6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3714      	adds	r7, #20
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	40007000 	.word	0x40007000
 8003aec:	20000000 	.word	0x20000000
 8003af0:	431bde83 	.word	0x431bde83

08003af4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b088      	sub	sp, #32
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e3ca      	b.n	800429c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b06:	4b97      	ldr	r3, [pc, #604]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 030c 	and.w	r3, r3, #12
 8003b0e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b10:	4b94      	ldr	r3, [pc, #592]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	f003 0303 	and.w	r3, r3, #3
 8003b18:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0310 	and.w	r3, r3, #16
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 80e4 	beq.w	8003cf0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d007      	beq.n	8003b3e <HAL_RCC_OscConfig+0x4a>
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	2b0c      	cmp	r3, #12
 8003b32:	f040 808b 	bne.w	8003c4c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	f040 8087 	bne.w	8003c4c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b3e:	4b89      	ldr	r3, [pc, #548]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d005      	beq.n	8003b56 <HAL_RCC_OscConfig+0x62>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e3a2      	b.n	800429c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1a      	ldr	r2, [r3, #32]
 8003b5a:	4b82      	ldr	r3, [pc, #520]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d004      	beq.n	8003b70 <HAL_RCC_OscConfig+0x7c>
 8003b66:	4b7f      	ldr	r3, [pc, #508]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b6e:	e005      	b.n	8003b7c <HAL_RCC_OscConfig+0x88>
 8003b70:	4b7c      	ldr	r3, [pc, #496]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b76:	091b      	lsrs	r3, r3, #4
 8003b78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d223      	bcs.n	8003bc8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 fd87 	bl	8004698 <RCC_SetFlashLatencyFromMSIRange>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e383      	b.n	800429c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b94:	4b73      	ldr	r3, [pc, #460]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a72      	ldr	r2, [pc, #456]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003b9a:	f043 0308 	orr.w	r3, r3, #8
 8003b9e:	6013      	str	r3, [r2, #0]
 8003ba0:	4b70      	ldr	r3, [pc, #448]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	496d      	ldr	r1, [pc, #436]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bb2:	4b6c      	ldr	r3, [pc, #432]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	021b      	lsls	r3, r3, #8
 8003bc0:	4968      	ldr	r1, [pc, #416]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	604b      	str	r3, [r1, #4]
 8003bc6:	e025      	b.n	8003c14 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bc8:	4b66      	ldr	r3, [pc, #408]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a65      	ldr	r2, [pc, #404]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003bce:	f043 0308 	orr.w	r3, r3, #8
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	4b63      	ldr	r3, [pc, #396]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	4960      	ldr	r1, [pc, #384]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003be6:	4b5f      	ldr	r3, [pc, #380]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	021b      	lsls	r3, r3, #8
 8003bf4:	495b      	ldr	r1, [pc, #364]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d109      	bne.n	8003c14 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 fd47 	bl	8004698 <RCC_SetFlashLatencyFromMSIRange>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e343      	b.n	800429c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c14:	f000 fc4a 	bl	80044ac <HAL_RCC_GetSysClockFreq>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	4b52      	ldr	r3, [pc, #328]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	091b      	lsrs	r3, r3, #4
 8003c20:	f003 030f 	and.w	r3, r3, #15
 8003c24:	4950      	ldr	r1, [pc, #320]	; (8003d68 <HAL_RCC_OscConfig+0x274>)
 8003c26:	5ccb      	ldrb	r3, [r1, r3]
 8003c28:	f003 031f 	and.w	r3, r3, #31
 8003c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c30:	4a4e      	ldr	r2, [pc, #312]	; (8003d6c <HAL_RCC_OscConfig+0x278>)
 8003c32:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c34:	4b4e      	ldr	r3, [pc, #312]	; (8003d70 <HAL_RCC_OscConfig+0x27c>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fe fbb3 	bl	80023a4 <HAL_InitTick>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003c42:	7bfb      	ldrb	r3, [r7, #15]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d052      	beq.n	8003cee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003c48:	7bfb      	ldrb	r3, [r7, #15]
 8003c4a:	e327      	b.n	800429c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d032      	beq.n	8003cba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c54:	4b43      	ldr	r3, [pc, #268]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a42      	ldr	r2, [pc, #264]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003c5a:	f043 0301 	orr.w	r3, r3, #1
 8003c5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c60:	f7fe fd62 	bl	8002728 <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c68:	f7fe fd5e 	bl	8002728 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e310      	b.n	800429c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c7a:	4b3a      	ldr	r3, [pc, #232]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0f0      	beq.n	8003c68 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c86:	4b37      	ldr	r3, [pc, #220]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a36      	ldr	r2, [pc, #216]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003c8c:	f043 0308 	orr.w	r3, r3, #8
 8003c90:	6013      	str	r3, [r2, #0]
 8003c92:	4b34      	ldr	r3, [pc, #208]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	4931      	ldr	r1, [pc, #196]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ca4:	4b2f      	ldr	r3, [pc, #188]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	021b      	lsls	r3, r3, #8
 8003cb2:	492c      	ldr	r1, [pc, #176]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	604b      	str	r3, [r1, #4]
 8003cb8:	e01a      	b.n	8003cf0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003cba:	4b2a      	ldr	r3, [pc, #168]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a29      	ldr	r2, [pc, #164]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003cc0:	f023 0301 	bic.w	r3, r3, #1
 8003cc4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cc6:	f7fe fd2f 	bl	8002728 <HAL_GetTick>
 8003cca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ccc:	e008      	b.n	8003ce0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cce:	f7fe fd2b 	bl	8002728 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e2dd      	b.n	800429c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ce0:	4b20      	ldr	r3, [pc, #128]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1f0      	bne.n	8003cce <HAL_RCC_OscConfig+0x1da>
 8003cec:	e000      	b.n	8003cf0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d074      	beq.n	8003de6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	2b08      	cmp	r3, #8
 8003d00:	d005      	beq.n	8003d0e <HAL_RCC_OscConfig+0x21a>
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	2b0c      	cmp	r3, #12
 8003d06:	d10e      	bne.n	8003d26 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	2b03      	cmp	r3, #3
 8003d0c:	d10b      	bne.n	8003d26 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d0e:	4b15      	ldr	r3, [pc, #84]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d064      	beq.n	8003de4 <HAL_RCC_OscConfig+0x2f0>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d160      	bne.n	8003de4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e2ba      	b.n	800429c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d2e:	d106      	bne.n	8003d3e <HAL_RCC_OscConfig+0x24a>
 8003d30:	4b0c      	ldr	r3, [pc, #48]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a0b      	ldr	r2, [pc, #44]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d3a:	6013      	str	r3, [r2, #0]
 8003d3c:	e026      	b.n	8003d8c <HAL_RCC_OscConfig+0x298>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d46:	d115      	bne.n	8003d74 <HAL_RCC_OscConfig+0x280>
 8003d48:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a05      	ldr	r2, [pc, #20]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003d4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d52:	6013      	str	r3, [r2, #0]
 8003d54:	4b03      	ldr	r3, [pc, #12]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a02      	ldr	r2, [pc, #8]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d5e:	6013      	str	r3, [r2, #0]
 8003d60:	e014      	b.n	8003d8c <HAL_RCC_OscConfig+0x298>
 8003d62:	bf00      	nop
 8003d64:	40021000 	.word	0x40021000
 8003d68:	0800d000 	.word	0x0800d000
 8003d6c:	20000000 	.word	0x20000000
 8003d70:	20000004 	.word	0x20000004
 8003d74:	4ba0      	ldr	r3, [pc, #640]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a9f      	ldr	r2, [pc, #636]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d7e:	6013      	str	r3, [r2, #0]
 8003d80:	4b9d      	ldr	r3, [pc, #628]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a9c      	ldr	r2, [pc, #624]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d013      	beq.n	8003dbc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d94:	f7fe fcc8 	bl	8002728 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d9c:	f7fe fcc4 	bl	8002728 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b64      	cmp	r3, #100	; 0x64
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e276      	b.n	800429c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dae:	4b92      	ldr	r3, [pc, #584]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0f0      	beq.n	8003d9c <HAL_RCC_OscConfig+0x2a8>
 8003dba:	e014      	b.n	8003de6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbc:	f7fe fcb4 	bl	8002728 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dc4:	f7fe fcb0 	bl	8002728 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b64      	cmp	r3, #100	; 0x64
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e262      	b.n	800429c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dd6:	4b88      	ldr	r3, [pc, #544]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1f0      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x2d0>
 8003de2:	e000      	b.n	8003de6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d060      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	2b04      	cmp	r3, #4
 8003df6:	d005      	beq.n	8003e04 <HAL_RCC_OscConfig+0x310>
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	2b0c      	cmp	r3, #12
 8003dfc:	d119      	bne.n	8003e32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d116      	bne.n	8003e32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e04:	4b7c      	ldr	r3, [pc, #496]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d005      	beq.n	8003e1c <HAL_RCC_OscConfig+0x328>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e23f      	b.n	800429c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e1c:	4b76      	ldr	r3, [pc, #472]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	061b      	lsls	r3, r3, #24
 8003e2a:	4973      	ldr	r1, [pc, #460]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e30:	e040      	b.n	8003eb4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d023      	beq.n	8003e82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e3a:	4b6f      	ldr	r3, [pc, #444]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a6e      	ldr	r2, [pc, #440]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e46:	f7fe fc6f 	bl	8002728 <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e4c:	e008      	b.n	8003e60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e4e:	f7fe fc6b 	bl	8002728 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e21d      	b.n	800429c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e60:	4b65      	ldr	r3, [pc, #404]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0f0      	beq.n	8003e4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e6c:	4b62      	ldr	r3, [pc, #392]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	061b      	lsls	r3, r3, #24
 8003e7a:	495f      	ldr	r1, [pc, #380]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	604b      	str	r3, [r1, #4]
 8003e80:	e018      	b.n	8003eb4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e82:	4b5d      	ldr	r3, [pc, #372]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a5c      	ldr	r2, [pc, #368]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003e88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8e:	f7fe fc4b 	bl	8002728 <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e96:	f7fe fc47 	bl	8002728 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e1f9      	b.n	800429c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ea8:	4b53      	ldr	r3, [pc, #332]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1f0      	bne.n	8003e96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0308 	and.w	r3, r3, #8
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d03c      	beq.n	8003f3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d01c      	beq.n	8003f02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ec8:	4b4b      	ldr	r3, [pc, #300]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ece:	4a4a      	ldr	r2, [pc, #296]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003ed0:	f043 0301 	orr.w	r3, r3, #1
 8003ed4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed8:	f7fe fc26 	bl	8002728 <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ee0:	f7fe fc22 	bl	8002728 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e1d4      	b.n	800429c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ef2:	4b41      	ldr	r3, [pc, #260]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0ef      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x3ec>
 8003f00:	e01b      	b.n	8003f3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f02:	4b3d      	ldr	r3, [pc, #244]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f08:	4a3b      	ldr	r2, [pc, #236]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003f0a:	f023 0301 	bic.w	r3, r3, #1
 8003f0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f12:	f7fe fc09 	bl	8002728 <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f1a:	f7fe fc05 	bl	8002728 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e1b7      	b.n	800429c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f2c:	4b32      	ldr	r3, [pc, #200]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1ef      	bne.n	8003f1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 80a6 	beq.w	8004094 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003f4c:	4b2a      	ldr	r3, [pc, #168]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10d      	bne.n	8003f74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f58:	4b27      	ldr	r3, [pc, #156]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5c:	4a26      	ldr	r2, [pc, #152]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f62:	6593      	str	r3, [r2, #88]	; 0x58
 8003f64:	4b24      	ldr	r3, [pc, #144]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6c:	60bb      	str	r3, [r7, #8]
 8003f6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f70:	2301      	movs	r3, #1
 8003f72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f74:	4b21      	ldr	r3, [pc, #132]	; (8003ffc <HAL_RCC_OscConfig+0x508>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d118      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f80:	4b1e      	ldr	r3, [pc, #120]	; (8003ffc <HAL_RCC_OscConfig+0x508>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a1d      	ldr	r2, [pc, #116]	; (8003ffc <HAL_RCC_OscConfig+0x508>)
 8003f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f8c:	f7fe fbcc 	bl	8002728 <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f94:	f7fe fbc8 	bl	8002728 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e17a      	b.n	800429c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fa6:	4b15      	ldr	r3, [pc, #84]	; (8003ffc <HAL_RCC_OscConfig+0x508>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0f0      	beq.n	8003f94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d108      	bne.n	8003fcc <HAL_RCC_OscConfig+0x4d8>
 8003fba:	4b0f      	ldr	r3, [pc, #60]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc0:	4a0d      	ldr	r2, [pc, #52]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003fc2:	f043 0301 	orr.w	r3, r3, #1
 8003fc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fca:	e029      	b.n	8004020 <HAL_RCC_OscConfig+0x52c>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	2b05      	cmp	r3, #5
 8003fd2:	d115      	bne.n	8004000 <HAL_RCC_OscConfig+0x50c>
 8003fd4:	4b08      	ldr	r3, [pc, #32]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fda:	4a07      	ldr	r2, [pc, #28]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003fdc:	f043 0304 	orr.w	r3, r3, #4
 8003fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fe4:	4b04      	ldr	r3, [pc, #16]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fea:	4a03      	ldr	r2, [pc, #12]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ff4:	e014      	b.n	8004020 <HAL_RCC_OscConfig+0x52c>
 8003ff6:	bf00      	nop
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	40007000 	.word	0x40007000
 8004000:	4b9c      	ldr	r3, [pc, #624]	; (8004274 <HAL_RCC_OscConfig+0x780>)
 8004002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004006:	4a9b      	ldr	r2, [pc, #620]	; (8004274 <HAL_RCC_OscConfig+0x780>)
 8004008:	f023 0301 	bic.w	r3, r3, #1
 800400c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004010:	4b98      	ldr	r3, [pc, #608]	; (8004274 <HAL_RCC_OscConfig+0x780>)
 8004012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004016:	4a97      	ldr	r2, [pc, #604]	; (8004274 <HAL_RCC_OscConfig+0x780>)
 8004018:	f023 0304 	bic.w	r3, r3, #4
 800401c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d016      	beq.n	8004056 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004028:	f7fe fb7e 	bl	8002728 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800402e:	e00a      	b.n	8004046 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004030:	f7fe fb7a 	bl	8002728 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	f241 3288 	movw	r2, #5000	; 0x1388
 800403e:	4293      	cmp	r3, r2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e12a      	b.n	800429c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004046:	4b8b      	ldr	r3, [pc, #556]	; (8004274 <HAL_RCC_OscConfig+0x780>)
 8004048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0ed      	beq.n	8004030 <HAL_RCC_OscConfig+0x53c>
 8004054:	e015      	b.n	8004082 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004056:	f7fe fb67 	bl	8002728 <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800405c:	e00a      	b.n	8004074 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800405e:	f7fe fb63 	bl	8002728 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	f241 3288 	movw	r2, #5000	; 0x1388
 800406c:	4293      	cmp	r3, r2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e113      	b.n	800429c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004074:	4b7f      	ldr	r3, [pc, #508]	; (8004274 <HAL_RCC_OscConfig+0x780>)
 8004076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1ed      	bne.n	800405e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004082:	7ffb      	ldrb	r3, [r7, #31]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d105      	bne.n	8004094 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004088:	4b7a      	ldr	r3, [pc, #488]	; (8004274 <HAL_RCC_OscConfig+0x780>)
 800408a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408c:	4a79      	ldr	r2, [pc, #484]	; (8004274 <HAL_RCC_OscConfig+0x780>)
 800408e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004092:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 80fe 	beq.w	800429a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	f040 80d0 	bne.w	8004248 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80040a8:	4b72      	ldr	r3, [pc, #456]	; (8004274 <HAL_RCC_OscConfig+0x780>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f003 0203 	and.w	r2, r3, #3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d130      	bne.n	800411e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	3b01      	subs	r3, #1
 80040c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d127      	bne.n	800411e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040da:	429a      	cmp	r2, r3
 80040dc:	d11f      	bne.n	800411e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040e8:	2a07      	cmp	r2, #7
 80040ea:	bf14      	ite	ne
 80040ec:	2201      	movne	r2, #1
 80040ee:	2200      	moveq	r2, #0
 80040f0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d113      	bne.n	800411e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004100:	085b      	lsrs	r3, r3, #1
 8004102:	3b01      	subs	r3, #1
 8004104:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004106:	429a      	cmp	r2, r3
 8004108:	d109      	bne.n	800411e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004114:	085b      	lsrs	r3, r3, #1
 8004116:	3b01      	subs	r3, #1
 8004118:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800411a:	429a      	cmp	r2, r3
 800411c:	d06e      	beq.n	80041fc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	2b0c      	cmp	r3, #12
 8004122:	d069      	beq.n	80041f8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004124:	4b53      	ldr	r3, [pc, #332]	; (8004274 <HAL_RCC_OscConfig+0x780>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d105      	bne.n	800413c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004130:	4b50      	ldr	r3, [pc, #320]	; (8004274 <HAL_RCC_OscConfig+0x780>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e0ad      	b.n	800429c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004140:	4b4c      	ldr	r3, [pc, #304]	; (8004274 <HAL_RCC_OscConfig+0x780>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a4b      	ldr	r2, [pc, #300]	; (8004274 <HAL_RCC_OscConfig+0x780>)
 8004146:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800414a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800414c:	f7fe faec 	bl	8002728 <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004154:	f7fe fae8 	bl	8002728 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e09a      	b.n	800429c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004166:	4b43      	ldr	r3, [pc, #268]	; (8004274 <HAL_RCC_OscConfig+0x780>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1f0      	bne.n	8004154 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004172:	4b40      	ldr	r3, [pc, #256]	; (8004274 <HAL_RCC_OscConfig+0x780>)
 8004174:	68da      	ldr	r2, [r3, #12]
 8004176:	4b40      	ldr	r3, [pc, #256]	; (8004278 <HAL_RCC_OscConfig+0x784>)
 8004178:	4013      	ands	r3, r2
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004182:	3a01      	subs	r2, #1
 8004184:	0112      	lsls	r2, r2, #4
 8004186:	4311      	orrs	r1, r2
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800418c:	0212      	lsls	r2, r2, #8
 800418e:	4311      	orrs	r1, r2
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004194:	0852      	lsrs	r2, r2, #1
 8004196:	3a01      	subs	r2, #1
 8004198:	0552      	lsls	r2, r2, #21
 800419a:	4311      	orrs	r1, r2
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80041a0:	0852      	lsrs	r2, r2, #1
 80041a2:	3a01      	subs	r2, #1
 80041a4:	0652      	lsls	r2, r2, #25
 80041a6:	4311      	orrs	r1, r2
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041ac:	0912      	lsrs	r2, r2, #4
 80041ae:	0452      	lsls	r2, r2, #17
 80041b0:	430a      	orrs	r2, r1
 80041b2:	4930      	ldr	r1, [pc, #192]	; (8004274 <HAL_RCC_OscConfig+0x780>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80041b8:	4b2e      	ldr	r3, [pc, #184]	; (8004274 <HAL_RCC_OscConfig+0x780>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a2d      	ldr	r2, [pc, #180]	; (8004274 <HAL_RCC_OscConfig+0x780>)
 80041be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041c4:	4b2b      	ldr	r3, [pc, #172]	; (8004274 <HAL_RCC_OscConfig+0x780>)
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	4a2a      	ldr	r2, [pc, #168]	; (8004274 <HAL_RCC_OscConfig+0x780>)
 80041ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041d0:	f7fe faaa 	bl	8002728 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041d8:	f7fe faa6 	bl	8002728 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e058      	b.n	800429c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041ea:	4b22      	ldr	r3, [pc, #136]	; (8004274 <HAL_RCC_OscConfig+0x780>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0f0      	beq.n	80041d8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041f6:	e050      	b.n	800429a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e04f      	b.n	800429c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041fc:	4b1d      	ldr	r3, [pc, #116]	; (8004274 <HAL_RCC_OscConfig+0x780>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d148      	bne.n	800429a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004208:	4b1a      	ldr	r3, [pc, #104]	; (8004274 <HAL_RCC_OscConfig+0x780>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a19      	ldr	r2, [pc, #100]	; (8004274 <HAL_RCC_OscConfig+0x780>)
 800420e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004212:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004214:	4b17      	ldr	r3, [pc, #92]	; (8004274 <HAL_RCC_OscConfig+0x780>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	4a16      	ldr	r2, [pc, #88]	; (8004274 <HAL_RCC_OscConfig+0x780>)
 800421a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800421e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004220:	f7fe fa82 	bl	8002728 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004228:	f7fe fa7e 	bl	8002728 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e030      	b.n	800429c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800423a:	4b0e      	ldr	r3, [pc, #56]	; (8004274 <HAL_RCC_OscConfig+0x780>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0f0      	beq.n	8004228 <HAL_RCC_OscConfig+0x734>
 8004246:	e028      	b.n	800429a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	2b0c      	cmp	r3, #12
 800424c:	d023      	beq.n	8004296 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800424e:	4b09      	ldr	r3, [pc, #36]	; (8004274 <HAL_RCC_OscConfig+0x780>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a08      	ldr	r2, [pc, #32]	; (8004274 <HAL_RCC_OscConfig+0x780>)
 8004254:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004258:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425a:	f7fe fa65 	bl	8002728 <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004260:	e00c      	b.n	800427c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004262:	f7fe fa61 	bl	8002728 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d905      	bls.n	800427c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e013      	b.n	800429c <HAL_RCC_OscConfig+0x7a8>
 8004274:	40021000 	.word	0x40021000
 8004278:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800427c:	4b09      	ldr	r3, [pc, #36]	; (80042a4 <HAL_RCC_OscConfig+0x7b0>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1ec      	bne.n	8004262 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004288:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <HAL_RCC_OscConfig+0x7b0>)
 800428a:	68da      	ldr	r2, [r3, #12]
 800428c:	4905      	ldr	r1, [pc, #20]	; (80042a4 <HAL_RCC_OscConfig+0x7b0>)
 800428e:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <HAL_RCC_OscConfig+0x7b4>)
 8004290:	4013      	ands	r3, r2
 8004292:	60cb      	str	r3, [r1, #12]
 8004294:	e001      	b.n	800429a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e000      	b.n	800429c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3720      	adds	r7, #32
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	40021000 	.word	0x40021000
 80042a8:	feeefffc 	.word	0xfeeefffc

080042ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e0e7      	b.n	8004490 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042c0:	4b75      	ldr	r3, [pc, #468]	; (8004498 <HAL_RCC_ClockConfig+0x1ec>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d910      	bls.n	80042f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ce:	4b72      	ldr	r3, [pc, #456]	; (8004498 <HAL_RCC_ClockConfig+0x1ec>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f023 0207 	bic.w	r2, r3, #7
 80042d6:	4970      	ldr	r1, [pc, #448]	; (8004498 <HAL_RCC_ClockConfig+0x1ec>)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	4313      	orrs	r3, r2
 80042dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042de:	4b6e      	ldr	r3, [pc, #440]	; (8004498 <HAL_RCC_ClockConfig+0x1ec>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d001      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e0cf      	b.n	8004490 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d010      	beq.n	800431e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	4b66      	ldr	r3, [pc, #408]	; (800449c <HAL_RCC_ClockConfig+0x1f0>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004308:	429a      	cmp	r2, r3
 800430a:	d908      	bls.n	800431e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800430c:	4b63      	ldr	r3, [pc, #396]	; (800449c <HAL_RCC_ClockConfig+0x1f0>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	4960      	ldr	r1, [pc, #384]	; (800449c <HAL_RCC_ClockConfig+0x1f0>)
 800431a:	4313      	orrs	r3, r2
 800431c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d04c      	beq.n	80043c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2b03      	cmp	r3, #3
 8004330:	d107      	bne.n	8004342 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004332:	4b5a      	ldr	r3, [pc, #360]	; (800449c <HAL_RCC_ClockConfig+0x1f0>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d121      	bne.n	8004382 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e0a6      	b.n	8004490 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	2b02      	cmp	r3, #2
 8004348:	d107      	bne.n	800435a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800434a:	4b54      	ldr	r3, [pc, #336]	; (800449c <HAL_RCC_ClockConfig+0x1f0>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d115      	bne.n	8004382 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e09a      	b.n	8004490 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d107      	bne.n	8004372 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004362:	4b4e      	ldr	r3, [pc, #312]	; (800449c <HAL_RCC_ClockConfig+0x1f0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d109      	bne.n	8004382 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e08e      	b.n	8004490 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004372:	4b4a      	ldr	r3, [pc, #296]	; (800449c <HAL_RCC_ClockConfig+0x1f0>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e086      	b.n	8004490 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004382:	4b46      	ldr	r3, [pc, #280]	; (800449c <HAL_RCC_ClockConfig+0x1f0>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f023 0203 	bic.w	r2, r3, #3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	4943      	ldr	r1, [pc, #268]	; (800449c <HAL_RCC_ClockConfig+0x1f0>)
 8004390:	4313      	orrs	r3, r2
 8004392:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004394:	f7fe f9c8 	bl	8002728 <HAL_GetTick>
 8004398:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800439a:	e00a      	b.n	80043b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800439c:	f7fe f9c4 	bl	8002728 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e06e      	b.n	8004490 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043b2:	4b3a      	ldr	r3, [pc, #232]	; (800449c <HAL_RCC_ClockConfig+0x1f0>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 020c 	and.w	r2, r3, #12
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d1eb      	bne.n	800439c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d010      	beq.n	80043f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	4b31      	ldr	r3, [pc, #196]	; (800449c <HAL_RCC_ClockConfig+0x1f0>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043dc:	429a      	cmp	r2, r3
 80043de:	d208      	bcs.n	80043f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043e0:	4b2e      	ldr	r3, [pc, #184]	; (800449c <HAL_RCC_ClockConfig+0x1f0>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	492b      	ldr	r1, [pc, #172]	; (800449c <HAL_RCC_ClockConfig+0x1f0>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043f2:	4b29      	ldr	r3, [pc, #164]	; (8004498 <HAL_RCC_ClockConfig+0x1ec>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d210      	bcs.n	8004422 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004400:	4b25      	ldr	r3, [pc, #148]	; (8004498 <HAL_RCC_ClockConfig+0x1ec>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f023 0207 	bic.w	r2, r3, #7
 8004408:	4923      	ldr	r1, [pc, #140]	; (8004498 <HAL_RCC_ClockConfig+0x1ec>)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	4313      	orrs	r3, r2
 800440e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004410:	4b21      	ldr	r3, [pc, #132]	; (8004498 <HAL_RCC_ClockConfig+0x1ec>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	429a      	cmp	r2, r3
 800441c:	d001      	beq.n	8004422 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e036      	b.n	8004490 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0304 	and.w	r3, r3, #4
 800442a:	2b00      	cmp	r3, #0
 800442c:	d008      	beq.n	8004440 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800442e:	4b1b      	ldr	r3, [pc, #108]	; (800449c <HAL_RCC_ClockConfig+0x1f0>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	4918      	ldr	r1, [pc, #96]	; (800449c <HAL_RCC_ClockConfig+0x1f0>)
 800443c:	4313      	orrs	r3, r2
 800443e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0308 	and.w	r3, r3, #8
 8004448:	2b00      	cmp	r3, #0
 800444a:	d009      	beq.n	8004460 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800444c:	4b13      	ldr	r3, [pc, #76]	; (800449c <HAL_RCC_ClockConfig+0x1f0>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	4910      	ldr	r1, [pc, #64]	; (800449c <HAL_RCC_ClockConfig+0x1f0>)
 800445c:	4313      	orrs	r3, r2
 800445e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004460:	f000 f824 	bl	80044ac <HAL_RCC_GetSysClockFreq>
 8004464:	4602      	mov	r2, r0
 8004466:	4b0d      	ldr	r3, [pc, #52]	; (800449c <HAL_RCC_ClockConfig+0x1f0>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	091b      	lsrs	r3, r3, #4
 800446c:	f003 030f 	and.w	r3, r3, #15
 8004470:	490b      	ldr	r1, [pc, #44]	; (80044a0 <HAL_RCC_ClockConfig+0x1f4>)
 8004472:	5ccb      	ldrb	r3, [r1, r3]
 8004474:	f003 031f 	and.w	r3, r3, #31
 8004478:	fa22 f303 	lsr.w	r3, r2, r3
 800447c:	4a09      	ldr	r2, [pc, #36]	; (80044a4 <HAL_RCC_ClockConfig+0x1f8>)
 800447e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004480:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <HAL_RCC_ClockConfig+0x1fc>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	f7fd ff8d 	bl	80023a4 <HAL_InitTick>
 800448a:	4603      	mov	r3, r0
 800448c:	72fb      	strb	r3, [r7, #11]

  return status;
 800448e:	7afb      	ldrb	r3, [r7, #11]
}
 8004490:	4618      	mov	r0, r3
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40022000 	.word	0x40022000
 800449c:	40021000 	.word	0x40021000
 80044a0:	0800d000 	.word	0x0800d000
 80044a4:	20000000 	.word	0x20000000
 80044a8:	20000004 	.word	0x20000004

080044ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b089      	sub	sp, #36	; 0x24
 80044b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	61fb      	str	r3, [r7, #28]
 80044b6:	2300      	movs	r3, #0
 80044b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044ba:	4b3e      	ldr	r3, [pc, #248]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 030c 	and.w	r3, r3, #12
 80044c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044c4:	4b3b      	ldr	r3, [pc, #236]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f003 0303 	and.w	r3, r3, #3
 80044cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d005      	beq.n	80044e0 <HAL_RCC_GetSysClockFreq+0x34>
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	2b0c      	cmp	r3, #12
 80044d8:	d121      	bne.n	800451e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d11e      	bne.n	800451e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80044e0:	4b34      	ldr	r3, [pc, #208]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0308 	and.w	r3, r3, #8
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d107      	bne.n	80044fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80044ec:	4b31      	ldr	r3, [pc, #196]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80044ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044f2:	0a1b      	lsrs	r3, r3, #8
 80044f4:	f003 030f 	and.w	r3, r3, #15
 80044f8:	61fb      	str	r3, [r7, #28]
 80044fa:	e005      	b.n	8004508 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80044fc:	4b2d      	ldr	r3, [pc, #180]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	091b      	lsrs	r3, r3, #4
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004508:	4a2b      	ldr	r2, [pc, #172]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004510:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10d      	bne.n	8004534 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800451c:	e00a      	b.n	8004534 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	2b04      	cmp	r3, #4
 8004522:	d102      	bne.n	800452a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004524:	4b25      	ldr	r3, [pc, #148]	; (80045bc <HAL_RCC_GetSysClockFreq+0x110>)
 8004526:	61bb      	str	r3, [r7, #24]
 8004528:	e004      	b.n	8004534 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	2b08      	cmp	r3, #8
 800452e:	d101      	bne.n	8004534 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004530:	4b23      	ldr	r3, [pc, #140]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004532:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	2b0c      	cmp	r3, #12
 8004538:	d134      	bne.n	80045a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800453a:	4b1e      	ldr	r3, [pc, #120]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f003 0303 	and.w	r3, r3, #3
 8004542:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2b02      	cmp	r3, #2
 8004548:	d003      	beq.n	8004552 <HAL_RCC_GetSysClockFreq+0xa6>
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2b03      	cmp	r3, #3
 800454e:	d003      	beq.n	8004558 <HAL_RCC_GetSysClockFreq+0xac>
 8004550:	e005      	b.n	800455e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004552:	4b1a      	ldr	r3, [pc, #104]	; (80045bc <HAL_RCC_GetSysClockFreq+0x110>)
 8004554:	617b      	str	r3, [r7, #20]
      break;
 8004556:	e005      	b.n	8004564 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004558:	4b19      	ldr	r3, [pc, #100]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800455a:	617b      	str	r3, [r7, #20]
      break;
 800455c:	e002      	b.n	8004564 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	617b      	str	r3, [r7, #20]
      break;
 8004562:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004564:	4b13      	ldr	r3, [pc, #76]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	091b      	lsrs	r3, r3, #4
 800456a:	f003 0307 	and.w	r3, r3, #7
 800456e:	3301      	adds	r3, #1
 8004570:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004572:	4b10      	ldr	r3, [pc, #64]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	0a1b      	lsrs	r3, r3, #8
 8004578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	fb03 f202 	mul.w	r2, r3, r2
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	fbb2 f3f3 	udiv	r3, r2, r3
 8004588:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800458a:	4b0a      	ldr	r3, [pc, #40]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	0e5b      	lsrs	r3, r3, #25
 8004590:	f003 0303 	and.w	r3, r3, #3
 8004594:	3301      	adds	r3, #1
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80045a4:	69bb      	ldr	r3, [r7, #24]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3724      	adds	r7, #36	; 0x24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	40021000 	.word	0x40021000
 80045b8:	0800d018 	.word	0x0800d018
 80045bc:	00f42400 	.word	0x00f42400
 80045c0:	007a1200 	.word	0x007a1200

080045c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045c8:	4b03      	ldr	r3, [pc, #12]	; (80045d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045ca:	681b      	ldr	r3, [r3, #0]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	20000000 	.word	0x20000000

080045dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80045e0:	f7ff fff0 	bl	80045c4 <HAL_RCC_GetHCLKFreq>
 80045e4:	4602      	mov	r2, r0
 80045e6:	4b06      	ldr	r3, [pc, #24]	; (8004600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	0a1b      	lsrs	r3, r3, #8
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	4904      	ldr	r1, [pc, #16]	; (8004604 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045f2:	5ccb      	ldrb	r3, [r1, r3]
 80045f4:	f003 031f 	and.w	r3, r3, #31
 80045f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40021000 	.word	0x40021000
 8004604:	0800d010 	.word	0x0800d010

08004608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800460c:	f7ff ffda 	bl	80045c4 <HAL_RCC_GetHCLKFreq>
 8004610:	4602      	mov	r2, r0
 8004612:	4b06      	ldr	r3, [pc, #24]	; (800462c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	0adb      	lsrs	r3, r3, #11
 8004618:	f003 0307 	and.w	r3, r3, #7
 800461c:	4904      	ldr	r1, [pc, #16]	; (8004630 <HAL_RCC_GetPCLK2Freq+0x28>)
 800461e:	5ccb      	ldrb	r3, [r1, r3]
 8004620:	f003 031f 	and.w	r3, r3, #31
 8004624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004628:	4618      	mov	r0, r3
 800462a:	bd80      	pop	{r7, pc}
 800462c:	40021000 	.word	0x40021000
 8004630:	0800d010 	.word	0x0800d010

08004634 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	220f      	movs	r2, #15
 8004642:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004644:	4b12      	ldr	r3, [pc, #72]	; (8004690 <HAL_RCC_GetClockConfig+0x5c>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f003 0203 	and.w	r2, r3, #3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004650:	4b0f      	ldr	r3, [pc, #60]	; (8004690 <HAL_RCC_GetClockConfig+0x5c>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800465c:	4b0c      	ldr	r3, [pc, #48]	; (8004690 <HAL_RCC_GetClockConfig+0x5c>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004668:	4b09      	ldr	r3, [pc, #36]	; (8004690 <HAL_RCC_GetClockConfig+0x5c>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	08db      	lsrs	r3, r3, #3
 800466e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004676:	4b07      	ldr	r3, [pc, #28]	; (8004694 <HAL_RCC_GetClockConfig+0x60>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0207 	and.w	r2, r3, #7
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	601a      	str	r2, [r3, #0]
}
 8004682:	bf00      	nop
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	40021000 	.word	0x40021000
 8004694:	40022000 	.word	0x40022000

08004698 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80046a0:	2300      	movs	r3, #0
 80046a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80046a4:	4b2a      	ldr	r3, [pc, #168]	; (8004750 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d003      	beq.n	80046b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80046b0:	f7ff f9bc 	bl	8003a2c <HAL_PWREx_GetVoltageRange>
 80046b4:	6178      	str	r0, [r7, #20]
 80046b6:	e014      	b.n	80046e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80046b8:	4b25      	ldr	r3, [pc, #148]	; (8004750 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046bc:	4a24      	ldr	r2, [pc, #144]	; (8004750 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c2:	6593      	str	r3, [r2, #88]	; 0x58
 80046c4:	4b22      	ldr	r3, [pc, #136]	; (8004750 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80046d0:	f7ff f9ac 	bl	8003a2c <HAL_PWREx_GetVoltageRange>
 80046d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80046d6:	4b1e      	ldr	r3, [pc, #120]	; (8004750 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046da:	4a1d      	ldr	r2, [pc, #116]	; (8004750 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046e8:	d10b      	bne.n	8004702 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2b80      	cmp	r3, #128	; 0x80
 80046ee:	d919      	bls.n	8004724 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2ba0      	cmp	r3, #160	; 0xa0
 80046f4:	d902      	bls.n	80046fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80046f6:	2302      	movs	r3, #2
 80046f8:	613b      	str	r3, [r7, #16]
 80046fa:	e013      	b.n	8004724 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80046fc:	2301      	movs	r3, #1
 80046fe:	613b      	str	r3, [r7, #16]
 8004700:	e010      	b.n	8004724 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b80      	cmp	r3, #128	; 0x80
 8004706:	d902      	bls.n	800470e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004708:	2303      	movs	r3, #3
 800470a:	613b      	str	r3, [r7, #16]
 800470c:	e00a      	b.n	8004724 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b80      	cmp	r3, #128	; 0x80
 8004712:	d102      	bne.n	800471a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004714:	2302      	movs	r3, #2
 8004716:	613b      	str	r3, [r7, #16]
 8004718:	e004      	b.n	8004724 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b70      	cmp	r3, #112	; 0x70
 800471e:	d101      	bne.n	8004724 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004720:	2301      	movs	r3, #1
 8004722:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004724:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f023 0207 	bic.w	r2, r3, #7
 800472c:	4909      	ldr	r1, [pc, #36]	; (8004754 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	4313      	orrs	r3, r2
 8004732:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004734:	4b07      	ldr	r3, [pc, #28]	; (8004754 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	429a      	cmp	r2, r3
 8004740:	d001      	beq.n	8004746 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e000      	b.n	8004748 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3718      	adds	r7, #24
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	40021000 	.word	0x40021000
 8004754:	40022000 	.word	0x40022000

08004758 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004760:	2300      	movs	r3, #0
 8004762:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004764:	2300      	movs	r3, #0
 8004766:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004770:	2b00      	cmp	r3, #0
 8004772:	d041      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004778:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800477c:	d02a      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800477e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004782:	d824      	bhi.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004784:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004788:	d008      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800478a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800478e:	d81e      	bhi.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00a      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004794:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004798:	d010      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800479a:	e018      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800479c:	4b86      	ldr	r3, [pc, #536]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	4a85      	ldr	r2, [pc, #532]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047a8:	e015      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	3304      	adds	r3, #4
 80047ae:	2100      	movs	r1, #0
 80047b0:	4618      	mov	r0, r3
 80047b2:	f000 fabb 	bl	8004d2c <RCCEx_PLLSAI1_Config>
 80047b6:	4603      	mov	r3, r0
 80047b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047ba:	e00c      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3320      	adds	r3, #32
 80047c0:	2100      	movs	r1, #0
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 fba6 	bl	8004f14 <RCCEx_PLLSAI2_Config>
 80047c8:	4603      	mov	r3, r0
 80047ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047cc:	e003      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	74fb      	strb	r3, [r7, #19]
      break;
 80047d2:	e000      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80047d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047d6:	7cfb      	ldrb	r3, [r7, #19]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10b      	bne.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047dc:	4b76      	ldr	r3, [pc, #472]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047ea:	4973      	ldr	r1, [pc, #460]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80047f2:	e001      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f4:	7cfb      	ldrb	r3, [r7, #19]
 80047f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d041      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004808:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800480c:	d02a      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800480e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004812:	d824      	bhi.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004814:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004818:	d008      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800481a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800481e:	d81e      	bhi.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00a      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004828:	d010      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800482a:	e018      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800482c:	4b62      	ldr	r3, [pc, #392]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	4a61      	ldr	r2, [pc, #388]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004836:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004838:	e015      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3304      	adds	r3, #4
 800483e:	2100      	movs	r1, #0
 8004840:	4618      	mov	r0, r3
 8004842:	f000 fa73 	bl	8004d2c <RCCEx_PLLSAI1_Config>
 8004846:	4603      	mov	r3, r0
 8004848:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800484a:	e00c      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3320      	adds	r3, #32
 8004850:	2100      	movs	r1, #0
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fb5e 	bl	8004f14 <RCCEx_PLLSAI2_Config>
 8004858:	4603      	mov	r3, r0
 800485a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800485c:	e003      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	74fb      	strb	r3, [r7, #19]
      break;
 8004862:	e000      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004864:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004866:	7cfb      	ldrb	r3, [r7, #19]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10b      	bne.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800486c:	4b52      	ldr	r3, [pc, #328]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800486e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004872:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800487a:	494f      	ldr	r1, [pc, #316]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004882:	e001      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004884:	7cfb      	ldrb	r3, [r7, #19]
 8004886:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 80a0 	beq.w	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004896:	2300      	movs	r3, #0
 8004898:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800489a:	4b47      	ldr	r3, [pc, #284]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800489c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80048a6:	2301      	movs	r3, #1
 80048a8:	e000      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x154>
 80048aa:	2300      	movs	r3, #0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00d      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048b0:	4b41      	ldr	r3, [pc, #260]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b4:	4a40      	ldr	r2, [pc, #256]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ba:	6593      	str	r3, [r2, #88]	; 0x58
 80048bc:	4b3e      	ldr	r3, [pc, #248]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c4:	60bb      	str	r3, [r7, #8]
 80048c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048c8:	2301      	movs	r3, #1
 80048ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048cc:	4b3b      	ldr	r3, [pc, #236]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a3a      	ldr	r2, [pc, #232]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048d8:	f7fd ff26 	bl	8002728 <HAL_GetTick>
 80048dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048de:	e009      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048e0:	f7fd ff22 	bl	8002728 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d902      	bls.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	74fb      	strb	r3, [r7, #19]
        break;
 80048f2:	e005      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048f4:	4b31      	ldr	r3, [pc, #196]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d0ef      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004900:	7cfb      	ldrb	r3, [r7, #19]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d15c      	bne.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004906:	4b2c      	ldr	r3, [pc, #176]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004910:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d01f      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	429a      	cmp	r2, r3
 8004922:	d019      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004924:	4b24      	ldr	r3, [pc, #144]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800492e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004930:	4b21      	ldr	r3, [pc, #132]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004936:	4a20      	ldr	r2, [pc, #128]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800493c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004940:	4b1d      	ldr	r3, [pc, #116]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004946:	4a1c      	ldr	r2, [pc, #112]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004948:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800494c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004950:	4a19      	ldr	r2, [pc, #100]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d016      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004962:	f7fd fee1 	bl	8002728 <HAL_GetTick>
 8004966:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004968:	e00b      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800496a:	f7fd fedd 	bl	8002728 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	f241 3288 	movw	r2, #5000	; 0x1388
 8004978:	4293      	cmp	r3, r2
 800497a:	d902      	bls.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	74fb      	strb	r3, [r7, #19]
            break;
 8004980:	e006      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004982:	4b0d      	ldr	r3, [pc, #52]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d0ec      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004990:	7cfb      	ldrb	r3, [r7, #19]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10c      	bne.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004996:	4b08      	ldr	r3, [pc, #32]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800499c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049a6:	4904      	ldr	r1, [pc, #16]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80049ae:	e009      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049b0:	7cfb      	ldrb	r3, [r7, #19]
 80049b2:	74bb      	strb	r3, [r7, #18]
 80049b4:	e006      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80049b6:	bf00      	nop
 80049b8:	40021000 	.word	0x40021000
 80049bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c0:	7cfb      	ldrb	r3, [r7, #19]
 80049c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049c4:	7c7b      	ldrb	r3, [r7, #17]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d105      	bne.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049ca:	4b9e      	ldr	r3, [pc, #632]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ce:	4a9d      	ldr	r2, [pc, #628]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00a      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049e2:	4b98      	ldr	r3, [pc, #608]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e8:	f023 0203 	bic.w	r2, r3, #3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f0:	4994      	ldr	r1, [pc, #592]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00a      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a04:	4b8f      	ldr	r3, [pc, #572]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0a:	f023 020c 	bic.w	r2, r3, #12
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a12:	498c      	ldr	r1, [pc, #560]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0304 	and.w	r3, r3, #4
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00a      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a26:	4b87      	ldr	r3, [pc, #540]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a34:	4983      	ldr	r1, [pc, #524]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0308 	and.w	r3, r3, #8
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00a      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a48:	4b7e      	ldr	r3, [pc, #504]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a56:	497b      	ldr	r1, [pc, #492]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0310 	and.w	r3, r3, #16
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a6a:	4b76      	ldr	r3, [pc, #472]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a78:	4972      	ldr	r1, [pc, #456]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0320 	and.w	r3, r3, #32
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00a      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a8c:	4b6d      	ldr	r3, [pc, #436]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a9a:	496a      	ldr	r1, [pc, #424]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004aae:	4b65      	ldr	r3, [pc, #404]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004abc:	4961      	ldr	r1, [pc, #388]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00a      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ad0:	4b5c      	ldr	r3, [pc, #368]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ade:	4959      	ldr	r1, [pc, #356]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00a      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004af2:	4b54      	ldr	r3, [pc, #336]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b00:	4950      	ldr	r1, [pc, #320]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00a      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b14:	4b4b      	ldr	r3, [pc, #300]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b22:	4948      	ldr	r1, [pc, #288]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b36:	4b43      	ldr	r3, [pc, #268]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b44:	493f      	ldr	r1, [pc, #252]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d028      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b58:	4b3a      	ldr	r3, [pc, #232]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b66:	4937      	ldr	r1, [pc, #220]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b76:	d106      	bne.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b78:	4b32      	ldr	r3, [pc, #200]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	4a31      	ldr	r2, [pc, #196]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b82:	60d3      	str	r3, [r2, #12]
 8004b84:	e011      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b8e:	d10c      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3304      	adds	r3, #4
 8004b94:	2101      	movs	r1, #1
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 f8c8 	bl	8004d2c <RCCEx_PLLSAI1_Config>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004ba0:	7cfb      	ldrb	r3, [r7, #19]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004ba6:	7cfb      	ldrb	r3, [r7, #19]
 8004ba8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d028      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004bb6:	4b23      	ldr	r3, [pc, #140]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bbc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc4:	491f      	ldr	r1, [pc, #124]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bd4:	d106      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bd6:	4b1b      	ldr	r3, [pc, #108]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	4a1a      	ldr	r2, [pc, #104]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004be0:	60d3      	str	r3, [r2, #12]
 8004be2:	e011      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bec:	d10c      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	3304      	adds	r3, #4
 8004bf2:	2101      	movs	r1, #1
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 f899 	bl	8004d2c <RCCEx_PLLSAI1_Config>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bfe:	7cfb      	ldrb	r3, [r7, #19]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d001      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004c04:	7cfb      	ldrb	r3, [r7, #19]
 8004c06:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d02b      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c14:	4b0b      	ldr	r3, [pc, #44]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c22:	4908      	ldr	r1, [pc, #32]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c32:	d109      	bne.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c34:	4b03      	ldr	r3, [pc, #12]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	4a02      	ldr	r2, [pc, #8]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c3e:	60d3      	str	r3, [r2, #12]
 8004c40:	e014      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004c42:	bf00      	nop
 8004c44:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c50:	d10c      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	3304      	adds	r3, #4
 8004c56:	2101      	movs	r1, #1
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 f867 	bl	8004d2c <RCCEx_PLLSAI1_Config>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c62:	7cfb      	ldrb	r3, [r7, #19]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004c68:	7cfb      	ldrb	r3, [r7, #19]
 8004c6a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d02f      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c78:	4b2b      	ldr	r3, [pc, #172]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c86:	4928      	ldr	r1, [pc, #160]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c96:	d10d      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	2102      	movs	r1, #2
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 f844 	bl	8004d2c <RCCEx_PLLSAI1_Config>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ca8:	7cfb      	ldrb	r3, [r7, #19]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d014      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004cae:	7cfb      	ldrb	r3, [r7, #19]
 8004cb0:	74bb      	strb	r3, [r7, #18]
 8004cb2:	e011      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cbc:	d10c      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	3320      	adds	r3, #32
 8004cc2:	2102      	movs	r1, #2
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 f925 	bl	8004f14 <RCCEx_PLLSAI2_Config>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cce:	7cfb      	ldrb	r3, [r7, #19]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d001      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004cd4:	7cfb      	ldrb	r3, [r7, #19]
 8004cd6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00a      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ce4:	4b10      	ldr	r3, [pc, #64]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cf2:	490d      	ldr	r1, [pc, #52]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00b      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d06:	4b08      	ldr	r3, [pc, #32]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d16:	4904      	ldr	r1, [pc, #16]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004d1e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3718      	adds	r7, #24
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	40021000 	.word	0x40021000

08004d2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d3a:	4b75      	ldr	r3, [pc, #468]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d018      	beq.n	8004d78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004d46:	4b72      	ldr	r3, [pc, #456]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f003 0203 	and.w	r2, r3, #3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d10d      	bne.n	8004d72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
       ||
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d009      	beq.n	8004d72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004d5e:	4b6c      	ldr	r3, [pc, #432]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	091b      	lsrs	r3, r3, #4
 8004d64:	f003 0307 	and.w	r3, r3, #7
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
       ||
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d047      	beq.n	8004e02 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	73fb      	strb	r3, [r7, #15]
 8004d76:	e044      	b.n	8004e02 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b03      	cmp	r3, #3
 8004d7e:	d018      	beq.n	8004db2 <RCCEx_PLLSAI1_Config+0x86>
 8004d80:	2b03      	cmp	r3, #3
 8004d82:	d825      	bhi.n	8004dd0 <RCCEx_PLLSAI1_Config+0xa4>
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d002      	beq.n	8004d8e <RCCEx_PLLSAI1_Config+0x62>
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d009      	beq.n	8004da0 <RCCEx_PLLSAI1_Config+0x74>
 8004d8c:	e020      	b.n	8004dd0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d8e:	4b60      	ldr	r3, [pc, #384]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d11d      	bne.n	8004dd6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d9e:	e01a      	b.n	8004dd6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004da0:	4b5b      	ldr	r3, [pc, #364]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d116      	bne.n	8004dda <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004db0:	e013      	b.n	8004dda <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004db2:	4b57      	ldr	r3, [pc, #348]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10f      	bne.n	8004dde <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004dbe:	4b54      	ldr	r3, [pc, #336]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d109      	bne.n	8004dde <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004dce:	e006      	b.n	8004dde <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8004dd4:	e004      	b.n	8004de0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004dd6:	bf00      	nop
 8004dd8:	e002      	b.n	8004de0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004dda:	bf00      	nop
 8004ddc:	e000      	b.n	8004de0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004dde:	bf00      	nop
    }

    if(status == HAL_OK)
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10d      	bne.n	8004e02 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004de6:	4b4a      	ldr	r3, [pc, #296]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6819      	ldr	r1, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	3b01      	subs	r3, #1
 8004df8:	011b      	lsls	r3, r3, #4
 8004dfa:	430b      	orrs	r3, r1
 8004dfc:	4944      	ldr	r1, [pc, #272]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e02:	7bfb      	ldrb	r3, [r7, #15]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d17d      	bne.n	8004f04 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e08:	4b41      	ldr	r3, [pc, #260]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a40      	ldr	r2, [pc, #256]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e14:	f7fd fc88 	bl	8002728 <HAL_GetTick>
 8004e18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e1a:	e009      	b.n	8004e30 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e1c:	f7fd fc84 	bl	8002728 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d902      	bls.n	8004e30 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	73fb      	strb	r3, [r7, #15]
        break;
 8004e2e:	e005      	b.n	8004e3c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e30:	4b37      	ldr	r3, [pc, #220]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1ef      	bne.n	8004e1c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e3c:	7bfb      	ldrb	r3, [r7, #15]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d160      	bne.n	8004f04 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d111      	bne.n	8004e6c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e48:	4b31      	ldr	r3, [pc, #196]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	6892      	ldr	r2, [r2, #8]
 8004e58:	0211      	lsls	r1, r2, #8
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	68d2      	ldr	r2, [r2, #12]
 8004e5e:	0912      	lsrs	r2, r2, #4
 8004e60:	0452      	lsls	r2, r2, #17
 8004e62:	430a      	orrs	r2, r1
 8004e64:	492a      	ldr	r1, [pc, #168]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	610b      	str	r3, [r1, #16]
 8004e6a:	e027      	b.n	8004ebc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d112      	bne.n	8004e98 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e72:	4b27      	ldr	r3, [pc, #156]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004e7a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	6892      	ldr	r2, [r2, #8]
 8004e82:	0211      	lsls	r1, r2, #8
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6912      	ldr	r2, [r2, #16]
 8004e88:	0852      	lsrs	r2, r2, #1
 8004e8a:	3a01      	subs	r2, #1
 8004e8c:	0552      	lsls	r2, r2, #21
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	491f      	ldr	r1, [pc, #124]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	610b      	str	r3, [r1, #16]
 8004e96:	e011      	b.n	8004ebc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e98:	4b1d      	ldr	r3, [pc, #116]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ea0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6892      	ldr	r2, [r2, #8]
 8004ea8:	0211      	lsls	r1, r2, #8
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	6952      	ldr	r2, [r2, #20]
 8004eae:	0852      	lsrs	r2, r2, #1
 8004eb0:	3a01      	subs	r2, #1
 8004eb2:	0652      	lsls	r2, r2, #25
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	4916      	ldr	r1, [pc, #88]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ebc:	4b14      	ldr	r3, [pc, #80]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a13      	ldr	r2, [pc, #76]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ec2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ec6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec8:	f7fd fc2e 	bl	8002728 <HAL_GetTick>
 8004ecc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ece:	e009      	b.n	8004ee4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ed0:	f7fd fc2a 	bl	8002728 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d902      	bls.n	8004ee4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	73fb      	strb	r3, [r7, #15]
          break;
 8004ee2:	e005      	b.n	8004ef0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ee4:	4b0a      	ldr	r3, [pc, #40]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d0ef      	beq.n	8004ed0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d106      	bne.n	8004f04 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ef6:	4b06      	ldr	r3, [pc, #24]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ef8:	691a      	ldr	r2, [r3, #16]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	4904      	ldr	r1, [pc, #16]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	40021000 	.word	0x40021000

08004f14 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f22:	4b6a      	ldr	r3, [pc, #424]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	f003 0303 	and.w	r3, r3, #3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d018      	beq.n	8004f60 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004f2e:	4b67      	ldr	r3, [pc, #412]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f003 0203 	and.w	r2, r3, #3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d10d      	bne.n	8004f5a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
       ||
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d009      	beq.n	8004f5a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004f46:	4b61      	ldr	r3, [pc, #388]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	091b      	lsrs	r3, r3, #4
 8004f4c:	f003 0307 	and.w	r3, r3, #7
 8004f50:	1c5a      	adds	r2, r3, #1
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
       ||
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d047      	beq.n	8004fea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	73fb      	strb	r3, [r7, #15]
 8004f5e:	e044      	b.n	8004fea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b03      	cmp	r3, #3
 8004f66:	d018      	beq.n	8004f9a <RCCEx_PLLSAI2_Config+0x86>
 8004f68:	2b03      	cmp	r3, #3
 8004f6a:	d825      	bhi.n	8004fb8 <RCCEx_PLLSAI2_Config+0xa4>
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d002      	beq.n	8004f76 <RCCEx_PLLSAI2_Config+0x62>
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d009      	beq.n	8004f88 <RCCEx_PLLSAI2_Config+0x74>
 8004f74:	e020      	b.n	8004fb8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f76:	4b55      	ldr	r3, [pc, #340]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d11d      	bne.n	8004fbe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f86:	e01a      	b.n	8004fbe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f88:	4b50      	ldr	r3, [pc, #320]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d116      	bne.n	8004fc2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f98:	e013      	b.n	8004fc2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f9a:	4b4c      	ldr	r3, [pc, #304]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10f      	bne.n	8004fc6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004fa6:	4b49      	ldr	r3, [pc, #292]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d109      	bne.n	8004fc6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004fb6:	e006      	b.n	8004fc6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	73fb      	strb	r3, [r7, #15]
      break;
 8004fbc:	e004      	b.n	8004fc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004fbe:	bf00      	nop
 8004fc0:	e002      	b.n	8004fc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004fc2:	bf00      	nop
 8004fc4:	e000      	b.n	8004fc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004fc6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004fc8:	7bfb      	ldrb	r3, [r7, #15]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10d      	bne.n	8004fea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004fce:	4b3f      	ldr	r3, [pc, #252]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6819      	ldr	r1, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	011b      	lsls	r3, r3, #4
 8004fe2:	430b      	orrs	r3, r1
 8004fe4:	4939      	ldr	r1, [pc, #228]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004fea:	7bfb      	ldrb	r3, [r7, #15]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d167      	bne.n	80050c0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ff0:	4b36      	ldr	r3, [pc, #216]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a35      	ldr	r2, [pc, #212]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ff6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ffa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ffc:	f7fd fb94 	bl	8002728 <HAL_GetTick>
 8005000:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005002:	e009      	b.n	8005018 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005004:	f7fd fb90 	bl	8002728 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d902      	bls.n	8005018 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	73fb      	strb	r3, [r7, #15]
        break;
 8005016:	e005      	b.n	8005024 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005018:	4b2c      	ldr	r3, [pc, #176]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1ef      	bne.n	8005004 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005024:	7bfb      	ldrb	r3, [r7, #15]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d14a      	bne.n	80050c0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d111      	bne.n	8005054 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005030:	4b26      	ldr	r3, [pc, #152]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	6892      	ldr	r2, [r2, #8]
 8005040:	0211      	lsls	r1, r2, #8
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	68d2      	ldr	r2, [r2, #12]
 8005046:	0912      	lsrs	r2, r2, #4
 8005048:	0452      	lsls	r2, r2, #17
 800504a:	430a      	orrs	r2, r1
 800504c:	491f      	ldr	r1, [pc, #124]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800504e:	4313      	orrs	r3, r2
 8005050:	614b      	str	r3, [r1, #20]
 8005052:	e011      	b.n	8005078 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005054:	4b1d      	ldr	r3, [pc, #116]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800505c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6892      	ldr	r2, [r2, #8]
 8005064:	0211      	lsls	r1, r2, #8
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6912      	ldr	r2, [r2, #16]
 800506a:	0852      	lsrs	r2, r2, #1
 800506c:	3a01      	subs	r2, #1
 800506e:	0652      	lsls	r2, r2, #25
 8005070:	430a      	orrs	r2, r1
 8005072:	4916      	ldr	r1, [pc, #88]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005074:	4313      	orrs	r3, r2
 8005076:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005078:	4b14      	ldr	r3, [pc, #80]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a13      	ldr	r2, [pc, #76]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800507e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005082:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005084:	f7fd fb50 	bl	8002728 <HAL_GetTick>
 8005088:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800508a:	e009      	b.n	80050a0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800508c:	f7fd fb4c 	bl	8002728 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d902      	bls.n	80050a0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	73fb      	strb	r3, [r7, #15]
          break;
 800509e:	e005      	b.n	80050ac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80050a0:	4b0a      	ldr	r3, [pc, #40]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d0ef      	beq.n	800508c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80050ac:	7bfb      	ldrb	r3, [r7, #15]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d106      	bne.n	80050c0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80050b2:	4b06      	ldr	r3, [pc, #24]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80050b4:	695a      	ldr	r2, [r3, #20]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	4904      	ldr	r1, [pc, #16]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80050c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	40021000 	.word	0x40021000

080050d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e049      	b.n	8005176 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d106      	bne.n	80050fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7fd f85a 	bl	80021b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3304      	adds	r3, #4
 800510c:	4619      	mov	r1, r3
 800510e:	4610      	mov	r0, r2
 8005110:	f000 fe5a 	bl	8005dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
	...

08005180 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b01      	cmp	r3, #1
 8005192:	d001      	beq.n	8005198 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e047      	b.n	8005228 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a23      	ldr	r2, [pc, #140]	; (8005234 <HAL_TIM_Base_Start+0xb4>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d01d      	beq.n	80051e6 <HAL_TIM_Base_Start+0x66>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b2:	d018      	beq.n	80051e6 <HAL_TIM_Base_Start+0x66>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a1f      	ldr	r2, [pc, #124]	; (8005238 <HAL_TIM_Base_Start+0xb8>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d013      	beq.n	80051e6 <HAL_TIM_Base_Start+0x66>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a1e      	ldr	r2, [pc, #120]	; (800523c <HAL_TIM_Base_Start+0xbc>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d00e      	beq.n	80051e6 <HAL_TIM_Base_Start+0x66>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a1c      	ldr	r2, [pc, #112]	; (8005240 <HAL_TIM_Base_Start+0xc0>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d009      	beq.n	80051e6 <HAL_TIM_Base_Start+0x66>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a1b      	ldr	r2, [pc, #108]	; (8005244 <HAL_TIM_Base_Start+0xc4>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d004      	beq.n	80051e6 <HAL_TIM_Base_Start+0x66>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a19      	ldr	r2, [pc, #100]	; (8005248 <HAL_TIM_Base_Start+0xc8>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d115      	bne.n	8005212 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	4b17      	ldr	r3, [pc, #92]	; (800524c <HAL_TIM_Base_Start+0xcc>)
 80051ee:	4013      	ands	r3, r2
 80051f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2b06      	cmp	r3, #6
 80051f6:	d015      	beq.n	8005224 <HAL_TIM_Base_Start+0xa4>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051fe:	d011      	beq.n	8005224 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f042 0201 	orr.w	r2, r2, #1
 800520e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005210:	e008      	b.n	8005224 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f042 0201 	orr.w	r2, r2, #1
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	e000      	b.n	8005226 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005224:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	40012c00 	.word	0x40012c00
 8005238:	40000400 	.word	0x40000400
 800523c:	40000800 	.word	0x40000800
 8005240:	40000c00 	.word	0x40000c00
 8005244:	40013400 	.word	0x40013400
 8005248:	40014000 	.word	0x40014000
 800524c:	00010007 	.word	0x00010007

08005250 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6a1a      	ldr	r2, [r3, #32]
 800525e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005262:	4013      	ands	r3, r2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10f      	bne.n	8005288 <HAL_TIM_Base_Stop+0x38>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6a1a      	ldr	r2, [r3, #32]
 800526e:	f240 4344 	movw	r3, #1092	; 0x444
 8005272:	4013      	ands	r3, r2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d107      	bne.n	8005288 <HAL_TIM_Base_Stop+0x38>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f022 0201 	bic.w	r2, r2, #1
 8005286:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	370c      	adds	r7, #12
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
	...

080052a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d001      	beq.n	80052b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e04f      	b.n	8005358 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68da      	ldr	r2, [r3, #12]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f042 0201 	orr.w	r2, r2, #1
 80052ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a23      	ldr	r2, [pc, #140]	; (8005364 <HAL_TIM_Base_Start_IT+0xc4>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d01d      	beq.n	8005316 <HAL_TIM_Base_Start_IT+0x76>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052e2:	d018      	beq.n	8005316 <HAL_TIM_Base_Start_IT+0x76>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a1f      	ldr	r2, [pc, #124]	; (8005368 <HAL_TIM_Base_Start_IT+0xc8>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d013      	beq.n	8005316 <HAL_TIM_Base_Start_IT+0x76>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a1e      	ldr	r2, [pc, #120]	; (800536c <HAL_TIM_Base_Start_IT+0xcc>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d00e      	beq.n	8005316 <HAL_TIM_Base_Start_IT+0x76>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a1c      	ldr	r2, [pc, #112]	; (8005370 <HAL_TIM_Base_Start_IT+0xd0>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d009      	beq.n	8005316 <HAL_TIM_Base_Start_IT+0x76>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a1b      	ldr	r2, [pc, #108]	; (8005374 <HAL_TIM_Base_Start_IT+0xd4>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d004      	beq.n	8005316 <HAL_TIM_Base_Start_IT+0x76>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a19      	ldr	r2, [pc, #100]	; (8005378 <HAL_TIM_Base_Start_IT+0xd8>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d115      	bne.n	8005342 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	4b17      	ldr	r3, [pc, #92]	; (800537c <HAL_TIM_Base_Start_IT+0xdc>)
 800531e:	4013      	ands	r3, r2
 8005320:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2b06      	cmp	r3, #6
 8005326:	d015      	beq.n	8005354 <HAL_TIM_Base_Start_IT+0xb4>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800532e:	d011      	beq.n	8005354 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f042 0201 	orr.w	r2, r2, #1
 800533e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005340:	e008      	b.n	8005354 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f042 0201 	orr.w	r2, r2, #1
 8005350:	601a      	str	r2, [r3, #0]
 8005352:	e000      	b.n	8005356 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005354:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	40012c00 	.word	0x40012c00
 8005368:	40000400 	.word	0x40000400
 800536c:	40000800 	.word	0x40000800
 8005370:	40000c00 	.word	0x40000c00
 8005374:	40013400 	.word	0x40013400
 8005378:	40014000 	.word	0x40014000
 800537c:	00010007 	.word	0x00010007

08005380 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e049      	b.n	8005426 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d106      	bne.n	80053ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f841 	bl	800542e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	3304      	adds	r3, #4
 80053bc:	4619      	mov	r1, r3
 80053be:	4610      	mov	r0, r2
 80053c0:	f000 fd02 	bl	8005dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005436:	bf00      	nop
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
	...

08005444 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d109      	bne.n	8005468 <HAL_TIM_PWM_Start+0x24>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b01      	cmp	r3, #1
 800545e:	bf14      	ite	ne
 8005460:	2301      	movne	r3, #1
 8005462:	2300      	moveq	r3, #0
 8005464:	b2db      	uxtb	r3, r3
 8005466:	e03c      	b.n	80054e2 <HAL_TIM_PWM_Start+0x9e>
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	2b04      	cmp	r3, #4
 800546c:	d109      	bne.n	8005482 <HAL_TIM_PWM_Start+0x3e>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b01      	cmp	r3, #1
 8005478:	bf14      	ite	ne
 800547a:	2301      	movne	r3, #1
 800547c:	2300      	moveq	r3, #0
 800547e:	b2db      	uxtb	r3, r3
 8005480:	e02f      	b.n	80054e2 <HAL_TIM_PWM_Start+0x9e>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b08      	cmp	r3, #8
 8005486:	d109      	bne.n	800549c <HAL_TIM_PWM_Start+0x58>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b01      	cmp	r3, #1
 8005492:	bf14      	ite	ne
 8005494:	2301      	movne	r3, #1
 8005496:	2300      	moveq	r3, #0
 8005498:	b2db      	uxtb	r3, r3
 800549a:	e022      	b.n	80054e2 <HAL_TIM_PWM_Start+0x9e>
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	2b0c      	cmp	r3, #12
 80054a0:	d109      	bne.n	80054b6 <HAL_TIM_PWM_Start+0x72>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	bf14      	ite	ne
 80054ae:	2301      	movne	r3, #1
 80054b0:	2300      	moveq	r3, #0
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	e015      	b.n	80054e2 <HAL_TIM_PWM_Start+0x9e>
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2b10      	cmp	r3, #16
 80054ba:	d109      	bne.n	80054d0 <HAL_TIM_PWM_Start+0x8c>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	bf14      	ite	ne
 80054c8:	2301      	movne	r3, #1
 80054ca:	2300      	moveq	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	e008      	b.n	80054e2 <HAL_TIM_PWM_Start+0x9e>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b01      	cmp	r3, #1
 80054da:	bf14      	ite	ne
 80054dc:	2301      	movne	r3, #1
 80054de:	2300      	moveq	r3, #0
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e09c      	b.n	8005624 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d104      	bne.n	80054fa <HAL_TIM_PWM_Start+0xb6>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054f8:	e023      	b.n	8005542 <HAL_TIM_PWM_Start+0xfe>
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2b04      	cmp	r3, #4
 80054fe:	d104      	bne.n	800550a <HAL_TIM_PWM_Start+0xc6>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2202      	movs	r2, #2
 8005504:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005508:	e01b      	b.n	8005542 <HAL_TIM_PWM_Start+0xfe>
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	2b08      	cmp	r3, #8
 800550e:	d104      	bne.n	800551a <HAL_TIM_PWM_Start+0xd6>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005518:	e013      	b.n	8005542 <HAL_TIM_PWM_Start+0xfe>
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	2b0c      	cmp	r3, #12
 800551e:	d104      	bne.n	800552a <HAL_TIM_PWM_Start+0xe6>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2202      	movs	r2, #2
 8005524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005528:	e00b      	b.n	8005542 <HAL_TIM_PWM_Start+0xfe>
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b10      	cmp	r3, #16
 800552e:	d104      	bne.n	800553a <HAL_TIM_PWM_Start+0xf6>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005538:	e003      	b.n	8005542 <HAL_TIM_PWM_Start+0xfe>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2202      	movs	r2, #2
 800553e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2201      	movs	r2, #1
 8005548:	6839      	ldr	r1, [r7, #0]
 800554a:	4618      	mov	r0, r3
 800554c:	f001 f846 	bl	80065dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a35      	ldr	r2, [pc, #212]	; (800562c <HAL_TIM_PWM_Start+0x1e8>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d013      	beq.n	8005582 <HAL_TIM_PWM_Start+0x13e>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a34      	ldr	r2, [pc, #208]	; (8005630 <HAL_TIM_PWM_Start+0x1ec>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d00e      	beq.n	8005582 <HAL_TIM_PWM_Start+0x13e>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a32      	ldr	r2, [pc, #200]	; (8005634 <HAL_TIM_PWM_Start+0x1f0>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d009      	beq.n	8005582 <HAL_TIM_PWM_Start+0x13e>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a31      	ldr	r2, [pc, #196]	; (8005638 <HAL_TIM_PWM_Start+0x1f4>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d004      	beq.n	8005582 <HAL_TIM_PWM_Start+0x13e>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a2f      	ldr	r2, [pc, #188]	; (800563c <HAL_TIM_PWM_Start+0x1f8>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d101      	bne.n	8005586 <HAL_TIM_PWM_Start+0x142>
 8005582:	2301      	movs	r3, #1
 8005584:	e000      	b.n	8005588 <HAL_TIM_PWM_Start+0x144>
 8005586:	2300      	movs	r3, #0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d007      	beq.n	800559c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800559a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a22      	ldr	r2, [pc, #136]	; (800562c <HAL_TIM_PWM_Start+0x1e8>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d01d      	beq.n	80055e2 <HAL_TIM_PWM_Start+0x19e>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ae:	d018      	beq.n	80055e2 <HAL_TIM_PWM_Start+0x19e>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a22      	ldr	r2, [pc, #136]	; (8005640 <HAL_TIM_PWM_Start+0x1fc>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d013      	beq.n	80055e2 <HAL_TIM_PWM_Start+0x19e>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a21      	ldr	r2, [pc, #132]	; (8005644 <HAL_TIM_PWM_Start+0x200>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d00e      	beq.n	80055e2 <HAL_TIM_PWM_Start+0x19e>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a1f      	ldr	r2, [pc, #124]	; (8005648 <HAL_TIM_PWM_Start+0x204>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d009      	beq.n	80055e2 <HAL_TIM_PWM_Start+0x19e>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a17      	ldr	r2, [pc, #92]	; (8005630 <HAL_TIM_PWM_Start+0x1ec>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d004      	beq.n	80055e2 <HAL_TIM_PWM_Start+0x19e>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a15      	ldr	r2, [pc, #84]	; (8005634 <HAL_TIM_PWM_Start+0x1f0>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d115      	bne.n	800560e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	4b18      	ldr	r3, [pc, #96]	; (800564c <HAL_TIM_PWM_Start+0x208>)
 80055ea:	4013      	ands	r3, r2
 80055ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2b06      	cmp	r3, #6
 80055f2:	d015      	beq.n	8005620 <HAL_TIM_PWM_Start+0x1dc>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055fa:	d011      	beq.n	8005620 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f042 0201 	orr.w	r2, r2, #1
 800560a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800560c:	e008      	b.n	8005620 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f042 0201 	orr.w	r2, r2, #1
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	e000      	b.n	8005622 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005620:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	40012c00 	.word	0x40012c00
 8005630:	40013400 	.word	0x40013400
 8005634:	40014000 	.word	0x40014000
 8005638:	40014400 	.word	0x40014400
 800563c:	40014800 	.word	0x40014800
 8005640:	40000400 	.word	0x40000400
 8005644:	40000800 	.word	0x40000800
 8005648:	40000c00 	.word	0x40000c00
 800564c:	00010007 	.word	0x00010007

08005650 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2200      	movs	r2, #0
 8005660:	6839      	ldr	r1, [r7, #0]
 8005662:	4618      	mov	r0, r3
 8005664:	f000 ffba 	bl	80065dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a3e      	ldr	r2, [pc, #248]	; (8005768 <HAL_TIM_PWM_Stop+0x118>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d013      	beq.n	800569a <HAL_TIM_PWM_Stop+0x4a>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a3d      	ldr	r2, [pc, #244]	; (800576c <HAL_TIM_PWM_Stop+0x11c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d00e      	beq.n	800569a <HAL_TIM_PWM_Stop+0x4a>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a3b      	ldr	r2, [pc, #236]	; (8005770 <HAL_TIM_PWM_Stop+0x120>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d009      	beq.n	800569a <HAL_TIM_PWM_Stop+0x4a>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a3a      	ldr	r2, [pc, #232]	; (8005774 <HAL_TIM_PWM_Stop+0x124>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d004      	beq.n	800569a <HAL_TIM_PWM_Stop+0x4a>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a38      	ldr	r2, [pc, #224]	; (8005778 <HAL_TIM_PWM_Stop+0x128>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d101      	bne.n	800569e <HAL_TIM_PWM_Stop+0x4e>
 800569a:	2301      	movs	r3, #1
 800569c:	e000      	b.n	80056a0 <HAL_TIM_PWM_Stop+0x50>
 800569e:	2300      	movs	r3, #0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d017      	beq.n	80056d4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6a1a      	ldr	r2, [r3, #32]
 80056aa:	f241 1311 	movw	r3, #4369	; 0x1111
 80056ae:	4013      	ands	r3, r2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10f      	bne.n	80056d4 <HAL_TIM_PWM_Stop+0x84>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6a1a      	ldr	r2, [r3, #32]
 80056ba:	f240 4344 	movw	r3, #1092	; 0x444
 80056be:	4013      	ands	r3, r2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d107      	bne.n	80056d4 <HAL_TIM_PWM_Stop+0x84>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056d2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6a1a      	ldr	r2, [r3, #32]
 80056da:	f241 1311 	movw	r3, #4369	; 0x1111
 80056de:	4013      	ands	r3, r2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10f      	bne.n	8005704 <HAL_TIM_PWM_Stop+0xb4>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6a1a      	ldr	r2, [r3, #32]
 80056ea:	f240 4344 	movw	r3, #1092	; 0x444
 80056ee:	4013      	ands	r3, r2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d107      	bne.n	8005704 <HAL_TIM_PWM_Stop+0xb4>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 0201 	bic.w	r2, r2, #1
 8005702:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d104      	bne.n	8005714 <HAL_TIM_PWM_Stop+0xc4>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005712:	e023      	b.n	800575c <HAL_TIM_PWM_Stop+0x10c>
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	2b04      	cmp	r3, #4
 8005718:	d104      	bne.n	8005724 <HAL_TIM_PWM_Stop+0xd4>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005722:	e01b      	b.n	800575c <HAL_TIM_PWM_Stop+0x10c>
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	2b08      	cmp	r3, #8
 8005728:	d104      	bne.n	8005734 <HAL_TIM_PWM_Stop+0xe4>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005732:	e013      	b.n	800575c <HAL_TIM_PWM_Stop+0x10c>
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	2b0c      	cmp	r3, #12
 8005738:	d104      	bne.n	8005744 <HAL_TIM_PWM_Stop+0xf4>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005742:	e00b      	b.n	800575c <HAL_TIM_PWM_Stop+0x10c>
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	2b10      	cmp	r3, #16
 8005748:	d104      	bne.n	8005754 <HAL_TIM_PWM_Stop+0x104>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005752:	e003      	b.n	800575c <HAL_TIM_PWM_Stop+0x10c>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	40012c00 	.word	0x40012c00
 800576c:	40013400 	.word	0x40013400
 8005770:	40014000 	.word	0x40014000
 8005774:	40014400 	.word	0x40014400
 8005778:	40014800 	.word	0x40014800

0800577c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b02      	cmp	r3, #2
 8005790:	d122      	bne.n	80057d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	2b02      	cmp	r3, #2
 800579e:	d11b      	bne.n	80057d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f06f 0202 	mvn.w	r2, #2
 80057a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	f003 0303 	and.w	r3, r3, #3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 fae3 	bl	8005d8a <HAL_TIM_IC_CaptureCallback>
 80057c4:	e005      	b.n	80057d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fad5 	bl	8005d76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 fae6 	bl	8005d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f003 0304 	and.w	r3, r3, #4
 80057e2:	2b04      	cmp	r3, #4
 80057e4:	d122      	bne.n	800582c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f003 0304 	and.w	r3, r3, #4
 80057f0:	2b04      	cmp	r3, #4
 80057f2:	d11b      	bne.n	800582c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f06f 0204 	mvn.w	r2, #4
 80057fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2202      	movs	r2, #2
 8005802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800580e:	2b00      	cmp	r3, #0
 8005810:	d003      	beq.n	800581a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fab9 	bl	8005d8a <HAL_TIM_IC_CaptureCallback>
 8005818:	e005      	b.n	8005826 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 faab 	bl	8005d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 fabc 	bl	8005d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	f003 0308 	and.w	r3, r3, #8
 8005836:	2b08      	cmp	r3, #8
 8005838:	d122      	bne.n	8005880 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f003 0308 	and.w	r3, r3, #8
 8005844:	2b08      	cmp	r3, #8
 8005846:	d11b      	bne.n	8005880 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f06f 0208 	mvn.w	r2, #8
 8005850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2204      	movs	r2, #4
 8005856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	f003 0303 	and.w	r3, r3, #3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 fa8f 	bl	8005d8a <HAL_TIM_IC_CaptureCallback>
 800586c:	e005      	b.n	800587a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 fa81 	bl	8005d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 fa92 	bl	8005d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	f003 0310 	and.w	r3, r3, #16
 800588a:	2b10      	cmp	r3, #16
 800588c:	d122      	bne.n	80058d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	f003 0310 	and.w	r3, r3, #16
 8005898:	2b10      	cmp	r3, #16
 800589a:	d11b      	bne.n	80058d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f06f 0210 	mvn.w	r2, #16
 80058a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2208      	movs	r2, #8
 80058aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 fa65 	bl	8005d8a <HAL_TIM_IC_CaptureCallback>
 80058c0:	e005      	b.n	80058ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 fa57 	bl	8005d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 fa68 	bl	8005d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d10e      	bne.n	8005900 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d107      	bne.n	8005900 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f06f 0201 	mvn.w	r2, #1
 80058f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7fc fa8c 	bl	8001e18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800590a:	2b80      	cmp	r3, #128	; 0x80
 800590c:	d10e      	bne.n	800592c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005918:	2b80      	cmp	r3, #128	; 0x80
 800591a:	d107      	bne.n	800592c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 ff10 	bl	800674c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800593a:	d10e      	bne.n	800595a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005946:	2b80      	cmp	r3, #128	; 0x80
 8005948:	d107      	bne.n	800595a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 ff03 	bl	8006760 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005964:	2b40      	cmp	r3, #64	; 0x40
 8005966:	d10e      	bne.n	8005986 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005972:	2b40      	cmp	r3, #64	; 0x40
 8005974:	d107      	bne.n	8005986 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800597e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 fa16 	bl	8005db2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	f003 0320 	and.w	r3, r3, #32
 8005990:	2b20      	cmp	r3, #32
 8005992:	d10e      	bne.n	80059b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	f003 0320 	and.w	r3, r3, #32
 800599e:	2b20      	cmp	r3, #32
 80059a0:	d107      	bne.n	80059b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f06f 0220 	mvn.w	r2, #32
 80059aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 fec3 	bl	8006738 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059b2:	bf00      	nop
 80059b4:	3708      	adds	r7, #8
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
	...

080059bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059c8:	2300      	movs	r3, #0
 80059ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d101      	bne.n	80059da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059d6:	2302      	movs	r3, #2
 80059d8:	e0ff      	b.n	8005bda <HAL_TIM_PWM_ConfigChannel+0x21e>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b14      	cmp	r3, #20
 80059e6:	f200 80f0 	bhi.w	8005bca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80059ea:	a201      	add	r2, pc, #4	; (adr r2, 80059f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f0:	08005a45 	.word	0x08005a45
 80059f4:	08005bcb 	.word	0x08005bcb
 80059f8:	08005bcb 	.word	0x08005bcb
 80059fc:	08005bcb 	.word	0x08005bcb
 8005a00:	08005a85 	.word	0x08005a85
 8005a04:	08005bcb 	.word	0x08005bcb
 8005a08:	08005bcb 	.word	0x08005bcb
 8005a0c:	08005bcb 	.word	0x08005bcb
 8005a10:	08005ac7 	.word	0x08005ac7
 8005a14:	08005bcb 	.word	0x08005bcb
 8005a18:	08005bcb 	.word	0x08005bcb
 8005a1c:	08005bcb 	.word	0x08005bcb
 8005a20:	08005b07 	.word	0x08005b07
 8005a24:	08005bcb 	.word	0x08005bcb
 8005a28:	08005bcb 	.word	0x08005bcb
 8005a2c:	08005bcb 	.word	0x08005bcb
 8005a30:	08005b49 	.word	0x08005b49
 8005a34:	08005bcb 	.word	0x08005bcb
 8005a38:	08005bcb 	.word	0x08005bcb
 8005a3c:	08005bcb 	.word	0x08005bcb
 8005a40:	08005b89 	.word	0x08005b89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68b9      	ldr	r1, [r7, #8]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f000 fa56 	bl	8005efc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	699a      	ldr	r2, [r3, #24]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f042 0208 	orr.w	r2, r2, #8
 8005a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	699a      	ldr	r2, [r3, #24]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 0204 	bic.w	r2, r2, #4
 8005a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6999      	ldr	r1, [r3, #24]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	691a      	ldr	r2, [r3, #16]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	619a      	str	r2, [r3, #24]
      break;
 8005a82:	e0a5      	b.n	8005bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68b9      	ldr	r1, [r7, #8]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 fac6 	bl	800601c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	699a      	ldr	r2, [r3, #24]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	699a      	ldr	r2, [r3, #24]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6999      	ldr	r1, [r3, #24]
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	021a      	lsls	r2, r3, #8
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	619a      	str	r2, [r3, #24]
      break;
 8005ac4:	e084      	b.n	8005bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68b9      	ldr	r1, [r7, #8]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 fb2f 	bl	8006130 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	69da      	ldr	r2, [r3, #28]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f042 0208 	orr.w	r2, r2, #8
 8005ae0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	69da      	ldr	r2, [r3, #28]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f022 0204 	bic.w	r2, r2, #4
 8005af0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	69d9      	ldr	r1, [r3, #28]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	691a      	ldr	r2, [r3, #16]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	430a      	orrs	r2, r1
 8005b02:	61da      	str	r2, [r3, #28]
      break;
 8005b04:	e064      	b.n	8005bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68b9      	ldr	r1, [r7, #8]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 fb97 	bl	8006240 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	69da      	ldr	r2, [r3, #28]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	69da      	ldr	r2, [r3, #28]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	69d9      	ldr	r1, [r3, #28]
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	021a      	lsls	r2, r3, #8
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	430a      	orrs	r2, r1
 8005b44:	61da      	str	r2, [r3, #28]
      break;
 8005b46:	e043      	b.n	8005bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68b9      	ldr	r1, [r7, #8]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 fbe0 	bl	8006314 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f042 0208 	orr.w	r2, r2, #8
 8005b62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f022 0204 	bic.w	r2, r2, #4
 8005b72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	691a      	ldr	r2, [r3, #16]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	430a      	orrs	r2, r1
 8005b84:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005b86:	e023      	b.n	8005bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68b9      	ldr	r1, [r7, #8]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 fc24 	bl	80063dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ba2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bb2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	021a      	lsls	r2, r3, #8
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005bc8:	e002      	b.n	8005bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	75fb      	strb	r3, [r7, #23]
      break;
 8005bce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3718      	adds	r7, #24
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop

08005be4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d101      	bne.n	8005c00 <HAL_TIM_ConfigClockSource+0x1c>
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	e0b6      	b.n	8005d6e <HAL_TIM_ConfigClockSource+0x18a>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c3c:	d03e      	beq.n	8005cbc <HAL_TIM_ConfigClockSource+0xd8>
 8005c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c42:	f200 8087 	bhi.w	8005d54 <HAL_TIM_ConfigClockSource+0x170>
 8005c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c4a:	f000 8086 	beq.w	8005d5a <HAL_TIM_ConfigClockSource+0x176>
 8005c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c52:	d87f      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x170>
 8005c54:	2b70      	cmp	r3, #112	; 0x70
 8005c56:	d01a      	beq.n	8005c8e <HAL_TIM_ConfigClockSource+0xaa>
 8005c58:	2b70      	cmp	r3, #112	; 0x70
 8005c5a:	d87b      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x170>
 8005c5c:	2b60      	cmp	r3, #96	; 0x60
 8005c5e:	d050      	beq.n	8005d02 <HAL_TIM_ConfigClockSource+0x11e>
 8005c60:	2b60      	cmp	r3, #96	; 0x60
 8005c62:	d877      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x170>
 8005c64:	2b50      	cmp	r3, #80	; 0x50
 8005c66:	d03c      	beq.n	8005ce2 <HAL_TIM_ConfigClockSource+0xfe>
 8005c68:	2b50      	cmp	r3, #80	; 0x50
 8005c6a:	d873      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x170>
 8005c6c:	2b40      	cmp	r3, #64	; 0x40
 8005c6e:	d058      	beq.n	8005d22 <HAL_TIM_ConfigClockSource+0x13e>
 8005c70:	2b40      	cmp	r3, #64	; 0x40
 8005c72:	d86f      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x170>
 8005c74:	2b30      	cmp	r3, #48	; 0x30
 8005c76:	d064      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0x15e>
 8005c78:	2b30      	cmp	r3, #48	; 0x30
 8005c7a:	d86b      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x170>
 8005c7c:	2b20      	cmp	r3, #32
 8005c7e:	d060      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0x15e>
 8005c80:	2b20      	cmp	r3, #32
 8005c82:	d867      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x170>
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d05c      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0x15e>
 8005c88:	2b10      	cmp	r3, #16
 8005c8a:	d05a      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0x15e>
 8005c8c:	e062      	b.n	8005d54 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6818      	ldr	r0, [r3, #0]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	6899      	ldr	r1, [r3, #8]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f000 fc7d 	bl	800659c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	609a      	str	r2, [r3, #8]
      break;
 8005cba:	e04f      	b.n	8005d5c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6818      	ldr	r0, [r3, #0]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	6899      	ldr	r1, [r3, #8]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	685a      	ldr	r2, [r3, #4]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	f000 fc66 	bl	800659c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689a      	ldr	r2, [r3, #8]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cde:	609a      	str	r2, [r3, #8]
      break;
 8005ce0:	e03c      	b.n	8005d5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6818      	ldr	r0, [r3, #0]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	6859      	ldr	r1, [r3, #4]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	f000 fbda 	bl	80064a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2150      	movs	r1, #80	; 0x50
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 fc33 	bl	8006566 <TIM_ITRx_SetConfig>
      break;
 8005d00:	e02c      	b.n	8005d5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6818      	ldr	r0, [r3, #0]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	6859      	ldr	r1, [r3, #4]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	f000 fbf9 	bl	8006506 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2160      	movs	r1, #96	; 0x60
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f000 fc23 	bl	8006566 <TIM_ITRx_SetConfig>
      break;
 8005d20:	e01c      	b.n	8005d5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6818      	ldr	r0, [r3, #0]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	6859      	ldr	r1, [r3, #4]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	f000 fbba 	bl	80064a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2140      	movs	r1, #64	; 0x40
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 fc13 	bl	8006566 <TIM_ITRx_SetConfig>
      break;
 8005d40:	e00c      	b.n	8005d5c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	4610      	mov	r0, r2
 8005d4e:	f000 fc0a 	bl	8006566 <TIM_ITRx_SetConfig>
      break;
 8005d52:	e003      	b.n	8005d5c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	73fb      	strb	r3, [r7, #15]
      break;
 8005d58:	e000      	b.n	8005d5c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005d5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b083      	sub	sp, #12
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d7e:	bf00      	nop
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d92:	bf00      	nop
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b083      	sub	sp, #12
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005da6:	bf00      	nop
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dba:	bf00      	nop
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
	...

08005dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a40      	ldr	r2, [pc, #256]	; (8005edc <TIM_Base_SetConfig+0x114>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d013      	beq.n	8005e08 <TIM_Base_SetConfig+0x40>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de6:	d00f      	beq.n	8005e08 <TIM_Base_SetConfig+0x40>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a3d      	ldr	r2, [pc, #244]	; (8005ee0 <TIM_Base_SetConfig+0x118>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d00b      	beq.n	8005e08 <TIM_Base_SetConfig+0x40>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a3c      	ldr	r2, [pc, #240]	; (8005ee4 <TIM_Base_SetConfig+0x11c>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d007      	beq.n	8005e08 <TIM_Base_SetConfig+0x40>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a3b      	ldr	r2, [pc, #236]	; (8005ee8 <TIM_Base_SetConfig+0x120>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d003      	beq.n	8005e08 <TIM_Base_SetConfig+0x40>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a3a      	ldr	r2, [pc, #232]	; (8005eec <TIM_Base_SetConfig+0x124>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d108      	bne.n	8005e1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a2f      	ldr	r2, [pc, #188]	; (8005edc <TIM_Base_SetConfig+0x114>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d01f      	beq.n	8005e62 <TIM_Base_SetConfig+0x9a>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e28:	d01b      	beq.n	8005e62 <TIM_Base_SetConfig+0x9a>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a2c      	ldr	r2, [pc, #176]	; (8005ee0 <TIM_Base_SetConfig+0x118>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d017      	beq.n	8005e62 <TIM_Base_SetConfig+0x9a>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a2b      	ldr	r2, [pc, #172]	; (8005ee4 <TIM_Base_SetConfig+0x11c>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d013      	beq.n	8005e62 <TIM_Base_SetConfig+0x9a>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a2a      	ldr	r2, [pc, #168]	; (8005ee8 <TIM_Base_SetConfig+0x120>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d00f      	beq.n	8005e62 <TIM_Base_SetConfig+0x9a>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a29      	ldr	r2, [pc, #164]	; (8005eec <TIM_Base_SetConfig+0x124>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d00b      	beq.n	8005e62 <TIM_Base_SetConfig+0x9a>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a28      	ldr	r2, [pc, #160]	; (8005ef0 <TIM_Base_SetConfig+0x128>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d007      	beq.n	8005e62 <TIM_Base_SetConfig+0x9a>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a27      	ldr	r2, [pc, #156]	; (8005ef4 <TIM_Base_SetConfig+0x12c>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d003      	beq.n	8005e62 <TIM_Base_SetConfig+0x9a>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a26      	ldr	r2, [pc, #152]	; (8005ef8 <TIM_Base_SetConfig+0x130>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d108      	bne.n	8005e74 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	689a      	ldr	r2, [r3, #8]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a10      	ldr	r2, [pc, #64]	; (8005edc <TIM_Base_SetConfig+0x114>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d00f      	beq.n	8005ec0 <TIM_Base_SetConfig+0xf8>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a12      	ldr	r2, [pc, #72]	; (8005eec <TIM_Base_SetConfig+0x124>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d00b      	beq.n	8005ec0 <TIM_Base_SetConfig+0xf8>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a11      	ldr	r2, [pc, #68]	; (8005ef0 <TIM_Base_SetConfig+0x128>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d007      	beq.n	8005ec0 <TIM_Base_SetConfig+0xf8>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a10      	ldr	r2, [pc, #64]	; (8005ef4 <TIM_Base_SetConfig+0x12c>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d003      	beq.n	8005ec0 <TIM_Base_SetConfig+0xf8>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a0f      	ldr	r2, [pc, #60]	; (8005ef8 <TIM_Base_SetConfig+0x130>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d103      	bne.n	8005ec8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	691a      	ldr	r2, [r3, #16]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	615a      	str	r2, [r3, #20]
}
 8005ece:	bf00      	nop
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	40012c00 	.word	0x40012c00
 8005ee0:	40000400 	.word	0x40000400
 8005ee4:	40000800 	.word	0x40000800
 8005ee8:	40000c00 	.word	0x40000c00
 8005eec:	40013400 	.word	0x40013400
 8005ef0:	40014000 	.word	0x40014000
 8005ef4:	40014400 	.word	0x40014400
 8005ef8:	40014800 	.word	0x40014800

08005efc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b087      	sub	sp, #28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	f023 0201 	bic.w	r2, r3, #1
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f023 0303 	bic.w	r3, r3, #3
 8005f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f023 0302 	bic.w	r3, r3, #2
 8005f48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a2c      	ldr	r2, [pc, #176]	; (8006008 <TIM_OC1_SetConfig+0x10c>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d00f      	beq.n	8005f7c <TIM_OC1_SetConfig+0x80>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a2b      	ldr	r2, [pc, #172]	; (800600c <TIM_OC1_SetConfig+0x110>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d00b      	beq.n	8005f7c <TIM_OC1_SetConfig+0x80>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a2a      	ldr	r2, [pc, #168]	; (8006010 <TIM_OC1_SetConfig+0x114>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d007      	beq.n	8005f7c <TIM_OC1_SetConfig+0x80>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a29      	ldr	r2, [pc, #164]	; (8006014 <TIM_OC1_SetConfig+0x118>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d003      	beq.n	8005f7c <TIM_OC1_SetConfig+0x80>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a28      	ldr	r2, [pc, #160]	; (8006018 <TIM_OC1_SetConfig+0x11c>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d10c      	bne.n	8005f96 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f023 0308 	bic.w	r3, r3, #8
 8005f82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	697a      	ldr	r2, [r7, #20]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f023 0304 	bic.w	r3, r3, #4
 8005f94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a1b      	ldr	r2, [pc, #108]	; (8006008 <TIM_OC1_SetConfig+0x10c>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d00f      	beq.n	8005fbe <TIM_OC1_SetConfig+0xc2>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a1a      	ldr	r2, [pc, #104]	; (800600c <TIM_OC1_SetConfig+0x110>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d00b      	beq.n	8005fbe <TIM_OC1_SetConfig+0xc2>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a19      	ldr	r2, [pc, #100]	; (8006010 <TIM_OC1_SetConfig+0x114>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d007      	beq.n	8005fbe <TIM_OC1_SetConfig+0xc2>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a18      	ldr	r2, [pc, #96]	; (8006014 <TIM_OC1_SetConfig+0x118>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d003      	beq.n	8005fbe <TIM_OC1_SetConfig+0xc2>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a17      	ldr	r2, [pc, #92]	; (8006018 <TIM_OC1_SetConfig+0x11c>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d111      	bne.n	8005fe2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	621a      	str	r2, [r3, #32]
}
 8005ffc:	bf00      	nop
 8005ffe:	371c      	adds	r7, #28
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	40012c00 	.word	0x40012c00
 800600c:	40013400 	.word	0x40013400
 8006010:	40014000 	.word	0x40014000
 8006014:	40014400 	.word	0x40014400
 8006018:	40014800 	.word	0x40014800

0800601c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800601c:	b480      	push	{r7}
 800601e:	b087      	sub	sp, #28
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	f023 0210 	bic.w	r2, r3, #16
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800604a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800604e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	021b      	lsls	r3, r3, #8
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	4313      	orrs	r3, r2
 8006062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	f023 0320 	bic.w	r3, r3, #32
 800606a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	011b      	lsls	r3, r3, #4
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	4313      	orrs	r3, r2
 8006076:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a28      	ldr	r2, [pc, #160]	; (800611c <TIM_OC2_SetConfig+0x100>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d003      	beq.n	8006088 <TIM_OC2_SetConfig+0x6c>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a27      	ldr	r2, [pc, #156]	; (8006120 <TIM_OC2_SetConfig+0x104>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d10d      	bne.n	80060a4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800608e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	011b      	lsls	r3, r3, #4
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	4313      	orrs	r3, r2
 800609a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a1d      	ldr	r2, [pc, #116]	; (800611c <TIM_OC2_SetConfig+0x100>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d00f      	beq.n	80060cc <TIM_OC2_SetConfig+0xb0>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a1c      	ldr	r2, [pc, #112]	; (8006120 <TIM_OC2_SetConfig+0x104>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d00b      	beq.n	80060cc <TIM_OC2_SetConfig+0xb0>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a1b      	ldr	r2, [pc, #108]	; (8006124 <TIM_OC2_SetConfig+0x108>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d007      	beq.n	80060cc <TIM_OC2_SetConfig+0xb0>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a1a      	ldr	r2, [pc, #104]	; (8006128 <TIM_OC2_SetConfig+0x10c>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d003      	beq.n	80060cc <TIM_OC2_SetConfig+0xb0>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a19      	ldr	r2, [pc, #100]	; (800612c <TIM_OC2_SetConfig+0x110>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d113      	bne.n	80060f4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	693a      	ldr	r2, [r7, #16]
 80060f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	685a      	ldr	r2, [r3, #4]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	621a      	str	r2, [r3, #32]
}
 800610e:	bf00      	nop
 8006110:	371c      	adds	r7, #28
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	40012c00 	.word	0x40012c00
 8006120:	40013400 	.word	0x40013400
 8006124:	40014000 	.word	0x40014000
 8006128:	40014400 	.word	0x40014400
 800612c:	40014800 	.word	0x40014800

08006130 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006130:	b480      	push	{r7}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	69db      	ldr	r3, [r3, #28]
 8006156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800615e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f023 0303 	bic.w	r3, r3, #3
 800616a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	4313      	orrs	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800617c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	021b      	lsls	r3, r3, #8
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	4313      	orrs	r3, r2
 8006188:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a27      	ldr	r2, [pc, #156]	; (800622c <TIM_OC3_SetConfig+0xfc>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d003      	beq.n	800619a <TIM_OC3_SetConfig+0x6a>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a26      	ldr	r2, [pc, #152]	; (8006230 <TIM_OC3_SetConfig+0x100>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d10d      	bne.n	80061b6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	021b      	lsls	r3, r3, #8
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a1c      	ldr	r2, [pc, #112]	; (800622c <TIM_OC3_SetConfig+0xfc>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d00f      	beq.n	80061de <TIM_OC3_SetConfig+0xae>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a1b      	ldr	r2, [pc, #108]	; (8006230 <TIM_OC3_SetConfig+0x100>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d00b      	beq.n	80061de <TIM_OC3_SetConfig+0xae>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a1a      	ldr	r2, [pc, #104]	; (8006234 <TIM_OC3_SetConfig+0x104>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d007      	beq.n	80061de <TIM_OC3_SetConfig+0xae>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a19      	ldr	r2, [pc, #100]	; (8006238 <TIM_OC3_SetConfig+0x108>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d003      	beq.n	80061de <TIM_OC3_SetConfig+0xae>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a18      	ldr	r2, [pc, #96]	; (800623c <TIM_OC3_SetConfig+0x10c>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d113      	bne.n	8006206 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	011b      	lsls	r3, r3, #4
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	011b      	lsls	r3, r3, #4
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	4313      	orrs	r3, r2
 8006204:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	693a      	ldr	r2, [r7, #16]
 800620a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	685a      	ldr	r2, [r3, #4]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	621a      	str	r2, [r3, #32]
}
 8006220:	bf00      	nop
 8006222:	371c      	adds	r7, #28
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr
 800622c:	40012c00 	.word	0x40012c00
 8006230:	40013400 	.word	0x40013400
 8006234:	40014000 	.word	0x40014000
 8006238:	40014400 	.word	0x40014400
 800623c:	40014800 	.word	0x40014800

08006240 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006240:	b480      	push	{r7}
 8006242:	b087      	sub	sp, #28
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	69db      	ldr	r3, [r3, #28]
 8006266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800626e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800627a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	021b      	lsls	r3, r3, #8
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	4313      	orrs	r3, r2
 8006286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800628e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	031b      	lsls	r3, r3, #12
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	4313      	orrs	r3, r2
 800629a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a18      	ldr	r2, [pc, #96]	; (8006300 <TIM_OC4_SetConfig+0xc0>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d00f      	beq.n	80062c4 <TIM_OC4_SetConfig+0x84>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a17      	ldr	r2, [pc, #92]	; (8006304 <TIM_OC4_SetConfig+0xc4>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d00b      	beq.n	80062c4 <TIM_OC4_SetConfig+0x84>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a16      	ldr	r2, [pc, #88]	; (8006308 <TIM_OC4_SetConfig+0xc8>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d007      	beq.n	80062c4 <TIM_OC4_SetConfig+0x84>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a15      	ldr	r2, [pc, #84]	; (800630c <TIM_OC4_SetConfig+0xcc>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d003      	beq.n	80062c4 <TIM_OC4_SetConfig+0x84>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a14      	ldr	r2, [pc, #80]	; (8006310 <TIM_OC4_SetConfig+0xd0>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d109      	bne.n	80062d8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	695b      	ldr	r3, [r3, #20]
 80062d0:	019b      	lsls	r3, r3, #6
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	685a      	ldr	r2, [r3, #4]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	621a      	str	r2, [r3, #32]
}
 80062f2:	bf00      	nop
 80062f4:	371c      	adds	r7, #28
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	40012c00 	.word	0x40012c00
 8006304:	40013400 	.word	0x40013400
 8006308:	40014000 	.word	0x40014000
 800630c:	40014400 	.word	0x40014400
 8006310:	40014800 	.word	0x40014800

08006314 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006314:	b480      	push	{r7}
 8006316:	b087      	sub	sp, #28
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800633a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	4313      	orrs	r3, r2
 8006350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006358:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	041b      	lsls	r3, r3, #16
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	4313      	orrs	r3, r2
 8006364:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a17      	ldr	r2, [pc, #92]	; (80063c8 <TIM_OC5_SetConfig+0xb4>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d00f      	beq.n	800638e <TIM_OC5_SetConfig+0x7a>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a16      	ldr	r2, [pc, #88]	; (80063cc <TIM_OC5_SetConfig+0xb8>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d00b      	beq.n	800638e <TIM_OC5_SetConfig+0x7a>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a15      	ldr	r2, [pc, #84]	; (80063d0 <TIM_OC5_SetConfig+0xbc>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d007      	beq.n	800638e <TIM_OC5_SetConfig+0x7a>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a14      	ldr	r2, [pc, #80]	; (80063d4 <TIM_OC5_SetConfig+0xc0>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d003      	beq.n	800638e <TIM_OC5_SetConfig+0x7a>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a13      	ldr	r2, [pc, #76]	; (80063d8 <TIM_OC5_SetConfig+0xc4>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d109      	bne.n	80063a2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006394:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	021b      	lsls	r3, r3, #8
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	4313      	orrs	r3, r2
 80063a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	685a      	ldr	r2, [r3, #4]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	621a      	str	r2, [r3, #32]
}
 80063bc:	bf00      	nop
 80063be:	371c      	adds	r7, #28
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	40012c00 	.word	0x40012c00
 80063cc:	40013400 	.word	0x40013400
 80063d0:	40014000 	.word	0x40014000
 80063d4:	40014400 	.word	0x40014400
 80063d8:	40014800 	.word	0x40014800

080063dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80063dc:	b480      	push	{r7}
 80063de:	b087      	sub	sp, #28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800640a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800640e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	021b      	lsls	r3, r3, #8
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	4313      	orrs	r3, r2
 800641a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006422:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	051b      	lsls	r3, r3, #20
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	4313      	orrs	r3, r2
 800642e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a18      	ldr	r2, [pc, #96]	; (8006494 <TIM_OC6_SetConfig+0xb8>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d00f      	beq.n	8006458 <TIM_OC6_SetConfig+0x7c>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a17      	ldr	r2, [pc, #92]	; (8006498 <TIM_OC6_SetConfig+0xbc>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d00b      	beq.n	8006458 <TIM_OC6_SetConfig+0x7c>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a16      	ldr	r2, [pc, #88]	; (800649c <TIM_OC6_SetConfig+0xc0>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d007      	beq.n	8006458 <TIM_OC6_SetConfig+0x7c>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a15      	ldr	r2, [pc, #84]	; (80064a0 <TIM_OC6_SetConfig+0xc4>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d003      	beq.n	8006458 <TIM_OC6_SetConfig+0x7c>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a14      	ldr	r2, [pc, #80]	; (80064a4 <TIM_OC6_SetConfig+0xc8>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d109      	bne.n	800646c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800645e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	029b      	lsls	r3, r3, #10
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	4313      	orrs	r3, r2
 800646a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	621a      	str	r2, [r3, #32]
}
 8006486:	bf00      	nop
 8006488:	371c      	adds	r7, #28
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	40012c00 	.word	0x40012c00
 8006498:	40013400 	.word	0x40013400
 800649c:	40014000 	.word	0x40014000
 80064a0:	40014400 	.word	0x40014400
 80064a4:	40014800 	.word	0x40014800

080064a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b087      	sub	sp, #28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6a1b      	ldr	r3, [r3, #32]
 80064b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	f023 0201 	bic.w	r2, r3, #1
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	011b      	lsls	r3, r3, #4
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	4313      	orrs	r3, r2
 80064dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f023 030a 	bic.w	r3, r3, #10
 80064e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	621a      	str	r2, [r3, #32]
}
 80064fa:	bf00      	nop
 80064fc:	371c      	adds	r7, #28
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr

08006506 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006506:	b480      	push	{r7}
 8006508:	b087      	sub	sp, #28
 800650a:	af00      	add	r7, sp, #0
 800650c:	60f8      	str	r0, [r7, #12]
 800650e:	60b9      	str	r1, [r7, #8]
 8006510:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	f023 0210 	bic.w	r2, r3, #16
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6a1b      	ldr	r3, [r3, #32]
 8006528:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006530:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	031b      	lsls	r3, r3, #12
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	4313      	orrs	r3, r2
 800653a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006542:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	011b      	lsls	r3, r3, #4
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	4313      	orrs	r3, r2
 800654c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	621a      	str	r2, [r3, #32]
}
 800655a:	bf00      	nop
 800655c:	371c      	adds	r7, #28
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr

08006566 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006566:	b480      	push	{r7}
 8006568:	b085      	sub	sp, #20
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
 800656e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800657c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800657e:	683a      	ldr	r2, [r7, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4313      	orrs	r3, r2
 8006584:	f043 0307 	orr.w	r3, r3, #7
 8006588:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	609a      	str	r2, [r3, #8]
}
 8006590:	bf00      	nop
 8006592:	3714      	adds	r7, #20
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800659c:	b480      	push	{r7}
 800659e:	b087      	sub	sp, #28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
 80065a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	021a      	lsls	r2, r3, #8
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	431a      	orrs	r2, r3
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	609a      	str	r2, [r3, #8]
}
 80065d0:	bf00      	nop
 80065d2:	371c      	adds	r7, #28
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065dc:	b480      	push	{r7}
 80065de:	b087      	sub	sp, #28
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	f003 031f 	and.w	r3, r3, #31
 80065ee:	2201      	movs	r2, #1
 80065f0:	fa02 f303 	lsl.w	r3, r2, r3
 80065f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6a1a      	ldr	r2, [r3, #32]
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	43db      	mvns	r3, r3
 80065fe:	401a      	ands	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6a1a      	ldr	r2, [r3, #32]
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	f003 031f 	and.w	r3, r3, #31
 800660e:	6879      	ldr	r1, [r7, #4]
 8006610:	fa01 f303 	lsl.w	r3, r1, r3
 8006614:	431a      	orrs	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	621a      	str	r2, [r3, #32]
}
 800661a:	bf00      	nop
 800661c:	371c      	adds	r7, #28
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
	...

08006628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006638:	2b01      	cmp	r3, #1
 800663a:	d101      	bne.n	8006640 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800663c:	2302      	movs	r3, #2
 800663e:	e068      	b.n	8006712 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2202      	movs	r2, #2
 800664c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a2e      	ldr	r2, [pc, #184]	; (8006720 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d004      	beq.n	8006674 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a2d      	ldr	r2, [pc, #180]	; (8006724 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d108      	bne.n	8006686 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800667a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	4313      	orrs	r3, r2
 8006684:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800668c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	4313      	orrs	r3, r2
 8006696:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a1e      	ldr	r2, [pc, #120]	; (8006720 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d01d      	beq.n	80066e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066b2:	d018      	beq.n	80066e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a1b      	ldr	r2, [pc, #108]	; (8006728 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d013      	beq.n	80066e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a1a      	ldr	r2, [pc, #104]	; (800672c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d00e      	beq.n	80066e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a18      	ldr	r2, [pc, #96]	; (8006730 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d009      	beq.n	80066e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a13      	ldr	r2, [pc, #76]	; (8006724 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d004      	beq.n	80066e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a14      	ldr	r2, [pc, #80]	; (8006734 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d10c      	bne.n	8006700 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68ba      	ldr	r2, [r7, #8]
 80066fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	40012c00 	.word	0x40012c00
 8006724:	40013400 	.word	0x40013400
 8006728:	40000400 	.word	0x40000400
 800672c:	40000800 	.word	0x40000800
 8006730:	40000c00 	.word	0x40000c00
 8006734:	40014000 	.word	0x40014000

08006738 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d101      	bne.n	8006786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e040      	b.n	8006808 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800678a:	2b00      	cmp	r3, #0
 800678c:	d106      	bne.n	800679c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7fb fda0 	bl	80022dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2224      	movs	r2, #36	; 0x24
 80067a0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f022 0201 	bic.w	r2, r2, #1
 80067b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 fc94 	bl	80070e0 <UART_SetConfig>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d101      	bne.n	80067c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e022      	b.n	8006808 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d002      	beq.n	80067d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 ff40 	bl	8007650 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	685a      	ldr	r2, [r3, #4]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	689a      	ldr	r2, [r3, #8]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f042 0201 	orr.w	r2, r2, #1
 80067fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 ffc7 	bl	8007794 <UART_CheckIdleState>
 8006806:	4603      	mov	r3, r0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3708      	adds	r7, #8
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b08a      	sub	sp, #40	; 0x28
 8006814:	af02      	add	r7, sp, #8
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	603b      	str	r3, [r7, #0]
 800681c:	4613      	mov	r3, r2
 800681e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006824:	2b20      	cmp	r3, #32
 8006826:	f040 8082 	bne.w	800692e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d002      	beq.n	8006836 <HAL_UART_Transmit+0x26>
 8006830:	88fb      	ldrh	r3, [r7, #6]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e07a      	b.n	8006930 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006840:	2b01      	cmp	r3, #1
 8006842:	d101      	bne.n	8006848 <HAL_UART_Transmit+0x38>
 8006844:	2302      	movs	r3, #2
 8006846:	e073      	b.n	8006930 <HAL_UART_Transmit+0x120>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2200      	movs	r2, #0
 8006854:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2221      	movs	r2, #33	; 0x21
 800685c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800685e:	f7fb ff63 	bl	8002728 <HAL_GetTick>
 8006862:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	88fa      	ldrh	r2, [r7, #6]
 8006868:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	88fa      	ldrh	r2, [r7, #6]
 8006870:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800687c:	d108      	bne.n	8006890 <HAL_UART_Transmit+0x80>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d104      	bne.n	8006890 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006886:	2300      	movs	r3, #0
 8006888:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	61bb      	str	r3, [r7, #24]
 800688e:	e003      	b.n	8006898 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006894:	2300      	movs	r3, #0
 8006896:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80068a0:	e02d      	b.n	80068fe <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	9300      	str	r3, [sp, #0]
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	2200      	movs	r2, #0
 80068aa:	2180      	movs	r1, #128	; 0x80
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f000 ffba 	bl	8007826 <UART_WaitOnFlagUntilTimeout>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e039      	b.n	8006930 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10b      	bne.n	80068da <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	881a      	ldrh	r2, [r3, #0]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068ce:	b292      	uxth	r2, r2
 80068d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	3302      	adds	r3, #2
 80068d6:	61bb      	str	r3, [r7, #24]
 80068d8:	e008      	b.n	80068ec <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	781a      	ldrb	r2, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	b292      	uxth	r2, r2
 80068e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	3301      	adds	r3, #1
 80068ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	3b01      	subs	r3, #1
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006904:	b29b      	uxth	r3, r3
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1cb      	bne.n	80068a2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2200      	movs	r2, #0
 8006912:	2140      	movs	r1, #64	; 0x40
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f000 ff86 	bl	8007826 <UART_WaitOnFlagUntilTimeout>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d001      	beq.n	8006924 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e005      	b.n	8006930 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2220      	movs	r2, #32
 8006928:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800692a:	2300      	movs	r3, #0
 800692c:	e000      	b.n	8006930 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800692e:	2302      	movs	r3, #2
  }
}
 8006930:	4618      	mov	r0, r3
 8006932:	3720      	adds	r7, #32
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b08a      	sub	sp, #40	; 0x28
 800693c:	af02      	add	r7, sp, #8
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	603b      	str	r3, [r7, #0]
 8006944:	4613      	mov	r3, r2
 8006946:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800694c:	2b20      	cmp	r3, #32
 800694e:	f040 80bf 	bne.w	8006ad0 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d002      	beq.n	800695e <HAL_UART_Receive+0x26>
 8006958:	88fb      	ldrh	r3, [r7, #6]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d101      	bne.n	8006962 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e0b7      	b.n	8006ad2 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006968:	2b01      	cmp	r3, #1
 800696a:	d101      	bne.n	8006970 <HAL_UART_Receive+0x38>
 800696c:	2302      	movs	r3, #2
 800696e:	e0b0      	b.n	8006ad2 <HAL_UART_Receive+0x19a>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2222      	movs	r2, #34	; 0x22
 8006984:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800698c:	f7fb fecc 	bl	8002728 <HAL_GetTick>
 8006990:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	88fa      	ldrh	r2, [r7, #6]
 8006996:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	88fa      	ldrh	r2, [r7, #6]
 800699e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069aa:	d10e      	bne.n	80069ca <HAL_UART_Receive+0x92>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d105      	bne.n	80069c0 <HAL_UART_Receive+0x88>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80069ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069be:	e02d      	b.n	8006a1c <HAL_UART_Receive+0xe4>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	22ff      	movs	r2, #255	; 0xff
 80069c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069c8:	e028      	b.n	8006a1c <HAL_UART_Receive+0xe4>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10d      	bne.n	80069ee <HAL_UART_Receive+0xb6>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d104      	bne.n	80069e4 <HAL_UART_Receive+0xac>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	22ff      	movs	r2, #255	; 0xff
 80069de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069e2:	e01b      	b.n	8006a1c <HAL_UART_Receive+0xe4>
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	227f      	movs	r2, #127	; 0x7f
 80069e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069ec:	e016      	b.n	8006a1c <HAL_UART_Receive+0xe4>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069f6:	d10d      	bne.n	8006a14 <HAL_UART_Receive+0xdc>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d104      	bne.n	8006a0a <HAL_UART_Receive+0xd2>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	227f      	movs	r2, #127	; 0x7f
 8006a04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a08:	e008      	b.n	8006a1c <HAL_UART_Receive+0xe4>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	223f      	movs	r2, #63	; 0x3f
 8006a0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a12:	e003      	b.n	8006a1c <HAL_UART_Receive+0xe4>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a22:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a2c:	d108      	bne.n	8006a40 <HAL_UART_Receive+0x108>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d104      	bne.n	8006a40 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8006a36:	2300      	movs	r3, #0
 8006a38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	61bb      	str	r3, [r7, #24]
 8006a3e:	e003      	b.n	8006a48 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a44:	2300      	movs	r3, #0
 8006a46:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006a50:	e033      	b.n	8006aba <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	9300      	str	r3, [sp, #0]
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	2120      	movs	r1, #32
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f000 fee2 	bl	8007826 <UART_WaitOnFlagUntilTimeout>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d001      	beq.n	8006a6c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e032      	b.n	8006ad2 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10c      	bne.n	8006a8c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	8a7b      	ldrh	r3, [r7, #18]
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	3302      	adds	r3, #2
 8006a88:	61bb      	str	r3, [r7, #24]
 8006a8a:	e00d      	b.n	8006aa8 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	b2da      	uxtb	r2, r3
 8006a96:	8a7b      	ldrh	r3, [r7, #18]
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1c5      	bne.n	8006a52 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2220      	movs	r2, #32
 8006aca:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006acc:	2300      	movs	r3, #0
 8006ace:	e000      	b.n	8006ad2 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8006ad0:	2302      	movs	r3, #2
  }
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3720      	adds	r7, #32
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
	...

08006adc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b0ba      	sub	sp, #232	; 0xe8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006b06:	f640 030f 	movw	r3, #2063	; 0x80f
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006b10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d115      	bne.n	8006b44 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b1c:	f003 0320 	and.w	r3, r3, #32
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00f      	beq.n	8006b44 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b28:	f003 0320 	and.w	r3, r3, #32
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d009      	beq.n	8006b44 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f000 82a6 	beq.w	8007086 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	4798      	blx	r3
      }
      return;
 8006b42:	e2a0      	b.n	8007086 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006b44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f000 8117 	beq.w	8006d7c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d106      	bne.n	8006b68 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006b5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006b5e:	4b85      	ldr	r3, [pc, #532]	; (8006d74 <HAL_UART_IRQHandler+0x298>)
 8006b60:	4013      	ands	r3, r2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f000 810a 	beq.w	8006d7c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b6c:	f003 0301 	and.w	r3, r3, #1
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d011      	beq.n	8006b98 <HAL_UART_IRQHandler+0xbc>
 8006b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00b      	beq.n	8006b98 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2201      	movs	r2, #1
 8006b86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b8e:	f043 0201 	orr.w	r2, r3, #1
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b9c:	f003 0302 	and.w	r3, r3, #2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d011      	beq.n	8006bc8 <HAL_UART_IRQHandler+0xec>
 8006ba4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ba8:	f003 0301 	and.w	r3, r3, #1
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00b      	beq.n	8006bc8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2202      	movs	r2, #2
 8006bb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bbe:	f043 0204 	orr.w	r2, r3, #4
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bcc:	f003 0304 	and.w	r3, r3, #4
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d011      	beq.n	8006bf8 <HAL_UART_IRQHandler+0x11c>
 8006bd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bd8:	f003 0301 	and.w	r3, r3, #1
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00b      	beq.n	8006bf8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2204      	movs	r2, #4
 8006be6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bee:	f043 0202 	orr.w	r2, r3, #2
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bfc:	f003 0308 	and.w	r3, r3, #8
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d017      	beq.n	8006c34 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c08:	f003 0320 	and.w	r3, r3, #32
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d105      	bne.n	8006c1c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006c10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c14:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00b      	beq.n	8006c34 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2208      	movs	r2, #8
 8006c22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c2a:	f043 0208 	orr.w	r2, r3, #8
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d012      	beq.n	8006c66 <HAL_UART_IRQHandler+0x18a>
 8006c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00c      	beq.n	8006c66 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c5c:	f043 0220 	orr.w	r2, r3, #32
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f000 820c 	beq.w	800708a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c76:	f003 0320 	and.w	r3, r3, #32
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00d      	beq.n	8006c9a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c82:	f003 0320 	and.w	r3, r3, #32
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d007      	beq.n	8006c9a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d003      	beq.n	8006c9a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ca0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cae:	2b40      	cmp	r3, #64	; 0x40
 8006cb0:	d005      	beq.n	8006cbe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006cb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cb6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d04f      	beq.n	8006d5e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fe75 	bl	80079ae <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cce:	2b40      	cmp	r3, #64	; 0x40
 8006cd0:	d141      	bne.n	8006d56 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	3308      	adds	r3, #8
 8006cd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ce0:	e853 3f00 	ldrex	r3, [r3]
 8006ce4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006ce8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	3308      	adds	r3, #8
 8006cfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006cfe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d0e:	e841 2300 	strex	r3, r2, [r1]
 8006d12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1d9      	bne.n	8006cd2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d013      	beq.n	8006d4e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d2a:	4a13      	ldr	r2, [pc, #76]	; (8006d78 <HAL_UART_IRQHandler+0x29c>)
 8006d2c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7fb fe48 	bl	80029c8 <HAL_DMA_Abort_IT>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d017      	beq.n	8006d6e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006d48:	4610      	mov	r0, r2
 8006d4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d4c:	e00f      	b.n	8006d6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f9b0 	bl	80070b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d54:	e00b      	b.n	8006d6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f9ac 	bl	80070b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d5c:	e007      	b.n	8006d6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f9a8 	bl	80070b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006d6c:	e18d      	b.n	800708a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d6e:	bf00      	nop
    return;
 8006d70:	e18b      	b.n	800708a <HAL_UART_IRQHandler+0x5ae>
 8006d72:	bf00      	nop
 8006d74:	04000120 	.word	0x04000120
 8006d78:	08007a75 	.word	0x08007a75

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	f040 8146 	bne.w	8007012 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d8a:	f003 0310 	and.w	r3, r3, #16
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f000 813f 	beq.w	8007012 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d98:	f003 0310 	and.w	r3, r3, #16
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f000 8138 	beq.w	8007012 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2210      	movs	r2, #16
 8006da8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db4:	2b40      	cmp	r3, #64	; 0x40
 8006db6:	f040 80b4 	bne.w	8006f22 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006dc6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f000 815f 	beq.w	800708e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006dd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	f080 8157 	bcs.w	800708e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006de6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0320 	and.w	r3, r3, #32
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f040 8085 	bne.w	8006f06 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e08:	e853 3f00 	ldrex	r3, [r3]
 8006e0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	461a      	mov	r2, r3
 8006e22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e2a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e36:	e841 2300 	strex	r3, r2, [r1]
 8006e3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1da      	bne.n	8006dfc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	3308      	adds	r3, #8
 8006e4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e50:	e853 3f00 	ldrex	r3, [r3]
 8006e54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006e56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e58:	f023 0301 	bic.w	r3, r3, #1
 8006e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3308      	adds	r3, #8
 8006e66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006e6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006e72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e76:	e841 2300 	strex	r3, r2, [r1]
 8006e7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006e7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1e1      	bne.n	8006e46 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	3308      	adds	r3, #8
 8006e88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e8c:	e853 3f00 	ldrex	r3, [r3]
 8006e90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006e92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	3308      	adds	r3, #8
 8006ea2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006ea6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ea8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eaa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006eac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006eae:	e841 2300 	strex	r3, r2, [r1]
 8006eb2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006eb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1e3      	bne.n	8006e82 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2220      	movs	r2, #32
 8006ebe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ece:	e853 3f00 	ldrex	r3, [r3]
 8006ed2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ed6:	f023 0310 	bic.w	r3, r3, #16
 8006eda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ee8:	65bb      	str	r3, [r7, #88]	; 0x58
 8006eea:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006eee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ef0:	e841 2300 	strex	r3, r2, [r1]
 8006ef4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1e4      	bne.n	8006ec6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7fb fd23 	bl	800294c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	4619      	mov	r1, r3
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 f8d4 	bl	80070c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f20:	e0b5      	b.n	800708e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f000 80a7 	beq.w	8007092 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006f44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f000 80a2 	beq.w	8007092 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f56:	e853 3f00 	ldrex	r3, [r3]
 8006f5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f70:	647b      	str	r3, [r7, #68]	; 0x44
 8006f72:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f78:	e841 2300 	strex	r3, r2, [r1]
 8006f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1e4      	bne.n	8006f4e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3308      	adds	r3, #8
 8006f8a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8e:	e853 3f00 	ldrex	r3, [r3]
 8006f92:	623b      	str	r3, [r7, #32]
   return(result);
 8006f94:	6a3b      	ldr	r3, [r7, #32]
 8006f96:	f023 0301 	bic.w	r3, r3, #1
 8006f9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	3308      	adds	r3, #8
 8006fa4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006fa8:	633a      	str	r2, [r7, #48]	; 0x30
 8006faa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fb0:	e841 2300 	strex	r3, r2, [r1]
 8006fb4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1e3      	bne.n	8006f84 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2220      	movs	r2, #32
 8006fc0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	e853 3f00 	ldrex	r3, [r3]
 8006fda:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f023 0310 	bic.w	r3, r3, #16
 8006fe2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	461a      	mov	r2, r3
 8006fec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006ff0:	61fb      	str	r3, [r7, #28]
 8006ff2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff4:	69b9      	ldr	r1, [r7, #24]
 8006ff6:	69fa      	ldr	r2, [r7, #28]
 8006ff8:	e841 2300 	strex	r3, r2, [r1]
 8006ffc:	617b      	str	r3, [r7, #20]
   return(result);
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1e4      	bne.n	8006fce <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007004:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007008:	4619      	mov	r1, r3
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f85c 	bl	80070c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007010:	e03f      	b.n	8007092 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00e      	beq.n	800703c <HAL_UART_IRQHandler+0x560>
 800701e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d008      	beq.n	800703c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007032:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fd5d 	bl	8007af4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800703a:	e02d      	b.n	8007098 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800703c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00e      	beq.n	8007066 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800704c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007050:	2b00      	cmp	r3, #0
 8007052:	d008      	beq.n	8007066 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007058:	2b00      	cmp	r3, #0
 800705a:	d01c      	beq.n	8007096 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	4798      	blx	r3
    }
    return;
 8007064:	e017      	b.n	8007096 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800706a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706e:	2b00      	cmp	r3, #0
 8007070:	d012      	beq.n	8007098 <HAL_UART_IRQHandler+0x5bc>
 8007072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00c      	beq.n	8007098 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 fd0e 	bl	8007aa0 <UART_EndTransmit_IT>
    return;
 8007084:	e008      	b.n	8007098 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007086:	bf00      	nop
 8007088:	e006      	b.n	8007098 <HAL_UART_IRQHandler+0x5bc>
    return;
 800708a:	bf00      	nop
 800708c:	e004      	b.n	8007098 <HAL_UART_IRQHandler+0x5bc>
      return;
 800708e:	bf00      	nop
 8007090:	e002      	b.n	8007098 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007092:	bf00      	nop
 8007094:	e000      	b.n	8007098 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007096:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007098:	37e8      	adds	r7, #232	; 0xe8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop

080070a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80070a8:	bf00      	nop
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80070bc:	bf00      	nop
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	460b      	mov	r3, r1
 80070d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070e4:	b08a      	sub	sp, #40	; 0x28
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80070ea:	2300      	movs	r3, #0
 80070ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	689a      	ldr	r2, [r3, #8]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	431a      	orrs	r2, r3
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	695b      	ldr	r3, [r3, #20]
 80070fe:	431a      	orrs	r2, r3
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	69db      	ldr	r3, [r3, #28]
 8007104:	4313      	orrs	r3, r2
 8007106:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	4ba4      	ldr	r3, [pc, #656]	; (80073a0 <UART_SetConfig+0x2c0>)
 8007110:	4013      	ands	r3, r2
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	6812      	ldr	r2, [r2, #0]
 8007116:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007118:	430b      	orrs	r3, r1
 800711a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	68da      	ldr	r2, [r3, #12]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	430a      	orrs	r2, r1
 8007130:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	699b      	ldr	r3, [r3, #24]
 8007136:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a99      	ldr	r2, [pc, #612]	; (80073a4 <UART_SetConfig+0x2c4>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d004      	beq.n	800714c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007148:	4313      	orrs	r3, r2
 800714a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800715c:	430a      	orrs	r2, r1
 800715e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a90      	ldr	r2, [pc, #576]	; (80073a8 <UART_SetConfig+0x2c8>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d126      	bne.n	80071b8 <UART_SetConfig+0xd8>
 800716a:	4b90      	ldr	r3, [pc, #576]	; (80073ac <UART_SetConfig+0x2cc>)
 800716c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007170:	f003 0303 	and.w	r3, r3, #3
 8007174:	2b03      	cmp	r3, #3
 8007176:	d81b      	bhi.n	80071b0 <UART_SetConfig+0xd0>
 8007178:	a201      	add	r2, pc, #4	; (adr r2, 8007180 <UART_SetConfig+0xa0>)
 800717a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717e:	bf00      	nop
 8007180:	08007191 	.word	0x08007191
 8007184:	080071a1 	.word	0x080071a1
 8007188:	08007199 	.word	0x08007199
 800718c:	080071a9 	.word	0x080071a9
 8007190:	2301      	movs	r3, #1
 8007192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007196:	e116      	b.n	80073c6 <UART_SetConfig+0x2e6>
 8007198:	2302      	movs	r3, #2
 800719a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800719e:	e112      	b.n	80073c6 <UART_SetConfig+0x2e6>
 80071a0:	2304      	movs	r3, #4
 80071a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071a6:	e10e      	b.n	80073c6 <UART_SetConfig+0x2e6>
 80071a8:	2308      	movs	r3, #8
 80071aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071ae:	e10a      	b.n	80073c6 <UART_SetConfig+0x2e6>
 80071b0:	2310      	movs	r3, #16
 80071b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071b6:	e106      	b.n	80073c6 <UART_SetConfig+0x2e6>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a7c      	ldr	r2, [pc, #496]	; (80073b0 <UART_SetConfig+0x2d0>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d138      	bne.n	8007234 <UART_SetConfig+0x154>
 80071c2:	4b7a      	ldr	r3, [pc, #488]	; (80073ac <UART_SetConfig+0x2cc>)
 80071c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071c8:	f003 030c 	and.w	r3, r3, #12
 80071cc:	2b0c      	cmp	r3, #12
 80071ce:	d82d      	bhi.n	800722c <UART_SetConfig+0x14c>
 80071d0:	a201      	add	r2, pc, #4	; (adr r2, 80071d8 <UART_SetConfig+0xf8>)
 80071d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d6:	bf00      	nop
 80071d8:	0800720d 	.word	0x0800720d
 80071dc:	0800722d 	.word	0x0800722d
 80071e0:	0800722d 	.word	0x0800722d
 80071e4:	0800722d 	.word	0x0800722d
 80071e8:	0800721d 	.word	0x0800721d
 80071ec:	0800722d 	.word	0x0800722d
 80071f0:	0800722d 	.word	0x0800722d
 80071f4:	0800722d 	.word	0x0800722d
 80071f8:	08007215 	.word	0x08007215
 80071fc:	0800722d 	.word	0x0800722d
 8007200:	0800722d 	.word	0x0800722d
 8007204:	0800722d 	.word	0x0800722d
 8007208:	08007225 	.word	0x08007225
 800720c:	2300      	movs	r3, #0
 800720e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007212:	e0d8      	b.n	80073c6 <UART_SetConfig+0x2e6>
 8007214:	2302      	movs	r3, #2
 8007216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800721a:	e0d4      	b.n	80073c6 <UART_SetConfig+0x2e6>
 800721c:	2304      	movs	r3, #4
 800721e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007222:	e0d0      	b.n	80073c6 <UART_SetConfig+0x2e6>
 8007224:	2308      	movs	r3, #8
 8007226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800722a:	e0cc      	b.n	80073c6 <UART_SetConfig+0x2e6>
 800722c:	2310      	movs	r3, #16
 800722e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007232:	e0c8      	b.n	80073c6 <UART_SetConfig+0x2e6>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a5e      	ldr	r2, [pc, #376]	; (80073b4 <UART_SetConfig+0x2d4>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d125      	bne.n	800728a <UART_SetConfig+0x1aa>
 800723e:	4b5b      	ldr	r3, [pc, #364]	; (80073ac <UART_SetConfig+0x2cc>)
 8007240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007244:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007248:	2b30      	cmp	r3, #48	; 0x30
 800724a:	d016      	beq.n	800727a <UART_SetConfig+0x19a>
 800724c:	2b30      	cmp	r3, #48	; 0x30
 800724e:	d818      	bhi.n	8007282 <UART_SetConfig+0x1a2>
 8007250:	2b20      	cmp	r3, #32
 8007252:	d00a      	beq.n	800726a <UART_SetConfig+0x18a>
 8007254:	2b20      	cmp	r3, #32
 8007256:	d814      	bhi.n	8007282 <UART_SetConfig+0x1a2>
 8007258:	2b00      	cmp	r3, #0
 800725a:	d002      	beq.n	8007262 <UART_SetConfig+0x182>
 800725c:	2b10      	cmp	r3, #16
 800725e:	d008      	beq.n	8007272 <UART_SetConfig+0x192>
 8007260:	e00f      	b.n	8007282 <UART_SetConfig+0x1a2>
 8007262:	2300      	movs	r3, #0
 8007264:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007268:	e0ad      	b.n	80073c6 <UART_SetConfig+0x2e6>
 800726a:	2302      	movs	r3, #2
 800726c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007270:	e0a9      	b.n	80073c6 <UART_SetConfig+0x2e6>
 8007272:	2304      	movs	r3, #4
 8007274:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007278:	e0a5      	b.n	80073c6 <UART_SetConfig+0x2e6>
 800727a:	2308      	movs	r3, #8
 800727c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007280:	e0a1      	b.n	80073c6 <UART_SetConfig+0x2e6>
 8007282:	2310      	movs	r3, #16
 8007284:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007288:	e09d      	b.n	80073c6 <UART_SetConfig+0x2e6>
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a4a      	ldr	r2, [pc, #296]	; (80073b8 <UART_SetConfig+0x2d8>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d125      	bne.n	80072e0 <UART_SetConfig+0x200>
 8007294:	4b45      	ldr	r3, [pc, #276]	; (80073ac <UART_SetConfig+0x2cc>)
 8007296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800729a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800729e:	2bc0      	cmp	r3, #192	; 0xc0
 80072a0:	d016      	beq.n	80072d0 <UART_SetConfig+0x1f0>
 80072a2:	2bc0      	cmp	r3, #192	; 0xc0
 80072a4:	d818      	bhi.n	80072d8 <UART_SetConfig+0x1f8>
 80072a6:	2b80      	cmp	r3, #128	; 0x80
 80072a8:	d00a      	beq.n	80072c0 <UART_SetConfig+0x1e0>
 80072aa:	2b80      	cmp	r3, #128	; 0x80
 80072ac:	d814      	bhi.n	80072d8 <UART_SetConfig+0x1f8>
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d002      	beq.n	80072b8 <UART_SetConfig+0x1d8>
 80072b2:	2b40      	cmp	r3, #64	; 0x40
 80072b4:	d008      	beq.n	80072c8 <UART_SetConfig+0x1e8>
 80072b6:	e00f      	b.n	80072d8 <UART_SetConfig+0x1f8>
 80072b8:	2300      	movs	r3, #0
 80072ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072be:	e082      	b.n	80073c6 <UART_SetConfig+0x2e6>
 80072c0:	2302      	movs	r3, #2
 80072c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072c6:	e07e      	b.n	80073c6 <UART_SetConfig+0x2e6>
 80072c8:	2304      	movs	r3, #4
 80072ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072ce:	e07a      	b.n	80073c6 <UART_SetConfig+0x2e6>
 80072d0:	2308      	movs	r3, #8
 80072d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072d6:	e076      	b.n	80073c6 <UART_SetConfig+0x2e6>
 80072d8:	2310      	movs	r3, #16
 80072da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072de:	e072      	b.n	80073c6 <UART_SetConfig+0x2e6>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a35      	ldr	r2, [pc, #212]	; (80073bc <UART_SetConfig+0x2dc>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d12a      	bne.n	8007340 <UART_SetConfig+0x260>
 80072ea:	4b30      	ldr	r3, [pc, #192]	; (80073ac <UART_SetConfig+0x2cc>)
 80072ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072f8:	d01a      	beq.n	8007330 <UART_SetConfig+0x250>
 80072fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072fe:	d81b      	bhi.n	8007338 <UART_SetConfig+0x258>
 8007300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007304:	d00c      	beq.n	8007320 <UART_SetConfig+0x240>
 8007306:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800730a:	d815      	bhi.n	8007338 <UART_SetConfig+0x258>
 800730c:	2b00      	cmp	r3, #0
 800730e:	d003      	beq.n	8007318 <UART_SetConfig+0x238>
 8007310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007314:	d008      	beq.n	8007328 <UART_SetConfig+0x248>
 8007316:	e00f      	b.n	8007338 <UART_SetConfig+0x258>
 8007318:	2300      	movs	r3, #0
 800731a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800731e:	e052      	b.n	80073c6 <UART_SetConfig+0x2e6>
 8007320:	2302      	movs	r3, #2
 8007322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007326:	e04e      	b.n	80073c6 <UART_SetConfig+0x2e6>
 8007328:	2304      	movs	r3, #4
 800732a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800732e:	e04a      	b.n	80073c6 <UART_SetConfig+0x2e6>
 8007330:	2308      	movs	r3, #8
 8007332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007336:	e046      	b.n	80073c6 <UART_SetConfig+0x2e6>
 8007338:	2310      	movs	r3, #16
 800733a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800733e:	e042      	b.n	80073c6 <UART_SetConfig+0x2e6>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a17      	ldr	r2, [pc, #92]	; (80073a4 <UART_SetConfig+0x2c4>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d13a      	bne.n	80073c0 <UART_SetConfig+0x2e0>
 800734a:	4b18      	ldr	r3, [pc, #96]	; (80073ac <UART_SetConfig+0x2cc>)
 800734c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007350:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007354:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007358:	d01a      	beq.n	8007390 <UART_SetConfig+0x2b0>
 800735a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800735e:	d81b      	bhi.n	8007398 <UART_SetConfig+0x2b8>
 8007360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007364:	d00c      	beq.n	8007380 <UART_SetConfig+0x2a0>
 8007366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800736a:	d815      	bhi.n	8007398 <UART_SetConfig+0x2b8>
 800736c:	2b00      	cmp	r3, #0
 800736e:	d003      	beq.n	8007378 <UART_SetConfig+0x298>
 8007370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007374:	d008      	beq.n	8007388 <UART_SetConfig+0x2a8>
 8007376:	e00f      	b.n	8007398 <UART_SetConfig+0x2b8>
 8007378:	2300      	movs	r3, #0
 800737a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800737e:	e022      	b.n	80073c6 <UART_SetConfig+0x2e6>
 8007380:	2302      	movs	r3, #2
 8007382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007386:	e01e      	b.n	80073c6 <UART_SetConfig+0x2e6>
 8007388:	2304      	movs	r3, #4
 800738a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800738e:	e01a      	b.n	80073c6 <UART_SetConfig+0x2e6>
 8007390:	2308      	movs	r3, #8
 8007392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007396:	e016      	b.n	80073c6 <UART_SetConfig+0x2e6>
 8007398:	2310      	movs	r3, #16
 800739a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800739e:	e012      	b.n	80073c6 <UART_SetConfig+0x2e6>
 80073a0:	efff69f3 	.word	0xefff69f3
 80073a4:	40008000 	.word	0x40008000
 80073a8:	40013800 	.word	0x40013800
 80073ac:	40021000 	.word	0x40021000
 80073b0:	40004400 	.word	0x40004400
 80073b4:	40004800 	.word	0x40004800
 80073b8:	40004c00 	.word	0x40004c00
 80073bc:	40005000 	.word	0x40005000
 80073c0:	2310      	movs	r3, #16
 80073c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a9f      	ldr	r2, [pc, #636]	; (8007648 <UART_SetConfig+0x568>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d17a      	bne.n	80074c6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80073d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073d4:	2b08      	cmp	r3, #8
 80073d6:	d824      	bhi.n	8007422 <UART_SetConfig+0x342>
 80073d8:	a201      	add	r2, pc, #4	; (adr r2, 80073e0 <UART_SetConfig+0x300>)
 80073da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073de:	bf00      	nop
 80073e0:	08007405 	.word	0x08007405
 80073e4:	08007423 	.word	0x08007423
 80073e8:	0800740d 	.word	0x0800740d
 80073ec:	08007423 	.word	0x08007423
 80073f0:	08007413 	.word	0x08007413
 80073f4:	08007423 	.word	0x08007423
 80073f8:	08007423 	.word	0x08007423
 80073fc:	08007423 	.word	0x08007423
 8007400:	0800741b 	.word	0x0800741b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007404:	f7fd f8ea 	bl	80045dc <HAL_RCC_GetPCLK1Freq>
 8007408:	61f8      	str	r0, [r7, #28]
        break;
 800740a:	e010      	b.n	800742e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800740c:	4b8f      	ldr	r3, [pc, #572]	; (800764c <UART_SetConfig+0x56c>)
 800740e:	61fb      	str	r3, [r7, #28]
        break;
 8007410:	e00d      	b.n	800742e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007412:	f7fd f84b 	bl	80044ac <HAL_RCC_GetSysClockFreq>
 8007416:	61f8      	str	r0, [r7, #28]
        break;
 8007418:	e009      	b.n	800742e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800741a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800741e:	61fb      	str	r3, [r7, #28]
        break;
 8007420:	e005      	b.n	800742e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007422:	2300      	movs	r3, #0
 8007424:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800742c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	2b00      	cmp	r3, #0
 8007432:	f000 80fb 	beq.w	800762c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	685a      	ldr	r2, [r3, #4]
 800743a:	4613      	mov	r3, r2
 800743c:	005b      	lsls	r3, r3, #1
 800743e:	4413      	add	r3, r2
 8007440:	69fa      	ldr	r2, [r7, #28]
 8007442:	429a      	cmp	r2, r3
 8007444:	d305      	bcc.n	8007452 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800744c:	69fa      	ldr	r2, [r7, #28]
 800744e:	429a      	cmp	r2, r3
 8007450:	d903      	bls.n	800745a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007458:	e0e8      	b.n	800762c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	2200      	movs	r2, #0
 800745e:	461c      	mov	r4, r3
 8007460:	4615      	mov	r5, r2
 8007462:	f04f 0200 	mov.w	r2, #0
 8007466:	f04f 0300 	mov.w	r3, #0
 800746a:	022b      	lsls	r3, r5, #8
 800746c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007470:	0222      	lsls	r2, r4, #8
 8007472:	68f9      	ldr	r1, [r7, #12]
 8007474:	6849      	ldr	r1, [r1, #4]
 8007476:	0849      	lsrs	r1, r1, #1
 8007478:	2000      	movs	r0, #0
 800747a:	4688      	mov	r8, r1
 800747c:	4681      	mov	r9, r0
 800747e:	eb12 0a08 	adds.w	sl, r2, r8
 8007482:	eb43 0b09 	adc.w	fp, r3, r9
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	603b      	str	r3, [r7, #0]
 800748e:	607a      	str	r2, [r7, #4]
 8007490:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007494:	4650      	mov	r0, sl
 8007496:	4659      	mov	r1, fp
 8007498:	f7f9 f8be 	bl	8000618 <__aeabi_uldivmod>
 800749c:	4602      	mov	r2, r0
 800749e:	460b      	mov	r3, r1
 80074a0:	4613      	mov	r3, r2
 80074a2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074aa:	d308      	bcc.n	80074be <UART_SetConfig+0x3de>
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074b2:	d204      	bcs.n	80074be <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	69ba      	ldr	r2, [r7, #24]
 80074ba:	60da      	str	r2, [r3, #12]
 80074bc:	e0b6      	b.n	800762c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80074c4:	e0b2      	b.n	800762c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	69db      	ldr	r3, [r3, #28]
 80074ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074ce:	d15e      	bne.n	800758e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80074d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074d4:	2b08      	cmp	r3, #8
 80074d6:	d828      	bhi.n	800752a <UART_SetConfig+0x44a>
 80074d8:	a201      	add	r2, pc, #4	; (adr r2, 80074e0 <UART_SetConfig+0x400>)
 80074da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074de:	bf00      	nop
 80074e0:	08007505 	.word	0x08007505
 80074e4:	0800750d 	.word	0x0800750d
 80074e8:	08007515 	.word	0x08007515
 80074ec:	0800752b 	.word	0x0800752b
 80074f0:	0800751b 	.word	0x0800751b
 80074f4:	0800752b 	.word	0x0800752b
 80074f8:	0800752b 	.word	0x0800752b
 80074fc:	0800752b 	.word	0x0800752b
 8007500:	08007523 	.word	0x08007523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007504:	f7fd f86a 	bl	80045dc <HAL_RCC_GetPCLK1Freq>
 8007508:	61f8      	str	r0, [r7, #28]
        break;
 800750a:	e014      	b.n	8007536 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800750c:	f7fd f87c 	bl	8004608 <HAL_RCC_GetPCLK2Freq>
 8007510:	61f8      	str	r0, [r7, #28]
        break;
 8007512:	e010      	b.n	8007536 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007514:	4b4d      	ldr	r3, [pc, #308]	; (800764c <UART_SetConfig+0x56c>)
 8007516:	61fb      	str	r3, [r7, #28]
        break;
 8007518:	e00d      	b.n	8007536 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800751a:	f7fc ffc7 	bl	80044ac <HAL_RCC_GetSysClockFreq>
 800751e:	61f8      	str	r0, [r7, #28]
        break;
 8007520:	e009      	b.n	8007536 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007526:	61fb      	str	r3, [r7, #28]
        break;
 8007528:	e005      	b.n	8007536 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800752a:	2300      	movs	r3, #0
 800752c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007534:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d077      	beq.n	800762c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	005a      	lsls	r2, r3, #1
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	085b      	lsrs	r3, r3, #1
 8007546:	441a      	add	r2, r3
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007550:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	2b0f      	cmp	r3, #15
 8007556:	d916      	bls.n	8007586 <UART_SetConfig+0x4a6>
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800755e:	d212      	bcs.n	8007586 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	b29b      	uxth	r3, r3
 8007564:	f023 030f 	bic.w	r3, r3, #15
 8007568:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	085b      	lsrs	r3, r3, #1
 800756e:	b29b      	uxth	r3, r3
 8007570:	f003 0307 	and.w	r3, r3, #7
 8007574:	b29a      	uxth	r2, r3
 8007576:	8afb      	ldrh	r3, [r7, #22]
 8007578:	4313      	orrs	r3, r2
 800757a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	8afa      	ldrh	r2, [r7, #22]
 8007582:	60da      	str	r2, [r3, #12]
 8007584:	e052      	b.n	800762c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800758c:	e04e      	b.n	800762c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800758e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007592:	2b08      	cmp	r3, #8
 8007594:	d827      	bhi.n	80075e6 <UART_SetConfig+0x506>
 8007596:	a201      	add	r2, pc, #4	; (adr r2, 800759c <UART_SetConfig+0x4bc>)
 8007598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800759c:	080075c1 	.word	0x080075c1
 80075a0:	080075c9 	.word	0x080075c9
 80075a4:	080075d1 	.word	0x080075d1
 80075a8:	080075e7 	.word	0x080075e7
 80075ac:	080075d7 	.word	0x080075d7
 80075b0:	080075e7 	.word	0x080075e7
 80075b4:	080075e7 	.word	0x080075e7
 80075b8:	080075e7 	.word	0x080075e7
 80075bc:	080075df 	.word	0x080075df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075c0:	f7fd f80c 	bl	80045dc <HAL_RCC_GetPCLK1Freq>
 80075c4:	61f8      	str	r0, [r7, #28]
        break;
 80075c6:	e014      	b.n	80075f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075c8:	f7fd f81e 	bl	8004608 <HAL_RCC_GetPCLK2Freq>
 80075cc:	61f8      	str	r0, [r7, #28]
        break;
 80075ce:	e010      	b.n	80075f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075d0:	4b1e      	ldr	r3, [pc, #120]	; (800764c <UART_SetConfig+0x56c>)
 80075d2:	61fb      	str	r3, [r7, #28]
        break;
 80075d4:	e00d      	b.n	80075f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075d6:	f7fc ff69 	bl	80044ac <HAL_RCC_GetSysClockFreq>
 80075da:	61f8      	str	r0, [r7, #28]
        break;
 80075dc:	e009      	b.n	80075f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075e2:	61fb      	str	r3, [r7, #28]
        break;
 80075e4:	e005      	b.n	80075f2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80075e6:	2300      	movs	r3, #0
 80075e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80075f0:	bf00      	nop
    }

    if (pclk != 0U)
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d019      	beq.n	800762c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	085a      	lsrs	r2, r3, #1
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	441a      	add	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	fbb2 f3f3 	udiv	r3, r2, r3
 800760a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	2b0f      	cmp	r3, #15
 8007610:	d909      	bls.n	8007626 <UART_SetConfig+0x546>
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007618:	d205      	bcs.n	8007626 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	b29a      	uxth	r2, r3
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	60da      	str	r2, [r3, #12]
 8007624:	e002      	b.n	800762c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007638:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800763c:	4618      	mov	r0, r3
 800763e:	3728      	adds	r7, #40	; 0x28
 8007640:	46bd      	mov	sp, r7
 8007642:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007646:	bf00      	nop
 8007648:	40008000 	.word	0x40008000
 800764c:	00f42400 	.word	0x00f42400

08007650 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765c:	f003 0301 	and.w	r3, r3, #1
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00a      	beq.n	800767a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	430a      	orrs	r2, r1
 8007678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767e:	f003 0302 	and.w	r3, r3, #2
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00a      	beq.n	800769c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	430a      	orrs	r2, r1
 800769a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a0:	f003 0304 	and.w	r3, r3, #4
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00a      	beq.n	80076be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	430a      	orrs	r2, r1
 80076bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c2:	f003 0308 	and.w	r3, r3, #8
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00a      	beq.n	80076e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	430a      	orrs	r2, r1
 80076de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e4:	f003 0310 	and.w	r3, r3, #16
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00a      	beq.n	8007702 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	430a      	orrs	r2, r1
 8007700:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007706:	f003 0320 	and.w	r3, r3, #32
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00a      	beq.n	8007724 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	430a      	orrs	r2, r1
 8007722:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800772c:	2b00      	cmp	r3, #0
 800772e:	d01a      	beq.n	8007766 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	430a      	orrs	r2, r1
 8007744:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800774e:	d10a      	bne.n	8007766 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	430a      	orrs	r2, r1
 8007764:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00a      	beq.n	8007788 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	430a      	orrs	r2, r1
 8007786:	605a      	str	r2, [r3, #4]
  }
}
 8007788:	bf00      	nop
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b086      	sub	sp, #24
 8007798:	af02      	add	r7, sp, #8
 800779a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80077a4:	f7fa ffc0 	bl	8002728 <HAL_GetTick>
 80077a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 0308 	and.w	r3, r3, #8
 80077b4:	2b08      	cmp	r3, #8
 80077b6:	d10e      	bne.n	80077d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077bc:	9300      	str	r3, [sp, #0]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f82d 	bl	8007826 <UART_WaitOnFlagUntilTimeout>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d001      	beq.n	80077d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077d2:	2303      	movs	r3, #3
 80077d4:	e023      	b.n	800781e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 0304 	and.w	r3, r3, #4
 80077e0:	2b04      	cmp	r3, #4
 80077e2:	d10e      	bne.n	8007802 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077e8:	9300      	str	r3, [sp, #0]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f817 	bl	8007826 <UART_WaitOnFlagUntilTimeout>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d001      	beq.n	8007802 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	e00d      	b.n	800781e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2220      	movs	r2, #32
 8007806:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2220      	movs	r2, #32
 800780c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b09c      	sub	sp, #112	; 0x70
 800782a:	af00      	add	r7, sp, #0
 800782c:	60f8      	str	r0, [r7, #12]
 800782e:	60b9      	str	r1, [r7, #8]
 8007830:	603b      	str	r3, [r7, #0]
 8007832:	4613      	mov	r3, r2
 8007834:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007836:	e0a5      	b.n	8007984 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007838:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800783a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800783e:	f000 80a1 	beq.w	8007984 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007842:	f7fa ff71 	bl	8002728 <HAL_GetTick>
 8007846:	4602      	mov	r2, r0
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800784e:	429a      	cmp	r2, r3
 8007850:	d302      	bcc.n	8007858 <UART_WaitOnFlagUntilTimeout+0x32>
 8007852:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007854:	2b00      	cmp	r3, #0
 8007856:	d13e      	bne.n	80078d6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007860:	e853 3f00 	ldrex	r3, [r3]
 8007864:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007868:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800786c:	667b      	str	r3, [r7, #100]	; 0x64
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	461a      	mov	r2, r3
 8007874:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007876:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007878:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800787c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800787e:	e841 2300 	strex	r3, r2, [r1]
 8007882:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007886:	2b00      	cmp	r3, #0
 8007888:	d1e6      	bne.n	8007858 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	3308      	adds	r3, #8
 8007890:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007894:	e853 3f00 	ldrex	r3, [r3]
 8007898:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800789a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789c:	f023 0301 	bic.w	r3, r3, #1
 80078a0:	663b      	str	r3, [r7, #96]	; 0x60
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	3308      	adds	r3, #8
 80078a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80078aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80078ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80078b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078b2:	e841 2300 	strex	r3, r2, [r1]
 80078b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80078b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1e5      	bne.n	800788a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2220      	movs	r2, #32
 80078c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2220      	movs	r2, #32
 80078c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80078d2:	2303      	movs	r3, #3
 80078d4:	e067      	b.n	80079a6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 0304 	and.w	r3, r3, #4
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d04f      	beq.n	8007984 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	69db      	ldr	r3, [r3, #28]
 80078ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078f2:	d147      	bne.n	8007984 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078fc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007906:	e853 3f00 	ldrex	r3, [r3]
 800790a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007912:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	461a      	mov	r2, r3
 800791a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800791c:	637b      	str	r3, [r7, #52]	; 0x34
 800791e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007920:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007922:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007924:	e841 2300 	strex	r3, r2, [r1]
 8007928:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800792a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1e6      	bne.n	80078fe <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	3308      	adds	r3, #8
 8007936:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	e853 3f00 	ldrex	r3, [r3]
 800793e:	613b      	str	r3, [r7, #16]
   return(result);
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	f023 0301 	bic.w	r3, r3, #1
 8007946:	66bb      	str	r3, [r7, #104]	; 0x68
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	3308      	adds	r3, #8
 800794e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007950:	623a      	str	r2, [r7, #32]
 8007952:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007954:	69f9      	ldr	r1, [r7, #28]
 8007956:	6a3a      	ldr	r2, [r7, #32]
 8007958:	e841 2300 	strex	r3, r2, [r1]
 800795c:	61bb      	str	r3, [r7, #24]
   return(result);
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1e5      	bne.n	8007930 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2220      	movs	r2, #32
 8007968:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2220      	movs	r2, #32
 800796e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2220      	movs	r2, #32
 8007974:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007980:	2303      	movs	r3, #3
 8007982:	e010      	b.n	80079a6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	69da      	ldr	r2, [r3, #28]
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	4013      	ands	r3, r2
 800798e:	68ba      	ldr	r2, [r7, #8]
 8007990:	429a      	cmp	r2, r3
 8007992:	bf0c      	ite	eq
 8007994:	2301      	moveq	r3, #1
 8007996:	2300      	movne	r3, #0
 8007998:	b2db      	uxtb	r3, r3
 800799a:	461a      	mov	r2, r3
 800799c:	79fb      	ldrb	r3, [r7, #7]
 800799e:	429a      	cmp	r2, r3
 80079a0:	f43f af4a 	beq.w	8007838 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3770      	adds	r7, #112	; 0x70
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079ae:	b480      	push	{r7}
 80079b0:	b095      	sub	sp, #84	; 0x54
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079be:	e853 3f00 	ldrex	r3, [r3]
 80079c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80079c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	461a      	mov	r2, r3
 80079d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079d4:	643b      	str	r3, [r7, #64]	; 0x40
 80079d6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079dc:	e841 2300 	strex	r3, r2, [r1]
 80079e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1e6      	bne.n	80079b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	3308      	adds	r3, #8
 80079ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f0:	6a3b      	ldr	r3, [r7, #32]
 80079f2:	e853 3f00 	ldrex	r3, [r3]
 80079f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	f023 0301 	bic.w	r3, r3, #1
 80079fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	3308      	adds	r3, #8
 8007a06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a10:	e841 2300 	strex	r3, r2, [r1]
 8007a14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1e5      	bne.n	80079e8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d118      	bne.n	8007a56 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	e853 3f00 	ldrex	r3, [r3]
 8007a30:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	f023 0310 	bic.w	r3, r3, #16
 8007a38:	647b      	str	r3, [r7, #68]	; 0x44
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	461a      	mov	r2, r3
 8007a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a42:	61bb      	str	r3, [r7, #24]
 8007a44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a46:	6979      	ldr	r1, [r7, #20]
 8007a48:	69ba      	ldr	r2, [r7, #24]
 8007a4a:	e841 2300 	strex	r3, r2, [r1]
 8007a4e:	613b      	str	r3, [r7, #16]
   return(result);
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1e6      	bne.n	8007a24 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2220      	movs	r2, #32
 8007a5a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007a68:	bf00      	nop
 8007a6a:	3754      	adds	r7, #84	; 0x54
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a92:	68f8      	ldr	r0, [r7, #12]
 8007a94:	f7ff fb0e 	bl	80070b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a98:	bf00      	nop
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b088      	sub	sp, #32
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	e853 3f00 	ldrex	r3, [r3]
 8007ab4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007abc:	61fb      	str	r3, [r7, #28]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	61bb      	str	r3, [r7, #24]
 8007ac8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aca:	6979      	ldr	r1, [r7, #20]
 8007acc:	69ba      	ldr	r2, [r7, #24]
 8007ace:	e841 2300 	strex	r3, r2, [r1]
 8007ad2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1e6      	bne.n	8007aa8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2220      	movs	r2, #32
 8007ade:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f7ff fada 	bl	80070a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007aec:	bf00      	nop
 8007aee:	3720      	adds	r7, #32
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007afc:	bf00      	nop
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <__NVIC_SetPriority>:
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	4603      	mov	r3, r0
 8007b10:	6039      	str	r1, [r7, #0]
 8007b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	db0a      	blt.n	8007b32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	b2da      	uxtb	r2, r3
 8007b20:	490c      	ldr	r1, [pc, #48]	; (8007b54 <__NVIC_SetPriority+0x4c>)
 8007b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b26:	0112      	lsls	r2, r2, #4
 8007b28:	b2d2      	uxtb	r2, r2
 8007b2a:	440b      	add	r3, r1
 8007b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007b30:	e00a      	b.n	8007b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	b2da      	uxtb	r2, r3
 8007b36:	4908      	ldr	r1, [pc, #32]	; (8007b58 <__NVIC_SetPriority+0x50>)
 8007b38:	79fb      	ldrb	r3, [r7, #7]
 8007b3a:	f003 030f 	and.w	r3, r3, #15
 8007b3e:	3b04      	subs	r3, #4
 8007b40:	0112      	lsls	r2, r2, #4
 8007b42:	b2d2      	uxtb	r2, r2
 8007b44:	440b      	add	r3, r1
 8007b46:	761a      	strb	r2, [r3, #24]
}
 8007b48:	bf00      	nop
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr
 8007b54:	e000e100 	.word	0xe000e100
 8007b58:	e000ed00 	.word	0xe000ed00

08007b5c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007b60:	4b05      	ldr	r3, [pc, #20]	; (8007b78 <SysTick_Handler+0x1c>)
 8007b62:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007b64:	f002 f93e 	bl	8009de4 <xTaskGetSchedulerState>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d001      	beq.n	8007b72 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007b6e:	f003 f823 	bl	800abb8 <xPortSysTickHandler>
  }
}
 8007b72:	bf00      	nop
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	e000e010 	.word	0xe000e010

08007b7c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007b80:	2100      	movs	r1, #0
 8007b82:	f06f 0004 	mvn.w	r0, #4
 8007b86:	f7ff ffbf 	bl	8007b08 <__NVIC_SetPriority>
#endif
}
 8007b8a:	bf00      	nop
 8007b8c:	bd80      	pop	{r7, pc}
	...

08007b90 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b96:	f3ef 8305 	mrs	r3, IPSR
 8007b9a:	603b      	str	r3, [r7, #0]
  return(result);
 8007b9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d003      	beq.n	8007baa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007ba2:	f06f 0305 	mvn.w	r3, #5
 8007ba6:	607b      	str	r3, [r7, #4]
 8007ba8:	e00c      	b.n	8007bc4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007baa:	4b0a      	ldr	r3, [pc, #40]	; (8007bd4 <osKernelInitialize+0x44>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d105      	bne.n	8007bbe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007bb2:	4b08      	ldr	r3, [pc, #32]	; (8007bd4 <osKernelInitialize+0x44>)
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	607b      	str	r3, [r7, #4]
 8007bbc:	e002      	b.n	8007bc4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8007bc2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007bc4:	687b      	ldr	r3, [r7, #4]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	20000414 	.word	0x20000414

08007bd8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bde:	f3ef 8305 	mrs	r3, IPSR
 8007be2:	603b      	str	r3, [r7, #0]
  return(result);
 8007be4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d003      	beq.n	8007bf2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007bea:	f06f 0305 	mvn.w	r3, #5
 8007bee:	607b      	str	r3, [r7, #4]
 8007bf0:	e010      	b.n	8007c14 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007bf2:	4b0b      	ldr	r3, [pc, #44]	; (8007c20 <osKernelStart+0x48>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d109      	bne.n	8007c0e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007bfa:	f7ff ffbf 	bl	8007b7c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007bfe:	4b08      	ldr	r3, [pc, #32]	; (8007c20 <osKernelStart+0x48>)
 8007c00:	2202      	movs	r2, #2
 8007c02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007c04:	f001 fca6 	bl	8009554 <vTaskStartScheduler>
      stat = osOK;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	607b      	str	r3, [r7, #4]
 8007c0c:	e002      	b.n	8007c14 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007c14:	687b      	ldr	r3, [r7, #4]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	20000414 	.word	0x20000414

08007c24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b08e      	sub	sp, #56	; 0x38
 8007c28:	af04      	add	r7, sp, #16
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007c30:	2300      	movs	r3, #0
 8007c32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c34:	f3ef 8305 	mrs	r3, IPSR
 8007c38:	617b      	str	r3, [r7, #20]
  return(result);
 8007c3a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d17e      	bne.n	8007d3e <osThreadNew+0x11a>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d07b      	beq.n	8007d3e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007c46:	2380      	movs	r3, #128	; 0x80
 8007c48:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007c4a:	2318      	movs	r3, #24
 8007c4c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007c52:	f04f 33ff 	mov.w	r3, #4294967295
 8007c56:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d045      	beq.n	8007cea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d002      	beq.n	8007c6c <osThreadNew+0x48>
        name = attr->name;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	699b      	ldr	r3, [r3, #24]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d002      	beq.n	8007c7a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	699b      	ldr	r3, [r3, #24]
 8007c78:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d008      	beq.n	8007c92 <osThreadNew+0x6e>
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	2b38      	cmp	r3, #56	; 0x38
 8007c84:	d805      	bhi.n	8007c92 <osThreadNew+0x6e>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	f003 0301 	and.w	r3, r3, #1
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d001      	beq.n	8007c96 <osThreadNew+0x72>
        return (NULL);
 8007c92:	2300      	movs	r3, #0
 8007c94:	e054      	b.n	8007d40 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	695b      	ldr	r3, [r3, #20]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d003      	beq.n	8007ca6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	695b      	ldr	r3, [r3, #20]
 8007ca2:	089b      	lsrs	r3, r3, #2
 8007ca4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00e      	beq.n	8007ccc <osThreadNew+0xa8>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	2b5b      	cmp	r3, #91	; 0x5b
 8007cb4:	d90a      	bls.n	8007ccc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d006      	beq.n	8007ccc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	695b      	ldr	r3, [r3, #20]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d002      	beq.n	8007ccc <osThreadNew+0xa8>
        mem = 1;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	61bb      	str	r3, [r7, #24]
 8007cca:	e010      	b.n	8007cee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d10c      	bne.n	8007cee <osThreadNew+0xca>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d108      	bne.n	8007cee <osThreadNew+0xca>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d104      	bne.n	8007cee <osThreadNew+0xca>
          mem = 0;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	61bb      	str	r3, [r7, #24]
 8007ce8:	e001      	b.n	8007cee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007cea:	2300      	movs	r3, #0
 8007cec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d110      	bne.n	8007d16 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007cfc:	9202      	str	r2, [sp, #8]
 8007cfe:	9301      	str	r3, [sp, #4]
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	9300      	str	r3, [sp, #0]
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	6a3a      	ldr	r2, [r7, #32]
 8007d08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f001 fa4c 	bl	80091a8 <xTaskCreateStatic>
 8007d10:	4603      	mov	r3, r0
 8007d12:	613b      	str	r3, [r7, #16]
 8007d14:	e013      	b.n	8007d3e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d110      	bne.n	8007d3e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007d1c:	6a3b      	ldr	r3, [r7, #32]
 8007d1e:	b29a      	uxth	r2, r3
 8007d20:	f107 0310 	add.w	r3, r7, #16
 8007d24:	9301      	str	r3, [sp, #4]
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	9300      	str	r3, [sp, #0]
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f001 fa97 	bl	8009262 <xTaskCreate>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d001      	beq.n	8007d3e <osThreadNew+0x11a>
            hTask = NULL;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007d3e:	693b      	ldr	r3, [r7, #16]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3728      	adds	r7, #40	; 0x28
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d50:	f3ef 8305 	mrs	r3, IPSR
 8007d54:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d56:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d003      	beq.n	8007d64 <osDelay+0x1c>
    stat = osErrorISR;
 8007d5c:	f06f 0305 	mvn.w	r3, #5
 8007d60:	60fb      	str	r3, [r7, #12]
 8007d62:	e007      	b.n	8007d74 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007d64:	2300      	movs	r3, #0
 8007d66:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d002      	beq.n	8007d74 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f001 fbbc 	bl	80094ec <vTaskDelay>
    }
  }

  return (stat);
 8007d74:	68fb      	ldr	r3, [r7, #12]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b08a      	sub	sp, #40	; 0x28
 8007d82:	af02      	add	r7, sp, #8
 8007d84:	60f8      	str	r0, [r7, #12]
 8007d86:	60b9      	str	r1, [r7, #8]
 8007d88:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d8e:	f3ef 8305 	mrs	r3, IPSR
 8007d92:	613b      	str	r3, [r7, #16]
  return(result);
 8007d94:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d175      	bne.n	8007e86 <osSemaphoreNew+0x108>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d072      	beq.n	8007e86 <osSemaphoreNew+0x108>
 8007da0:	68ba      	ldr	r2, [r7, #8]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d86e      	bhi.n	8007e86 <osSemaphoreNew+0x108>
    mem = -1;
 8007da8:	f04f 33ff 	mov.w	r3, #4294967295
 8007dac:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d015      	beq.n	8007de0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d006      	beq.n	8007dca <osSemaphoreNew+0x4c>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	2b4f      	cmp	r3, #79	; 0x4f
 8007dc2:	d902      	bls.n	8007dca <osSemaphoreNew+0x4c>
        mem = 1;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	61bb      	str	r3, [r7, #24]
 8007dc8:	e00c      	b.n	8007de4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d108      	bne.n	8007de4 <osSemaphoreNew+0x66>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d104      	bne.n	8007de4 <osSemaphoreNew+0x66>
          mem = 0;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	61bb      	str	r3, [r7, #24]
 8007dde:	e001      	b.n	8007de4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007de0:	2300      	movs	r3, #0
 8007de2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007de4:	69bb      	ldr	r3, [r7, #24]
 8007de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dea:	d04c      	beq.n	8007e86 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d128      	bne.n	8007e44 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d10a      	bne.n	8007e0e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	2203      	movs	r2, #3
 8007dfe:	9200      	str	r2, [sp, #0]
 8007e00:	2200      	movs	r2, #0
 8007e02:	2100      	movs	r1, #0
 8007e04:	2001      	movs	r0, #1
 8007e06:	f000 fa29 	bl	800825c <xQueueGenericCreateStatic>
 8007e0a:	61f8      	str	r0, [r7, #28]
 8007e0c:	e005      	b.n	8007e1a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8007e0e:	2203      	movs	r2, #3
 8007e10:	2100      	movs	r1, #0
 8007e12:	2001      	movs	r0, #1
 8007e14:	f000 fa9a 	bl	800834c <xQueueGenericCreate>
 8007e18:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d022      	beq.n	8007e66 <osSemaphoreNew+0xe8>
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d01f      	beq.n	8007e66 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007e26:	2300      	movs	r3, #0
 8007e28:	2200      	movs	r2, #0
 8007e2a:	2100      	movs	r1, #0
 8007e2c:	69f8      	ldr	r0, [r7, #28]
 8007e2e:	f000 fb55 	bl	80084dc <xQueueGenericSend>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d016      	beq.n	8007e66 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8007e38:	69f8      	ldr	r0, [r7, #28]
 8007e3a:	f000 ffe1 	bl	8008e00 <vQueueDelete>
            hSemaphore = NULL;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	61fb      	str	r3, [r7, #28]
 8007e42:	e010      	b.n	8007e66 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d108      	bne.n	8007e5c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	68b9      	ldr	r1, [r7, #8]
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f000 fad7 	bl	8008406 <xQueueCreateCountingSemaphoreStatic>
 8007e58:	61f8      	str	r0, [r7, #28]
 8007e5a:	e004      	b.n	8007e66 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007e5c:	68b9      	ldr	r1, [r7, #8]
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f000 fb08 	bl	8008474 <xQueueCreateCountingSemaphore>
 8007e64:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d00c      	beq.n	8007e86 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d003      	beq.n	8007e7a <osSemaphoreNew+0xfc>
          name = attr->name;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	617b      	str	r3, [r7, #20]
 8007e78:	e001      	b.n	8007e7e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007e7e:	6979      	ldr	r1, [r7, #20]
 8007e80:	69f8      	ldr	r0, [r7, #28]
 8007e82:	f001 f909 	bl	8009098 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007e86:	69fb      	ldr	r3, [r7, #28]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3720      	adds	r7, #32
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b086      	sub	sp, #24
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d103      	bne.n	8007eb0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007ea8:	f06f 0303 	mvn.w	r3, #3
 8007eac:	617b      	str	r3, [r7, #20]
 8007eae:	e039      	b.n	8007f24 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007eb0:	f3ef 8305 	mrs	r3, IPSR
 8007eb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d022      	beq.n	8007f02 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d003      	beq.n	8007eca <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8007ec2:	f06f 0303 	mvn.w	r3, #3
 8007ec6:	617b      	str	r3, [r7, #20]
 8007ec8:	e02c      	b.n	8007f24 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007ece:	f107 0308 	add.w	r3, r7, #8
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	6938      	ldr	r0, [r7, #16]
 8007ed8:	f000 ff12 	bl	8008d00 <xQueueReceiveFromISR>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d003      	beq.n	8007eea <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8007ee2:	f06f 0302 	mvn.w	r3, #2
 8007ee6:	617b      	str	r3, [r7, #20]
 8007ee8:	e01c      	b.n	8007f24 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d019      	beq.n	8007f24 <osSemaphoreAcquire+0x94>
 8007ef0:	4b0f      	ldr	r3, [pc, #60]	; (8007f30 <osSemaphoreAcquire+0xa0>)
 8007ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ef6:	601a      	str	r2, [r3, #0]
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	e010      	b.n	8007f24 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007f02:	6839      	ldr	r1, [r7, #0]
 8007f04:	6938      	ldr	r0, [r7, #16]
 8007f06:	f000 fdef 	bl	8008ae8 <xQueueSemaphoreTake>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d009      	beq.n	8007f24 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d003      	beq.n	8007f1e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8007f16:	f06f 0301 	mvn.w	r3, #1
 8007f1a:	617b      	str	r3, [r7, #20]
 8007f1c:	e002      	b.n	8007f24 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8007f1e:	f06f 0302 	mvn.w	r3, #2
 8007f22:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007f24:	697b      	ldr	r3, [r7, #20]
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3718      	adds	r7, #24
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	e000ed04 	.word	0xe000ed04

08007f34 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b086      	sub	sp, #24
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007f40:	2300      	movs	r3, #0
 8007f42:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d103      	bne.n	8007f52 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007f4a:	f06f 0303 	mvn.w	r3, #3
 8007f4e:	617b      	str	r3, [r7, #20]
 8007f50:	e02c      	b.n	8007fac <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f52:	f3ef 8305 	mrs	r3, IPSR
 8007f56:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f58:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d01a      	beq.n	8007f94 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007f62:	f107 0308 	add.w	r3, r7, #8
 8007f66:	4619      	mov	r1, r3
 8007f68:	6938      	ldr	r0, [r7, #16]
 8007f6a:	f000 fc50 	bl	800880e <xQueueGiveFromISR>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d003      	beq.n	8007f7c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8007f74:	f06f 0302 	mvn.w	r3, #2
 8007f78:	617b      	str	r3, [r7, #20]
 8007f7a:	e017      	b.n	8007fac <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d014      	beq.n	8007fac <osSemaphoreRelease+0x78>
 8007f82:	4b0d      	ldr	r3, [pc, #52]	; (8007fb8 <osSemaphoreRelease+0x84>)
 8007f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f88:	601a      	str	r2, [r3, #0]
 8007f8a:	f3bf 8f4f 	dsb	sy
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	e00b      	b.n	8007fac <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007f94:	2300      	movs	r3, #0
 8007f96:	2200      	movs	r2, #0
 8007f98:	2100      	movs	r1, #0
 8007f9a:	6938      	ldr	r0, [r7, #16]
 8007f9c:	f000 fa9e 	bl	80084dc <xQueueGenericSend>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d002      	beq.n	8007fac <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8007fa6:	f06f 0302 	mvn.w	r3, #2
 8007faa:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007fac:	697b      	ldr	r3, [r7, #20]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3718      	adds	r7, #24
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	e000ed04 	.word	0xe000ed04

08007fbc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	4a07      	ldr	r2, [pc, #28]	; (8007fe8 <vApplicationGetIdleTaskMemory+0x2c>)
 8007fcc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	4a06      	ldr	r2, [pc, #24]	; (8007fec <vApplicationGetIdleTaskMemory+0x30>)
 8007fd2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2280      	movs	r2, #128	; 0x80
 8007fd8:	601a      	str	r2, [r3, #0]
}
 8007fda:	bf00      	nop
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	20000418 	.word	0x20000418
 8007fec:	20000474 	.word	0x20000474

08007ff0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	4a07      	ldr	r2, [pc, #28]	; (800801c <vApplicationGetTimerTaskMemory+0x2c>)
 8008000:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	4a06      	ldr	r2, [pc, #24]	; (8008020 <vApplicationGetTimerTaskMemory+0x30>)
 8008006:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800800e:	601a      	str	r2, [r3, #0]
}
 8008010:	bf00      	nop
 8008012:	3714      	adds	r7, #20
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr
 800801c:	20000674 	.word	0x20000674
 8008020:	200006d0 	.word	0x200006d0

08008024 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f103 0208 	add.w	r2, r3, #8
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f04f 32ff 	mov.w	r2, #4294967295
 800803c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f103 0208 	add.w	r2, r3, #8
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f103 0208 	add.w	r2, r3, #8
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008058:	bf00      	nop
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008072:	bf00      	nop
 8008074:	370c      	adds	r7, #12
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800807e:	b480      	push	{r7}
 8008080:	b085      	sub	sp, #20
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
 8008086:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	689a      	ldr	r2, [r3, #8]
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	683a      	ldr	r2, [r7, #0]
 80080a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	683a      	ldr	r2, [r7, #0]
 80080a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	1c5a      	adds	r2, r3, #1
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	601a      	str	r2, [r3, #0]
}
 80080ba:	bf00      	nop
 80080bc:	3714      	adds	r7, #20
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr

080080c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80080c6:	b480      	push	{r7}
 80080c8:	b085      	sub	sp, #20
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
 80080ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080dc:	d103      	bne.n	80080e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	60fb      	str	r3, [r7, #12]
 80080e4:	e00c      	b.n	8008100 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	3308      	adds	r3, #8
 80080ea:	60fb      	str	r3, [r7, #12]
 80080ec:	e002      	b.n	80080f4 <vListInsert+0x2e>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	60fb      	str	r3, [r7, #12]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68ba      	ldr	r2, [r7, #8]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d2f6      	bcs.n	80080ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	685a      	ldr	r2, [r3, #4]
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	683a      	ldr	r2, [r7, #0]
 800810e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	683a      	ldr	r2, [r7, #0]
 800811a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	1c5a      	adds	r2, r3, #1
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	601a      	str	r2, [r3, #0]
}
 800812c:	bf00      	nop
 800812e:	3714      	adds	r7, #20
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	6892      	ldr	r2, [r2, #8]
 800814e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	6852      	ldr	r2, [r2, #4]
 8008158:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	429a      	cmp	r2, r3
 8008162:	d103      	bne.n	800816c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	689a      	ldr	r2, [r3, #8]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	1e5a      	subs	r2, r3, #1
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
}
 8008180:	4618      	mov	r0, r3
 8008182:	3714      	adds	r7, #20
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d10a      	bne.n	80081b6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80081a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80081b2:	bf00      	nop
 80081b4:	e7fe      	b.n	80081b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80081b6:	f002 fc6d 	bl	800aa94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081c2:	68f9      	ldr	r1, [r7, #12]
 80081c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80081c6:	fb01 f303 	mul.w	r3, r1, r3
 80081ca:	441a      	add	r2, r3
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081e6:	3b01      	subs	r3, #1
 80081e8:	68f9      	ldr	r1, [r7, #12]
 80081ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80081ec:	fb01 f303 	mul.w	r3, r1, r3
 80081f0:	441a      	add	r2, r3
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	22ff      	movs	r2, #255	; 0xff
 80081fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	22ff      	movs	r2, #255	; 0xff
 8008202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d114      	bne.n	8008236 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	691b      	ldr	r3, [r3, #16]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d01a      	beq.n	800824a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	3310      	adds	r3, #16
 8008218:	4618      	mov	r0, r3
 800821a:	f001 fc25 	bl	8009a68 <xTaskRemoveFromEventList>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d012      	beq.n	800824a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008224:	4b0c      	ldr	r3, [pc, #48]	; (8008258 <xQueueGenericReset+0xcc>)
 8008226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800822a:	601a      	str	r2, [r3, #0]
 800822c:	f3bf 8f4f 	dsb	sy
 8008230:	f3bf 8f6f 	isb	sy
 8008234:	e009      	b.n	800824a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	3310      	adds	r3, #16
 800823a:	4618      	mov	r0, r3
 800823c:	f7ff fef2 	bl	8008024 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	3324      	adds	r3, #36	; 0x24
 8008244:	4618      	mov	r0, r3
 8008246:	f7ff feed 	bl	8008024 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800824a:	f002 fc53 	bl	800aaf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800824e:	2301      	movs	r3, #1
}
 8008250:	4618      	mov	r0, r3
 8008252:	3710      	adds	r7, #16
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	e000ed04 	.word	0xe000ed04

0800825c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800825c:	b580      	push	{r7, lr}
 800825e:	b08e      	sub	sp, #56	; 0x38
 8008260:	af02      	add	r7, sp, #8
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	607a      	str	r2, [r7, #4]
 8008268:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10a      	bne.n	8008286 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008282:	bf00      	nop
 8008284:	e7fe      	b.n	8008284 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10a      	bne.n	80082a2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800828c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008290:	f383 8811 	msr	BASEPRI, r3
 8008294:	f3bf 8f6f 	isb	sy
 8008298:	f3bf 8f4f 	dsb	sy
 800829c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800829e:	bf00      	nop
 80082a0:	e7fe      	b.n	80082a0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d002      	beq.n	80082ae <xQueueGenericCreateStatic+0x52>
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d001      	beq.n	80082b2 <xQueueGenericCreateStatic+0x56>
 80082ae:	2301      	movs	r3, #1
 80082b0:	e000      	b.n	80082b4 <xQueueGenericCreateStatic+0x58>
 80082b2:	2300      	movs	r3, #0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10a      	bne.n	80082ce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80082b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082bc:	f383 8811 	msr	BASEPRI, r3
 80082c0:	f3bf 8f6f 	isb	sy
 80082c4:	f3bf 8f4f 	dsb	sy
 80082c8:	623b      	str	r3, [r7, #32]
}
 80082ca:	bf00      	nop
 80082cc:	e7fe      	b.n	80082cc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d102      	bne.n	80082da <xQueueGenericCreateStatic+0x7e>
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d101      	bne.n	80082de <xQueueGenericCreateStatic+0x82>
 80082da:	2301      	movs	r3, #1
 80082dc:	e000      	b.n	80082e0 <xQueueGenericCreateStatic+0x84>
 80082de:	2300      	movs	r3, #0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10a      	bne.n	80082fa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80082e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e8:	f383 8811 	msr	BASEPRI, r3
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	61fb      	str	r3, [r7, #28]
}
 80082f6:	bf00      	nop
 80082f8:	e7fe      	b.n	80082f8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80082fa:	2350      	movs	r3, #80	; 0x50
 80082fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	2b50      	cmp	r3, #80	; 0x50
 8008302:	d00a      	beq.n	800831a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008308:	f383 8811 	msr	BASEPRI, r3
 800830c:	f3bf 8f6f 	isb	sy
 8008310:	f3bf 8f4f 	dsb	sy
 8008314:	61bb      	str	r3, [r7, #24]
}
 8008316:	bf00      	nop
 8008318:	e7fe      	b.n	8008318 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800831a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00d      	beq.n	8008342 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008328:	2201      	movs	r2, #1
 800832a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800832e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008334:	9300      	str	r3, [sp, #0]
 8008336:	4613      	mov	r3, r2
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	68b9      	ldr	r1, [r7, #8]
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f000 f83f 	bl	80083c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008344:	4618      	mov	r0, r3
 8008346:	3730      	adds	r7, #48	; 0x30
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800834c:	b580      	push	{r7, lr}
 800834e:	b08a      	sub	sp, #40	; 0x28
 8008350:	af02      	add	r7, sp, #8
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	4613      	mov	r3, r2
 8008358:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d10a      	bne.n	8008376 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008364:	f383 8811 	msr	BASEPRI, r3
 8008368:	f3bf 8f6f 	isb	sy
 800836c:	f3bf 8f4f 	dsb	sy
 8008370:	613b      	str	r3, [r7, #16]
}
 8008372:	bf00      	nop
 8008374:	e7fe      	b.n	8008374 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	68ba      	ldr	r2, [r7, #8]
 800837a:	fb02 f303 	mul.w	r3, r2, r3
 800837e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008380:	69fb      	ldr	r3, [r7, #28]
 8008382:	3350      	adds	r3, #80	; 0x50
 8008384:	4618      	mov	r0, r3
 8008386:	f002 fca7 	bl	800acd8 <pvPortMalloc>
 800838a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800838c:	69bb      	ldr	r3, [r7, #24]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d011      	beq.n	80083b6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	3350      	adds	r3, #80	; 0x50
 800839a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	2200      	movs	r2, #0
 80083a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80083a4:	79fa      	ldrb	r2, [r7, #7]
 80083a6:	69bb      	ldr	r3, [r7, #24]
 80083a8:	9300      	str	r3, [sp, #0]
 80083aa:	4613      	mov	r3, r2
 80083ac:	697a      	ldr	r2, [r7, #20]
 80083ae:	68b9      	ldr	r1, [r7, #8]
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	f000 f805 	bl	80083c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80083b6:	69bb      	ldr	r3, [r7, #24]
	}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3720      	adds	r7, #32
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	607a      	str	r2, [r7, #4]
 80083cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d103      	bne.n	80083dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80083d4:	69bb      	ldr	r3, [r7, #24]
 80083d6:	69ba      	ldr	r2, [r7, #24]
 80083d8:	601a      	str	r2, [r3, #0]
 80083da:	e002      	b.n	80083e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80083dc:	69bb      	ldr	r3, [r7, #24]
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80083e8:	69bb      	ldr	r3, [r7, #24]
 80083ea:	68ba      	ldr	r2, [r7, #8]
 80083ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80083ee:	2101      	movs	r1, #1
 80083f0:	69b8      	ldr	r0, [r7, #24]
 80083f2:	f7ff fecb 	bl	800818c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	78fa      	ldrb	r2, [r7, #3]
 80083fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80083fe:	bf00      	nop
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008406:	b580      	push	{r7, lr}
 8008408:	b08a      	sub	sp, #40	; 0x28
 800840a:	af02      	add	r7, sp, #8
 800840c:	60f8      	str	r0, [r7, #12]
 800840e:	60b9      	str	r1, [r7, #8]
 8008410:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d10a      	bne.n	800842e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841c:	f383 8811 	msr	BASEPRI, r3
 8008420:	f3bf 8f6f 	isb	sy
 8008424:	f3bf 8f4f 	dsb	sy
 8008428:	61bb      	str	r3, [r7, #24]
}
 800842a:	bf00      	nop
 800842c:	e7fe      	b.n	800842c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800842e:	68ba      	ldr	r2, [r7, #8]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	429a      	cmp	r2, r3
 8008434:	d90a      	bls.n	800844c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843a:	f383 8811 	msr	BASEPRI, r3
 800843e:	f3bf 8f6f 	isb	sy
 8008442:	f3bf 8f4f 	dsb	sy
 8008446:	617b      	str	r3, [r7, #20]
}
 8008448:	bf00      	nop
 800844a:	e7fe      	b.n	800844a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800844c:	2302      	movs	r3, #2
 800844e:	9300      	str	r3, [sp, #0]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	2100      	movs	r1, #0
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f7ff ff00 	bl	800825c <xQueueGenericCreateStatic>
 800845c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d002      	beq.n	800846a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	68ba      	ldr	r2, [r7, #8]
 8008468:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800846a:	69fb      	ldr	r3, [r7, #28]
	}
 800846c:	4618      	mov	r0, r3
 800846e:	3720      	adds	r7, #32
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008474:	b580      	push	{r7, lr}
 8008476:	b086      	sub	sp, #24
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d10a      	bne.n	800849a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008488:	f383 8811 	msr	BASEPRI, r3
 800848c:	f3bf 8f6f 	isb	sy
 8008490:	f3bf 8f4f 	dsb	sy
 8008494:	613b      	str	r3, [r7, #16]
}
 8008496:	bf00      	nop
 8008498:	e7fe      	b.n	8008498 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800849a:	683a      	ldr	r2, [r7, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	429a      	cmp	r2, r3
 80084a0:	d90a      	bls.n	80084b8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80084a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a6:	f383 8811 	msr	BASEPRI, r3
 80084aa:	f3bf 8f6f 	isb	sy
 80084ae:	f3bf 8f4f 	dsb	sy
 80084b2:	60fb      	str	r3, [r7, #12]
}
 80084b4:	bf00      	nop
 80084b6:	e7fe      	b.n	80084b6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80084b8:	2202      	movs	r2, #2
 80084ba:	2100      	movs	r1, #0
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f7ff ff45 	bl	800834c <xQueueGenericCreate>
 80084c2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d002      	beq.n	80084d0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	683a      	ldr	r2, [r7, #0]
 80084ce:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80084d0:	697b      	ldr	r3, [r7, #20]
	}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3718      	adds	r7, #24
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
	...

080084dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b08e      	sub	sp, #56	; 0x38
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	607a      	str	r2, [r7, #4]
 80084e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80084ea:	2300      	movs	r3, #0
 80084ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80084f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d10a      	bne.n	800850e <xQueueGenericSend+0x32>
	__asm volatile
 80084f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fc:	f383 8811 	msr	BASEPRI, r3
 8008500:	f3bf 8f6f 	isb	sy
 8008504:	f3bf 8f4f 	dsb	sy
 8008508:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800850a:	bf00      	nop
 800850c:	e7fe      	b.n	800850c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d103      	bne.n	800851c <xQueueGenericSend+0x40>
 8008514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008518:	2b00      	cmp	r3, #0
 800851a:	d101      	bne.n	8008520 <xQueueGenericSend+0x44>
 800851c:	2301      	movs	r3, #1
 800851e:	e000      	b.n	8008522 <xQueueGenericSend+0x46>
 8008520:	2300      	movs	r3, #0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d10a      	bne.n	800853c <xQueueGenericSend+0x60>
	__asm volatile
 8008526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852a:	f383 8811 	msr	BASEPRI, r3
 800852e:	f3bf 8f6f 	isb	sy
 8008532:	f3bf 8f4f 	dsb	sy
 8008536:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008538:	bf00      	nop
 800853a:	e7fe      	b.n	800853a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	2b02      	cmp	r3, #2
 8008540:	d103      	bne.n	800854a <xQueueGenericSend+0x6e>
 8008542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008546:	2b01      	cmp	r3, #1
 8008548:	d101      	bne.n	800854e <xQueueGenericSend+0x72>
 800854a:	2301      	movs	r3, #1
 800854c:	e000      	b.n	8008550 <xQueueGenericSend+0x74>
 800854e:	2300      	movs	r3, #0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d10a      	bne.n	800856a <xQueueGenericSend+0x8e>
	__asm volatile
 8008554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008558:	f383 8811 	msr	BASEPRI, r3
 800855c:	f3bf 8f6f 	isb	sy
 8008560:	f3bf 8f4f 	dsb	sy
 8008564:	623b      	str	r3, [r7, #32]
}
 8008566:	bf00      	nop
 8008568:	e7fe      	b.n	8008568 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800856a:	f001 fc3b 	bl	8009de4 <xTaskGetSchedulerState>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d102      	bne.n	800857a <xQueueGenericSend+0x9e>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d101      	bne.n	800857e <xQueueGenericSend+0xa2>
 800857a:	2301      	movs	r3, #1
 800857c:	e000      	b.n	8008580 <xQueueGenericSend+0xa4>
 800857e:	2300      	movs	r3, #0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d10a      	bne.n	800859a <xQueueGenericSend+0xbe>
	__asm volatile
 8008584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008588:	f383 8811 	msr	BASEPRI, r3
 800858c:	f3bf 8f6f 	isb	sy
 8008590:	f3bf 8f4f 	dsb	sy
 8008594:	61fb      	str	r3, [r7, #28]
}
 8008596:	bf00      	nop
 8008598:	e7fe      	b.n	8008598 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800859a:	f002 fa7b 	bl	800aa94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800859e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d302      	bcc.n	80085b0 <xQueueGenericSend+0xd4>
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	d129      	bne.n	8008604 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085b0:	683a      	ldr	r2, [r7, #0]
 80085b2:	68b9      	ldr	r1, [r7, #8]
 80085b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085b6:	f000 fc5e 	bl	8008e76 <prvCopyDataToQueue>
 80085ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d010      	beq.n	80085e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c6:	3324      	adds	r3, #36	; 0x24
 80085c8:	4618      	mov	r0, r3
 80085ca:	f001 fa4d 	bl	8009a68 <xTaskRemoveFromEventList>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d013      	beq.n	80085fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80085d4:	4b3f      	ldr	r3, [pc, #252]	; (80086d4 <xQueueGenericSend+0x1f8>)
 80085d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085da:	601a      	str	r2, [r3, #0]
 80085dc:	f3bf 8f4f 	dsb	sy
 80085e0:	f3bf 8f6f 	isb	sy
 80085e4:	e00a      	b.n	80085fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80085e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d007      	beq.n	80085fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80085ec:	4b39      	ldr	r3, [pc, #228]	; (80086d4 <xQueueGenericSend+0x1f8>)
 80085ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085f2:	601a      	str	r2, [r3, #0]
 80085f4:	f3bf 8f4f 	dsb	sy
 80085f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80085fc:	f002 fa7a 	bl	800aaf4 <vPortExitCritical>
				return pdPASS;
 8008600:	2301      	movs	r3, #1
 8008602:	e063      	b.n	80086cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d103      	bne.n	8008612 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800860a:	f002 fa73 	bl	800aaf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800860e:	2300      	movs	r3, #0
 8008610:	e05c      	b.n	80086cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008614:	2b00      	cmp	r3, #0
 8008616:	d106      	bne.n	8008626 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008618:	f107 0314 	add.w	r3, r7, #20
 800861c:	4618      	mov	r0, r3
 800861e:	f001 fa87 	bl	8009b30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008622:	2301      	movs	r3, #1
 8008624:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008626:	f002 fa65 	bl	800aaf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800862a:	f000 fff9 	bl	8009620 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800862e:	f002 fa31 	bl	800aa94 <vPortEnterCritical>
 8008632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008634:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008638:	b25b      	sxtb	r3, r3
 800863a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800863e:	d103      	bne.n	8008648 <xQueueGenericSend+0x16c>
 8008640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008642:	2200      	movs	r2, #0
 8008644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800864e:	b25b      	sxtb	r3, r3
 8008650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008654:	d103      	bne.n	800865e <xQueueGenericSend+0x182>
 8008656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008658:	2200      	movs	r2, #0
 800865a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800865e:	f002 fa49 	bl	800aaf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008662:	1d3a      	adds	r2, r7, #4
 8008664:	f107 0314 	add.w	r3, r7, #20
 8008668:	4611      	mov	r1, r2
 800866a:	4618      	mov	r0, r3
 800866c:	f001 fa76 	bl	8009b5c <xTaskCheckForTimeOut>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d124      	bne.n	80086c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008676:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008678:	f000 fcf5 	bl	8009066 <prvIsQueueFull>
 800867c:	4603      	mov	r3, r0
 800867e:	2b00      	cmp	r3, #0
 8008680:	d018      	beq.n	80086b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008684:	3310      	adds	r3, #16
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	4611      	mov	r1, r2
 800868a:	4618      	mov	r0, r3
 800868c:	f001 f99c 	bl	80099c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008690:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008692:	f000 fc80 	bl	8008f96 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008696:	f000 ffd1 	bl	800963c <xTaskResumeAll>
 800869a:	4603      	mov	r3, r0
 800869c:	2b00      	cmp	r3, #0
 800869e:	f47f af7c 	bne.w	800859a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80086a2:	4b0c      	ldr	r3, [pc, #48]	; (80086d4 <xQueueGenericSend+0x1f8>)
 80086a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086a8:	601a      	str	r2, [r3, #0]
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	f3bf 8f6f 	isb	sy
 80086b2:	e772      	b.n	800859a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80086b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086b6:	f000 fc6e 	bl	8008f96 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086ba:	f000 ffbf 	bl	800963c <xTaskResumeAll>
 80086be:	e76c      	b.n	800859a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80086c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086c2:	f000 fc68 	bl	8008f96 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086c6:	f000 ffb9 	bl	800963c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80086ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3738      	adds	r7, #56	; 0x38
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	e000ed04 	.word	0xe000ed04

080086d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b090      	sub	sp, #64	; 0x40
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	607a      	str	r2, [r7, #4]
 80086e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80086ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d10a      	bne.n	8008706 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80086f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f4:	f383 8811 	msr	BASEPRI, r3
 80086f8:	f3bf 8f6f 	isb	sy
 80086fc:	f3bf 8f4f 	dsb	sy
 8008700:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008702:	bf00      	nop
 8008704:	e7fe      	b.n	8008704 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d103      	bne.n	8008714 <xQueueGenericSendFromISR+0x3c>
 800870c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008710:	2b00      	cmp	r3, #0
 8008712:	d101      	bne.n	8008718 <xQueueGenericSendFromISR+0x40>
 8008714:	2301      	movs	r3, #1
 8008716:	e000      	b.n	800871a <xQueueGenericSendFromISR+0x42>
 8008718:	2300      	movs	r3, #0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d10a      	bne.n	8008734 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800871e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008722:	f383 8811 	msr	BASEPRI, r3
 8008726:	f3bf 8f6f 	isb	sy
 800872a:	f3bf 8f4f 	dsb	sy
 800872e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008730:	bf00      	nop
 8008732:	e7fe      	b.n	8008732 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	2b02      	cmp	r3, #2
 8008738:	d103      	bne.n	8008742 <xQueueGenericSendFromISR+0x6a>
 800873a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800873e:	2b01      	cmp	r3, #1
 8008740:	d101      	bne.n	8008746 <xQueueGenericSendFromISR+0x6e>
 8008742:	2301      	movs	r3, #1
 8008744:	e000      	b.n	8008748 <xQueueGenericSendFromISR+0x70>
 8008746:	2300      	movs	r3, #0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d10a      	bne.n	8008762 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800874c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008750:	f383 8811 	msr	BASEPRI, r3
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	623b      	str	r3, [r7, #32]
}
 800875e:	bf00      	nop
 8008760:	e7fe      	b.n	8008760 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008762:	f002 fa79 	bl	800ac58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008766:	f3ef 8211 	mrs	r2, BASEPRI
 800876a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876e:	f383 8811 	msr	BASEPRI, r3
 8008772:	f3bf 8f6f 	isb	sy
 8008776:	f3bf 8f4f 	dsb	sy
 800877a:	61fa      	str	r2, [r7, #28]
 800877c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800877e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008780:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800878a:	429a      	cmp	r2, r3
 800878c:	d302      	bcc.n	8008794 <xQueueGenericSendFromISR+0xbc>
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	2b02      	cmp	r3, #2
 8008792:	d12f      	bne.n	80087f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008796:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800879a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800879e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80087a4:	683a      	ldr	r2, [r7, #0]
 80087a6:	68b9      	ldr	r1, [r7, #8]
 80087a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80087aa:	f000 fb64 	bl	8008e76 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80087ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80087b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087b6:	d112      	bne.n	80087de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d016      	beq.n	80087ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c2:	3324      	adds	r3, #36	; 0x24
 80087c4:	4618      	mov	r0, r3
 80087c6:	f001 f94f 	bl	8009a68 <xTaskRemoveFromEventList>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d00e      	beq.n	80087ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00b      	beq.n	80087ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2201      	movs	r2, #1
 80087da:	601a      	str	r2, [r3, #0]
 80087dc:	e007      	b.n	80087ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80087de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80087e2:	3301      	adds	r3, #1
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	b25a      	sxtb	r2, r3
 80087e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80087ee:	2301      	movs	r3, #1
 80087f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80087f2:	e001      	b.n	80087f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80087f4:	2300      	movs	r3, #0
 80087f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087fa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008802:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008806:	4618      	mov	r0, r3
 8008808:	3740      	adds	r7, #64	; 0x40
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b08e      	sub	sp, #56	; 0x38
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
 8008816:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800881c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881e:	2b00      	cmp	r3, #0
 8008820:	d10a      	bne.n	8008838 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008826:	f383 8811 	msr	BASEPRI, r3
 800882a:	f3bf 8f6f 	isb	sy
 800882e:	f3bf 8f4f 	dsb	sy
 8008832:	623b      	str	r3, [r7, #32]
}
 8008834:	bf00      	nop
 8008836:	e7fe      	b.n	8008836 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00a      	beq.n	8008856 <xQueueGiveFromISR+0x48>
	__asm volatile
 8008840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008844:	f383 8811 	msr	BASEPRI, r3
 8008848:	f3bf 8f6f 	isb	sy
 800884c:	f3bf 8f4f 	dsb	sy
 8008850:	61fb      	str	r3, [r7, #28]
}
 8008852:	bf00      	nop
 8008854:	e7fe      	b.n	8008854 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d103      	bne.n	8008866 <xQueueGiveFromISR+0x58>
 800885e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d101      	bne.n	800886a <xQueueGiveFromISR+0x5c>
 8008866:	2301      	movs	r3, #1
 8008868:	e000      	b.n	800886c <xQueueGiveFromISR+0x5e>
 800886a:	2300      	movs	r3, #0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10a      	bne.n	8008886 <xQueueGiveFromISR+0x78>
	__asm volatile
 8008870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008874:	f383 8811 	msr	BASEPRI, r3
 8008878:	f3bf 8f6f 	isb	sy
 800887c:	f3bf 8f4f 	dsb	sy
 8008880:	61bb      	str	r3, [r7, #24]
}
 8008882:	bf00      	nop
 8008884:	e7fe      	b.n	8008884 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008886:	f002 f9e7 	bl	800ac58 <vPortValidateInterruptPriority>
	__asm volatile
 800888a:	f3ef 8211 	mrs	r2, BASEPRI
 800888e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008892:	f383 8811 	msr	BASEPRI, r3
 8008896:	f3bf 8f6f 	isb	sy
 800889a:	f3bf 8f4f 	dsb	sy
 800889e:	617a      	str	r2, [r7, #20]
 80088a0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80088a2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80088a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80088ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d22b      	bcs.n	800890e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80088b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80088c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c2:	1c5a      	adds	r2, r3, #1
 80088c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80088c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80088cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d0:	d112      	bne.n	80088f8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d016      	beq.n	8008908 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088dc:	3324      	adds	r3, #36	; 0x24
 80088de:	4618      	mov	r0, r3
 80088e0:	f001 f8c2 	bl	8009a68 <xTaskRemoveFromEventList>
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00e      	beq.n	8008908 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d00b      	beq.n	8008908 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	2201      	movs	r2, #1
 80088f4:	601a      	str	r2, [r3, #0]
 80088f6:	e007      	b.n	8008908 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80088f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088fc:	3301      	adds	r3, #1
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	b25a      	sxtb	r2, r3
 8008902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008908:	2301      	movs	r3, #1
 800890a:	637b      	str	r3, [r7, #52]	; 0x34
 800890c:	e001      	b.n	8008912 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800890e:	2300      	movs	r3, #0
 8008910:	637b      	str	r3, [r7, #52]	; 0x34
 8008912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008914:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f383 8811 	msr	BASEPRI, r3
}
 800891c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800891e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008920:	4618      	mov	r0, r3
 8008922:	3738      	adds	r7, #56	; 0x38
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b08c      	sub	sp, #48	; 0x30
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008934:	2300      	movs	r3, #0
 8008936:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800893c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893e:	2b00      	cmp	r3, #0
 8008940:	d10a      	bne.n	8008958 <xQueueReceive+0x30>
	__asm volatile
 8008942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008946:	f383 8811 	msr	BASEPRI, r3
 800894a:	f3bf 8f6f 	isb	sy
 800894e:	f3bf 8f4f 	dsb	sy
 8008952:	623b      	str	r3, [r7, #32]
}
 8008954:	bf00      	nop
 8008956:	e7fe      	b.n	8008956 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d103      	bne.n	8008966 <xQueueReceive+0x3e>
 800895e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008962:	2b00      	cmp	r3, #0
 8008964:	d101      	bne.n	800896a <xQueueReceive+0x42>
 8008966:	2301      	movs	r3, #1
 8008968:	e000      	b.n	800896c <xQueueReceive+0x44>
 800896a:	2300      	movs	r3, #0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10a      	bne.n	8008986 <xQueueReceive+0x5e>
	__asm volatile
 8008970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008974:	f383 8811 	msr	BASEPRI, r3
 8008978:	f3bf 8f6f 	isb	sy
 800897c:	f3bf 8f4f 	dsb	sy
 8008980:	61fb      	str	r3, [r7, #28]
}
 8008982:	bf00      	nop
 8008984:	e7fe      	b.n	8008984 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008986:	f001 fa2d 	bl	8009de4 <xTaskGetSchedulerState>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d102      	bne.n	8008996 <xQueueReceive+0x6e>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d101      	bne.n	800899a <xQueueReceive+0x72>
 8008996:	2301      	movs	r3, #1
 8008998:	e000      	b.n	800899c <xQueueReceive+0x74>
 800899a:	2300      	movs	r3, #0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d10a      	bne.n	80089b6 <xQueueReceive+0x8e>
	__asm volatile
 80089a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a4:	f383 8811 	msr	BASEPRI, r3
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	61bb      	str	r3, [r7, #24]
}
 80089b2:	bf00      	nop
 80089b4:	e7fe      	b.n	80089b4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80089b6:	f002 f86d 	bl	800aa94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089be:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d01f      	beq.n	8008a06 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80089c6:	68b9      	ldr	r1, [r7, #8]
 80089c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089ca:	f000 fabe 	bl	8008f4a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80089ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d0:	1e5a      	subs	r2, r3, #1
 80089d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d8:	691b      	ldr	r3, [r3, #16]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00f      	beq.n	80089fe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e0:	3310      	adds	r3, #16
 80089e2:	4618      	mov	r0, r3
 80089e4:	f001 f840 	bl	8009a68 <xTaskRemoveFromEventList>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d007      	beq.n	80089fe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80089ee:	4b3d      	ldr	r3, [pc, #244]	; (8008ae4 <xQueueReceive+0x1bc>)
 80089f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089f4:	601a      	str	r2, [r3, #0]
 80089f6:	f3bf 8f4f 	dsb	sy
 80089fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80089fe:	f002 f879 	bl	800aaf4 <vPortExitCritical>
				return pdPASS;
 8008a02:	2301      	movs	r3, #1
 8008a04:	e069      	b.n	8008ada <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d103      	bne.n	8008a14 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a0c:	f002 f872 	bl	800aaf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a10:	2300      	movs	r3, #0
 8008a12:	e062      	b.n	8008ada <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d106      	bne.n	8008a28 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a1a:	f107 0310 	add.w	r3, r7, #16
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f001 f886 	bl	8009b30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a24:	2301      	movs	r3, #1
 8008a26:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a28:	f002 f864 	bl	800aaf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a2c:	f000 fdf8 	bl	8009620 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a30:	f002 f830 	bl	800aa94 <vPortEnterCritical>
 8008a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a3a:	b25b      	sxtb	r3, r3
 8008a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a40:	d103      	bne.n	8008a4a <xQueueReceive+0x122>
 8008a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a50:	b25b      	sxtb	r3, r3
 8008a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a56:	d103      	bne.n	8008a60 <xQueueReceive+0x138>
 8008a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a60:	f002 f848 	bl	800aaf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a64:	1d3a      	adds	r2, r7, #4
 8008a66:	f107 0310 	add.w	r3, r7, #16
 8008a6a:	4611      	mov	r1, r2
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f001 f875 	bl	8009b5c <xTaskCheckForTimeOut>
 8008a72:	4603      	mov	r3, r0
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d123      	bne.n	8008ac0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a7a:	f000 fade 	bl	800903a <prvIsQueueEmpty>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d017      	beq.n	8008ab4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a86:	3324      	adds	r3, #36	; 0x24
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	4611      	mov	r1, r2
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f000 ff9b 	bl	80099c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008a92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a94:	f000 fa7f 	bl	8008f96 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008a98:	f000 fdd0 	bl	800963c <xTaskResumeAll>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d189      	bne.n	80089b6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008aa2:	4b10      	ldr	r3, [pc, #64]	; (8008ae4 <xQueueReceive+0x1bc>)
 8008aa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008aa8:	601a      	str	r2, [r3, #0]
 8008aaa:	f3bf 8f4f 	dsb	sy
 8008aae:	f3bf 8f6f 	isb	sy
 8008ab2:	e780      	b.n	80089b6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008ab4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ab6:	f000 fa6e 	bl	8008f96 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008aba:	f000 fdbf 	bl	800963c <xTaskResumeAll>
 8008abe:	e77a      	b.n	80089b6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008ac0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ac2:	f000 fa68 	bl	8008f96 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ac6:	f000 fdb9 	bl	800963c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008aca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008acc:	f000 fab5 	bl	800903a <prvIsQueueEmpty>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	f43f af6f 	beq.w	80089b6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008ad8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3730      	adds	r7, #48	; 0x30
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	e000ed04 	.word	0xe000ed04

08008ae8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b08e      	sub	sp, #56	; 0x38
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008af2:	2300      	movs	r3, #0
 8008af4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008afa:	2300      	movs	r3, #0
 8008afc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d10a      	bne.n	8008b1a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b08:	f383 8811 	msr	BASEPRI, r3
 8008b0c:	f3bf 8f6f 	isb	sy
 8008b10:	f3bf 8f4f 	dsb	sy
 8008b14:	623b      	str	r3, [r7, #32]
}
 8008b16:	bf00      	nop
 8008b18:	e7fe      	b.n	8008b18 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d00a      	beq.n	8008b38 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b26:	f383 8811 	msr	BASEPRI, r3
 8008b2a:	f3bf 8f6f 	isb	sy
 8008b2e:	f3bf 8f4f 	dsb	sy
 8008b32:	61fb      	str	r3, [r7, #28]
}
 8008b34:	bf00      	nop
 8008b36:	e7fe      	b.n	8008b36 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b38:	f001 f954 	bl	8009de4 <xTaskGetSchedulerState>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d102      	bne.n	8008b48 <xQueueSemaphoreTake+0x60>
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d101      	bne.n	8008b4c <xQueueSemaphoreTake+0x64>
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e000      	b.n	8008b4e <xQueueSemaphoreTake+0x66>
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d10a      	bne.n	8008b68 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b56:	f383 8811 	msr	BASEPRI, r3
 8008b5a:	f3bf 8f6f 	isb	sy
 8008b5e:	f3bf 8f4f 	dsb	sy
 8008b62:	61bb      	str	r3, [r7, #24]
}
 8008b64:	bf00      	nop
 8008b66:	e7fe      	b.n	8008b66 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b68:	f001 ff94 	bl	800aa94 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b70:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d024      	beq.n	8008bc2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7a:	1e5a      	subs	r2, r3, #1
 8008b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d104      	bne.n	8008b92 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008b88:	f001 faa2 	bl	800a0d0 <pvTaskIncrementMutexHeldCount>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b90:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b94:	691b      	ldr	r3, [r3, #16]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00f      	beq.n	8008bba <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b9c:	3310      	adds	r3, #16
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f000 ff62 	bl	8009a68 <xTaskRemoveFromEventList>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d007      	beq.n	8008bba <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008baa:	4b54      	ldr	r3, [pc, #336]	; (8008cfc <xQueueSemaphoreTake+0x214>)
 8008bac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bb0:	601a      	str	r2, [r3, #0]
 8008bb2:	f3bf 8f4f 	dsb	sy
 8008bb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008bba:	f001 ff9b 	bl	800aaf4 <vPortExitCritical>
				return pdPASS;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e097      	b.n	8008cf2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d111      	bne.n	8008bec <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d00a      	beq.n	8008be4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd2:	f383 8811 	msr	BASEPRI, r3
 8008bd6:	f3bf 8f6f 	isb	sy
 8008bda:	f3bf 8f4f 	dsb	sy
 8008bde:	617b      	str	r3, [r7, #20]
}
 8008be0:	bf00      	nop
 8008be2:	e7fe      	b.n	8008be2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008be4:	f001 ff86 	bl	800aaf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008be8:	2300      	movs	r3, #0
 8008bea:	e082      	b.n	8008cf2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d106      	bne.n	8008c00 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008bf2:	f107 030c 	add.w	r3, r7, #12
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f000 ff9a 	bl	8009b30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c00:	f001 ff78 	bl	800aaf4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c04:	f000 fd0c 	bl	8009620 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c08:	f001 ff44 	bl	800aa94 <vPortEnterCritical>
 8008c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c12:	b25b      	sxtb	r3, r3
 8008c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c18:	d103      	bne.n	8008c22 <xQueueSemaphoreTake+0x13a>
 8008c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c28:	b25b      	sxtb	r3, r3
 8008c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c2e:	d103      	bne.n	8008c38 <xQueueSemaphoreTake+0x150>
 8008c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c32:	2200      	movs	r2, #0
 8008c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c38:	f001 ff5c 	bl	800aaf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c3c:	463a      	mov	r2, r7
 8008c3e:	f107 030c 	add.w	r3, r7, #12
 8008c42:	4611      	mov	r1, r2
 8008c44:	4618      	mov	r0, r3
 8008c46:	f000 ff89 	bl	8009b5c <xTaskCheckForTimeOut>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d132      	bne.n	8008cb6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c52:	f000 f9f2 	bl	800903a <prvIsQueueEmpty>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d026      	beq.n	8008caa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d109      	bne.n	8008c78 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008c64:	f001 ff16 	bl	800aa94 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f001 f8d7 	bl	8009e20 <xTaskPriorityInherit>
 8008c72:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008c74:	f001 ff3e 	bl	800aaf4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c7a:	3324      	adds	r3, #36	; 0x24
 8008c7c:	683a      	ldr	r2, [r7, #0]
 8008c7e:	4611      	mov	r1, r2
 8008c80:	4618      	mov	r0, r3
 8008c82:	f000 fea1 	bl	80099c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008c86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c88:	f000 f985 	bl	8008f96 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008c8c:	f000 fcd6 	bl	800963c <xTaskResumeAll>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f47f af68 	bne.w	8008b68 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008c98:	4b18      	ldr	r3, [pc, #96]	; (8008cfc <xQueueSemaphoreTake+0x214>)
 8008c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c9e:	601a      	str	r2, [r3, #0]
 8008ca0:	f3bf 8f4f 	dsb	sy
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	e75e      	b.n	8008b68 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008caa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008cac:	f000 f973 	bl	8008f96 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008cb0:	f000 fcc4 	bl	800963c <xTaskResumeAll>
 8008cb4:	e758      	b.n	8008b68 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008cb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008cb8:	f000 f96d 	bl	8008f96 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008cbc:	f000 fcbe 	bl	800963c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008cc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008cc2:	f000 f9ba 	bl	800903a <prvIsQueueEmpty>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f43f af4d 	beq.w	8008b68 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00d      	beq.n	8008cf0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008cd4:	f001 fede 	bl	800aa94 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008cd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008cda:	f000 f8b4 	bl	8008e46 <prvGetDisinheritPriorityAfterTimeout>
 8008cde:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f001 f970 	bl	8009fcc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008cec:	f001 ff02 	bl	800aaf4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008cf0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3738      	adds	r7, #56	; 0x38
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	e000ed04 	.word	0xe000ed04

08008d00 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b08e      	sub	sp, #56	; 0x38
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	60b9      	str	r1, [r7, #8]
 8008d0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d10a      	bne.n	8008d2c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d1a:	f383 8811 	msr	BASEPRI, r3
 8008d1e:	f3bf 8f6f 	isb	sy
 8008d22:	f3bf 8f4f 	dsb	sy
 8008d26:	623b      	str	r3, [r7, #32]
}
 8008d28:	bf00      	nop
 8008d2a:	e7fe      	b.n	8008d2a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d103      	bne.n	8008d3a <xQueueReceiveFromISR+0x3a>
 8008d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d101      	bne.n	8008d3e <xQueueReceiveFromISR+0x3e>
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e000      	b.n	8008d40 <xQueueReceiveFromISR+0x40>
 8008d3e:	2300      	movs	r3, #0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d10a      	bne.n	8008d5a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d48:	f383 8811 	msr	BASEPRI, r3
 8008d4c:	f3bf 8f6f 	isb	sy
 8008d50:	f3bf 8f4f 	dsb	sy
 8008d54:	61fb      	str	r3, [r7, #28]
}
 8008d56:	bf00      	nop
 8008d58:	e7fe      	b.n	8008d58 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d5a:	f001 ff7d 	bl	800ac58 <vPortValidateInterruptPriority>
	__asm volatile
 8008d5e:	f3ef 8211 	mrs	r2, BASEPRI
 8008d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d66:	f383 8811 	msr	BASEPRI, r3
 8008d6a:	f3bf 8f6f 	isb	sy
 8008d6e:	f3bf 8f4f 	dsb	sy
 8008d72:	61ba      	str	r2, [r7, #24]
 8008d74:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008d76:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008d78:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d7e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d02f      	beq.n	8008de6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d90:	68b9      	ldr	r1, [r7, #8]
 8008d92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d94:	f000 f8d9 	bl	8008f4a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d9a:	1e5a      	subs	r2, r3, #1
 8008d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008da0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da8:	d112      	bne.n	8008dd0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dac:	691b      	ldr	r3, [r3, #16]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d016      	beq.n	8008de0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db4:	3310      	adds	r3, #16
 8008db6:	4618      	mov	r0, r3
 8008db8:	f000 fe56 	bl	8009a68 <xTaskRemoveFromEventList>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00e      	beq.n	8008de0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d00b      	beq.n	8008de0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	601a      	str	r2, [r3, #0]
 8008dce:	e007      	b.n	8008de0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	b25a      	sxtb	r2, r3
 8008dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008de0:	2301      	movs	r3, #1
 8008de2:	637b      	str	r3, [r7, #52]	; 0x34
 8008de4:	e001      	b.n	8008dea <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008de6:	2300      	movs	r3, #0
 8008de8:	637b      	str	r3, [r7, #52]	; 0x34
 8008dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dec:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	f383 8811 	msr	BASEPRI, r3
}
 8008df4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3738      	adds	r7, #56	; 0x38
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d10a      	bne.n	8008e28 <vQueueDelete+0x28>
	__asm volatile
 8008e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e16:	f383 8811 	msr	BASEPRI, r3
 8008e1a:	f3bf 8f6f 	isb	sy
 8008e1e:	f3bf 8f4f 	dsb	sy
 8008e22:	60bb      	str	r3, [r7, #8]
}
 8008e24:	bf00      	nop
 8008e26:	e7fe      	b.n	8008e26 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f000 f95f 	bl	80090ec <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d102      	bne.n	8008e3e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008e38:	68f8      	ldr	r0, [r7, #12]
 8008e3a:	f002 f819 	bl	800ae70 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008e3e:	bf00      	nop
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008e46:	b480      	push	{r7}
 8008e48:	b085      	sub	sp, #20
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d006      	beq.n	8008e64 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008e60:	60fb      	str	r3, [r7, #12]
 8008e62:	e001      	b.n	8008e68 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008e64:	2300      	movs	r3, #0
 8008e66:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008e68:	68fb      	ldr	r3, [r7, #12]
	}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3714      	adds	r7, #20
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr

08008e76 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b086      	sub	sp, #24
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	60f8      	str	r0, [r7, #12]
 8008e7e:	60b9      	str	r1, [r7, #8]
 8008e80:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008e82:	2300      	movs	r3, #0
 8008e84:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e8a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d10d      	bne.n	8008eb0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d14d      	bne.n	8008f38 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f001 f825 	bl	8009ef0 <xTaskPriorityDisinherit>
 8008ea6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	609a      	str	r2, [r3, #8]
 8008eae:	e043      	b.n	8008f38 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d119      	bne.n	8008eea <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	6858      	ldr	r0, [r3, #4]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	68b9      	ldr	r1, [r7, #8]
 8008ec2:	f002 f96b 	bl	800b19c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	685a      	ldr	r2, [r3, #4]
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ece:	441a      	add	r2, r3
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	685a      	ldr	r2, [r3, #4]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d32b      	bcc.n	8008f38 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	605a      	str	r2, [r3, #4]
 8008ee8:	e026      	b.n	8008f38 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	68d8      	ldr	r0, [r3, #12]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	68b9      	ldr	r1, [r7, #8]
 8008ef6:	f002 f951 	bl	800b19c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	68da      	ldr	r2, [r3, #12]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f02:	425b      	negs	r3, r3
 8008f04:	441a      	add	r2, r3
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	68da      	ldr	r2, [r3, #12]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d207      	bcs.n	8008f26 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	689a      	ldr	r2, [r3, #8]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f1e:	425b      	negs	r3, r3
 8008f20:	441a      	add	r2, r3
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	d105      	bne.n	8008f38 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d002      	beq.n	8008f38 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	3b01      	subs	r3, #1
 8008f36:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	1c5a      	adds	r2, r3, #1
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008f40:	697b      	ldr	r3, [r7, #20]
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3718      	adds	r7, #24
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b082      	sub	sp, #8
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
 8008f52:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d018      	beq.n	8008f8e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	68da      	ldr	r2, [r3, #12]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f64:	441a      	add	r2, r3
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	68da      	ldr	r2, [r3, #12]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d303      	bcc.n	8008f7e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	68d9      	ldr	r1, [r3, #12]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f86:	461a      	mov	r2, r3
 8008f88:	6838      	ldr	r0, [r7, #0]
 8008f8a:	f002 f907 	bl	800b19c <memcpy>
	}
}
 8008f8e:	bf00      	nop
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b084      	sub	sp, #16
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008f9e:	f001 fd79 	bl	800aa94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fa8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008faa:	e011      	b.n	8008fd0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d012      	beq.n	8008fda <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	3324      	adds	r3, #36	; 0x24
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f000 fd55 	bl	8009a68 <xTaskRemoveFromEventList>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d001      	beq.n	8008fc8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008fc4:	f000 fe2c 	bl	8009c20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008fc8:	7bfb      	ldrb	r3, [r7, #15]
 8008fca:	3b01      	subs	r3, #1
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	dce9      	bgt.n	8008fac <prvUnlockQueue+0x16>
 8008fd8:	e000      	b.n	8008fdc <prvUnlockQueue+0x46>
					break;
 8008fda:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	22ff      	movs	r2, #255	; 0xff
 8008fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008fe4:	f001 fd86 	bl	800aaf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008fe8:	f001 fd54 	bl	800aa94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ff2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ff4:	e011      	b.n	800901a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d012      	beq.n	8009024 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	3310      	adds	r3, #16
 8009002:	4618      	mov	r0, r3
 8009004:	f000 fd30 	bl	8009a68 <xTaskRemoveFromEventList>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d001      	beq.n	8009012 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800900e:	f000 fe07 	bl	8009c20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009012:	7bbb      	ldrb	r3, [r7, #14]
 8009014:	3b01      	subs	r3, #1
 8009016:	b2db      	uxtb	r3, r3
 8009018:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800901a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800901e:	2b00      	cmp	r3, #0
 8009020:	dce9      	bgt.n	8008ff6 <prvUnlockQueue+0x60>
 8009022:	e000      	b.n	8009026 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009024:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	22ff      	movs	r2, #255	; 0xff
 800902a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800902e:	f001 fd61 	bl	800aaf4 <vPortExitCritical>
}
 8009032:	bf00      	nop
 8009034:	3710      	adds	r7, #16
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b084      	sub	sp, #16
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009042:	f001 fd27 	bl	800aa94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800904a:	2b00      	cmp	r3, #0
 800904c:	d102      	bne.n	8009054 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800904e:	2301      	movs	r3, #1
 8009050:	60fb      	str	r3, [r7, #12]
 8009052:	e001      	b.n	8009058 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009054:	2300      	movs	r3, #0
 8009056:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009058:	f001 fd4c 	bl	800aaf4 <vPortExitCritical>

	return xReturn;
 800905c:	68fb      	ldr	r3, [r7, #12]
}
 800905e:	4618      	mov	r0, r3
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b084      	sub	sp, #16
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800906e:	f001 fd11 	bl	800aa94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800907a:	429a      	cmp	r2, r3
 800907c:	d102      	bne.n	8009084 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800907e:	2301      	movs	r3, #1
 8009080:	60fb      	str	r3, [r7, #12]
 8009082:	e001      	b.n	8009088 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009084:	2300      	movs	r3, #0
 8009086:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009088:	f001 fd34 	bl	800aaf4 <vPortExitCritical>

	return xReturn;
 800908c:	68fb      	ldr	r3, [r7, #12]
}
 800908e:	4618      	mov	r0, r3
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
	...

08009098 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009098:	b480      	push	{r7}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090a2:	2300      	movs	r3, #0
 80090a4:	60fb      	str	r3, [r7, #12]
 80090a6:	e014      	b.n	80090d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80090a8:	4a0f      	ldr	r2, [pc, #60]	; (80090e8 <vQueueAddToRegistry+0x50>)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d10b      	bne.n	80090cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80090b4:	490c      	ldr	r1, [pc, #48]	; (80090e8 <vQueueAddToRegistry+0x50>)
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	683a      	ldr	r2, [r7, #0]
 80090ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80090be:	4a0a      	ldr	r2, [pc, #40]	; (80090e8 <vQueueAddToRegistry+0x50>)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	00db      	lsls	r3, r3, #3
 80090c4:	4413      	add	r3, r2
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80090ca:	e006      	b.n	80090da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	3301      	adds	r3, #1
 80090d0:	60fb      	str	r3, [r7, #12]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2b07      	cmp	r3, #7
 80090d6:	d9e7      	bls.n	80090a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80090d8:	bf00      	nop
 80090da:	bf00      	nop
 80090dc:	3714      	adds	r7, #20
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop
 80090e8:	20000ad0 	.word	0x20000ad0

080090ec <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80090ec:	b480      	push	{r7}
 80090ee:	b085      	sub	sp, #20
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090f4:	2300      	movs	r3, #0
 80090f6:	60fb      	str	r3, [r7, #12]
 80090f8:	e016      	b.n	8009128 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80090fa:	4a10      	ldr	r2, [pc, #64]	; (800913c <vQueueUnregisterQueue+0x50>)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	00db      	lsls	r3, r3, #3
 8009100:	4413      	add	r3, r2
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	429a      	cmp	r2, r3
 8009108:	d10b      	bne.n	8009122 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800910a:	4a0c      	ldr	r2, [pc, #48]	; (800913c <vQueueUnregisterQueue+0x50>)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2100      	movs	r1, #0
 8009110:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009114:	4a09      	ldr	r2, [pc, #36]	; (800913c <vQueueUnregisterQueue+0x50>)
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	00db      	lsls	r3, r3, #3
 800911a:	4413      	add	r3, r2
 800911c:	2200      	movs	r2, #0
 800911e:	605a      	str	r2, [r3, #4]
				break;
 8009120:	e006      	b.n	8009130 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	3301      	adds	r3, #1
 8009126:	60fb      	str	r3, [r7, #12]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2b07      	cmp	r3, #7
 800912c:	d9e5      	bls.n	80090fa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800912e:	bf00      	nop
 8009130:	bf00      	nop
 8009132:	3714      	adds	r7, #20
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr
 800913c:	20000ad0 	.word	0x20000ad0

08009140 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009140:	b580      	push	{r7, lr}
 8009142:	b086      	sub	sp, #24
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009150:	f001 fca0 	bl	800aa94 <vPortEnterCritical>
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800915a:	b25b      	sxtb	r3, r3
 800915c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009160:	d103      	bne.n	800916a <vQueueWaitForMessageRestricted+0x2a>
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	2200      	movs	r2, #0
 8009166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009170:	b25b      	sxtb	r3, r3
 8009172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009176:	d103      	bne.n	8009180 <vQueueWaitForMessageRestricted+0x40>
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	2200      	movs	r2, #0
 800917c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009180:	f001 fcb8 	bl	800aaf4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009188:	2b00      	cmp	r3, #0
 800918a:	d106      	bne.n	800919a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	3324      	adds	r3, #36	; 0x24
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	68b9      	ldr	r1, [r7, #8]
 8009194:	4618      	mov	r0, r3
 8009196:	f000 fc3b 	bl	8009a10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800919a:	6978      	ldr	r0, [r7, #20]
 800919c:	f7ff fefb 	bl	8008f96 <prvUnlockQueue>
	}
 80091a0:	bf00      	nop
 80091a2:	3718      	adds	r7, #24
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b08e      	sub	sp, #56	; 0x38
 80091ac:	af04      	add	r7, sp, #16
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	607a      	str	r2, [r7, #4]
 80091b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80091b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d10a      	bne.n	80091d2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80091bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c0:	f383 8811 	msr	BASEPRI, r3
 80091c4:	f3bf 8f6f 	isb	sy
 80091c8:	f3bf 8f4f 	dsb	sy
 80091cc:	623b      	str	r3, [r7, #32]
}
 80091ce:	bf00      	nop
 80091d0:	e7fe      	b.n	80091d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80091d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d10a      	bne.n	80091ee <xTaskCreateStatic+0x46>
	__asm volatile
 80091d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091dc:	f383 8811 	msr	BASEPRI, r3
 80091e0:	f3bf 8f6f 	isb	sy
 80091e4:	f3bf 8f4f 	dsb	sy
 80091e8:	61fb      	str	r3, [r7, #28]
}
 80091ea:	bf00      	nop
 80091ec:	e7fe      	b.n	80091ec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80091ee:	235c      	movs	r3, #92	; 0x5c
 80091f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	2b5c      	cmp	r3, #92	; 0x5c
 80091f6:	d00a      	beq.n	800920e <xTaskCreateStatic+0x66>
	__asm volatile
 80091f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fc:	f383 8811 	msr	BASEPRI, r3
 8009200:	f3bf 8f6f 	isb	sy
 8009204:	f3bf 8f4f 	dsb	sy
 8009208:	61bb      	str	r3, [r7, #24]
}
 800920a:	bf00      	nop
 800920c:	e7fe      	b.n	800920c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800920e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009212:	2b00      	cmp	r3, #0
 8009214:	d01e      	beq.n	8009254 <xTaskCreateStatic+0xac>
 8009216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009218:	2b00      	cmp	r3, #0
 800921a:	d01b      	beq.n	8009254 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800921c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800921e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009222:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009224:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009228:	2202      	movs	r2, #2
 800922a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800922e:	2300      	movs	r3, #0
 8009230:	9303      	str	r3, [sp, #12]
 8009232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009234:	9302      	str	r3, [sp, #8]
 8009236:	f107 0314 	add.w	r3, r7, #20
 800923a:	9301      	str	r3, [sp, #4]
 800923c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800923e:	9300      	str	r3, [sp, #0]
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	68b9      	ldr	r1, [r7, #8]
 8009246:	68f8      	ldr	r0, [r7, #12]
 8009248:	f000 f850 	bl	80092ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800924c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800924e:	f000 f8dd 	bl	800940c <prvAddNewTaskToReadyList>
 8009252:	e001      	b.n	8009258 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009254:	2300      	movs	r3, #0
 8009256:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009258:	697b      	ldr	r3, [r7, #20]
	}
 800925a:	4618      	mov	r0, r3
 800925c:	3728      	adds	r7, #40	; 0x28
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}

08009262 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009262:	b580      	push	{r7, lr}
 8009264:	b08c      	sub	sp, #48	; 0x30
 8009266:	af04      	add	r7, sp, #16
 8009268:	60f8      	str	r0, [r7, #12]
 800926a:	60b9      	str	r1, [r7, #8]
 800926c:	603b      	str	r3, [r7, #0]
 800926e:	4613      	mov	r3, r2
 8009270:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009272:	88fb      	ldrh	r3, [r7, #6]
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	4618      	mov	r0, r3
 8009278:	f001 fd2e 	bl	800acd8 <pvPortMalloc>
 800927c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d00e      	beq.n	80092a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009284:	205c      	movs	r0, #92	; 0x5c
 8009286:	f001 fd27 	bl	800acd8 <pvPortMalloc>
 800928a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d003      	beq.n	800929a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	697a      	ldr	r2, [r7, #20]
 8009296:	631a      	str	r2, [r3, #48]	; 0x30
 8009298:	e005      	b.n	80092a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800929a:	6978      	ldr	r0, [r7, #20]
 800929c:	f001 fde8 	bl	800ae70 <vPortFree>
 80092a0:	e001      	b.n	80092a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80092a2:	2300      	movs	r3, #0
 80092a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80092a6:	69fb      	ldr	r3, [r7, #28]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d017      	beq.n	80092dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80092b4:	88fa      	ldrh	r2, [r7, #6]
 80092b6:	2300      	movs	r3, #0
 80092b8:	9303      	str	r3, [sp, #12]
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	9302      	str	r3, [sp, #8]
 80092be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c0:	9301      	str	r3, [sp, #4]
 80092c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c4:	9300      	str	r3, [sp, #0]
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	68b9      	ldr	r1, [r7, #8]
 80092ca:	68f8      	ldr	r0, [r7, #12]
 80092cc:	f000 f80e 	bl	80092ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092d0:	69f8      	ldr	r0, [r7, #28]
 80092d2:	f000 f89b 	bl	800940c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80092d6:	2301      	movs	r3, #1
 80092d8:	61bb      	str	r3, [r7, #24]
 80092da:	e002      	b.n	80092e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80092dc:	f04f 33ff 	mov.w	r3, #4294967295
 80092e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80092e2:	69bb      	ldr	r3, [r7, #24]
	}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3720      	adds	r7, #32
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b088      	sub	sp, #32
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	60b9      	str	r1, [r7, #8]
 80092f6:	607a      	str	r2, [r7, #4]
 80092f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80092fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	461a      	mov	r2, r3
 8009304:	21a5      	movs	r1, #165	; 0xa5
 8009306:	f001 ff57 	bl	800b1b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800930a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009314:	3b01      	subs	r3, #1
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	4413      	add	r3, r2
 800931a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800931c:	69bb      	ldr	r3, [r7, #24]
 800931e:	f023 0307 	bic.w	r3, r3, #7
 8009322:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009324:	69bb      	ldr	r3, [r7, #24]
 8009326:	f003 0307 	and.w	r3, r3, #7
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00a      	beq.n	8009344 <prvInitialiseNewTask+0x58>
	__asm volatile
 800932e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009332:	f383 8811 	msr	BASEPRI, r3
 8009336:	f3bf 8f6f 	isb	sy
 800933a:	f3bf 8f4f 	dsb	sy
 800933e:	617b      	str	r3, [r7, #20]
}
 8009340:	bf00      	nop
 8009342:	e7fe      	b.n	8009342 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d01f      	beq.n	800938a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800934a:	2300      	movs	r3, #0
 800934c:	61fb      	str	r3, [r7, #28]
 800934e:	e012      	b.n	8009376 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009350:	68ba      	ldr	r2, [r7, #8]
 8009352:	69fb      	ldr	r3, [r7, #28]
 8009354:	4413      	add	r3, r2
 8009356:	7819      	ldrb	r1, [r3, #0]
 8009358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	4413      	add	r3, r2
 800935e:	3334      	adds	r3, #52	; 0x34
 8009360:	460a      	mov	r2, r1
 8009362:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009364:	68ba      	ldr	r2, [r7, #8]
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	4413      	add	r3, r2
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d006      	beq.n	800937e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	3301      	adds	r3, #1
 8009374:	61fb      	str	r3, [r7, #28]
 8009376:	69fb      	ldr	r3, [r7, #28]
 8009378:	2b0f      	cmp	r3, #15
 800937a:	d9e9      	bls.n	8009350 <prvInitialiseNewTask+0x64>
 800937c:	e000      	b.n	8009380 <prvInitialiseNewTask+0x94>
			{
				break;
 800937e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009382:	2200      	movs	r2, #0
 8009384:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009388:	e003      	b.n	8009392 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800938a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800938c:	2200      	movs	r2, #0
 800938e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009394:	2b37      	cmp	r3, #55	; 0x37
 8009396:	d901      	bls.n	800939c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009398:	2337      	movs	r3, #55	; 0x37
 800939a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800939c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800939e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80093a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093a6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80093a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093aa:	2200      	movs	r2, #0
 80093ac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80093ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b0:	3304      	adds	r3, #4
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7fe fe56 	bl	8008064 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80093b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ba:	3318      	adds	r3, #24
 80093bc:	4618      	mov	r0, r3
 80093be:	f7fe fe51 	bl	8008064 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80093c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80093ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80093d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80093d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093da:	2200      	movs	r2, #0
 80093dc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80093de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e0:	2200      	movs	r2, #0
 80093e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80093e6:	683a      	ldr	r2, [r7, #0]
 80093e8:	68f9      	ldr	r1, [r7, #12]
 80093ea:	69b8      	ldr	r0, [r7, #24]
 80093ec:	f001 fa26 	bl	800a83c <pxPortInitialiseStack>
 80093f0:	4602      	mov	r2, r0
 80093f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80093f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d002      	beq.n	8009402 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80093fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009400:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009402:	bf00      	nop
 8009404:	3720      	adds	r7, #32
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
	...

0800940c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009414:	f001 fb3e 	bl	800aa94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009418:	4b2d      	ldr	r3, [pc, #180]	; (80094d0 <prvAddNewTaskToReadyList+0xc4>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	3301      	adds	r3, #1
 800941e:	4a2c      	ldr	r2, [pc, #176]	; (80094d0 <prvAddNewTaskToReadyList+0xc4>)
 8009420:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009422:	4b2c      	ldr	r3, [pc, #176]	; (80094d4 <prvAddNewTaskToReadyList+0xc8>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d109      	bne.n	800943e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800942a:	4a2a      	ldr	r2, [pc, #168]	; (80094d4 <prvAddNewTaskToReadyList+0xc8>)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009430:	4b27      	ldr	r3, [pc, #156]	; (80094d0 <prvAddNewTaskToReadyList+0xc4>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2b01      	cmp	r3, #1
 8009436:	d110      	bne.n	800945a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009438:	f000 fc16 	bl	8009c68 <prvInitialiseTaskLists>
 800943c:	e00d      	b.n	800945a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800943e:	4b26      	ldr	r3, [pc, #152]	; (80094d8 <prvAddNewTaskToReadyList+0xcc>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d109      	bne.n	800945a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009446:	4b23      	ldr	r3, [pc, #140]	; (80094d4 <prvAddNewTaskToReadyList+0xc8>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009450:	429a      	cmp	r2, r3
 8009452:	d802      	bhi.n	800945a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009454:	4a1f      	ldr	r2, [pc, #124]	; (80094d4 <prvAddNewTaskToReadyList+0xc8>)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800945a:	4b20      	ldr	r3, [pc, #128]	; (80094dc <prvAddNewTaskToReadyList+0xd0>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	3301      	adds	r3, #1
 8009460:	4a1e      	ldr	r2, [pc, #120]	; (80094dc <prvAddNewTaskToReadyList+0xd0>)
 8009462:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009464:	4b1d      	ldr	r3, [pc, #116]	; (80094dc <prvAddNewTaskToReadyList+0xd0>)
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009470:	4b1b      	ldr	r3, [pc, #108]	; (80094e0 <prvAddNewTaskToReadyList+0xd4>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	429a      	cmp	r2, r3
 8009476:	d903      	bls.n	8009480 <prvAddNewTaskToReadyList+0x74>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800947c:	4a18      	ldr	r2, [pc, #96]	; (80094e0 <prvAddNewTaskToReadyList+0xd4>)
 800947e:	6013      	str	r3, [r2, #0]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009484:	4613      	mov	r3, r2
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	4413      	add	r3, r2
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	4a15      	ldr	r2, [pc, #84]	; (80094e4 <prvAddNewTaskToReadyList+0xd8>)
 800948e:	441a      	add	r2, r3
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	3304      	adds	r3, #4
 8009494:	4619      	mov	r1, r3
 8009496:	4610      	mov	r0, r2
 8009498:	f7fe fdf1 	bl	800807e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800949c:	f001 fb2a 	bl	800aaf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80094a0:	4b0d      	ldr	r3, [pc, #52]	; (80094d8 <prvAddNewTaskToReadyList+0xcc>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d00e      	beq.n	80094c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80094a8:	4b0a      	ldr	r3, [pc, #40]	; (80094d4 <prvAddNewTaskToReadyList+0xc8>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d207      	bcs.n	80094c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80094b6:	4b0c      	ldr	r3, [pc, #48]	; (80094e8 <prvAddNewTaskToReadyList+0xdc>)
 80094b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094bc:	601a      	str	r2, [r3, #0]
 80094be:	f3bf 8f4f 	dsb	sy
 80094c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094c6:	bf00      	nop
 80094c8:	3708      	adds	r7, #8
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	20000fe4 	.word	0x20000fe4
 80094d4:	20000b10 	.word	0x20000b10
 80094d8:	20000ff0 	.word	0x20000ff0
 80094dc:	20001000 	.word	0x20001000
 80094e0:	20000fec 	.word	0x20000fec
 80094e4:	20000b14 	.word	0x20000b14
 80094e8:	e000ed04 	.word	0xe000ed04

080094ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80094f4:	2300      	movs	r3, #0
 80094f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d017      	beq.n	800952e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80094fe:	4b13      	ldr	r3, [pc, #76]	; (800954c <vTaskDelay+0x60>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d00a      	beq.n	800951c <vTaskDelay+0x30>
	__asm volatile
 8009506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950a:	f383 8811 	msr	BASEPRI, r3
 800950e:	f3bf 8f6f 	isb	sy
 8009512:	f3bf 8f4f 	dsb	sy
 8009516:	60bb      	str	r3, [r7, #8]
}
 8009518:	bf00      	nop
 800951a:	e7fe      	b.n	800951a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800951c:	f000 f880 	bl	8009620 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009520:	2100      	movs	r1, #0
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 fde8 	bl	800a0f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009528:	f000 f888 	bl	800963c <xTaskResumeAll>
 800952c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d107      	bne.n	8009544 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009534:	4b06      	ldr	r3, [pc, #24]	; (8009550 <vTaskDelay+0x64>)
 8009536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800953a:	601a      	str	r2, [r3, #0]
 800953c:	f3bf 8f4f 	dsb	sy
 8009540:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009544:	bf00      	nop
 8009546:	3710      	adds	r7, #16
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	2000100c 	.word	0x2000100c
 8009550:	e000ed04 	.word	0xe000ed04

08009554 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b08a      	sub	sp, #40	; 0x28
 8009558:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800955a:	2300      	movs	r3, #0
 800955c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800955e:	2300      	movs	r3, #0
 8009560:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009562:	463a      	mov	r2, r7
 8009564:	1d39      	adds	r1, r7, #4
 8009566:	f107 0308 	add.w	r3, r7, #8
 800956a:	4618      	mov	r0, r3
 800956c:	f7fe fd26 	bl	8007fbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009570:	6839      	ldr	r1, [r7, #0]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	68ba      	ldr	r2, [r7, #8]
 8009576:	9202      	str	r2, [sp, #8]
 8009578:	9301      	str	r3, [sp, #4]
 800957a:	2300      	movs	r3, #0
 800957c:	9300      	str	r3, [sp, #0]
 800957e:	2300      	movs	r3, #0
 8009580:	460a      	mov	r2, r1
 8009582:	4921      	ldr	r1, [pc, #132]	; (8009608 <vTaskStartScheduler+0xb4>)
 8009584:	4821      	ldr	r0, [pc, #132]	; (800960c <vTaskStartScheduler+0xb8>)
 8009586:	f7ff fe0f 	bl	80091a8 <xTaskCreateStatic>
 800958a:	4603      	mov	r3, r0
 800958c:	4a20      	ldr	r2, [pc, #128]	; (8009610 <vTaskStartScheduler+0xbc>)
 800958e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009590:	4b1f      	ldr	r3, [pc, #124]	; (8009610 <vTaskStartScheduler+0xbc>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d002      	beq.n	800959e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009598:	2301      	movs	r3, #1
 800959a:	617b      	str	r3, [r7, #20]
 800959c:	e001      	b.n	80095a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800959e:	2300      	movs	r3, #0
 80095a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d102      	bne.n	80095ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80095a8:	f000 fdfa 	bl	800a1a0 <xTimerCreateTimerTask>
 80095ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d116      	bne.n	80095e2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80095b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b8:	f383 8811 	msr	BASEPRI, r3
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	613b      	str	r3, [r7, #16]
}
 80095c6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80095c8:	4b12      	ldr	r3, [pc, #72]	; (8009614 <vTaskStartScheduler+0xc0>)
 80095ca:	f04f 32ff 	mov.w	r2, #4294967295
 80095ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80095d0:	4b11      	ldr	r3, [pc, #68]	; (8009618 <vTaskStartScheduler+0xc4>)
 80095d2:	2201      	movs	r2, #1
 80095d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80095d6:	4b11      	ldr	r3, [pc, #68]	; (800961c <vTaskStartScheduler+0xc8>)
 80095d8:	2200      	movs	r2, #0
 80095da:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80095dc:	f001 f9b8 	bl	800a950 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80095e0:	e00e      	b.n	8009600 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095e8:	d10a      	bne.n	8009600 <vTaskStartScheduler+0xac>
	__asm volatile
 80095ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ee:	f383 8811 	msr	BASEPRI, r3
 80095f2:	f3bf 8f6f 	isb	sy
 80095f6:	f3bf 8f4f 	dsb	sy
 80095fa:	60fb      	str	r3, [r7, #12]
}
 80095fc:	bf00      	nop
 80095fe:	e7fe      	b.n	80095fe <vTaskStartScheduler+0xaa>
}
 8009600:	bf00      	nop
 8009602:	3718      	adds	r7, #24
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}
 8009608:	0800ce98 	.word	0x0800ce98
 800960c:	08009c39 	.word	0x08009c39
 8009610:	20001008 	.word	0x20001008
 8009614:	20001004 	.word	0x20001004
 8009618:	20000ff0 	.word	0x20000ff0
 800961c:	20000fe8 	.word	0x20000fe8

08009620 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009620:	b480      	push	{r7}
 8009622:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009624:	4b04      	ldr	r3, [pc, #16]	; (8009638 <vTaskSuspendAll+0x18>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	3301      	adds	r3, #1
 800962a:	4a03      	ldr	r2, [pc, #12]	; (8009638 <vTaskSuspendAll+0x18>)
 800962c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800962e:	bf00      	nop
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr
 8009638:	2000100c 	.word	0x2000100c

0800963c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009642:	2300      	movs	r3, #0
 8009644:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009646:	2300      	movs	r3, #0
 8009648:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800964a:	4b42      	ldr	r3, [pc, #264]	; (8009754 <xTaskResumeAll+0x118>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d10a      	bne.n	8009668 <xTaskResumeAll+0x2c>
	__asm volatile
 8009652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009656:	f383 8811 	msr	BASEPRI, r3
 800965a:	f3bf 8f6f 	isb	sy
 800965e:	f3bf 8f4f 	dsb	sy
 8009662:	603b      	str	r3, [r7, #0]
}
 8009664:	bf00      	nop
 8009666:	e7fe      	b.n	8009666 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009668:	f001 fa14 	bl	800aa94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800966c:	4b39      	ldr	r3, [pc, #228]	; (8009754 <xTaskResumeAll+0x118>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	3b01      	subs	r3, #1
 8009672:	4a38      	ldr	r2, [pc, #224]	; (8009754 <xTaskResumeAll+0x118>)
 8009674:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009676:	4b37      	ldr	r3, [pc, #220]	; (8009754 <xTaskResumeAll+0x118>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d162      	bne.n	8009744 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800967e:	4b36      	ldr	r3, [pc, #216]	; (8009758 <xTaskResumeAll+0x11c>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d05e      	beq.n	8009744 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009686:	e02f      	b.n	80096e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009688:	4b34      	ldr	r3, [pc, #208]	; (800975c <xTaskResumeAll+0x120>)
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	3318      	adds	r3, #24
 8009694:	4618      	mov	r0, r3
 8009696:	f7fe fd4f 	bl	8008138 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	3304      	adds	r3, #4
 800969e:	4618      	mov	r0, r3
 80096a0:	f7fe fd4a 	bl	8008138 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096a8:	4b2d      	ldr	r3, [pc, #180]	; (8009760 <xTaskResumeAll+0x124>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d903      	bls.n	80096b8 <xTaskResumeAll+0x7c>
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b4:	4a2a      	ldr	r2, [pc, #168]	; (8009760 <xTaskResumeAll+0x124>)
 80096b6:	6013      	str	r3, [r2, #0]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096bc:	4613      	mov	r3, r2
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	4413      	add	r3, r2
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	4a27      	ldr	r2, [pc, #156]	; (8009764 <xTaskResumeAll+0x128>)
 80096c6:	441a      	add	r2, r3
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	3304      	adds	r3, #4
 80096cc:	4619      	mov	r1, r3
 80096ce:	4610      	mov	r0, r2
 80096d0:	f7fe fcd5 	bl	800807e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096d8:	4b23      	ldr	r3, [pc, #140]	; (8009768 <xTaskResumeAll+0x12c>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096de:	429a      	cmp	r2, r3
 80096e0:	d302      	bcc.n	80096e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80096e2:	4b22      	ldr	r3, [pc, #136]	; (800976c <xTaskResumeAll+0x130>)
 80096e4:	2201      	movs	r2, #1
 80096e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096e8:	4b1c      	ldr	r3, [pc, #112]	; (800975c <xTaskResumeAll+0x120>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d1cb      	bne.n	8009688 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d001      	beq.n	80096fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80096f6:	f000 fb55 	bl	8009da4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80096fa:	4b1d      	ldr	r3, [pc, #116]	; (8009770 <xTaskResumeAll+0x134>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d010      	beq.n	8009728 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009706:	f000 f847 	bl	8009798 <xTaskIncrementTick>
 800970a:	4603      	mov	r3, r0
 800970c:	2b00      	cmp	r3, #0
 800970e:	d002      	beq.n	8009716 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009710:	4b16      	ldr	r3, [pc, #88]	; (800976c <xTaskResumeAll+0x130>)
 8009712:	2201      	movs	r2, #1
 8009714:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	3b01      	subs	r3, #1
 800971a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d1f1      	bne.n	8009706 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009722:	4b13      	ldr	r3, [pc, #76]	; (8009770 <xTaskResumeAll+0x134>)
 8009724:	2200      	movs	r2, #0
 8009726:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009728:	4b10      	ldr	r3, [pc, #64]	; (800976c <xTaskResumeAll+0x130>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d009      	beq.n	8009744 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009730:	2301      	movs	r3, #1
 8009732:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009734:	4b0f      	ldr	r3, [pc, #60]	; (8009774 <xTaskResumeAll+0x138>)
 8009736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800973a:	601a      	str	r2, [r3, #0]
 800973c:	f3bf 8f4f 	dsb	sy
 8009740:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009744:	f001 f9d6 	bl	800aaf4 <vPortExitCritical>

	return xAlreadyYielded;
 8009748:	68bb      	ldr	r3, [r7, #8]
}
 800974a:	4618      	mov	r0, r3
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	2000100c 	.word	0x2000100c
 8009758:	20000fe4 	.word	0x20000fe4
 800975c:	20000fa4 	.word	0x20000fa4
 8009760:	20000fec 	.word	0x20000fec
 8009764:	20000b14 	.word	0x20000b14
 8009768:	20000b10 	.word	0x20000b10
 800976c:	20000ff8 	.word	0x20000ff8
 8009770:	20000ff4 	.word	0x20000ff4
 8009774:	e000ed04 	.word	0xe000ed04

08009778 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800977e:	4b05      	ldr	r3, [pc, #20]	; (8009794 <xTaskGetTickCount+0x1c>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009784:	687b      	ldr	r3, [r7, #4]
}
 8009786:	4618      	mov	r0, r3
 8009788:	370c      	adds	r7, #12
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop
 8009794:	20000fe8 	.word	0x20000fe8

08009798 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b086      	sub	sp, #24
 800979c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800979e:	2300      	movs	r3, #0
 80097a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097a2:	4b4f      	ldr	r3, [pc, #316]	; (80098e0 <xTaskIncrementTick+0x148>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	f040 808f 	bne.w	80098ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80097ac:	4b4d      	ldr	r3, [pc, #308]	; (80098e4 <xTaskIncrementTick+0x14c>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	3301      	adds	r3, #1
 80097b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80097b4:	4a4b      	ldr	r2, [pc, #300]	; (80098e4 <xTaskIncrementTick+0x14c>)
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d120      	bne.n	8009802 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80097c0:	4b49      	ldr	r3, [pc, #292]	; (80098e8 <xTaskIncrementTick+0x150>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d00a      	beq.n	80097e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80097ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ce:	f383 8811 	msr	BASEPRI, r3
 80097d2:	f3bf 8f6f 	isb	sy
 80097d6:	f3bf 8f4f 	dsb	sy
 80097da:	603b      	str	r3, [r7, #0]
}
 80097dc:	bf00      	nop
 80097de:	e7fe      	b.n	80097de <xTaskIncrementTick+0x46>
 80097e0:	4b41      	ldr	r3, [pc, #260]	; (80098e8 <xTaskIncrementTick+0x150>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	60fb      	str	r3, [r7, #12]
 80097e6:	4b41      	ldr	r3, [pc, #260]	; (80098ec <xTaskIncrementTick+0x154>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a3f      	ldr	r2, [pc, #252]	; (80098e8 <xTaskIncrementTick+0x150>)
 80097ec:	6013      	str	r3, [r2, #0]
 80097ee:	4a3f      	ldr	r2, [pc, #252]	; (80098ec <xTaskIncrementTick+0x154>)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6013      	str	r3, [r2, #0]
 80097f4:	4b3e      	ldr	r3, [pc, #248]	; (80098f0 <xTaskIncrementTick+0x158>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	3301      	adds	r3, #1
 80097fa:	4a3d      	ldr	r2, [pc, #244]	; (80098f0 <xTaskIncrementTick+0x158>)
 80097fc:	6013      	str	r3, [r2, #0]
 80097fe:	f000 fad1 	bl	8009da4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009802:	4b3c      	ldr	r3, [pc, #240]	; (80098f4 <xTaskIncrementTick+0x15c>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	693a      	ldr	r2, [r7, #16]
 8009808:	429a      	cmp	r2, r3
 800980a:	d349      	bcc.n	80098a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800980c:	4b36      	ldr	r3, [pc, #216]	; (80098e8 <xTaskIncrementTick+0x150>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d104      	bne.n	8009820 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009816:	4b37      	ldr	r3, [pc, #220]	; (80098f4 <xTaskIncrementTick+0x15c>)
 8009818:	f04f 32ff 	mov.w	r2, #4294967295
 800981c:	601a      	str	r2, [r3, #0]
					break;
 800981e:	e03f      	b.n	80098a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009820:	4b31      	ldr	r3, [pc, #196]	; (80098e8 <xTaskIncrementTick+0x150>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	68db      	ldr	r3, [r3, #12]
 8009826:	68db      	ldr	r3, [r3, #12]
 8009828:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009830:	693a      	ldr	r2, [r7, #16]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	429a      	cmp	r2, r3
 8009836:	d203      	bcs.n	8009840 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009838:	4a2e      	ldr	r2, [pc, #184]	; (80098f4 <xTaskIncrementTick+0x15c>)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800983e:	e02f      	b.n	80098a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	3304      	adds	r3, #4
 8009844:	4618      	mov	r0, r3
 8009846:	f7fe fc77 	bl	8008138 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800984e:	2b00      	cmp	r3, #0
 8009850:	d004      	beq.n	800985c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	3318      	adds	r3, #24
 8009856:	4618      	mov	r0, r3
 8009858:	f7fe fc6e 	bl	8008138 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009860:	4b25      	ldr	r3, [pc, #148]	; (80098f8 <xTaskIncrementTick+0x160>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	429a      	cmp	r2, r3
 8009866:	d903      	bls.n	8009870 <xTaskIncrementTick+0xd8>
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800986c:	4a22      	ldr	r2, [pc, #136]	; (80098f8 <xTaskIncrementTick+0x160>)
 800986e:	6013      	str	r3, [r2, #0]
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009874:	4613      	mov	r3, r2
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	4413      	add	r3, r2
 800987a:	009b      	lsls	r3, r3, #2
 800987c:	4a1f      	ldr	r2, [pc, #124]	; (80098fc <xTaskIncrementTick+0x164>)
 800987e:	441a      	add	r2, r3
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	3304      	adds	r3, #4
 8009884:	4619      	mov	r1, r3
 8009886:	4610      	mov	r0, r2
 8009888:	f7fe fbf9 	bl	800807e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009890:	4b1b      	ldr	r3, [pc, #108]	; (8009900 <xTaskIncrementTick+0x168>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009896:	429a      	cmp	r2, r3
 8009898:	d3b8      	bcc.n	800980c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800989a:	2301      	movs	r3, #1
 800989c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800989e:	e7b5      	b.n	800980c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80098a0:	4b17      	ldr	r3, [pc, #92]	; (8009900 <xTaskIncrementTick+0x168>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a6:	4915      	ldr	r1, [pc, #84]	; (80098fc <xTaskIncrementTick+0x164>)
 80098a8:	4613      	mov	r3, r2
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	4413      	add	r3, r2
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	440b      	add	r3, r1
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d901      	bls.n	80098bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80098b8:	2301      	movs	r3, #1
 80098ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80098bc:	4b11      	ldr	r3, [pc, #68]	; (8009904 <xTaskIncrementTick+0x16c>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d007      	beq.n	80098d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80098c4:	2301      	movs	r3, #1
 80098c6:	617b      	str	r3, [r7, #20]
 80098c8:	e004      	b.n	80098d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80098ca:	4b0f      	ldr	r3, [pc, #60]	; (8009908 <xTaskIncrementTick+0x170>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	3301      	adds	r3, #1
 80098d0:	4a0d      	ldr	r2, [pc, #52]	; (8009908 <xTaskIncrementTick+0x170>)
 80098d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80098d4:	697b      	ldr	r3, [r7, #20]
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3718      	adds	r7, #24
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	2000100c 	.word	0x2000100c
 80098e4:	20000fe8 	.word	0x20000fe8
 80098e8:	20000f9c 	.word	0x20000f9c
 80098ec:	20000fa0 	.word	0x20000fa0
 80098f0:	20000ffc 	.word	0x20000ffc
 80098f4:	20001004 	.word	0x20001004
 80098f8:	20000fec 	.word	0x20000fec
 80098fc:	20000b14 	.word	0x20000b14
 8009900:	20000b10 	.word	0x20000b10
 8009904:	20000ff8 	.word	0x20000ff8
 8009908:	20000ff4 	.word	0x20000ff4

0800990c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800990c:	b480      	push	{r7}
 800990e:	b085      	sub	sp, #20
 8009910:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009912:	4b28      	ldr	r3, [pc, #160]	; (80099b4 <vTaskSwitchContext+0xa8>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d003      	beq.n	8009922 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800991a:	4b27      	ldr	r3, [pc, #156]	; (80099b8 <vTaskSwitchContext+0xac>)
 800991c:	2201      	movs	r2, #1
 800991e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009920:	e041      	b.n	80099a6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009922:	4b25      	ldr	r3, [pc, #148]	; (80099b8 <vTaskSwitchContext+0xac>)
 8009924:	2200      	movs	r2, #0
 8009926:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009928:	4b24      	ldr	r3, [pc, #144]	; (80099bc <vTaskSwitchContext+0xb0>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	60fb      	str	r3, [r7, #12]
 800992e:	e010      	b.n	8009952 <vTaskSwitchContext+0x46>
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d10a      	bne.n	800994c <vTaskSwitchContext+0x40>
	__asm volatile
 8009936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993a:	f383 8811 	msr	BASEPRI, r3
 800993e:	f3bf 8f6f 	isb	sy
 8009942:	f3bf 8f4f 	dsb	sy
 8009946:	607b      	str	r3, [r7, #4]
}
 8009948:	bf00      	nop
 800994a:	e7fe      	b.n	800994a <vTaskSwitchContext+0x3e>
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	3b01      	subs	r3, #1
 8009950:	60fb      	str	r3, [r7, #12]
 8009952:	491b      	ldr	r1, [pc, #108]	; (80099c0 <vTaskSwitchContext+0xb4>)
 8009954:	68fa      	ldr	r2, [r7, #12]
 8009956:	4613      	mov	r3, r2
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	4413      	add	r3, r2
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	440b      	add	r3, r1
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d0e4      	beq.n	8009930 <vTaskSwitchContext+0x24>
 8009966:	68fa      	ldr	r2, [r7, #12]
 8009968:	4613      	mov	r3, r2
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	4413      	add	r3, r2
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	4a13      	ldr	r2, [pc, #76]	; (80099c0 <vTaskSwitchContext+0xb4>)
 8009972:	4413      	add	r3, r2
 8009974:	60bb      	str	r3, [r7, #8]
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	685a      	ldr	r2, [r3, #4]
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	605a      	str	r2, [r3, #4]
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	685a      	ldr	r2, [r3, #4]
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	3308      	adds	r3, #8
 8009988:	429a      	cmp	r2, r3
 800998a:	d104      	bne.n	8009996 <vTaskSwitchContext+0x8a>
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	685a      	ldr	r2, [r3, #4]
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	605a      	str	r2, [r3, #4]
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	4a09      	ldr	r2, [pc, #36]	; (80099c4 <vTaskSwitchContext+0xb8>)
 800999e:	6013      	str	r3, [r2, #0]
 80099a0:	4a06      	ldr	r2, [pc, #24]	; (80099bc <vTaskSwitchContext+0xb0>)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	6013      	str	r3, [r2, #0]
}
 80099a6:	bf00      	nop
 80099a8:	3714      	adds	r7, #20
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr
 80099b2:	bf00      	nop
 80099b4:	2000100c 	.word	0x2000100c
 80099b8:	20000ff8 	.word	0x20000ff8
 80099bc:	20000fec 	.word	0x20000fec
 80099c0:	20000b14 	.word	0x20000b14
 80099c4:	20000b10 	.word	0x20000b10

080099c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b084      	sub	sp, #16
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d10a      	bne.n	80099ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80099d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099dc:	f383 8811 	msr	BASEPRI, r3
 80099e0:	f3bf 8f6f 	isb	sy
 80099e4:	f3bf 8f4f 	dsb	sy
 80099e8:	60fb      	str	r3, [r7, #12]
}
 80099ea:	bf00      	nop
 80099ec:	e7fe      	b.n	80099ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099ee:	4b07      	ldr	r3, [pc, #28]	; (8009a0c <vTaskPlaceOnEventList+0x44>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	3318      	adds	r3, #24
 80099f4:	4619      	mov	r1, r3
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f7fe fb65 	bl	80080c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80099fc:	2101      	movs	r1, #1
 80099fe:	6838      	ldr	r0, [r7, #0]
 8009a00:	f000 fb7a 	bl	800a0f8 <prvAddCurrentTaskToDelayedList>
}
 8009a04:	bf00      	nop
 8009a06:	3710      	adds	r7, #16
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	20000b10 	.word	0x20000b10

08009a10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b086      	sub	sp, #24
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	60b9      	str	r1, [r7, #8]
 8009a1a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d10a      	bne.n	8009a38 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a26:	f383 8811 	msr	BASEPRI, r3
 8009a2a:	f3bf 8f6f 	isb	sy
 8009a2e:	f3bf 8f4f 	dsb	sy
 8009a32:	617b      	str	r3, [r7, #20]
}
 8009a34:	bf00      	nop
 8009a36:	e7fe      	b.n	8009a36 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a38:	4b0a      	ldr	r3, [pc, #40]	; (8009a64 <vTaskPlaceOnEventListRestricted+0x54>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	3318      	adds	r3, #24
 8009a3e:	4619      	mov	r1, r3
 8009a40:	68f8      	ldr	r0, [r7, #12]
 8009a42:	f7fe fb1c 	bl	800807e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d002      	beq.n	8009a52 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8009a50:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009a52:	6879      	ldr	r1, [r7, #4]
 8009a54:	68b8      	ldr	r0, [r7, #8]
 8009a56:	f000 fb4f 	bl	800a0f8 <prvAddCurrentTaskToDelayedList>
	}
 8009a5a:	bf00      	nop
 8009a5c:	3718      	adds	r7, #24
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	20000b10 	.word	0x20000b10

08009a68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b086      	sub	sp, #24
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d10a      	bne.n	8009a94 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a82:	f383 8811 	msr	BASEPRI, r3
 8009a86:	f3bf 8f6f 	isb	sy
 8009a8a:	f3bf 8f4f 	dsb	sy
 8009a8e:	60fb      	str	r3, [r7, #12]
}
 8009a90:	bf00      	nop
 8009a92:	e7fe      	b.n	8009a92 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	3318      	adds	r3, #24
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f7fe fb4d 	bl	8008138 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a9e:	4b1e      	ldr	r3, [pc, #120]	; (8009b18 <xTaskRemoveFromEventList+0xb0>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d11d      	bne.n	8009ae2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	3304      	adds	r3, #4
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7fe fb44 	bl	8008138 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ab4:	4b19      	ldr	r3, [pc, #100]	; (8009b1c <xTaskRemoveFromEventList+0xb4>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d903      	bls.n	8009ac4 <xTaskRemoveFromEventList+0x5c>
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac0:	4a16      	ldr	r2, [pc, #88]	; (8009b1c <xTaskRemoveFromEventList+0xb4>)
 8009ac2:	6013      	str	r3, [r2, #0]
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ac8:	4613      	mov	r3, r2
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	4413      	add	r3, r2
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	4a13      	ldr	r2, [pc, #76]	; (8009b20 <xTaskRemoveFromEventList+0xb8>)
 8009ad2:	441a      	add	r2, r3
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	3304      	adds	r3, #4
 8009ad8:	4619      	mov	r1, r3
 8009ada:	4610      	mov	r0, r2
 8009adc:	f7fe facf 	bl	800807e <vListInsertEnd>
 8009ae0:	e005      	b.n	8009aee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	3318      	adds	r3, #24
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	480e      	ldr	r0, [pc, #56]	; (8009b24 <xTaskRemoveFromEventList+0xbc>)
 8009aea:	f7fe fac8 	bl	800807e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009af2:	4b0d      	ldr	r3, [pc, #52]	; (8009b28 <xTaskRemoveFromEventList+0xc0>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d905      	bls.n	8009b08 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009afc:	2301      	movs	r3, #1
 8009afe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009b00:	4b0a      	ldr	r3, [pc, #40]	; (8009b2c <xTaskRemoveFromEventList+0xc4>)
 8009b02:	2201      	movs	r2, #1
 8009b04:	601a      	str	r2, [r3, #0]
 8009b06:	e001      	b.n	8009b0c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009b0c:	697b      	ldr	r3, [r7, #20]
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3718      	adds	r7, #24
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	bf00      	nop
 8009b18:	2000100c 	.word	0x2000100c
 8009b1c:	20000fec 	.word	0x20000fec
 8009b20:	20000b14 	.word	0x20000b14
 8009b24:	20000fa4 	.word	0x20000fa4
 8009b28:	20000b10 	.word	0x20000b10
 8009b2c:	20000ff8 	.word	0x20000ff8

08009b30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009b38:	4b06      	ldr	r3, [pc, #24]	; (8009b54 <vTaskInternalSetTimeOutState+0x24>)
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009b40:	4b05      	ldr	r3, [pc, #20]	; (8009b58 <vTaskInternalSetTimeOutState+0x28>)
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	605a      	str	r2, [r3, #4]
}
 8009b48:	bf00      	nop
 8009b4a:	370c      	adds	r7, #12
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr
 8009b54:	20000ffc 	.word	0x20000ffc
 8009b58:	20000fe8 	.word	0x20000fe8

08009b5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b088      	sub	sp, #32
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d10a      	bne.n	8009b82 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b70:	f383 8811 	msr	BASEPRI, r3
 8009b74:	f3bf 8f6f 	isb	sy
 8009b78:	f3bf 8f4f 	dsb	sy
 8009b7c:	613b      	str	r3, [r7, #16]
}
 8009b7e:	bf00      	nop
 8009b80:	e7fe      	b.n	8009b80 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d10a      	bne.n	8009b9e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8c:	f383 8811 	msr	BASEPRI, r3
 8009b90:	f3bf 8f6f 	isb	sy
 8009b94:	f3bf 8f4f 	dsb	sy
 8009b98:	60fb      	str	r3, [r7, #12]
}
 8009b9a:	bf00      	nop
 8009b9c:	e7fe      	b.n	8009b9c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009b9e:	f000 ff79 	bl	800aa94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009ba2:	4b1d      	ldr	r3, [pc, #116]	; (8009c18 <xTaskCheckForTimeOut+0xbc>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	69ba      	ldr	r2, [r7, #24]
 8009bae:	1ad3      	subs	r3, r2, r3
 8009bb0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bba:	d102      	bne.n	8009bc2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	61fb      	str	r3, [r7, #28]
 8009bc0:	e023      	b.n	8009c0a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	4b15      	ldr	r3, [pc, #84]	; (8009c1c <xTaskCheckForTimeOut+0xc0>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d007      	beq.n	8009bde <xTaskCheckForTimeOut+0x82>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	69ba      	ldr	r2, [r7, #24]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d302      	bcc.n	8009bde <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	61fb      	str	r3, [r7, #28]
 8009bdc:	e015      	b.n	8009c0a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	697a      	ldr	r2, [r7, #20]
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d20b      	bcs.n	8009c00 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	1ad2      	subs	r2, r2, r3
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f7ff ff9b 	bl	8009b30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	61fb      	str	r3, [r7, #28]
 8009bfe:	e004      	b.n	8009c0a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	2200      	movs	r2, #0
 8009c04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009c06:	2301      	movs	r3, #1
 8009c08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009c0a:	f000 ff73 	bl	800aaf4 <vPortExitCritical>

	return xReturn;
 8009c0e:	69fb      	ldr	r3, [r7, #28]
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3720      	adds	r7, #32
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	20000fe8 	.word	0x20000fe8
 8009c1c:	20000ffc 	.word	0x20000ffc

08009c20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009c20:	b480      	push	{r7}
 8009c22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009c24:	4b03      	ldr	r3, [pc, #12]	; (8009c34 <vTaskMissedYield+0x14>)
 8009c26:	2201      	movs	r2, #1
 8009c28:	601a      	str	r2, [r3, #0]
}
 8009c2a:	bf00      	nop
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr
 8009c34:	20000ff8 	.word	0x20000ff8

08009c38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009c40:	f000 f852 	bl	8009ce8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c44:	4b06      	ldr	r3, [pc, #24]	; (8009c60 <prvIdleTask+0x28>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d9f9      	bls.n	8009c40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c4c:	4b05      	ldr	r3, [pc, #20]	; (8009c64 <prvIdleTask+0x2c>)
 8009c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c52:	601a      	str	r2, [r3, #0]
 8009c54:	f3bf 8f4f 	dsb	sy
 8009c58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c5c:	e7f0      	b.n	8009c40 <prvIdleTask+0x8>
 8009c5e:	bf00      	nop
 8009c60:	20000b14 	.word	0x20000b14
 8009c64:	e000ed04 	.word	0xe000ed04

08009c68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c6e:	2300      	movs	r3, #0
 8009c70:	607b      	str	r3, [r7, #4]
 8009c72:	e00c      	b.n	8009c8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	4613      	mov	r3, r2
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	4413      	add	r3, r2
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	4a12      	ldr	r2, [pc, #72]	; (8009cc8 <prvInitialiseTaskLists+0x60>)
 8009c80:	4413      	add	r3, r2
 8009c82:	4618      	mov	r0, r3
 8009c84:	f7fe f9ce 	bl	8008024 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	607b      	str	r3, [r7, #4]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2b37      	cmp	r3, #55	; 0x37
 8009c92:	d9ef      	bls.n	8009c74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c94:	480d      	ldr	r0, [pc, #52]	; (8009ccc <prvInitialiseTaskLists+0x64>)
 8009c96:	f7fe f9c5 	bl	8008024 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c9a:	480d      	ldr	r0, [pc, #52]	; (8009cd0 <prvInitialiseTaskLists+0x68>)
 8009c9c:	f7fe f9c2 	bl	8008024 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009ca0:	480c      	ldr	r0, [pc, #48]	; (8009cd4 <prvInitialiseTaskLists+0x6c>)
 8009ca2:	f7fe f9bf 	bl	8008024 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009ca6:	480c      	ldr	r0, [pc, #48]	; (8009cd8 <prvInitialiseTaskLists+0x70>)
 8009ca8:	f7fe f9bc 	bl	8008024 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009cac:	480b      	ldr	r0, [pc, #44]	; (8009cdc <prvInitialiseTaskLists+0x74>)
 8009cae:	f7fe f9b9 	bl	8008024 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009cb2:	4b0b      	ldr	r3, [pc, #44]	; (8009ce0 <prvInitialiseTaskLists+0x78>)
 8009cb4:	4a05      	ldr	r2, [pc, #20]	; (8009ccc <prvInitialiseTaskLists+0x64>)
 8009cb6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009cb8:	4b0a      	ldr	r3, [pc, #40]	; (8009ce4 <prvInitialiseTaskLists+0x7c>)
 8009cba:	4a05      	ldr	r2, [pc, #20]	; (8009cd0 <prvInitialiseTaskLists+0x68>)
 8009cbc:	601a      	str	r2, [r3, #0]
}
 8009cbe:	bf00      	nop
 8009cc0:	3708      	adds	r7, #8
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	20000b14 	.word	0x20000b14
 8009ccc:	20000f74 	.word	0x20000f74
 8009cd0:	20000f88 	.word	0x20000f88
 8009cd4:	20000fa4 	.word	0x20000fa4
 8009cd8:	20000fb8 	.word	0x20000fb8
 8009cdc:	20000fd0 	.word	0x20000fd0
 8009ce0:	20000f9c 	.word	0x20000f9c
 8009ce4:	20000fa0 	.word	0x20000fa0

08009ce8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cee:	e019      	b.n	8009d24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009cf0:	f000 fed0 	bl	800aa94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cf4:	4b10      	ldr	r3, [pc, #64]	; (8009d38 <prvCheckTasksWaitingTermination+0x50>)
 8009cf6:	68db      	ldr	r3, [r3, #12]
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	3304      	adds	r3, #4
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7fe fa19 	bl	8008138 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009d06:	4b0d      	ldr	r3, [pc, #52]	; (8009d3c <prvCheckTasksWaitingTermination+0x54>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	3b01      	subs	r3, #1
 8009d0c:	4a0b      	ldr	r2, [pc, #44]	; (8009d3c <prvCheckTasksWaitingTermination+0x54>)
 8009d0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009d10:	4b0b      	ldr	r3, [pc, #44]	; (8009d40 <prvCheckTasksWaitingTermination+0x58>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	3b01      	subs	r3, #1
 8009d16:	4a0a      	ldr	r2, [pc, #40]	; (8009d40 <prvCheckTasksWaitingTermination+0x58>)
 8009d18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009d1a:	f000 feeb 	bl	800aaf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 f810 	bl	8009d44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d24:	4b06      	ldr	r3, [pc, #24]	; (8009d40 <prvCheckTasksWaitingTermination+0x58>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d1e1      	bne.n	8009cf0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009d2c:	bf00      	nop
 8009d2e:	bf00      	nop
 8009d30:	3708      	adds	r7, #8
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	20000fb8 	.word	0x20000fb8
 8009d3c:	20000fe4 	.word	0x20000fe4
 8009d40:	20000fcc 	.word	0x20000fcc

08009d44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d108      	bne.n	8009d68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f001 f888 	bl	800ae70 <vPortFree>
				vPortFree( pxTCB );
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f001 f885 	bl	800ae70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d66:	e018      	b.n	8009d9a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d103      	bne.n	8009d7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f001 f87c 	bl	800ae70 <vPortFree>
	}
 8009d78:	e00f      	b.n	8009d9a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	d00a      	beq.n	8009d9a <prvDeleteTCB+0x56>
	__asm volatile
 8009d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d88:	f383 8811 	msr	BASEPRI, r3
 8009d8c:	f3bf 8f6f 	isb	sy
 8009d90:	f3bf 8f4f 	dsb	sy
 8009d94:	60fb      	str	r3, [r7, #12]
}
 8009d96:	bf00      	nop
 8009d98:	e7fe      	b.n	8009d98 <prvDeleteTCB+0x54>
	}
 8009d9a:	bf00      	nop
 8009d9c:	3710      	adds	r7, #16
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
	...

08009da4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009daa:	4b0c      	ldr	r3, [pc, #48]	; (8009ddc <prvResetNextTaskUnblockTime+0x38>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d104      	bne.n	8009dbe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009db4:	4b0a      	ldr	r3, [pc, #40]	; (8009de0 <prvResetNextTaskUnblockTime+0x3c>)
 8009db6:	f04f 32ff 	mov.w	r2, #4294967295
 8009dba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009dbc:	e008      	b.n	8009dd0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dbe:	4b07      	ldr	r3, [pc, #28]	; (8009ddc <prvResetNextTaskUnblockTime+0x38>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	68db      	ldr	r3, [r3, #12]
 8009dc6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	4a04      	ldr	r2, [pc, #16]	; (8009de0 <prvResetNextTaskUnblockTime+0x3c>)
 8009dce:	6013      	str	r3, [r2, #0]
}
 8009dd0:	bf00      	nop
 8009dd2:	370c      	adds	r7, #12
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr
 8009ddc:	20000f9c 	.word	0x20000f9c
 8009de0:	20001004 	.word	0x20001004

08009de4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009de4:	b480      	push	{r7}
 8009de6:	b083      	sub	sp, #12
 8009de8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009dea:	4b0b      	ldr	r3, [pc, #44]	; (8009e18 <xTaskGetSchedulerState+0x34>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d102      	bne.n	8009df8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009df2:	2301      	movs	r3, #1
 8009df4:	607b      	str	r3, [r7, #4]
 8009df6:	e008      	b.n	8009e0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009df8:	4b08      	ldr	r3, [pc, #32]	; (8009e1c <xTaskGetSchedulerState+0x38>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d102      	bne.n	8009e06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009e00:	2302      	movs	r3, #2
 8009e02:	607b      	str	r3, [r7, #4]
 8009e04:	e001      	b.n	8009e0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009e06:	2300      	movs	r3, #0
 8009e08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009e0a:	687b      	ldr	r3, [r7, #4]
	}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr
 8009e18:	20000ff0 	.word	0x20000ff0
 8009e1c:	2000100c 	.word	0x2000100c

08009e20 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d051      	beq.n	8009eda <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e3a:	4b2a      	ldr	r3, [pc, #168]	; (8009ee4 <xTaskPriorityInherit+0xc4>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d241      	bcs.n	8009ec8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	699b      	ldr	r3, [r3, #24]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	db06      	blt.n	8009e5a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e4c:	4b25      	ldr	r3, [pc, #148]	; (8009ee4 <xTaskPriorityInherit+0xc4>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	6959      	ldr	r1, [r3, #20]
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e62:	4613      	mov	r3, r2
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	4413      	add	r3, r2
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	4a1f      	ldr	r2, [pc, #124]	; (8009ee8 <xTaskPriorityInherit+0xc8>)
 8009e6c:	4413      	add	r3, r2
 8009e6e:	4299      	cmp	r1, r3
 8009e70:	d122      	bne.n	8009eb8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	3304      	adds	r3, #4
 8009e76:	4618      	mov	r0, r3
 8009e78:	f7fe f95e 	bl	8008138 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009e7c:	4b19      	ldr	r3, [pc, #100]	; (8009ee4 <xTaskPriorityInherit+0xc4>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e8a:	4b18      	ldr	r3, [pc, #96]	; (8009eec <xTaskPriorityInherit+0xcc>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d903      	bls.n	8009e9a <xTaskPriorityInherit+0x7a>
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e96:	4a15      	ldr	r2, [pc, #84]	; (8009eec <xTaskPriorityInherit+0xcc>)
 8009e98:	6013      	str	r3, [r2, #0]
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e9e:	4613      	mov	r3, r2
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	4413      	add	r3, r2
 8009ea4:	009b      	lsls	r3, r3, #2
 8009ea6:	4a10      	ldr	r2, [pc, #64]	; (8009ee8 <xTaskPriorityInherit+0xc8>)
 8009ea8:	441a      	add	r2, r3
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	3304      	adds	r3, #4
 8009eae:	4619      	mov	r1, r3
 8009eb0:	4610      	mov	r0, r2
 8009eb2:	f7fe f8e4 	bl	800807e <vListInsertEnd>
 8009eb6:	e004      	b.n	8009ec2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009eb8:	4b0a      	ldr	r3, [pc, #40]	; (8009ee4 <xTaskPriorityInherit+0xc4>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	60fb      	str	r3, [r7, #12]
 8009ec6:	e008      	b.n	8009eda <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ecc:	4b05      	ldr	r3, [pc, #20]	; (8009ee4 <xTaskPriorityInherit+0xc4>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d201      	bcs.n	8009eda <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009eda:	68fb      	ldr	r3, [r7, #12]
	}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3710      	adds	r7, #16
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	20000b10 	.word	0x20000b10
 8009ee8:	20000b14 	.word	0x20000b14
 8009eec:	20000fec 	.word	0x20000fec

08009ef0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b086      	sub	sp, #24
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009efc:	2300      	movs	r3, #0
 8009efe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d056      	beq.n	8009fb4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009f06:	4b2e      	ldr	r3, [pc, #184]	; (8009fc0 <xTaskPriorityDisinherit+0xd0>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	693a      	ldr	r2, [r7, #16]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d00a      	beq.n	8009f26 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f14:	f383 8811 	msr	BASEPRI, r3
 8009f18:	f3bf 8f6f 	isb	sy
 8009f1c:	f3bf 8f4f 	dsb	sy
 8009f20:	60fb      	str	r3, [r7, #12]
}
 8009f22:	bf00      	nop
 8009f24:	e7fe      	b.n	8009f24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d10a      	bne.n	8009f44 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f32:	f383 8811 	msr	BASEPRI, r3
 8009f36:	f3bf 8f6f 	isb	sy
 8009f3a:	f3bf 8f4f 	dsb	sy
 8009f3e:	60bb      	str	r3, [r7, #8]
}
 8009f40:	bf00      	nop
 8009f42:	e7fe      	b.n	8009f42 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f48:	1e5a      	subs	r2, r3, #1
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d02c      	beq.n	8009fb4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d128      	bne.n	8009fb4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	3304      	adds	r3, #4
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7fe f8e6 	bl	8008138 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f78:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f84:	4b0f      	ldr	r3, [pc, #60]	; (8009fc4 <xTaskPriorityDisinherit+0xd4>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d903      	bls.n	8009f94 <xTaskPriorityDisinherit+0xa4>
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f90:	4a0c      	ldr	r2, [pc, #48]	; (8009fc4 <xTaskPriorityDisinherit+0xd4>)
 8009f92:	6013      	str	r3, [r2, #0]
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f98:	4613      	mov	r3, r2
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	4413      	add	r3, r2
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	4a09      	ldr	r2, [pc, #36]	; (8009fc8 <xTaskPriorityDisinherit+0xd8>)
 8009fa2:	441a      	add	r2, r3
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	3304      	adds	r3, #4
 8009fa8:	4619      	mov	r1, r3
 8009faa:	4610      	mov	r0, r2
 8009fac:	f7fe f867 	bl	800807e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009fb4:	697b      	ldr	r3, [r7, #20]
	}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3718      	adds	r7, #24
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	20000b10 	.word	0x20000b10
 8009fc4:	20000fec 	.word	0x20000fec
 8009fc8:	20000b14 	.word	0x20000b14

08009fcc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b088      	sub	sp, #32
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d06a      	beq.n	800a0ba <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009fe4:	69bb      	ldr	r3, [r7, #24]
 8009fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10a      	bne.n	800a002 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff0:	f383 8811 	msr	BASEPRI, r3
 8009ff4:	f3bf 8f6f 	isb	sy
 8009ff8:	f3bf 8f4f 	dsb	sy
 8009ffc:	60fb      	str	r3, [r7, #12]
}
 8009ffe:	bf00      	nop
 800a000:	e7fe      	b.n	800a000 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a002:	69bb      	ldr	r3, [r7, #24]
 800a004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a006:	683a      	ldr	r2, [r7, #0]
 800a008:	429a      	cmp	r2, r3
 800a00a:	d902      	bls.n	800a012 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	61fb      	str	r3, [r7, #28]
 800a010:	e002      	b.n	800a018 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a016:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a018:	69bb      	ldr	r3, [r7, #24]
 800a01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a01c:	69fa      	ldr	r2, [r7, #28]
 800a01e:	429a      	cmp	r2, r3
 800a020:	d04b      	beq.n	800a0ba <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a022:	69bb      	ldr	r3, [r7, #24]
 800a024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a026:	697a      	ldr	r2, [r7, #20]
 800a028:	429a      	cmp	r2, r3
 800a02a:	d146      	bne.n	800a0ba <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a02c:	4b25      	ldr	r3, [pc, #148]	; (800a0c4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	69ba      	ldr	r2, [r7, #24]
 800a032:	429a      	cmp	r2, r3
 800a034:	d10a      	bne.n	800a04c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03a:	f383 8811 	msr	BASEPRI, r3
 800a03e:	f3bf 8f6f 	isb	sy
 800a042:	f3bf 8f4f 	dsb	sy
 800a046:	60bb      	str	r3, [r7, #8]
}
 800a048:	bf00      	nop
 800a04a:	e7fe      	b.n	800a04a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a04c:	69bb      	ldr	r3, [r7, #24]
 800a04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a050:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a052:	69bb      	ldr	r3, [r7, #24]
 800a054:	69fa      	ldr	r2, [r7, #28]
 800a056:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a058:	69bb      	ldr	r3, [r7, #24]
 800a05a:	699b      	ldr	r3, [r3, #24]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	db04      	blt.n	800a06a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a060:	69fb      	ldr	r3, [r7, #28]
 800a062:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	6959      	ldr	r1, [r3, #20]
 800a06e:	693a      	ldr	r2, [r7, #16]
 800a070:	4613      	mov	r3, r2
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	4413      	add	r3, r2
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	4a13      	ldr	r2, [pc, #76]	; (800a0c8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a07a:	4413      	add	r3, r2
 800a07c:	4299      	cmp	r1, r3
 800a07e:	d11c      	bne.n	800a0ba <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	3304      	adds	r3, #4
 800a084:	4618      	mov	r0, r3
 800a086:	f7fe f857 	bl	8008138 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a08e:	4b0f      	ldr	r3, [pc, #60]	; (800a0cc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	429a      	cmp	r2, r3
 800a094:	d903      	bls.n	800a09e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a09a:	4a0c      	ldr	r2, [pc, #48]	; (800a0cc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a09c:	6013      	str	r3, [r2, #0]
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0a2:	4613      	mov	r3, r2
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	4413      	add	r3, r2
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	4a07      	ldr	r2, [pc, #28]	; (800a0c8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a0ac:	441a      	add	r2, r3
 800a0ae:	69bb      	ldr	r3, [r7, #24]
 800a0b0:	3304      	adds	r3, #4
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	4610      	mov	r0, r2
 800a0b6:	f7fd ffe2 	bl	800807e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a0ba:	bf00      	nop
 800a0bc:	3720      	adds	r7, #32
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	20000b10 	.word	0x20000b10
 800a0c8:	20000b14 	.word	0x20000b14
 800a0cc:	20000fec 	.word	0x20000fec

0800a0d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a0d0:	b480      	push	{r7}
 800a0d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a0d4:	4b07      	ldr	r3, [pc, #28]	; (800a0f4 <pvTaskIncrementMutexHeldCount+0x24>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d004      	beq.n	800a0e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a0dc:	4b05      	ldr	r3, [pc, #20]	; (800a0f4 <pvTaskIncrementMutexHeldCount+0x24>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a0e2:	3201      	adds	r2, #1
 800a0e4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a0e6:	4b03      	ldr	r3, [pc, #12]	; (800a0f4 <pvTaskIncrementMutexHeldCount+0x24>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
	}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr
 800a0f4:	20000b10 	.word	0x20000b10

0800a0f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a102:	4b21      	ldr	r3, [pc, #132]	; (800a188 <prvAddCurrentTaskToDelayedList+0x90>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a108:	4b20      	ldr	r3, [pc, #128]	; (800a18c <prvAddCurrentTaskToDelayedList+0x94>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	3304      	adds	r3, #4
 800a10e:	4618      	mov	r0, r3
 800a110:	f7fe f812 	bl	8008138 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a11a:	d10a      	bne.n	800a132 <prvAddCurrentTaskToDelayedList+0x3a>
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d007      	beq.n	800a132 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a122:	4b1a      	ldr	r3, [pc, #104]	; (800a18c <prvAddCurrentTaskToDelayedList+0x94>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	3304      	adds	r3, #4
 800a128:	4619      	mov	r1, r3
 800a12a:	4819      	ldr	r0, [pc, #100]	; (800a190 <prvAddCurrentTaskToDelayedList+0x98>)
 800a12c:	f7fd ffa7 	bl	800807e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a130:	e026      	b.n	800a180 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a132:	68fa      	ldr	r2, [r7, #12]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	4413      	add	r3, r2
 800a138:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a13a:	4b14      	ldr	r3, [pc, #80]	; (800a18c <prvAddCurrentTaskToDelayedList+0x94>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	68ba      	ldr	r2, [r7, #8]
 800a140:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a142:	68ba      	ldr	r2, [r7, #8]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	429a      	cmp	r2, r3
 800a148:	d209      	bcs.n	800a15e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a14a:	4b12      	ldr	r3, [pc, #72]	; (800a194 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a14c:	681a      	ldr	r2, [r3, #0]
 800a14e:	4b0f      	ldr	r3, [pc, #60]	; (800a18c <prvAddCurrentTaskToDelayedList+0x94>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	3304      	adds	r3, #4
 800a154:	4619      	mov	r1, r3
 800a156:	4610      	mov	r0, r2
 800a158:	f7fd ffb5 	bl	80080c6 <vListInsert>
}
 800a15c:	e010      	b.n	800a180 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a15e:	4b0e      	ldr	r3, [pc, #56]	; (800a198 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a160:	681a      	ldr	r2, [r3, #0]
 800a162:	4b0a      	ldr	r3, [pc, #40]	; (800a18c <prvAddCurrentTaskToDelayedList+0x94>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	3304      	adds	r3, #4
 800a168:	4619      	mov	r1, r3
 800a16a:	4610      	mov	r0, r2
 800a16c:	f7fd ffab 	bl	80080c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a170:	4b0a      	ldr	r3, [pc, #40]	; (800a19c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	68ba      	ldr	r2, [r7, #8]
 800a176:	429a      	cmp	r2, r3
 800a178:	d202      	bcs.n	800a180 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a17a:	4a08      	ldr	r2, [pc, #32]	; (800a19c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	6013      	str	r3, [r2, #0]
}
 800a180:	bf00      	nop
 800a182:	3710      	adds	r7, #16
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}
 800a188:	20000fe8 	.word	0x20000fe8
 800a18c:	20000b10 	.word	0x20000b10
 800a190:	20000fd0 	.word	0x20000fd0
 800a194:	20000fa0 	.word	0x20000fa0
 800a198:	20000f9c 	.word	0x20000f9c
 800a19c:	20001004 	.word	0x20001004

0800a1a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b08a      	sub	sp, #40	; 0x28
 800a1a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a1aa:	f000 fb07 	bl	800a7bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a1ae:	4b1c      	ldr	r3, [pc, #112]	; (800a220 <xTimerCreateTimerTask+0x80>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d021      	beq.n	800a1fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a1be:	1d3a      	adds	r2, r7, #4
 800a1c0:	f107 0108 	add.w	r1, r7, #8
 800a1c4:	f107 030c 	add.w	r3, r7, #12
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7fd ff11 	bl	8007ff0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a1ce:	6879      	ldr	r1, [r7, #4]
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	68fa      	ldr	r2, [r7, #12]
 800a1d4:	9202      	str	r2, [sp, #8]
 800a1d6:	9301      	str	r3, [sp, #4]
 800a1d8:	2302      	movs	r3, #2
 800a1da:	9300      	str	r3, [sp, #0]
 800a1dc:	2300      	movs	r3, #0
 800a1de:	460a      	mov	r2, r1
 800a1e0:	4910      	ldr	r1, [pc, #64]	; (800a224 <xTimerCreateTimerTask+0x84>)
 800a1e2:	4811      	ldr	r0, [pc, #68]	; (800a228 <xTimerCreateTimerTask+0x88>)
 800a1e4:	f7fe ffe0 	bl	80091a8 <xTaskCreateStatic>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	4a10      	ldr	r2, [pc, #64]	; (800a22c <xTimerCreateTimerTask+0x8c>)
 800a1ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a1ee:	4b0f      	ldr	r3, [pc, #60]	; (800a22c <xTimerCreateTimerTask+0x8c>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d001      	beq.n	800a1fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d10a      	bne.n	800a216 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a204:	f383 8811 	msr	BASEPRI, r3
 800a208:	f3bf 8f6f 	isb	sy
 800a20c:	f3bf 8f4f 	dsb	sy
 800a210:	613b      	str	r3, [r7, #16]
}
 800a212:	bf00      	nop
 800a214:	e7fe      	b.n	800a214 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a216:	697b      	ldr	r3, [r7, #20]
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3718      	adds	r7, #24
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	20001040 	.word	0x20001040
 800a224:	0800cea0 	.word	0x0800cea0
 800a228:	0800a365 	.word	0x0800a365
 800a22c:	20001044 	.word	0x20001044

0800a230 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b08a      	sub	sp, #40	; 0x28
 800a234:	af00      	add	r7, sp, #0
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	607a      	str	r2, [r7, #4]
 800a23c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a23e:	2300      	movs	r3, #0
 800a240:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d10a      	bne.n	800a25e <xTimerGenericCommand+0x2e>
	__asm volatile
 800a248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24c:	f383 8811 	msr	BASEPRI, r3
 800a250:	f3bf 8f6f 	isb	sy
 800a254:	f3bf 8f4f 	dsb	sy
 800a258:	623b      	str	r3, [r7, #32]
}
 800a25a:	bf00      	nop
 800a25c:	e7fe      	b.n	800a25c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a25e:	4b1a      	ldr	r3, [pc, #104]	; (800a2c8 <xTimerGenericCommand+0x98>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d02a      	beq.n	800a2bc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	2b05      	cmp	r3, #5
 800a276:	dc18      	bgt.n	800a2aa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a278:	f7ff fdb4 	bl	8009de4 <xTaskGetSchedulerState>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b02      	cmp	r3, #2
 800a280:	d109      	bne.n	800a296 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a282:	4b11      	ldr	r3, [pc, #68]	; (800a2c8 <xTimerGenericCommand+0x98>)
 800a284:	6818      	ldr	r0, [r3, #0]
 800a286:	f107 0110 	add.w	r1, r7, #16
 800a28a:	2300      	movs	r3, #0
 800a28c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a28e:	f7fe f925 	bl	80084dc <xQueueGenericSend>
 800a292:	6278      	str	r0, [r7, #36]	; 0x24
 800a294:	e012      	b.n	800a2bc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a296:	4b0c      	ldr	r3, [pc, #48]	; (800a2c8 <xTimerGenericCommand+0x98>)
 800a298:	6818      	ldr	r0, [r3, #0]
 800a29a:	f107 0110 	add.w	r1, r7, #16
 800a29e:	2300      	movs	r3, #0
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	f7fe f91b 	bl	80084dc <xQueueGenericSend>
 800a2a6:	6278      	str	r0, [r7, #36]	; 0x24
 800a2a8:	e008      	b.n	800a2bc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a2aa:	4b07      	ldr	r3, [pc, #28]	; (800a2c8 <xTimerGenericCommand+0x98>)
 800a2ac:	6818      	ldr	r0, [r3, #0]
 800a2ae:	f107 0110 	add.w	r1, r7, #16
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	683a      	ldr	r2, [r7, #0]
 800a2b6:	f7fe fa0f 	bl	80086d8 <xQueueGenericSendFromISR>
 800a2ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3728      	adds	r7, #40	; 0x28
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
 800a2c6:	bf00      	nop
 800a2c8:	20001040 	.word	0x20001040

0800a2cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b088      	sub	sp, #32
 800a2d0:	af02      	add	r7, sp, #8
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2d6:	4b22      	ldr	r3, [pc, #136]	; (800a360 <prvProcessExpiredTimer+0x94>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	68db      	ldr	r3, [r3, #12]
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	3304      	adds	r3, #4
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f7fd ff27 	bl	8008138 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2f0:	f003 0304 	and.w	r3, r3, #4
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d022      	beq.n	800a33e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	699a      	ldr	r2, [r3, #24]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	18d1      	adds	r1, r2, r3
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	683a      	ldr	r2, [r7, #0]
 800a304:	6978      	ldr	r0, [r7, #20]
 800a306:	f000 f8d1 	bl	800a4ac <prvInsertTimerInActiveList>
 800a30a:	4603      	mov	r3, r0
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d01f      	beq.n	800a350 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a310:	2300      	movs	r3, #0
 800a312:	9300      	str	r3, [sp, #0]
 800a314:	2300      	movs	r3, #0
 800a316:	687a      	ldr	r2, [r7, #4]
 800a318:	2100      	movs	r1, #0
 800a31a:	6978      	ldr	r0, [r7, #20]
 800a31c:	f7ff ff88 	bl	800a230 <xTimerGenericCommand>
 800a320:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d113      	bne.n	800a350 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32c:	f383 8811 	msr	BASEPRI, r3
 800a330:	f3bf 8f6f 	isb	sy
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	60fb      	str	r3, [r7, #12]
}
 800a33a:	bf00      	nop
 800a33c:	e7fe      	b.n	800a33c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a344:	f023 0301 	bic.w	r3, r3, #1
 800a348:	b2da      	uxtb	r2, r3
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	6a1b      	ldr	r3, [r3, #32]
 800a354:	6978      	ldr	r0, [r7, #20]
 800a356:	4798      	blx	r3
}
 800a358:	bf00      	nop
 800a35a:	3718      	adds	r7, #24
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}
 800a360:	20001038 	.word	0x20001038

0800a364 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a36c:	f107 0308 	add.w	r3, r7, #8
 800a370:	4618      	mov	r0, r3
 800a372:	f000 f857 	bl	800a424 <prvGetNextExpireTime>
 800a376:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	4619      	mov	r1, r3
 800a37c:	68f8      	ldr	r0, [r7, #12]
 800a37e:	f000 f803 	bl	800a388 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a382:	f000 f8d5 	bl	800a530 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a386:	e7f1      	b.n	800a36c <prvTimerTask+0x8>

0800a388 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b084      	sub	sp, #16
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a392:	f7ff f945 	bl	8009620 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a396:	f107 0308 	add.w	r3, r7, #8
 800a39a:	4618      	mov	r0, r3
 800a39c:	f000 f866 	bl	800a46c <prvSampleTimeNow>
 800a3a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d130      	bne.n	800a40a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d10a      	bne.n	800a3c4 <prvProcessTimerOrBlockTask+0x3c>
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d806      	bhi.n	800a3c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a3b6:	f7ff f941 	bl	800963c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a3ba:	68f9      	ldr	r1, [r7, #12]
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f7ff ff85 	bl	800a2cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a3c2:	e024      	b.n	800a40e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d008      	beq.n	800a3dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a3ca:	4b13      	ldr	r3, [pc, #76]	; (800a418 <prvProcessTimerOrBlockTask+0x90>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d101      	bne.n	800a3d8 <prvProcessTimerOrBlockTask+0x50>
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e000      	b.n	800a3da <prvProcessTimerOrBlockTask+0x52>
 800a3d8:	2300      	movs	r3, #0
 800a3da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a3dc:	4b0f      	ldr	r3, [pc, #60]	; (800a41c <prvProcessTimerOrBlockTask+0x94>)
 800a3de:	6818      	ldr	r0, [r3, #0]
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	1ad3      	subs	r3, r2, r3
 800a3e6:	683a      	ldr	r2, [r7, #0]
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	f7fe fea9 	bl	8009140 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a3ee:	f7ff f925 	bl	800963c <xTaskResumeAll>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d10a      	bne.n	800a40e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a3f8:	4b09      	ldr	r3, [pc, #36]	; (800a420 <prvProcessTimerOrBlockTask+0x98>)
 800a3fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3fe:	601a      	str	r2, [r3, #0]
 800a400:	f3bf 8f4f 	dsb	sy
 800a404:	f3bf 8f6f 	isb	sy
}
 800a408:	e001      	b.n	800a40e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a40a:	f7ff f917 	bl	800963c <xTaskResumeAll>
}
 800a40e:	bf00      	nop
 800a410:	3710      	adds	r7, #16
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	2000103c 	.word	0x2000103c
 800a41c:	20001040 	.word	0x20001040
 800a420:	e000ed04 	.word	0xe000ed04

0800a424 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a424:	b480      	push	{r7}
 800a426:	b085      	sub	sp, #20
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a42c:	4b0e      	ldr	r3, [pc, #56]	; (800a468 <prvGetNextExpireTime+0x44>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d101      	bne.n	800a43a <prvGetNextExpireTime+0x16>
 800a436:	2201      	movs	r2, #1
 800a438:	e000      	b.n	800a43c <prvGetNextExpireTime+0x18>
 800a43a:	2200      	movs	r2, #0
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d105      	bne.n	800a454 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a448:	4b07      	ldr	r3, [pc, #28]	; (800a468 <prvGetNextExpireTime+0x44>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	68db      	ldr	r3, [r3, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	60fb      	str	r3, [r7, #12]
 800a452:	e001      	b.n	800a458 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a454:	2300      	movs	r3, #0
 800a456:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a458:	68fb      	ldr	r3, [r7, #12]
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3714      	adds	r7, #20
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr
 800a466:	bf00      	nop
 800a468:	20001038 	.word	0x20001038

0800a46c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a474:	f7ff f980 	bl	8009778 <xTaskGetTickCount>
 800a478:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a47a:	4b0b      	ldr	r3, [pc, #44]	; (800a4a8 <prvSampleTimeNow+0x3c>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	68fa      	ldr	r2, [r7, #12]
 800a480:	429a      	cmp	r2, r3
 800a482:	d205      	bcs.n	800a490 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a484:	f000 f936 	bl	800a6f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2201      	movs	r2, #1
 800a48c:	601a      	str	r2, [r3, #0]
 800a48e:	e002      	b.n	800a496 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a496:	4a04      	ldr	r2, [pc, #16]	; (800a4a8 <prvSampleTimeNow+0x3c>)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a49c:	68fb      	ldr	r3, [r7, #12]
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3710      	adds	r7, #16
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	20001048 	.word	0x20001048

0800a4ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b086      	sub	sp, #24
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	60b9      	str	r1, [r7, #8]
 800a4b6:	607a      	str	r2, [r7, #4]
 800a4b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	68ba      	ldr	r2, [r7, #8]
 800a4c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	68fa      	ldr	r2, [r7, #12]
 800a4c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a4ca:	68ba      	ldr	r2, [r7, #8]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d812      	bhi.n	800a4f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	1ad2      	subs	r2, r2, r3
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	699b      	ldr	r3, [r3, #24]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d302      	bcc.n	800a4e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	617b      	str	r3, [r7, #20]
 800a4e4:	e01b      	b.n	800a51e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a4e6:	4b10      	ldr	r3, [pc, #64]	; (800a528 <prvInsertTimerInActiveList+0x7c>)
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	3304      	adds	r3, #4
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	4610      	mov	r0, r2
 800a4f2:	f7fd fde8 	bl	80080c6 <vListInsert>
 800a4f6:	e012      	b.n	800a51e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d206      	bcs.n	800a50e <prvInsertTimerInActiveList+0x62>
 800a500:	68ba      	ldr	r2, [r7, #8]
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	429a      	cmp	r2, r3
 800a506:	d302      	bcc.n	800a50e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a508:	2301      	movs	r3, #1
 800a50a:	617b      	str	r3, [r7, #20]
 800a50c:	e007      	b.n	800a51e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a50e:	4b07      	ldr	r3, [pc, #28]	; (800a52c <prvInsertTimerInActiveList+0x80>)
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	3304      	adds	r3, #4
 800a516:	4619      	mov	r1, r3
 800a518:	4610      	mov	r0, r2
 800a51a:	f7fd fdd4 	bl	80080c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a51e:	697b      	ldr	r3, [r7, #20]
}
 800a520:	4618      	mov	r0, r3
 800a522:	3718      	adds	r7, #24
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}
 800a528:	2000103c 	.word	0x2000103c
 800a52c:	20001038 	.word	0x20001038

0800a530 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b08e      	sub	sp, #56	; 0x38
 800a534:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a536:	e0ca      	b.n	800a6ce <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	da18      	bge.n	800a570 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a53e:	1d3b      	adds	r3, r7, #4
 800a540:	3304      	adds	r3, #4
 800a542:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a546:	2b00      	cmp	r3, #0
 800a548:	d10a      	bne.n	800a560 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a54e:	f383 8811 	msr	BASEPRI, r3
 800a552:	f3bf 8f6f 	isb	sy
 800a556:	f3bf 8f4f 	dsb	sy
 800a55a:	61fb      	str	r3, [r7, #28]
}
 800a55c:	bf00      	nop
 800a55e:	e7fe      	b.n	800a55e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a566:	6850      	ldr	r0, [r2, #4]
 800a568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a56a:	6892      	ldr	r2, [r2, #8]
 800a56c:	4611      	mov	r1, r2
 800a56e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2b00      	cmp	r3, #0
 800a574:	f2c0 80aa 	blt.w	800a6cc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a57e:	695b      	ldr	r3, [r3, #20]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d004      	beq.n	800a58e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a586:	3304      	adds	r3, #4
 800a588:	4618      	mov	r0, r3
 800a58a:	f7fd fdd5 	bl	8008138 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a58e:	463b      	mov	r3, r7
 800a590:	4618      	mov	r0, r3
 800a592:	f7ff ff6b 	bl	800a46c <prvSampleTimeNow>
 800a596:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2b09      	cmp	r3, #9
 800a59c:	f200 8097 	bhi.w	800a6ce <prvProcessReceivedCommands+0x19e>
 800a5a0:	a201      	add	r2, pc, #4	; (adr r2, 800a5a8 <prvProcessReceivedCommands+0x78>)
 800a5a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a6:	bf00      	nop
 800a5a8:	0800a5d1 	.word	0x0800a5d1
 800a5ac:	0800a5d1 	.word	0x0800a5d1
 800a5b0:	0800a5d1 	.word	0x0800a5d1
 800a5b4:	0800a645 	.word	0x0800a645
 800a5b8:	0800a659 	.word	0x0800a659
 800a5bc:	0800a6a3 	.word	0x0800a6a3
 800a5c0:	0800a5d1 	.word	0x0800a5d1
 800a5c4:	0800a5d1 	.word	0x0800a5d1
 800a5c8:	0800a645 	.word	0x0800a645
 800a5cc:	0800a659 	.word	0x0800a659
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5d6:	f043 0301 	orr.w	r3, r3, #1
 800a5da:	b2da      	uxtb	r2, r3
 800a5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a5e2:	68ba      	ldr	r2, [r7, #8]
 800a5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e6:	699b      	ldr	r3, [r3, #24]
 800a5e8:	18d1      	adds	r1, r2, r3
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5f0:	f7ff ff5c 	bl	800a4ac <prvInsertTimerInActiveList>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d069      	beq.n	800a6ce <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fc:	6a1b      	ldr	r3, [r3, #32]
 800a5fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a600:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a604:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a608:	f003 0304 	and.w	r3, r3, #4
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d05e      	beq.n	800a6ce <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a610:	68ba      	ldr	r2, [r7, #8]
 800a612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a614:	699b      	ldr	r3, [r3, #24]
 800a616:	441a      	add	r2, r3
 800a618:	2300      	movs	r3, #0
 800a61a:	9300      	str	r3, [sp, #0]
 800a61c:	2300      	movs	r3, #0
 800a61e:	2100      	movs	r1, #0
 800a620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a622:	f7ff fe05 	bl	800a230 <xTimerGenericCommand>
 800a626:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a628:	6a3b      	ldr	r3, [r7, #32]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d14f      	bne.n	800a6ce <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a632:	f383 8811 	msr	BASEPRI, r3
 800a636:	f3bf 8f6f 	isb	sy
 800a63a:	f3bf 8f4f 	dsb	sy
 800a63e:	61bb      	str	r3, [r7, #24]
}
 800a640:	bf00      	nop
 800a642:	e7fe      	b.n	800a642 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a646:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a64a:	f023 0301 	bic.w	r3, r3, #1
 800a64e:	b2da      	uxtb	r2, r3
 800a650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a652:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a656:	e03a      	b.n	800a6ce <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a65e:	f043 0301 	orr.w	r3, r3, #1
 800a662:	b2da      	uxtb	r2, r3
 800a664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a666:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a66a:	68ba      	ldr	r2, [r7, #8]
 800a66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a672:	699b      	ldr	r3, [r3, #24]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d10a      	bne.n	800a68e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67c:	f383 8811 	msr	BASEPRI, r3
 800a680:	f3bf 8f6f 	isb	sy
 800a684:	f3bf 8f4f 	dsb	sy
 800a688:	617b      	str	r3, [r7, #20]
}
 800a68a:	bf00      	nop
 800a68c:	e7fe      	b.n	800a68c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a690:	699a      	ldr	r2, [r3, #24]
 800a692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a694:	18d1      	adds	r1, r2, r3
 800a696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a69a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a69c:	f7ff ff06 	bl	800a4ac <prvInsertTimerInActiveList>
					break;
 800a6a0:	e015      	b.n	800a6ce <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6a8:	f003 0302 	and.w	r3, r3, #2
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d103      	bne.n	800a6b8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a6b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6b2:	f000 fbdd 	bl	800ae70 <vPortFree>
 800a6b6:	e00a      	b.n	800a6ce <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6be:	f023 0301 	bic.w	r3, r3, #1
 800a6c2:	b2da      	uxtb	r2, r3
 800a6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a6ca:	e000      	b.n	800a6ce <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a6cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a6ce:	4b08      	ldr	r3, [pc, #32]	; (800a6f0 <prvProcessReceivedCommands+0x1c0>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	1d39      	adds	r1, r7, #4
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f7fe f926 	bl	8008928 <xQueueReceive>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	f47f af2a 	bne.w	800a538 <prvProcessReceivedCommands+0x8>
	}
}
 800a6e4:	bf00      	nop
 800a6e6:	bf00      	nop
 800a6e8:	3730      	adds	r7, #48	; 0x30
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	20001040 	.word	0x20001040

0800a6f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b088      	sub	sp, #32
 800a6f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a6fa:	e048      	b.n	800a78e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a6fc:	4b2d      	ldr	r3, [pc, #180]	; (800a7b4 <prvSwitchTimerLists+0xc0>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	68db      	ldr	r3, [r3, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a706:	4b2b      	ldr	r3, [pc, #172]	; (800a7b4 <prvSwitchTimerLists+0xc0>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	68db      	ldr	r3, [r3, #12]
 800a70c:	68db      	ldr	r3, [r3, #12]
 800a70e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	3304      	adds	r3, #4
 800a714:	4618      	mov	r0, r3
 800a716:	f7fd fd0f 	bl	8008138 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	6a1b      	ldr	r3, [r3, #32]
 800a71e:	68f8      	ldr	r0, [r7, #12]
 800a720:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a728:	f003 0304 	and.w	r3, r3, #4
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d02e      	beq.n	800a78e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	699b      	ldr	r3, [r3, #24]
 800a734:	693a      	ldr	r2, [r7, #16]
 800a736:	4413      	add	r3, r2
 800a738:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a73a:	68ba      	ldr	r2, [r7, #8]
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	429a      	cmp	r2, r3
 800a740:	d90e      	bls.n	800a760 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	68ba      	ldr	r2, [r7, #8]
 800a746:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	68fa      	ldr	r2, [r7, #12]
 800a74c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a74e:	4b19      	ldr	r3, [pc, #100]	; (800a7b4 <prvSwitchTimerLists+0xc0>)
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	3304      	adds	r3, #4
 800a756:	4619      	mov	r1, r3
 800a758:	4610      	mov	r0, r2
 800a75a:	f7fd fcb4 	bl	80080c6 <vListInsert>
 800a75e:	e016      	b.n	800a78e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a760:	2300      	movs	r3, #0
 800a762:	9300      	str	r3, [sp, #0]
 800a764:	2300      	movs	r3, #0
 800a766:	693a      	ldr	r2, [r7, #16]
 800a768:	2100      	movs	r1, #0
 800a76a:	68f8      	ldr	r0, [r7, #12]
 800a76c:	f7ff fd60 	bl	800a230 <xTimerGenericCommand>
 800a770:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d10a      	bne.n	800a78e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a77c:	f383 8811 	msr	BASEPRI, r3
 800a780:	f3bf 8f6f 	isb	sy
 800a784:	f3bf 8f4f 	dsb	sy
 800a788:	603b      	str	r3, [r7, #0]
}
 800a78a:	bf00      	nop
 800a78c:	e7fe      	b.n	800a78c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a78e:	4b09      	ldr	r3, [pc, #36]	; (800a7b4 <prvSwitchTimerLists+0xc0>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d1b1      	bne.n	800a6fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a798:	4b06      	ldr	r3, [pc, #24]	; (800a7b4 <prvSwitchTimerLists+0xc0>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a79e:	4b06      	ldr	r3, [pc, #24]	; (800a7b8 <prvSwitchTimerLists+0xc4>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a04      	ldr	r2, [pc, #16]	; (800a7b4 <prvSwitchTimerLists+0xc0>)
 800a7a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a7a6:	4a04      	ldr	r2, [pc, #16]	; (800a7b8 <prvSwitchTimerLists+0xc4>)
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	6013      	str	r3, [r2, #0]
}
 800a7ac:	bf00      	nop
 800a7ae:	3718      	adds	r7, #24
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}
 800a7b4:	20001038 	.word	0x20001038
 800a7b8:	2000103c 	.word	0x2000103c

0800a7bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a7c2:	f000 f967 	bl	800aa94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a7c6:	4b15      	ldr	r3, [pc, #84]	; (800a81c <prvCheckForValidListAndQueue+0x60>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d120      	bne.n	800a810 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a7ce:	4814      	ldr	r0, [pc, #80]	; (800a820 <prvCheckForValidListAndQueue+0x64>)
 800a7d0:	f7fd fc28 	bl	8008024 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a7d4:	4813      	ldr	r0, [pc, #76]	; (800a824 <prvCheckForValidListAndQueue+0x68>)
 800a7d6:	f7fd fc25 	bl	8008024 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a7da:	4b13      	ldr	r3, [pc, #76]	; (800a828 <prvCheckForValidListAndQueue+0x6c>)
 800a7dc:	4a10      	ldr	r2, [pc, #64]	; (800a820 <prvCheckForValidListAndQueue+0x64>)
 800a7de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a7e0:	4b12      	ldr	r3, [pc, #72]	; (800a82c <prvCheckForValidListAndQueue+0x70>)
 800a7e2:	4a10      	ldr	r2, [pc, #64]	; (800a824 <prvCheckForValidListAndQueue+0x68>)
 800a7e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	9300      	str	r3, [sp, #0]
 800a7ea:	4b11      	ldr	r3, [pc, #68]	; (800a830 <prvCheckForValidListAndQueue+0x74>)
 800a7ec:	4a11      	ldr	r2, [pc, #68]	; (800a834 <prvCheckForValidListAndQueue+0x78>)
 800a7ee:	2110      	movs	r1, #16
 800a7f0:	200a      	movs	r0, #10
 800a7f2:	f7fd fd33 	bl	800825c <xQueueGenericCreateStatic>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	4a08      	ldr	r2, [pc, #32]	; (800a81c <prvCheckForValidListAndQueue+0x60>)
 800a7fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a7fc:	4b07      	ldr	r3, [pc, #28]	; (800a81c <prvCheckForValidListAndQueue+0x60>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d005      	beq.n	800a810 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a804:	4b05      	ldr	r3, [pc, #20]	; (800a81c <prvCheckForValidListAndQueue+0x60>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	490b      	ldr	r1, [pc, #44]	; (800a838 <prvCheckForValidListAndQueue+0x7c>)
 800a80a:	4618      	mov	r0, r3
 800a80c:	f7fe fc44 	bl	8009098 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a810:	f000 f970 	bl	800aaf4 <vPortExitCritical>
}
 800a814:	bf00      	nop
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
 800a81a:	bf00      	nop
 800a81c:	20001040 	.word	0x20001040
 800a820:	20001010 	.word	0x20001010
 800a824:	20001024 	.word	0x20001024
 800a828:	20001038 	.word	0x20001038
 800a82c:	2000103c 	.word	0x2000103c
 800a830:	200010ec 	.word	0x200010ec
 800a834:	2000104c 	.word	0x2000104c
 800a838:	0800cea8 	.word	0x0800cea8

0800a83c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a83c:	b480      	push	{r7}
 800a83e:	b085      	sub	sp, #20
 800a840:	af00      	add	r7, sp, #0
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	60b9      	str	r1, [r7, #8]
 800a846:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	3b04      	subs	r3, #4
 800a84c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a854:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	3b04      	subs	r3, #4
 800a85a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	f023 0201 	bic.w	r2, r3, #1
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	3b04      	subs	r3, #4
 800a86a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a86c:	4a0c      	ldr	r2, [pc, #48]	; (800a8a0 <pxPortInitialiseStack+0x64>)
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	3b14      	subs	r3, #20
 800a876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a878:	687a      	ldr	r2, [r7, #4]
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	3b04      	subs	r3, #4
 800a882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f06f 0202 	mvn.w	r2, #2
 800a88a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	3b20      	subs	r3, #32
 800a890:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a892:	68fb      	ldr	r3, [r7, #12]
}
 800a894:	4618      	mov	r0, r3
 800a896:	3714      	adds	r7, #20
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr
 800a8a0:	0800a8a5 	.word	0x0800a8a5

0800a8a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b085      	sub	sp, #20
 800a8a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a8ae:	4b12      	ldr	r3, [pc, #72]	; (800a8f8 <prvTaskExitError+0x54>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8b6:	d00a      	beq.n	800a8ce <prvTaskExitError+0x2a>
	__asm volatile
 800a8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8bc:	f383 8811 	msr	BASEPRI, r3
 800a8c0:	f3bf 8f6f 	isb	sy
 800a8c4:	f3bf 8f4f 	dsb	sy
 800a8c8:	60fb      	str	r3, [r7, #12]
}
 800a8ca:	bf00      	nop
 800a8cc:	e7fe      	b.n	800a8cc <prvTaskExitError+0x28>
	__asm volatile
 800a8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d2:	f383 8811 	msr	BASEPRI, r3
 800a8d6:	f3bf 8f6f 	isb	sy
 800a8da:	f3bf 8f4f 	dsb	sy
 800a8de:	60bb      	str	r3, [r7, #8]
}
 800a8e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a8e2:	bf00      	nop
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d0fc      	beq.n	800a8e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a8ea:	bf00      	nop
 800a8ec:	bf00      	nop
 800a8ee:	3714      	adds	r7, #20
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr
 800a8f8:	2000000c 	.word	0x2000000c
 800a8fc:	00000000 	.word	0x00000000

0800a900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a900:	4b07      	ldr	r3, [pc, #28]	; (800a920 <pxCurrentTCBConst2>)
 800a902:	6819      	ldr	r1, [r3, #0]
 800a904:	6808      	ldr	r0, [r1, #0]
 800a906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a90a:	f380 8809 	msr	PSP, r0
 800a90e:	f3bf 8f6f 	isb	sy
 800a912:	f04f 0000 	mov.w	r0, #0
 800a916:	f380 8811 	msr	BASEPRI, r0
 800a91a:	4770      	bx	lr
 800a91c:	f3af 8000 	nop.w

0800a920 <pxCurrentTCBConst2>:
 800a920:	20000b10 	.word	0x20000b10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a924:	bf00      	nop
 800a926:	bf00      	nop

0800a928 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a928:	4808      	ldr	r0, [pc, #32]	; (800a94c <prvPortStartFirstTask+0x24>)
 800a92a:	6800      	ldr	r0, [r0, #0]
 800a92c:	6800      	ldr	r0, [r0, #0]
 800a92e:	f380 8808 	msr	MSP, r0
 800a932:	f04f 0000 	mov.w	r0, #0
 800a936:	f380 8814 	msr	CONTROL, r0
 800a93a:	b662      	cpsie	i
 800a93c:	b661      	cpsie	f
 800a93e:	f3bf 8f4f 	dsb	sy
 800a942:	f3bf 8f6f 	isb	sy
 800a946:	df00      	svc	0
 800a948:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a94a:	bf00      	nop
 800a94c:	e000ed08 	.word	0xe000ed08

0800a950 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b086      	sub	sp, #24
 800a954:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a956:	4b46      	ldr	r3, [pc, #280]	; (800aa70 <xPortStartScheduler+0x120>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a46      	ldr	r2, [pc, #280]	; (800aa74 <xPortStartScheduler+0x124>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d10a      	bne.n	800a976 <xPortStartScheduler+0x26>
	__asm volatile
 800a960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a964:	f383 8811 	msr	BASEPRI, r3
 800a968:	f3bf 8f6f 	isb	sy
 800a96c:	f3bf 8f4f 	dsb	sy
 800a970:	613b      	str	r3, [r7, #16]
}
 800a972:	bf00      	nop
 800a974:	e7fe      	b.n	800a974 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a976:	4b3e      	ldr	r3, [pc, #248]	; (800aa70 <xPortStartScheduler+0x120>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4a3f      	ldr	r2, [pc, #252]	; (800aa78 <xPortStartScheduler+0x128>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d10a      	bne.n	800a996 <xPortStartScheduler+0x46>
	__asm volatile
 800a980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a984:	f383 8811 	msr	BASEPRI, r3
 800a988:	f3bf 8f6f 	isb	sy
 800a98c:	f3bf 8f4f 	dsb	sy
 800a990:	60fb      	str	r3, [r7, #12]
}
 800a992:	bf00      	nop
 800a994:	e7fe      	b.n	800a994 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a996:	4b39      	ldr	r3, [pc, #228]	; (800aa7c <xPortStartScheduler+0x12c>)
 800a998:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	781b      	ldrb	r3, [r3, #0]
 800a99e:	b2db      	uxtb	r3, r3
 800a9a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	22ff      	movs	r2, #255	; 0xff
 800a9a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a9b0:	78fb      	ldrb	r3, [r7, #3]
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a9b8:	b2da      	uxtb	r2, r3
 800a9ba:	4b31      	ldr	r3, [pc, #196]	; (800aa80 <xPortStartScheduler+0x130>)
 800a9bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a9be:	4b31      	ldr	r3, [pc, #196]	; (800aa84 <xPortStartScheduler+0x134>)
 800a9c0:	2207      	movs	r2, #7
 800a9c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9c4:	e009      	b.n	800a9da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a9c6:	4b2f      	ldr	r3, [pc, #188]	; (800aa84 <xPortStartScheduler+0x134>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	3b01      	subs	r3, #1
 800a9cc:	4a2d      	ldr	r2, [pc, #180]	; (800aa84 <xPortStartScheduler+0x134>)
 800a9ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a9d0:	78fb      	ldrb	r3, [r7, #3]
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	005b      	lsls	r3, r3, #1
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9da:	78fb      	ldrb	r3, [r7, #3]
 800a9dc:	b2db      	uxtb	r3, r3
 800a9de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9e2:	2b80      	cmp	r3, #128	; 0x80
 800a9e4:	d0ef      	beq.n	800a9c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a9e6:	4b27      	ldr	r3, [pc, #156]	; (800aa84 <xPortStartScheduler+0x134>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f1c3 0307 	rsb	r3, r3, #7
 800a9ee:	2b04      	cmp	r3, #4
 800a9f0:	d00a      	beq.n	800aa08 <xPortStartScheduler+0xb8>
	__asm volatile
 800a9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f6:	f383 8811 	msr	BASEPRI, r3
 800a9fa:	f3bf 8f6f 	isb	sy
 800a9fe:	f3bf 8f4f 	dsb	sy
 800aa02:	60bb      	str	r3, [r7, #8]
}
 800aa04:	bf00      	nop
 800aa06:	e7fe      	b.n	800aa06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aa08:	4b1e      	ldr	r3, [pc, #120]	; (800aa84 <xPortStartScheduler+0x134>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	021b      	lsls	r3, r3, #8
 800aa0e:	4a1d      	ldr	r2, [pc, #116]	; (800aa84 <xPortStartScheduler+0x134>)
 800aa10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aa12:	4b1c      	ldr	r3, [pc, #112]	; (800aa84 <xPortStartScheduler+0x134>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aa1a:	4a1a      	ldr	r2, [pc, #104]	; (800aa84 <xPortStartScheduler+0x134>)
 800aa1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	b2da      	uxtb	r2, r3
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aa26:	4b18      	ldr	r3, [pc, #96]	; (800aa88 <xPortStartScheduler+0x138>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4a17      	ldr	r2, [pc, #92]	; (800aa88 <xPortStartScheduler+0x138>)
 800aa2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aa30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aa32:	4b15      	ldr	r3, [pc, #84]	; (800aa88 <xPortStartScheduler+0x138>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4a14      	ldr	r2, [pc, #80]	; (800aa88 <xPortStartScheduler+0x138>)
 800aa38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800aa3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aa3e:	f000 f8dd 	bl	800abfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aa42:	4b12      	ldr	r3, [pc, #72]	; (800aa8c <xPortStartScheduler+0x13c>)
 800aa44:	2200      	movs	r2, #0
 800aa46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aa48:	f000 f8fc 	bl	800ac44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aa4c:	4b10      	ldr	r3, [pc, #64]	; (800aa90 <xPortStartScheduler+0x140>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a0f      	ldr	r2, [pc, #60]	; (800aa90 <xPortStartScheduler+0x140>)
 800aa52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aa56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aa58:	f7ff ff66 	bl	800a928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aa5c:	f7fe ff56 	bl	800990c <vTaskSwitchContext>
	prvTaskExitError();
 800aa60:	f7ff ff20 	bl	800a8a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aa64:	2300      	movs	r3, #0
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3718      	adds	r7, #24
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	e000ed00 	.word	0xe000ed00
 800aa74:	410fc271 	.word	0x410fc271
 800aa78:	410fc270 	.word	0x410fc270
 800aa7c:	e000e400 	.word	0xe000e400
 800aa80:	2000113c 	.word	0x2000113c
 800aa84:	20001140 	.word	0x20001140
 800aa88:	e000ed20 	.word	0xe000ed20
 800aa8c:	2000000c 	.word	0x2000000c
 800aa90:	e000ef34 	.word	0xe000ef34

0800aa94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
	__asm volatile
 800aa9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa9e:	f383 8811 	msr	BASEPRI, r3
 800aaa2:	f3bf 8f6f 	isb	sy
 800aaa6:	f3bf 8f4f 	dsb	sy
 800aaaa:	607b      	str	r3, [r7, #4]
}
 800aaac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aaae:	4b0f      	ldr	r3, [pc, #60]	; (800aaec <vPortEnterCritical+0x58>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	3301      	adds	r3, #1
 800aab4:	4a0d      	ldr	r2, [pc, #52]	; (800aaec <vPortEnterCritical+0x58>)
 800aab6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aab8:	4b0c      	ldr	r3, [pc, #48]	; (800aaec <vPortEnterCritical+0x58>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d10f      	bne.n	800aae0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aac0:	4b0b      	ldr	r3, [pc, #44]	; (800aaf0 <vPortEnterCritical+0x5c>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d00a      	beq.n	800aae0 <vPortEnterCritical+0x4c>
	__asm volatile
 800aaca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aace:	f383 8811 	msr	BASEPRI, r3
 800aad2:	f3bf 8f6f 	isb	sy
 800aad6:	f3bf 8f4f 	dsb	sy
 800aada:	603b      	str	r3, [r7, #0]
}
 800aadc:	bf00      	nop
 800aade:	e7fe      	b.n	800aade <vPortEnterCritical+0x4a>
	}
}
 800aae0:	bf00      	nop
 800aae2:	370c      	adds	r7, #12
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr
 800aaec:	2000000c 	.word	0x2000000c
 800aaf0:	e000ed04 	.word	0xe000ed04

0800aaf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b083      	sub	sp, #12
 800aaf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aafa:	4b12      	ldr	r3, [pc, #72]	; (800ab44 <vPortExitCritical+0x50>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d10a      	bne.n	800ab18 <vPortExitCritical+0x24>
	__asm volatile
 800ab02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab06:	f383 8811 	msr	BASEPRI, r3
 800ab0a:	f3bf 8f6f 	isb	sy
 800ab0e:	f3bf 8f4f 	dsb	sy
 800ab12:	607b      	str	r3, [r7, #4]
}
 800ab14:	bf00      	nop
 800ab16:	e7fe      	b.n	800ab16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ab18:	4b0a      	ldr	r3, [pc, #40]	; (800ab44 <vPortExitCritical+0x50>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	3b01      	subs	r3, #1
 800ab1e:	4a09      	ldr	r2, [pc, #36]	; (800ab44 <vPortExitCritical+0x50>)
 800ab20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ab22:	4b08      	ldr	r3, [pc, #32]	; (800ab44 <vPortExitCritical+0x50>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d105      	bne.n	800ab36 <vPortExitCritical+0x42>
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	f383 8811 	msr	BASEPRI, r3
}
 800ab34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ab36:	bf00      	nop
 800ab38:	370c      	adds	r7, #12
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr
 800ab42:	bf00      	nop
 800ab44:	2000000c 	.word	0x2000000c
	...

0800ab50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ab50:	f3ef 8009 	mrs	r0, PSP
 800ab54:	f3bf 8f6f 	isb	sy
 800ab58:	4b15      	ldr	r3, [pc, #84]	; (800abb0 <pxCurrentTCBConst>)
 800ab5a:	681a      	ldr	r2, [r3, #0]
 800ab5c:	f01e 0f10 	tst.w	lr, #16
 800ab60:	bf08      	it	eq
 800ab62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ab66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab6a:	6010      	str	r0, [r2, #0]
 800ab6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ab70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ab74:	f380 8811 	msr	BASEPRI, r0
 800ab78:	f3bf 8f4f 	dsb	sy
 800ab7c:	f3bf 8f6f 	isb	sy
 800ab80:	f7fe fec4 	bl	800990c <vTaskSwitchContext>
 800ab84:	f04f 0000 	mov.w	r0, #0
 800ab88:	f380 8811 	msr	BASEPRI, r0
 800ab8c:	bc09      	pop	{r0, r3}
 800ab8e:	6819      	ldr	r1, [r3, #0]
 800ab90:	6808      	ldr	r0, [r1, #0]
 800ab92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab96:	f01e 0f10 	tst.w	lr, #16
 800ab9a:	bf08      	it	eq
 800ab9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aba0:	f380 8809 	msr	PSP, r0
 800aba4:	f3bf 8f6f 	isb	sy
 800aba8:	4770      	bx	lr
 800abaa:	bf00      	nop
 800abac:	f3af 8000 	nop.w

0800abb0 <pxCurrentTCBConst>:
 800abb0:	20000b10 	.word	0x20000b10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800abb4:	bf00      	nop
 800abb6:	bf00      	nop

0800abb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
	__asm volatile
 800abbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc2:	f383 8811 	msr	BASEPRI, r3
 800abc6:	f3bf 8f6f 	isb	sy
 800abca:	f3bf 8f4f 	dsb	sy
 800abce:	607b      	str	r3, [r7, #4]
}
 800abd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800abd2:	f7fe fde1 	bl	8009798 <xTaskIncrementTick>
 800abd6:	4603      	mov	r3, r0
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d003      	beq.n	800abe4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800abdc:	4b06      	ldr	r3, [pc, #24]	; (800abf8 <xPortSysTickHandler+0x40>)
 800abde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abe2:	601a      	str	r2, [r3, #0]
 800abe4:	2300      	movs	r3, #0
 800abe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	f383 8811 	msr	BASEPRI, r3
}
 800abee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800abf0:	bf00      	nop
 800abf2:	3708      	adds	r7, #8
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}
 800abf8:	e000ed04 	.word	0xe000ed04

0800abfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800abfc:	b480      	push	{r7}
 800abfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ac00:	4b0b      	ldr	r3, [pc, #44]	; (800ac30 <vPortSetupTimerInterrupt+0x34>)
 800ac02:	2200      	movs	r2, #0
 800ac04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ac06:	4b0b      	ldr	r3, [pc, #44]	; (800ac34 <vPortSetupTimerInterrupt+0x38>)
 800ac08:	2200      	movs	r2, #0
 800ac0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ac0c:	4b0a      	ldr	r3, [pc, #40]	; (800ac38 <vPortSetupTimerInterrupt+0x3c>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4a0a      	ldr	r2, [pc, #40]	; (800ac3c <vPortSetupTimerInterrupt+0x40>)
 800ac12:	fba2 2303 	umull	r2, r3, r2, r3
 800ac16:	099b      	lsrs	r3, r3, #6
 800ac18:	4a09      	ldr	r2, [pc, #36]	; (800ac40 <vPortSetupTimerInterrupt+0x44>)
 800ac1a:	3b01      	subs	r3, #1
 800ac1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ac1e:	4b04      	ldr	r3, [pc, #16]	; (800ac30 <vPortSetupTimerInterrupt+0x34>)
 800ac20:	2207      	movs	r2, #7
 800ac22:	601a      	str	r2, [r3, #0]
}
 800ac24:	bf00      	nop
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr
 800ac2e:	bf00      	nop
 800ac30:	e000e010 	.word	0xe000e010
 800ac34:	e000e018 	.word	0xe000e018
 800ac38:	20000000 	.word	0x20000000
 800ac3c:	10624dd3 	.word	0x10624dd3
 800ac40:	e000e014 	.word	0xe000e014

0800ac44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ac44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ac54 <vPortEnableVFP+0x10>
 800ac48:	6801      	ldr	r1, [r0, #0]
 800ac4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ac4e:	6001      	str	r1, [r0, #0]
 800ac50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ac52:	bf00      	nop
 800ac54:	e000ed88 	.word	0xe000ed88

0800ac58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ac58:	b480      	push	{r7}
 800ac5a:	b085      	sub	sp, #20
 800ac5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ac5e:	f3ef 8305 	mrs	r3, IPSR
 800ac62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2b0f      	cmp	r3, #15
 800ac68:	d914      	bls.n	800ac94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ac6a:	4a17      	ldr	r2, [pc, #92]	; (800acc8 <vPortValidateInterruptPriority+0x70>)
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	4413      	add	r3, r2
 800ac70:	781b      	ldrb	r3, [r3, #0]
 800ac72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ac74:	4b15      	ldr	r3, [pc, #84]	; (800accc <vPortValidateInterruptPriority+0x74>)
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	7afa      	ldrb	r2, [r7, #11]
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d20a      	bcs.n	800ac94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ac7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac82:	f383 8811 	msr	BASEPRI, r3
 800ac86:	f3bf 8f6f 	isb	sy
 800ac8a:	f3bf 8f4f 	dsb	sy
 800ac8e:	607b      	str	r3, [r7, #4]
}
 800ac90:	bf00      	nop
 800ac92:	e7fe      	b.n	800ac92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ac94:	4b0e      	ldr	r3, [pc, #56]	; (800acd0 <vPortValidateInterruptPriority+0x78>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ac9c:	4b0d      	ldr	r3, [pc, #52]	; (800acd4 <vPortValidateInterruptPriority+0x7c>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d90a      	bls.n	800acba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800aca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca8:	f383 8811 	msr	BASEPRI, r3
 800acac:	f3bf 8f6f 	isb	sy
 800acb0:	f3bf 8f4f 	dsb	sy
 800acb4:	603b      	str	r3, [r7, #0]
}
 800acb6:	bf00      	nop
 800acb8:	e7fe      	b.n	800acb8 <vPortValidateInterruptPriority+0x60>
	}
 800acba:	bf00      	nop
 800acbc:	3714      	adds	r7, #20
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr
 800acc6:	bf00      	nop
 800acc8:	e000e3f0 	.word	0xe000e3f0
 800accc:	2000113c 	.word	0x2000113c
 800acd0:	e000ed0c 	.word	0xe000ed0c
 800acd4:	20001140 	.word	0x20001140

0800acd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b08a      	sub	sp, #40	; 0x28
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ace0:	2300      	movs	r3, #0
 800ace2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ace4:	f7fe fc9c 	bl	8009620 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ace8:	4b5b      	ldr	r3, [pc, #364]	; (800ae58 <pvPortMalloc+0x180>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d101      	bne.n	800acf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800acf0:	f000 f920 	bl	800af34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800acf4:	4b59      	ldr	r3, [pc, #356]	; (800ae5c <pvPortMalloc+0x184>)
 800acf6:	681a      	ldr	r2, [r3, #0]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	4013      	ands	r3, r2
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	f040 8093 	bne.w	800ae28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d01d      	beq.n	800ad44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ad08:	2208      	movs	r2, #8
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	4413      	add	r3, r2
 800ad0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f003 0307 	and.w	r3, r3, #7
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d014      	beq.n	800ad44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f023 0307 	bic.w	r3, r3, #7
 800ad20:	3308      	adds	r3, #8
 800ad22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f003 0307 	and.w	r3, r3, #7
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d00a      	beq.n	800ad44 <pvPortMalloc+0x6c>
	__asm volatile
 800ad2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad32:	f383 8811 	msr	BASEPRI, r3
 800ad36:	f3bf 8f6f 	isb	sy
 800ad3a:	f3bf 8f4f 	dsb	sy
 800ad3e:	617b      	str	r3, [r7, #20]
}
 800ad40:	bf00      	nop
 800ad42:	e7fe      	b.n	800ad42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d06e      	beq.n	800ae28 <pvPortMalloc+0x150>
 800ad4a:	4b45      	ldr	r3, [pc, #276]	; (800ae60 <pvPortMalloc+0x188>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d869      	bhi.n	800ae28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ad54:	4b43      	ldr	r3, [pc, #268]	; (800ae64 <pvPortMalloc+0x18c>)
 800ad56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ad58:	4b42      	ldr	r3, [pc, #264]	; (800ae64 <pvPortMalloc+0x18c>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad5e:	e004      	b.n	800ad6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ad60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ad64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d903      	bls.n	800ad7c <pvPortMalloc+0xa4>
 800ad74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d1f1      	bne.n	800ad60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ad7c:	4b36      	ldr	r3, [pc, #216]	; (800ae58 <pvPortMalloc+0x180>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d050      	beq.n	800ae28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ad86:	6a3b      	ldr	r3, [r7, #32]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2208      	movs	r2, #8
 800ad8c:	4413      	add	r3, r2
 800ad8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ad90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad92:	681a      	ldr	r2, [r3, #0]
 800ad94:	6a3b      	ldr	r3, [r7, #32]
 800ad96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ad98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9a:	685a      	ldr	r2, [r3, #4]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	1ad2      	subs	r2, r2, r3
 800ada0:	2308      	movs	r3, #8
 800ada2:	005b      	lsls	r3, r3, #1
 800ada4:	429a      	cmp	r2, r3
 800ada6:	d91f      	bls.n	800ade8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ada8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	4413      	add	r3, r2
 800adae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800adb0:	69bb      	ldr	r3, [r7, #24]
 800adb2:	f003 0307 	and.w	r3, r3, #7
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d00a      	beq.n	800add0 <pvPortMalloc+0xf8>
	__asm volatile
 800adba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adbe:	f383 8811 	msr	BASEPRI, r3
 800adc2:	f3bf 8f6f 	isb	sy
 800adc6:	f3bf 8f4f 	dsb	sy
 800adca:	613b      	str	r3, [r7, #16]
}
 800adcc:	bf00      	nop
 800adce:	e7fe      	b.n	800adce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800add0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add2:	685a      	ldr	r2, [r3, #4]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	1ad2      	subs	r2, r2, r3
 800add8:	69bb      	ldr	r3, [r7, #24]
 800adda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800addc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ade2:	69b8      	ldr	r0, [r7, #24]
 800ade4:	f000 f908 	bl	800aff8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ade8:	4b1d      	ldr	r3, [pc, #116]	; (800ae60 <pvPortMalloc+0x188>)
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	1ad3      	subs	r3, r2, r3
 800adf2:	4a1b      	ldr	r2, [pc, #108]	; (800ae60 <pvPortMalloc+0x188>)
 800adf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800adf6:	4b1a      	ldr	r3, [pc, #104]	; (800ae60 <pvPortMalloc+0x188>)
 800adf8:	681a      	ldr	r2, [r3, #0]
 800adfa:	4b1b      	ldr	r3, [pc, #108]	; (800ae68 <pvPortMalloc+0x190>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d203      	bcs.n	800ae0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ae02:	4b17      	ldr	r3, [pc, #92]	; (800ae60 <pvPortMalloc+0x188>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4a18      	ldr	r2, [pc, #96]	; (800ae68 <pvPortMalloc+0x190>)
 800ae08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ae0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae0c:	685a      	ldr	r2, [r3, #4]
 800ae0e:	4b13      	ldr	r3, [pc, #76]	; (800ae5c <pvPortMalloc+0x184>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	431a      	orrs	r2, r3
 800ae14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ae18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ae1e:	4b13      	ldr	r3, [pc, #76]	; (800ae6c <pvPortMalloc+0x194>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	3301      	adds	r3, #1
 800ae24:	4a11      	ldr	r2, [pc, #68]	; (800ae6c <pvPortMalloc+0x194>)
 800ae26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ae28:	f7fe fc08 	bl	800963c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae2c:	69fb      	ldr	r3, [r7, #28]
 800ae2e:	f003 0307 	and.w	r3, r3, #7
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d00a      	beq.n	800ae4c <pvPortMalloc+0x174>
	__asm volatile
 800ae36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae3a:	f383 8811 	msr	BASEPRI, r3
 800ae3e:	f3bf 8f6f 	isb	sy
 800ae42:	f3bf 8f4f 	dsb	sy
 800ae46:	60fb      	str	r3, [r7, #12]
}
 800ae48:	bf00      	nop
 800ae4a:	e7fe      	b.n	800ae4a <pvPortMalloc+0x172>
	return pvReturn;
 800ae4c:	69fb      	ldr	r3, [r7, #28]
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3728      	adds	r7, #40	; 0x28
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	bf00      	nop
 800ae58:	20003474 	.word	0x20003474
 800ae5c:	20003488 	.word	0x20003488
 800ae60:	20003478 	.word	0x20003478
 800ae64:	2000346c 	.word	0x2000346c
 800ae68:	2000347c 	.word	0x2000347c
 800ae6c:	20003480 	.word	0x20003480

0800ae70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b086      	sub	sp, #24
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d04d      	beq.n	800af1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ae82:	2308      	movs	r3, #8
 800ae84:	425b      	negs	r3, r3
 800ae86:	697a      	ldr	r2, [r7, #20]
 800ae88:	4413      	add	r3, r2
 800ae8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	685a      	ldr	r2, [r3, #4]
 800ae94:	4b24      	ldr	r3, [pc, #144]	; (800af28 <vPortFree+0xb8>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	4013      	ands	r3, r2
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d10a      	bne.n	800aeb4 <vPortFree+0x44>
	__asm volatile
 800ae9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea2:	f383 8811 	msr	BASEPRI, r3
 800aea6:	f3bf 8f6f 	isb	sy
 800aeaa:	f3bf 8f4f 	dsb	sy
 800aeae:	60fb      	str	r3, [r7, #12]
}
 800aeb0:	bf00      	nop
 800aeb2:	e7fe      	b.n	800aeb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d00a      	beq.n	800aed2 <vPortFree+0x62>
	__asm volatile
 800aebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec0:	f383 8811 	msr	BASEPRI, r3
 800aec4:	f3bf 8f6f 	isb	sy
 800aec8:	f3bf 8f4f 	dsb	sy
 800aecc:	60bb      	str	r3, [r7, #8]
}
 800aece:	bf00      	nop
 800aed0:	e7fe      	b.n	800aed0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	685a      	ldr	r2, [r3, #4]
 800aed6:	4b14      	ldr	r3, [pc, #80]	; (800af28 <vPortFree+0xb8>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4013      	ands	r3, r2
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d01e      	beq.n	800af1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d11a      	bne.n	800af1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	685a      	ldr	r2, [r3, #4]
 800aeec:	4b0e      	ldr	r3, [pc, #56]	; (800af28 <vPortFree+0xb8>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	43db      	mvns	r3, r3
 800aef2:	401a      	ands	r2, r3
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aef8:	f7fe fb92 	bl	8009620 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	685a      	ldr	r2, [r3, #4]
 800af00:	4b0a      	ldr	r3, [pc, #40]	; (800af2c <vPortFree+0xbc>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4413      	add	r3, r2
 800af06:	4a09      	ldr	r2, [pc, #36]	; (800af2c <vPortFree+0xbc>)
 800af08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800af0a:	6938      	ldr	r0, [r7, #16]
 800af0c:	f000 f874 	bl	800aff8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800af10:	4b07      	ldr	r3, [pc, #28]	; (800af30 <vPortFree+0xc0>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	3301      	adds	r3, #1
 800af16:	4a06      	ldr	r2, [pc, #24]	; (800af30 <vPortFree+0xc0>)
 800af18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800af1a:	f7fe fb8f 	bl	800963c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800af1e:	bf00      	nop
 800af20:	3718      	adds	r7, #24
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
 800af26:	bf00      	nop
 800af28:	20003488 	.word	0x20003488
 800af2c:	20003478 	.word	0x20003478
 800af30:	20003484 	.word	0x20003484

0800af34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800af34:	b480      	push	{r7}
 800af36:	b085      	sub	sp, #20
 800af38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800af3a:	f242 3328 	movw	r3, #9000	; 0x2328
 800af3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800af40:	4b27      	ldr	r3, [pc, #156]	; (800afe0 <prvHeapInit+0xac>)
 800af42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	f003 0307 	and.w	r3, r3, #7
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d00c      	beq.n	800af68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	3307      	adds	r3, #7
 800af52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f023 0307 	bic.w	r3, r3, #7
 800af5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800af5c:	68ba      	ldr	r2, [r7, #8]
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	1ad3      	subs	r3, r2, r3
 800af62:	4a1f      	ldr	r2, [pc, #124]	; (800afe0 <prvHeapInit+0xac>)
 800af64:	4413      	add	r3, r2
 800af66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800af6c:	4a1d      	ldr	r2, [pc, #116]	; (800afe4 <prvHeapInit+0xb0>)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800af72:	4b1c      	ldr	r3, [pc, #112]	; (800afe4 <prvHeapInit+0xb0>)
 800af74:	2200      	movs	r2, #0
 800af76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	68ba      	ldr	r2, [r7, #8]
 800af7c:	4413      	add	r3, r2
 800af7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800af80:	2208      	movs	r2, #8
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	1a9b      	subs	r3, r3, r2
 800af86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f023 0307 	bic.w	r3, r3, #7
 800af8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	4a15      	ldr	r2, [pc, #84]	; (800afe8 <prvHeapInit+0xb4>)
 800af94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800af96:	4b14      	ldr	r3, [pc, #80]	; (800afe8 <prvHeapInit+0xb4>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	2200      	movs	r2, #0
 800af9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800af9e:	4b12      	ldr	r3, [pc, #72]	; (800afe8 <prvHeapInit+0xb4>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	2200      	movs	r2, #0
 800afa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	68fa      	ldr	r2, [r7, #12]
 800afae:	1ad2      	subs	r2, r2, r3
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800afb4:	4b0c      	ldr	r3, [pc, #48]	; (800afe8 <prvHeapInit+0xb4>)
 800afb6:	681a      	ldr	r2, [r3, #0]
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	4a0a      	ldr	r2, [pc, #40]	; (800afec <prvHeapInit+0xb8>)
 800afc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	4a09      	ldr	r2, [pc, #36]	; (800aff0 <prvHeapInit+0xbc>)
 800afca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800afcc:	4b09      	ldr	r3, [pc, #36]	; (800aff4 <prvHeapInit+0xc0>)
 800afce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800afd2:	601a      	str	r2, [r3, #0]
}
 800afd4:	bf00      	nop
 800afd6:	3714      	adds	r7, #20
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr
 800afe0:	20001144 	.word	0x20001144
 800afe4:	2000346c 	.word	0x2000346c
 800afe8:	20003474 	.word	0x20003474
 800afec:	2000347c 	.word	0x2000347c
 800aff0:	20003478 	.word	0x20003478
 800aff4:	20003488 	.word	0x20003488

0800aff8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aff8:	b480      	push	{r7}
 800affa:	b085      	sub	sp, #20
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b000:	4b28      	ldr	r3, [pc, #160]	; (800b0a4 <prvInsertBlockIntoFreeList+0xac>)
 800b002:	60fb      	str	r3, [r7, #12]
 800b004:	e002      	b.n	800b00c <prvInsertBlockIntoFreeList+0x14>
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	60fb      	str	r3, [r7, #12]
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	429a      	cmp	r2, r3
 800b014:	d8f7      	bhi.n	800b006 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	685b      	ldr	r3, [r3, #4]
 800b01e:	68ba      	ldr	r2, [r7, #8]
 800b020:	4413      	add	r3, r2
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	429a      	cmp	r2, r3
 800b026:	d108      	bne.n	800b03a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	685a      	ldr	r2, [r3, #4]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	441a      	add	r2, r3
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	68ba      	ldr	r2, [r7, #8]
 800b044:	441a      	add	r2, r3
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d118      	bne.n	800b080 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681a      	ldr	r2, [r3, #0]
 800b052:	4b15      	ldr	r3, [pc, #84]	; (800b0a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	429a      	cmp	r2, r3
 800b058:	d00d      	beq.n	800b076 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	685a      	ldr	r2, [r3, #4]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	441a      	add	r2, r3
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	681a      	ldr	r2, [r3, #0]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	601a      	str	r2, [r3, #0]
 800b074:	e008      	b.n	800b088 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b076:	4b0c      	ldr	r3, [pc, #48]	; (800b0a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b078:	681a      	ldr	r2, [r3, #0]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	601a      	str	r2, [r3, #0]
 800b07e:	e003      	b.n	800b088 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681a      	ldr	r2, [r3, #0]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b088:	68fa      	ldr	r2, [r7, #12]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d002      	beq.n	800b096 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b096:	bf00      	nop
 800b098:	3714      	adds	r7, #20
 800b09a:	46bd      	mov	sp, r7
 800b09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a0:	4770      	bx	lr
 800b0a2:	bf00      	nop
 800b0a4:	2000346c 	.word	0x2000346c
 800b0a8:	20003474 	.word	0x20003474

0800b0ac <_ZdlPvj>:
 800b0ac:	f000 b814 	b.w	800b0d8 <_ZdlPv>

0800b0b0 <_Znwj>:
 800b0b0:	2801      	cmp	r0, #1
 800b0b2:	bf38      	it	cc
 800b0b4:	2001      	movcc	r0, #1
 800b0b6:	b510      	push	{r4, lr}
 800b0b8:	4604      	mov	r4, r0
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	f000 f85e 	bl	800b17c <malloc>
 800b0c0:	b930      	cbnz	r0, 800b0d0 <_Znwj+0x20>
 800b0c2:	f000 f81d 	bl	800b100 <_ZSt15get_new_handlerv>
 800b0c6:	b908      	cbnz	r0, 800b0cc <_Znwj+0x1c>
 800b0c8:	f000 f822 	bl	800b110 <abort>
 800b0cc:	4780      	blx	r0
 800b0ce:	e7f4      	b.n	800b0ba <_Znwj+0xa>
 800b0d0:	bd10      	pop	{r4, pc}

0800b0d2 <__cxa_pure_virtual>:
 800b0d2:	b508      	push	{r3, lr}
 800b0d4:	f000 f80e 	bl	800b0f4 <_ZSt9terminatev>

0800b0d8 <_ZdlPv>:
 800b0d8:	f000 b858 	b.w	800b18c <free>

0800b0dc <_ZN10__cxxabiv111__terminateEPFvvE>:
 800b0dc:	b508      	push	{r3, lr}
 800b0de:	4780      	blx	r0
 800b0e0:	f000 f816 	bl	800b110 <abort>

0800b0e4 <_ZSt13get_terminatev>:
 800b0e4:	4b02      	ldr	r3, [pc, #8]	; (800b0f0 <_ZSt13get_terminatev+0xc>)
 800b0e6:	6818      	ldr	r0, [r3, #0]
 800b0e8:	f3bf 8f5b 	dmb	ish
 800b0ec:	4770      	bx	lr
 800b0ee:	bf00      	nop
 800b0f0:	20000010 	.word	0x20000010

0800b0f4 <_ZSt9terminatev>:
 800b0f4:	b508      	push	{r3, lr}
 800b0f6:	f7ff fff5 	bl	800b0e4 <_ZSt13get_terminatev>
 800b0fa:	f7ff ffef 	bl	800b0dc <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800b100 <_ZSt15get_new_handlerv>:
 800b100:	4b02      	ldr	r3, [pc, #8]	; (800b10c <_ZSt15get_new_handlerv+0xc>)
 800b102:	6818      	ldr	r0, [r3, #0]
 800b104:	f3bf 8f5b 	dmb	ish
 800b108:	4770      	bx	lr
 800b10a:	bf00      	nop
 800b10c:	2000348c 	.word	0x2000348c

0800b110 <abort>:
 800b110:	b508      	push	{r3, lr}
 800b112:	2006      	movs	r0, #6
 800b114:	f000 f9fe 	bl	800b514 <raise>
 800b118:	2001      	movs	r0, #1
 800b11a:	f7f7 fa03 	bl	8002524 <_exit>

0800b11e <atoi>:
 800b11e:	220a      	movs	r2, #10
 800b120:	2100      	movs	r1, #0
 800b122:	f000 bb6d 	b.w	800b800 <strtol>
	...

0800b128 <__errno>:
 800b128:	4b01      	ldr	r3, [pc, #4]	; (800b130 <__errno+0x8>)
 800b12a:	6818      	ldr	r0, [r3, #0]
 800b12c:	4770      	bx	lr
 800b12e:	bf00      	nop
 800b130:	20000014 	.word	0x20000014

0800b134 <__libc_init_array>:
 800b134:	b570      	push	{r4, r5, r6, lr}
 800b136:	4d0d      	ldr	r5, [pc, #52]	; (800b16c <__libc_init_array+0x38>)
 800b138:	4c0d      	ldr	r4, [pc, #52]	; (800b170 <__libc_init_array+0x3c>)
 800b13a:	1b64      	subs	r4, r4, r5
 800b13c:	10a4      	asrs	r4, r4, #2
 800b13e:	2600      	movs	r6, #0
 800b140:	42a6      	cmp	r6, r4
 800b142:	d109      	bne.n	800b158 <__libc_init_array+0x24>
 800b144:	4d0b      	ldr	r5, [pc, #44]	; (800b174 <__libc_init_array+0x40>)
 800b146:	4c0c      	ldr	r4, [pc, #48]	; (800b178 <__libc_init_array+0x44>)
 800b148:	f001 fe18 	bl	800cd7c <_init>
 800b14c:	1b64      	subs	r4, r4, r5
 800b14e:	10a4      	asrs	r4, r4, #2
 800b150:	2600      	movs	r6, #0
 800b152:	42a6      	cmp	r6, r4
 800b154:	d105      	bne.n	800b162 <__libc_init_array+0x2e>
 800b156:	bd70      	pop	{r4, r5, r6, pc}
 800b158:	f855 3b04 	ldr.w	r3, [r5], #4
 800b15c:	4798      	blx	r3
 800b15e:	3601      	adds	r6, #1
 800b160:	e7ee      	b.n	800b140 <__libc_init_array+0xc>
 800b162:	f855 3b04 	ldr.w	r3, [r5], #4
 800b166:	4798      	blx	r3
 800b168:	3601      	adds	r6, #1
 800b16a:	e7f2      	b.n	800b152 <__libc_init_array+0x1e>
 800b16c:	0800d2b8 	.word	0x0800d2b8
 800b170:	0800d2b8 	.word	0x0800d2b8
 800b174:	0800d2b8 	.word	0x0800d2b8
 800b178:	0800d2c0 	.word	0x0800d2c0

0800b17c <malloc>:
 800b17c:	4b02      	ldr	r3, [pc, #8]	; (800b188 <malloc+0xc>)
 800b17e:	4601      	mov	r1, r0
 800b180:	6818      	ldr	r0, [r3, #0]
 800b182:	f000 b88d 	b.w	800b2a0 <_malloc_r>
 800b186:	bf00      	nop
 800b188:	20000014 	.word	0x20000014

0800b18c <free>:
 800b18c:	4b02      	ldr	r3, [pc, #8]	; (800b198 <free+0xc>)
 800b18e:	4601      	mov	r1, r0
 800b190:	6818      	ldr	r0, [r3, #0]
 800b192:	f000 b819 	b.w	800b1c8 <_free_r>
 800b196:	bf00      	nop
 800b198:	20000014 	.word	0x20000014

0800b19c <memcpy>:
 800b19c:	440a      	add	r2, r1
 800b19e:	4291      	cmp	r1, r2
 800b1a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1a4:	d100      	bne.n	800b1a8 <memcpy+0xc>
 800b1a6:	4770      	bx	lr
 800b1a8:	b510      	push	{r4, lr}
 800b1aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1b2:	4291      	cmp	r1, r2
 800b1b4:	d1f9      	bne.n	800b1aa <memcpy+0xe>
 800b1b6:	bd10      	pop	{r4, pc}

0800b1b8 <memset>:
 800b1b8:	4402      	add	r2, r0
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d100      	bne.n	800b1c2 <memset+0xa>
 800b1c0:	4770      	bx	lr
 800b1c2:	f803 1b01 	strb.w	r1, [r3], #1
 800b1c6:	e7f9      	b.n	800b1bc <memset+0x4>

0800b1c8 <_free_r>:
 800b1c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1ca:	2900      	cmp	r1, #0
 800b1cc:	d044      	beq.n	800b258 <_free_r+0x90>
 800b1ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1d2:	9001      	str	r0, [sp, #4]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	f1a1 0404 	sub.w	r4, r1, #4
 800b1da:	bfb8      	it	lt
 800b1dc:	18e4      	addlt	r4, r4, r3
 800b1de:	f000 fe5d 	bl	800be9c <__malloc_lock>
 800b1e2:	4a1e      	ldr	r2, [pc, #120]	; (800b25c <_free_r+0x94>)
 800b1e4:	9801      	ldr	r0, [sp, #4]
 800b1e6:	6813      	ldr	r3, [r2, #0]
 800b1e8:	b933      	cbnz	r3, 800b1f8 <_free_r+0x30>
 800b1ea:	6063      	str	r3, [r4, #4]
 800b1ec:	6014      	str	r4, [r2, #0]
 800b1ee:	b003      	add	sp, #12
 800b1f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1f4:	f000 be58 	b.w	800bea8 <__malloc_unlock>
 800b1f8:	42a3      	cmp	r3, r4
 800b1fa:	d908      	bls.n	800b20e <_free_r+0x46>
 800b1fc:	6825      	ldr	r5, [r4, #0]
 800b1fe:	1961      	adds	r1, r4, r5
 800b200:	428b      	cmp	r3, r1
 800b202:	bf01      	itttt	eq
 800b204:	6819      	ldreq	r1, [r3, #0]
 800b206:	685b      	ldreq	r3, [r3, #4]
 800b208:	1949      	addeq	r1, r1, r5
 800b20a:	6021      	streq	r1, [r4, #0]
 800b20c:	e7ed      	b.n	800b1ea <_free_r+0x22>
 800b20e:	461a      	mov	r2, r3
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	b10b      	cbz	r3, 800b218 <_free_r+0x50>
 800b214:	42a3      	cmp	r3, r4
 800b216:	d9fa      	bls.n	800b20e <_free_r+0x46>
 800b218:	6811      	ldr	r1, [r2, #0]
 800b21a:	1855      	adds	r5, r2, r1
 800b21c:	42a5      	cmp	r5, r4
 800b21e:	d10b      	bne.n	800b238 <_free_r+0x70>
 800b220:	6824      	ldr	r4, [r4, #0]
 800b222:	4421      	add	r1, r4
 800b224:	1854      	adds	r4, r2, r1
 800b226:	42a3      	cmp	r3, r4
 800b228:	6011      	str	r1, [r2, #0]
 800b22a:	d1e0      	bne.n	800b1ee <_free_r+0x26>
 800b22c:	681c      	ldr	r4, [r3, #0]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	6053      	str	r3, [r2, #4]
 800b232:	4421      	add	r1, r4
 800b234:	6011      	str	r1, [r2, #0]
 800b236:	e7da      	b.n	800b1ee <_free_r+0x26>
 800b238:	d902      	bls.n	800b240 <_free_r+0x78>
 800b23a:	230c      	movs	r3, #12
 800b23c:	6003      	str	r3, [r0, #0]
 800b23e:	e7d6      	b.n	800b1ee <_free_r+0x26>
 800b240:	6825      	ldr	r5, [r4, #0]
 800b242:	1961      	adds	r1, r4, r5
 800b244:	428b      	cmp	r3, r1
 800b246:	bf04      	itt	eq
 800b248:	6819      	ldreq	r1, [r3, #0]
 800b24a:	685b      	ldreq	r3, [r3, #4]
 800b24c:	6063      	str	r3, [r4, #4]
 800b24e:	bf04      	itt	eq
 800b250:	1949      	addeq	r1, r1, r5
 800b252:	6021      	streq	r1, [r4, #0]
 800b254:	6054      	str	r4, [r2, #4]
 800b256:	e7ca      	b.n	800b1ee <_free_r+0x26>
 800b258:	b003      	add	sp, #12
 800b25a:	bd30      	pop	{r4, r5, pc}
 800b25c:	20003490 	.word	0x20003490

0800b260 <sbrk_aligned>:
 800b260:	b570      	push	{r4, r5, r6, lr}
 800b262:	4e0e      	ldr	r6, [pc, #56]	; (800b29c <sbrk_aligned+0x3c>)
 800b264:	460c      	mov	r4, r1
 800b266:	6831      	ldr	r1, [r6, #0]
 800b268:	4605      	mov	r5, r0
 800b26a:	b911      	cbnz	r1, 800b272 <sbrk_aligned+0x12>
 800b26c:	f000 f91a 	bl	800b4a4 <_sbrk_r>
 800b270:	6030      	str	r0, [r6, #0]
 800b272:	4621      	mov	r1, r4
 800b274:	4628      	mov	r0, r5
 800b276:	f000 f915 	bl	800b4a4 <_sbrk_r>
 800b27a:	1c43      	adds	r3, r0, #1
 800b27c:	d00a      	beq.n	800b294 <sbrk_aligned+0x34>
 800b27e:	1cc4      	adds	r4, r0, #3
 800b280:	f024 0403 	bic.w	r4, r4, #3
 800b284:	42a0      	cmp	r0, r4
 800b286:	d007      	beq.n	800b298 <sbrk_aligned+0x38>
 800b288:	1a21      	subs	r1, r4, r0
 800b28a:	4628      	mov	r0, r5
 800b28c:	f000 f90a 	bl	800b4a4 <_sbrk_r>
 800b290:	3001      	adds	r0, #1
 800b292:	d101      	bne.n	800b298 <sbrk_aligned+0x38>
 800b294:	f04f 34ff 	mov.w	r4, #4294967295
 800b298:	4620      	mov	r0, r4
 800b29a:	bd70      	pop	{r4, r5, r6, pc}
 800b29c:	20003494 	.word	0x20003494

0800b2a0 <_malloc_r>:
 800b2a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a4:	1ccd      	adds	r5, r1, #3
 800b2a6:	f025 0503 	bic.w	r5, r5, #3
 800b2aa:	3508      	adds	r5, #8
 800b2ac:	2d0c      	cmp	r5, #12
 800b2ae:	bf38      	it	cc
 800b2b0:	250c      	movcc	r5, #12
 800b2b2:	2d00      	cmp	r5, #0
 800b2b4:	4607      	mov	r7, r0
 800b2b6:	db01      	blt.n	800b2bc <_malloc_r+0x1c>
 800b2b8:	42a9      	cmp	r1, r5
 800b2ba:	d905      	bls.n	800b2c8 <_malloc_r+0x28>
 800b2bc:	230c      	movs	r3, #12
 800b2be:	603b      	str	r3, [r7, #0]
 800b2c0:	2600      	movs	r6, #0
 800b2c2:	4630      	mov	r0, r6
 800b2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2c8:	4e2e      	ldr	r6, [pc, #184]	; (800b384 <_malloc_r+0xe4>)
 800b2ca:	f000 fde7 	bl	800be9c <__malloc_lock>
 800b2ce:	6833      	ldr	r3, [r6, #0]
 800b2d0:	461c      	mov	r4, r3
 800b2d2:	bb34      	cbnz	r4, 800b322 <_malloc_r+0x82>
 800b2d4:	4629      	mov	r1, r5
 800b2d6:	4638      	mov	r0, r7
 800b2d8:	f7ff ffc2 	bl	800b260 <sbrk_aligned>
 800b2dc:	1c43      	adds	r3, r0, #1
 800b2de:	4604      	mov	r4, r0
 800b2e0:	d14d      	bne.n	800b37e <_malloc_r+0xde>
 800b2e2:	6834      	ldr	r4, [r6, #0]
 800b2e4:	4626      	mov	r6, r4
 800b2e6:	2e00      	cmp	r6, #0
 800b2e8:	d140      	bne.n	800b36c <_malloc_r+0xcc>
 800b2ea:	6823      	ldr	r3, [r4, #0]
 800b2ec:	4631      	mov	r1, r6
 800b2ee:	4638      	mov	r0, r7
 800b2f0:	eb04 0803 	add.w	r8, r4, r3
 800b2f4:	f000 f8d6 	bl	800b4a4 <_sbrk_r>
 800b2f8:	4580      	cmp	r8, r0
 800b2fa:	d13a      	bne.n	800b372 <_malloc_r+0xd2>
 800b2fc:	6821      	ldr	r1, [r4, #0]
 800b2fe:	3503      	adds	r5, #3
 800b300:	1a6d      	subs	r5, r5, r1
 800b302:	f025 0503 	bic.w	r5, r5, #3
 800b306:	3508      	adds	r5, #8
 800b308:	2d0c      	cmp	r5, #12
 800b30a:	bf38      	it	cc
 800b30c:	250c      	movcc	r5, #12
 800b30e:	4629      	mov	r1, r5
 800b310:	4638      	mov	r0, r7
 800b312:	f7ff ffa5 	bl	800b260 <sbrk_aligned>
 800b316:	3001      	adds	r0, #1
 800b318:	d02b      	beq.n	800b372 <_malloc_r+0xd2>
 800b31a:	6823      	ldr	r3, [r4, #0]
 800b31c:	442b      	add	r3, r5
 800b31e:	6023      	str	r3, [r4, #0]
 800b320:	e00e      	b.n	800b340 <_malloc_r+0xa0>
 800b322:	6822      	ldr	r2, [r4, #0]
 800b324:	1b52      	subs	r2, r2, r5
 800b326:	d41e      	bmi.n	800b366 <_malloc_r+0xc6>
 800b328:	2a0b      	cmp	r2, #11
 800b32a:	d916      	bls.n	800b35a <_malloc_r+0xba>
 800b32c:	1961      	adds	r1, r4, r5
 800b32e:	42a3      	cmp	r3, r4
 800b330:	6025      	str	r5, [r4, #0]
 800b332:	bf18      	it	ne
 800b334:	6059      	strne	r1, [r3, #4]
 800b336:	6863      	ldr	r3, [r4, #4]
 800b338:	bf08      	it	eq
 800b33a:	6031      	streq	r1, [r6, #0]
 800b33c:	5162      	str	r2, [r4, r5]
 800b33e:	604b      	str	r3, [r1, #4]
 800b340:	4638      	mov	r0, r7
 800b342:	f104 060b 	add.w	r6, r4, #11
 800b346:	f000 fdaf 	bl	800bea8 <__malloc_unlock>
 800b34a:	f026 0607 	bic.w	r6, r6, #7
 800b34e:	1d23      	adds	r3, r4, #4
 800b350:	1af2      	subs	r2, r6, r3
 800b352:	d0b6      	beq.n	800b2c2 <_malloc_r+0x22>
 800b354:	1b9b      	subs	r3, r3, r6
 800b356:	50a3      	str	r3, [r4, r2]
 800b358:	e7b3      	b.n	800b2c2 <_malloc_r+0x22>
 800b35a:	6862      	ldr	r2, [r4, #4]
 800b35c:	42a3      	cmp	r3, r4
 800b35e:	bf0c      	ite	eq
 800b360:	6032      	streq	r2, [r6, #0]
 800b362:	605a      	strne	r2, [r3, #4]
 800b364:	e7ec      	b.n	800b340 <_malloc_r+0xa0>
 800b366:	4623      	mov	r3, r4
 800b368:	6864      	ldr	r4, [r4, #4]
 800b36a:	e7b2      	b.n	800b2d2 <_malloc_r+0x32>
 800b36c:	4634      	mov	r4, r6
 800b36e:	6876      	ldr	r6, [r6, #4]
 800b370:	e7b9      	b.n	800b2e6 <_malloc_r+0x46>
 800b372:	230c      	movs	r3, #12
 800b374:	603b      	str	r3, [r7, #0]
 800b376:	4638      	mov	r0, r7
 800b378:	f000 fd96 	bl	800bea8 <__malloc_unlock>
 800b37c:	e7a1      	b.n	800b2c2 <_malloc_r+0x22>
 800b37e:	6025      	str	r5, [r4, #0]
 800b380:	e7de      	b.n	800b340 <_malloc_r+0xa0>
 800b382:	bf00      	nop
 800b384:	20003490 	.word	0x20003490

0800b388 <iprintf>:
 800b388:	b40f      	push	{r0, r1, r2, r3}
 800b38a:	4b0a      	ldr	r3, [pc, #40]	; (800b3b4 <iprintf+0x2c>)
 800b38c:	b513      	push	{r0, r1, r4, lr}
 800b38e:	681c      	ldr	r4, [r3, #0]
 800b390:	b124      	cbz	r4, 800b39c <iprintf+0x14>
 800b392:	69a3      	ldr	r3, [r4, #24]
 800b394:	b913      	cbnz	r3, 800b39c <iprintf+0x14>
 800b396:	4620      	mov	r0, r4
 800b398:	f000 fc56 	bl	800bc48 <__sinit>
 800b39c:	ab05      	add	r3, sp, #20
 800b39e:	9a04      	ldr	r2, [sp, #16]
 800b3a0:	68a1      	ldr	r1, [r4, #8]
 800b3a2:	9301      	str	r3, [sp, #4]
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	f000 ff81 	bl	800c2ac <_vfiprintf_r>
 800b3aa:	b002      	add	sp, #8
 800b3ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3b0:	b004      	add	sp, #16
 800b3b2:	4770      	bx	lr
 800b3b4:	20000014 	.word	0x20000014

0800b3b8 <_puts_r>:
 800b3b8:	b570      	push	{r4, r5, r6, lr}
 800b3ba:	460e      	mov	r6, r1
 800b3bc:	4605      	mov	r5, r0
 800b3be:	b118      	cbz	r0, 800b3c8 <_puts_r+0x10>
 800b3c0:	6983      	ldr	r3, [r0, #24]
 800b3c2:	b90b      	cbnz	r3, 800b3c8 <_puts_r+0x10>
 800b3c4:	f000 fc40 	bl	800bc48 <__sinit>
 800b3c8:	69ab      	ldr	r3, [r5, #24]
 800b3ca:	68ac      	ldr	r4, [r5, #8]
 800b3cc:	b913      	cbnz	r3, 800b3d4 <_puts_r+0x1c>
 800b3ce:	4628      	mov	r0, r5
 800b3d0:	f000 fc3a 	bl	800bc48 <__sinit>
 800b3d4:	4b2c      	ldr	r3, [pc, #176]	; (800b488 <_puts_r+0xd0>)
 800b3d6:	429c      	cmp	r4, r3
 800b3d8:	d120      	bne.n	800b41c <_puts_r+0x64>
 800b3da:	686c      	ldr	r4, [r5, #4]
 800b3dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b3de:	07db      	lsls	r3, r3, #31
 800b3e0:	d405      	bmi.n	800b3ee <_puts_r+0x36>
 800b3e2:	89a3      	ldrh	r3, [r4, #12]
 800b3e4:	0598      	lsls	r0, r3, #22
 800b3e6:	d402      	bmi.n	800b3ee <_puts_r+0x36>
 800b3e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3ea:	f000 fcdd 	bl	800bda8 <__retarget_lock_acquire_recursive>
 800b3ee:	89a3      	ldrh	r3, [r4, #12]
 800b3f0:	0719      	lsls	r1, r3, #28
 800b3f2:	d51d      	bpl.n	800b430 <_puts_r+0x78>
 800b3f4:	6923      	ldr	r3, [r4, #16]
 800b3f6:	b1db      	cbz	r3, 800b430 <_puts_r+0x78>
 800b3f8:	3e01      	subs	r6, #1
 800b3fa:	68a3      	ldr	r3, [r4, #8]
 800b3fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b400:	3b01      	subs	r3, #1
 800b402:	60a3      	str	r3, [r4, #8]
 800b404:	bb39      	cbnz	r1, 800b456 <_puts_r+0x9e>
 800b406:	2b00      	cmp	r3, #0
 800b408:	da38      	bge.n	800b47c <_puts_r+0xc4>
 800b40a:	4622      	mov	r2, r4
 800b40c:	210a      	movs	r1, #10
 800b40e:	4628      	mov	r0, r5
 800b410:	f000 fa00 	bl	800b814 <__swbuf_r>
 800b414:	3001      	adds	r0, #1
 800b416:	d011      	beq.n	800b43c <_puts_r+0x84>
 800b418:	250a      	movs	r5, #10
 800b41a:	e011      	b.n	800b440 <_puts_r+0x88>
 800b41c:	4b1b      	ldr	r3, [pc, #108]	; (800b48c <_puts_r+0xd4>)
 800b41e:	429c      	cmp	r4, r3
 800b420:	d101      	bne.n	800b426 <_puts_r+0x6e>
 800b422:	68ac      	ldr	r4, [r5, #8]
 800b424:	e7da      	b.n	800b3dc <_puts_r+0x24>
 800b426:	4b1a      	ldr	r3, [pc, #104]	; (800b490 <_puts_r+0xd8>)
 800b428:	429c      	cmp	r4, r3
 800b42a:	bf08      	it	eq
 800b42c:	68ec      	ldreq	r4, [r5, #12]
 800b42e:	e7d5      	b.n	800b3dc <_puts_r+0x24>
 800b430:	4621      	mov	r1, r4
 800b432:	4628      	mov	r0, r5
 800b434:	f000 fa52 	bl	800b8dc <__swsetup_r>
 800b438:	2800      	cmp	r0, #0
 800b43a:	d0dd      	beq.n	800b3f8 <_puts_r+0x40>
 800b43c:	f04f 35ff 	mov.w	r5, #4294967295
 800b440:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b442:	07da      	lsls	r2, r3, #31
 800b444:	d405      	bmi.n	800b452 <_puts_r+0x9a>
 800b446:	89a3      	ldrh	r3, [r4, #12]
 800b448:	059b      	lsls	r3, r3, #22
 800b44a:	d402      	bmi.n	800b452 <_puts_r+0x9a>
 800b44c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b44e:	f000 fcac 	bl	800bdaa <__retarget_lock_release_recursive>
 800b452:	4628      	mov	r0, r5
 800b454:	bd70      	pop	{r4, r5, r6, pc}
 800b456:	2b00      	cmp	r3, #0
 800b458:	da04      	bge.n	800b464 <_puts_r+0xac>
 800b45a:	69a2      	ldr	r2, [r4, #24]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	dc06      	bgt.n	800b46e <_puts_r+0xb6>
 800b460:	290a      	cmp	r1, #10
 800b462:	d004      	beq.n	800b46e <_puts_r+0xb6>
 800b464:	6823      	ldr	r3, [r4, #0]
 800b466:	1c5a      	adds	r2, r3, #1
 800b468:	6022      	str	r2, [r4, #0]
 800b46a:	7019      	strb	r1, [r3, #0]
 800b46c:	e7c5      	b.n	800b3fa <_puts_r+0x42>
 800b46e:	4622      	mov	r2, r4
 800b470:	4628      	mov	r0, r5
 800b472:	f000 f9cf 	bl	800b814 <__swbuf_r>
 800b476:	3001      	adds	r0, #1
 800b478:	d1bf      	bne.n	800b3fa <_puts_r+0x42>
 800b47a:	e7df      	b.n	800b43c <_puts_r+0x84>
 800b47c:	6823      	ldr	r3, [r4, #0]
 800b47e:	250a      	movs	r5, #10
 800b480:	1c5a      	adds	r2, r3, #1
 800b482:	6022      	str	r2, [r4, #0]
 800b484:	701d      	strb	r5, [r3, #0]
 800b486:	e7db      	b.n	800b440 <_puts_r+0x88>
 800b488:	0800d220 	.word	0x0800d220
 800b48c:	0800d240 	.word	0x0800d240
 800b490:	0800d200 	.word	0x0800d200

0800b494 <puts>:
 800b494:	4b02      	ldr	r3, [pc, #8]	; (800b4a0 <puts+0xc>)
 800b496:	4601      	mov	r1, r0
 800b498:	6818      	ldr	r0, [r3, #0]
 800b49a:	f7ff bf8d 	b.w	800b3b8 <_puts_r>
 800b49e:	bf00      	nop
 800b4a0:	20000014 	.word	0x20000014

0800b4a4 <_sbrk_r>:
 800b4a4:	b538      	push	{r3, r4, r5, lr}
 800b4a6:	4d06      	ldr	r5, [pc, #24]	; (800b4c0 <_sbrk_r+0x1c>)
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	4604      	mov	r4, r0
 800b4ac:	4608      	mov	r0, r1
 800b4ae:	602b      	str	r3, [r5, #0]
 800b4b0:	f7f7 f894 	bl	80025dc <_sbrk>
 800b4b4:	1c43      	adds	r3, r0, #1
 800b4b6:	d102      	bne.n	800b4be <_sbrk_r+0x1a>
 800b4b8:	682b      	ldr	r3, [r5, #0]
 800b4ba:	b103      	cbz	r3, 800b4be <_sbrk_r+0x1a>
 800b4bc:	6023      	str	r3, [r4, #0]
 800b4be:	bd38      	pop	{r3, r4, r5, pc}
 800b4c0:	2000349c 	.word	0x2000349c

0800b4c4 <_raise_r>:
 800b4c4:	291f      	cmp	r1, #31
 800b4c6:	b538      	push	{r3, r4, r5, lr}
 800b4c8:	4604      	mov	r4, r0
 800b4ca:	460d      	mov	r5, r1
 800b4cc:	d904      	bls.n	800b4d8 <_raise_r+0x14>
 800b4ce:	2316      	movs	r3, #22
 800b4d0:	6003      	str	r3, [r0, #0]
 800b4d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b4d6:	bd38      	pop	{r3, r4, r5, pc}
 800b4d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b4da:	b112      	cbz	r2, 800b4e2 <_raise_r+0x1e>
 800b4dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b4e0:	b94b      	cbnz	r3, 800b4f6 <_raise_r+0x32>
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	f000 f830 	bl	800b548 <_getpid_r>
 800b4e8:	462a      	mov	r2, r5
 800b4ea:	4601      	mov	r1, r0
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4f2:	f000 b817 	b.w	800b524 <_kill_r>
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	d00a      	beq.n	800b510 <_raise_r+0x4c>
 800b4fa:	1c59      	adds	r1, r3, #1
 800b4fc:	d103      	bne.n	800b506 <_raise_r+0x42>
 800b4fe:	2316      	movs	r3, #22
 800b500:	6003      	str	r3, [r0, #0]
 800b502:	2001      	movs	r0, #1
 800b504:	e7e7      	b.n	800b4d6 <_raise_r+0x12>
 800b506:	2400      	movs	r4, #0
 800b508:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b50c:	4628      	mov	r0, r5
 800b50e:	4798      	blx	r3
 800b510:	2000      	movs	r0, #0
 800b512:	e7e0      	b.n	800b4d6 <_raise_r+0x12>

0800b514 <raise>:
 800b514:	4b02      	ldr	r3, [pc, #8]	; (800b520 <raise+0xc>)
 800b516:	4601      	mov	r1, r0
 800b518:	6818      	ldr	r0, [r3, #0]
 800b51a:	f7ff bfd3 	b.w	800b4c4 <_raise_r>
 800b51e:	bf00      	nop
 800b520:	20000014 	.word	0x20000014

0800b524 <_kill_r>:
 800b524:	b538      	push	{r3, r4, r5, lr}
 800b526:	4d07      	ldr	r5, [pc, #28]	; (800b544 <_kill_r+0x20>)
 800b528:	2300      	movs	r3, #0
 800b52a:	4604      	mov	r4, r0
 800b52c:	4608      	mov	r0, r1
 800b52e:	4611      	mov	r1, r2
 800b530:	602b      	str	r3, [r5, #0]
 800b532:	f7f6 ffe7 	bl	8002504 <_kill>
 800b536:	1c43      	adds	r3, r0, #1
 800b538:	d102      	bne.n	800b540 <_kill_r+0x1c>
 800b53a:	682b      	ldr	r3, [r5, #0]
 800b53c:	b103      	cbz	r3, 800b540 <_kill_r+0x1c>
 800b53e:	6023      	str	r3, [r4, #0]
 800b540:	bd38      	pop	{r3, r4, r5, pc}
 800b542:	bf00      	nop
 800b544:	2000349c 	.word	0x2000349c

0800b548 <_getpid_r>:
 800b548:	f7f6 bfd4 	b.w	80024f4 <_getpid>

0800b54c <siscanf>:
 800b54c:	b40e      	push	{r1, r2, r3}
 800b54e:	b510      	push	{r4, lr}
 800b550:	b09f      	sub	sp, #124	; 0x7c
 800b552:	ac21      	add	r4, sp, #132	; 0x84
 800b554:	f44f 7101 	mov.w	r1, #516	; 0x204
 800b558:	f854 2b04 	ldr.w	r2, [r4], #4
 800b55c:	9201      	str	r2, [sp, #4]
 800b55e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800b562:	9004      	str	r0, [sp, #16]
 800b564:	9008      	str	r0, [sp, #32]
 800b566:	f7f4 fe3d 	bl	80001e4 <strlen>
 800b56a:	4b0c      	ldr	r3, [pc, #48]	; (800b59c <siscanf+0x50>)
 800b56c:	9005      	str	r0, [sp, #20]
 800b56e:	9009      	str	r0, [sp, #36]	; 0x24
 800b570:	930d      	str	r3, [sp, #52]	; 0x34
 800b572:	480b      	ldr	r0, [pc, #44]	; (800b5a0 <siscanf+0x54>)
 800b574:	9a01      	ldr	r2, [sp, #4]
 800b576:	6800      	ldr	r0, [r0, #0]
 800b578:	9403      	str	r4, [sp, #12]
 800b57a:	2300      	movs	r3, #0
 800b57c:	9311      	str	r3, [sp, #68]	; 0x44
 800b57e:	9316      	str	r3, [sp, #88]	; 0x58
 800b580:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b584:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b588:	a904      	add	r1, sp, #16
 800b58a:	4623      	mov	r3, r4
 800b58c:	f000 fcec 	bl	800bf68 <__ssvfiscanf_r>
 800b590:	b01f      	add	sp, #124	; 0x7c
 800b592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b596:	b003      	add	sp, #12
 800b598:	4770      	bx	lr
 800b59a:	bf00      	nop
 800b59c:	0800b5c7 	.word	0x0800b5c7
 800b5a0:	20000014 	.word	0x20000014

0800b5a4 <__sread>:
 800b5a4:	b510      	push	{r4, lr}
 800b5a6:	460c      	mov	r4, r1
 800b5a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ac:	f001 fa94 	bl	800cad8 <_read_r>
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	bfab      	itete	ge
 800b5b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b5b6:	89a3      	ldrhlt	r3, [r4, #12]
 800b5b8:	181b      	addge	r3, r3, r0
 800b5ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b5be:	bfac      	ite	ge
 800b5c0:	6563      	strge	r3, [r4, #84]	; 0x54
 800b5c2:	81a3      	strhlt	r3, [r4, #12]
 800b5c4:	bd10      	pop	{r4, pc}

0800b5c6 <__seofread>:
 800b5c6:	2000      	movs	r0, #0
 800b5c8:	4770      	bx	lr

0800b5ca <__swrite>:
 800b5ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5ce:	461f      	mov	r7, r3
 800b5d0:	898b      	ldrh	r3, [r1, #12]
 800b5d2:	05db      	lsls	r3, r3, #23
 800b5d4:	4605      	mov	r5, r0
 800b5d6:	460c      	mov	r4, r1
 800b5d8:	4616      	mov	r6, r2
 800b5da:	d505      	bpl.n	800b5e8 <__swrite+0x1e>
 800b5dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5e0:	2302      	movs	r3, #2
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	f000 fbe2 	bl	800bdac <_lseek_r>
 800b5e8:	89a3      	ldrh	r3, [r4, #12]
 800b5ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5f2:	81a3      	strh	r3, [r4, #12]
 800b5f4:	4632      	mov	r2, r6
 800b5f6:	463b      	mov	r3, r7
 800b5f8:	4628      	mov	r0, r5
 800b5fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5fe:	f000 b95b 	b.w	800b8b8 <_write_r>

0800b602 <__sseek>:
 800b602:	b510      	push	{r4, lr}
 800b604:	460c      	mov	r4, r1
 800b606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b60a:	f000 fbcf 	bl	800bdac <_lseek_r>
 800b60e:	1c43      	adds	r3, r0, #1
 800b610:	89a3      	ldrh	r3, [r4, #12]
 800b612:	bf15      	itete	ne
 800b614:	6560      	strne	r0, [r4, #84]	; 0x54
 800b616:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b61a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b61e:	81a3      	strheq	r3, [r4, #12]
 800b620:	bf18      	it	ne
 800b622:	81a3      	strhne	r3, [r4, #12]
 800b624:	bd10      	pop	{r4, pc}

0800b626 <__sclose>:
 800b626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b62a:	f000 b9e3 	b.w	800b9f4 <_close_r>

0800b62e <strcpy>:
 800b62e:	4603      	mov	r3, r0
 800b630:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b634:	f803 2b01 	strb.w	r2, [r3], #1
 800b638:	2a00      	cmp	r2, #0
 800b63a:	d1f9      	bne.n	800b630 <strcpy+0x2>
 800b63c:	4770      	bx	lr
	...

0800b640 <strtok>:
 800b640:	4b16      	ldr	r3, [pc, #88]	; (800b69c <strtok+0x5c>)
 800b642:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b644:	681e      	ldr	r6, [r3, #0]
 800b646:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800b648:	4605      	mov	r5, r0
 800b64a:	b9fc      	cbnz	r4, 800b68c <strtok+0x4c>
 800b64c:	2050      	movs	r0, #80	; 0x50
 800b64e:	9101      	str	r1, [sp, #4]
 800b650:	f7ff fd94 	bl	800b17c <malloc>
 800b654:	9901      	ldr	r1, [sp, #4]
 800b656:	65b0      	str	r0, [r6, #88]	; 0x58
 800b658:	4602      	mov	r2, r0
 800b65a:	b920      	cbnz	r0, 800b666 <strtok+0x26>
 800b65c:	4b10      	ldr	r3, [pc, #64]	; (800b6a0 <strtok+0x60>)
 800b65e:	4811      	ldr	r0, [pc, #68]	; (800b6a4 <strtok+0x64>)
 800b660:	2157      	movs	r1, #87	; 0x57
 800b662:	f000 f9a9 	bl	800b9b8 <__assert_func>
 800b666:	e9c0 4400 	strd	r4, r4, [r0]
 800b66a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b66e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b672:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b676:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b67a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b67e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b682:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b686:	6184      	str	r4, [r0, #24]
 800b688:	7704      	strb	r4, [r0, #28]
 800b68a:	6244      	str	r4, [r0, #36]	; 0x24
 800b68c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800b68e:	2301      	movs	r3, #1
 800b690:	4628      	mov	r0, r5
 800b692:	b002      	add	sp, #8
 800b694:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b698:	f000 b806 	b.w	800b6a8 <__strtok_r>
 800b69c:	20000014 	.word	0x20000014
 800b6a0:	0800d04c 	.word	0x0800d04c
 800b6a4:	0800d063 	.word	0x0800d063

0800b6a8 <__strtok_r>:
 800b6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6aa:	b908      	cbnz	r0, 800b6b0 <__strtok_r+0x8>
 800b6ac:	6810      	ldr	r0, [r2, #0]
 800b6ae:	b188      	cbz	r0, 800b6d4 <__strtok_r+0x2c>
 800b6b0:	4604      	mov	r4, r0
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b6b8:	460f      	mov	r7, r1
 800b6ba:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b6be:	b91e      	cbnz	r6, 800b6c8 <__strtok_r+0x20>
 800b6c0:	b965      	cbnz	r5, 800b6dc <__strtok_r+0x34>
 800b6c2:	6015      	str	r5, [r2, #0]
 800b6c4:	4628      	mov	r0, r5
 800b6c6:	e005      	b.n	800b6d4 <__strtok_r+0x2c>
 800b6c8:	42b5      	cmp	r5, r6
 800b6ca:	d1f6      	bne.n	800b6ba <__strtok_r+0x12>
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d1f0      	bne.n	800b6b2 <__strtok_r+0xa>
 800b6d0:	6014      	str	r4, [r2, #0]
 800b6d2:	7003      	strb	r3, [r0, #0]
 800b6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6d6:	461c      	mov	r4, r3
 800b6d8:	e00c      	b.n	800b6f4 <__strtok_r+0x4c>
 800b6da:	b915      	cbnz	r5, 800b6e2 <__strtok_r+0x3a>
 800b6dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b6e0:	460e      	mov	r6, r1
 800b6e2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b6e6:	42ab      	cmp	r3, r5
 800b6e8:	d1f7      	bne.n	800b6da <__strtok_r+0x32>
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d0f3      	beq.n	800b6d6 <__strtok_r+0x2e>
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b6f4:	6014      	str	r4, [r2, #0]
 800b6f6:	e7ed      	b.n	800b6d4 <__strtok_r+0x2c>

0800b6f8 <_strtol_l.constprop.0>:
 800b6f8:	2b01      	cmp	r3, #1
 800b6fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6fe:	d001      	beq.n	800b704 <_strtol_l.constprop.0+0xc>
 800b700:	2b24      	cmp	r3, #36	; 0x24
 800b702:	d906      	bls.n	800b712 <_strtol_l.constprop.0+0x1a>
 800b704:	f7ff fd10 	bl	800b128 <__errno>
 800b708:	2316      	movs	r3, #22
 800b70a:	6003      	str	r3, [r0, #0]
 800b70c:	2000      	movs	r0, #0
 800b70e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b712:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b7f8 <_strtol_l.constprop.0+0x100>
 800b716:	460d      	mov	r5, r1
 800b718:	462e      	mov	r6, r5
 800b71a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b71e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b722:	f017 0708 	ands.w	r7, r7, #8
 800b726:	d1f7      	bne.n	800b718 <_strtol_l.constprop.0+0x20>
 800b728:	2c2d      	cmp	r4, #45	; 0x2d
 800b72a:	d132      	bne.n	800b792 <_strtol_l.constprop.0+0x9a>
 800b72c:	782c      	ldrb	r4, [r5, #0]
 800b72e:	2701      	movs	r7, #1
 800b730:	1cb5      	adds	r5, r6, #2
 800b732:	2b00      	cmp	r3, #0
 800b734:	d05b      	beq.n	800b7ee <_strtol_l.constprop.0+0xf6>
 800b736:	2b10      	cmp	r3, #16
 800b738:	d109      	bne.n	800b74e <_strtol_l.constprop.0+0x56>
 800b73a:	2c30      	cmp	r4, #48	; 0x30
 800b73c:	d107      	bne.n	800b74e <_strtol_l.constprop.0+0x56>
 800b73e:	782c      	ldrb	r4, [r5, #0]
 800b740:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b744:	2c58      	cmp	r4, #88	; 0x58
 800b746:	d14d      	bne.n	800b7e4 <_strtol_l.constprop.0+0xec>
 800b748:	786c      	ldrb	r4, [r5, #1]
 800b74a:	2310      	movs	r3, #16
 800b74c:	3502      	adds	r5, #2
 800b74e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b752:	f108 38ff 	add.w	r8, r8, #4294967295
 800b756:	f04f 0c00 	mov.w	ip, #0
 800b75a:	fbb8 f9f3 	udiv	r9, r8, r3
 800b75e:	4666      	mov	r6, ip
 800b760:	fb03 8a19 	mls	sl, r3, r9, r8
 800b764:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b768:	f1be 0f09 	cmp.w	lr, #9
 800b76c:	d816      	bhi.n	800b79c <_strtol_l.constprop.0+0xa4>
 800b76e:	4674      	mov	r4, lr
 800b770:	42a3      	cmp	r3, r4
 800b772:	dd24      	ble.n	800b7be <_strtol_l.constprop.0+0xc6>
 800b774:	f1bc 0f00 	cmp.w	ip, #0
 800b778:	db1e      	blt.n	800b7b8 <_strtol_l.constprop.0+0xc0>
 800b77a:	45b1      	cmp	r9, r6
 800b77c:	d31c      	bcc.n	800b7b8 <_strtol_l.constprop.0+0xc0>
 800b77e:	d101      	bne.n	800b784 <_strtol_l.constprop.0+0x8c>
 800b780:	45a2      	cmp	sl, r4
 800b782:	db19      	blt.n	800b7b8 <_strtol_l.constprop.0+0xc0>
 800b784:	fb06 4603 	mla	r6, r6, r3, r4
 800b788:	f04f 0c01 	mov.w	ip, #1
 800b78c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b790:	e7e8      	b.n	800b764 <_strtol_l.constprop.0+0x6c>
 800b792:	2c2b      	cmp	r4, #43	; 0x2b
 800b794:	bf04      	itt	eq
 800b796:	782c      	ldrbeq	r4, [r5, #0]
 800b798:	1cb5      	addeq	r5, r6, #2
 800b79a:	e7ca      	b.n	800b732 <_strtol_l.constprop.0+0x3a>
 800b79c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b7a0:	f1be 0f19 	cmp.w	lr, #25
 800b7a4:	d801      	bhi.n	800b7aa <_strtol_l.constprop.0+0xb2>
 800b7a6:	3c37      	subs	r4, #55	; 0x37
 800b7a8:	e7e2      	b.n	800b770 <_strtol_l.constprop.0+0x78>
 800b7aa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b7ae:	f1be 0f19 	cmp.w	lr, #25
 800b7b2:	d804      	bhi.n	800b7be <_strtol_l.constprop.0+0xc6>
 800b7b4:	3c57      	subs	r4, #87	; 0x57
 800b7b6:	e7db      	b.n	800b770 <_strtol_l.constprop.0+0x78>
 800b7b8:	f04f 3cff 	mov.w	ip, #4294967295
 800b7bc:	e7e6      	b.n	800b78c <_strtol_l.constprop.0+0x94>
 800b7be:	f1bc 0f00 	cmp.w	ip, #0
 800b7c2:	da05      	bge.n	800b7d0 <_strtol_l.constprop.0+0xd8>
 800b7c4:	2322      	movs	r3, #34	; 0x22
 800b7c6:	6003      	str	r3, [r0, #0]
 800b7c8:	4646      	mov	r6, r8
 800b7ca:	b942      	cbnz	r2, 800b7de <_strtol_l.constprop.0+0xe6>
 800b7cc:	4630      	mov	r0, r6
 800b7ce:	e79e      	b.n	800b70e <_strtol_l.constprop.0+0x16>
 800b7d0:	b107      	cbz	r7, 800b7d4 <_strtol_l.constprop.0+0xdc>
 800b7d2:	4276      	negs	r6, r6
 800b7d4:	2a00      	cmp	r2, #0
 800b7d6:	d0f9      	beq.n	800b7cc <_strtol_l.constprop.0+0xd4>
 800b7d8:	f1bc 0f00 	cmp.w	ip, #0
 800b7dc:	d000      	beq.n	800b7e0 <_strtol_l.constprop.0+0xe8>
 800b7de:	1e69      	subs	r1, r5, #1
 800b7e0:	6011      	str	r1, [r2, #0]
 800b7e2:	e7f3      	b.n	800b7cc <_strtol_l.constprop.0+0xd4>
 800b7e4:	2430      	movs	r4, #48	; 0x30
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d1b1      	bne.n	800b74e <_strtol_l.constprop.0+0x56>
 800b7ea:	2308      	movs	r3, #8
 800b7ec:	e7af      	b.n	800b74e <_strtol_l.constprop.0+0x56>
 800b7ee:	2c30      	cmp	r4, #48	; 0x30
 800b7f0:	d0a5      	beq.n	800b73e <_strtol_l.constprop.0+0x46>
 800b7f2:	230a      	movs	r3, #10
 800b7f4:	e7ab      	b.n	800b74e <_strtol_l.constprop.0+0x56>
 800b7f6:	bf00      	nop
 800b7f8:	0800d0fd 	.word	0x0800d0fd

0800b7fc <_strtol_r>:
 800b7fc:	f7ff bf7c 	b.w	800b6f8 <_strtol_l.constprop.0>

0800b800 <strtol>:
 800b800:	4613      	mov	r3, r2
 800b802:	460a      	mov	r2, r1
 800b804:	4601      	mov	r1, r0
 800b806:	4802      	ldr	r0, [pc, #8]	; (800b810 <strtol+0x10>)
 800b808:	6800      	ldr	r0, [r0, #0]
 800b80a:	f7ff bf75 	b.w	800b6f8 <_strtol_l.constprop.0>
 800b80e:	bf00      	nop
 800b810:	20000014 	.word	0x20000014

0800b814 <__swbuf_r>:
 800b814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b816:	460e      	mov	r6, r1
 800b818:	4614      	mov	r4, r2
 800b81a:	4605      	mov	r5, r0
 800b81c:	b118      	cbz	r0, 800b826 <__swbuf_r+0x12>
 800b81e:	6983      	ldr	r3, [r0, #24]
 800b820:	b90b      	cbnz	r3, 800b826 <__swbuf_r+0x12>
 800b822:	f000 fa11 	bl	800bc48 <__sinit>
 800b826:	4b21      	ldr	r3, [pc, #132]	; (800b8ac <__swbuf_r+0x98>)
 800b828:	429c      	cmp	r4, r3
 800b82a:	d12b      	bne.n	800b884 <__swbuf_r+0x70>
 800b82c:	686c      	ldr	r4, [r5, #4]
 800b82e:	69a3      	ldr	r3, [r4, #24]
 800b830:	60a3      	str	r3, [r4, #8]
 800b832:	89a3      	ldrh	r3, [r4, #12]
 800b834:	071a      	lsls	r2, r3, #28
 800b836:	d52f      	bpl.n	800b898 <__swbuf_r+0x84>
 800b838:	6923      	ldr	r3, [r4, #16]
 800b83a:	b36b      	cbz	r3, 800b898 <__swbuf_r+0x84>
 800b83c:	6923      	ldr	r3, [r4, #16]
 800b83e:	6820      	ldr	r0, [r4, #0]
 800b840:	1ac0      	subs	r0, r0, r3
 800b842:	6963      	ldr	r3, [r4, #20]
 800b844:	b2f6      	uxtb	r6, r6
 800b846:	4283      	cmp	r3, r0
 800b848:	4637      	mov	r7, r6
 800b84a:	dc04      	bgt.n	800b856 <__swbuf_r+0x42>
 800b84c:	4621      	mov	r1, r4
 800b84e:	4628      	mov	r0, r5
 800b850:	f000 f966 	bl	800bb20 <_fflush_r>
 800b854:	bb30      	cbnz	r0, 800b8a4 <__swbuf_r+0x90>
 800b856:	68a3      	ldr	r3, [r4, #8]
 800b858:	3b01      	subs	r3, #1
 800b85a:	60a3      	str	r3, [r4, #8]
 800b85c:	6823      	ldr	r3, [r4, #0]
 800b85e:	1c5a      	adds	r2, r3, #1
 800b860:	6022      	str	r2, [r4, #0]
 800b862:	701e      	strb	r6, [r3, #0]
 800b864:	6963      	ldr	r3, [r4, #20]
 800b866:	3001      	adds	r0, #1
 800b868:	4283      	cmp	r3, r0
 800b86a:	d004      	beq.n	800b876 <__swbuf_r+0x62>
 800b86c:	89a3      	ldrh	r3, [r4, #12]
 800b86e:	07db      	lsls	r3, r3, #31
 800b870:	d506      	bpl.n	800b880 <__swbuf_r+0x6c>
 800b872:	2e0a      	cmp	r6, #10
 800b874:	d104      	bne.n	800b880 <__swbuf_r+0x6c>
 800b876:	4621      	mov	r1, r4
 800b878:	4628      	mov	r0, r5
 800b87a:	f000 f951 	bl	800bb20 <_fflush_r>
 800b87e:	b988      	cbnz	r0, 800b8a4 <__swbuf_r+0x90>
 800b880:	4638      	mov	r0, r7
 800b882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b884:	4b0a      	ldr	r3, [pc, #40]	; (800b8b0 <__swbuf_r+0x9c>)
 800b886:	429c      	cmp	r4, r3
 800b888:	d101      	bne.n	800b88e <__swbuf_r+0x7a>
 800b88a:	68ac      	ldr	r4, [r5, #8]
 800b88c:	e7cf      	b.n	800b82e <__swbuf_r+0x1a>
 800b88e:	4b09      	ldr	r3, [pc, #36]	; (800b8b4 <__swbuf_r+0xa0>)
 800b890:	429c      	cmp	r4, r3
 800b892:	bf08      	it	eq
 800b894:	68ec      	ldreq	r4, [r5, #12]
 800b896:	e7ca      	b.n	800b82e <__swbuf_r+0x1a>
 800b898:	4621      	mov	r1, r4
 800b89a:	4628      	mov	r0, r5
 800b89c:	f000 f81e 	bl	800b8dc <__swsetup_r>
 800b8a0:	2800      	cmp	r0, #0
 800b8a2:	d0cb      	beq.n	800b83c <__swbuf_r+0x28>
 800b8a4:	f04f 37ff 	mov.w	r7, #4294967295
 800b8a8:	e7ea      	b.n	800b880 <__swbuf_r+0x6c>
 800b8aa:	bf00      	nop
 800b8ac:	0800d220 	.word	0x0800d220
 800b8b0:	0800d240 	.word	0x0800d240
 800b8b4:	0800d200 	.word	0x0800d200

0800b8b8 <_write_r>:
 800b8b8:	b538      	push	{r3, r4, r5, lr}
 800b8ba:	4d07      	ldr	r5, [pc, #28]	; (800b8d8 <_write_r+0x20>)
 800b8bc:	4604      	mov	r4, r0
 800b8be:	4608      	mov	r0, r1
 800b8c0:	4611      	mov	r1, r2
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	602a      	str	r2, [r5, #0]
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	f7f6 fb10 	bl	8001eec <_write>
 800b8cc:	1c43      	adds	r3, r0, #1
 800b8ce:	d102      	bne.n	800b8d6 <_write_r+0x1e>
 800b8d0:	682b      	ldr	r3, [r5, #0]
 800b8d2:	b103      	cbz	r3, 800b8d6 <_write_r+0x1e>
 800b8d4:	6023      	str	r3, [r4, #0]
 800b8d6:	bd38      	pop	{r3, r4, r5, pc}
 800b8d8:	2000349c 	.word	0x2000349c

0800b8dc <__swsetup_r>:
 800b8dc:	4b32      	ldr	r3, [pc, #200]	; (800b9a8 <__swsetup_r+0xcc>)
 800b8de:	b570      	push	{r4, r5, r6, lr}
 800b8e0:	681d      	ldr	r5, [r3, #0]
 800b8e2:	4606      	mov	r6, r0
 800b8e4:	460c      	mov	r4, r1
 800b8e6:	b125      	cbz	r5, 800b8f2 <__swsetup_r+0x16>
 800b8e8:	69ab      	ldr	r3, [r5, #24]
 800b8ea:	b913      	cbnz	r3, 800b8f2 <__swsetup_r+0x16>
 800b8ec:	4628      	mov	r0, r5
 800b8ee:	f000 f9ab 	bl	800bc48 <__sinit>
 800b8f2:	4b2e      	ldr	r3, [pc, #184]	; (800b9ac <__swsetup_r+0xd0>)
 800b8f4:	429c      	cmp	r4, r3
 800b8f6:	d10f      	bne.n	800b918 <__swsetup_r+0x3c>
 800b8f8:	686c      	ldr	r4, [r5, #4]
 800b8fa:	89a3      	ldrh	r3, [r4, #12]
 800b8fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b900:	0719      	lsls	r1, r3, #28
 800b902:	d42c      	bmi.n	800b95e <__swsetup_r+0x82>
 800b904:	06dd      	lsls	r5, r3, #27
 800b906:	d411      	bmi.n	800b92c <__swsetup_r+0x50>
 800b908:	2309      	movs	r3, #9
 800b90a:	6033      	str	r3, [r6, #0]
 800b90c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b910:	81a3      	strh	r3, [r4, #12]
 800b912:	f04f 30ff 	mov.w	r0, #4294967295
 800b916:	e03e      	b.n	800b996 <__swsetup_r+0xba>
 800b918:	4b25      	ldr	r3, [pc, #148]	; (800b9b0 <__swsetup_r+0xd4>)
 800b91a:	429c      	cmp	r4, r3
 800b91c:	d101      	bne.n	800b922 <__swsetup_r+0x46>
 800b91e:	68ac      	ldr	r4, [r5, #8]
 800b920:	e7eb      	b.n	800b8fa <__swsetup_r+0x1e>
 800b922:	4b24      	ldr	r3, [pc, #144]	; (800b9b4 <__swsetup_r+0xd8>)
 800b924:	429c      	cmp	r4, r3
 800b926:	bf08      	it	eq
 800b928:	68ec      	ldreq	r4, [r5, #12]
 800b92a:	e7e6      	b.n	800b8fa <__swsetup_r+0x1e>
 800b92c:	0758      	lsls	r0, r3, #29
 800b92e:	d512      	bpl.n	800b956 <__swsetup_r+0x7a>
 800b930:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b932:	b141      	cbz	r1, 800b946 <__swsetup_r+0x6a>
 800b934:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b938:	4299      	cmp	r1, r3
 800b93a:	d002      	beq.n	800b942 <__swsetup_r+0x66>
 800b93c:	4630      	mov	r0, r6
 800b93e:	f7ff fc43 	bl	800b1c8 <_free_r>
 800b942:	2300      	movs	r3, #0
 800b944:	6363      	str	r3, [r4, #52]	; 0x34
 800b946:	89a3      	ldrh	r3, [r4, #12]
 800b948:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b94c:	81a3      	strh	r3, [r4, #12]
 800b94e:	2300      	movs	r3, #0
 800b950:	6063      	str	r3, [r4, #4]
 800b952:	6923      	ldr	r3, [r4, #16]
 800b954:	6023      	str	r3, [r4, #0]
 800b956:	89a3      	ldrh	r3, [r4, #12]
 800b958:	f043 0308 	orr.w	r3, r3, #8
 800b95c:	81a3      	strh	r3, [r4, #12]
 800b95e:	6923      	ldr	r3, [r4, #16]
 800b960:	b94b      	cbnz	r3, 800b976 <__swsetup_r+0x9a>
 800b962:	89a3      	ldrh	r3, [r4, #12]
 800b964:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b96c:	d003      	beq.n	800b976 <__swsetup_r+0x9a>
 800b96e:	4621      	mov	r1, r4
 800b970:	4630      	mov	r0, r6
 800b972:	f000 fa53 	bl	800be1c <__smakebuf_r>
 800b976:	89a0      	ldrh	r0, [r4, #12]
 800b978:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b97c:	f010 0301 	ands.w	r3, r0, #1
 800b980:	d00a      	beq.n	800b998 <__swsetup_r+0xbc>
 800b982:	2300      	movs	r3, #0
 800b984:	60a3      	str	r3, [r4, #8]
 800b986:	6963      	ldr	r3, [r4, #20]
 800b988:	425b      	negs	r3, r3
 800b98a:	61a3      	str	r3, [r4, #24]
 800b98c:	6923      	ldr	r3, [r4, #16]
 800b98e:	b943      	cbnz	r3, 800b9a2 <__swsetup_r+0xc6>
 800b990:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b994:	d1ba      	bne.n	800b90c <__swsetup_r+0x30>
 800b996:	bd70      	pop	{r4, r5, r6, pc}
 800b998:	0781      	lsls	r1, r0, #30
 800b99a:	bf58      	it	pl
 800b99c:	6963      	ldrpl	r3, [r4, #20]
 800b99e:	60a3      	str	r3, [r4, #8]
 800b9a0:	e7f4      	b.n	800b98c <__swsetup_r+0xb0>
 800b9a2:	2000      	movs	r0, #0
 800b9a4:	e7f7      	b.n	800b996 <__swsetup_r+0xba>
 800b9a6:	bf00      	nop
 800b9a8:	20000014 	.word	0x20000014
 800b9ac:	0800d220 	.word	0x0800d220
 800b9b0:	0800d240 	.word	0x0800d240
 800b9b4:	0800d200 	.word	0x0800d200

0800b9b8 <__assert_func>:
 800b9b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b9ba:	4614      	mov	r4, r2
 800b9bc:	461a      	mov	r2, r3
 800b9be:	4b09      	ldr	r3, [pc, #36]	; (800b9e4 <__assert_func+0x2c>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	4605      	mov	r5, r0
 800b9c4:	68d8      	ldr	r0, [r3, #12]
 800b9c6:	b14c      	cbz	r4, 800b9dc <__assert_func+0x24>
 800b9c8:	4b07      	ldr	r3, [pc, #28]	; (800b9e8 <__assert_func+0x30>)
 800b9ca:	9100      	str	r1, [sp, #0]
 800b9cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b9d0:	4906      	ldr	r1, [pc, #24]	; (800b9ec <__assert_func+0x34>)
 800b9d2:	462b      	mov	r3, r5
 800b9d4:	f000 f9b6 	bl	800bd44 <fiprintf>
 800b9d8:	f7ff fb9a 	bl	800b110 <abort>
 800b9dc:	4b04      	ldr	r3, [pc, #16]	; (800b9f0 <__assert_func+0x38>)
 800b9de:	461c      	mov	r4, r3
 800b9e0:	e7f3      	b.n	800b9ca <__assert_func+0x12>
 800b9e2:	bf00      	nop
 800b9e4:	20000014 	.word	0x20000014
 800b9e8:	0800d0c0 	.word	0x0800d0c0
 800b9ec:	0800d0cd 	.word	0x0800d0cd
 800b9f0:	0800d0fb 	.word	0x0800d0fb

0800b9f4 <_close_r>:
 800b9f4:	b538      	push	{r3, r4, r5, lr}
 800b9f6:	4d06      	ldr	r5, [pc, #24]	; (800ba10 <_close_r+0x1c>)
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	4604      	mov	r4, r0
 800b9fc:	4608      	mov	r0, r1
 800b9fe:	602b      	str	r3, [r5, #0]
 800ba00:	f7f6 fdb7 	bl	8002572 <_close>
 800ba04:	1c43      	adds	r3, r0, #1
 800ba06:	d102      	bne.n	800ba0e <_close_r+0x1a>
 800ba08:	682b      	ldr	r3, [r5, #0]
 800ba0a:	b103      	cbz	r3, 800ba0e <_close_r+0x1a>
 800ba0c:	6023      	str	r3, [r4, #0]
 800ba0e:	bd38      	pop	{r3, r4, r5, pc}
 800ba10:	2000349c 	.word	0x2000349c

0800ba14 <__sflush_r>:
 800ba14:	898a      	ldrh	r2, [r1, #12]
 800ba16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba1a:	4605      	mov	r5, r0
 800ba1c:	0710      	lsls	r0, r2, #28
 800ba1e:	460c      	mov	r4, r1
 800ba20:	d458      	bmi.n	800bad4 <__sflush_r+0xc0>
 800ba22:	684b      	ldr	r3, [r1, #4]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	dc05      	bgt.n	800ba34 <__sflush_r+0x20>
 800ba28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	dc02      	bgt.n	800ba34 <__sflush_r+0x20>
 800ba2e:	2000      	movs	r0, #0
 800ba30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba36:	2e00      	cmp	r6, #0
 800ba38:	d0f9      	beq.n	800ba2e <__sflush_r+0x1a>
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ba40:	682f      	ldr	r7, [r5, #0]
 800ba42:	602b      	str	r3, [r5, #0]
 800ba44:	d032      	beq.n	800baac <__sflush_r+0x98>
 800ba46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ba48:	89a3      	ldrh	r3, [r4, #12]
 800ba4a:	075a      	lsls	r2, r3, #29
 800ba4c:	d505      	bpl.n	800ba5a <__sflush_r+0x46>
 800ba4e:	6863      	ldr	r3, [r4, #4]
 800ba50:	1ac0      	subs	r0, r0, r3
 800ba52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ba54:	b10b      	cbz	r3, 800ba5a <__sflush_r+0x46>
 800ba56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ba58:	1ac0      	subs	r0, r0, r3
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	4602      	mov	r2, r0
 800ba5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba60:	6a21      	ldr	r1, [r4, #32]
 800ba62:	4628      	mov	r0, r5
 800ba64:	47b0      	blx	r6
 800ba66:	1c43      	adds	r3, r0, #1
 800ba68:	89a3      	ldrh	r3, [r4, #12]
 800ba6a:	d106      	bne.n	800ba7a <__sflush_r+0x66>
 800ba6c:	6829      	ldr	r1, [r5, #0]
 800ba6e:	291d      	cmp	r1, #29
 800ba70:	d82c      	bhi.n	800bacc <__sflush_r+0xb8>
 800ba72:	4a2a      	ldr	r2, [pc, #168]	; (800bb1c <__sflush_r+0x108>)
 800ba74:	40ca      	lsrs	r2, r1
 800ba76:	07d6      	lsls	r6, r2, #31
 800ba78:	d528      	bpl.n	800bacc <__sflush_r+0xb8>
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	6062      	str	r2, [r4, #4]
 800ba7e:	04d9      	lsls	r1, r3, #19
 800ba80:	6922      	ldr	r2, [r4, #16]
 800ba82:	6022      	str	r2, [r4, #0]
 800ba84:	d504      	bpl.n	800ba90 <__sflush_r+0x7c>
 800ba86:	1c42      	adds	r2, r0, #1
 800ba88:	d101      	bne.n	800ba8e <__sflush_r+0x7a>
 800ba8a:	682b      	ldr	r3, [r5, #0]
 800ba8c:	b903      	cbnz	r3, 800ba90 <__sflush_r+0x7c>
 800ba8e:	6560      	str	r0, [r4, #84]	; 0x54
 800ba90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba92:	602f      	str	r7, [r5, #0]
 800ba94:	2900      	cmp	r1, #0
 800ba96:	d0ca      	beq.n	800ba2e <__sflush_r+0x1a>
 800ba98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba9c:	4299      	cmp	r1, r3
 800ba9e:	d002      	beq.n	800baa6 <__sflush_r+0x92>
 800baa0:	4628      	mov	r0, r5
 800baa2:	f7ff fb91 	bl	800b1c8 <_free_r>
 800baa6:	2000      	movs	r0, #0
 800baa8:	6360      	str	r0, [r4, #52]	; 0x34
 800baaa:	e7c1      	b.n	800ba30 <__sflush_r+0x1c>
 800baac:	6a21      	ldr	r1, [r4, #32]
 800baae:	2301      	movs	r3, #1
 800bab0:	4628      	mov	r0, r5
 800bab2:	47b0      	blx	r6
 800bab4:	1c41      	adds	r1, r0, #1
 800bab6:	d1c7      	bne.n	800ba48 <__sflush_r+0x34>
 800bab8:	682b      	ldr	r3, [r5, #0]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d0c4      	beq.n	800ba48 <__sflush_r+0x34>
 800babe:	2b1d      	cmp	r3, #29
 800bac0:	d001      	beq.n	800bac6 <__sflush_r+0xb2>
 800bac2:	2b16      	cmp	r3, #22
 800bac4:	d101      	bne.n	800baca <__sflush_r+0xb6>
 800bac6:	602f      	str	r7, [r5, #0]
 800bac8:	e7b1      	b.n	800ba2e <__sflush_r+0x1a>
 800baca:	89a3      	ldrh	r3, [r4, #12]
 800bacc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bad0:	81a3      	strh	r3, [r4, #12]
 800bad2:	e7ad      	b.n	800ba30 <__sflush_r+0x1c>
 800bad4:	690f      	ldr	r7, [r1, #16]
 800bad6:	2f00      	cmp	r7, #0
 800bad8:	d0a9      	beq.n	800ba2e <__sflush_r+0x1a>
 800bada:	0793      	lsls	r3, r2, #30
 800badc:	680e      	ldr	r6, [r1, #0]
 800bade:	bf08      	it	eq
 800bae0:	694b      	ldreq	r3, [r1, #20]
 800bae2:	600f      	str	r7, [r1, #0]
 800bae4:	bf18      	it	ne
 800bae6:	2300      	movne	r3, #0
 800bae8:	eba6 0807 	sub.w	r8, r6, r7
 800baec:	608b      	str	r3, [r1, #8]
 800baee:	f1b8 0f00 	cmp.w	r8, #0
 800baf2:	dd9c      	ble.n	800ba2e <__sflush_r+0x1a>
 800baf4:	6a21      	ldr	r1, [r4, #32]
 800baf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800baf8:	4643      	mov	r3, r8
 800bafa:	463a      	mov	r2, r7
 800bafc:	4628      	mov	r0, r5
 800bafe:	47b0      	blx	r6
 800bb00:	2800      	cmp	r0, #0
 800bb02:	dc06      	bgt.n	800bb12 <__sflush_r+0xfe>
 800bb04:	89a3      	ldrh	r3, [r4, #12]
 800bb06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb0a:	81a3      	strh	r3, [r4, #12]
 800bb0c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb10:	e78e      	b.n	800ba30 <__sflush_r+0x1c>
 800bb12:	4407      	add	r7, r0
 800bb14:	eba8 0800 	sub.w	r8, r8, r0
 800bb18:	e7e9      	b.n	800baee <__sflush_r+0xda>
 800bb1a:	bf00      	nop
 800bb1c:	20400001 	.word	0x20400001

0800bb20 <_fflush_r>:
 800bb20:	b538      	push	{r3, r4, r5, lr}
 800bb22:	690b      	ldr	r3, [r1, #16]
 800bb24:	4605      	mov	r5, r0
 800bb26:	460c      	mov	r4, r1
 800bb28:	b913      	cbnz	r3, 800bb30 <_fflush_r+0x10>
 800bb2a:	2500      	movs	r5, #0
 800bb2c:	4628      	mov	r0, r5
 800bb2e:	bd38      	pop	{r3, r4, r5, pc}
 800bb30:	b118      	cbz	r0, 800bb3a <_fflush_r+0x1a>
 800bb32:	6983      	ldr	r3, [r0, #24]
 800bb34:	b90b      	cbnz	r3, 800bb3a <_fflush_r+0x1a>
 800bb36:	f000 f887 	bl	800bc48 <__sinit>
 800bb3a:	4b14      	ldr	r3, [pc, #80]	; (800bb8c <_fflush_r+0x6c>)
 800bb3c:	429c      	cmp	r4, r3
 800bb3e:	d11b      	bne.n	800bb78 <_fflush_r+0x58>
 800bb40:	686c      	ldr	r4, [r5, #4]
 800bb42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d0ef      	beq.n	800bb2a <_fflush_r+0xa>
 800bb4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bb4c:	07d0      	lsls	r0, r2, #31
 800bb4e:	d404      	bmi.n	800bb5a <_fflush_r+0x3a>
 800bb50:	0599      	lsls	r1, r3, #22
 800bb52:	d402      	bmi.n	800bb5a <_fflush_r+0x3a>
 800bb54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb56:	f000 f927 	bl	800bda8 <__retarget_lock_acquire_recursive>
 800bb5a:	4628      	mov	r0, r5
 800bb5c:	4621      	mov	r1, r4
 800bb5e:	f7ff ff59 	bl	800ba14 <__sflush_r>
 800bb62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb64:	07da      	lsls	r2, r3, #31
 800bb66:	4605      	mov	r5, r0
 800bb68:	d4e0      	bmi.n	800bb2c <_fflush_r+0xc>
 800bb6a:	89a3      	ldrh	r3, [r4, #12]
 800bb6c:	059b      	lsls	r3, r3, #22
 800bb6e:	d4dd      	bmi.n	800bb2c <_fflush_r+0xc>
 800bb70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb72:	f000 f91a 	bl	800bdaa <__retarget_lock_release_recursive>
 800bb76:	e7d9      	b.n	800bb2c <_fflush_r+0xc>
 800bb78:	4b05      	ldr	r3, [pc, #20]	; (800bb90 <_fflush_r+0x70>)
 800bb7a:	429c      	cmp	r4, r3
 800bb7c:	d101      	bne.n	800bb82 <_fflush_r+0x62>
 800bb7e:	68ac      	ldr	r4, [r5, #8]
 800bb80:	e7df      	b.n	800bb42 <_fflush_r+0x22>
 800bb82:	4b04      	ldr	r3, [pc, #16]	; (800bb94 <_fflush_r+0x74>)
 800bb84:	429c      	cmp	r4, r3
 800bb86:	bf08      	it	eq
 800bb88:	68ec      	ldreq	r4, [r5, #12]
 800bb8a:	e7da      	b.n	800bb42 <_fflush_r+0x22>
 800bb8c:	0800d220 	.word	0x0800d220
 800bb90:	0800d240 	.word	0x0800d240
 800bb94:	0800d200 	.word	0x0800d200

0800bb98 <std>:
 800bb98:	2300      	movs	r3, #0
 800bb9a:	b510      	push	{r4, lr}
 800bb9c:	4604      	mov	r4, r0
 800bb9e:	e9c0 3300 	strd	r3, r3, [r0]
 800bba2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bba6:	6083      	str	r3, [r0, #8]
 800bba8:	8181      	strh	r1, [r0, #12]
 800bbaa:	6643      	str	r3, [r0, #100]	; 0x64
 800bbac:	81c2      	strh	r2, [r0, #14]
 800bbae:	6183      	str	r3, [r0, #24]
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	2208      	movs	r2, #8
 800bbb4:	305c      	adds	r0, #92	; 0x5c
 800bbb6:	f7ff faff 	bl	800b1b8 <memset>
 800bbba:	4b05      	ldr	r3, [pc, #20]	; (800bbd0 <std+0x38>)
 800bbbc:	6263      	str	r3, [r4, #36]	; 0x24
 800bbbe:	4b05      	ldr	r3, [pc, #20]	; (800bbd4 <std+0x3c>)
 800bbc0:	62a3      	str	r3, [r4, #40]	; 0x28
 800bbc2:	4b05      	ldr	r3, [pc, #20]	; (800bbd8 <std+0x40>)
 800bbc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bbc6:	4b05      	ldr	r3, [pc, #20]	; (800bbdc <std+0x44>)
 800bbc8:	6224      	str	r4, [r4, #32]
 800bbca:	6323      	str	r3, [r4, #48]	; 0x30
 800bbcc:	bd10      	pop	{r4, pc}
 800bbce:	bf00      	nop
 800bbd0:	0800b5a5 	.word	0x0800b5a5
 800bbd4:	0800b5cb 	.word	0x0800b5cb
 800bbd8:	0800b603 	.word	0x0800b603
 800bbdc:	0800b627 	.word	0x0800b627

0800bbe0 <_cleanup_r>:
 800bbe0:	4901      	ldr	r1, [pc, #4]	; (800bbe8 <_cleanup_r+0x8>)
 800bbe2:	f000 b8c1 	b.w	800bd68 <_fwalk_reent>
 800bbe6:	bf00      	nop
 800bbe8:	0800bb21 	.word	0x0800bb21

0800bbec <__sfmoreglue>:
 800bbec:	b570      	push	{r4, r5, r6, lr}
 800bbee:	2268      	movs	r2, #104	; 0x68
 800bbf0:	1e4d      	subs	r5, r1, #1
 800bbf2:	4355      	muls	r5, r2
 800bbf4:	460e      	mov	r6, r1
 800bbf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bbfa:	f7ff fb51 	bl	800b2a0 <_malloc_r>
 800bbfe:	4604      	mov	r4, r0
 800bc00:	b140      	cbz	r0, 800bc14 <__sfmoreglue+0x28>
 800bc02:	2100      	movs	r1, #0
 800bc04:	e9c0 1600 	strd	r1, r6, [r0]
 800bc08:	300c      	adds	r0, #12
 800bc0a:	60a0      	str	r0, [r4, #8]
 800bc0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bc10:	f7ff fad2 	bl	800b1b8 <memset>
 800bc14:	4620      	mov	r0, r4
 800bc16:	bd70      	pop	{r4, r5, r6, pc}

0800bc18 <__sfp_lock_acquire>:
 800bc18:	4801      	ldr	r0, [pc, #4]	; (800bc20 <__sfp_lock_acquire+0x8>)
 800bc1a:	f000 b8c5 	b.w	800bda8 <__retarget_lock_acquire_recursive>
 800bc1e:	bf00      	nop
 800bc20:	20003499 	.word	0x20003499

0800bc24 <__sfp_lock_release>:
 800bc24:	4801      	ldr	r0, [pc, #4]	; (800bc2c <__sfp_lock_release+0x8>)
 800bc26:	f000 b8c0 	b.w	800bdaa <__retarget_lock_release_recursive>
 800bc2a:	bf00      	nop
 800bc2c:	20003499 	.word	0x20003499

0800bc30 <__sinit_lock_acquire>:
 800bc30:	4801      	ldr	r0, [pc, #4]	; (800bc38 <__sinit_lock_acquire+0x8>)
 800bc32:	f000 b8b9 	b.w	800bda8 <__retarget_lock_acquire_recursive>
 800bc36:	bf00      	nop
 800bc38:	2000349a 	.word	0x2000349a

0800bc3c <__sinit_lock_release>:
 800bc3c:	4801      	ldr	r0, [pc, #4]	; (800bc44 <__sinit_lock_release+0x8>)
 800bc3e:	f000 b8b4 	b.w	800bdaa <__retarget_lock_release_recursive>
 800bc42:	bf00      	nop
 800bc44:	2000349a 	.word	0x2000349a

0800bc48 <__sinit>:
 800bc48:	b510      	push	{r4, lr}
 800bc4a:	4604      	mov	r4, r0
 800bc4c:	f7ff fff0 	bl	800bc30 <__sinit_lock_acquire>
 800bc50:	69a3      	ldr	r3, [r4, #24]
 800bc52:	b11b      	cbz	r3, 800bc5c <__sinit+0x14>
 800bc54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc58:	f7ff bff0 	b.w	800bc3c <__sinit_lock_release>
 800bc5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bc60:	6523      	str	r3, [r4, #80]	; 0x50
 800bc62:	4b13      	ldr	r3, [pc, #76]	; (800bcb0 <__sinit+0x68>)
 800bc64:	4a13      	ldr	r2, [pc, #76]	; (800bcb4 <__sinit+0x6c>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	62a2      	str	r2, [r4, #40]	; 0x28
 800bc6a:	42a3      	cmp	r3, r4
 800bc6c:	bf04      	itt	eq
 800bc6e:	2301      	moveq	r3, #1
 800bc70:	61a3      	streq	r3, [r4, #24]
 800bc72:	4620      	mov	r0, r4
 800bc74:	f000 f820 	bl	800bcb8 <__sfp>
 800bc78:	6060      	str	r0, [r4, #4]
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	f000 f81c 	bl	800bcb8 <__sfp>
 800bc80:	60a0      	str	r0, [r4, #8]
 800bc82:	4620      	mov	r0, r4
 800bc84:	f000 f818 	bl	800bcb8 <__sfp>
 800bc88:	2200      	movs	r2, #0
 800bc8a:	60e0      	str	r0, [r4, #12]
 800bc8c:	2104      	movs	r1, #4
 800bc8e:	6860      	ldr	r0, [r4, #4]
 800bc90:	f7ff ff82 	bl	800bb98 <std>
 800bc94:	68a0      	ldr	r0, [r4, #8]
 800bc96:	2201      	movs	r2, #1
 800bc98:	2109      	movs	r1, #9
 800bc9a:	f7ff ff7d 	bl	800bb98 <std>
 800bc9e:	68e0      	ldr	r0, [r4, #12]
 800bca0:	2202      	movs	r2, #2
 800bca2:	2112      	movs	r1, #18
 800bca4:	f7ff ff78 	bl	800bb98 <std>
 800bca8:	2301      	movs	r3, #1
 800bcaa:	61a3      	str	r3, [r4, #24]
 800bcac:	e7d2      	b.n	800bc54 <__sinit+0xc>
 800bcae:	bf00      	nop
 800bcb0:	0800d048 	.word	0x0800d048
 800bcb4:	0800bbe1 	.word	0x0800bbe1

0800bcb8 <__sfp>:
 800bcb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcba:	4607      	mov	r7, r0
 800bcbc:	f7ff ffac 	bl	800bc18 <__sfp_lock_acquire>
 800bcc0:	4b1e      	ldr	r3, [pc, #120]	; (800bd3c <__sfp+0x84>)
 800bcc2:	681e      	ldr	r6, [r3, #0]
 800bcc4:	69b3      	ldr	r3, [r6, #24]
 800bcc6:	b913      	cbnz	r3, 800bcce <__sfp+0x16>
 800bcc8:	4630      	mov	r0, r6
 800bcca:	f7ff ffbd 	bl	800bc48 <__sinit>
 800bcce:	3648      	adds	r6, #72	; 0x48
 800bcd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bcd4:	3b01      	subs	r3, #1
 800bcd6:	d503      	bpl.n	800bce0 <__sfp+0x28>
 800bcd8:	6833      	ldr	r3, [r6, #0]
 800bcda:	b30b      	cbz	r3, 800bd20 <__sfp+0x68>
 800bcdc:	6836      	ldr	r6, [r6, #0]
 800bcde:	e7f7      	b.n	800bcd0 <__sfp+0x18>
 800bce0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bce4:	b9d5      	cbnz	r5, 800bd1c <__sfp+0x64>
 800bce6:	4b16      	ldr	r3, [pc, #88]	; (800bd40 <__sfp+0x88>)
 800bce8:	60e3      	str	r3, [r4, #12]
 800bcea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bcee:	6665      	str	r5, [r4, #100]	; 0x64
 800bcf0:	f000 f859 	bl	800bda6 <__retarget_lock_init_recursive>
 800bcf4:	f7ff ff96 	bl	800bc24 <__sfp_lock_release>
 800bcf8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bcfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bd00:	6025      	str	r5, [r4, #0]
 800bd02:	61a5      	str	r5, [r4, #24]
 800bd04:	2208      	movs	r2, #8
 800bd06:	4629      	mov	r1, r5
 800bd08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bd0c:	f7ff fa54 	bl	800b1b8 <memset>
 800bd10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bd14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bd18:	4620      	mov	r0, r4
 800bd1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd1c:	3468      	adds	r4, #104	; 0x68
 800bd1e:	e7d9      	b.n	800bcd4 <__sfp+0x1c>
 800bd20:	2104      	movs	r1, #4
 800bd22:	4638      	mov	r0, r7
 800bd24:	f7ff ff62 	bl	800bbec <__sfmoreglue>
 800bd28:	4604      	mov	r4, r0
 800bd2a:	6030      	str	r0, [r6, #0]
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	d1d5      	bne.n	800bcdc <__sfp+0x24>
 800bd30:	f7ff ff78 	bl	800bc24 <__sfp_lock_release>
 800bd34:	230c      	movs	r3, #12
 800bd36:	603b      	str	r3, [r7, #0]
 800bd38:	e7ee      	b.n	800bd18 <__sfp+0x60>
 800bd3a:	bf00      	nop
 800bd3c:	0800d048 	.word	0x0800d048
 800bd40:	ffff0001 	.word	0xffff0001

0800bd44 <fiprintf>:
 800bd44:	b40e      	push	{r1, r2, r3}
 800bd46:	b503      	push	{r0, r1, lr}
 800bd48:	4601      	mov	r1, r0
 800bd4a:	ab03      	add	r3, sp, #12
 800bd4c:	4805      	ldr	r0, [pc, #20]	; (800bd64 <fiprintf+0x20>)
 800bd4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd52:	6800      	ldr	r0, [r0, #0]
 800bd54:	9301      	str	r3, [sp, #4]
 800bd56:	f000 faa9 	bl	800c2ac <_vfiprintf_r>
 800bd5a:	b002      	add	sp, #8
 800bd5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd60:	b003      	add	sp, #12
 800bd62:	4770      	bx	lr
 800bd64:	20000014 	.word	0x20000014

0800bd68 <_fwalk_reent>:
 800bd68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd6c:	4606      	mov	r6, r0
 800bd6e:	4688      	mov	r8, r1
 800bd70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bd74:	2700      	movs	r7, #0
 800bd76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd7a:	f1b9 0901 	subs.w	r9, r9, #1
 800bd7e:	d505      	bpl.n	800bd8c <_fwalk_reent+0x24>
 800bd80:	6824      	ldr	r4, [r4, #0]
 800bd82:	2c00      	cmp	r4, #0
 800bd84:	d1f7      	bne.n	800bd76 <_fwalk_reent+0xe>
 800bd86:	4638      	mov	r0, r7
 800bd88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd8c:	89ab      	ldrh	r3, [r5, #12]
 800bd8e:	2b01      	cmp	r3, #1
 800bd90:	d907      	bls.n	800bda2 <_fwalk_reent+0x3a>
 800bd92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd96:	3301      	adds	r3, #1
 800bd98:	d003      	beq.n	800bda2 <_fwalk_reent+0x3a>
 800bd9a:	4629      	mov	r1, r5
 800bd9c:	4630      	mov	r0, r6
 800bd9e:	47c0      	blx	r8
 800bda0:	4307      	orrs	r7, r0
 800bda2:	3568      	adds	r5, #104	; 0x68
 800bda4:	e7e9      	b.n	800bd7a <_fwalk_reent+0x12>

0800bda6 <__retarget_lock_init_recursive>:
 800bda6:	4770      	bx	lr

0800bda8 <__retarget_lock_acquire_recursive>:
 800bda8:	4770      	bx	lr

0800bdaa <__retarget_lock_release_recursive>:
 800bdaa:	4770      	bx	lr

0800bdac <_lseek_r>:
 800bdac:	b538      	push	{r3, r4, r5, lr}
 800bdae:	4d07      	ldr	r5, [pc, #28]	; (800bdcc <_lseek_r+0x20>)
 800bdb0:	4604      	mov	r4, r0
 800bdb2:	4608      	mov	r0, r1
 800bdb4:	4611      	mov	r1, r2
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	602a      	str	r2, [r5, #0]
 800bdba:	461a      	mov	r2, r3
 800bdbc:	f7f6 fc00 	bl	80025c0 <_lseek>
 800bdc0:	1c43      	adds	r3, r0, #1
 800bdc2:	d102      	bne.n	800bdca <_lseek_r+0x1e>
 800bdc4:	682b      	ldr	r3, [r5, #0]
 800bdc6:	b103      	cbz	r3, 800bdca <_lseek_r+0x1e>
 800bdc8:	6023      	str	r3, [r4, #0]
 800bdca:	bd38      	pop	{r3, r4, r5, pc}
 800bdcc:	2000349c 	.word	0x2000349c

0800bdd0 <__swhatbuf_r>:
 800bdd0:	b570      	push	{r4, r5, r6, lr}
 800bdd2:	460e      	mov	r6, r1
 800bdd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdd8:	2900      	cmp	r1, #0
 800bdda:	b096      	sub	sp, #88	; 0x58
 800bddc:	4614      	mov	r4, r2
 800bdde:	461d      	mov	r5, r3
 800bde0:	da08      	bge.n	800bdf4 <__swhatbuf_r+0x24>
 800bde2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bde6:	2200      	movs	r2, #0
 800bde8:	602a      	str	r2, [r5, #0]
 800bdea:	061a      	lsls	r2, r3, #24
 800bdec:	d410      	bmi.n	800be10 <__swhatbuf_r+0x40>
 800bdee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdf2:	e00e      	b.n	800be12 <__swhatbuf_r+0x42>
 800bdf4:	466a      	mov	r2, sp
 800bdf6:	f000 ff67 	bl	800ccc8 <_fstat_r>
 800bdfa:	2800      	cmp	r0, #0
 800bdfc:	dbf1      	blt.n	800bde2 <__swhatbuf_r+0x12>
 800bdfe:	9a01      	ldr	r2, [sp, #4]
 800be00:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800be04:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800be08:	425a      	negs	r2, r3
 800be0a:	415a      	adcs	r2, r3
 800be0c:	602a      	str	r2, [r5, #0]
 800be0e:	e7ee      	b.n	800bdee <__swhatbuf_r+0x1e>
 800be10:	2340      	movs	r3, #64	; 0x40
 800be12:	2000      	movs	r0, #0
 800be14:	6023      	str	r3, [r4, #0]
 800be16:	b016      	add	sp, #88	; 0x58
 800be18:	bd70      	pop	{r4, r5, r6, pc}
	...

0800be1c <__smakebuf_r>:
 800be1c:	898b      	ldrh	r3, [r1, #12]
 800be1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be20:	079d      	lsls	r5, r3, #30
 800be22:	4606      	mov	r6, r0
 800be24:	460c      	mov	r4, r1
 800be26:	d507      	bpl.n	800be38 <__smakebuf_r+0x1c>
 800be28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800be2c:	6023      	str	r3, [r4, #0]
 800be2e:	6123      	str	r3, [r4, #16]
 800be30:	2301      	movs	r3, #1
 800be32:	6163      	str	r3, [r4, #20]
 800be34:	b002      	add	sp, #8
 800be36:	bd70      	pop	{r4, r5, r6, pc}
 800be38:	ab01      	add	r3, sp, #4
 800be3a:	466a      	mov	r2, sp
 800be3c:	f7ff ffc8 	bl	800bdd0 <__swhatbuf_r>
 800be40:	9900      	ldr	r1, [sp, #0]
 800be42:	4605      	mov	r5, r0
 800be44:	4630      	mov	r0, r6
 800be46:	f7ff fa2b 	bl	800b2a0 <_malloc_r>
 800be4a:	b948      	cbnz	r0, 800be60 <__smakebuf_r+0x44>
 800be4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be50:	059a      	lsls	r2, r3, #22
 800be52:	d4ef      	bmi.n	800be34 <__smakebuf_r+0x18>
 800be54:	f023 0303 	bic.w	r3, r3, #3
 800be58:	f043 0302 	orr.w	r3, r3, #2
 800be5c:	81a3      	strh	r3, [r4, #12]
 800be5e:	e7e3      	b.n	800be28 <__smakebuf_r+0xc>
 800be60:	4b0d      	ldr	r3, [pc, #52]	; (800be98 <__smakebuf_r+0x7c>)
 800be62:	62b3      	str	r3, [r6, #40]	; 0x28
 800be64:	89a3      	ldrh	r3, [r4, #12]
 800be66:	6020      	str	r0, [r4, #0]
 800be68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be6c:	81a3      	strh	r3, [r4, #12]
 800be6e:	9b00      	ldr	r3, [sp, #0]
 800be70:	6163      	str	r3, [r4, #20]
 800be72:	9b01      	ldr	r3, [sp, #4]
 800be74:	6120      	str	r0, [r4, #16]
 800be76:	b15b      	cbz	r3, 800be90 <__smakebuf_r+0x74>
 800be78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be7c:	4630      	mov	r0, r6
 800be7e:	f000 ff35 	bl	800ccec <_isatty_r>
 800be82:	b128      	cbz	r0, 800be90 <__smakebuf_r+0x74>
 800be84:	89a3      	ldrh	r3, [r4, #12]
 800be86:	f023 0303 	bic.w	r3, r3, #3
 800be8a:	f043 0301 	orr.w	r3, r3, #1
 800be8e:	81a3      	strh	r3, [r4, #12]
 800be90:	89a0      	ldrh	r0, [r4, #12]
 800be92:	4305      	orrs	r5, r0
 800be94:	81a5      	strh	r5, [r4, #12]
 800be96:	e7cd      	b.n	800be34 <__smakebuf_r+0x18>
 800be98:	0800bbe1 	.word	0x0800bbe1

0800be9c <__malloc_lock>:
 800be9c:	4801      	ldr	r0, [pc, #4]	; (800bea4 <__malloc_lock+0x8>)
 800be9e:	f7ff bf83 	b.w	800bda8 <__retarget_lock_acquire_recursive>
 800bea2:	bf00      	nop
 800bea4:	20003498 	.word	0x20003498

0800bea8 <__malloc_unlock>:
 800bea8:	4801      	ldr	r0, [pc, #4]	; (800beb0 <__malloc_unlock+0x8>)
 800beaa:	f7ff bf7e 	b.w	800bdaa <__retarget_lock_release_recursive>
 800beae:	bf00      	nop
 800beb0:	20003498 	.word	0x20003498

0800beb4 <_sungetc_r>:
 800beb4:	b538      	push	{r3, r4, r5, lr}
 800beb6:	1c4b      	adds	r3, r1, #1
 800beb8:	4614      	mov	r4, r2
 800beba:	d103      	bne.n	800bec4 <_sungetc_r+0x10>
 800bebc:	f04f 35ff 	mov.w	r5, #4294967295
 800bec0:	4628      	mov	r0, r5
 800bec2:	bd38      	pop	{r3, r4, r5, pc}
 800bec4:	8993      	ldrh	r3, [r2, #12]
 800bec6:	f023 0320 	bic.w	r3, r3, #32
 800beca:	8193      	strh	r3, [r2, #12]
 800becc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bece:	6852      	ldr	r2, [r2, #4]
 800bed0:	b2cd      	uxtb	r5, r1
 800bed2:	b18b      	cbz	r3, 800bef8 <_sungetc_r+0x44>
 800bed4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bed6:	4293      	cmp	r3, r2
 800bed8:	dd08      	ble.n	800beec <_sungetc_r+0x38>
 800beda:	6823      	ldr	r3, [r4, #0]
 800bedc:	1e5a      	subs	r2, r3, #1
 800bede:	6022      	str	r2, [r4, #0]
 800bee0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bee4:	6863      	ldr	r3, [r4, #4]
 800bee6:	3301      	adds	r3, #1
 800bee8:	6063      	str	r3, [r4, #4]
 800beea:	e7e9      	b.n	800bec0 <_sungetc_r+0xc>
 800beec:	4621      	mov	r1, r4
 800beee:	f000 feb1 	bl	800cc54 <__submore>
 800bef2:	2800      	cmp	r0, #0
 800bef4:	d0f1      	beq.n	800beda <_sungetc_r+0x26>
 800bef6:	e7e1      	b.n	800bebc <_sungetc_r+0x8>
 800bef8:	6921      	ldr	r1, [r4, #16]
 800befa:	6823      	ldr	r3, [r4, #0]
 800befc:	b151      	cbz	r1, 800bf14 <_sungetc_r+0x60>
 800befe:	4299      	cmp	r1, r3
 800bf00:	d208      	bcs.n	800bf14 <_sungetc_r+0x60>
 800bf02:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800bf06:	42a9      	cmp	r1, r5
 800bf08:	d104      	bne.n	800bf14 <_sungetc_r+0x60>
 800bf0a:	3b01      	subs	r3, #1
 800bf0c:	3201      	adds	r2, #1
 800bf0e:	6023      	str	r3, [r4, #0]
 800bf10:	6062      	str	r2, [r4, #4]
 800bf12:	e7d5      	b.n	800bec0 <_sungetc_r+0xc>
 800bf14:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800bf18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf1c:	6363      	str	r3, [r4, #52]	; 0x34
 800bf1e:	2303      	movs	r3, #3
 800bf20:	63a3      	str	r3, [r4, #56]	; 0x38
 800bf22:	4623      	mov	r3, r4
 800bf24:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bf28:	6023      	str	r3, [r4, #0]
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	e7dc      	b.n	800bee8 <_sungetc_r+0x34>

0800bf2e <__ssrefill_r>:
 800bf2e:	b510      	push	{r4, lr}
 800bf30:	460c      	mov	r4, r1
 800bf32:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bf34:	b169      	cbz	r1, 800bf52 <__ssrefill_r+0x24>
 800bf36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf3a:	4299      	cmp	r1, r3
 800bf3c:	d001      	beq.n	800bf42 <__ssrefill_r+0x14>
 800bf3e:	f7ff f943 	bl	800b1c8 <_free_r>
 800bf42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf44:	6063      	str	r3, [r4, #4]
 800bf46:	2000      	movs	r0, #0
 800bf48:	6360      	str	r0, [r4, #52]	; 0x34
 800bf4a:	b113      	cbz	r3, 800bf52 <__ssrefill_r+0x24>
 800bf4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bf4e:	6023      	str	r3, [r4, #0]
 800bf50:	bd10      	pop	{r4, pc}
 800bf52:	6923      	ldr	r3, [r4, #16]
 800bf54:	6023      	str	r3, [r4, #0]
 800bf56:	2300      	movs	r3, #0
 800bf58:	6063      	str	r3, [r4, #4]
 800bf5a:	89a3      	ldrh	r3, [r4, #12]
 800bf5c:	f043 0320 	orr.w	r3, r3, #32
 800bf60:	81a3      	strh	r3, [r4, #12]
 800bf62:	f04f 30ff 	mov.w	r0, #4294967295
 800bf66:	e7f3      	b.n	800bf50 <__ssrefill_r+0x22>

0800bf68 <__ssvfiscanf_r>:
 800bf68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf6c:	460c      	mov	r4, r1
 800bf6e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800bf72:	2100      	movs	r1, #0
 800bf74:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800bf78:	49a6      	ldr	r1, [pc, #664]	; (800c214 <__ssvfiscanf_r+0x2ac>)
 800bf7a:	91a0      	str	r1, [sp, #640]	; 0x280
 800bf7c:	f10d 0804 	add.w	r8, sp, #4
 800bf80:	49a5      	ldr	r1, [pc, #660]	; (800c218 <__ssvfiscanf_r+0x2b0>)
 800bf82:	4fa6      	ldr	r7, [pc, #664]	; (800c21c <__ssvfiscanf_r+0x2b4>)
 800bf84:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c220 <__ssvfiscanf_r+0x2b8>
 800bf88:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800bf8c:	4606      	mov	r6, r0
 800bf8e:	91a1      	str	r1, [sp, #644]	; 0x284
 800bf90:	9300      	str	r3, [sp, #0]
 800bf92:	7813      	ldrb	r3, [r2, #0]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	f000 815a 	beq.w	800c24e <__ssvfiscanf_r+0x2e6>
 800bf9a:	5dd9      	ldrb	r1, [r3, r7]
 800bf9c:	f011 0108 	ands.w	r1, r1, #8
 800bfa0:	f102 0501 	add.w	r5, r2, #1
 800bfa4:	d019      	beq.n	800bfda <__ssvfiscanf_r+0x72>
 800bfa6:	6863      	ldr	r3, [r4, #4]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	dd0f      	ble.n	800bfcc <__ssvfiscanf_r+0x64>
 800bfac:	6823      	ldr	r3, [r4, #0]
 800bfae:	781a      	ldrb	r2, [r3, #0]
 800bfb0:	5cba      	ldrb	r2, [r7, r2]
 800bfb2:	0712      	lsls	r2, r2, #28
 800bfb4:	d401      	bmi.n	800bfba <__ssvfiscanf_r+0x52>
 800bfb6:	462a      	mov	r2, r5
 800bfb8:	e7eb      	b.n	800bf92 <__ssvfiscanf_r+0x2a>
 800bfba:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bfbc:	3201      	adds	r2, #1
 800bfbe:	9245      	str	r2, [sp, #276]	; 0x114
 800bfc0:	6862      	ldr	r2, [r4, #4]
 800bfc2:	3301      	adds	r3, #1
 800bfc4:	3a01      	subs	r2, #1
 800bfc6:	6062      	str	r2, [r4, #4]
 800bfc8:	6023      	str	r3, [r4, #0]
 800bfca:	e7ec      	b.n	800bfa6 <__ssvfiscanf_r+0x3e>
 800bfcc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bfce:	4621      	mov	r1, r4
 800bfd0:	4630      	mov	r0, r6
 800bfd2:	4798      	blx	r3
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	d0e9      	beq.n	800bfac <__ssvfiscanf_r+0x44>
 800bfd8:	e7ed      	b.n	800bfb6 <__ssvfiscanf_r+0x4e>
 800bfda:	2b25      	cmp	r3, #37	; 0x25
 800bfdc:	d012      	beq.n	800c004 <__ssvfiscanf_r+0x9c>
 800bfde:	469a      	mov	sl, r3
 800bfe0:	6863      	ldr	r3, [r4, #4]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	f340 8091 	ble.w	800c10a <__ssvfiscanf_r+0x1a2>
 800bfe8:	6822      	ldr	r2, [r4, #0]
 800bfea:	7813      	ldrb	r3, [r2, #0]
 800bfec:	4553      	cmp	r3, sl
 800bfee:	f040 812e 	bne.w	800c24e <__ssvfiscanf_r+0x2e6>
 800bff2:	6863      	ldr	r3, [r4, #4]
 800bff4:	3b01      	subs	r3, #1
 800bff6:	6063      	str	r3, [r4, #4]
 800bff8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bffa:	3201      	adds	r2, #1
 800bffc:	3301      	adds	r3, #1
 800bffe:	6022      	str	r2, [r4, #0]
 800c000:	9345      	str	r3, [sp, #276]	; 0x114
 800c002:	e7d8      	b.n	800bfb6 <__ssvfiscanf_r+0x4e>
 800c004:	9141      	str	r1, [sp, #260]	; 0x104
 800c006:	9143      	str	r1, [sp, #268]	; 0x10c
 800c008:	7853      	ldrb	r3, [r2, #1]
 800c00a:	2b2a      	cmp	r3, #42	; 0x2a
 800c00c:	bf02      	ittt	eq
 800c00e:	2310      	moveq	r3, #16
 800c010:	1c95      	addeq	r5, r2, #2
 800c012:	9341      	streq	r3, [sp, #260]	; 0x104
 800c014:	220a      	movs	r2, #10
 800c016:	46aa      	mov	sl, r5
 800c018:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c01c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c020:	2b09      	cmp	r3, #9
 800c022:	d91d      	bls.n	800c060 <__ssvfiscanf_r+0xf8>
 800c024:	487e      	ldr	r0, [pc, #504]	; (800c220 <__ssvfiscanf_r+0x2b8>)
 800c026:	2203      	movs	r2, #3
 800c028:	f7f4 f8ea 	bl	8000200 <memchr>
 800c02c:	b140      	cbz	r0, 800c040 <__ssvfiscanf_r+0xd8>
 800c02e:	2301      	movs	r3, #1
 800c030:	eba0 0009 	sub.w	r0, r0, r9
 800c034:	fa03 f000 	lsl.w	r0, r3, r0
 800c038:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c03a:	4318      	orrs	r0, r3
 800c03c:	9041      	str	r0, [sp, #260]	; 0x104
 800c03e:	4655      	mov	r5, sl
 800c040:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c044:	2b78      	cmp	r3, #120	; 0x78
 800c046:	d806      	bhi.n	800c056 <__ssvfiscanf_r+0xee>
 800c048:	2b57      	cmp	r3, #87	; 0x57
 800c04a:	d810      	bhi.n	800c06e <__ssvfiscanf_r+0x106>
 800c04c:	2b25      	cmp	r3, #37	; 0x25
 800c04e:	d0c6      	beq.n	800bfde <__ssvfiscanf_r+0x76>
 800c050:	d856      	bhi.n	800c100 <__ssvfiscanf_r+0x198>
 800c052:	2b00      	cmp	r3, #0
 800c054:	d064      	beq.n	800c120 <__ssvfiscanf_r+0x1b8>
 800c056:	2303      	movs	r3, #3
 800c058:	9347      	str	r3, [sp, #284]	; 0x11c
 800c05a:	230a      	movs	r3, #10
 800c05c:	9342      	str	r3, [sp, #264]	; 0x108
 800c05e:	e071      	b.n	800c144 <__ssvfiscanf_r+0x1dc>
 800c060:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c062:	fb02 1103 	mla	r1, r2, r3, r1
 800c066:	3930      	subs	r1, #48	; 0x30
 800c068:	9143      	str	r1, [sp, #268]	; 0x10c
 800c06a:	4655      	mov	r5, sl
 800c06c:	e7d3      	b.n	800c016 <__ssvfiscanf_r+0xae>
 800c06e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c072:	2a20      	cmp	r2, #32
 800c074:	d8ef      	bhi.n	800c056 <__ssvfiscanf_r+0xee>
 800c076:	a101      	add	r1, pc, #4	; (adr r1, 800c07c <__ssvfiscanf_r+0x114>)
 800c078:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c07c:	0800c12f 	.word	0x0800c12f
 800c080:	0800c057 	.word	0x0800c057
 800c084:	0800c057 	.word	0x0800c057
 800c088:	0800c18d 	.word	0x0800c18d
 800c08c:	0800c057 	.word	0x0800c057
 800c090:	0800c057 	.word	0x0800c057
 800c094:	0800c057 	.word	0x0800c057
 800c098:	0800c057 	.word	0x0800c057
 800c09c:	0800c057 	.word	0x0800c057
 800c0a0:	0800c057 	.word	0x0800c057
 800c0a4:	0800c057 	.word	0x0800c057
 800c0a8:	0800c1a3 	.word	0x0800c1a3
 800c0ac:	0800c179 	.word	0x0800c179
 800c0b0:	0800c107 	.word	0x0800c107
 800c0b4:	0800c107 	.word	0x0800c107
 800c0b8:	0800c107 	.word	0x0800c107
 800c0bc:	0800c057 	.word	0x0800c057
 800c0c0:	0800c17d 	.word	0x0800c17d
 800c0c4:	0800c057 	.word	0x0800c057
 800c0c8:	0800c057 	.word	0x0800c057
 800c0cc:	0800c057 	.word	0x0800c057
 800c0d0:	0800c057 	.word	0x0800c057
 800c0d4:	0800c1b3 	.word	0x0800c1b3
 800c0d8:	0800c185 	.word	0x0800c185
 800c0dc:	0800c127 	.word	0x0800c127
 800c0e0:	0800c057 	.word	0x0800c057
 800c0e4:	0800c057 	.word	0x0800c057
 800c0e8:	0800c1af 	.word	0x0800c1af
 800c0ec:	0800c057 	.word	0x0800c057
 800c0f0:	0800c179 	.word	0x0800c179
 800c0f4:	0800c057 	.word	0x0800c057
 800c0f8:	0800c057 	.word	0x0800c057
 800c0fc:	0800c12f 	.word	0x0800c12f
 800c100:	3b45      	subs	r3, #69	; 0x45
 800c102:	2b02      	cmp	r3, #2
 800c104:	d8a7      	bhi.n	800c056 <__ssvfiscanf_r+0xee>
 800c106:	2305      	movs	r3, #5
 800c108:	e01b      	b.n	800c142 <__ssvfiscanf_r+0x1da>
 800c10a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c10c:	4621      	mov	r1, r4
 800c10e:	4630      	mov	r0, r6
 800c110:	4798      	blx	r3
 800c112:	2800      	cmp	r0, #0
 800c114:	f43f af68 	beq.w	800bfe8 <__ssvfiscanf_r+0x80>
 800c118:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c11a:	2800      	cmp	r0, #0
 800c11c:	f040 808d 	bne.w	800c23a <__ssvfiscanf_r+0x2d2>
 800c120:	f04f 30ff 	mov.w	r0, #4294967295
 800c124:	e08f      	b.n	800c246 <__ssvfiscanf_r+0x2de>
 800c126:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c128:	f042 0220 	orr.w	r2, r2, #32
 800c12c:	9241      	str	r2, [sp, #260]	; 0x104
 800c12e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c130:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c134:	9241      	str	r2, [sp, #260]	; 0x104
 800c136:	2210      	movs	r2, #16
 800c138:	2b6f      	cmp	r3, #111	; 0x6f
 800c13a:	9242      	str	r2, [sp, #264]	; 0x108
 800c13c:	bf34      	ite	cc
 800c13e:	2303      	movcc	r3, #3
 800c140:	2304      	movcs	r3, #4
 800c142:	9347      	str	r3, [sp, #284]	; 0x11c
 800c144:	6863      	ldr	r3, [r4, #4]
 800c146:	2b00      	cmp	r3, #0
 800c148:	dd42      	ble.n	800c1d0 <__ssvfiscanf_r+0x268>
 800c14a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c14c:	0659      	lsls	r1, r3, #25
 800c14e:	d404      	bmi.n	800c15a <__ssvfiscanf_r+0x1f2>
 800c150:	6823      	ldr	r3, [r4, #0]
 800c152:	781a      	ldrb	r2, [r3, #0]
 800c154:	5cba      	ldrb	r2, [r7, r2]
 800c156:	0712      	lsls	r2, r2, #28
 800c158:	d441      	bmi.n	800c1de <__ssvfiscanf_r+0x276>
 800c15a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c15c:	2b02      	cmp	r3, #2
 800c15e:	dc50      	bgt.n	800c202 <__ssvfiscanf_r+0x29a>
 800c160:	466b      	mov	r3, sp
 800c162:	4622      	mov	r2, r4
 800c164:	a941      	add	r1, sp, #260	; 0x104
 800c166:	4630      	mov	r0, r6
 800c168:	f000 fb64 	bl	800c834 <_scanf_chars>
 800c16c:	2801      	cmp	r0, #1
 800c16e:	d06e      	beq.n	800c24e <__ssvfiscanf_r+0x2e6>
 800c170:	2802      	cmp	r0, #2
 800c172:	f47f af20 	bne.w	800bfb6 <__ssvfiscanf_r+0x4e>
 800c176:	e7cf      	b.n	800c118 <__ssvfiscanf_r+0x1b0>
 800c178:	220a      	movs	r2, #10
 800c17a:	e7dd      	b.n	800c138 <__ssvfiscanf_r+0x1d0>
 800c17c:	2300      	movs	r3, #0
 800c17e:	9342      	str	r3, [sp, #264]	; 0x108
 800c180:	2303      	movs	r3, #3
 800c182:	e7de      	b.n	800c142 <__ssvfiscanf_r+0x1da>
 800c184:	2308      	movs	r3, #8
 800c186:	9342      	str	r3, [sp, #264]	; 0x108
 800c188:	2304      	movs	r3, #4
 800c18a:	e7da      	b.n	800c142 <__ssvfiscanf_r+0x1da>
 800c18c:	4629      	mov	r1, r5
 800c18e:	4640      	mov	r0, r8
 800c190:	f000 fcb4 	bl	800cafc <__sccl>
 800c194:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c19a:	9341      	str	r3, [sp, #260]	; 0x104
 800c19c:	4605      	mov	r5, r0
 800c19e:	2301      	movs	r3, #1
 800c1a0:	e7cf      	b.n	800c142 <__ssvfiscanf_r+0x1da>
 800c1a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c1a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1a8:	9341      	str	r3, [sp, #260]	; 0x104
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	e7c9      	b.n	800c142 <__ssvfiscanf_r+0x1da>
 800c1ae:	2302      	movs	r3, #2
 800c1b0:	e7c7      	b.n	800c142 <__ssvfiscanf_r+0x1da>
 800c1b2:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c1b4:	06c3      	lsls	r3, r0, #27
 800c1b6:	f53f aefe 	bmi.w	800bfb6 <__ssvfiscanf_r+0x4e>
 800c1ba:	9b00      	ldr	r3, [sp, #0]
 800c1bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c1be:	1d19      	adds	r1, r3, #4
 800c1c0:	9100      	str	r1, [sp, #0]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f010 0f01 	tst.w	r0, #1
 800c1c8:	bf14      	ite	ne
 800c1ca:	801a      	strhne	r2, [r3, #0]
 800c1cc:	601a      	streq	r2, [r3, #0]
 800c1ce:	e6f2      	b.n	800bfb6 <__ssvfiscanf_r+0x4e>
 800c1d0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c1d2:	4621      	mov	r1, r4
 800c1d4:	4630      	mov	r0, r6
 800c1d6:	4798      	blx	r3
 800c1d8:	2800      	cmp	r0, #0
 800c1da:	d0b6      	beq.n	800c14a <__ssvfiscanf_r+0x1e2>
 800c1dc:	e79c      	b.n	800c118 <__ssvfiscanf_r+0x1b0>
 800c1de:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c1e0:	3201      	adds	r2, #1
 800c1e2:	9245      	str	r2, [sp, #276]	; 0x114
 800c1e4:	6862      	ldr	r2, [r4, #4]
 800c1e6:	3a01      	subs	r2, #1
 800c1e8:	2a00      	cmp	r2, #0
 800c1ea:	6062      	str	r2, [r4, #4]
 800c1ec:	dd02      	ble.n	800c1f4 <__ssvfiscanf_r+0x28c>
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	6023      	str	r3, [r4, #0]
 800c1f2:	e7ad      	b.n	800c150 <__ssvfiscanf_r+0x1e8>
 800c1f4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c1f6:	4621      	mov	r1, r4
 800c1f8:	4630      	mov	r0, r6
 800c1fa:	4798      	blx	r3
 800c1fc:	2800      	cmp	r0, #0
 800c1fe:	d0a7      	beq.n	800c150 <__ssvfiscanf_r+0x1e8>
 800c200:	e78a      	b.n	800c118 <__ssvfiscanf_r+0x1b0>
 800c202:	2b04      	cmp	r3, #4
 800c204:	dc0e      	bgt.n	800c224 <__ssvfiscanf_r+0x2bc>
 800c206:	466b      	mov	r3, sp
 800c208:	4622      	mov	r2, r4
 800c20a:	a941      	add	r1, sp, #260	; 0x104
 800c20c:	4630      	mov	r0, r6
 800c20e:	f000 fb6b 	bl	800c8e8 <_scanf_i>
 800c212:	e7ab      	b.n	800c16c <__ssvfiscanf_r+0x204>
 800c214:	0800beb5 	.word	0x0800beb5
 800c218:	0800bf2f 	.word	0x0800bf2f
 800c21c:	0800d0fd 	.word	0x0800d0fd
 800c220:	0800d260 	.word	0x0800d260
 800c224:	4b0b      	ldr	r3, [pc, #44]	; (800c254 <__ssvfiscanf_r+0x2ec>)
 800c226:	2b00      	cmp	r3, #0
 800c228:	f43f aec5 	beq.w	800bfb6 <__ssvfiscanf_r+0x4e>
 800c22c:	466b      	mov	r3, sp
 800c22e:	4622      	mov	r2, r4
 800c230:	a941      	add	r1, sp, #260	; 0x104
 800c232:	4630      	mov	r0, r6
 800c234:	f3af 8000 	nop.w
 800c238:	e798      	b.n	800c16c <__ssvfiscanf_r+0x204>
 800c23a:	89a3      	ldrh	r3, [r4, #12]
 800c23c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c240:	bf18      	it	ne
 800c242:	f04f 30ff 	movne.w	r0, #4294967295
 800c246:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c24a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c24e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c250:	e7f9      	b.n	800c246 <__ssvfiscanf_r+0x2de>
 800c252:	bf00      	nop
 800c254:	00000000 	.word	0x00000000

0800c258 <__sfputc_r>:
 800c258:	6893      	ldr	r3, [r2, #8]
 800c25a:	3b01      	subs	r3, #1
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	b410      	push	{r4}
 800c260:	6093      	str	r3, [r2, #8]
 800c262:	da08      	bge.n	800c276 <__sfputc_r+0x1e>
 800c264:	6994      	ldr	r4, [r2, #24]
 800c266:	42a3      	cmp	r3, r4
 800c268:	db01      	blt.n	800c26e <__sfputc_r+0x16>
 800c26a:	290a      	cmp	r1, #10
 800c26c:	d103      	bne.n	800c276 <__sfputc_r+0x1e>
 800c26e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c272:	f7ff bacf 	b.w	800b814 <__swbuf_r>
 800c276:	6813      	ldr	r3, [r2, #0]
 800c278:	1c58      	adds	r0, r3, #1
 800c27a:	6010      	str	r0, [r2, #0]
 800c27c:	7019      	strb	r1, [r3, #0]
 800c27e:	4608      	mov	r0, r1
 800c280:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c284:	4770      	bx	lr

0800c286 <__sfputs_r>:
 800c286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c288:	4606      	mov	r6, r0
 800c28a:	460f      	mov	r7, r1
 800c28c:	4614      	mov	r4, r2
 800c28e:	18d5      	adds	r5, r2, r3
 800c290:	42ac      	cmp	r4, r5
 800c292:	d101      	bne.n	800c298 <__sfputs_r+0x12>
 800c294:	2000      	movs	r0, #0
 800c296:	e007      	b.n	800c2a8 <__sfputs_r+0x22>
 800c298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c29c:	463a      	mov	r2, r7
 800c29e:	4630      	mov	r0, r6
 800c2a0:	f7ff ffda 	bl	800c258 <__sfputc_r>
 800c2a4:	1c43      	adds	r3, r0, #1
 800c2a6:	d1f3      	bne.n	800c290 <__sfputs_r+0xa>
 800c2a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c2ac <_vfiprintf_r>:
 800c2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2b0:	460d      	mov	r5, r1
 800c2b2:	b09d      	sub	sp, #116	; 0x74
 800c2b4:	4614      	mov	r4, r2
 800c2b6:	4698      	mov	r8, r3
 800c2b8:	4606      	mov	r6, r0
 800c2ba:	b118      	cbz	r0, 800c2c4 <_vfiprintf_r+0x18>
 800c2bc:	6983      	ldr	r3, [r0, #24]
 800c2be:	b90b      	cbnz	r3, 800c2c4 <_vfiprintf_r+0x18>
 800c2c0:	f7ff fcc2 	bl	800bc48 <__sinit>
 800c2c4:	4b89      	ldr	r3, [pc, #548]	; (800c4ec <_vfiprintf_r+0x240>)
 800c2c6:	429d      	cmp	r5, r3
 800c2c8:	d11b      	bne.n	800c302 <_vfiprintf_r+0x56>
 800c2ca:	6875      	ldr	r5, [r6, #4]
 800c2cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2ce:	07d9      	lsls	r1, r3, #31
 800c2d0:	d405      	bmi.n	800c2de <_vfiprintf_r+0x32>
 800c2d2:	89ab      	ldrh	r3, [r5, #12]
 800c2d4:	059a      	lsls	r2, r3, #22
 800c2d6:	d402      	bmi.n	800c2de <_vfiprintf_r+0x32>
 800c2d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2da:	f7ff fd65 	bl	800bda8 <__retarget_lock_acquire_recursive>
 800c2de:	89ab      	ldrh	r3, [r5, #12]
 800c2e0:	071b      	lsls	r3, r3, #28
 800c2e2:	d501      	bpl.n	800c2e8 <_vfiprintf_r+0x3c>
 800c2e4:	692b      	ldr	r3, [r5, #16]
 800c2e6:	b9eb      	cbnz	r3, 800c324 <_vfiprintf_r+0x78>
 800c2e8:	4629      	mov	r1, r5
 800c2ea:	4630      	mov	r0, r6
 800c2ec:	f7ff faf6 	bl	800b8dc <__swsetup_r>
 800c2f0:	b1c0      	cbz	r0, 800c324 <_vfiprintf_r+0x78>
 800c2f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2f4:	07dc      	lsls	r4, r3, #31
 800c2f6:	d50e      	bpl.n	800c316 <_vfiprintf_r+0x6a>
 800c2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c2fc:	b01d      	add	sp, #116	; 0x74
 800c2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c302:	4b7b      	ldr	r3, [pc, #492]	; (800c4f0 <_vfiprintf_r+0x244>)
 800c304:	429d      	cmp	r5, r3
 800c306:	d101      	bne.n	800c30c <_vfiprintf_r+0x60>
 800c308:	68b5      	ldr	r5, [r6, #8]
 800c30a:	e7df      	b.n	800c2cc <_vfiprintf_r+0x20>
 800c30c:	4b79      	ldr	r3, [pc, #484]	; (800c4f4 <_vfiprintf_r+0x248>)
 800c30e:	429d      	cmp	r5, r3
 800c310:	bf08      	it	eq
 800c312:	68f5      	ldreq	r5, [r6, #12]
 800c314:	e7da      	b.n	800c2cc <_vfiprintf_r+0x20>
 800c316:	89ab      	ldrh	r3, [r5, #12]
 800c318:	0598      	lsls	r0, r3, #22
 800c31a:	d4ed      	bmi.n	800c2f8 <_vfiprintf_r+0x4c>
 800c31c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c31e:	f7ff fd44 	bl	800bdaa <__retarget_lock_release_recursive>
 800c322:	e7e9      	b.n	800c2f8 <_vfiprintf_r+0x4c>
 800c324:	2300      	movs	r3, #0
 800c326:	9309      	str	r3, [sp, #36]	; 0x24
 800c328:	2320      	movs	r3, #32
 800c32a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c32e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c332:	2330      	movs	r3, #48	; 0x30
 800c334:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c4f8 <_vfiprintf_r+0x24c>
 800c338:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c33c:	f04f 0901 	mov.w	r9, #1
 800c340:	4623      	mov	r3, r4
 800c342:	469a      	mov	sl, r3
 800c344:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c348:	b10a      	cbz	r2, 800c34e <_vfiprintf_r+0xa2>
 800c34a:	2a25      	cmp	r2, #37	; 0x25
 800c34c:	d1f9      	bne.n	800c342 <_vfiprintf_r+0x96>
 800c34e:	ebba 0b04 	subs.w	fp, sl, r4
 800c352:	d00b      	beq.n	800c36c <_vfiprintf_r+0xc0>
 800c354:	465b      	mov	r3, fp
 800c356:	4622      	mov	r2, r4
 800c358:	4629      	mov	r1, r5
 800c35a:	4630      	mov	r0, r6
 800c35c:	f7ff ff93 	bl	800c286 <__sfputs_r>
 800c360:	3001      	adds	r0, #1
 800c362:	f000 80aa 	beq.w	800c4ba <_vfiprintf_r+0x20e>
 800c366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c368:	445a      	add	r2, fp
 800c36a:	9209      	str	r2, [sp, #36]	; 0x24
 800c36c:	f89a 3000 	ldrb.w	r3, [sl]
 800c370:	2b00      	cmp	r3, #0
 800c372:	f000 80a2 	beq.w	800c4ba <_vfiprintf_r+0x20e>
 800c376:	2300      	movs	r3, #0
 800c378:	f04f 32ff 	mov.w	r2, #4294967295
 800c37c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c380:	f10a 0a01 	add.w	sl, sl, #1
 800c384:	9304      	str	r3, [sp, #16]
 800c386:	9307      	str	r3, [sp, #28]
 800c388:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c38c:	931a      	str	r3, [sp, #104]	; 0x68
 800c38e:	4654      	mov	r4, sl
 800c390:	2205      	movs	r2, #5
 800c392:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c396:	4858      	ldr	r0, [pc, #352]	; (800c4f8 <_vfiprintf_r+0x24c>)
 800c398:	f7f3 ff32 	bl	8000200 <memchr>
 800c39c:	9a04      	ldr	r2, [sp, #16]
 800c39e:	b9d8      	cbnz	r0, 800c3d8 <_vfiprintf_r+0x12c>
 800c3a0:	06d1      	lsls	r1, r2, #27
 800c3a2:	bf44      	itt	mi
 800c3a4:	2320      	movmi	r3, #32
 800c3a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3aa:	0713      	lsls	r3, r2, #28
 800c3ac:	bf44      	itt	mi
 800c3ae:	232b      	movmi	r3, #43	; 0x2b
 800c3b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3b4:	f89a 3000 	ldrb.w	r3, [sl]
 800c3b8:	2b2a      	cmp	r3, #42	; 0x2a
 800c3ba:	d015      	beq.n	800c3e8 <_vfiprintf_r+0x13c>
 800c3bc:	9a07      	ldr	r2, [sp, #28]
 800c3be:	4654      	mov	r4, sl
 800c3c0:	2000      	movs	r0, #0
 800c3c2:	f04f 0c0a 	mov.w	ip, #10
 800c3c6:	4621      	mov	r1, r4
 800c3c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3cc:	3b30      	subs	r3, #48	; 0x30
 800c3ce:	2b09      	cmp	r3, #9
 800c3d0:	d94e      	bls.n	800c470 <_vfiprintf_r+0x1c4>
 800c3d2:	b1b0      	cbz	r0, 800c402 <_vfiprintf_r+0x156>
 800c3d4:	9207      	str	r2, [sp, #28]
 800c3d6:	e014      	b.n	800c402 <_vfiprintf_r+0x156>
 800c3d8:	eba0 0308 	sub.w	r3, r0, r8
 800c3dc:	fa09 f303 	lsl.w	r3, r9, r3
 800c3e0:	4313      	orrs	r3, r2
 800c3e2:	9304      	str	r3, [sp, #16]
 800c3e4:	46a2      	mov	sl, r4
 800c3e6:	e7d2      	b.n	800c38e <_vfiprintf_r+0xe2>
 800c3e8:	9b03      	ldr	r3, [sp, #12]
 800c3ea:	1d19      	adds	r1, r3, #4
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	9103      	str	r1, [sp, #12]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	bfbb      	ittet	lt
 800c3f4:	425b      	neglt	r3, r3
 800c3f6:	f042 0202 	orrlt.w	r2, r2, #2
 800c3fa:	9307      	strge	r3, [sp, #28]
 800c3fc:	9307      	strlt	r3, [sp, #28]
 800c3fe:	bfb8      	it	lt
 800c400:	9204      	strlt	r2, [sp, #16]
 800c402:	7823      	ldrb	r3, [r4, #0]
 800c404:	2b2e      	cmp	r3, #46	; 0x2e
 800c406:	d10c      	bne.n	800c422 <_vfiprintf_r+0x176>
 800c408:	7863      	ldrb	r3, [r4, #1]
 800c40a:	2b2a      	cmp	r3, #42	; 0x2a
 800c40c:	d135      	bne.n	800c47a <_vfiprintf_r+0x1ce>
 800c40e:	9b03      	ldr	r3, [sp, #12]
 800c410:	1d1a      	adds	r2, r3, #4
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	9203      	str	r2, [sp, #12]
 800c416:	2b00      	cmp	r3, #0
 800c418:	bfb8      	it	lt
 800c41a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c41e:	3402      	adds	r4, #2
 800c420:	9305      	str	r3, [sp, #20]
 800c422:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c508 <_vfiprintf_r+0x25c>
 800c426:	7821      	ldrb	r1, [r4, #0]
 800c428:	2203      	movs	r2, #3
 800c42a:	4650      	mov	r0, sl
 800c42c:	f7f3 fee8 	bl	8000200 <memchr>
 800c430:	b140      	cbz	r0, 800c444 <_vfiprintf_r+0x198>
 800c432:	2340      	movs	r3, #64	; 0x40
 800c434:	eba0 000a 	sub.w	r0, r0, sl
 800c438:	fa03 f000 	lsl.w	r0, r3, r0
 800c43c:	9b04      	ldr	r3, [sp, #16]
 800c43e:	4303      	orrs	r3, r0
 800c440:	3401      	adds	r4, #1
 800c442:	9304      	str	r3, [sp, #16]
 800c444:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c448:	482c      	ldr	r0, [pc, #176]	; (800c4fc <_vfiprintf_r+0x250>)
 800c44a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c44e:	2206      	movs	r2, #6
 800c450:	f7f3 fed6 	bl	8000200 <memchr>
 800c454:	2800      	cmp	r0, #0
 800c456:	d03f      	beq.n	800c4d8 <_vfiprintf_r+0x22c>
 800c458:	4b29      	ldr	r3, [pc, #164]	; (800c500 <_vfiprintf_r+0x254>)
 800c45a:	bb1b      	cbnz	r3, 800c4a4 <_vfiprintf_r+0x1f8>
 800c45c:	9b03      	ldr	r3, [sp, #12]
 800c45e:	3307      	adds	r3, #7
 800c460:	f023 0307 	bic.w	r3, r3, #7
 800c464:	3308      	adds	r3, #8
 800c466:	9303      	str	r3, [sp, #12]
 800c468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c46a:	443b      	add	r3, r7
 800c46c:	9309      	str	r3, [sp, #36]	; 0x24
 800c46e:	e767      	b.n	800c340 <_vfiprintf_r+0x94>
 800c470:	fb0c 3202 	mla	r2, ip, r2, r3
 800c474:	460c      	mov	r4, r1
 800c476:	2001      	movs	r0, #1
 800c478:	e7a5      	b.n	800c3c6 <_vfiprintf_r+0x11a>
 800c47a:	2300      	movs	r3, #0
 800c47c:	3401      	adds	r4, #1
 800c47e:	9305      	str	r3, [sp, #20]
 800c480:	4619      	mov	r1, r3
 800c482:	f04f 0c0a 	mov.w	ip, #10
 800c486:	4620      	mov	r0, r4
 800c488:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c48c:	3a30      	subs	r2, #48	; 0x30
 800c48e:	2a09      	cmp	r2, #9
 800c490:	d903      	bls.n	800c49a <_vfiprintf_r+0x1ee>
 800c492:	2b00      	cmp	r3, #0
 800c494:	d0c5      	beq.n	800c422 <_vfiprintf_r+0x176>
 800c496:	9105      	str	r1, [sp, #20]
 800c498:	e7c3      	b.n	800c422 <_vfiprintf_r+0x176>
 800c49a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c49e:	4604      	mov	r4, r0
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	e7f0      	b.n	800c486 <_vfiprintf_r+0x1da>
 800c4a4:	ab03      	add	r3, sp, #12
 800c4a6:	9300      	str	r3, [sp, #0]
 800c4a8:	462a      	mov	r2, r5
 800c4aa:	4b16      	ldr	r3, [pc, #88]	; (800c504 <_vfiprintf_r+0x258>)
 800c4ac:	a904      	add	r1, sp, #16
 800c4ae:	4630      	mov	r0, r6
 800c4b0:	f3af 8000 	nop.w
 800c4b4:	4607      	mov	r7, r0
 800c4b6:	1c78      	adds	r0, r7, #1
 800c4b8:	d1d6      	bne.n	800c468 <_vfiprintf_r+0x1bc>
 800c4ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4bc:	07d9      	lsls	r1, r3, #31
 800c4be:	d405      	bmi.n	800c4cc <_vfiprintf_r+0x220>
 800c4c0:	89ab      	ldrh	r3, [r5, #12]
 800c4c2:	059a      	lsls	r2, r3, #22
 800c4c4:	d402      	bmi.n	800c4cc <_vfiprintf_r+0x220>
 800c4c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4c8:	f7ff fc6f 	bl	800bdaa <__retarget_lock_release_recursive>
 800c4cc:	89ab      	ldrh	r3, [r5, #12]
 800c4ce:	065b      	lsls	r3, r3, #25
 800c4d0:	f53f af12 	bmi.w	800c2f8 <_vfiprintf_r+0x4c>
 800c4d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4d6:	e711      	b.n	800c2fc <_vfiprintf_r+0x50>
 800c4d8:	ab03      	add	r3, sp, #12
 800c4da:	9300      	str	r3, [sp, #0]
 800c4dc:	462a      	mov	r2, r5
 800c4de:	4b09      	ldr	r3, [pc, #36]	; (800c504 <_vfiprintf_r+0x258>)
 800c4e0:	a904      	add	r1, sp, #16
 800c4e2:	4630      	mov	r0, r6
 800c4e4:	f000 f880 	bl	800c5e8 <_printf_i>
 800c4e8:	e7e4      	b.n	800c4b4 <_vfiprintf_r+0x208>
 800c4ea:	bf00      	nop
 800c4ec:	0800d220 	.word	0x0800d220
 800c4f0:	0800d240 	.word	0x0800d240
 800c4f4:	0800d200 	.word	0x0800d200
 800c4f8:	0800d264 	.word	0x0800d264
 800c4fc:	0800d26a 	.word	0x0800d26a
 800c500:	00000000 	.word	0x00000000
 800c504:	0800c287 	.word	0x0800c287
 800c508:	0800d260 	.word	0x0800d260

0800c50c <_printf_common>:
 800c50c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c510:	4616      	mov	r6, r2
 800c512:	4699      	mov	r9, r3
 800c514:	688a      	ldr	r2, [r1, #8]
 800c516:	690b      	ldr	r3, [r1, #16]
 800c518:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c51c:	4293      	cmp	r3, r2
 800c51e:	bfb8      	it	lt
 800c520:	4613      	movlt	r3, r2
 800c522:	6033      	str	r3, [r6, #0]
 800c524:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c528:	4607      	mov	r7, r0
 800c52a:	460c      	mov	r4, r1
 800c52c:	b10a      	cbz	r2, 800c532 <_printf_common+0x26>
 800c52e:	3301      	adds	r3, #1
 800c530:	6033      	str	r3, [r6, #0]
 800c532:	6823      	ldr	r3, [r4, #0]
 800c534:	0699      	lsls	r1, r3, #26
 800c536:	bf42      	ittt	mi
 800c538:	6833      	ldrmi	r3, [r6, #0]
 800c53a:	3302      	addmi	r3, #2
 800c53c:	6033      	strmi	r3, [r6, #0]
 800c53e:	6825      	ldr	r5, [r4, #0]
 800c540:	f015 0506 	ands.w	r5, r5, #6
 800c544:	d106      	bne.n	800c554 <_printf_common+0x48>
 800c546:	f104 0a19 	add.w	sl, r4, #25
 800c54a:	68e3      	ldr	r3, [r4, #12]
 800c54c:	6832      	ldr	r2, [r6, #0]
 800c54e:	1a9b      	subs	r3, r3, r2
 800c550:	42ab      	cmp	r3, r5
 800c552:	dc26      	bgt.n	800c5a2 <_printf_common+0x96>
 800c554:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c558:	1e13      	subs	r3, r2, #0
 800c55a:	6822      	ldr	r2, [r4, #0]
 800c55c:	bf18      	it	ne
 800c55e:	2301      	movne	r3, #1
 800c560:	0692      	lsls	r2, r2, #26
 800c562:	d42b      	bmi.n	800c5bc <_printf_common+0xb0>
 800c564:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c568:	4649      	mov	r1, r9
 800c56a:	4638      	mov	r0, r7
 800c56c:	47c0      	blx	r8
 800c56e:	3001      	adds	r0, #1
 800c570:	d01e      	beq.n	800c5b0 <_printf_common+0xa4>
 800c572:	6823      	ldr	r3, [r4, #0]
 800c574:	68e5      	ldr	r5, [r4, #12]
 800c576:	6832      	ldr	r2, [r6, #0]
 800c578:	f003 0306 	and.w	r3, r3, #6
 800c57c:	2b04      	cmp	r3, #4
 800c57e:	bf08      	it	eq
 800c580:	1aad      	subeq	r5, r5, r2
 800c582:	68a3      	ldr	r3, [r4, #8]
 800c584:	6922      	ldr	r2, [r4, #16]
 800c586:	bf0c      	ite	eq
 800c588:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c58c:	2500      	movne	r5, #0
 800c58e:	4293      	cmp	r3, r2
 800c590:	bfc4      	itt	gt
 800c592:	1a9b      	subgt	r3, r3, r2
 800c594:	18ed      	addgt	r5, r5, r3
 800c596:	2600      	movs	r6, #0
 800c598:	341a      	adds	r4, #26
 800c59a:	42b5      	cmp	r5, r6
 800c59c:	d11a      	bne.n	800c5d4 <_printf_common+0xc8>
 800c59e:	2000      	movs	r0, #0
 800c5a0:	e008      	b.n	800c5b4 <_printf_common+0xa8>
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	4652      	mov	r2, sl
 800c5a6:	4649      	mov	r1, r9
 800c5a8:	4638      	mov	r0, r7
 800c5aa:	47c0      	blx	r8
 800c5ac:	3001      	adds	r0, #1
 800c5ae:	d103      	bne.n	800c5b8 <_printf_common+0xac>
 800c5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c5b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5b8:	3501      	adds	r5, #1
 800c5ba:	e7c6      	b.n	800c54a <_printf_common+0x3e>
 800c5bc:	18e1      	adds	r1, r4, r3
 800c5be:	1c5a      	adds	r2, r3, #1
 800c5c0:	2030      	movs	r0, #48	; 0x30
 800c5c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c5c6:	4422      	add	r2, r4
 800c5c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c5cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c5d0:	3302      	adds	r3, #2
 800c5d2:	e7c7      	b.n	800c564 <_printf_common+0x58>
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	4622      	mov	r2, r4
 800c5d8:	4649      	mov	r1, r9
 800c5da:	4638      	mov	r0, r7
 800c5dc:	47c0      	blx	r8
 800c5de:	3001      	adds	r0, #1
 800c5e0:	d0e6      	beq.n	800c5b0 <_printf_common+0xa4>
 800c5e2:	3601      	adds	r6, #1
 800c5e4:	e7d9      	b.n	800c59a <_printf_common+0x8e>
	...

0800c5e8 <_printf_i>:
 800c5e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5ec:	7e0f      	ldrb	r7, [r1, #24]
 800c5ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c5f0:	2f78      	cmp	r7, #120	; 0x78
 800c5f2:	4691      	mov	r9, r2
 800c5f4:	4680      	mov	r8, r0
 800c5f6:	460c      	mov	r4, r1
 800c5f8:	469a      	mov	sl, r3
 800c5fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c5fe:	d807      	bhi.n	800c610 <_printf_i+0x28>
 800c600:	2f62      	cmp	r7, #98	; 0x62
 800c602:	d80a      	bhi.n	800c61a <_printf_i+0x32>
 800c604:	2f00      	cmp	r7, #0
 800c606:	f000 80d8 	beq.w	800c7ba <_printf_i+0x1d2>
 800c60a:	2f58      	cmp	r7, #88	; 0x58
 800c60c:	f000 80a3 	beq.w	800c756 <_printf_i+0x16e>
 800c610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c614:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c618:	e03a      	b.n	800c690 <_printf_i+0xa8>
 800c61a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c61e:	2b15      	cmp	r3, #21
 800c620:	d8f6      	bhi.n	800c610 <_printf_i+0x28>
 800c622:	a101      	add	r1, pc, #4	; (adr r1, 800c628 <_printf_i+0x40>)
 800c624:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c628:	0800c681 	.word	0x0800c681
 800c62c:	0800c695 	.word	0x0800c695
 800c630:	0800c611 	.word	0x0800c611
 800c634:	0800c611 	.word	0x0800c611
 800c638:	0800c611 	.word	0x0800c611
 800c63c:	0800c611 	.word	0x0800c611
 800c640:	0800c695 	.word	0x0800c695
 800c644:	0800c611 	.word	0x0800c611
 800c648:	0800c611 	.word	0x0800c611
 800c64c:	0800c611 	.word	0x0800c611
 800c650:	0800c611 	.word	0x0800c611
 800c654:	0800c7a1 	.word	0x0800c7a1
 800c658:	0800c6c5 	.word	0x0800c6c5
 800c65c:	0800c783 	.word	0x0800c783
 800c660:	0800c611 	.word	0x0800c611
 800c664:	0800c611 	.word	0x0800c611
 800c668:	0800c7c3 	.word	0x0800c7c3
 800c66c:	0800c611 	.word	0x0800c611
 800c670:	0800c6c5 	.word	0x0800c6c5
 800c674:	0800c611 	.word	0x0800c611
 800c678:	0800c611 	.word	0x0800c611
 800c67c:	0800c78b 	.word	0x0800c78b
 800c680:	682b      	ldr	r3, [r5, #0]
 800c682:	1d1a      	adds	r2, r3, #4
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	602a      	str	r2, [r5, #0]
 800c688:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c68c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c690:	2301      	movs	r3, #1
 800c692:	e0a3      	b.n	800c7dc <_printf_i+0x1f4>
 800c694:	6820      	ldr	r0, [r4, #0]
 800c696:	6829      	ldr	r1, [r5, #0]
 800c698:	0606      	lsls	r6, r0, #24
 800c69a:	f101 0304 	add.w	r3, r1, #4
 800c69e:	d50a      	bpl.n	800c6b6 <_printf_i+0xce>
 800c6a0:	680e      	ldr	r6, [r1, #0]
 800c6a2:	602b      	str	r3, [r5, #0]
 800c6a4:	2e00      	cmp	r6, #0
 800c6a6:	da03      	bge.n	800c6b0 <_printf_i+0xc8>
 800c6a8:	232d      	movs	r3, #45	; 0x2d
 800c6aa:	4276      	negs	r6, r6
 800c6ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c6b0:	485e      	ldr	r0, [pc, #376]	; (800c82c <_printf_i+0x244>)
 800c6b2:	230a      	movs	r3, #10
 800c6b4:	e019      	b.n	800c6ea <_printf_i+0x102>
 800c6b6:	680e      	ldr	r6, [r1, #0]
 800c6b8:	602b      	str	r3, [r5, #0]
 800c6ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c6be:	bf18      	it	ne
 800c6c0:	b236      	sxthne	r6, r6
 800c6c2:	e7ef      	b.n	800c6a4 <_printf_i+0xbc>
 800c6c4:	682b      	ldr	r3, [r5, #0]
 800c6c6:	6820      	ldr	r0, [r4, #0]
 800c6c8:	1d19      	adds	r1, r3, #4
 800c6ca:	6029      	str	r1, [r5, #0]
 800c6cc:	0601      	lsls	r1, r0, #24
 800c6ce:	d501      	bpl.n	800c6d4 <_printf_i+0xec>
 800c6d0:	681e      	ldr	r6, [r3, #0]
 800c6d2:	e002      	b.n	800c6da <_printf_i+0xf2>
 800c6d4:	0646      	lsls	r6, r0, #25
 800c6d6:	d5fb      	bpl.n	800c6d0 <_printf_i+0xe8>
 800c6d8:	881e      	ldrh	r6, [r3, #0]
 800c6da:	4854      	ldr	r0, [pc, #336]	; (800c82c <_printf_i+0x244>)
 800c6dc:	2f6f      	cmp	r7, #111	; 0x6f
 800c6de:	bf0c      	ite	eq
 800c6e0:	2308      	moveq	r3, #8
 800c6e2:	230a      	movne	r3, #10
 800c6e4:	2100      	movs	r1, #0
 800c6e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c6ea:	6865      	ldr	r5, [r4, #4]
 800c6ec:	60a5      	str	r5, [r4, #8]
 800c6ee:	2d00      	cmp	r5, #0
 800c6f0:	bfa2      	ittt	ge
 800c6f2:	6821      	ldrge	r1, [r4, #0]
 800c6f4:	f021 0104 	bicge.w	r1, r1, #4
 800c6f8:	6021      	strge	r1, [r4, #0]
 800c6fa:	b90e      	cbnz	r6, 800c700 <_printf_i+0x118>
 800c6fc:	2d00      	cmp	r5, #0
 800c6fe:	d04d      	beq.n	800c79c <_printf_i+0x1b4>
 800c700:	4615      	mov	r5, r2
 800c702:	fbb6 f1f3 	udiv	r1, r6, r3
 800c706:	fb03 6711 	mls	r7, r3, r1, r6
 800c70a:	5dc7      	ldrb	r7, [r0, r7]
 800c70c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c710:	4637      	mov	r7, r6
 800c712:	42bb      	cmp	r3, r7
 800c714:	460e      	mov	r6, r1
 800c716:	d9f4      	bls.n	800c702 <_printf_i+0x11a>
 800c718:	2b08      	cmp	r3, #8
 800c71a:	d10b      	bne.n	800c734 <_printf_i+0x14c>
 800c71c:	6823      	ldr	r3, [r4, #0]
 800c71e:	07de      	lsls	r6, r3, #31
 800c720:	d508      	bpl.n	800c734 <_printf_i+0x14c>
 800c722:	6923      	ldr	r3, [r4, #16]
 800c724:	6861      	ldr	r1, [r4, #4]
 800c726:	4299      	cmp	r1, r3
 800c728:	bfde      	ittt	le
 800c72a:	2330      	movle	r3, #48	; 0x30
 800c72c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c730:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c734:	1b52      	subs	r2, r2, r5
 800c736:	6122      	str	r2, [r4, #16]
 800c738:	f8cd a000 	str.w	sl, [sp]
 800c73c:	464b      	mov	r3, r9
 800c73e:	aa03      	add	r2, sp, #12
 800c740:	4621      	mov	r1, r4
 800c742:	4640      	mov	r0, r8
 800c744:	f7ff fee2 	bl	800c50c <_printf_common>
 800c748:	3001      	adds	r0, #1
 800c74a:	d14c      	bne.n	800c7e6 <_printf_i+0x1fe>
 800c74c:	f04f 30ff 	mov.w	r0, #4294967295
 800c750:	b004      	add	sp, #16
 800c752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c756:	4835      	ldr	r0, [pc, #212]	; (800c82c <_printf_i+0x244>)
 800c758:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c75c:	6829      	ldr	r1, [r5, #0]
 800c75e:	6823      	ldr	r3, [r4, #0]
 800c760:	f851 6b04 	ldr.w	r6, [r1], #4
 800c764:	6029      	str	r1, [r5, #0]
 800c766:	061d      	lsls	r5, r3, #24
 800c768:	d514      	bpl.n	800c794 <_printf_i+0x1ac>
 800c76a:	07df      	lsls	r7, r3, #31
 800c76c:	bf44      	itt	mi
 800c76e:	f043 0320 	orrmi.w	r3, r3, #32
 800c772:	6023      	strmi	r3, [r4, #0]
 800c774:	b91e      	cbnz	r6, 800c77e <_printf_i+0x196>
 800c776:	6823      	ldr	r3, [r4, #0]
 800c778:	f023 0320 	bic.w	r3, r3, #32
 800c77c:	6023      	str	r3, [r4, #0]
 800c77e:	2310      	movs	r3, #16
 800c780:	e7b0      	b.n	800c6e4 <_printf_i+0xfc>
 800c782:	6823      	ldr	r3, [r4, #0]
 800c784:	f043 0320 	orr.w	r3, r3, #32
 800c788:	6023      	str	r3, [r4, #0]
 800c78a:	2378      	movs	r3, #120	; 0x78
 800c78c:	4828      	ldr	r0, [pc, #160]	; (800c830 <_printf_i+0x248>)
 800c78e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c792:	e7e3      	b.n	800c75c <_printf_i+0x174>
 800c794:	0659      	lsls	r1, r3, #25
 800c796:	bf48      	it	mi
 800c798:	b2b6      	uxthmi	r6, r6
 800c79a:	e7e6      	b.n	800c76a <_printf_i+0x182>
 800c79c:	4615      	mov	r5, r2
 800c79e:	e7bb      	b.n	800c718 <_printf_i+0x130>
 800c7a0:	682b      	ldr	r3, [r5, #0]
 800c7a2:	6826      	ldr	r6, [r4, #0]
 800c7a4:	6961      	ldr	r1, [r4, #20]
 800c7a6:	1d18      	adds	r0, r3, #4
 800c7a8:	6028      	str	r0, [r5, #0]
 800c7aa:	0635      	lsls	r5, r6, #24
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	d501      	bpl.n	800c7b4 <_printf_i+0x1cc>
 800c7b0:	6019      	str	r1, [r3, #0]
 800c7b2:	e002      	b.n	800c7ba <_printf_i+0x1d2>
 800c7b4:	0670      	lsls	r0, r6, #25
 800c7b6:	d5fb      	bpl.n	800c7b0 <_printf_i+0x1c8>
 800c7b8:	8019      	strh	r1, [r3, #0]
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	6123      	str	r3, [r4, #16]
 800c7be:	4615      	mov	r5, r2
 800c7c0:	e7ba      	b.n	800c738 <_printf_i+0x150>
 800c7c2:	682b      	ldr	r3, [r5, #0]
 800c7c4:	1d1a      	adds	r2, r3, #4
 800c7c6:	602a      	str	r2, [r5, #0]
 800c7c8:	681d      	ldr	r5, [r3, #0]
 800c7ca:	6862      	ldr	r2, [r4, #4]
 800c7cc:	2100      	movs	r1, #0
 800c7ce:	4628      	mov	r0, r5
 800c7d0:	f7f3 fd16 	bl	8000200 <memchr>
 800c7d4:	b108      	cbz	r0, 800c7da <_printf_i+0x1f2>
 800c7d6:	1b40      	subs	r0, r0, r5
 800c7d8:	6060      	str	r0, [r4, #4]
 800c7da:	6863      	ldr	r3, [r4, #4]
 800c7dc:	6123      	str	r3, [r4, #16]
 800c7de:	2300      	movs	r3, #0
 800c7e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7e4:	e7a8      	b.n	800c738 <_printf_i+0x150>
 800c7e6:	6923      	ldr	r3, [r4, #16]
 800c7e8:	462a      	mov	r2, r5
 800c7ea:	4649      	mov	r1, r9
 800c7ec:	4640      	mov	r0, r8
 800c7ee:	47d0      	blx	sl
 800c7f0:	3001      	adds	r0, #1
 800c7f2:	d0ab      	beq.n	800c74c <_printf_i+0x164>
 800c7f4:	6823      	ldr	r3, [r4, #0]
 800c7f6:	079b      	lsls	r3, r3, #30
 800c7f8:	d413      	bmi.n	800c822 <_printf_i+0x23a>
 800c7fa:	68e0      	ldr	r0, [r4, #12]
 800c7fc:	9b03      	ldr	r3, [sp, #12]
 800c7fe:	4298      	cmp	r0, r3
 800c800:	bfb8      	it	lt
 800c802:	4618      	movlt	r0, r3
 800c804:	e7a4      	b.n	800c750 <_printf_i+0x168>
 800c806:	2301      	movs	r3, #1
 800c808:	4632      	mov	r2, r6
 800c80a:	4649      	mov	r1, r9
 800c80c:	4640      	mov	r0, r8
 800c80e:	47d0      	blx	sl
 800c810:	3001      	adds	r0, #1
 800c812:	d09b      	beq.n	800c74c <_printf_i+0x164>
 800c814:	3501      	adds	r5, #1
 800c816:	68e3      	ldr	r3, [r4, #12]
 800c818:	9903      	ldr	r1, [sp, #12]
 800c81a:	1a5b      	subs	r3, r3, r1
 800c81c:	42ab      	cmp	r3, r5
 800c81e:	dcf2      	bgt.n	800c806 <_printf_i+0x21e>
 800c820:	e7eb      	b.n	800c7fa <_printf_i+0x212>
 800c822:	2500      	movs	r5, #0
 800c824:	f104 0619 	add.w	r6, r4, #25
 800c828:	e7f5      	b.n	800c816 <_printf_i+0x22e>
 800c82a:	bf00      	nop
 800c82c:	0800d271 	.word	0x0800d271
 800c830:	0800d282 	.word	0x0800d282

0800c834 <_scanf_chars>:
 800c834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c838:	4615      	mov	r5, r2
 800c83a:	688a      	ldr	r2, [r1, #8]
 800c83c:	4680      	mov	r8, r0
 800c83e:	460c      	mov	r4, r1
 800c840:	b932      	cbnz	r2, 800c850 <_scanf_chars+0x1c>
 800c842:	698a      	ldr	r2, [r1, #24]
 800c844:	2a00      	cmp	r2, #0
 800c846:	bf0c      	ite	eq
 800c848:	2201      	moveq	r2, #1
 800c84a:	f04f 32ff 	movne.w	r2, #4294967295
 800c84e:	608a      	str	r2, [r1, #8]
 800c850:	6822      	ldr	r2, [r4, #0]
 800c852:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c8e4 <_scanf_chars+0xb0>
 800c856:	06d1      	lsls	r1, r2, #27
 800c858:	bf5f      	itttt	pl
 800c85a:	681a      	ldrpl	r2, [r3, #0]
 800c85c:	1d11      	addpl	r1, r2, #4
 800c85e:	6019      	strpl	r1, [r3, #0]
 800c860:	6816      	ldrpl	r6, [r2, #0]
 800c862:	2700      	movs	r7, #0
 800c864:	69a0      	ldr	r0, [r4, #24]
 800c866:	b188      	cbz	r0, 800c88c <_scanf_chars+0x58>
 800c868:	2801      	cmp	r0, #1
 800c86a:	d107      	bne.n	800c87c <_scanf_chars+0x48>
 800c86c:	682a      	ldr	r2, [r5, #0]
 800c86e:	7811      	ldrb	r1, [r2, #0]
 800c870:	6962      	ldr	r2, [r4, #20]
 800c872:	5c52      	ldrb	r2, [r2, r1]
 800c874:	b952      	cbnz	r2, 800c88c <_scanf_chars+0x58>
 800c876:	2f00      	cmp	r7, #0
 800c878:	d031      	beq.n	800c8de <_scanf_chars+0xaa>
 800c87a:	e022      	b.n	800c8c2 <_scanf_chars+0x8e>
 800c87c:	2802      	cmp	r0, #2
 800c87e:	d120      	bne.n	800c8c2 <_scanf_chars+0x8e>
 800c880:	682b      	ldr	r3, [r5, #0]
 800c882:	781b      	ldrb	r3, [r3, #0]
 800c884:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c888:	071b      	lsls	r3, r3, #28
 800c88a:	d41a      	bmi.n	800c8c2 <_scanf_chars+0x8e>
 800c88c:	6823      	ldr	r3, [r4, #0]
 800c88e:	06da      	lsls	r2, r3, #27
 800c890:	bf5e      	ittt	pl
 800c892:	682b      	ldrpl	r3, [r5, #0]
 800c894:	781b      	ldrbpl	r3, [r3, #0]
 800c896:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c89a:	682a      	ldr	r2, [r5, #0]
 800c89c:	686b      	ldr	r3, [r5, #4]
 800c89e:	3201      	adds	r2, #1
 800c8a0:	602a      	str	r2, [r5, #0]
 800c8a2:	68a2      	ldr	r2, [r4, #8]
 800c8a4:	3b01      	subs	r3, #1
 800c8a6:	3a01      	subs	r2, #1
 800c8a8:	606b      	str	r3, [r5, #4]
 800c8aa:	3701      	adds	r7, #1
 800c8ac:	60a2      	str	r2, [r4, #8]
 800c8ae:	b142      	cbz	r2, 800c8c2 <_scanf_chars+0x8e>
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	dcd7      	bgt.n	800c864 <_scanf_chars+0x30>
 800c8b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c8b8:	4629      	mov	r1, r5
 800c8ba:	4640      	mov	r0, r8
 800c8bc:	4798      	blx	r3
 800c8be:	2800      	cmp	r0, #0
 800c8c0:	d0d0      	beq.n	800c864 <_scanf_chars+0x30>
 800c8c2:	6823      	ldr	r3, [r4, #0]
 800c8c4:	f013 0310 	ands.w	r3, r3, #16
 800c8c8:	d105      	bne.n	800c8d6 <_scanf_chars+0xa2>
 800c8ca:	68e2      	ldr	r2, [r4, #12]
 800c8cc:	3201      	adds	r2, #1
 800c8ce:	60e2      	str	r2, [r4, #12]
 800c8d0:	69a2      	ldr	r2, [r4, #24]
 800c8d2:	b102      	cbz	r2, 800c8d6 <_scanf_chars+0xa2>
 800c8d4:	7033      	strb	r3, [r6, #0]
 800c8d6:	6923      	ldr	r3, [r4, #16]
 800c8d8:	443b      	add	r3, r7
 800c8da:	6123      	str	r3, [r4, #16]
 800c8dc:	2000      	movs	r0, #0
 800c8de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8e2:	bf00      	nop
 800c8e4:	0800d0fd 	.word	0x0800d0fd

0800c8e8 <_scanf_i>:
 800c8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8ec:	4698      	mov	r8, r3
 800c8ee:	4b76      	ldr	r3, [pc, #472]	; (800cac8 <_scanf_i+0x1e0>)
 800c8f0:	460c      	mov	r4, r1
 800c8f2:	4682      	mov	sl, r0
 800c8f4:	4616      	mov	r6, r2
 800c8f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c8fa:	b087      	sub	sp, #28
 800c8fc:	ab03      	add	r3, sp, #12
 800c8fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c902:	4b72      	ldr	r3, [pc, #456]	; (800cacc <_scanf_i+0x1e4>)
 800c904:	69a1      	ldr	r1, [r4, #24]
 800c906:	4a72      	ldr	r2, [pc, #456]	; (800cad0 <_scanf_i+0x1e8>)
 800c908:	2903      	cmp	r1, #3
 800c90a:	bf18      	it	ne
 800c90c:	461a      	movne	r2, r3
 800c90e:	68a3      	ldr	r3, [r4, #8]
 800c910:	9201      	str	r2, [sp, #4]
 800c912:	1e5a      	subs	r2, r3, #1
 800c914:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c918:	bf88      	it	hi
 800c91a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c91e:	4627      	mov	r7, r4
 800c920:	bf82      	ittt	hi
 800c922:	eb03 0905 	addhi.w	r9, r3, r5
 800c926:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c92a:	60a3      	strhi	r3, [r4, #8]
 800c92c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c930:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c934:	bf98      	it	ls
 800c936:	f04f 0900 	movls.w	r9, #0
 800c93a:	6023      	str	r3, [r4, #0]
 800c93c:	463d      	mov	r5, r7
 800c93e:	f04f 0b00 	mov.w	fp, #0
 800c942:	6831      	ldr	r1, [r6, #0]
 800c944:	ab03      	add	r3, sp, #12
 800c946:	7809      	ldrb	r1, [r1, #0]
 800c948:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c94c:	2202      	movs	r2, #2
 800c94e:	f7f3 fc57 	bl	8000200 <memchr>
 800c952:	b328      	cbz	r0, 800c9a0 <_scanf_i+0xb8>
 800c954:	f1bb 0f01 	cmp.w	fp, #1
 800c958:	d159      	bne.n	800ca0e <_scanf_i+0x126>
 800c95a:	6862      	ldr	r2, [r4, #4]
 800c95c:	b92a      	cbnz	r2, 800c96a <_scanf_i+0x82>
 800c95e:	6822      	ldr	r2, [r4, #0]
 800c960:	2308      	movs	r3, #8
 800c962:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c966:	6063      	str	r3, [r4, #4]
 800c968:	6022      	str	r2, [r4, #0]
 800c96a:	6822      	ldr	r2, [r4, #0]
 800c96c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c970:	6022      	str	r2, [r4, #0]
 800c972:	68a2      	ldr	r2, [r4, #8]
 800c974:	1e51      	subs	r1, r2, #1
 800c976:	60a1      	str	r1, [r4, #8]
 800c978:	b192      	cbz	r2, 800c9a0 <_scanf_i+0xb8>
 800c97a:	6832      	ldr	r2, [r6, #0]
 800c97c:	1c51      	adds	r1, r2, #1
 800c97e:	6031      	str	r1, [r6, #0]
 800c980:	7812      	ldrb	r2, [r2, #0]
 800c982:	f805 2b01 	strb.w	r2, [r5], #1
 800c986:	6872      	ldr	r2, [r6, #4]
 800c988:	3a01      	subs	r2, #1
 800c98a:	2a00      	cmp	r2, #0
 800c98c:	6072      	str	r2, [r6, #4]
 800c98e:	dc07      	bgt.n	800c9a0 <_scanf_i+0xb8>
 800c990:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c994:	4631      	mov	r1, r6
 800c996:	4650      	mov	r0, sl
 800c998:	4790      	blx	r2
 800c99a:	2800      	cmp	r0, #0
 800c99c:	f040 8085 	bne.w	800caaa <_scanf_i+0x1c2>
 800c9a0:	f10b 0b01 	add.w	fp, fp, #1
 800c9a4:	f1bb 0f03 	cmp.w	fp, #3
 800c9a8:	d1cb      	bne.n	800c942 <_scanf_i+0x5a>
 800c9aa:	6863      	ldr	r3, [r4, #4]
 800c9ac:	b90b      	cbnz	r3, 800c9b2 <_scanf_i+0xca>
 800c9ae:	230a      	movs	r3, #10
 800c9b0:	6063      	str	r3, [r4, #4]
 800c9b2:	6863      	ldr	r3, [r4, #4]
 800c9b4:	4947      	ldr	r1, [pc, #284]	; (800cad4 <_scanf_i+0x1ec>)
 800c9b6:	6960      	ldr	r0, [r4, #20]
 800c9b8:	1ac9      	subs	r1, r1, r3
 800c9ba:	f000 f89f 	bl	800cafc <__sccl>
 800c9be:	f04f 0b00 	mov.w	fp, #0
 800c9c2:	68a3      	ldr	r3, [r4, #8]
 800c9c4:	6822      	ldr	r2, [r4, #0]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d03d      	beq.n	800ca46 <_scanf_i+0x15e>
 800c9ca:	6831      	ldr	r1, [r6, #0]
 800c9cc:	6960      	ldr	r0, [r4, #20]
 800c9ce:	f891 c000 	ldrb.w	ip, [r1]
 800c9d2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c9d6:	2800      	cmp	r0, #0
 800c9d8:	d035      	beq.n	800ca46 <_scanf_i+0x15e>
 800c9da:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c9de:	d124      	bne.n	800ca2a <_scanf_i+0x142>
 800c9e0:	0510      	lsls	r0, r2, #20
 800c9e2:	d522      	bpl.n	800ca2a <_scanf_i+0x142>
 800c9e4:	f10b 0b01 	add.w	fp, fp, #1
 800c9e8:	f1b9 0f00 	cmp.w	r9, #0
 800c9ec:	d003      	beq.n	800c9f6 <_scanf_i+0x10e>
 800c9ee:	3301      	adds	r3, #1
 800c9f0:	f109 39ff 	add.w	r9, r9, #4294967295
 800c9f4:	60a3      	str	r3, [r4, #8]
 800c9f6:	6873      	ldr	r3, [r6, #4]
 800c9f8:	3b01      	subs	r3, #1
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	6073      	str	r3, [r6, #4]
 800c9fe:	dd1b      	ble.n	800ca38 <_scanf_i+0x150>
 800ca00:	6833      	ldr	r3, [r6, #0]
 800ca02:	3301      	adds	r3, #1
 800ca04:	6033      	str	r3, [r6, #0]
 800ca06:	68a3      	ldr	r3, [r4, #8]
 800ca08:	3b01      	subs	r3, #1
 800ca0a:	60a3      	str	r3, [r4, #8]
 800ca0c:	e7d9      	b.n	800c9c2 <_scanf_i+0xda>
 800ca0e:	f1bb 0f02 	cmp.w	fp, #2
 800ca12:	d1ae      	bne.n	800c972 <_scanf_i+0x8a>
 800ca14:	6822      	ldr	r2, [r4, #0]
 800ca16:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ca1a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ca1e:	d1bf      	bne.n	800c9a0 <_scanf_i+0xb8>
 800ca20:	2310      	movs	r3, #16
 800ca22:	6063      	str	r3, [r4, #4]
 800ca24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ca28:	e7a2      	b.n	800c970 <_scanf_i+0x88>
 800ca2a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ca2e:	6022      	str	r2, [r4, #0]
 800ca30:	780b      	ldrb	r3, [r1, #0]
 800ca32:	f805 3b01 	strb.w	r3, [r5], #1
 800ca36:	e7de      	b.n	800c9f6 <_scanf_i+0x10e>
 800ca38:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ca3c:	4631      	mov	r1, r6
 800ca3e:	4650      	mov	r0, sl
 800ca40:	4798      	blx	r3
 800ca42:	2800      	cmp	r0, #0
 800ca44:	d0df      	beq.n	800ca06 <_scanf_i+0x11e>
 800ca46:	6823      	ldr	r3, [r4, #0]
 800ca48:	05db      	lsls	r3, r3, #23
 800ca4a:	d50d      	bpl.n	800ca68 <_scanf_i+0x180>
 800ca4c:	42bd      	cmp	r5, r7
 800ca4e:	d909      	bls.n	800ca64 <_scanf_i+0x17c>
 800ca50:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ca54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ca58:	4632      	mov	r2, r6
 800ca5a:	4650      	mov	r0, sl
 800ca5c:	4798      	blx	r3
 800ca5e:	f105 39ff 	add.w	r9, r5, #4294967295
 800ca62:	464d      	mov	r5, r9
 800ca64:	42bd      	cmp	r5, r7
 800ca66:	d02d      	beq.n	800cac4 <_scanf_i+0x1dc>
 800ca68:	6822      	ldr	r2, [r4, #0]
 800ca6a:	f012 0210 	ands.w	r2, r2, #16
 800ca6e:	d113      	bne.n	800ca98 <_scanf_i+0x1b0>
 800ca70:	702a      	strb	r2, [r5, #0]
 800ca72:	6863      	ldr	r3, [r4, #4]
 800ca74:	9e01      	ldr	r6, [sp, #4]
 800ca76:	4639      	mov	r1, r7
 800ca78:	4650      	mov	r0, sl
 800ca7a:	47b0      	blx	r6
 800ca7c:	6821      	ldr	r1, [r4, #0]
 800ca7e:	f8d8 3000 	ldr.w	r3, [r8]
 800ca82:	f011 0f20 	tst.w	r1, #32
 800ca86:	d013      	beq.n	800cab0 <_scanf_i+0x1c8>
 800ca88:	1d1a      	adds	r2, r3, #4
 800ca8a:	f8c8 2000 	str.w	r2, [r8]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	6018      	str	r0, [r3, #0]
 800ca92:	68e3      	ldr	r3, [r4, #12]
 800ca94:	3301      	adds	r3, #1
 800ca96:	60e3      	str	r3, [r4, #12]
 800ca98:	1bed      	subs	r5, r5, r7
 800ca9a:	44ab      	add	fp, r5
 800ca9c:	6925      	ldr	r5, [r4, #16]
 800ca9e:	445d      	add	r5, fp
 800caa0:	6125      	str	r5, [r4, #16]
 800caa2:	2000      	movs	r0, #0
 800caa4:	b007      	add	sp, #28
 800caa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caaa:	f04f 0b00 	mov.w	fp, #0
 800caae:	e7ca      	b.n	800ca46 <_scanf_i+0x15e>
 800cab0:	1d1a      	adds	r2, r3, #4
 800cab2:	f8c8 2000 	str.w	r2, [r8]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f011 0f01 	tst.w	r1, #1
 800cabc:	bf14      	ite	ne
 800cabe:	8018      	strhne	r0, [r3, #0]
 800cac0:	6018      	streq	r0, [r3, #0]
 800cac2:	e7e6      	b.n	800ca92 <_scanf_i+0x1aa>
 800cac4:	2001      	movs	r0, #1
 800cac6:	e7ed      	b.n	800caa4 <_scanf_i+0x1bc>
 800cac8:	0800ceb0 	.word	0x0800ceb0
 800cacc:	0800cc51 	.word	0x0800cc51
 800cad0:	0800b7fd 	.word	0x0800b7fd
 800cad4:	0800d2ac 	.word	0x0800d2ac

0800cad8 <_read_r>:
 800cad8:	b538      	push	{r3, r4, r5, lr}
 800cada:	4d07      	ldr	r5, [pc, #28]	; (800caf8 <_read_r+0x20>)
 800cadc:	4604      	mov	r4, r0
 800cade:	4608      	mov	r0, r1
 800cae0:	4611      	mov	r1, r2
 800cae2:	2200      	movs	r2, #0
 800cae4:	602a      	str	r2, [r5, #0]
 800cae6:	461a      	mov	r2, r3
 800cae8:	f7f5 fd26 	bl	8002538 <_read>
 800caec:	1c43      	adds	r3, r0, #1
 800caee:	d102      	bne.n	800caf6 <_read_r+0x1e>
 800caf0:	682b      	ldr	r3, [r5, #0]
 800caf2:	b103      	cbz	r3, 800caf6 <_read_r+0x1e>
 800caf4:	6023      	str	r3, [r4, #0]
 800caf6:	bd38      	pop	{r3, r4, r5, pc}
 800caf8:	2000349c 	.word	0x2000349c

0800cafc <__sccl>:
 800cafc:	b570      	push	{r4, r5, r6, lr}
 800cafe:	780b      	ldrb	r3, [r1, #0]
 800cb00:	4604      	mov	r4, r0
 800cb02:	2b5e      	cmp	r3, #94	; 0x5e
 800cb04:	bf0b      	itete	eq
 800cb06:	784b      	ldrbeq	r3, [r1, #1]
 800cb08:	1c48      	addne	r0, r1, #1
 800cb0a:	1c88      	addeq	r0, r1, #2
 800cb0c:	2200      	movne	r2, #0
 800cb0e:	bf08      	it	eq
 800cb10:	2201      	moveq	r2, #1
 800cb12:	1e61      	subs	r1, r4, #1
 800cb14:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800cb18:	f801 2f01 	strb.w	r2, [r1, #1]!
 800cb1c:	42a9      	cmp	r1, r5
 800cb1e:	d1fb      	bne.n	800cb18 <__sccl+0x1c>
 800cb20:	b90b      	cbnz	r3, 800cb26 <__sccl+0x2a>
 800cb22:	3801      	subs	r0, #1
 800cb24:	bd70      	pop	{r4, r5, r6, pc}
 800cb26:	f082 0201 	eor.w	r2, r2, #1
 800cb2a:	54e2      	strb	r2, [r4, r3]
 800cb2c:	4605      	mov	r5, r0
 800cb2e:	4628      	mov	r0, r5
 800cb30:	f810 1b01 	ldrb.w	r1, [r0], #1
 800cb34:	292d      	cmp	r1, #45	; 0x2d
 800cb36:	d006      	beq.n	800cb46 <__sccl+0x4a>
 800cb38:	295d      	cmp	r1, #93	; 0x5d
 800cb3a:	d0f3      	beq.n	800cb24 <__sccl+0x28>
 800cb3c:	b909      	cbnz	r1, 800cb42 <__sccl+0x46>
 800cb3e:	4628      	mov	r0, r5
 800cb40:	e7f0      	b.n	800cb24 <__sccl+0x28>
 800cb42:	460b      	mov	r3, r1
 800cb44:	e7f1      	b.n	800cb2a <__sccl+0x2e>
 800cb46:	786e      	ldrb	r6, [r5, #1]
 800cb48:	2e5d      	cmp	r6, #93	; 0x5d
 800cb4a:	d0fa      	beq.n	800cb42 <__sccl+0x46>
 800cb4c:	42b3      	cmp	r3, r6
 800cb4e:	dcf8      	bgt.n	800cb42 <__sccl+0x46>
 800cb50:	3502      	adds	r5, #2
 800cb52:	4619      	mov	r1, r3
 800cb54:	3101      	adds	r1, #1
 800cb56:	428e      	cmp	r6, r1
 800cb58:	5462      	strb	r2, [r4, r1]
 800cb5a:	dcfb      	bgt.n	800cb54 <__sccl+0x58>
 800cb5c:	1af1      	subs	r1, r6, r3
 800cb5e:	3901      	subs	r1, #1
 800cb60:	1c58      	adds	r0, r3, #1
 800cb62:	42b3      	cmp	r3, r6
 800cb64:	bfa8      	it	ge
 800cb66:	2100      	movge	r1, #0
 800cb68:	1843      	adds	r3, r0, r1
 800cb6a:	e7e0      	b.n	800cb2e <__sccl+0x32>

0800cb6c <_strtoul_l.constprop.0>:
 800cb6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb70:	4f36      	ldr	r7, [pc, #216]	; (800cc4c <_strtoul_l.constprop.0+0xe0>)
 800cb72:	4686      	mov	lr, r0
 800cb74:	460d      	mov	r5, r1
 800cb76:	4628      	mov	r0, r5
 800cb78:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb7c:	5de6      	ldrb	r6, [r4, r7]
 800cb7e:	f016 0608 	ands.w	r6, r6, #8
 800cb82:	d1f8      	bne.n	800cb76 <_strtoul_l.constprop.0+0xa>
 800cb84:	2c2d      	cmp	r4, #45	; 0x2d
 800cb86:	d12f      	bne.n	800cbe8 <_strtoul_l.constprop.0+0x7c>
 800cb88:	782c      	ldrb	r4, [r5, #0]
 800cb8a:	2601      	movs	r6, #1
 800cb8c:	1c85      	adds	r5, r0, #2
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d057      	beq.n	800cc42 <_strtoul_l.constprop.0+0xd6>
 800cb92:	2b10      	cmp	r3, #16
 800cb94:	d109      	bne.n	800cbaa <_strtoul_l.constprop.0+0x3e>
 800cb96:	2c30      	cmp	r4, #48	; 0x30
 800cb98:	d107      	bne.n	800cbaa <_strtoul_l.constprop.0+0x3e>
 800cb9a:	7828      	ldrb	r0, [r5, #0]
 800cb9c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800cba0:	2858      	cmp	r0, #88	; 0x58
 800cba2:	d149      	bne.n	800cc38 <_strtoul_l.constprop.0+0xcc>
 800cba4:	786c      	ldrb	r4, [r5, #1]
 800cba6:	2310      	movs	r3, #16
 800cba8:	3502      	adds	r5, #2
 800cbaa:	f04f 38ff 	mov.w	r8, #4294967295
 800cbae:	2700      	movs	r7, #0
 800cbb0:	fbb8 f8f3 	udiv	r8, r8, r3
 800cbb4:	fb03 f908 	mul.w	r9, r3, r8
 800cbb8:	ea6f 0909 	mvn.w	r9, r9
 800cbbc:	4638      	mov	r0, r7
 800cbbe:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cbc2:	f1bc 0f09 	cmp.w	ip, #9
 800cbc6:	d814      	bhi.n	800cbf2 <_strtoul_l.constprop.0+0x86>
 800cbc8:	4664      	mov	r4, ip
 800cbca:	42a3      	cmp	r3, r4
 800cbcc:	dd22      	ble.n	800cc14 <_strtoul_l.constprop.0+0xa8>
 800cbce:	2f00      	cmp	r7, #0
 800cbd0:	db1d      	blt.n	800cc0e <_strtoul_l.constprop.0+0xa2>
 800cbd2:	4580      	cmp	r8, r0
 800cbd4:	d31b      	bcc.n	800cc0e <_strtoul_l.constprop.0+0xa2>
 800cbd6:	d101      	bne.n	800cbdc <_strtoul_l.constprop.0+0x70>
 800cbd8:	45a1      	cmp	r9, r4
 800cbda:	db18      	blt.n	800cc0e <_strtoul_l.constprop.0+0xa2>
 800cbdc:	fb00 4003 	mla	r0, r0, r3, r4
 800cbe0:	2701      	movs	r7, #1
 800cbe2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cbe6:	e7ea      	b.n	800cbbe <_strtoul_l.constprop.0+0x52>
 800cbe8:	2c2b      	cmp	r4, #43	; 0x2b
 800cbea:	bf04      	itt	eq
 800cbec:	782c      	ldrbeq	r4, [r5, #0]
 800cbee:	1c85      	addeq	r5, r0, #2
 800cbf0:	e7cd      	b.n	800cb8e <_strtoul_l.constprop.0+0x22>
 800cbf2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cbf6:	f1bc 0f19 	cmp.w	ip, #25
 800cbfa:	d801      	bhi.n	800cc00 <_strtoul_l.constprop.0+0x94>
 800cbfc:	3c37      	subs	r4, #55	; 0x37
 800cbfe:	e7e4      	b.n	800cbca <_strtoul_l.constprop.0+0x5e>
 800cc00:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cc04:	f1bc 0f19 	cmp.w	ip, #25
 800cc08:	d804      	bhi.n	800cc14 <_strtoul_l.constprop.0+0xa8>
 800cc0a:	3c57      	subs	r4, #87	; 0x57
 800cc0c:	e7dd      	b.n	800cbca <_strtoul_l.constprop.0+0x5e>
 800cc0e:	f04f 37ff 	mov.w	r7, #4294967295
 800cc12:	e7e6      	b.n	800cbe2 <_strtoul_l.constprop.0+0x76>
 800cc14:	2f00      	cmp	r7, #0
 800cc16:	da07      	bge.n	800cc28 <_strtoul_l.constprop.0+0xbc>
 800cc18:	2322      	movs	r3, #34	; 0x22
 800cc1a:	f8ce 3000 	str.w	r3, [lr]
 800cc1e:	f04f 30ff 	mov.w	r0, #4294967295
 800cc22:	b932      	cbnz	r2, 800cc32 <_strtoul_l.constprop.0+0xc6>
 800cc24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc28:	b106      	cbz	r6, 800cc2c <_strtoul_l.constprop.0+0xc0>
 800cc2a:	4240      	negs	r0, r0
 800cc2c:	2a00      	cmp	r2, #0
 800cc2e:	d0f9      	beq.n	800cc24 <_strtoul_l.constprop.0+0xb8>
 800cc30:	b107      	cbz	r7, 800cc34 <_strtoul_l.constprop.0+0xc8>
 800cc32:	1e69      	subs	r1, r5, #1
 800cc34:	6011      	str	r1, [r2, #0]
 800cc36:	e7f5      	b.n	800cc24 <_strtoul_l.constprop.0+0xb8>
 800cc38:	2430      	movs	r4, #48	; 0x30
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d1b5      	bne.n	800cbaa <_strtoul_l.constprop.0+0x3e>
 800cc3e:	2308      	movs	r3, #8
 800cc40:	e7b3      	b.n	800cbaa <_strtoul_l.constprop.0+0x3e>
 800cc42:	2c30      	cmp	r4, #48	; 0x30
 800cc44:	d0a9      	beq.n	800cb9a <_strtoul_l.constprop.0+0x2e>
 800cc46:	230a      	movs	r3, #10
 800cc48:	e7af      	b.n	800cbaa <_strtoul_l.constprop.0+0x3e>
 800cc4a:	bf00      	nop
 800cc4c:	0800d0fd 	.word	0x0800d0fd

0800cc50 <_strtoul_r>:
 800cc50:	f7ff bf8c 	b.w	800cb6c <_strtoul_l.constprop.0>

0800cc54 <__submore>:
 800cc54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc58:	460c      	mov	r4, r1
 800cc5a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cc5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc60:	4299      	cmp	r1, r3
 800cc62:	d11d      	bne.n	800cca0 <__submore+0x4c>
 800cc64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cc68:	f7fe fb1a 	bl	800b2a0 <_malloc_r>
 800cc6c:	b918      	cbnz	r0, 800cc76 <__submore+0x22>
 800cc6e:	f04f 30ff 	mov.w	r0, #4294967295
 800cc72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc7a:	63a3      	str	r3, [r4, #56]	; 0x38
 800cc7c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800cc80:	6360      	str	r0, [r4, #52]	; 0x34
 800cc82:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800cc86:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cc8a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800cc8e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cc92:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800cc96:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800cc9a:	6020      	str	r0, [r4, #0]
 800cc9c:	2000      	movs	r0, #0
 800cc9e:	e7e8      	b.n	800cc72 <__submore+0x1e>
 800cca0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800cca2:	0077      	lsls	r7, r6, #1
 800cca4:	463a      	mov	r2, r7
 800cca6:	f000 f831 	bl	800cd0c <_realloc_r>
 800ccaa:	4605      	mov	r5, r0
 800ccac:	2800      	cmp	r0, #0
 800ccae:	d0de      	beq.n	800cc6e <__submore+0x1a>
 800ccb0:	eb00 0806 	add.w	r8, r0, r6
 800ccb4:	4601      	mov	r1, r0
 800ccb6:	4632      	mov	r2, r6
 800ccb8:	4640      	mov	r0, r8
 800ccba:	f7fe fa6f 	bl	800b19c <memcpy>
 800ccbe:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ccc2:	f8c4 8000 	str.w	r8, [r4]
 800ccc6:	e7e9      	b.n	800cc9c <__submore+0x48>

0800ccc8 <_fstat_r>:
 800ccc8:	b538      	push	{r3, r4, r5, lr}
 800ccca:	4d07      	ldr	r5, [pc, #28]	; (800cce8 <_fstat_r+0x20>)
 800cccc:	2300      	movs	r3, #0
 800ccce:	4604      	mov	r4, r0
 800ccd0:	4608      	mov	r0, r1
 800ccd2:	4611      	mov	r1, r2
 800ccd4:	602b      	str	r3, [r5, #0]
 800ccd6:	f7f5 fc58 	bl	800258a <_fstat>
 800ccda:	1c43      	adds	r3, r0, #1
 800ccdc:	d102      	bne.n	800cce4 <_fstat_r+0x1c>
 800ccde:	682b      	ldr	r3, [r5, #0]
 800cce0:	b103      	cbz	r3, 800cce4 <_fstat_r+0x1c>
 800cce2:	6023      	str	r3, [r4, #0]
 800cce4:	bd38      	pop	{r3, r4, r5, pc}
 800cce6:	bf00      	nop
 800cce8:	2000349c 	.word	0x2000349c

0800ccec <_isatty_r>:
 800ccec:	b538      	push	{r3, r4, r5, lr}
 800ccee:	4d06      	ldr	r5, [pc, #24]	; (800cd08 <_isatty_r+0x1c>)
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	4604      	mov	r4, r0
 800ccf4:	4608      	mov	r0, r1
 800ccf6:	602b      	str	r3, [r5, #0]
 800ccf8:	f7f5 fc57 	bl	80025aa <_isatty>
 800ccfc:	1c43      	adds	r3, r0, #1
 800ccfe:	d102      	bne.n	800cd06 <_isatty_r+0x1a>
 800cd00:	682b      	ldr	r3, [r5, #0]
 800cd02:	b103      	cbz	r3, 800cd06 <_isatty_r+0x1a>
 800cd04:	6023      	str	r3, [r4, #0]
 800cd06:	bd38      	pop	{r3, r4, r5, pc}
 800cd08:	2000349c 	.word	0x2000349c

0800cd0c <_realloc_r>:
 800cd0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd10:	4680      	mov	r8, r0
 800cd12:	4614      	mov	r4, r2
 800cd14:	460e      	mov	r6, r1
 800cd16:	b921      	cbnz	r1, 800cd22 <_realloc_r+0x16>
 800cd18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd1c:	4611      	mov	r1, r2
 800cd1e:	f7fe babf 	b.w	800b2a0 <_malloc_r>
 800cd22:	b92a      	cbnz	r2, 800cd30 <_realloc_r+0x24>
 800cd24:	f7fe fa50 	bl	800b1c8 <_free_r>
 800cd28:	4625      	mov	r5, r4
 800cd2a:	4628      	mov	r0, r5
 800cd2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd30:	f000 f81b 	bl	800cd6a <_malloc_usable_size_r>
 800cd34:	4284      	cmp	r4, r0
 800cd36:	4607      	mov	r7, r0
 800cd38:	d802      	bhi.n	800cd40 <_realloc_r+0x34>
 800cd3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cd3e:	d812      	bhi.n	800cd66 <_realloc_r+0x5a>
 800cd40:	4621      	mov	r1, r4
 800cd42:	4640      	mov	r0, r8
 800cd44:	f7fe faac 	bl	800b2a0 <_malloc_r>
 800cd48:	4605      	mov	r5, r0
 800cd4a:	2800      	cmp	r0, #0
 800cd4c:	d0ed      	beq.n	800cd2a <_realloc_r+0x1e>
 800cd4e:	42bc      	cmp	r4, r7
 800cd50:	4622      	mov	r2, r4
 800cd52:	4631      	mov	r1, r6
 800cd54:	bf28      	it	cs
 800cd56:	463a      	movcs	r2, r7
 800cd58:	f7fe fa20 	bl	800b19c <memcpy>
 800cd5c:	4631      	mov	r1, r6
 800cd5e:	4640      	mov	r0, r8
 800cd60:	f7fe fa32 	bl	800b1c8 <_free_r>
 800cd64:	e7e1      	b.n	800cd2a <_realloc_r+0x1e>
 800cd66:	4635      	mov	r5, r6
 800cd68:	e7df      	b.n	800cd2a <_realloc_r+0x1e>

0800cd6a <_malloc_usable_size_r>:
 800cd6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd6e:	1f18      	subs	r0, r3, #4
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	bfbc      	itt	lt
 800cd74:	580b      	ldrlt	r3, [r1, r0]
 800cd76:	18c0      	addlt	r0, r0, r3
 800cd78:	4770      	bx	lr
	...

0800cd7c <_init>:
 800cd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd7e:	bf00      	nop
 800cd80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd82:	bc08      	pop	{r3}
 800cd84:	469e      	mov	lr, r3
 800cd86:	4770      	bx	lr

0800cd88 <_fini>:
 800cd88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd8a:	bf00      	nop
 800cd8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd8e:	bc08      	pop	{r3}
 800cd90:	469e      	mov	lr, r3
 800cd92:	4770      	bx	lr
