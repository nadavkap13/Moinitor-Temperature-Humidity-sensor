
Temperture_Monitoring_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee10  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000744  0800efa0  0800efa0  0001efa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f6e4  0800f6e4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f6e4  0800f6e4  0001f6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f6ec  0800f6ec  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f6ec  0800f6ec  0001f6ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800f6f4  0800f6f4  0001f6f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800f6fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003440  200001e8  0800f8e0  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003628  0800f8e0  00023628  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028cd1  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005703  00000000  00000000  00048ee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ed0  00000000  00000000  0004e5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cd8  00000000  00000000  000504b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007104  00000000  00000000  00052190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002459f  00000000  00000000  00059294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104918  00000000  00000000  0007d833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018214b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000975c  00000000  00000000  0018219c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ef88 	.word	0x0800ef88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800ef88 	.word	0x0800ef88

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <_ZN3CliD1Ev>:
#include "main.h"
class Cli{
public:
	virtual void doCommand(const char * param) = 0;

	virtual ~Cli(){}
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <_ZN3CliD1Ev+0x1c>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4618      	mov	r0, r3
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	0800f1a0 	.word	0x0800f1a0

08000eec <_ZN3CliD0Ev>:
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff ffe9 	bl	8000ecc <_ZN3CliD1Ev>
 8000efa:	2104      	movs	r1, #4
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f00a fccd 	bl	800b89c <_ZdlPvj>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <_ZN12CliContainer15RegisterCommandEPKcP3Cli>:
	clicommand_entry commands[20];
	int funcounter = 0;
public:
	CliContainer(){}
	~CliContainer(){}
	void RegisterCommand(const  char* CommandName, Cli * clicommand) {
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
		commands[funcounter].CommandName = CommandName;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	68b9      	ldr	r1, [r7, #8]
 8000f22:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
		commands[funcounter].command = clicommand;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000f2c:	68fa      	ldr	r2, [r7, #12]
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	4413      	add	r3, r2
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	605a      	str	r2, [r3, #4]
		funcounter++;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000f3c:	1c5a      	adds	r2, r3, #1
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	}
 8000f44:	bf00      	nop
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <_ZN3CliC1Ev>:
class Cli{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <_ZN3CliC1Ev+0x1c>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4618      	mov	r0, r3
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	0800f1a0 	.word	0x0800f1a0

08000f70 <_ZN5ledOnC1EP3LED>:
extern BUZZER buzzer;
class ledOn : public Cli{
private:
	LED * _led;
public:
	ledOn(LED * led){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ffe7 	bl	8000f50 <_ZN3CliC1Ev>
 8000f82:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <_ZN5ledOnC1EP3LED+0x28>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	601a      	str	r2, [r3, #0]
		_led = led;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
	}
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4618      	mov	r0, r3
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	0800f18c 	.word	0x0800f18c

08000f9c <_ZN5ledOn9doCommandEPKc>:
	void doCommand(const char * param) override{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
		_led->Led_On();
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 fcbe 	bl	800192c <_ZN3LED6Led_OnEv>
	}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <_ZN6ledOffC1EP3LED>:
};
class ledOff : public Cli{
private:
	LED * _led;
public:
	ledOff(LED * led){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ffc3 	bl	8000f50 <_ZN3CliC1Ev>
 8000fca:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <_ZN6ledOffC1EP3LED+0x28>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	601a      	str	r2, [r3, #0]
		_led = led;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	683a      	ldr	r2, [r7, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
	}
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	0800f178 	.word	0x0800f178

08000fe4 <_ZN6ledOff9doCommandEPKc>:
	void doCommand(const char * param) override{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
		_led->Led_Off();
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 fcaa 	bl	800194c <_ZN3LED7Led_OffEv>
	}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <_ZN8ledBlinkC1EP3LED>:
};
class ledBlink : public Cli{
private:
	LED * _led;
public:
	ledBlink(LED * led){
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ff9f 	bl	8000f50 <_ZN3CliC1Ev>
 8001012:	4a05      	ldr	r2, [pc, #20]	; (8001028 <_ZN8ledBlinkC1EP3LED+0x28>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	601a      	str	r2, [r3, #0]
		_led = led;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	683a      	ldr	r2, [r7, #0]
 800101c:	605a      	str	r2, [r3, #4]
	}
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	0800f164 	.word	0x0800f164

0800102c <_ZN8ledBlink9doCommandEPKc>:
	void doCommand(const char * param) override{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
		_led->Led_Blink();
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	4618      	mov	r0, r3
 800103c:	f000 fc96 	bl	800196c <_ZN3LED9Led_BlinkEv>
	}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <_ZN8rtcstartC1EP4_RTC>:

class rtcstart : public Cli{
private:
	_RTC * _rtc;
public:
	rtcstart(_RTC * rtc){
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff7b 	bl	8000f50 <_ZN3CliC1Ev>
 800105a:	4a05      	ldr	r2, [pc, #20]	; (8001070 <_ZN8rtcstartC1EP4_RTC+0x28>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	601a      	str	r2, [r3, #0]
		_rtc = rtc;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	605a      	str	r2, [r3, #4]
	}
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	0800f150 	.word	0x0800f150

08001074 <_ZN8rtcstart9doCommandEPKc>:
	void doCommand(const char * param) override{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]

		_rtc->rtcStart();
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	4618      	mov	r0, r3
 8001084:	f000 fca8 	bl	80019d8 <_ZN4_RTC8rtcStartEv>
	}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <_ZN10rtcgettimeC1EP4_RTC>:
};
class rtcgettime : public Cli{
private:
	_RTC * _rtc;
public:
	rtcgettime(_RTC * rtc){
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff57 	bl	8000f50 <_ZN3CliC1Ev>
 80010a2:	4a05      	ldr	r2, [pc, #20]	; (80010b8 <_ZN10rtcgettimeC1EP4_RTC+0x28>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	601a      	str	r2, [r3, #0]
		_rtc = rtc;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	683a      	ldr	r2, [r7, #0]
 80010ac:	605a      	str	r2, [r3, #4]
	}
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	0800f13c 	.word	0x0800f13c

080010bc <_ZN10rtcgettime9doCommandEPKc>:
	void doCommand(const char * param) override{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]

		_rtc->rtcGetTime();
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 fd2c 	bl	8001b28 <_ZN4_RTC10rtcGetTimeEv>

	}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <_ZN10rtcsettimeC1EP4_RTC>:
};
class rtcsettime : public Cli{
private:
	_RTC * _rtc;
public:
	rtcsettime(_RTC * rtc){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff33 	bl	8000f50 <_ZN3CliC1Ev>
 80010ea:	4a05      	ldr	r2, [pc, #20]	; (8001100 <_ZN10rtcsettimeC1EP4_RTC+0x28>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	601a      	str	r2, [r3, #0]
		_rtc = rtc;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	605a      	str	r2, [r3, #4]
	}
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	0800f128 	.word	0x0800f128

08001104 <_ZN10rtcsettime9doCommandEPKc>:
	void doCommand(const char * param) override{
 8001104:	b580      	push	{r7, lr}
 8001106:	b098      	sub	sp, #96	; 0x60
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]

		char * token;
		char s[3] = ":";
 800110e:	4b3b      	ldr	r3, [pc, #236]	; (80011fc <_ZN10rtcsettime9doCommandEPKc+0xf8>)
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8001116:	2300      	movs	r3, #0
 8001118:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
		char temp[50];
		strcpy(temp,param);
 800111c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001120:	6839      	ldr	r1, [r7, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f00b fae5 	bl	800c6f2 <strcpy>
		DateTime tempdate;

		token = strtok(temp, s);
 8001128:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800112c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001130:	4611      	mov	r1, r2
 8001132:	4618      	mov	r0, r3
 8001134:	f00b fae6 	bl	800c704 <strtok>
 8001138:	65f8      	str	r0, [r7, #92]	; 0x5c
		tempdate.hours = atoi(token);
 800113a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800113c:	f00a fbe7 	bl	800b90e <atoi>
 8001140:	4603      	mov	r3, r0
 8001142:	613b      	str	r3, [r7, #16]
		token = strtok(NULL, s);
 8001144:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001148:	4619      	mov	r1, r3
 800114a:	2000      	movs	r0, #0
 800114c:	f00b fada 	bl	800c704 <strtok>
 8001150:	65f8      	str	r0, [r7, #92]	; 0x5c

		tempdate.min = atoi(token);
 8001152:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001154:	f00a fbdb 	bl	800b90e <atoi>
 8001158:	4603      	mov	r3, r0
 800115a:	60fb      	str	r3, [r7, #12]
		token = strtok(NULL, s);
 800115c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001160:	4619      	mov	r1, r3
 8001162:	2000      	movs	r0, #0
 8001164:	f00b face 	bl	800c704 <strtok>
 8001168:	65f8      	str	r0, [r7, #92]	; 0x5c

		tempdate.sec = atoi(token);
 800116a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800116c:	f00a fbcf 	bl	800b90e <atoi>
 8001170:	4603      	mov	r3, r0
 8001172:	60bb      	str	r3, [r7, #8]
		token = strtok(NULL, s);
 8001174:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001178:	4619      	mov	r1, r3
 800117a:	2000      	movs	r0, #0
 800117c:	f00b fac2 	bl	800c704 <strtok>
 8001180:	65f8      	str	r0, [r7, #92]	; 0x5c

		tempdate.weekDay = atoi(token);
 8001182:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001184:	f00a fbc3 	bl	800b90e <atoi>
 8001188:	4603      	mov	r3, r0
 800118a:	617b      	str	r3, [r7, #20]
		token = strtok(NULL, s);
 800118c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001190:	4619      	mov	r1, r3
 8001192:	2000      	movs	r0, #0
 8001194:	f00b fab6 	bl	800c704 <strtok>
 8001198:	65f8      	str	r0, [r7, #92]	; 0x5c

		tempdate.day = atoi(token);
 800119a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800119c:	f00a fbb7 	bl	800b90e <atoi>
 80011a0:	4603      	mov	r3, r0
 80011a2:	61bb      	str	r3, [r7, #24]
		token = strtok(NULL, s);
 80011a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011a8:	4619      	mov	r1, r3
 80011aa:	2000      	movs	r0, #0
 80011ac:	f00b faaa 	bl	800c704 <strtok>
 80011b0:	65f8      	str	r0, [r7, #92]	; 0x5c

		tempdate.month = atoi(token);
 80011b2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80011b4:	f00a fbab 	bl	800b90e <atoi>
 80011b8:	4603      	mov	r3, r0
 80011ba:	61fb      	str	r3, [r7, #28]
		token = strtok(NULL, s);
 80011bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011c0:	4619      	mov	r1, r3
 80011c2:	2000      	movs	r0, #0
 80011c4:	f00b fa9e 	bl	800c704 <strtok>
 80011c8:	65f8      	str	r0, [r7, #92]	; 0x5c

		tempdate.year = atoi(token);
 80011ca:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80011cc:	f00a fb9f 	bl	800b90e <atoi>
 80011d0:	4603      	mov	r3, r0
 80011d2:	623b      	str	r3, [r7, #32]
		token = strtok(NULL, s);
 80011d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011d8:	4619      	mov	r1, r3
 80011da:	2000      	movs	r0, #0
 80011dc:	f00b fa92 	bl	800c704 <strtok>
 80011e0:	65f8      	str	r0, [r7, #92]	; 0x5c




		_rtc->rtcSetTime(&tempdate);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f107 0208 	add.w	r2, r7, #8
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f000 fd19 	bl	8001c24 <_ZN4_RTC10rtcSetTimeEP9DateTime_>
	}
 80011f2:	bf00      	nop
 80011f4:	3760      	adds	r7, #96	; 0x60
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	0800efa0 	.word	0x0800efa0

08001200 <_ZN7rtcstopC1EP4_RTC>:
};
class rtcstop : public Cli{
private:
	_RTC * _rtc;
public:
	rtcstop(_RTC * rtc){
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fe9f 	bl	8000f50 <_ZN3CliC1Ev>
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <_ZN7rtcstopC1EP4_RTC+0x28>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	601a      	str	r2, [r3, #0]
		_rtc = rtc;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	683a      	ldr	r2, [r7, #0]
 800121c:	605a      	str	r2, [r3, #4]
	}
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	0800f114 	.word	0x0800f114

0800122c <_ZN7rtcstop9doCommandEPKc>:
	void doCommand(const char * param) override{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]

		_rtc->rtcStop();
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	4618      	mov	r0, r3
 800123c:	f000 fbfb 	bl	8001a36 <_ZN4_RTC7rtcStopEv>
	}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <_ZN8buzzeronC1EP6BUZZER>:
};
class buzzeron : public Cli{
private:
	BUZZER * _buzzer;
public:
	buzzeron(BUZZER * buzzer){
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fe7b 	bl	8000f50 <_ZN3CliC1Ev>
 800125a:	4a05      	ldr	r2, [pc, #20]	; (8001270 <_ZN8buzzeronC1EP6BUZZER+0x28>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	601a      	str	r2, [r3, #0]
		_buzzer = buzzer;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	605a      	str	r2, [r3, #4]
	}
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	0800f100 	.word	0x0800f100

08001274 <_ZN8buzzeron9doCommandEPKc>:
	void doCommand(const char * param) override{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
		_buzzer->buzzerStartPlay();
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	4618      	mov	r0, r3
 8001284:	f001 f8fc 	bl	8002480 <_ZN6BUZZER15buzzerStartPlayEv>
	}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <_ZN9buzzeroffC1EP6BUZZER>:
};
class buzzeroff : public Cli{
private:
	BUZZER * _buzzer;
public:
	buzzeroff(BUZZER * buzzer){
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fe57 	bl	8000f50 <_ZN3CliC1Ev>
 80012a2:	4a05      	ldr	r2, [pc, #20]	; (80012b8 <_ZN9buzzeroffC1EP6BUZZER+0x28>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	601a      	str	r2, [r3, #0]
		_buzzer = buzzer;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	605a      	str	r2, [r3, #4]
	}
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	0800f0ec 	.word	0x0800f0ec

080012bc <_ZN9buzzeroff9doCommandEPKc>:
	void doCommand(const char * param) override{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
		_buzzer->buzzerStopPlay();
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f001 f8f0 	bl	80024b0 <_ZN6BUZZER14buzzerStopPlayEv>
	}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <_ZN12CliContainer16initCLIcontainerEv>:
	void doCommand(const char * param) override{
		int _param = atoi(param);
		_monitor->SetCriticalValue(_param);
	}
};
void CliContainer::initCLIcontainer(){
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	container.RegisterCommand("ledon",new ledOn(&ledblue));
 80012e0:	2008      	movs	r0, #8
 80012e2:	f00a fadd 	bl	800b8a0 <_Znwj>
 80012e6:	4603      	mov	r3, r0
 80012e8:	461c      	mov	r4, r3
 80012ea:	493e      	ldr	r1, [pc, #248]	; (80013e4 <_ZN12CliContainer16initCLIcontainerEv+0x10c>)
 80012ec:	4620      	mov	r0, r4
 80012ee:	f7ff fe3f 	bl	8000f70 <_ZN5ledOnC1EP3LED>
 80012f2:	4622      	mov	r2, r4
 80012f4:	493c      	ldr	r1, [pc, #240]	; (80013e8 <_ZN12CliContainer16initCLIcontainerEv+0x110>)
 80012f6:	483d      	ldr	r0, [pc, #244]	; (80013ec <_ZN12CliContainer16initCLIcontainerEv+0x114>)
 80012f8:	f7ff fe08 	bl	8000f0c <_ZN12CliContainer15RegisterCommandEPKcP3Cli>
	container.RegisterCommand("ledoff",new ledOff(&ledblue));
 80012fc:	2008      	movs	r0, #8
 80012fe:	f00a facf 	bl	800b8a0 <_Znwj>
 8001302:	4603      	mov	r3, r0
 8001304:	461c      	mov	r4, r3
 8001306:	4937      	ldr	r1, [pc, #220]	; (80013e4 <_ZN12CliContainer16initCLIcontainerEv+0x10c>)
 8001308:	4620      	mov	r0, r4
 800130a:	f7ff fe55 	bl	8000fb8 <_ZN6ledOffC1EP3LED>
 800130e:	4622      	mov	r2, r4
 8001310:	4937      	ldr	r1, [pc, #220]	; (80013f0 <_ZN12CliContainer16initCLIcontainerEv+0x118>)
 8001312:	4836      	ldr	r0, [pc, #216]	; (80013ec <_ZN12CliContainer16initCLIcontainerEv+0x114>)
 8001314:	f7ff fdfa 	bl	8000f0c <_ZN12CliContainer15RegisterCommandEPKcP3Cli>
	container.RegisterCommand("ledblink",new ledBlink(&ledblue));
 8001318:	2008      	movs	r0, #8
 800131a:	f00a fac1 	bl	800b8a0 <_Znwj>
 800131e:	4603      	mov	r3, r0
 8001320:	461c      	mov	r4, r3
 8001322:	4930      	ldr	r1, [pc, #192]	; (80013e4 <_ZN12CliContainer16initCLIcontainerEv+0x10c>)
 8001324:	4620      	mov	r0, r4
 8001326:	f7ff fe6b 	bl	8001000 <_ZN8ledBlinkC1EP3LED>
 800132a:	4622      	mov	r2, r4
 800132c:	4931      	ldr	r1, [pc, #196]	; (80013f4 <_ZN12CliContainer16initCLIcontainerEv+0x11c>)
 800132e:	482f      	ldr	r0, [pc, #188]	; (80013ec <_ZN12CliContainer16initCLIcontainerEv+0x114>)
 8001330:	f7ff fdec 	bl	8000f0c <_ZN12CliContainer15RegisterCommandEPKcP3Cli>
	container.RegisterCommand("settime",new rtcsettime(&rtc));
 8001334:	2008      	movs	r0, #8
 8001336:	f00a fab3 	bl	800b8a0 <_Znwj>
 800133a:	4603      	mov	r3, r0
 800133c:	461c      	mov	r4, r3
 800133e:	492e      	ldr	r1, [pc, #184]	; (80013f8 <_ZN12CliContainer16initCLIcontainerEv+0x120>)
 8001340:	4620      	mov	r0, r4
 8001342:	f7ff fec9 	bl	80010d8 <_ZN10rtcsettimeC1EP4_RTC>
 8001346:	4622      	mov	r2, r4
 8001348:	492c      	ldr	r1, [pc, #176]	; (80013fc <_ZN12CliContainer16initCLIcontainerEv+0x124>)
 800134a:	4828      	ldr	r0, [pc, #160]	; (80013ec <_ZN12CliContainer16initCLIcontainerEv+0x114>)
 800134c:	f7ff fdde 	bl	8000f0c <_ZN12CliContainer15RegisterCommandEPKcP3Cli>
	container.RegisterCommand("gettime",new rtcgettime(&rtc));
 8001350:	2008      	movs	r0, #8
 8001352:	f00a faa5 	bl	800b8a0 <_Znwj>
 8001356:	4603      	mov	r3, r0
 8001358:	461c      	mov	r4, r3
 800135a:	4927      	ldr	r1, [pc, #156]	; (80013f8 <_ZN12CliContainer16initCLIcontainerEv+0x120>)
 800135c:	4620      	mov	r0, r4
 800135e:	f7ff fe97 	bl	8001090 <_ZN10rtcgettimeC1EP4_RTC>
 8001362:	4622      	mov	r2, r4
 8001364:	4926      	ldr	r1, [pc, #152]	; (8001400 <_ZN12CliContainer16initCLIcontainerEv+0x128>)
 8001366:	4821      	ldr	r0, [pc, #132]	; (80013ec <_ZN12CliContainer16initCLIcontainerEv+0x114>)
 8001368:	f7ff fdd0 	bl	8000f0c <_ZN12CliContainer15RegisterCommandEPKcP3Cli>
	container.RegisterCommand("rtcstart",new rtcstart(&rtc));
 800136c:	2008      	movs	r0, #8
 800136e:	f00a fa97 	bl	800b8a0 <_Znwj>
 8001372:	4603      	mov	r3, r0
 8001374:	461c      	mov	r4, r3
 8001376:	4920      	ldr	r1, [pc, #128]	; (80013f8 <_ZN12CliContainer16initCLIcontainerEv+0x120>)
 8001378:	4620      	mov	r0, r4
 800137a:	f7ff fe65 	bl	8001048 <_ZN8rtcstartC1EP4_RTC>
 800137e:	4622      	mov	r2, r4
 8001380:	4920      	ldr	r1, [pc, #128]	; (8001404 <_ZN12CliContainer16initCLIcontainerEv+0x12c>)
 8001382:	481a      	ldr	r0, [pc, #104]	; (80013ec <_ZN12CliContainer16initCLIcontainerEv+0x114>)
 8001384:	f7ff fdc2 	bl	8000f0c <_ZN12CliContainer15RegisterCommandEPKcP3Cli>
	container.RegisterCommand("rtcstop",new rtcstop(&rtc));
 8001388:	2008      	movs	r0, #8
 800138a:	f00a fa89 	bl	800b8a0 <_Znwj>
 800138e:	4603      	mov	r3, r0
 8001390:	461c      	mov	r4, r3
 8001392:	4919      	ldr	r1, [pc, #100]	; (80013f8 <_ZN12CliContainer16initCLIcontainerEv+0x120>)
 8001394:	4620      	mov	r0, r4
 8001396:	f7ff ff33 	bl	8001200 <_ZN7rtcstopC1EP4_RTC>
 800139a:	4622      	mov	r2, r4
 800139c:	491a      	ldr	r1, [pc, #104]	; (8001408 <_ZN12CliContainer16initCLIcontainerEv+0x130>)
 800139e:	4813      	ldr	r0, [pc, #76]	; (80013ec <_ZN12CliContainer16initCLIcontainerEv+0x114>)
 80013a0:	f7ff fdb4 	bl	8000f0c <_ZN12CliContainer15RegisterCommandEPKcP3Cli>
	container.RegisterCommand("play",new buzzeron(&buzzer));
 80013a4:	2008      	movs	r0, #8
 80013a6:	f00a fa7b 	bl	800b8a0 <_Znwj>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461c      	mov	r4, r3
 80013ae:	4917      	ldr	r1, [pc, #92]	; (800140c <_ZN12CliContainer16initCLIcontainerEv+0x134>)
 80013b0:	4620      	mov	r0, r4
 80013b2:	f7ff ff49 	bl	8001248 <_ZN8buzzeronC1EP6BUZZER>
 80013b6:	4622      	mov	r2, r4
 80013b8:	4915      	ldr	r1, [pc, #84]	; (8001410 <_ZN12CliContainer16initCLIcontainerEv+0x138>)
 80013ba:	480c      	ldr	r0, [pc, #48]	; (80013ec <_ZN12CliContainer16initCLIcontainerEv+0x114>)
 80013bc:	f7ff fda6 	bl	8000f0c <_ZN12CliContainer15RegisterCommandEPKcP3Cli>
	container.RegisterCommand("stop",new buzzeroff(&buzzer));
 80013c0:	2008      	movs	r0, #8
 80013c2:	f00a fa6d 	bl	800b8a0 <_Znwj>
 80013c6:	4603      	mov	r3, r0
 80013c8:	461c      	mov	r4, r3
 80013ca:	4910      	ldr	r1, [pc, #64]	; (800140c <_ZN12CliContainer16initCLIcontainerEv+0x134>)
 80013cc:	4620      	mov	r0, r4
 80013ce:	f7ff ff5f 	bl	8001290 <_ZN9buzzeroffC1EP6BUZZER>
 80013d2:	4622      	mov	r2, r4
 80013d4:	490f      	ldr	r1, [pc, #60]	; (8001414 <_ZN12CliContainer16initCLIcontainerEv+0x13c>)
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <_ZN12CliContainer16initCLIcontainerEv+0x114>)
 80013d8:	f7ff fd98 	bl	8000f0c <_ZN12CliContainer15RegisterCommandEPKcP3Cli>
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd90      	pop	{r4, r7, pc}
 80013e4:	20000518 	.word	0x20000518
 80013e8:	0800efa4 	.word	0x0800efa4
 80013ec:	20000474 	.word	0x20000474
 80013f0:	0800efac 	.word	0x0800efac
 80013f4:	0800efb4 	.word	0x0800efb4
 80013f8:	20000468 	.word	0x20000468
 80013fc:	0800efc0 	.word	0x0800efc0
 8001400:	0800efc8 	.word	0x0800efc8
 8001404:	0800efd0 	.word	0x0800efd0
 8001408:	0800efdc 	.word	0x0800efdc
 800140c:	2000052c 	.word	0x2000052c
 8001410:	0800efe4 	.word	0x0800efe4
 8001414:	0800efec 	.word	0x0800efec

08001418 <_ZN9buzzeroffD1Ev>:
class buzzeroff : public Cli{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	4a05      	ldr	r2, [pc, #20]	; (8001438 <_ZN9buzzeroffD1Ev+0x20>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fd4f 	bl	8000ecc <_ZN3CliD1Ev>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	0800f0ec 	.word	0x0800f0ec

0800143c <_ZN9buzzeroffD0Ev>:
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ffe7 	bl	8001418 <_ZN9buzzeroffD1Ev>
 800144a:	2108      	movs	r1, #8
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f00a fa25 	bl	800b89c <_ZdlPvj>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <_ZN8buzzeronD1Ev>:
class buzzeron : public Cli{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	4a05      	ldr	r2, [pc, #20]	; (800147c <_ZN8buzzeronD1Ev+0x20>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fd2d 	bl	8000ecc <_ZN3CliD1Ev>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4618      	mov	r0, r3
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	0800f100 	.word	0x0800f100

08001480 <_ZN8buzzeronD0Ev>:
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff ffe7 	bl	800145c <_ZN8buzzeronD1Ev>
 800148e:	2108      	movs	r1, #8
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f00a fa03 	bl	800b89c <_ZdlPvj>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <_ZN7rtcstopD1Ev>:
class rtcstop : public Cli{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <_ZN7rtcstopD1Ev+0x20>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fd0b 	bl	8000ecc <_ZN3CliD1Ev>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	0800f114 	.word	0x0800f114

080014c4 <_ZN7rtcstopD0Ev>:
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff ffe7 	bl	80014a0 <_ZN7rtcstopD1Ev>
 80014d2:	2108      	movs	r1, #8
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f00a f9e1 	bl	800b89c <_ZdlPvj>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4618      	mov	r0, r3
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <_ZN10rtcsettimeD1Ev>:
class rtcsettime : public Cli{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	4a05      	ldr	r2, [pc, #20]	; (8001504 <_ZN10rtcsettimeD1Ev+0x20>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fce9 	bl	8000ecc <_ZN3CliD1Ev>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4618      	mov	r0, r3
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	0800f128 	.word	0x0800f128

08001508 <_ZN10rtcsettimeD0Ev>:
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff ffe7 	bl	80014e4 <_ZN10rtcsettimeD1Ev>
 8001516:	2108      	movs	r1, #8
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f00a f9bf 	bl	800b89c <_ZdlPvj>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4618      	mov	r0, r3
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <_ZN10rtcgettimeD1Ev>:
class rtcgettime : public Cli{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	4a05      	ldr	r2, [pc, #20]	; (8001548 <_ZN10rtcgettimeD1Ev+0x20>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fcc7 	bl	8000ecc <_ZN3CliD1Ev>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	0800f13c 	.word	0x0800f13c

0800154c <_ZN10rtcgettimeD0Ev>:
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff ffe7 	bl	8001528 <_ZN10rtcgettimeD1Ev>
 800155a:	2108      	movs	r1, #8
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f00a f99d 	bl	800b89c <_ZdlPvj>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <_ZN8rtcstartD1Ev>:
class rtcstart : public Cli{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	4a05      	ldr	r2, [pc, #20]	; (800158c <_ZN8rtcstartD1Ev+0x20>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fca5 	bl	8000ecc <_ZN3CliD1Ev>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	0800f150 	.word	0x0800f150

08001590 <_ZN8rtcstartD0Ev>:
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff ffe7 	bl	800156c <_ZN8rtcstartD1Ev>
 800159e:	2108      	movs	r1, #8
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f00a f97b 	bl	800b89c <_ZdlPvj>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4618      	mov	r0, r3
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <_ZN8ledBlinkD1Ev>:
class ledBlink : public Cli{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	4a05      	ldr	r2, [pc, #20]	; (80015d0 <_ZN8ledBlinkD1Ev+0x20>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fc83 	bl	8000ecc <_ZN3CliD1Ev>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	0800f164 	.word	0x0800f164

080015d4 <_ZN8ledBlinkD0Ev>:
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff ffe7 	bl	80015b0 <_ZN8ledBlinkD1Ev>
 80015e2:	2108      	movs	r1, #8
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f00a f959 	bl	800b89c <_ZdlPvj>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <_ZN6ledOffD1Ev>:
class ledOff : public Cli{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	4a05      	ldr	r2, [pc, #20]	; (8001614 <_ZN6ledOffD1Ev+0x20>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fc61 	bl	8000ecc <_ZN3CliD1Ev>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	0800f178 	.word	0x0800f178

08001618 <_ZN6ledOffD0Ev>:
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ffe7 	bl	80015f4 <_ZN6ledOffD1Ev>
 8001626:	2108      	movs	r1, #8
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f00a f937 	bl	800b89c <_ZdlPvj>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <_ZN5ledOnD1Ev>:
class ledOn : public Cli{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	4a05      	ldr	r2, [pc, #20]	; (8001658 <_ZN5ledOnD1Ev+0x20>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff fc3f 	bl	8000ecc <_ZN3CliD1Ev>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4618      	mov	r0, r3
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	0800f18c 	.word	0x0800f18c

0800165c <_ZN5ledOnD0Ev>:
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff ffe7 	bl	8001638 <_ZN5ledOnD1Ev>
 800166a:	2108      	movs	r1, #8
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f00a f915 	bl	800b89c <_ZdlPvj>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4618      	mov	r0, r3
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <_ZN3DHTC1EP12GPIO_TypeDeft>:

GPIO_InitTypeDef gpioStruct;
static uint8_t DHT_data[5];
extern TIM_HandleTypeDef htim1;

DHT::DHT(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	4613      	mov	r3, r2
 8001688:	80fb      	strh	r3, [r7, #6]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2200      	movs	r2, #0
 800168e:	615a      	str	r2, [r3, #20]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2200      	movs	r2, #0
 8001694:	761a      	strb	r2, [r3, #24]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2200      	movs	r2, #0
 800169a:	765a      	strb	r2, [r3, #25]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2200      	movs	r2, #0
 80016a0:	769a      	strb	r2, [r3, #26]
	_GPIOx = GPIOx;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	601a      	str	r2, [r3, #0]
	_GPIO_Pin = GPIO_Pin;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	88fa      	ldrh	r2, [r7, #6]
 80016ac:	809a      	strh	r2, [r3, #4]
	dhtPin = WAKING;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	719a      	strb	r2, [r3, #6]
	bitcount=0;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2200      	movs	r2, #0
 80016b8:	611a      	str	r2, [r3, #16]

}
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	4618      	mov	r0, r3
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <_ZN3DHT11setGpioExtiEv>:

 void DHT::setGpioExti()
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpioStruct = {0};
 80016d0:	f107 030c 	add.w	r3, r7, #12
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
	gpioStruct.Pin = _GPIO_Pin;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	889b      	ldrh	r3, [r3, #4]
 80016e4:	60fb      	str	r3, [r7, #12]
	gpioStruct.Mode = GPIO_MODE_IT_FALLING;
 80016e6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80016ea:	613b      	str	r3, [r7, #16]
	gpioStruct.Pull = GPIO_PULLUP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(_GPIOx, &gpioStruct);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f107 020c 	add.w	r2, r7, #12
 80016f8:	4611      	mov	r1, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f001 fd84 	bl	8003208 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001700:	2017      	movs	r0, #23
 8001702:	f001 fcf3 	bl	80030ec <HAL_NVIC_EnableIRQ>
}
 8001706:	bf00      	nop
 8001708:	3720      	adds	r7, #32
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <_ZN3DHT13Dht_readAsyncEv>:

void DHT::Dht_readAsync()
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpioStruct;
	gpioStruct.Pin = pin_4_Pin;
 8001718:	2320      	movs	r3, #32
 800171a:	60fb      	str	r3, [r7, #12]
	gpioStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171c:	2301      	movs	r3, #1
 800171e:	613b      	str	r3, [r7, #16]
	gpioStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]
	gpioStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(pin_4_GPIO_Port, &gpioStruct);
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	4619      	mov	r1, r3
 800172e:	480b      	ldr	r0, [pc, #44]	; (800175c <_ZN3DHT13Dht_readAsyncEv+0x4c>)
 8001730:	f001 fd6a 	bl	8003208 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(pin_4_GPIO_Port, pin_4_Pin,GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	2120      	movs	r1, #32
 8001738:	4808      	ldr	r0, [pc, #32]	; (800175c <_ZN3DHT13Dht_readAsyncEv+0x4c>)
 800173a:	f001 ff27 	bl	800358c <HAL_GPIO_WritePin>
	HAL_Delay(18);
 800173e:	2012      	movs	r0, #18
 8001740:	f001 fbdc 	bl	8002efc <HAL_Delay>
	HAL_GPIO_WritePin(pin_4_GPIO_Port, pin_4_Pin,GPIO_PIN_SET);
 8001744:	2201      	movs	r2, #1
 8001746:	2120      	movs	r1, #32
 8001748:	4804      	ldr	r0, [pc, #16]	; (800175c <_ZN3DHT13Dht_readAsyncEv+0x4c>)
 800174a:	f001 ff1f 	bl	800358c <HAL_GPIO_WritePin>
	setGpioExti();
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff ffba 	bl	80016c8 <_ZN3DHT11setGpioExtiEv>

}
 8001754:	bf00      	nop
 8001756:	3720      	adds	r7, #32
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	48000400 	.word	0x48000400

08001760 <_ZN3DHT19Dht_onGpioInterruptEt>:

void DHT::Dht_onGpioInterrupt(uint16_t pin)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	807b      	strh	r3, [r7, #2]
	uint32_t counter;
	if(_GPIO_Pin==pin){
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	889b      	ldrh	r3, [r3, #4]
 8001770:	887a      	ldrh	r2, [r7, #2]
 8001772:	429a      	cmp	r2, r3
 8001774:	f040 8086 	bne.w	8001884 <_ZN3DHT19Dht_onGpioInterruptEt+0x124>
		switch (dhtPin){
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	799b      	ldrb	r3, [r3, #6]
 800177c:	2b04      	cmp	r3, #4
 800177e:	d87d      	bhi.n	800187c <_ZN3DHT19Dht_onGpioInterruptEt+0x11c>
 8001780:	a201      	add	r2, pc, #4	; (adr r2, 8001788 <_ZN3DHT19Dht_onGpioInterruptEt+0x28>)
 8001782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001786:	bf00      	nop
 8001788:	0800179d 	.word	0x0800179d
 800178c:	080017a5 	.word	0x080017a5
 8001790:	080017ad 	.word	0x080017ad
 8001794:	080017bd 	.word	0x080017bd
 8001798:	08001875 	.word	0x08001875
		case WAKING:
			dhtPin=WAIT_RESPONSE_START;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	719a      	strb	r2, [r3, #6]
			break;
 80017a2:	e06b      	b.n	800187c <_ZN3DHT19Dht_onGpioInterruptEt+0x11c>
		case WAIT_RESPONSE_START:
			dhtPin=WAIT_RESPONSE_STOP;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2202      	movs	r2, #2
 80017a8:	719a      	strb	r2, [r3, #6]
			break;
 80017aa:	e067      	b.n	800187c <_ZN3DHT19Dht_onGpioInterruptEt+0x11c>
		case WAIT_RESPONSE_STOP:
			counter = __HAL_TIM_GET_COUNTER(&htim1);
 80017ac:	4b38      	ldr	r3, [pc, #224]	; (8001890 <_ZN3DHT19Dht_onGpioInterruptEt+0x130>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b2:	60fb      	str	r3, [r7, #12]
			dhtPin=RECEIVING_BITS;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2203      	movs	r2, #3
 80017b8:	719a      	strb	r2, [r3, #6]
			break;
 80017ba:	e05f      	b.n	800187c <_ZN3DHT19Dht_onGpioInterruptEt+0x11c>
		case RECEIVING_BITS:
			counter = __HAL_TIM_GET_COUNTER(&htim1);
 80017bc:	4b34      	ldr	r3, [pc, #208]	; (8001890 <_ZN3DHT19Dht_onGpioInterruptEt+0x130>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c2:	60fb      	str	r3, [r7, #12]
			if(counter<=100)  {
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2b64      	cmp	r3, #100	; 0x64
 80017c8:	d812      	bhi.n	80017f0 <_ZN3DHT19Dht_onGpioInterruptEt+0x90>
				dht_byte&= ~(1<<(7-p));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	7e1b      	ldrb	r3, [r3, #24]
 80017ce:	b25a      	sxtb	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	7e9b      	ldrb	r3, [r3, #26]
 80017d4:	f1c3 0307 	rsb	r3, r3, #7
 80017d8:	2101      	movs	r1, #1
 80017da:	fa01 f303 	lsl.w	r3, r1, r3
 80017de:	b25b      	sxtb	r3, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	b25b      	sxtb	r3, r3
 80017e4:	4013      	ands	r3, r2
 80017e6:	b25b      	sxtb	r3, r3
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	761a      	strb	r2, [r3, #24]
 80017ee:	e00f      	b.n	8001810 <_ZN3DHT19Dht_onGpioInterruptEt+0xb0>
			}
			else {
				dht_byte|= (1<<(7-p));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	7e1b      	ldrb	r3, [r3, #24]
 80017f4:	b25a      	sxtb	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	7e9b      	ldrb	r3, [r3, #26]
 80017fa:	f1c3 0307 	rsb	r3, r3, #7
 80017fe:	2101      	movs	r1, #1
 8001800:	fa01 f303 	lsl.w	r3, r1, r3
 8001804:	b25b      	sxtb	r3, r3
 8001806:	4313      	orrs	r3, r2
 8001808:	b25b      	sxtb	r3, r3
 800180a:	b2da      	uxtb	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	761a      	strb	r2, [r3, #24]
			}

			p++;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	7e9b      	ldrb	r3, [r3, #26]
 8001814:	3301      	adds	r3, #1
 8001816:	b2da      	uxtb	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	769a      	strb	r2, [r3, #26]
			bitcount++;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	1c5a      	adds	r2, r3, #1
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	611a      	str	r2, [r3, #16]

			if(bitcount%8==0){
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	2b00      	cmp	r3, #0
 8001830:	d112      	bne.n	8001858 <_ZN3DHT19Dht_onGpioInterruptEt+0xf8>
				DHT_data[m]=dht_byte;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	7e5b      	ldrb	r3, [r3, #25]
 8001836:	461a      	mov	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	7e19      	ldrb	r1, [r3, #24]
 800183c:	4b15      	ldr	r3, [pc, #84]	; (8001894 <_ZN3DHT19Dht_onGpioInterruptEt+0x134>)
 800183e:	5499      	strb	r1, [r3, r2]
				dht_byte=0;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	761a      	strb	r2, [r3, #24]
				m++;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	7e5b      	ldrb	r3, [r3, #25]
 800184a:	3301      	adds	r3, #1
 800184c:	b2da      	uxtb	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	765a      	strb	r2, [r3, #25]
				p=0;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	769a      	strb	r2, [r3, #26]
			}

			if(bitcount>=40){
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	2b27      	cmp	r3, #39	; 0x27
 800185e:	dd0c      	ble.n	800187a <_ZN3DHT19Dht_onGpioInterruptEt+0x11a>
				bitcount=0;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	611a      	str	r2, [r3, #16]
				m=0;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	765a      	strb	r2, [r3, #25]

			dhtPin=DATA_RECEIVED;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2204      	movs	r2, #4
 8001870:	719a      	strb	r2, [r3, #6]
			}
			break;
 8001872:	e002      	b.n	800187a <_ZN3DHT19Dht_onGpioInterruptEt+0x11a>
		case DATA_RECEIVED:
			counter = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	60fb      	str	r3, [r7, #12]
			break;
 8001878:	e000      	b.n	800187c <_ZN3DHT19Dht_onGpioInterruptEt+0x11c>
			break;
 800187a:	bf00      	nop
		}
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 800187c:	4b04      	ldr	r3, [pc, #16]	; (8001890 <_ZN3DHT19Dht_onGpioInterruptEt+0x130>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2200      	movs	r2, #0
 8001882:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	200002cc 	.word	0x200002cc
 8001894:	20000204 	.word	0x20000204

08001898 <_ZN3DHT11Dht_hasDataEv>:

int DHT::Dht_hasData(){
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	if (dhtPin==DATA_RECEIVED){
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	799b      	ldrb	r3, [r3, #6]
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	d10e      	bne.n	80018c6 <_ZN3DHT11Dht_hasDataEv+0x2e>
		Temperature = (double)DHT_data[2];
 80018a8:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <_ZN3DHT11Dht_hasDataEv+0x38>)
 80018aa:	789b      	ldrb	r3, [r3, #2]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fe39 	bl	8000524 <__aeabi_ui2d>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
		dhtPin=WAKING;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	719a      	strb	r2, [r3, #6]
		return 1;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <_ZN3DHT11Dht_hasDataEv+0x30>
	}
	return 0;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000204 	.word	0x20000204

080018d4 <_ZN3DHT15get_temperatureEv>:
double DHT::get_temperature()
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
	return Temperature;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018e2:	ec43 2b17 	vmov	d7, r2, r3
}
 80018e6:	eeb0 0a47 	vmov.f32	s0, s14
 80018ea:	eef0 0a67 	vmov.f32	s1, s15
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <_ZN3LEDC1EP12GPIO_TypeDeft>:
#include <stdio.h>
#include "mymain.h"
#include "main.h"
#include "LED.h"

LED::LED(GPIO_TypeDef* GPIOx,uint16_t GPIO_Pin):
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	4613      	mov	r3, r2
 8001904:	80fb      	strh	r3, [r7, #6]
		GPIOx(GPIOx),GPIO_Pin(GPIO_Pin)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	88fa      	ldrh	r2, [r7, #6]
 8001910:	809a      	strh	r2, [r3, #4]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2232      	movs	r2, #50	; 0x32
 800191c:	60da      	str	r2, [r3, #12]
{
}
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4618      	mov	r0, r3
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <_ZN3LED6Led_OnEv>:

void LED::Led_On()
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6818      	ldr	r0, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	889b      	ldrh	r3, [r3, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	4619      	mov	r1, r3
 8001940:	f001 fe24 	bl	800358c <HAL_GPIO_WritePin>

}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <_ZN3LED7Led_OffEv>:
void LED::Led_Off()
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6818      	ldr	r0, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	889b      	ldrh	r3, [r3, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	4619      	mov	r1, r3
 8001960:	f001 fe14 	bl	800358c <HAL_GPIO_WritePin>

}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <_ZN3LED9Led_BlinkEv>:
void LED::LED_delay(int num){
	delay = num;
}
void LED::Led_Blink()
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	889b      	ldrh	r3, [r3, #4]
 800197c:	4619      	mov	r1, r3
 800197e:	4610      	mov	r0, r2
 8001980:	f001 fe1c 	bl	80035bc <HAL_GPIO_TogglePin>
	osDelay(delay);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	4618      	mov	r0, r3
 800198a:	f006 fdd3 	bl	8008534 <osDelay>

}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <_ZN3LED8Is_blinkEv>:
void LED::Is_blink()
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
	STATE = LED_STATE_BLINK;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2202      	movs	r2, #2
 80019a2:	741a      	strb	r2, [r3, #16]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <_ZN4_RTCC1EP19__I2C_HandleTypeDefm>:
		304,
		334,
		365
};

_RTC::_RTC(I2C_HandleTypeDef * hi2c, uint32_t devAddr)
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
{
  _hi2c = hi2c;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	601a      	str	r2, [r3, #0]
  _devAddr = devAddr;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	711a      	strb	r2, [r3, #4]
}
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4618      	mov	r0, r3
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <_ZN4_RTC8rtcStartEv>:

void _RTC::rtcStart()
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b088      	sub	sp, #32
 80019dc:	af04      	add	r7, sp, #16
 80019de:	6078      	str	r0, [r7, #4]
	uint8_t sec = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(_hi2c, _devAddr, 0, 1, &sec, 1, 0xFF);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6818      	ldr	r0, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	791b      	ldrb	r3, [r3, #4]
 80019ec:	b299      	uxth	r1, r3
 80019ee:	23ff      	movs	r3, #255	; 0xff
 80019f0:	9302      	str	r3, [sp, #8]
 80019f2:	2301      	movs	r3, #1
 80019f4:	9301      	str	r3, [sp, #4]
 80019f6:	f107 030f 	add.w	r3, r7, #15
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	2301      	movs	r3, #1
 80019fe:	2200      	movs	r2, #0
 8001a00:	f001 ffb2 	bl	8003968 <HAL_I2C_Mem_Read>
	sec &= ~RTC_START_STOP;
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(_hi2c, _devAddr, 0, 1, &sec, 1, 0xFF);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6818      	ldr	r0, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	791b      	ldrb	r3, [r3, #4]
 8001a16:	b299      	uxth	r1, r3
 8001a18:	23ff      	movs	r3, #255	; 0xff
 8001a1a:	9302      	str	r3, [sp, #8]
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	9301      	str	r3, [sp, #4]
 8001a20:	f107 030f 	add.w	r3, r7, #15
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	2301      	movs	r3, #1
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f001 fe89 	bl	8003740 <HAL_I2C_Mem_Write>
}
 8001a2e:	bf00      	nop
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <_ZN4_RTC7rtcStopEv>:

void _RTC::rtcStop()
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b088      	sub	sp, #32
 8001a3a:	af04      	add	r7, sp, #16
 8001a3c:	6078      	str	r0, [r7, #4]
	uint8_t sec = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(_hi2c,_devAddr, 0, 1, &sec, 1, 0xFF);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6818      	ldr	r0, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	791b      	ldrb	r3, [r3, #4]
 8001a4a:	b299      	uxth	r1, r3
 8001a4c:	23ff      	movs	r3, #255	; 0xff
 8001a4e:	9302      	str	r3, [sp, #8]
 8001a50:	2301      	movs	r3, #1
 8001a52:	9301      	str	r3, [sp, #4]
 8001a54:	f107 030f 	add.w	r3, r7, #15
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f001 ff83 	bl	8003968 <HAL_I2C_Mem_Read>
	sec |= RTC_START_STOP;
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(_hi2c, _devAddr, 0, 1, &sec, 1, 0xFF);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6818      	ldr	r0, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	791b      	ldrb	r3, [r3, #4]
 8001a74:	b299      	uxth	r1, r3
 8001a76:	23ff      	movs	r3, #255	; 0xff
 8001a78:	9302      	str	r3, [sp, #8]
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	9301      	str	r3, [sp, #4]
 8001a7e:	f107 030f 	add.w	r3, r7, #15
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	2301      	movs	r3, #1
 8001a86:	2200      	movs	r2, #0
 8001a88:	f001 fe5a 	bl	8003740 <HAL_I2C_Mem_Write>
}
 8001a8c:	bf00      	nop
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <_ZL8bcdToInth>:
	HAL_I2C_Mem_Read(_hi2c, _devAddr, 0, 1, &sec, 1, 0xFF);
	return (sec & RTC_START_STOP) == 0;
}

static int bcdToInt(uint8_t bcd)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
	return (bcd >> 4) * 10 + (bcd & 0x0F);
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	091b      	lsrs	r3, r3, #4
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	461a      	mov	r2, r3
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	4413      	add	r3, r2
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <_ZL8intToBcdiii>:

static uint8_t intToBcd(int value, int minVal, int maxVal)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
	if (value < minVal || value > maxVal) {
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	db03      	blt.n	8001ae0 <_ZL8intToBcdiii+0x1c>
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	dd01      	ble.n	8001ae4 <_ZL8intToBcdiii+0x20>
		return 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	e018      	b.n	8001b16 <_ZL8intToBcdiii+0x52>
	}

	return ((value / 10) << 4) | (value % 10);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4a0f      	ldr	r2, [pc, #60]	; (8001b24 <_ZL8intToBcdiii+0x60>)
 8001ae8:	fb82 1203 	smull	r1, r2, r2, r3
 8001aec:	1092      	asrs	r2, r2, #2
 8001aee:	17db      	asrs	r3, r3, #31
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	011b      	lsls	r3, r3, #4
 8001af4:	b258      	sxtb	r0, r3
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <_ZL8intToBcdiii+0x60>)
 8001afa:	fb83 1302 	smull	r1, r3, r3, r2
 8001afe:	1099      	asrs	r1, r3, #2
 8001b00:	17d3      	asrs	r3, r2, #31
 8001b02:	1ac9      	subs	r1, r1, r3
 8001b04:	460b      	mov	r3, r1
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	1ad1      	subs	r1, r2, r3
 8001b0e:	b24b      	sxtb	r3, r1
 8001b10:	4303      	orrs	r3, r0
 8001b12:	b25b      	sxtb	r3, r3
 8001b14:	b2db      	uxtb	r3, r3
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	66666667 	.word	0x66666667

08001b28 <_ZN4_RTC10rtcGetTimeEv>:

void _RTC::rtcGetTime()
{
 8001b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b2a:	b08b      	sub	sp, #44	; 0x2c
 8001b2c:	af04      	add	r7, sp, #16
 8001b2e:	6078      	str	r0, [r7, #4]
	uint8_t buffer[RTC_DATE_TIME_SIZE];
	DateTime * mytime = new DateTime;
 8001b30:	201c      	movs	r0, #28
 8001b32:	f009 feb5 	bl	800b8a0 <_Znwj>
 8001b36:	4603      	mov	r3, r0
 8001b38:	617b      	str	r3, [r7, #20]
	if(HAL_I2C_Mem_Read(_hi2c, _devAddr, 0, 1, buffer, RTC_DATE_TIME_SIZE, 0xFF) == HAL_OK){
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	791b      	ldrb	r3, [r3, #4]
 8001b42:	b299      	uxth	r1, r3
 8001b44:	23ff      	movs	r3, #255	; 0xff
 8001b46:	9302      	str	r3, [sp, #8]
 8001b48:	2307      	movs	r3, #7
 8001b4a:	9301      	str	r3, [sp, #4]
 8001b4c:	f107 030c 	add.w	r3, r7, #12
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	2301      	movs	r3, #1
 8001b54:	2200      	movs	r2, #0
 8001b56:	f001 ff07 	bl	8003968 <HAL_I2C_Mem_Read>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	bf0c      	ite	eq
 8001b60:	2301      	moveq	r3, #1
 8001b62:	2300      	movne	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <_ZN4_RTC10rtcGetTimeEv+0x4a>
		printf("read is good\r\n");
 8001b6a:	482b      	ldr	r0, [pc, #172]	; (8001c18 <_ZN4_RTC10rtcGetTimeEv+0xf0>)
 8001b6c:	f00a fcf4 	bl	800c558 <puts>
 8001b70:	e002      	b.n	8001b78 <_ZN4_RTC10rtcGetTimeEv+0x50>
	}
	else{
		printf("write is bad\r\n");
 8001b72:	482a      	ldr	r0, [pc, #168]	; (8001c1c <_ZN4_RTC10rtcGetTimeEv+0xf4>)
 8001b74:	f00a fcf0 	bl	800c558 <puts>
	}

	// remove stop bit if set
	buffer[0] &= ~RTC_START_STOP;
 8001b78:	7b3b      	ldrb	r3, [r7, #12]
 8001b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	733b      	strb	r3, [r7, #12]
	mytime->sec = bcdToInt(buffer[0]);
 8001b82:	7b3b      	ldrb	r3, [r7, #12]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff85 	bl	8001a94 <_ZL8bcdToInth>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	601a      	str	r2, [r3, #0]
	mytime->min = bcdToInt(buffer[1]);
 8001b90:	7b7b      	ldrb	r3, [r7, #13]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff ff7e 	bl	8001a94 <_ZL8bcdToInth>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	605a      	str	r2, [r3, #4]
	mytime->hours = bcdToInt(buffer[2]);
 8001b9e:	7bbb      	ldrb	r3, [r7, #14]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff77 	bl	8001a94 <_ZL8bcdToInth>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	609a      	str	r2, [r3, #8]
	mytime->weekDay = buffer[3] & 0x07;
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
 8001bae:	f003 0207 	and.w	r2, r3, #7
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	60da      	str	r2, [r3, #12]
	mytime->day = bcdToInt(buffer[4]);
 8001bb6:	7c3b      	ldrb	r3, [r7, #16]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff6b 	bl	8001a94 <_ZL8bcdToInth>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	611a      	str	r2, [r3, #16]
	mytime->month = bcdToInt(buffer[5]);
 8001bc4:	7c7b      	ldrb	r3, [r7, #17]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff ff64 	bl	8001a94 <_ZL8bcdToInth>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	615a      	str	r2, [r3, #20]
	mytime->year = bcdToInt(buffer[6]);
 8001bd2:	7cbb      	ldrb	r3, [r7, #18]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff5d 	bl	8001a94 <_ZL8bcdToInth>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	619a      	str	r2, [r3, #24]
	printf("date is %02d:%02d:%02d  %02d %02d/%02d/%02d \r\n ",mytime->hours,mytime->min,mytime->sec,mytime->weekDay,mytime->day,mytime->month,mytime->year);
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	689c      	ldr	r4, [r3, #8]
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	685d      	ldr	r5, [r3, #4]
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	681e      	ldr	r6, [r3, #0]
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	6912      	ldr	r2, [r2, #16]
 8001bf4:	6979      	ldr	r1, [r7, #20]
 8001bf6:	6949      	ldr	r1, [r1, #20]
 8001bf8:	6978      	ldr	r0, [r7, #20]
 8001bfa:	6980      	ldr	r0, [r0, #24]
 8001bfc:	9003      	str	r0, [sp, #12]
 8001bfe:	9102      	str	r1, [sp, #8]
 8001c00:	9201      	str	r2, [sp, #4]
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	4633      	mov	r3, r6
 8001c06:	462a      	mov	r2, r5
 8001c08:	4621      	mov	r1, r4
 8001c0a:	4805      	ldr	r0, [pc, #20]	; (8001c20 <_ZN4_RTC10rtcGetTimeEv+0xf8>)
 8001c0c:	f00a fc1e 	bl	800c44c <iprintf>
}
 8001c10:	bf00      	nop
 8001c12:	371c      	adds	r7, #28
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c18:	0800eff4 	.word	0x0800eff4
 8001c1c:	0800f004 	.word	0x0800f004
 8001c20:	0800f014 	.word	0x0800f014

08001c24 <_ZN4_RTC10rtcSetTimeEP9DateTime_>:
//	seconds += (dateTime.year / 4) * SecondsInDay;
//	return seconds;
//}

void _RTC::rtcSetTime(DateTime * _datetime)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af04      	add	r7, sp, #16
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
	dateTime = _datetime;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	609a      	str	r2, [r3, #8]
	uint8_t buffer[RTC_DATE_TIME_SIZE];

	buffer[0] = intToBcd(dateTime->sec, 0, 59);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	223b      	movs	r2, #59	; 0x3b
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff ff40 	bl	8001ac4 <_ZL8intToBcdiii>
 8001c44:	4603      	mov	r3, r0
 8001c46:	723b      	strb	r3, [r7, #8]
	buffer[1] = intToBcd(dateTime->min, 0, 59);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	223b      	movs	r2, #59	; 0x3b
 8001c50:	2100      	movs	r1, #0
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff ff36 	bl	8001ac4 <_ZL8intToBcdiii>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	727b      	strb	r3, [r7, #9]
	buffer[2] = intToBcd(dateTime->hours, 0, 59);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	223b      	movs	r2, #59	; 0x3b
 8001c64:	2100      	movs	r1, #0
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff ff2c 	bl	8001ac4 <_ZL8intToBcdiii>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	72bb      	strb	r3, [r7, #10]
	buffer[3] = dateTime->weekDay < 1 || dateTime->weekDay > 7 ? 0 : dateTime->weekDay;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	dd09      	ble.n	8001c8e <_ZN4_RTC10rtcSetTimeEP9DateTime_+0x6a>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	2b07      	cmp	r3, #7
 8001c82:	dc04      	bgt.n	8001c8e <_ZN4_RTC10rtcSetTimeEP9DateTime_+0x6a>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	e000      	b.n	8001c90 <_ZN4_RTC10rtcSetTimeEP9DateTime_+0x6c>
 8001c8e:	2300      	movs	r3, #0
 8001c90:	72fb      	strb	r3, [r7, #11]
	buffer[4] = intToBcd(dateTime->day, 1, 31);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	221f      	movs	r2, #31
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ff11 	bl	8001ac4 <_ZL8intToBcdiii>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	733b      	strb	r3, [r7, #12]
	buffer[5] = intToBcd(dateTime->month, 1, 12);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	220c      	movs	r2, #12
 8001cae:	2101      	movs	r1, #1
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ff07 	bl	8001ac4 <_ZL8intToBcdiii>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	737b      	strb	r3, [r7, #13]
	buffer[6] = intToBcd(dateTime->year, 1, 99);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	2263      	movs	r2, #99	; 0x63
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fefd 	bl	8001ac4 <_ZL8intToBcdiii>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	73bb      	strb	r3, [r7, #14]

	if(HAL_I2C_Mem_Write(_hi2c, _devAddr, 0, 1, buffer, RTC_DATE_TIME_SIZE, 0xFF) == HAL_OK){
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6818      	ldr	r0, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	791b      	ldrb	r3, [r3, #4]
 8001cd6:	b299      	uxth	r1, r3
 8001cd8:	23ff      	movs	r3, #255	; 0xff
 8001cda:	9302      	str	r3, [sp, #8]
 8001cdc:	2307      	movs	r3, #7
 8001cde:	9301      	str	r3, [sp, #4]
 8001ce0:	f107 0308 	add.w	r3, r7, #8
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f001 fd29 	bl	8003740 <HAL_I2C_Mem_Write>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	bf0c      	ite	eq
 8001cf4:	2301      	moveq	r3, #1
 8001cf6:	2300      	movne	r3, #0
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <_ZN4_RTC10rtcSetTimeEP9DateTime_+0xe2>
		printf("write is good\r\n");
 8001cfe:	4805      	ldr	r0, [pc, #20]	; (8001d14 <_ZN4_RTC10rtcSetTimeEP9DateTime_+0xf0>)
 8001d00:	f00a fc2a 	bl	800c558 <puts>
	}
	else{
		printf("write is bad\r\n");
	}
}
 8001d04:	e002      	b.n	8001d0c <_ZN4_RTC10rtcSetTimeEP9DateTime_+0xe8>
		printf("write is bad\r\n");
 8001d06:	4804      	ldr	r0, [pc, #16]	; (8001d18 <_ZN4_RTC10rtcSetTimeEP9DateTime_+0xf4>)
 8001d08:	f00a fc26 	bl	800c558 <puts>
}
 8001d0c:	bf00      	nop
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	0800f044 	.word	0x0800f044
 8001d18:	0800f004 	.word	0x0800f004

08001d1c <_ZN12CliContainer9doCommandEPcS0_>:

	void doCommand( char * cmd,  char * param){
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
		for (int j = 0; j <funcounter; j++) {
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	da1d      	bge.n	8001d74 <_ZN12CliContainer9doCommandEPcS0_+0x58>
			if (strcmp(cmd,commands[j].CommandName) == 0) {
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8001d40:	4619      	mov	r1, r3
 8001d42:	68b8      	ldr	r0, [r7, #8]
 8001d44:	f7fe fa44 	bl	80001d0 <strcmp>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10e      	bne.n	8001d6c <_ZN12CliContainer9doCommandEPcS0_+0x50>
				commands[j].command->doCommand(param);
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4413      	add	r3, r2
 8001d56:	6858      	ldr	r0, [r3, #4]
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4413      	add	r3, r2
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	4798      	blx	r3
				return;
 8001d6a:	e006      	b.n	8001d7a <_ZN12CliContainer9doCommandEPcS0_+0x5e>
		for (int j = 0; j <funcounter; j++) {
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	e7db      	b.n	8001d2c <_ZN12CliContainer9doCommandEPcS0_+0x10>
			}

		}
		printf("Invalid command\r\n");
 8001d74:	4802      	ldr	r0, [pc, #8]	; (8001d80 <_ZN12CliContainer9doCommandEPcS0_+0x64>)
 8001d76:	f00a fbef 	bl	800c558 <puts>
	}
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	0800f054 	.word	0x0800f054

08001d84 <_Z8commTaskv>:
int cmdcount = 0;
int cmdprint = 0;
extern CliContainer container;


int commTask() {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 8001d8a:	1db9      	adds	r1, r7, #6
 8001d8c:	230a      	movs	r3, #10
 8001d8e:	2201      	movs	r2, #1
 8001d90:	4839      	ldr	r0, [pc, #228]	; (8001e78 <_Z8commTaskv+0xf4>)
 8001d92:	f005 f9c7 	bl	8007124 <HAL_UART_Receive>
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK) {
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d025      	beq.n	8001dec <_Z8commTaskv+0x68>
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0) {
 8001da0:	4b35      	ldr	r3, [pc, #212]	; (8001e78 <_Z8commTaskv+0xf4>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	bf14      	ite	ne
 8001dae:	2301      	movne	r3, #1
 8001db0:	2300      	moveq	r3, #0
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <_Z8commTaskv+0x3c>
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 8001db8:	4b2f      	ldr	r3, [pc, #188]	; (8001e78 <_Z8commTaskv+0xf4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2208      	movs	r2, #8
 8001dbe:	621a      	str	r2, [r3, #32]
		}

		// here we have a time to print the command
		while (cmdprint < cmdcount) {
 8001dc0:	4b2e      	ldr	r3, [pc, #184]	; (8001e7c <_Z8commTaskv+0xf8>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b2e      	ldr	r3, [pc, #184]	; (8001e80 <_Z8commTaskv+0xfc>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	da0d      	bge.n	8001de8 <_Z8commTaskv+0x64>
			HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8001dcc:	4b2b      	ldr	r3, [pc, #172]	; (8001e7c <_Z8commTaskv+0xf8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	1c5a      	adds	r2, r3, #1
 8001dd2:	492a      	ldr	r1, [pc, #168]	; (8001e7c <_Z8commTaskv+0xf8>)
 8001dd4:	600a      	str	r2, [r1, #0]
 8001dd6:	4a2b      	ldr	r2, [pc, #172]	; (8001e84 <_Z8commTaskv+0x100>)
 8001dd8:	1899      	adds	r1, r3, r2
 8001dda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dde:	2201      	movs	r2, #1
 8001de0:	4825      	ldr	r0, [pc, #148]	; (8001e78 <_Z8commTaskv+0xf4>)
 8001de2:	f005 f90b 	bl	8006ffc <HAL_UART_Transmit>
		while (cmdprint < cmdcount) {
 8001de6:	e7eb      	b.n	8001dc0 <_Z8commTaskv+0x3c>
		}

		return 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	e040      	b.n	8001e6e <_Z8commTaskv+0xea>
	}

	if (ch != '\r' && ch != '\n') {
 8001dec:	79bb      	ldrb	r3, [r7, #6]
 8001dee:	2b0d      	cmp	r3, #13
 8001df0:	d016      	beq.n	8001e20 <_Z8commTaskv+0x9c>
 8001df2:	79bb      	ldrb	r3, [r7, #6]
 8001df4:	2b0a      	cmp	r3, #10
 8001df6:	d013      	beq.n	8001e20 <_Z8commTaskv+0x9c>
		//HAL_UART_Transmit(&huart2, &ch, 1, 0xFFFF);

		if (cmdcount >= MAX_BUFFER_LENGTH) {
 8001df8:	4b21      	ldr	r3, [pc, #132]	; (8001e80 <_Z8commTaskv+0xfc>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b63      	cmp	r3, #99	; 0x63
 8001dfe:	dd05      	ble.n	8001e0c <_Z8commTaskv+0x88>
			cmdcount = 0;
 8001e00:	4b1f      	ldr	r3, [pc, #124]	; (8001e80 <_Z8commTaskv+0xfc>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
			cmdprint = 0;
 8001e06:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <_Z8commTaskv+0xf8>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 8001e0c:	4b1c      	ldr	r3, [pc, #112]	; (8001e80 <_Z8commTaskv+0xfc>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	1c5a      	adds	r2, r3, #1
 8001e12:	491b      	ldr	r1, [pc, #108]	; (8001e80 <_Z8commTaskv+0xfc>)
 8001e14:	600a      	str	r2, [r1, #0]
 8001e16:	79b9      	ldrb	r1, [r7, #6]
 8001e18:	4a1a      	ldr	r2, [pc, #104]	; (8001e84 <_Z8commTaskv+0x100>)
 8001e1a:	54d1      	strb	r1, [r2, r3]
		return 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	e026      	b.n	8001e6e <_Z8commTaskv+0xea>
	}

	// here we have a time to print the command
	while (cmdprint < cmdcount) {
 8001e20:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <_Z8commTaskv+0xf8>)
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	4b16      	ldr	r3, [pc, #88]	; (8001e80 <_Z8commTaskv+0xfc>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	da0d      	bge.n	8001e48 <_Z8commTaskv+0xc4>
		HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8001e2c:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <_Z8commTaskv+0xf8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	1c5a      	adds	r2, r3, #1
 8001e32:	4912      	ldr	r1, [pc, #72]	; (8001e7c <_Z8commTaskv+0xf8>)
 8001e34:	600a      	str	r2, [r1, #0]
 8001e36:	4a13      	ldr	r2, [pc, #76]	; (8001e84 <_Z8commTaskv+0x100>)
 8001e38:	1899      	adds	r1, r3, r2
 8001e3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e3e:	2201      	movs	r2, #1
 8001e40:	480d      	ldr	r0, [pc, #52]	; (8001e78 <_Z8commTaskv+0xf4>)
 8001e42:	f005 f8db 	bl	8006ffc <HAL_UART_Transmit>
	while (cmdprint < cmdcount) {
 8001e46:	e7eb      	b.n	8001e20 <_Z8commTaskv+0x9c>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n", 2, 0xFFFF);
 8001e48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	490e      	ldr	r1, [pc, #56]	; (8001e88 <_Z8commTaskv+0x104>)
 8001e50:	4809      	ldr	r0, [pc, #36]	; (8001e78 <_Z8commTaskv+0xf4>)
 8001e52:	f005 f8d3 	bl	8006ffc <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 8001e56:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <_Z8commTaskv+0xfc>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a0a      	ldr	r2, [pc, #40]	; (8001e84 <_Z8commTaskv+0x100>)
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <_Z8commTaskv+0xfc>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
	cmdprint = 0;
 8001e66:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <_Z8commTaskv+0xf8>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
	return 1;
 8001e6c:	2301      	movs	r3, #1
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	200003b0 	.word	0x200003b0
 8001e7c:	20000274 	.word	0x20000274
 8001e80:	20000270 	.word	0x20000270
 8001e84:	2000020c 	.word	0x2000020c
 8001e88:	0800f068 	.word	0x0800f068

08001e8c <_Z13handleCommandv>:

void handleCommand() {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b092      	sub	sp, #72	; 0x48
 8001e90:	af00      	add	r7, sp, #0
	char cmd[20];
	char param[50];
	sscanf((const char*) cmdbuffer, "%s %s", cmd, param);
 8001e92:	463b      	mov	r3, r7
 8001e94:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001e98:	4907      	ldr	r1, [pc, #28]	; (8001eb8 <_Z13handleCommandv+0x2c>)
 8001e9a:	4808      	ldr	r0, [pc, #32]	; (8001ebc <_Z13handleCommandv+0x30>)
 8001e9c:	f00a fbb8 	bl	800c610 <siscanf>

	container.doCommand(cmd,param);
 8001ea0:	463a      	mov	r2, r7
 8001ea2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4805      	ldr	r0, [pc, #20]	; (8001ec0 <_Z13handleCommandv+0x34>)
 8001eaa:	f7ff ff37 	bl	8001d1c <_ZN12CliContainer9doCommandEPcS0_>
}
 8001eae:	bf00      	nop
 8001eb0:	3748      	adds	r7, #72	; 0x48
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	0800f06c 	.word	0x0800f06c
 8001ebc:	2000020c 	.word	0x2000020c
 8001ec0:	20000474 	.word	0x20000474

08001ec4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ec8:	f000 ffd8 	bl	8002e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ecc:	f000 f856 	bl	8001f7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ed0:	f000 fa18 	bl	8002304 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001ed4:	f000 f9e6 	bl	80022a4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001ed8:	f000 f936 	bl	8002148 <MX_TIM3_Init>
  MX_TIM6_Init();
 8001edc:	f000 f9ac 	bl	8002238 <MX_TIM6_Init>
  MX_TIM1_Init();
 8001ee0:	f000 f8de 	bl	80020a0 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001ee4:	f000 f89c 	bl	8002020 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001ee8:	f006 fa48 	bl	800837c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of DHT_MONITOR */
  DHT_MONITORHandle = osSemaphoreNew(1, 1, &DHT_MONITOR_attributes);
 8001eec:	4a15      	ldr	r2, [pc, #84]	; (8001f44 <main+0x80>)
 8001eee:	2101      	movs	r1, #1
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	f006 fb3a 	bl	800856a <osSemaphoreNew>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	4a13      	ldr	r2, [pc, #76]	; (8001f48 <main+0x84>)
 8001efa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of READ_TEMP */
  READ_TEMPHandle = osThreadNew(READ_TEMP_func, NULL, &READ_TEMP_attributes);
 8001efc:	4a13      	ldr	r2, [pc, #76]	; (8001f4c <main+0x88>)
 8001efe:	2100      	movs	r1, #0
 8001f00:	4813      	ldr	r0, [pc, #76]	; (8001f50 <main+0x8c>)
 8001f02:	f006 fa85 	bl	8008410 <osThreadNew>
 8001f06:	4603      	mov	r3, r0
 8001f08:	4a12      	ldr	r2, [pc, #72]	; (8001f54 <main+0x90>)
 8001f0a:	6013      	str	r3, [r2, #0]

  /* creation of COMTASK */
  COMTASKHandle = osThreadNew(comtask_func, NULL, &COMTASK_attributes);
 8001f0c:	4a12      	ldr	r2, [pc, #72]	; (8001f58 <main+0x94>)
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4812      	ldr	r0, [pc, #72]	; (8001f5c <main+0x98>)
 8001f12:	f006 fa7d 	bl	8008410 <osThreadNew>
 8001f16:	4603      	mov	r3, r0
 8001f18:	4a11      	ldr	r2, [pc, #68]	; (8001f60 <main+0x9c>)
 8001f1a:	6013      	str	r3, [r2, #0]

  /* creation of MONITOR_TEMP */
  MONITOR_TEMPHandle = osThreadNew(monitor_func, NULL, &MONITOR_TEMP_attributes);
 8001f1c:	4a11      	ldr	r2, [pc, #68]	; (8001f64 <main+0xa0>)
 8001f1e:	2100      	movs	r1, #0
 8001f20:	4811      	ldr	r0, [pc, #68]	; (8001f68 <main+0xa4>)
 8001f22:	f006 fa75 	bl	8008410 <osThreadNew>
 8001f26:	4603      	mov	r3, r0
 8001f28:	4a10      	ldr	r2, [pc, #64]	; (8001f6c <main+0xa8>)
 8001f2a:	6013      	str	r3, [r2, #0]

  /* creation of BLINK_TASK */
  BLINK_TASKHandle = osThreadNew(blink_func, NULL, &BLINK_TASK_attributes);
 8001f2c:	4a10      	ldr	r2, [pc, #64]	; (8001f70 <main+0xac>)
 8001f2e:	2100      	movs	r1, #0
 8001f30:	4810      	ldr	r0, [pc, #64]	; (8001f74 <main+0xb0>)
 8001f32:	f006 fa6d 	bl	8008410 <osThreadNew>
 8001f36:	4603      	mov	r3, r0
 8001f38:	4a0f      	ldr	r2, [pc, #60]	; (8001f78 <main+0xb4>)
 8001f3a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001f3c:	f006 fa42 	bl	80083c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f40:	e7fe      	b.n	8001f40 <main+0x7c>
 8001f42:	bf00      	nop
 8001f44:	0800f23c 	.word	0x0800f23c
 8001f48:	20000444 	.word	0x20000444
 8001f4c:	0800f1ac 	.word	0x0800f1ac
 8001f50:	08002679 	.word	0x08002679
 8001f54:	20000434 	.word	0x20000434
 8001f58:	0800f1d0 	.word	0x0800f1d0
 8001f5c:	08002761 	.word	0x08002761
 8001f60:	20000438 	.word	0x20000438
 8001f64:	0800f1f4 	.word	0x0800f1f4
 8001f68:	08002785 	.word	0x08002785
 8001f6c:	2000043c 	.word	0x2000043c
 8001f70:	0800f218 	.word	0x0800f218
 8001f74:	08002429 	.word	0x08002429
 8001f78:	20000440 	.word	0x20000440

08001f7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b096      	sub	sp, #88	; 0x58
 8001f80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f82:	f107 0314 	add.w	r3, r7, #20
 8001f86:	2244      	movs	r2, #68	; 0x44
 8001f88:	2100      	movs	r1, #0
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f009 fd0c 	bl	800b9a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f90:	463b      	mov	r3, r7
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	605a      	str	r2, [r3, #4]
 8001f98:	609a      	str	r2, [r3, #8]
 8001f9a:	60da      	str	r2, [r3, #12]
 8001f9c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f9e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001fa2:	f002 f947 	bl	8004234 <HAL_PWREx_ControlVoltageScaling>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001fac:	f000 fa56 	bl	800245c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fb8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fba:	2310      	movs	r3, #16
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001fca:	230a      	movs	r3, #10
 8001fcc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001fce:	2307      	movs	r3, #7
 8001fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fda:	f107 0314 	add.w	r3, r7, #20
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f002 f97e 	bl	80042e0 <HAL_RCC_OscConfig>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001fea:	f000 fa37 	bl	800245c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fee:	230f      	movs	r3, #15
 8001ff0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ffe:	2300      	movs	r3, #0
 8002000:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002002:	463b      	mov	r3, r7
 8002004:	2104      	movs	r1, #4
 8002006:	4618      	mov	r0, r3
 8002008:	f002 fd46 	bl	8004a98 <HAL_RCC_ClockConfig>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002012:	f000 fa23 	bl	800245c <Error_Handler>
  }
}
 8002016:	bf00      	nop
 8002018:	3758      	adds	r7, #88	; 0x58
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002024:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <MX_I2C1_Init+0x74>)
 8002026:	4a1c      	ldr	r2, [pc, #112]	; (8002098 <MX_I2C1_Init+0x78>)
 8002028:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800202a:	4b1a      	ldr	r3, [pc, #104]	; (8002094 <MX_I2C1_Init+0x74>)
 800202c:	4a1b      	ldr	r2, [pc, #108]	; (800209c <MX_I2C1_Init+0x7c>)
 800202e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002030:	4b18      	ldr	r3, [pc, #96]	; (8002094 <MX_I2C1_Init+0x74>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002036:	4b17      	ldr	r3, [pc, #92]	; (8002094 <MX_I2C1_Init+0x74>)
 8002038:	2201      	movs	r2, #1
 800203a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800203c:	4b15      	ldr	r3, [pc, #84]	; (8002094 <MX_I2C1_Init+0x74>)
 800203e:	2200      	movs	r2, #0
 8002040:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002042:	4b14      	ldr	r3, [pc, #80]	; (8002094 <MX_I2C1_Init+0x74>)
 8002044:	2200      	movs	r2, #0
 8002046:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <MX_I2C1_Init+0x74>)
 800204a:	2200      	movs	r2, #0
 800204c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800204e:	4b11      	ldr	r3, [pc, #68]	; (8002094 <MX_I2C1_Init+0x74>)
 8002050:	2200      	movs	r2, #0
 8002052:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002054:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <MX_I2C1_Init+0x74>)
 8002056:	2200      	movs	r2, #0
 8002058:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800205a:	480e      	ldr	r0, [pc, #56]	; (8002094 <MX_I2C1_Init+0x74>)
 800205c:	f001 fae0 	bl	8003620 <HAL_I2C_Init>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002066:	f000 f9f9 	bl	800245c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800206a:	2100      	movs	r1, #0
 800206c:	4809      	ldr	r0, [pc, #36]	; (8002094 <MX_I2C1_Init+0x74>)
 800206e:	f002 f83b 	bl	80040e8 <HAL_I2CEx_ConfigAnalogFilter>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002078:	f000 f9f0 	bl	800245c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800207c:	2100      	movs	r1, #0
 800207e:	4805      	ldr	r0, [pc, #20]	; (8002094 <MX_I2C1_Init+0x74>)
 8002080:	f002 f87d 	bl	800417e <HAL_I2CEx_ConfigDigitalFilter>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800208a:	f000 f9e7 	bl	800245c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000278 	.word	0x20000278
 8002098:	40005400 	.word	0x40005400
 800209c:	10909cec 	.word	0x10909cec

080020a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020a6:	f107 0310 	add.w	r3, r7, #16
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b4:	1d3b      	adds	r3, r7, #4
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	605a      	str	r2, [r3, #4]
 80020bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020be:	4b20      	ldr	r3, [pc, #128]	; (8002140 <MX_TIM1_Init+0xa0>)
 80020c0:	4a20      	ldr	r2, [pc, #128]	; (8002144 <MX_TIM1_Init+0xa4>)
 80020c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 80020c4:	4b1e      	ldr	r3, [pc, #120]	; (8002140 <MX_TIM1_Init+0xa0>)
 80020c6:	224f      	movs	r2, #79	; 0x4f
 80020c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ca:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <MX_TIM1_Init+0xa0>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80020d0:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <MX_TIM1_Init+0xa0>)
 80020d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d8:	4b19      	ldr	r3, [pc, #100]	; (8002140 <MX_TIM1_Init+0xa0>)
 80020da:	2200      	movs	r2, #0
 80020dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020de:	4b18      	ldr	r3, [pc, #96]	; (8002140 <MX_TIM1_Init+0xa0>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e4:	4b16      	ldr	r3, [pc, #88]	; (8002140 <MX_TIM1_Init+0xa0>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020ea:	4815      	ldr	r0, [pc, #84]	; (8002140 <MX_TIM1_Init+0xa0>)
 80020ec:	f003 fbe6 	bl	80058bc <HAL_TIM_Base_Init>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80020f6:	f000 f9b1 	bl	800245c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002100:	f107 0310 	add.w	r3, r7, #16
 8002104:	4619      	mov	r1, r3
 8002106:	480e      	ldr	r0, [pc, #56]	; (8002140 <MX_TIM1_Init+0xa0>)
 8002108:	f004 f962 	bl	80063d0 <HAL_TIM_ConfigClockSource>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002112:	f000 f9a3 	bl	800245c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002116:	2300      	movs	r3, #0
 8002118:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800211a:	2300      	movs	r3, #0
 800211c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002122:	1d3b      	adds	r3, r7, #4
 8002124:	4619      	mov	r1, r3
 8002126:	4806      	ldr	r0, [pc, #24]	; (8002140 <MX_TIM1_Init+0xa0>)
 8002128:	f004 fe74 	bl	8006e14 <HAL_TIMEx_MasterConfigSynchronization>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002132:	f000 f993 	bl	800245c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002136:	bf00      	nop
 8002138:	3720      	adds	r7, #32
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200002cc 	.word	0x200002cc
 8002144:	40012c00 	.word	0x40012c00

08002148 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08e      	sub	sp, #56	; 0x38
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800214e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]
 8002158:	609a      	str	r2, [r3, #8]
 800215a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800215c:	f107 031c 	add.w	r3, r7, #28
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002168:	463b      	mov	r3, r7
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	605a      	str	r2, [r3, #4]
 8002170:	609a      	str	r2, [r3, #8]
 8002172:	60da      	str	r2, [r3, #12]
 8002174:	611a      	str	r2, [r3, #16]
 8002176:	615a      	str	r2, [r3, #20]
 8002178:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800217a:	4b2d      	ldr	r3, [pc, #180]	; (8002230 <MX_TIM3_Init+0xe8>)
 800217c:	4a2d      	ldr	r2, [pc, #180]	; (8002234 <MX_TIM3_Init+0xec>)
 800217e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 8002180:	4b2b      	ldr	r3, [pc, #172]	; (8002230 <MX_TIM3_Init+0xe8>)
 8002182:	f240 321f 	movw	r2, #799	; 0x31f
 8002186:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002188:	4b29      	ldr	r3, [pc, #164]	; (8002230 <MX_TIM3_Init+0xe8>)
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800218e:	4b28      	ldr	r3, [pc, #160]	; (8002230 <MX_TIM3_Init+0xe8>)
 8002190:	2264      	movs	r2, #100	; 0x64
 8002192:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002194:	4b26      	ldr	r3, [pc, #152]	; (8002230 <MX_TIM3_Init+0xe8>)
 8002196:	2200      	movs	r2, #0
 8002198:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800219a:	4b25      	ldr	r3, [pc, #148]	; (8002230 <MX_TIM3_Init+0xe8>)
 800219c:	2200      	movs	r2, #0
 800219e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021a0:	4823      	ldr	r0, [pc, #140]	; (8002230 <MX_TIM3_Init+0xe8>)
 80021a2:	f003 fb8b 	bl	80058bc <HAL_TIM_Base_Init>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80021ac:	f000 f956 	bl	800245c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021ba:	4619      	mov	r1, r3
 80021bc:	481c      	ldr	r0, [pc, #112]	; (8002230 <MX_TIM3_Init+0xe8>)
 80021be:	f004 f907 	bl	80063d0 <HAL_TIM_ConfigClockSource>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80021c8:	f000 f948 	bl	800245c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80021cc:	4818      	ldr	r0, [pc, #96]	; (8002230 <MX_TIM3_Init+0xe8>)
 80021ce:	f003 fccd 	bl	8005b6c <HAL_TIM_PWM_Init>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80021d8:	f000 f940 	bl	800245c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021dc:	2300      	movs	r3, #0
 80021de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e0:	2300      	movs	r3, #0
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021e4:	f107 031c 	add.w	r3, r7, #28
 80021e8:	4619      	mov	r1, r3
 80021ea:	4811      	ldr	r0, [pc, #68]	; (8002230 <MX_TIM3_Init+0xe8>)
 80021ec:	f004 fe12 	bl	8006e14 <HAL_TIMEx_MasterConfigSynchronization>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80021f6:	f000 f931 	bl	800245c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021fa:	2360      	movs	r3, #96	; 0x60
 80021fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 80021fe:	2332      	movs	r3, #50	; 0x32
 8002200:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002202:	2300      	movs	r3, #0
 8002204:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800220a:	463b      	mov	r3, r7
 800220c:	2200      	movs	r2, #0
 800220e:	4619      	mov	r1, r3
 8002210:	4807      	ldr	r0, [pc, #28]	; (8002230 <MX_TIM3_Init+0xe8>)
 8002212:	f003 ffc9 	bl	80061a8 <HAL_TIM_PWM_ConfigChannel>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800221c:	f000 f91e 	bl	800245c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002220:	4803      	ldr	r0, [pc, #12]	; (8002230 <MX_TIM3_Init+0xe8>)
 8002222:	f000 fc01 	bl	8002a28 <HAL_TIM_MspPostInit>

}
 8002226:	bf00      	nop
 8002228:	3738      	adds	r7, #56	; 0x38
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000318 	.word	0x20000318
 8002234:	40000400 	.word	0x40000400

08002238 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800223e:	1d3b      	adds	r3, r7, #4
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002248:	4b14      	ldr	r3, [pc, #80]	; (800229c <MX_TIM6_Init+0x64>)
 800224a:	4a15      	ldr	r2, [pc, #84]	; (80022a0 <MX_TIM6_Init+0x68>)
 800224c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 800224e:	4b13      	ldr	r3, [pc, #76]	; (800229c <MX_TIM6_Init+0x64>)
 8002250:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002254:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002256:	4b11      	ldr	r3, [pc, #68]	; (800229c <MX_TIM6_Init+0x64>)
 8002258:	2200      	movs	r2, #0
 800225a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 800225c:	4b0f      	ldr	r3, [pc, #60]	; (800229c <MX_TIM6_Init+0x64>)
 800225e:	220a      	movs	r2, #10
 8002260:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002262:	4b0e      	ldr	r3, [pc, #56]	; (800229c <MX_TIM6_Init+0x64>)
 8002264:	2200      	movs	r2, #0
 8002266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002268:	480c      	ldr	r0, [pc, #48]	; (800229c <MX_TIM6_Init+0x64>)
 800226a:	f003 fb27 	bl	80058bc <HAL_TIM_Base_Init>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002274:	f000 f8f2 	bl	800245c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002278:	2300      	movs	r3, #0
 800227a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800227c:	2300      	movs	r3, #0
 800227e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002280:	1d3b      	adds	r3, r7, #4
 8002282:	4619      	mov	r1, r3
 8002284:	4805      	ldr	r0, [pc, #20]	; (800229c <MX_TIM6_Init+0x64>)
 8002286:	f004 fdc5 	bl	8006e14 <HAL_TIMEx_MasterConfigSynchronization>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002290:	f000 f8e4 	bl	800245c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002294:	bf00      	nop
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000364 	.word	0x20000364
 80022a0:	40001000 	.word	0x40001000

080022a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022a8:	4b14      	ldr	r3, [pc, #80]	; (80022fc <MX_USART2_UART_Init+0x58>)
 80022aa:	4a15      	ldr	r2, [pc, #84]	; (8002300 <MX_USART2_UART_Init+0x5c>)
 80022ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022ae:	4b13      	ldr	r3, [pc, #76]	; (80022fc <MX_USART2_UART_Init+0x58>)
 80022b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022b6:	4b11      	ldr	r3, [pc, #68]	; (80022fc <MX_USART2_UART_Init+0x58>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022bc:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <MX_USART2_UART_Init+0x58>)
 80022be:	2200      	movs	r2, #0
 80022c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022c2:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <MX_USART2_UART_Init+0x58>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022c8:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <MX_USART2_UART_Init+0x58>)
 80022ca:	220c      	movs	r2, #12
 80022cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ce:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <MX_USART2_UART_Init+0x58>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022d4:	4b09      	ldr	r3, [pc, #36]	; (80022fc <MX_USART2_UART_Init+0x58>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022da:	4b08      	ldr	r3, [pc, #32]	; (80022fc <MX_USART2_UART_Init+0x58>)
 80022dc:	2200      	movs	r2, #0
 80022de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022e0:	4b06      	ldr	r3, [pc, #24]	; (80022fc <MX_USART2_UART_Init+0x58>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022e6:	4805      	ldr	r0, [pc, #20]	; (80022fc <MX_USART2_UART_Init+0x58>)
 80022e8:	f004 fe3a 	bl	8006f60 <HAL_UART_Init>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80022f2:	f000 f8b3 	bl	800245c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	200003b0 	.word	0x200003b0
 8002300:	40004400 	.word	0x40004400

08002304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08a      	sub	sp, #40	; 0x28
 8002308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230a:	f107 0314 	add.w	r3, r7, #20
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	605a      	str	r2, [r3, #4]
 8002314:	609a      	str	r2, [r3, #8]
 8002316:	60da      	str	r2, [r3, #12]
 8002318:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800231a:	4b40      	ldr	r3, [pc, #256]	; (800241c <MX_GPIO_Init+0x118>)
 800231c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231e:	4a3f      	ldr	r2, [pc, #252]	; (800241c <MX_GPIO_Init+0x118>)
 8002320:	f043 0304 	orr.w	r3, r3, #4
 8002324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002326:	4b3d      	ldr	r3, [pc, #244]	; (800241c <MX_GPIO_Init+0x118>)
 8002328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232a:	f003 0304 	and.w	r3, r3, #4
 800232e:	613b      	str	r3, [r7, #16]
 8002330:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002332:	4b3a      	ldr	r3, [pc, #232]	; (800241c <MX_GPIO_Init+0x118>)
 8002334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002336:	4a39      	ldr	r2, [pc, #228]	; (800241c <MX_GPIO_Init+0x118>)
 8002338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800233c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800233e:	4b37      	ldr	r3, [pc, #220]	; (800241c <MX_GPIO_Init+0x118>)
 8002340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800234a:	4b34      	ldr	r3, [pc, #208]	; (800241c <MX_GPIO_Init+0x118>)
 800234c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234e:	4a33      	ldr	r2, [pc, #204]	; (800241c <MX_GPIO_Init+0x118>)
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002356:	4b31      	ldr	r3, [pc, #196]	; (800241c <MX_GPIO_Init+0x118>)
 8002358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	60bb      	str	r3, [r7, #8]
 8002360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002362:	4b2e      	ldr	r3, [pc, #184]	; (800241c <MX_GPIO_Init+0x118>)
 8002364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002366:	4a2d      	ldr	r2, [pc, #180]	; (800241c <MX_GPIO_Init+0x118>)
 8002368:	f043 0302 	orr.w	r3, r3, #2
 800236c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800236e:	4b2b      	ldr	r3, [pc, #172]	; (800241c <MX_GPIO_Init+0x118>)
 8002370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	607b      	str	r3, [r7, #4]
 8002378:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800237a:	2200      	movs	r2, #0
 800237c:	2120      	movs	r1, #32
 800237e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002382:	f001 f903 	bl	800358c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002386:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800238a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800238c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002396:	f107 0314 	add.w	r3, r7, #20
 800239a:	4619      	mov	r1, r3
 800239c:	4820      	ldr	r0, [pc, #128]	; (8002420 <MX_GPIO_Init+0x11c>)
 800239e:	f000 ff33 	bl	8003208 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80023a2:	2320      	movs	r3, #32
 80023a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a6:	2301      	movs	r3, #1
 80023a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ae:	2300      	movs	r3, #0
 80023b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80023b2:	f107 0314 	add.w	r3, r7, #20
 80023b6:	4619      	mov	r1, r3
 80023b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023bc:	f000 ff24 	bl	8003208 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 80023c0:	2308      	movs	r3, #8
 80023c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023c4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80023c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 80023ce:	f107 0314 	add.w	r3, r7, #20
 80023d2:	4619      	mov	r1, r3
 80023d4:	4813      	ldr	r0, [pc, #76]	; (8002424 <MX_GPIO_Init+0x120>)
 80023d6:	f000 ff17 	bl	8003208 <HAL_GPIO_Init>

  /*Configure GPIO pin : pin_4_Pin */
  GPIO_InitStruct.Pin = pin_4_Pin;
 80023da:	2320      	movs	r3, #32
 80023dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80023e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(pin_4_GPIO_Port, &GPIO_InitStruct);
 80023e8:	f107 0314 	add.w	r3, r7, #20
 80023ec:	4619      	mov	r1, r3
 80023ee:	480d      	ldr	r0, [pc, #52]	; (8002424 <MX_GPIO_Init+0x120>)
 80023f0:	f000 ff0a 	bl	8003208 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80023f4:	2200      	movs	r2, #0
 80023f6:	2105      	movs	r1, #5
 80023f8:	2017      	movs	r0, #23
 80023fa:	f000 fe5b 	bl	80030b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80023fe:	2017      	movs	r0, #23
 8002400:	f000 fe74 	bl	80030ec <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002404:	2200      	movs	r2, #0
 8002406:	2105      	movs	r1, #5
 8002408:	2028      	movs	r0, #40	; 0x28
 800240a:	f000 fe53 	bl	80030b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800240e:	2028      	movs	r0, #40	; 0x28
 8002410:	f000 fe6c 	bl	80030ec <HAL_NVIC_EnableIRQ>

}
 8002414:	bf00      	nop
 8002416:	3728      	adds	r7, #40	; 0x28
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40021000 	.word	0x40021000
 8002420:	48000800 	.word	0x48000800
 8002424:	48000400 	.word	0x48000400

08002428 <blink_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blink_func */
__weak void blink_func(void *argument)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blink_func */
  /* Infinite loop */
  for(;;)
 8002430:	e7fe      	b.n	8002430 <blink_func+0x8>
	...

08002434 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a05      	ldr	r2, [pc, #20]	; (8002458 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d101      	bne.n	800244a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002446:	f000 fd39 	bl	8002ebc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  mycallback();
 800244a:	f000 f8f1 	bl	8002630 <mycallback>

  /* USER CODE END Callback 1 */
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40014400 	.word	0x40014400

0800245c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002460:	b672      	cpsid	i
}
 8002462:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002464:	e7fe      	b.n	8002464 <Error_Handler+0x8>

08002466 <_ZN6BUZZERC1EP17TIM_HandleTypeDef>:


int count = 0;
int frame = 0;

BUZZER::BUZZER(TIM_HandleTypeDef *htim)
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	6039      	str	r1, [r7, #0]
{
	htim = htim;

}
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4618      	mov	r0, r3
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
	...

08002480 <_ZN6BUZZER15buzzerStartPlayEv>:
void BUZZER::buzzerStartPlay()
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(&htim3);
 8002488:	4808      	ldr	r0, [pc, #32]	; (80024ac <_ZN6BUZZER15buzzerStartPlayEv+0x2c>)
 800248a:	f003 fa6f 	bl	800596c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800248e:	2100      	movs	r1, #0
 8002490:	4806      	ldr	r0, [pc, #24]	; (80024ac <_ZN6BUZZER15buzzerStartPlayEv+0x2c>)
 8002492:	f003 fbcd 	bl	8005c30 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_AUTORELOAD(&htim3,150);
 8002496:	4b05      	ldr	r3, [pc, #20]	; (80024ac <_ZN6BUZZER15buzzerStartPlayEv+0x2c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2296      	movs	r2, #150	; 0x96
 800249c:	62da      	str	r2, [r3, #44]	; 0x2c
 800249e:	4b03      	ldr	r3, [pc, #12]	; (80024ac <_ZN6BUZZER15buzzerStartPlayEv+0x2c>)
 80024a0:	2296      	movs	r2, #150	; 0x96
 80024a2:	60da      	str	r2, [r3, #12]
}
 80024a4:	bf00      	nop
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	20000318 	.word	0x20000318

080024b0 <_ZN6BUZZER14buzzerStopPlayEv>:
void BUZZER::buzzerStopPlay()
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop(&htim3);
 80024b8:	4805      	ldr	r0, [pc, #20]	; (80024d0 <_ZN6BUZZER14buzzerStopPlayEv+0x20>)
 80024ba:	f003 fabf 	bl	8005a3c <HAL_TIM_Base_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80024be:	2100      	movs	r1, #0
 80024c0:	4803      	ldr	r0, [pc, #12]	; (80024d0 <_ZN6BUZZER14buzzerStopPlayEv+0x20>)
 80024c2:	f003 fcbb 	bl	8005e3c <HAL_TIM_PWM_Stop>
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000318 	.word	0x20000318

080024d4 <_ZN12CliContainerC1Ev>:
	CliContainer(){}
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4618      	mov	r0, r3
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <_ZN12CliContainerD1Ev>:
	~CliContainer(){}
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <_ZN7Monitor10thresholdsC1Ev>:
	CRITICAL_STATE_NO_BUZZER
};

class Monitor{
private:
	struct thresholds{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	f04f 0200 	mov.w	r2, #0
 8002516:	4b08      	ldr	r3, [pc, #32]	; (8002538 <_ZN7Monitor10thresholdsC1Ev+0x30>)
 8002518:	e9c1 2300 	strd	r2, r3, [r1]
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	f04f 0200 	mov.w	r2, #0
 8002522:	4b06      	ldr	r3, [pc, #24]	; (800253c <_ZN7Monitor10thresholdsC1Ev+0x34>)
 8002524:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4618      	mov	r0, r3
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	403c0000 	.word	0x403c0000
 800253c:	403e0000 	.word	0x403e0000

08002540 <_ZN7MonitorC1Ev>:
		double critical = 30;
	};
	thresholds values;
	dht_STATE state;
public:
	Monitor(){}
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff ffdc 	bl	8002508 <_ZN7Monitor10thresholdsC1Ev>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <_ZN7Monitor10getwarningEv>:
	}
	void SetCriticalValue(double num)
	{
		values.critical = num;
	}
	double getwarning()
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
		{
			return values.warning;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002568:	ec43 2b17 	vmov	d7, r2, r3
		}
 800256c:	eeb0 0a47 	vmov.f32	s0, s14
 8002570:	eef0 0a67 	vmov.f32	s1, s15
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <_ZN7Monitor11getcriticalEv>:
	double getcritical()
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
		{
			return values.critical;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800258c:	ec43 2b17 	vmov	d7, r2, r3
		}
 8002590:	eeb0 0a47 	vmov.f32	s0, s14
 8002594:	eef0 0a67 	vmov.f32	s1, s15
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <_ZN7Monitor8setstateE9dht_STATE>:
	dht_STATE getstate()
	{
		return state;
	}
	void setstate(dht_STATE State)
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
 80025aa:	460b      	mov	r3, r1
 80025ac:	70fb      	strb	r3, [r7, #3]
	{
		state = State;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	78fa      	ldrb	r2, [r7, #3]
 80025b2:	741a      	strb	r2, [r3, #16]
	}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <_write>:
BUZZER buzzer = BUZZER(&htim3);
Monitor monitor = Monitor();
int buzz_off = 0;


int _write(int fd, char *ptr, int len) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	f04f 33ff 	mov.w	r3, #4294967295
 80025d4:	68b9      	ldr	r1, [r7, #8]
 80025d6:	4804      	ldr	r0, [pc, #16]	; (80025e8 <_write+0x28>)
 80025d8:	f004 fd10 	bl	8006ffc <HAL_UART_Transmit>
	return len;
 80025dc:	687b      	ldr	r3, [r7, #4]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	200003b0 	.word	0x200003b0

080025ec <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	80fb      	strh	r3, [r7, #6]
	dht.Dht_onGpioInterrupt(pin_4_Pin);
 80025f6:	2120      	movs	r1, #32
 80025f8:	480a      	ldr	r0, [pc, #40]	; (8002624 <HAL_GPIO_EXTI_Callback+0x38>)
 80025fa:	f7ff f8b1 	bl	8001760 <_ZN3DHT19Dht_onGpioInterruptEt>
	if(HAL_GPIO_ReadPin(button_GPIO_Port, button_Pin) == 0){
 80025fe:	2108      	movs	r1, #8
 8002600:	4809      	ldr	r0, [pc, #36]	; (8002628 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002602:	f000 ffab 	bl	800355c <HAL_GPIO_ReadPin>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	bf0c      	ite	eq
 800260c:	2301      	moveq	r3, #1
 800260e:	2300      	movne	r3, #0
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d002      	beq.n	800261c <HAL_GPIO_EXTI_Callback+0x30>
		buzzer.buzzerStopPlay();
 8002616:	4805      	ldr	r0, [pc, #20]	; (800262c <HAL_GPIO_EXTI_Callback+0x40>)
 8002618:	f7ff ff4a 	bl	80024b0 <_ZN6BUZZER14buzzerStopPlayEv>
	}

}
 800261c:	bf00      	nop
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20000448 	.word	0x20000448
 8002628:	48000400 	.word	0x48000400
 800262c:	2000052c 	.word	0x2000052c

08002630 <mycallback>:
void mycallback(){
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0

}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
	...

08002640 <mymaininit>:

void mymaininit()
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002644:	2036      	movs	r0, #54	; 0x36
 8002646:	f000 fd51 	bl	80030ec <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim6);
 800264a:	4807      	ldr	r0, [pc, #28]	; (8002668 <mymaininit+0x28>)
 800264c:	f003 fa1e 	bl	8005a8c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim3);
 8002650:	4806      	ldr	r0, [pc, #24]	; (800266c <mymaininit+0x2c>)
 8002652:	f003 f98b 	bl	800596c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim1);
 8002656:	4806      	ldr	r0, [pc, #24]	; (8002670 <mymaininit+0x30>)
 8002658:	f003 fa18 	bl	8005a8c <HAL_TIM_Base_Start_IT>
	container.initCLIcontainer();
 800265c:	4805      	ldr	r0, [pc, #20]	; (8002674 <mymaininit+0x34>)
 800265e:	f7fe fe3b 	bl	80012d8 <_ZN12CliContainer16initCLIcontainerEv>
}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000364 	.word	0x20000364
 800266c:	20000318 	.word	0x20000318
 8002670:	200002cc 	.word	0x200002cc
 8002674:	20000474 	.word	0x20000474

08002678 <READ_TEMP_func>:
{

}

void READ_TEMP_func(void *argument)
{
 8002678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	  mymaininit();
 8002680:	f7ff ffde 	bl	8002640 <mymaininit>

  /* Infinite loop */
  for(;;)
  {
  osSemaphoreAcquire(DHT_MONITORHandle, 0xFF);
 8002684:	4b30      	ldr	r3, [pc, #192]	; (8002748 <READ_TEMP_func+0xd0>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	21ff      	movs	r1, #255	; 0xff
 800268a:	4618      	mov	r0, r3
 800268c:	f005 fff6 	bl	800867c <osSemaphoreAcquire>
	  if(dht.Dht_hasData()){
 8002690:	482e      	ldr	r0, [pc, #184]	; (800274c <READ_TEMP_func+0xd4>)
 8002692:	f7ff f901 	bl	8001898 <_ZN3DHT11Dht_hasDataEv>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	bf14      	ite	ne
 800269c:	2301      	movne	r3, #1
 800269e:	2300      	moveq	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0ee      	beq.n	8002684 <READ_TEMP_func+0xc>
		 if(dht.get_temperature()>= monitor.getcritical()){
 80026a6:	4829      	ldr	r0, [pc, #164]	; (800274c <READ_TEMP_func+0xd4>)
 80026a8:	f7ff f914 	bl	80018d4 <_ZN3DHT15get_temperatureEv>
 80026ac:	ec55 4b10 	vmov	r4, r5, d0
 80026b0:	4827      	ldr	r0, [pc, #156]	; (8002750 <READ_TEMP_func+0xd8>)
 80026b2:	f7ff ff64 	bl	800257e <_ZN7Monitor11getcriticalEv>
 80026b6:	ec53 2b10 	vmov	r2, r3, d0
 80026ba:	2101      	movs	r1, #1
 80026bc:	460e      	mov	r6, r1
 80026be:	4620      	mov	r0, r4
 80026c0:	4629      	mov	r1, r5
 80026c2:	f7fe fa2f 	bl	8000b24 <__aeabi_dcmpge>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <READ_TEMP_func+0x58>
 80026cc:	2300      	movs	r3, #0
 80026ce:	461e      	mov	r6, r3
 80026d0:	b2f3      	uxtb	r3, r6
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00a      	beq.n	80026ec <READ_TEMP_func+0x74>
			 monitor.setstate(CRITICAL_STATE);
 80026d6:	2102      	movs	r1, #2
 80026d8:	481d      	ldr	r0, [pc, #116]	; (8002750 <READ_TEMP_func+0xd8>)
 80026da:	f7ff ff62 	bl	80025a2 <_ZN7Monitor8setstateE9dht_STATE>
			 ledblue.Is_blink();
 80026de:	481d      	ldr	r0, [pc, #116]	; (8002754 <READ_TEMP_func+0xdc>)
 80026e0:	f7ff f959 	bl	8001996 <_ZN3LED8Is_blinkEv>
			 buzzer.buzzerStartPlay();
 80026e4:	481c      	ldr	r0, [pc, #112]	; (8002758 <READ_TEMP_func+0xe0>)
 80026e6:	f7ff fecb 	bl	8002480 <_ZN6BUZZER15buzzerStartPlayEv>
 80026ea:	e023      	b.n	8002734 <READ_TEMP_func+0xbc>
		 }
		 else if(dht.get_temperature()>= monitor.getwarning()){
 80026ec:	4817      	ldr	r0, [pc, #92]	; (800274c <READ_TEMP_func+0xd4>)
 80026ee:	f7ff f8f1 	bl	80018d4 <_ZN3DHT15get_temperatureEv>
 80026f2:	ec55 4b10 	vmov	r4, r5, d0
 80026f6:	4816      	ldr	r0, [pc, #88]	; (8002750 <READ_TEMP_func+0xd8>)
 80026f8:	f7ff ff2f 	bl	800255a <_ZN7Monitor10getwarningEv>
 80026fc:	ec53 2b10 	vmov	r2, r3, d0
 8002700:	2101      	movs	r1, #1
 8002702:	460e      	mov	r6, r1
 8002704:	4620      	mov	r0, r4
 8002706:	4629      	mov	r1, r5
 8002708:	f7fe fa0c 	bl	8000b24 <__aeabi_dcmpge>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <READ_TEMP_func+0x9e>
 8002712:	2300      	movs	r3, #0
 8002714:	461e      	mov	r6, r3
 8002716:	b2f3      	uxtb	r3, r6
 8002718:	2b00      	cmp	r3, #0
 800271a:	d007      	beq.n	800272c <READ_TEMP_func+0xb4>
			 monitor.setstate(WARRNING_STATE);
 800271c:	2101      	movs	r1, #1
 800271e:	480c      	ldr	r0, [pc, #48]	; (8002750 <READ_TEMP_func+0xd8>)
 8002720:	f7ff ff3f 	bl	80025a2 <_ZN7Monitor8setstateE9dht_STATE>
			 ledblue.Led_On();
 8002724:	480b      	ldr	r0, [pc, #44]	; (8002754 <READ_TEMP_func+0xdc>)
 8002726:	f7ff f901 	bl	800192c <_ZN3LED6Led_OnEv>
 800272a:	e003      	b.n	8002734 <READ_TEMP_func+0xbc>
		 }
		 else {
			 monitor.setstate(NORMAL_STATE);
 800272c:	2100      	movs	r1, #0
 800272e:	4808      	ldr	r0, [pc, #32]	; (8002750 <READ_TEMP_func+0xd8>)
 8002730:	f7ff ff37 	bl	80025a2 <_ZN7Monitor8setstateE9dht_STATE>
		 }
		 printf("temp is %f\r\n",dht.get_temperature());
 8002734:	4805      	ldr	r0, [pc, #20]	; (800274c <READ_TEMP_func+0xd4>)
 8002736:	f7ff f8cd 	bl	80018d4 <_ZN3DHT15get_temperatureEv>
 800273a:	ec53 2b10 	vmov	r2, r3, d0
 800273e:	4807      	ldr	r0, [pc, #28]	; (800275c <READ_TEMP_func+0xe4>)
 8002740:	f009 fe84 	bl	800c44c <iprintf>
  osSemaphoreAcquire(DHT_MONITORHandle, 0xFF);
 8002744:	e79e      	b.n	8002684 <READ_TEMP_func+0xc>
 8002746:	bf00      	nop
 8002748:	20000444 	.word	0x20000444
 800274c:	20000448 	.word	0x20000448
 8002750:	20000530 	.word	0x20000530
 8002754:	20000518 	.word	0x20000518
 8002758:	2000052c 	.word	0x2000052c
 800275c:	0800f0b0 	.word	0x0800f0b0

08002760 <comtask_func>:
  }
  /* USER CODE END 5 */
}

void comtask_func(void *argument)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN comtask_func */

	/* Infinite loop */
	for (;;) {

		if (commTask()) {
 8002768:	f7ff fb0c 	bl	8001d84 <_Z8commTaskv>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	bf14      	ite	ne
 8002772:	2301      	movne	r3, #1
 8002774:	2300      	moveq	r3, #0
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0f5      	beq.n	8002768 <comtask_func+0x8>
			handleCommand();
 800277c:	f7ff fb86 	bl	8001e8c <_Z13handleCommandv>
		if (commTask()) {
 8002780:	e7f2      	b.n	8002768 <comtask_func+0x8>
	...

08002784 <monitor_func>:
		}
	}
	/* USER CODE END comtask_func */
}
void monitor_func(void *argument)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 /* USER CODE BEGIN monitor_func */
 /* Infinite loop */
 for(;;)
 {
	 osSemaphoreRelease(DHT_MONITORHandle);
 800278c:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <monitor_func+0x24>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f005 ffc5 	bl	8008720 <osSemaphoreRelease>
	 dht.Dht_readAsync();
 8002796:	4805      	ldr	r0, [pc, #20]	; (80027ac <monitor_func+0x28>)
 8002798:	f7fe ffba 	bl	8001710 <_ZN3DHT13Dht_readAsyncEv>
	 osDelay(1000);
 800279c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027a0:	f005 fec8 	bl	8008534 <osDelay>
	 osSemaphoreRelease(DHT_MONITORHandle);
 80027a4:	e7f2      	b.n	800278c <monitor_func+0x8>
 80027a6:	bf00      	nop
 80027a8:	20000444 	.word	0x20000444
 80027ac:	20000448 	.word	0x20000448

080027b0 <_Z41__static_initialization_and_destruction_0ii>:
		FRAME_0,FRAME_1,
		FRAME_0,FRAME_1,
		FRAME_2,FRAME_2,FRAME_0,
		0

};
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d11e      	bne.n	80027fe <_Z41__static_initialization_and_destruction_0ii+0x4e>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d119      	bne.n	80027fe <_Z41__static_initialization_and_destruction_0ii+0x4e>
DHT dht = DHT(GPIOB,pin_4_Pin);
 80027ca:	2220      	movs	r2, #32
 80027cc:	4913      	ldr	r1, [pc, #76]	; (800281c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80027ce:	4814      	ldr	r0, [pc, #80]	; (8002820 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80027d0:	f7fe ff54 	bl	800167c <_ZN3DHTC1EP12GPIO_TypeDeft>
_RTC rtc = _RTC(&hi2c1,0xD0);
 80027d4:	22d0      	movs	r2, #208	; 0xd0
 80027d6:	4913      	ldr	r1, [pc, #76]	; (8002824 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80027d8:	4813      	ldr	r0, [pc, #76]	; (8002828 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80027da:	f7ff f8e9 	bl	80019b0 <_ZN4_RTCC1EP19__I2C_HandleTypeDefm>
CliContainer container = CliContainer();
 80027de:	4813      	ldr	r0, [pc, #76]	; (800282c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80027e0:	f7ff fe78 	bl	80024d4 <_ZN12CliContainerC1Ev>
LED ledblue = LED(LD2_GPIO_Port, LD2_Pin);
 80027e4:	2220      	movs	r2, #32
 80027e6:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80027ea:	4811      	ldr	r0, [pc, #68]	; (8002830 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80027ec:	f7ff f884 	bl	80018f8 <_ZN3LEDC1EP12GPIO_TypeDeft>
BUZZER buzzer = BUZZER(&htim3);
 80027f0:	4910      	ldr	r1, [pc, #64]	; (8002834 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80027f2:	4811      	ldr	r0, [pc, #68]	; (8002838 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80027f4:	f7ff fe37 	bl	8002466 <_ZN6BUZZERC1EP17TIM_HandleTypeDef>
Monitor monitor = Monitor();
 80027f8:	4810      	ldr	r0, [pc, #64]	; (800283c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80027fa:	f7ff fea1 	bl	8002540 <_ZN7MonitorC1Ev>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d107      	bne.n	8002814 <_Z41__static_initialization_and_destruction_0ii+0x64>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800280a:	4293      	cmp	r3, r2
 800280c:	d102      	bne.n	8002814 <_Z41__static_initialization_and_destruction_0ii+0x64>
CliContainer container = CliContainer();
 800280e:	4807      	ldr	r0, [pc, #28]	; (800282c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8002810:	f7ff fe6f 	bl	80024f2 <_ZN12CliContainerD1Ev>
};
 8002814:	bf00      	nop
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	48000400 	.word	0x48000400
 8002820:	20000448 	.word	0x20000448
 8002824:	20000278 	.word	0x20000278
 8002828:	20000468 	.word	0x20000468
 800282c:	20000474 	.word	0x20000474
 8002830:	20000518 	.word	0x20000518
 8002834:	20000318 	.word	0x20000318
 8002838:	2000052c 	.word	0x2000052c
 800283c:	20000530 	.word	0x20000530

08002840 <_GLOBAL__sub_I_dht>:
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
 8002844:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002848:	2001      	movs	r0, #1
 800284a:	f7ff ffb1 	bl	80027b0 <_Z41__static_initialization_and_destruction_0ii>
 800284e:	bd80      	pop	{r7, pc}

08002850 <_GLOBAL__sub_D_dht>:
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
 8002854:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002858:	2000      	movs	r0, #0
 800285a:	f7ff ffa9 	bl	80027b0 <_Z41__static_initialization_and_destruction_0ii>
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002866:	4b11      	ldr	r3, [pc, #68]	; (80028ac <HAL_MspInit+0x4c>)
 8002868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800286a:	4a10      	ldr	r2, [pc, #64]	; (80028ac <HAL_MspInit+0x4c>)
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	6613      	str	r3, [r2, #96]	; 0x60
 8002872:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <HAL_MspInit+0x4c>)
 8002874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	607b      	str	r3, [r7, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800287e:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <HAL_MspInit+0x4c>)
 8002880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002882:	4a0a      	ldr	r2, [pc, #40]	; (80028ac <HAL_MspInit+0x4c>)
 8002884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002888:	6593      	str	r3, [r2, #88]	; 0x58
 800288a:	4b08      	ldr	r3, [pc, #32]	; (80028ac <HAL_MspInit+0x4c>)
 800288c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002896:	2200      	movs	r2, #0
 8002898:	210f      	movs	r1, #15
 800289a:	f06f 0001 	mvn.w	r0, #1
 800289e:	f000 fc09 	bl	80030b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40021000 	.word	0x40021000

080028b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b0ac      	sub	sp, #176	; 0xb0
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]
 80028c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028c8:	f107 0314 	add.w	r3, r7, #20
 80028cc:	2288      	movs	r2, #136	; 0x88
 80028ce:	2100      	movs	r1, #0
 80028d0:	4618      	mov	r0, r3
 80028d2:	f009 f869 	bl	800b9a8 <memset>
  if(hi2c->Instance==I2C1)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a21      	ldr	r2, [pc, #132]	; (8002960 <HAL_I2C_MspInit+0xb0>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d13b      	bne.n	8002958 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80028e0:	2340      	movs	r3, #64	; 0x40
 80028e2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80028e4:	2300      	movs	r3, #0
 80028e6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028e8:	f107 0314 	add.w	r3, r7, #20
 80028ec:	4618      	mov	r0, r3
 80028ee:	f002 fb29 	bl	8004f44 <HAL_RCCEx_PeriphCLKConfig>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80028f8:	f7ff fdb0 	bl	800245c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028fc:	4b19      	ldr	r3, [pc, #100]	; (8002964 <HAL_I2C_MspInit+0xb4>)
 80028fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002900:	4a18      	ldr	r2, [pc, #96]	; (8002964 <HAL_I2C_MspInit+0xb4>)
 8002902:	f043 0302 	orr.w	r3, r3, #2
 8002906:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002908:	4b16      	ldr	r3, [pc, #88]	; (8002964 <HAL_I2C_MspInit+0xb4>)
 800290a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002914:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002918:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800291c:	2312      	movs	r3, #18
 800291e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002928:	2303      	movs	r3, #3
 800292a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800292e:	2304      	movs	r3, #4
 8002930:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002934:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002938:	4619      	mov	r1, r3
 800293a:	480b      	ldr	r0, [pc, #44]	; (8002968 <HAL_I2C_MspInit+0xb8>)
 800293c:	f000 fc64 	bl	8003208 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002940:	4b08      	ldr	r3, [pc, #32]	; (8002964 <HAL_I2C_MspInit+0xb4>)
 8002942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002944:	4a07      	ldr	r2, [pc, #28]	; (8002964 <HAL_I2C_MspInit+0xb4>)
 8002946:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800294a:	6593      	str	r3, [r2, #88]	; 0x58
 800294c:	4b05      	ldr	r3, [pc, #20]	; (8002964 <HAL_I2C_MspInit+0xb4>)
 800294e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002958:	bf00      	nop
 800295a:	37b0      	adds	r7, #176	; 0xb0
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40005400 	.word	0x40005400
 8002964:	40021000 	.word	0x40021000
 8002968:	48000400 	.word	0x48000400

0800296c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a27      	ldr	r2, [pc, #156]	; (8002a18 <HAL_TIM_Base_MspInit+0xac>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d114      	bne.n	80029a8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800297e:	4b27      	ldr	r3, [pc, #156]	; (8002a1c <HAL_TIM_Base_MspInit+0xb0>)
 8002980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002982:	4a26      	ldr	r2, [pc, #152]	; (8002a1c <HAL_TIM_Base_MspInit+0xb0>)
 8002984:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002988:	6613      	str	r3, [r2, #96]	; 0x60
 800298a:	4b24      	ldr	r3, [pc, #144]	; (8002a1c <HAL_TIM_Base_MspInit+0xb0>)
 800298c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800298e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002992:	617b      	str	r3, [r7, #20]
 8002994:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 8002996:	2200      	movs	r2, #0
 8002998:	210f      	movs	r1, #15
 800299a:	2019      	movs	r0, #25
 800299c:	f000 fb8a 	bl	80030b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80029a0:	2019      	movs	r0, #25
 80029a2:	f000 fba3 	bl	80030ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80029a6:	e032      	b.n	8002a0e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a1c      	ldr	r2, [pc, #112]	; (8002a20 <HAL_TIM_Base_MspInit+0xb4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d114      	bne.n	80029dc <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029b2:	4b1a      	ldr	r3, [pc, #104]	; (8002a1c <HAL_TIM_Base_MspInit+0xb0>)
 80029b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b6:	4a19      	ldr	r2, [pc, #100]	; (8002a1c <HAL_TIM_Base_MspInit+0xb0>)
 80029b8:	f043 0302 	orr.w	r3, r3, #2
 80029bc:	6593      	str	r3, [r2, #88]	; 0x58
 80029be:	4b17      	ldr	r3, [pc, #92]	; (8002a1c <HAL_TIM_Base_MspInit+0xb0>)
 80029c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80029ca:	2200      	movs	r2, #0
 80029cc:	2105      	movs	r1, #5
 80029ce:	201d      	movs	r0, #29
 80029d0:	f000 fb70 	bl	80030b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80029d4:	201d      	movs	r0, #29
 80029d6:	f000 fb89 	bl	80030ec <HAL_NVIC_EnableIRQ>
}
 80029da:	e018      	b.n	8002a0e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM6)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a10      	ldr	r2, [pc, #64]	; (8002a24 <HAL_TIM_Base_MspInit+0xb8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d113      	bne.n	8002a0e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80029e6:	4b0d      	ldr	r3, [pc, #52]	; (8002a1c <HAL_TIM_Base_MspInit+0xb0>)
 80029e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ea:	4a0c      	ldr	r2, [pc, #48]	; (8002a1c <HAL_TIM_Base_MspInit+0xb0>)
 80029ec:	f043 0310 	orr.w	r3, r3, #16
 80029f0:	6593      	str	r3, [r2, #88]	; 0x58
 80029f2:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <HAL_TIM_Base_MspInit+0xb0>)
 80029f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f6:	f003 0310 	and.w	r3, r3, #16
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80029fe:	2200      	movs	r2, #0
 8002a00:	2105      	movs	r1, #5
 8002a02:	2036      	movs	r0, #54	; 0x36
 8002a04:	f000 fb56 	bl	80030b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a08:	2036      	movs	r0, #54	; 0x36
 8002a0a:	f000 fb6f 	bl	80030ec <HAL_NVIC_EnableIRQ>
}
 8002a0e:	bf00      	nop
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40012c00 	.word	0x40012c00
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	40000400 	.word	0x40000400
 8002a24:	40001000 	.word	0x40001000

08002a28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b088      	sub	sp, #32
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a30:	f107 030c 	add.w	r3, r7, #12
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	60da      	str	r2, [r3, #12]
 8002a3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a11      	ldr	r2, [pc, #68]	; (8002a8c <HAL_TIM_MspPostInit+0x64>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d11b      	bne.n	8002a82 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a4a:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <HAL_TIM_MspPostInit+0x68>)
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4e:	4a10      	ldr	r2, [pc, #64]	; (8002a90 <HAL_TIM_MspPostInit+0x68>)
 8002a50:	f043 0302 	orr.w	r3, r3, #2
 8002a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a56:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <HAL_TIM_MspPostInit+0x68>)
 8002a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	60bb      	str	r3, [r7, #8]
 8002a60:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a62:	2310      	movs	r3, #16
 8002a64:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a66:	2302      	movs	r3, #2
 8002a68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a72:	2302      	movs	r3, #2
 8002a74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a76:	f107 030c 	add.w	r3, r7, #12
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4805      	ldr	r0, [pc, #20]	; (8002a94 <HAL_TIM_MspPostInit+0x6c>)
 8002a7e:	f000 fbc3 	bl	8003208 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002a82:	bf00      	nop
 8002a84:	3720      	adds	r7, #32
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40000400 	.word	0x40000400
 8002a90:	40021000 	.word	0x40021000
 8002a94:	48000400 	.word	0x48000400

08002a98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b0ac      	sub	sp, #176	; 0xb0
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	605a      	str	r2, [r3, #4]
 8002aaa:	609a      	str	r2, [r3, #8]
 8002aac:	60da      	str	r2, [r3, #12]
 8002aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ab0:	f107 0314 	add.w	r3, r7, #20
 8002ab4:	2288      	movs	r2, #136	; 0x88
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f008 ff75 	bl	800b9a8 <memset>
  if(huart->Instance==USART2)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a25      	ldr	r2, [pc, #148]	; (8002b58 <HAL_UART_MspInit+0xc0>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d143      	bne.n	8002b50 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002acc:	2300      	movs	r3, #0
 8002ace:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ad0:	f107 0314 	add.w	r3, r7, #20
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f002 fa35 	bl	8004f44 <HAL_RCCEx_PeriphCLKConfig>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002ae0:	f7ff fcbc 	bl	800245c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ae4:	4b1d      	ldr	r3, [pc, #116]	; (8002b5c <HAL_UART_MspInit+0xc4>)
 8002ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae8:	4a1c      	ldr	r2, [pc, #112]	; (8002b5c <HAL_UART_MspInit+0xc4>)
 8002aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aee:	6593      	str	r3, [r2, #88]	; 0x58
 8002af0:	4b1a      	ldr	r3, [pc, #104]	; (8002b5c <HAL_UART_MspInit+0xc4>)
 8002af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002afc:	4b17      	ldr	r3, [pc, #92]	; (8002b5c <HAL_UART_MspInit+0xc4>)
 8002afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b00:	4a16      	ldr	r2, [pc, #88]	; (8002b5c <HAL_UART_MspInit+0xc4>)
 8002b02:	f043 0301 	orr.w	r3, r3, #1
 8002b06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b08:	4b14      	ldr	r3, [pc, #80]	; (8002b5c <HAL_UART_MspInit+0xc4>)
 8002b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b14:	230c      	movs	r3, #12
 8002b16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b26:	2303      	movs	r3, #3
 8002b28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b2c:	2307      	movs	r3, #7
 8002b2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b32:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b36:	4619      	mov	r1, r3
 8002b38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b3c:	f000 fb64 	bl	8003208 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002b40:	2200      	movs	r2, #0
 8002b42:	2105      	movs	r1, #5
 8002b44:	2026      	movs	r0, #38	; 0x26
 8002b46:	f000 fab5 	bl	80030b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b4a:	2026      	movs	r0, #38	; 0x26
 8002b4c:	f000 face 	bl	80030ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b50:	bf00      	nop
 8002b52:	37b0      	adds	r7, #176	; 0xb0
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40004400 	.word	0x40004400
 8002b5c:	40021000 	.word	0x40021000

08002b60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08c      	sub	sp, #48	; 0x30
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8002b70:	2200      	movs	r2, #0
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	2019      	movs	r0, #25
 8002b76:	f000 fa9d 	bl	80030b4 <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002b7a:	2019      	movs	r0, #25
 8002b7c:	f000 fab6 	bl	80030ec <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8002b80:	4b1e      	ldr	r3, [pc, #120]	; (8002bfc <HAL_InitTick+0x9c>)
 8002b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b84:	4a1d      	ldr	r2, [pc, #116]	; (8002bfc <HAL_InitTick+0x9c>)
 8002b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b8a:	6613      	str	r3, [r2, #96]	; 0x60
 8002b8c:	4b1b      	ldr	r3, [pc, #108]	; (8002bfc <HAL_InitTick+0x9c>)
 8002b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b98:	f107 0210 	add.w	r2, r7, #16
 8002b9c:	f107 0314 	add.w	r3, r7, #20
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f002 f93c 	bl	8004e20 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002ba8:	f002 f924 	bl	8004df4 <HAL_RCC_GetPCLK2Freq>
 8002bac:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb0:	4a13      	ldr	r2, [pc, #76]	; (8002c00 <HAL_InitTick+0xa0>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	0c9b      	lsrs	r3, r3, #18
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8002bbc:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <HAL_InitTick+0xa4>)
 8002bbe:	4a12      	ldr	r2, [pc, #72]	; (8002c08 <HAL_InitTick+0xa8>)
 8002bc0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8002bc2:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <HAL_InitTick+0xa4>)
 8002bc4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bc8:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8002bca:	4a0e      	ldr	r2, [pc, #56]	; (8002c04 <HAL_InitTick+0xa4>)
 8002bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bce:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <HAL_InitTick+0xa4>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bd6:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <HAL_InitTick+0xa4>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8002bdc:	4809      	ldr	r0, [pc, #36]	; (8002c04 <HAL_InitTick+0xa4>)
 8002bde:	f002 fe6d 	bl	80058bc <HAL_TIM_Base_Init>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d104      	bne.n	8002bf2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 8002be8:	4806      	ldr	r0, [pc, #24]	; (8002c04 <HAL_InitTick+0xa4>)
 8002bea:	f002 ff4f 	bl	8005a8c <HAL_TIM_Base_Start_IT>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	e000      	b.n	8002bf4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3730      	adds	r7, #48	; 0x30
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	431bde83 	.word	0x431bde83
 8002c04:	20000548 	.word	0x20000548
 8002c08:	40014400 	.word	0x40014400

08002c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c10:	e7fe      	b.n	8002c10 <NMI_Handler+0x4>

08002c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c12:	b480      	push	{r7}
 8002c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c16:	e7fe      	b.n	8002c16 <HardFault_Handler+0x4>

08002c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c1c:	e7fe      	b.n	8002c1c <MemManage_Handler+0x4>

08002c1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c22:	e7fe      	b.n	8002c22 <BusFault_Handler+0x4>

08002c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c28:	e7fe      	b.n	8002c28 <UsageFault_Handler+0x4>

08002c2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(pin_4_Pin);
 8002c3c:	2020      	movs	r0, #32
 8002c3e:	f000 fcd7 	bl	80035f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c4c:	4803      	ldr	r0, [pc, #12]	; (8002c5c <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002c4e:	f003 f98b 	bl	8005f68 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002c52:	4803      	ldr	r0, [pc, #12]	; (8002c60 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002c54:	f003 f988 	bl	8005f68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002c58:	bf00      	nop
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	200002cc 	.word	0x200002cc
 8002c60:	20000548 	.word	0x20000548

08002c64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c68:	4802      	ldr	r0, [pc, #8]	; (8002c74 <TIM3_IRQHandler+0x10>)
 8002c6a:	f003 f97d 	bl	8005f68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000318 	.word	0x20000318

08002c78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c7c:	4802      	ldr	r0, [pc, #8]	; (8002c88 <USART2_IRQHandler+0x10>)
 8002c7e:	f004 fb23 	bl	80072c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	200003b0 	.word	0x200003b0

08002c8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002c90:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002c94:	f000 fcac 	bl	80035f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c98:	bf00      	nop
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ca0:	4802      	ldr	r0, [pc, #8]	; (8002cac <TIM6_DAC_IRQHandler+0x10>)
 8002ca2:	f003 f961 	bl	8005f68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000364 	.word	0x20000364

08002cb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
	return 1;
 8002cb4:	2301      	movs	r3, #1
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <_kill>:

int _kill(int pid, int sig)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002cca:	f008 fe25 	bl	800b918 <__errno>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2216      	movs	r2, #22
 8002cd2:	601a      	str	r2, [r3, #0]
	return -1;
 8002cd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <_exit>:

void _exit (int status)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff ffe7 	bl	8002cc0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002cf2:	e7fe      	b.n	8002cf2 <_exit+0x12>

08002cf4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	e00a      	b.n	8002d1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d06:	f3af 8000 	nop.w
 8002d0a:	4601      	mov	r1, r0
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	60ba      	str	r2, [r7, #8]
 8002d12:	b2ca      	uxtb	r2, r1
 8002d14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	617b      	str	r3, [r7, #20]
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	dbf0      	blt.n	8002d06 <_read+0x12>
	}

return len;
 8002d24:	687b      	ldr	r3, [r7, #4]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <_close>:
	}
	return len;
}

int _close(int file)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
	return -1;
 8002d36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d56:	605a      	str	r2, [r3, #4]
	return 0;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <_isatty>:

int _isatty(int file)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
	return 1;
 8002d6e:	2301      	movs	r3, #1
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
	return 0;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3714      	adds	r7, #20
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
	...

08002d98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002da0:	4a14      	ldr	r2, [pc, #80]	; (8002df4 <_sbrk+0x5c>)
 8002da2:	4b15      	ldr	r3, [pc, #84]	; (8002df8 <_sbrk+0x60>)
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dac:	4b13      	ldr	r3, [pc, #76]	; (8002dfc <_sbrk+0x64>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d102      	bne.n	8002dba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002db4:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <_sbrk+0x64>)
 8002db6:	4a12      	ldr	r2, [pc, #72]	; (8002e00 <_sbrk+0x68>)
 8002db8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dba:	4b10      	ldr	r3, [pc, #64]	; (8002dfc <_sbrk+0x64>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d207      	bcs.n	8002dd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dc8:	f008 fda6 	bl	800b918 <__errno>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	220c      	movs	r2, #12
 8002dd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd6:	e009      	b.n	8002dec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dd8:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <_sbrk+0x64>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dde:	4b07      	ldr	r3, [pc, #28]	; (8002dfc <_sbrk+0x64>)
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4413      	add	r3, r2
 8002de6:	4a05      	ldr	r2, [pc, #20]	; (8002dfc <_sbrk+0x64>)
 8002de8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dea:	68fb      	ldr	r3, [r7, #12]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	20018000 	.word	0x20018000
 8002df8:	00000400 	.word	0x00000400
 8002dfc:	20000594 	.word	0x20000594
 8002e00:	20003628 	.word	0x20003628

08002e04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002e08:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <SystemInit+0x20>)
 8002e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0e:	4a05      	ldr	r2, [pc, #20]	; (8002e24 <SystemInit+0x20>)
 8002e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002e18:	bf00      	nop
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	e000ed00 	.word	0xe000ed00

08002e28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002e28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e60 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e2c:	f7ff ffea 	bl	8002e04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e30:	480c      	ldr	r0, [pc, #48]	; (8002e64 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e32:	490d      	ldr	r1, [pc, #52]	; (8002e68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e34:	4a0d      	ldr	r2, [pc, #52]	; (8002e6c <LoopForever+0xe>)
  movs r3, #0
 8002e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e38:	e002      	b.n	8002e40 <LoopCopyDataInit>

08002e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e3e:	3304      	adds	r3, #4

08002e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e44:	d3f9      	bcc.n	8002e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e46:	4a0a      	ldr	r2, [pc, #40]	; (8002e70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e48:	4c0a      	ldr	r4, [pc, #40]	; (8002e74 <LoopForever+0x16>)
  movs r3, #0
 8002e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e4c:	e001      	b.n	8002e52 <LoopFillZerobss>

08002e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e50:	3204      	adds	r2, #4

08002e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e54:	d3fb      	bcc.n	8002e4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e56:	f008 fd65 	bl	800b924 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e5a:	f7ff f833 	bl	8001ec4 <main>

08002e5e <LoopForever>:

LoopForever:
    b LoopForever
 8002e5e:	e7fe      	b.n	8002e5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002e60:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e68:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002e6c:	0800f6fc 	.word	0x0800f6fc
  ldr r2, =_sbss
 8002e70:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002e74:	20003628 	.word	0x20003628

08002e78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e78:	e7fe      	b.n	8002e78 <ADC1_2_IRQHandler>
	...

08002e7c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e86:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <HAL_Init+0x3c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a0b      	ldr	r2, [pc, #44]	; (8002eb8 <HAL_Init+0x3c>)
 8002e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e90:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e92:	2003      	movs	r0, #3
 8002e94:	f000 f903 	bl	800309e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e98:	200f      	movs	r0, #15
 8002e9a:	f7ff fe61 	bl	8002b60 <HAL_InitTick>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	71fb      	strb	r3, [r7, #7]
 8002ea8:	e001      	b.n	8002eae <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002eaa:	f7ff fcd9 	bl	8002860 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002eae:	79fb      	ldrb	r3, [r7, #7]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40022000 	.word	0x40022000

08002ebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ec0:	4b06      	ldr	r3, [pc, #24]	; (8002edc <HAL_IncTick+0x20>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <HAL_IncTick+0x24>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4413      	add	r3, r2
 8002ecc:	4a04      	ldr	r2, [pc, #16]	; (8002ee0 <HAL_IncTick+0x24>)
 8002ece:	6013      	str	r3, [r2, #0]
}
 8002ed0:	bf00      	nop
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	20000008 	.word	0x20000008
 8002ee0:	20000598 	.word	0x20000598

08002ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ee8:	4b03      	ldr	r3, [pc, #12]	; (8002ef8 <HAL_GetTick+0x14>)
 8002eea:	681b      	ldr	r3, [r3, #0]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	20000598 	.word	0x20000598

08002efc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f04:	f7ff ffee 	bl	8002ee4 <HAL_GetTick>
 8002f08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f14:	d005      	beq.n	8002f22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002f16:	4b0a      	ldr	r3, [pc, #40]	; (8002f40 <HAL_Delay+0x44>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4413      	add	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f22:	bf00      	nop
 8002f24:	f7ff ffde 	bl	8002ee4 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d8f7      	bhi.n	8002f24 <HAL_Delay+0x28>
  {
  }
}
 8002f34:	bf00      	nop
 8002f36:	bf00      	nop
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	20000008 	.word	0x20000008

08002f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f54:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <__NVIC_SetPriorityGrouping+0x44>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f60:	4013      	ands	r3, r2
 8002f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f76:	4a04      	ldr	r2, [pc, #16]	; (8002f88 <__NVIC_SetPriorityGrouping+0x44>)
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	60d3      	str	r3, [r2, #12]
}
 8002f7c:	bf00      	nop
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	e000ed00 	.word	0xe000ed00

08002f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f90:	4b04      	ldr	r3, [pc, #16]	; (8002fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	0a1b      	lsrs	r3, r3, #8
 8002f96:	f003 0307 	and.w	r3, r3, #7
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	e000ed00 	.word	0xe000ed00

08002fa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	db0b      	blt.n	8002fd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fba:	79fb      	ldrb	r3, [r7, #7]
 8002fbc:	f003 021f 	and.w	r2, r3, #31
 8002fc0:	4907      	ldr	r1, [pc, #28]	; (8002fe0 <__NVIC_EnableIRQ+0x38>)
 8002fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	2001      	movs	r0, #1
 8002fca:	fa00 f202 	lsl.w	r2, r0, r2
 8002fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	e000e100 	.word	0xe000e100

08002fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	6039      	str	r1, [r7, #0]
 8002fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	db0a      	blt.n	800300e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	490c      	ldr	r1, [pc, #48]	; (8003030 <__NVIC_SetPriority+0x4c>)
 8002ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003002:	0112      	lsls	r2, r2, #4
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	440b      	add	r3, r1
 8003008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800300c:	e00a      	b.n	8003024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	b2da      	uxtb	r2, r3
 8003012:	4908      	ldr	r1, [pc, #32]	; (8003034 <__NVIC_SetPriority+0x50>)
 8003014:	79fb      	ldrb	r3, [r7, #7]
 8003016:	f003 030f 	and.w	r3, r3, #15
 800301a:	3b04      	subs	r3, #4
 800301c:	0112      	lsls	r2, r2, #4
 800301e:	b2d2      	uxtb	r2, r2
 8003020:	440b      	add	r3, r1
 8003022:	761a      	strb	r2, [r3, #24]
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	e000e100 	.word	0xe000e100
 8003034:	e000ed00 	.word	0xe000ed00

08003038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003038:	b480      	push	{r7}
 800303a:	b089      	sub	sp, #36	; 0x24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	f1c3 0307 	rsb	r3, r3, #7
 8003052:	2b04      	cmp	r3, #4
 8003054:	bf28      	it	cs
 8003056:	2304      	movcs	r3, #4
 8003058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	3304      	adds	r3, #4
 800305e:	2b06      	cmp	r3, #6
 8003060:	d902      	bls.n	8003068 <NVIC_EncodePriority+0x30>
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	3b03      	subs	r3, #3
 8003066:	e000      	b.n	800306a <NVIC_EncodePriority+0x32>
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800306c:	f04f 32ff 	mov.w	r2, #4294967295
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	43da      	mvns	r2, r3
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	401a      	ands	r2, r3
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003080:	f04f 31ff 	mov.w	r1, #4294967295
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	fa01 f303 	lsl.w	r3, r1, r3
 800308a:	43d9      	mvns	r1, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003090:	4313      	orrs	r3, r2
         );
}
 8003092:	4618      	mov	r0, r3
 8003094:	3724      	adds	r7, #36	; 0x24
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7ff ff4c 	bl	8002f44 <__NVIC_SetPriorityGrouping>
}
 80030ac:	bf00      	nop
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
 80030c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030c2:	2300      	movs	r3, #0
 80030c4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030c6:	f7ff ff61 	bl	8002f8c <__NVIC_GetPriorityGrouping>
 80030ca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	68b9      	ldr	r1, [r7, #8]
 80030d0:	6978      	ldr	r0, [r7, #20]
 80030d2:	f7ff ffb1 	bl	8003038 <NVIC_EncodePriority>
 80030d6:	4602      	mov	r2, r0
 80030d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030dc:	4611      	mov	r1, r2
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff ff80 	bl	8002fe4 <__NVIC_SetPriority>
}
 80030e4:	bf00      	nop
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff ff54 	bl	8002fa8 <__NVIC_EnableIRQ>
}
 8003100:	bf00      	nop
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003110:	2300      	movs	r3, #0
 8003112:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d008      	beq.n	8003132 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2204      	movs	r2, #4
 8003124:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e022      	b.n	8003178 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 020e 	bic.w	r2, r2, #14
 8003140:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0201 	bic.w	r2, r2, #1
 8003150:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003156:	f003 021c 	and.w	r2, r3, #28
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	2101      	movs	r1, #1
 8003160:	fa01 f202 	lsl.w	r2, r1, r2
 8003164:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003176:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003178:	4618      	mov	r0, r3
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d005      	beq.n	80031a8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2204      	movs	r2, #4
 80031a0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	73fb      	strb	r3, [r7, #15]
 80031a6:	e029      	b.n	80031fc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 020e 	bic.w	r2, r2, #14
 80031b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0201 	bic.w	r2, r2, #1
 80031c6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031cc:	f003 021c 	and.w	r2, r3, #28
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	2101      	movs	r1, #1
 80031d6:	fa01 f202 	lsl.w	r2, r1, r2
 80031da:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	4798      	blx	r3
    }
  }
  return status;
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003216:	e17f      	b.n	8003518 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	2101      	movs	r1, #1
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	fa01 f303 	lsl.w	r3, r1, r3
 8003224:	4013      	ands	r3, r2
 8003226:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 8171 	beq.w	8003512 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 0303 	and.w	r3, r3, #3
 8003238:	2b01      	cmp	r3, #1
 800323a:	d005      	beq.n	8003248 <HAL_GPIO_Init+0x40>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 0303 	and.w	r3, r3, #3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d130      	bne.n	80032aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	2203      	movs	r2, #3
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	43db      	mvns	r3, r3
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	4013      	ands	r3, r2
 800325e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800327e:	2201      	movs	r2, #1
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	43db      	mvns	r3, r3
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	4013      	ands	r3, r2
 800328c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	091b      	lsrs	r3, r3, #4
 8003294:	f003 0201 	and.w	r2, r3, #1
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d118      	bne.n	80032e8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80032bc:	2201      	movs	r2, #1
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	43db      	mvns	r3, r3
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	4013      	ands	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	08db      	lsrs	r3, r3, #3
 80032d2:	f003 0201 	and.w	r2, r3, #1
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	4313      	orrs	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 0303 	and.w	r3, r3, #3
 80032f0:	2b03      	cmp	r3, #3
 80032f2:	d017      	beq.n	8003324 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	2203      	movs	r2, #3
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	43db      	mvns	r3, r3
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4013      	ands	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	4313      	orrs	r3, r2
 800331c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f003 0303 	and.w	r3, r3, #3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d123      	bne.n	8003378 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	08da      	lsrs	r2, r3, #3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3208      	adds	r2, #8
 8003338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800333c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	220f      	movs	r2, #15
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	4013      	ands	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	08da      	lsrs	r2, r3, #3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	3208      	adds	r2, #8
 8003372:	6939      	ldr	r1, [r7, #16]
 8003374:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	2203      	movs	r2, #3
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	4013      	ands	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f003 0203 	and.w	r2, r3, #3
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 80ac 	beq.w	8003512 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ba:	4b5f      	ldr	r3, [pc, #380]	; (8003538 <HAL_GPIO_Init+0x330>)
 80033bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033be:	4a5e      	ldr	r2, [pc, #376]	; (8003538 <HAL_GPIO_Init+0x330>)
 80033c0:	f043 0301 	orr.w	r3, r3, #1
 80033c4:	6613      	str	r3, [r2, #96]	; 0x60
 80033c6:	4b5c      	ldr	r3, [pc, #368]	; (8003538 <HAL_GPIO_Init+0x330>)
 80033c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	60bb      	str	r3, [r7, #8]
 80033d0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80033d2:	4a5a      	ldr	r2, [pc, #360]	; (800353c <HAL_GPIO_Init+0x334>)
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	089b      	lsrs	r3, r3, #2
 80033d8:	3302      	adds	r3, #2
 80033da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033de:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	220f      	movs	r2, #15
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43db      	mvns	r3, r3
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4013      	ands	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80033fc:	d025      	beq.n	800344a <HAL_GPIO_Init+0x242>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a4f      	ldr	r2, [pc, #316]	; (8003540 <HAL_GPIO_Init+0x338>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d01f      	beq.n	8003446 <HAL_GPIO_Init+0x23e>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a4e      	ldr	r2, [pc, #312]	; (8003544 <HAL_GPIO_Init+0x33c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d019      	beq.n	8003442 <HAL_GPIO_Init+0x23a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a4d      	ldr	r2, [pc, #308]	; (8003548 <HAL_GPIO_Init+0x340>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d013      	beq.n	800343e <HAL_GPIO_Init+0x236>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a4c      	ldr	r2, [pc, #304]	; (800354c <HAL_GPIO_Init+0x344>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00d      	beq.n	800343a <HAL_GPIO_Init+0x232>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a4b      	ldr	r2, [pc, #300]	; (8003550 <HAL_GPIO_Init+0x348>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d007      	beq.n	8003436 <HAL_GPIO_Init+0x22e>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a4a      	ldr	r2, [pc, #296]	; (8003554 <HAL_GPIO_Init+0x34c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d101      	bne.n	8003432 <HAL_GPIO_Init+0x22a>
 800342e:	2306      	movs	r3, #6
 8003430:	e00c      	b.n	800344c <HAL_GPIO_Init+0x244>
 8003432:	2307      	movs	r3, #7
 8003434:	e00a      	b.n	800344c <HAL_GPIO_Init+0x244>
 8003436:	2305      	movs	r3, #5
 8003438:	e008      	b.n	800344c <HAL_GPIO_Init+0x244>
 800343a:	2304      	movs	r3, #4
 800343c:	e006      	b.n	800344c <HAL_GPIO_Init+0x244>
 800343e:	2303      	movs	r3, #3
 8003440:	e004      	b.n	800344c <HAL_GPIO_Init+0x244>
 8003442:	2302      	movs	r3, #2
 8003444:	e002      	b.n	800344c <HAL_GPIO_Init+0x244>
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <HAL_GPIO_Init+0x244>
 800344a:	2300      	movs	r3, #0
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	f002 0203 	and.w	r2, r2, #3
 8003452:	0092      	lsls	r2, r2, #2
 8003454:	4093      	lsls	r3, r2
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800345c:	4937      	ldr	r1, [pc, #220]	; (800353c <HAL_GPIO_Init+0x334>)
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	089b      	lsrs	r3, r3, #2
 8003462:	3302      	adds	r3, #2
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800346a:	4b3b      	ldr	r3, [pc, #236]	; (8003558 <HAL_GPIO_Init+0x350>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	43db      	mvns	r3, r3
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4013      	ands	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4313      	orrs	r3, r2
 800348c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800348e:	4a32      	ldr	r2, [pc, #200]	; (8003558 <HAL_GPIO_Init+0x350>)
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003494:	4b30      	ldr	r3, [pc, #192]	; (8003558 <HAL_GPIO_Init+0x350>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	43db      	mvns	r3, r3
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4013      	ands	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034b8:	4a27      	ldr	r2, [pc, #156]	; (8003558 <HAL_GPIO_Init+0x350>)
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80034be:	4b26      	ldr	r3, [pc, #152]	; (8003558 <HAL_GPIO_Init+0x350>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	43db      	mvns	r3, r3
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4013      	ands	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034e2:	4a1d      	ldr	r2, [pc, #116]	; (8003558 <HAL_GPIO_Init+0x350>)
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80034e8:	4b1b      	ldr	r3, [pc, #108]	; (8003558 <HAL_GPIO_Init+0x350>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	43db      	mvns	r3, r3
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	4013      	ands	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4313      	orrs	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800350c:	4a12      	ldr	r2, [pc, #72]	; (8003558 <HAL_GPIO_Init+0x350>)
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	3301      	adds	r3, #1
 8003516:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	fa22 f303 	lsr.w	r3, r2, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	f47f ae78 	bne.w	8003218 <HAL_GPIO_Init+0x10>
  }
}
 8003528:	bf00      	nop
 800352a:	bf00      	nop
 800352c:	371c      	adds	r7, #28
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40021000 	.word	0x40021000
 800353c:	40010000 	.word	0x40010000
 8003540:	48000400 	.word	0x48000400
 8003544:	48000800 	.word	0x48000800
 8003548:	48000c00 	.word	0x48000c00
 800354c:	48001000 	.word	0x48001000
 8003550:	48001400 	.word	0x48001400
 8003554:	48001800 	.word	0x48001800
 8003558:	40010400 	.word	0x40010400

0800355c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691a      	ldr	r2, [r3, #16]
 800356c:	887b      	ldrh	r3, [r7, #2]
 800356e:	4013      	ands	r3, r2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003574:	2301      	movs	r3, #1
 8003576:	73fb      	strb	r3, [r7, #15]
 8003578:	e001      	b.n	800357e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800357a:	2300      	movs	r3, #0
 800357c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800357e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	460b      	mov	r3, r1
 8003596:	807b      	strh	r3, [r7, #2]
 8003598:	4613      	mov	r3, r2
 800359a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800359c:	787b      	ldrb	r3, [r7, #1]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035a2:	887a      	ldrh	r2, [r7, #2]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035a8:	e002      	b.n	80035b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035aa:	887a      	ldrh	r2, [r7, #2]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	460b      	mov	r3, r1
 80035c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035ce:	887a      	ldrh	r2, [r7, #2]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4013      	ands	r3, r2
 80035d4:	041a      	lsls	r2, r3, #16
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	43d9      	mvns	r1, r3
 80035da:	887b      	ldrh	r3, [r7, #2]
 80035dc:	400b      	ands	r3, r1
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	619a      	str	r2, [r3, #24]
}
 80035e4:	bf00      	nop
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035fa:	4b08      	ldr	r3, [pc, #32]	; (800361c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035fc:	695a      	ldr	r2, [r3, #20]
 80035fe:	88fb      	ldrh	r3, [r7, #6]
 8003600:	4013      	ands	r3, r2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d006      	beq.n	8003614 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003606:	4a05      	ldr	r2, [pc, #20]	; (800361c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003608:	88fb      	ldrh	r3, [r7, #6]
 800360a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800360c:	88fb      	ldrh	r3, [r7, #6]
 800360e:	4618      	mov	r0, r3
 8003610:	f7fe ffec 	bl	80025ec <HAL_GPIO_EXTI_Callback>
  }
}
 8003614:	bf00      	nop
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	40010400 	.word	0x40010400

08003620 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e081      	b.n	8003736 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d106      	bne.n	800364c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7ff f932 	bl	80028b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2224      	movs	r2, #36	; 0x24
 8003650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0201 	bic.w	r2, r2, #1
 8003662:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003670:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003680:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d107      	bne.n	800369a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689a      	ldr	r2, [r3, #8]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003696:	609a      	str	r2, [r3, #8]
 8003698:	e006      	b.n	80036a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689a      	ldr	r2, [r3, #8]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80036a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d104      	bne.n	80036ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6812      	ldr	r2, [r2, #0]
 80036c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691a      	ldr	r2, [r3, #16]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	69d9      	ldr	r1, [r3, #28]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1a      	ldr	r2, [r3, #32]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0201 	orr.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2220      	movs	r2, #32
 8003722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
	...

08003740 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b088      	sub	sp, #32
 8003744:	af02      	add	r7, sp, #8
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	4608      	mov	r0, r1
 800374a:	4611      	mov	r1, r2
 800374c:	461a      	mov	r2, r3
 800374e:	4603      	mov	r3, r0
 8003750:	817b      	strh	r3, [r7, #10]
 8003752:	460b      	mov	r3, r1
 8003754:	813b      	strh	r3, [r7, #8]
 8003756:	4613      	mov	r3, r2
 8003758:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b20      	cmp	r3, #32
 8003764:	f040 80f9 	bne.w	800395a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d002      	beq.n	8003774 <HAL_I2C_Mem_Write+0x34>
 800376e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003770:	2b00      	cmp	r3, #0
 8003772:	d105      	bne.n	8003780 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f44f 7200 	mov.w	r2, #512	; 0x200
 800377a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e0ed      	b.n	800395c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_I2C_Mem_Write+0x4e>
 800378a:	2302      	movs	r3, #2
 800378c:	e0e6      	b.n	800395c <HAL_I2C_Mem_Write+0x21c>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003796:	f7ff fba5 	bl	8002ee4 <HAL_GetTick>
 800379a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	2319      	movs	r3, #25
 80037a2:	2201      	movs	r2, #1
 80037a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 fac3 	bl	8003d34 <I2C_WaitOnFlagUntilTimeout>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0d1      	b.n	800395c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2221      	movs	r2, #33	; 0x21
 80037bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2240      	movs	r2, #64	; 0x40
 80037c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6a3a      	ldr	r2, [r7, #32]
 80037d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037e0:	88f8      	ldrh	r0, [r7, #6]
 80037e2:	893a      	ldrh	r2, [r7, #8]
 80037e4:	8979      	ldrh	r1, [r7, #10]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	9301      	str	r3, [sp, #4]
 80037ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	4603      	mov	r3, r0
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 f9d3 	bl	8003b9c <I2C_RequestMemoryWrite>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d005      	beq.n	8003808 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0a9      	b.n	800395c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380c:	b29b      	uxth	r3, r3
 800380e:	2bff      	cmp	r3, #255	; 0xff
 8003810:	d90e      	bls.n	8003830 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	22ff      	movs	r2, #255	; 0xff
 8003816:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381c:	b2da      	uxtb	r2, r3
 800381e:	8979      	ldrh	r1, [r7, #10]
 8003820:	2300      	movs	r3, #0
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 fc2b 	bl	8004084 <I2C_TransferConfig>
 800382e:	e00f      	b.n	8003850 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003834:	b29a      	uxth	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383e:	b2da      	uxtb	r2, r3
 8003840:	8979      	ldrh	r1, [r7, #10]
 8003842:	2300      	movs	r3, #0
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 fc1a 	bl	8004084 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f000 faad 	bl	8003db4 <I2C_WaitOnTXISFlagUntilTimeout>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e07b      	b.n	800395c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	781a      	ldrb	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	1c5a      	adds	r2, r3, #1
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387e:	b29b      	uxth	r3, r3
 8003880:	3b01      	subs	r3, #1
 8003882:	b29a      	uxth	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388c:	3b01      	subs	r3, #1
 800388e:	b29a      	uxth	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003898:	b29b      	uxth	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d034      	beq.n	8003908 <HAL_I2C_Mem_Write+0x1c8>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d130      	bne.n	8003908 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ac:	2200      	movs	r2, #0
 80038ae:	2180      	movs	r1, #128	; 0x80
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 fa3f 	bl	8003d34 <I2C_WaitOnFlagUntilTimeout>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e04d      	b.n	800395c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	2bff      	cmp	r3, #255	; 0xff
 80038c8:	d90e      	bls.n	80038e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	22ff      	movs	r2, #255	; 0xff
 80038ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	8979      	ldrh	r1, [r7, #10]
 80038d8:	2300      	movs	r3, #0
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 fbcf 	bl	8004084 <I2C_TransferConfig>
 80038e6:	e00f      	b.n	8003908 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	8979      	ldrh	r1, [r7, #10]
 80038fa:	2300      	movs	r3, #0
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 fbbe 	bl	8004084 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390c:	b29b      	uxth	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d19e      	bne.n	8003850 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 fa8c 	bl	8003e34 <I2C_WaitOnSTOPFlagUntilTimeout>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e01a      	b.n	800395c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2220      	movs	r2, #32
 800392c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6859      	ldr	r1, [r3, #4]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	4b0a      	ldr	r3, [pc, #40]	; (8003964 <HAL_I2C_Mem_Write+0x224>)
 800393a:	400b      	ands	r3, r1
 800393c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2220      	movs	r2, #32
 8003942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003956:	2300      	movs	r3, #0
 8003958:	e000      	b.n	800395c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800395a:	2302      	movs	r3, #2
  }
}
 800395c:	4618      	mov	r0, r3
 800395e:	3718      	adds	r7, #24
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	fe00e800 	.word	0xfe00e800

08003968 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b088      	sub	sp, #32
 800396c:	af02      	add	r7, sp, #8
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	4608      	mov	r0, r1
 8003972:	4611      	mov	r1, r2
 8003974:	461a      	mov	r2, r3
 8003976:	4603      	mov	r3, r0
 8003978:	817b      	strh	r3, [r7, #10]
 800397a:	460b      	mov	r3, r1
 800397c:	813b      	strh	r3, [r7, #8]
 800397e:	4613      	mov	r3, r2
 8003980:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b20      	cmp	r3, #32
 800398c:	f040 80fd 	bne.w	8003b8a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <HAL_I2C_Mem_Read+0x34>
 8003996:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003998:	2b00      	cmp	r3, #0
 800399a:	d105      	bne.n	80039a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e0f1      	b.n	8003b8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d101      	bne.n	80039b6 <HAL_I2C_Mem_Read+0x4e>
 80039b2:	2302      	movs	r3, #2
 80039b4:	e0ea      	b.n	8003b8c <HAL_I2C_Mem_Read+0x224>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039be:	f7ff fa91 	bl	8002ee4 <HAL_GetTick>
 80039c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	2319      	movs	r3, #25
 80039ca:	2201      	movs	r2, #1
 80039cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 f9af 	bl	8003d34 <I2C_WaitOnFlagUntilTimeout>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e0d5      	b.n	8003b8c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2222      	movs	r2, #34	; 0x22
 80039e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2240      	movs	r2, #64	; 0x40
 80039ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a3a      	ldr	r2, [r7, #32]
 80039fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a08:	88f8      	ldrh	r0, [r7, #6]
 8003a0a:	893a      	ldrh	r2, [r7, #8]
 8003a0c:	8979      	ldrh	r1, [r7, #10]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	9301      	str	r3, [sp, #4]
 8003a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	4603      	mov	r3, r0
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 f913 	bl	8003c44 <I2C_RequestMemoryRead>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e0ad      	b.n	8003b8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	2bff      	cmp	r3, #255	; 0xff
 8003a38:	d90e      	bls.n	8003a58 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	22ff      	movs	r2, #255	; 0xff
 8003a3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	8979      	ldrh	r1, [r7, #10]
 8003a48:	4b52      	ldr	r3, [pc, #328]	; (8003b94 <HAL_I2C_Mem_Read+0x22c>)
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 fb17 	bl	8004084 <I2C_TransferConfig>
 8003a56:	e00f      	b.n	8003a78 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	8979      	ldrh	r1, [r7, #10]
 8003a6a:	4b4a      	ldr	r3, [pc, #296]	; (8003b94 <HAL_I2C_Mem_Read+0x22c>)
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 fb06 	bl	8004084 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7e:	2200      	movs	r2, #0
 8003a80:	2104      	movs	r1, #4
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 f956 	bl	8003d34 <I2C_WaitOnFlagUntilTimeout>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e07c      	b.n	8003b8c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	1c5a      	adds	r2, r3, #1
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d034      	beq.n	8003b38 <HAL_I2C_Mem_Read+0x1d0>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d130      	bne.n	8003b38 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003adc:	2200      	movs	r2, #0
 8003ade:	2180      	movs	r1, #128	; 0x80
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 f927 	bl	8003d34 <I2C_WaitOnFlagUntilTimeout>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e04d      	b.n	8003b8c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	2bff      	cmp	r3, #255	; 0xff
 8003af8:	d90e      	bls.n	8003b18 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	22ff      	movs	r2, #255	; 0xff
 8003afe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	8979      	ldrh	r1, [r7, #10]
 8003b08:	2300      	movs	r3, #0
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 fab7 	bl	8004084 <I2C_TransferConfig>
 8003b16:	e00f      	b.n	8003b38 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	8979      	ldrh	r1, [r7, #10]
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 faa6 	bl	8004084 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d19a      	bne.n	8003a78 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 f974 	bl	8003e34 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e01a      	b.n	8003b8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6859      	ldr	r1, [r3, #4]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <HAL_I2C_Mem_Read+0x230>)
 8003b6a:	400b      	ands	r3, r1
 8003b6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2220      	movs	r2, #32
 8003b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b86:	2300      	movs	r3, #0
 8003b88:	e000      	b.n	8003b8c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003b8a:	2302      	movs	r3, #2
  }
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3718      	adds	r7, #24
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	80002400 	.word	0x80002400
 8003b98:	fe00e800 	.word	0xfe00e800

08003b9c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af02      	add	r7, sp, #8
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	4608      	mov	r0, r1
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	461a      	mov	r2, r3
 8003baa:	4603      	mov	r3, r0
 8003bac:	817b      	strh	r3, [r7, #10]
 8003bae:	460b      	mov	r3, r1
 8003bb0:	813b      	strh	r3, [r7, #8]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003bb6:	88fb      	ldrh	r3, [r7, #6]
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	8979      	ldrh	r1, [r7, #10]
 8003bbc:	4b20      	ldr	r3, [pc, #128]	; (8003c40 <I2C_RequestMemoryWrite+0xa4>)
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 fa5d 	bl	8004084 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bca:	69fa      	ldr	r2, [r7, #28]
 8003bcc:	69b9      	ldr	r1, [r7, #24]
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 f8f0 	bl	8003db4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e02c      	b.n	8003c38 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bde:	88fb      	ldrh	r3, [r7, #6]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d105      	bne.n	8003bf0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003be4:	893b      	ldrh	r3, [r7, #8]
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	629a      	str	r2, [r3, #40]	; 0x28
 8003bee:	e015      	b.n	8003c1c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003bf0:	893b      	ldrh	r3, [r7, #8]
 8003bf2:	0a1b      	lsrs	r3, r3, #8
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	b2da      	uxtb	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bfe:	69fa      	ldr	r2, [r7, #28]
 8003c00:	69b9      	ldr	r1, [r7, #24]
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 f8d6 	bl	8003db4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e012      	b.n	8003c38 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c12:	893b      	ldrh	r3, [r7, #8]
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	2200      	movs	r2, #0
 8003c24:	2180      	movs	r1, #128	; 0x80
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 f884 	bl	8003d34 <I2C_WaitOnFlagUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e000      	b.n	8003c38 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	80002000 	.word	0x80002000

08003c44 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af02      	add	r7, sp, #8
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	4608      	mov	r0, r1
 8003c4e:	4611      	mov	r1, r2
 8003c50:	461a      	mov	r2, r3
 8003c52:	4603      	mov	r3, r0
 8003c54:	817b      	strh	r3, [r7, #10]
 8003c56:	460b      	mov	r3, r1
 8003c58:	813b      	strh	r3, [r7, #8]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003c5e:	88fb      	ldrh	r3, [r7, #6]
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	8979      	ldrh	r1, [r7, #10]
 8003c64:	4b20      	ldr	r3, [pc, #128]	; (8003ce8 <I2C_RequestMemoryRead+0xa4>)
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	2300      	movs	r3, #0
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 fa0a 	bl	8004084 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c70:	69fa      	ldr	r2, [r7, #28]
 8003c72:	69b9      	ldr	r1, [r7, #24]
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 f89d 	bl	8003db4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e02c      	b.n	8003cde <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c84:	88fb      	ldrh	r3, [r7, #6]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d105      	bne.n	8003c96 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c8a:	893b      	ldrh	r3, [r7, #8]
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	629a      	str	r2, [r3, #40]	; 0x28
 8003c94:	e015      	b.n	8003cc2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c96:	893b      	ldrh	r3, [r7, #8]
 8003c98:	0a1b      	lsrs	r3, r3, #8
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ca4:	69fa      	ldr	r2, [r7, #28]
 8003ca6:	69b9      	ldr	r1, [r7, #24]
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f000 f883 	bl	8003db4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e012      	b.n	8003cde <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cb8:	893b      	ldrh	r3, [r7, #8]
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	2140      	movs	r1, #64	; 0x40
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 f831 	bl	8003d34 <I2C_WaitOnFlagUntilTimeout>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e000      	b.n	8003cde <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	80002000 	.word	0x80002000

08003cec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d103      	bne.n	8003d0a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2200      	movs	r2, #0
 8003d08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d007      	beq.n	8003d28 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699a      	ldr	r2, [r3, #24]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0201 	orr.w	r2, r2, #1
 8003d26:	619a      	str	r2, [r3, #24]
  }
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	603b      	str	r3, [r7, #0]
 8003d40:	4613      	mov	r3, r2
 8003d42:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d44:	e022      	b.n	8003d8c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4c:	d01e      	beq.n	8003d8c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d4e:	f7ff f8c9 	bl	8002ee4 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d302      	bcc.n	8003d64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d113      	bne.n	8003d8c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d68:	f043 0220 	orr.w	r2, r3, #32
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e00f      	b.n	8003dac <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699a      	ldr	r2, [r3, #24]
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	4013      	ands	r3, r2
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	bf0c      	ite	eq
 8003d9c:	2301      	moveq	r3, #1
 8003d9e:	2300      	movne	r3, #0
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	461a      	mov	r2, r3
 8003da4:	79fb      	ldrb	r3, [r7, #7]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d0cd      	beq.n	8003d46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003dc0:	e02c      	b.n	8003e1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	68b9      	ldr	r1, [r7, #8]
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 f870 	bl	8003eac <I2C_IsErrorOccurred>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e02a      	b.n	8003e2c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ddc:	d01e      	beq.n	8003e1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dde:	f7ff f881 	bl	8002ee4 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d302      	bcc.n	8003df4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d113      	bne.n	8003e1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df8:	f043 0220 	orr.w	r2, r3, #32
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2220      	movs	r2, #32
 8003e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e007      	b.n	8003e2c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d1cb      	bne.n	8003dc2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e40:	e028      	b.n	8003e94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	68b9      	ldr	r1, [r7, #8]
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 f830 	bl	8003eac <I2C_IsErrorOccurred>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e026      	b.n	8003ea4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e56:	f7ff f845 	bl	8002ee4 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d302      	bcc.n	8003e6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d113      	bne.n	8003e94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e70:	f043 0220 	orr.w	r2, r3, #32
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e007      	b.n	8003ea4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	f003 0320 	and.w	r3, r3, #32
 8003e9e:	2b20      	cmp	r3, #32
 8003ea0:	d1cf      	bne.n	8003e42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b08a      	sub	sp, #40	; 0x28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	f003 0310 	and.w	r3, r3, #16
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d075      	beq.n	8003fc4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2210      	movs	r2, #16
 8003ede:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ee0:	e056      	b.n	8003f90 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee8:	d052      	beq.n	8003f90 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003eea:	f7fe fffb 	bl	8002ee4 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d302      	bcc.n	8003f00 <I2C_IsErrorOccurred+0x54>
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d147      	bne.n	8003f90 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f0a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f12:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f22:	d12e      	bne.n	8003f82 <I2C_IsErrorOccurred+0xd6>
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f2a:	d02a      	beq.n	8003f82 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003f2c:	7cfb      	ldrb	r3, [r7, #19]
 8003f2e:	2b20      	cmp	r3, #32
 8003f30:	d027      	beq.n	8003f82 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f40:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003f42:	f7fe ffcf 	bl	8002ee4 <HAL_GetTick>
 8003f46:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f48:	e01b      	b.n	8003f82 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003f4a:	f7fe ffcb 	bl	8002ee4 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b19      	cmp	r3, #25
 8003f56:	d914      	bls.n	8003f82 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5c:	f043 0220 	orr.w	r2, r3, #32
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	f003 0320 	and.w	r3, r3, #32
 8003f8c:	2b20      	cmp	r3, #32
 8003f8e:	d1dc      	bne.n	8003f4a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	f003 0320 	and.w	r3, r3, #32
 8003f9a:	2b20      	cmp	r3, #32
 8003f9c:	d003      	beq.n	8003fa6 <I2C_IsErrorOccurred+0xfa>
 8003f9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d09d      	beq.n	8003ee2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003fa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d103      	bne.n	8003fb6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	f043 0304 	orr.w	r3, r3, #4
 8003fbc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00b      	beq.n	8003fee <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	f043 0301 	orr.w	r3, r3, #1
 8003fdc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fe6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00b      	beq.n	8004010 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	f043 0308 	orr.w	r3, r3, #8
 8003ffe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004008:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00b      	beq.n	8004032 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	f043 0302 	orr.w	r3, r3, #2
 8004020:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f44f 7200 	mov.w	r2, #512	; 0x200
 800402a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004032:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004036:	2b00      	cmp	r3, #0
 8004038:	d01c      	beq.n	8004074 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f7ff fe56 	bl	8003cec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6859      	ldr	r1, [r3, #4]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	4b0d      	ldr	r3, [pc, #52]	; (8004080 <I2C_IsErrorOccurred+0x1d4>)
 800404c:	400b      	ands	r3, r1
 800404e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	431a      	orrs	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2220      	movs	r2, #32
 8004060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004078:	4618      	mov	r0, r3
 800407a:	3728      	adds	r7, #40	; 0x28
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	fe00e800 	.word	0xfe00e800

08004084 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	607b      	str	r3, [r7, #4]
 800408e:	460b      	mov	r3, r1
 8004090:	817b      	strh	r3, [r7, #10]
 8004092:	4613      	mov	r3, r2
 8004094:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004096:	897b      	ldrh	r3, [r7, #10]
 8004098:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800409c:	7a7b      	ldrb	r3, [r7, #9]
 800409e:	041b      	lsls	r3, r3, #16
 80040a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040a4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040aa:	6a3b      	ldr	r3, [r7, #32]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040b2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	6a3b      	ldr	r3, [r7, #32]
 80040bc:	0d5b      	lsrs	r3, r3, #21
 80040be:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80040c2:	4b08      	ldr	r3, [pc, #32]	; (80040e4 <I2C_TransferConfig+0x60>)
 80040c4:	430b      	orrs	r3, r1
 80040c6:	43db      	mvns	r3, r3
 80040c8:	ea02 0103 	and.w	r1, r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80040d6:	bf00      	nop
 80040d8:	371c      	adds	r7, #28
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	03ff63ff 	.word	0x03ff63ff

080040e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b20      	cmp	r3, #32
 80040fc:	d138      	bne.n	8004170 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004108:	2302      	movs	r3, #2
 800410a:	e032      	b.n	8004172 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2224      	movs	r2, #36	; 0x24
 8004118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0201 	bic.w	r2, r2, #1
 800412a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800413a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6819      	ldr	r1, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	430a      	orrs	r2, r1
 800414a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0201 	orr.w	r2, r2, #1
 800415a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2220      	movs	r2, #32
 8004160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800416c:	2300      	movs	r3, #0
 800416e:	e000      	b.n	8004172 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004170:	2302      	movs	r3, #2
  }
}
 8004172:	4618      	mov	r0, r3
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800417e:	b480      	push	{r7}
 8004180:	b085      	sub	sp, #20
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
 8004186:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b20      	cmp	r3, #32
 8004192:	d139      	bne.n	8004208 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800419a:	2b01      	cmp	r3, #1
 800419c:	d101      	bne.n	80041a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800419e:	2302      	movs	r3, #2
 80041a0:	e033      	b.n	800420a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2224      	movs	r2, #36	; 0x24
 80041ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 0201 	bic.w	r2, r2, #1
 80041c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80041d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	021b      	lsls	r3, r3, #8
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	4313      	orrs	r3, r2
 80041da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0201 	orr.w	r2, r2, #1
 80041f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004204:	2300      	movs	r3, #0
 8004206:	e000      	b.n	800420a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004208:	2302      	movs	r3, #2
  }
}
 800420a:	4618      	mov	r0, r3
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
	...

08004218 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800421c:	4b04      	ldr	r3, [pc, #16]	; (8004230 <HAL_PWREx_GetVoltageRange+0x18>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004224:	4618      	mov	r0, r3
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	40007000 	.word	0x40007000

08004234 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004242:	d130      	bne.n	80042a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004244:	4b23      	ldr	r3, [pc, #140]	; (80042d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800424c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004250:	d038      	beq.n	80042c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004252:	4b20      	ldr	r3, [pc, #128]	; (80042d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800425a:	4a1e      	ldr	r2, [pc, #120]	; (80042d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800425c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004260:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004262:	4b1d      	ldr	r3, [pc, #116]	; (80042d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2232      	movs	r2, #50	; 0x32
 8004268:	fb02 f303 	mul.w	r3, r2, r3
 800426c:	4a1b      	ldr	r2, [pc, #108]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800426e:	fba2 2303 	umull	r2, r3, r2, r3
 8004272:	0c9b      	lsrs	r3, r3, #18
 8004274:	3301      	adds	r3, #1
 8004276:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004278:	e002      	b.n	8004280 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	3b01      	subs	r3, #1
 800427e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004280:	4b14      	ldr	r3, [pc, #80]	; (80042d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800428c:	d102      	bne.n	8004294 <HAL_PWREx_ControlVoltageScaling+0x60>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1f2      	bne.n	800427a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004294:	4b0f      	ldr	r3, [pc, #60]	; (80042d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800429c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042a0:	d110      	bne.n	80042c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e00f      	b.n	80042c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80042a6:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042b2:	d007      	beq.n	80042c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80042b4:	4b07      	ldr	r3, [pc, #28]	; (80042d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042bc:	4a05      	ldr	r2, [pc, #20]	; (80042d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	40007000 	.word	0x40007000
 80042d8:	20000000 	.word	0x20000000
 80042dc:	431bde83 	.word	0x431bde83

080042e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b088      	sub	sp, #32
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e3ca      	b.n	8004a88 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042f2:	4b97      	ldr	r3, [pc, #604]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 030c 	and.w	r3, r3, #12
 80042fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042fc:	4b94      	ldr	r3, [pc, #592]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f003 0303 	and.w	r3, r3, #3
 8004304:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0310 	and.w	r3, r3, #16
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 80e4 	beq.w	80044dc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d007      	beq.n	800432a <HAL_RCC_OscConfig+0x4a>
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	2b0c      	cmp	r3, #12
 800431e:	f040 808b 	bne.w	8004438 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2b01      	cmp	r3, #1
 8004326:	f040 8087 	bne.w	8004438 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800432a:	4b89      	ldr	r3, [pc, #548]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d005      	beq.n	8004342 <HAL_RCC_OscConfig+0x62>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e3a2      	b.n	8004a88 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1a      	ldr	r2, [r3, #32]
 8004346:	4b82      	ldr	r3, [pc, #520]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b00      	cmp	r3, #0
 8004350:	d004      	beq.n	800435c <HAL_RCC_OscConfig+0x7c>
 8004352:	4b7f      	ldr	r3, [pc, #508]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800435a:	e005      	b.n	8004368 <HAL_RCC_OscConfig+0x88>
 800435c:	4b7c      	ldr	r3, [pc, #496]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 800435e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004362:	091b      	lsrs	r3, r3, #4
 8004364:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004368:	4293      	cmp	r3, r2
 800436a:	d223      	bcs.n	80043b4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	4618      	mov	r0, r3
 8004372:	f000 fd87 	bl	8004e84 <RCC_SetFlashLatencyFromMSIRange>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e383      	b.n	8004a88 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004380:	4b73      	ldr	r3, [pc, #460]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a72      	ldr	r2, [pc, #456]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 8004386:	f043 0308 	orr.w	r3, r3, #8
 800438a:	6013      	str	r3, [r2, #0]
 800438c:	4b70      	ldr	r3, [pc, #448]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	496d      	ldr	r1, [pc, #436]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 800439a:	4313      	orrs	r3, r2
 800439c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800439e:	4b6c      	ldr	r3, [pc, #432]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	021b      	lsls	r3, r3, #8
 80043ac:	4968      	ldr	r1, [pc, #416]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	604b      	str	r3, [r1, #4]
 80043b2:	e025      	b.n	8004400 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043b4:	4b66      	ldr	r3, [pc, #408]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a65      	ldr	r2, [pc, #404]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 80043ba:	f043 0308 	orr.w	r3, r3, #8
 80043be:	6013      	str	r3, [r2, #0]
 80043c0:	4b63      	ldr	r3, [pc, #396]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	4960      	ldr	r1, [pc, #384]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043d2:	4b5f      	ldr	r3, [pc, #380]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	021b      	lsls	r3, r3, #8
 80043e0:	495b      	ldr	r1, [pc, #364]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d109      	bne.n	8004400 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 fd47 	bl	8004e84 <RCC_SetFlashLatencyFromMSIRange>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e343      	b.n	8004a88 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004400:	f000 fc4a 	bl	8004c98 <HAL_RCC_GetSysClockFreq>
 8004404:	4602      	mov	r2, r0
 8004406:	4b52      	ldr	r3, [pc, #328]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	091b      	lsrs	r3, r3, #4
 800440c:	f003 030f 	and.w	r3, r3, #15
 8004410:	4950      	ldr	r1, [pc, #320]	; (8004554 <HAL_RCC_OscConfig+0x274>)
 8004412:	5ccb      	ldrb	r3, [r1, r3]
 8004414:	f003 031f 	and.w	r3, r3, #31
 8004418:	fa22 f303 	lsr.w	r3, r2, r3
 800441c:	4a4e      	ldr	r2, [pc, #312]	; (8004558 <HAL_RCC_OscConfig+0x278>)
 800441e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004420:	4b4e      	ldr	r3, [pc, #312]	; (800455c <HAL_RCC_OscConfig+0x27c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4618      	mov	r0, r3
 8004426:	f7fe fb9b 	bl	8002b60 <HAL_InitTick>
 800442a:	4603      	mov	r3, r0
 800442c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800442e:	7bfb      	ldrb	r3, [r7, #15]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d052      	beq.n	80044da <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004434:	7bfb      	ldrb	r3, [r7, #15]
 8004436:	e327      	b.n	8004a88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d032      	beq.n	80044a6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004440:	4b43      	ldr	r3, [pc, #268]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a42      	ldr	r2, [pc, #264]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 8004446:	f043 0301 	orr.w	r3, r3, #1
 800444a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800444c:	f7fe fd4a 	bl	8002ee4 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004454:	f7fe fd46 	bl	8002ee4 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e310      	b.n	8004a88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004466:	4b3a      	ldr	r3, [pc, #232]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0f0      	beq.n	8004454 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004472:	4b37      	ldr	r3, [pc, #220]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a36      	ldr	r2, [pc, #216]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 8004478:	f043 0308 	orr.w	r3, r3, #8
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	4b34      	ldr	r3, [pc, #208]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	4931      	ldr	r1, [pc, #196]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 800448c:	4313      	orrs	r3, r2
 800448e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004490:	4b2f      	ldr	r3, [pc, #188]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	021b      	lsls	r3, r3, #8
 800449e:	492c      	ldr	r1, [pc, #176]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	604b      	str	r3, [r1, #4]
 80044a4:	e01a      	b.n	80044dc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80044a6:	4b2a      	ldr	r3, [pc, #168]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a29      	ldr	r2, [pc, #164]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 80044ac:	f023 0301 	bic.w	r3, r3, #1
 80044b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044b2:	f7fe fd17 	bl	8002ee4 <HAL_GetTick>
 80044b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044b8:	e008      	b.n	80044cc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044ba:	f7fe fd13 	bl	8002ee4 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e2dd      	b.n	8004a88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044cc:	4b20      	ldr	r3, [pc, #128]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1f0      	bne.n	80044ba <HAL_RCC_OscConfig+0x1da>
 80044d8:	e000      	b.n	80044dc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044da:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d074      	beq.n	80045d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	2b08      	cmp	r3, #8
 80044ec:	d005      	beq.n	80044fa <HAL_RCC_OscConfig+0x21a>
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	2b0c      	cmp	r3, #12
 80044f2:	d10e      	bne.n	8004512 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	2b03      	cmp	r3, #3
 80044f8:	d10b      	bne.n	8004512 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044fa:	4b15      	ldr	r3, [pc, #84]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d064      	beq.n	80045d0 <HAL_RCC_OscConfig+0x2f0>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d160      	bne.n	80045d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e2ba      	b.n	8004a88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800451a:	d106      	bne.n	800452a <HAL_RCC_OscConfig+0x24a>
 800451c:	4b0c      	ldr	r3, [pc, #48]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a0b      	ldr	r2, [pc, #44]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 8004522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	e026      	b.n	8004578 <HAL_RCC_OscConfig+0x298>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004532:	d115      	bne.n	8004560 <HAL_RCC_OscConfig+0x280>
 8004534:	4b06      	ldr	r3, [pc, #24]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a05      	ldr	r2, [pc, #20]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 800453a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800453e:	6013      	str	r3, [r2, #0]
 8004540:	4b03      	ldr	r3, [pc, #12]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a02      	ldr	r2, [pc, #8]	; (8004550 <HAL_RCC_OscConfig+0x270>)
 8004546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	e014      	b.n	8004578 <HAL_RCC_OscConfig+0x298>
 800454e:	bf00      	nop
 8004550:	40021000 	.word	0x40021000
 8004554:	0800f24c 	.word	0x0800f24c
 8004558:	20000000 	.word	0x20000000
 800455c:	20000004 	.word	0x20000004
 8004560:	4ba0      	ldr	r3, [pc, #640]	; (80047e4 <HAL_RCC_OscConfig+0x504>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a9f      	ldr	r2, [pc, #636]	; (80047e4 <HAL_RCC_OscConfig+0x504>)
 8004566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800456a:	6013      	str	r3, [r2, #0]
 800456c:	4b9d      	ldr	r3, [pc, #628]	; (80047e4 <HAL_RCC_OscConfig+0x504>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a9c      	ldr	r2, [pc, #624]	; (80047e4 <HAL_RCC_OscConfig+0x504>)
 8004572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d013      	beq.n	80045a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004580:	f7fe fcb0 	bl	8002ee4 <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004588:	f7fe fcac 	bl	8002ee4 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b64      	cmp	r3, #100	; 0x64
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e276      	b.n	8004a88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800459a:	4b92      	ldr	r3, [pc, #584]	; (80047e4 <HAL_RCC_OscConfig+0x504>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0f0      	beq.n	8004588 <HAL_RCC_OscConfig+0x2a8>
 80045a6:	e014      	b.n	80045d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a8:	f7fe fc9c 	bl	8002ee4 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045b0:	f7fe fc98 	bl	8002ee4 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b64      	cmp	r3, #100	; 0x64
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e262      	b.n	8004a88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045c2:	4b88      	ldr	r3, [pc, #544]	; (80047e4 <HAL_RCC_OscConfig+0x504>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1f0      	bne.n	80045b0 <HAL_RCC_OscConfig+0x2d0>
 80045ce:	e000      	b.n	80045d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d060      	beq.n	80046a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	2b04      	cmp	r3, #4
 80045e2:	d005      	beq.n	80045f0 <HAL_RCC_OscConfig+0x310>
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	2b0c      	cmp	r3, #12
 80045e8:	d119      	bne.n	800461e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d116      	bne.n	800461e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045f0:	4b7c      	ldr	r3, [pc, #496]	; (80047e4 <HAL_RCC_OscConfig+0x504>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d005      	beq.n	8004608 <HAL_RCC_OscConfig+0x328>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e23f      	b.n	8004a88 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004608:	4b76      	ldr	r3, [pc, #472]	; (80047e4 <HAL_RCC_OscConfig+0x504>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	061b      	lsls	r3, r3, #24
 8004616:	4973      	ldr	r1, [pc, #460]	; (80047e4 <HAL_RCC_OscConfig+0x504>)
 8004618:	4313      	orrs	r3, r2
 800461a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800461c:	e040      	b.n	80046a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d023      	beq.n	800466e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004626:	4b6f      	ldr	r3, [pc, #444]	; (80047e4 <HAL_RCC_OscConfig+0x504>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a6e      	ldr	r2, [pc, #440]	; (80047e4 <HAL_RCC_OscConfig+0x504>)
 800462c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004632:	f7fe fc57 	bl	8002ee4 <HAL_GetTick>
 8004636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004638:	e008      	b.n	800464c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800463a:	f7fe fc53 	bl	8002ee4 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e21d      	b.n	8004a88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800464c:	4b65      	ldr	r3, [pc, #404]	; (80047e4 <HAL_RCC_OscConfig+0x504>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0f0      	beq.n	800463a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004658:	4b62      	ldr	r3, [pc, #392]	; (80047e4 <HAL_RCC_OscConfig+0x504>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	061b      	lsls	r3, r3, #24
 8004666:	495f      	ldr	r1, [pc, #380]	; (80047e4 <HAL_RCC_OscConfig+0x504>)
 8004668:	4313      	orrs	r3, r2
 800466a:	604b      	str	r3, [r1, #4]
 800466c:	e018      	b.n	80046a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800466e:	4b5d      	ldr	r3, [pc, #372]	; (80047e4 <HAL_RCC_OscConfig+0x504>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a5c      	ldr	r2, [pc, #368]	; (80047e4 <HAL_RCC_OscConfig+0x504>)
 8004674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004678:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467a:	f7fe fc33 	bl	8002ee4 <HAL_GetTick>
 800467e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004680:	e008      	b.n	8004694 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004682:	f7fe fc2f 	bl	8002ee4 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d901      	bls.n	8004694 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e1f9      	b.n	8004a88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004694:	4b53      	ldr	r3, [pc, #332]	; (80047e4 <HAL_RCC_OscConfig+0x504>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1f0      	bne.n	8004682 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0308 	and.w	r3, r3, #8
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d03c      	beq.n	8004726 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d01c      	beq.n	80046ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046b4:	4b4b      	ldr	r3, [pc, #300]	; (80047e4 <HAL_RCC_OscConfig+0x504>)
 80046b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ba:	4a4a      	ldr	r2, [pc, #296]	; (80047e4 <HAL_RCC_OscConfig+0x504>)
 80046bc:	f043 0301 	orr.w	r3, r3, #1
 80046c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c4:	f7fe fc0e 	bl	8002ee4 <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046cc:	f7fe fc0a 	bl	8002ee4 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e1d4      	b.n	8004a88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046de:	4b41      	ldr	r3, [pc, #260]	; (80047e4 <HAL_RCC_OscConfig+0x504>)
 80046e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0ef      	beq.n	80046cc <HAL_RCC_OscConfig+0x3ec>
 80046ec:	e01b      	b.n	8004726 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ee:	4b3d      	ldr	r3, [pc, #244]	; (80047e4 <HAL_RCC_OscConfig+0x504>)
 80046f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046f4:	4a3b      	ldr	r2, [pc, #236]	; (80047e4 <HAL_RCC_OscConfig+0x504>)
 80046f6:	f023 0301 	bic.w	r3, r3, #1
 80046fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046fe:	f7fe fbf1 	bl	8002ee4 <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004704:	e008      	b.n	8004718 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004706:	f7fe fbed 	bl	8002ee4 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e1b7      	b.n	8004a88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004718:	4b32      	ldr	r3, [pc, #200]	; (80047e4 <HAL_RCC_OscConfig+0x504>)
 800471a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1ef      	bne.n	8004706 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0304 	and.w	r3, r3, #4
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 80a6 	beq.w	8004880 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004734:	2300      	movs	r3, #0
 8004736:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004738:	4b2a      	ldr	r3, [pc, #168]	; (80047e4 <HAL_RCC_OscConfig+0x504>)
 800473a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10d      	bne.n	8004760 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004744:	4b27      	ldr	r3, [pc, #156]	; (80047e4 <HAL_RCC_OscConfig+0x504>)
 8004746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004748:	4a26      	ldr	r2, [pc, #152]	; (80047e4 <HAL_RCC_OscConfig+0x504>)
 800474a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800474e:	6593      	str	r3, [r2, #88]	; 0x58
 8004750:	4b24      	ldr	r3, [pc, #144]	; (80047e4 <HAL_RCC_OscConfig+0x504>)
 8004752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004758:	60bb      	str	r3, [r7, #8]
 800475a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800475c:	2301      	movs	r3, #1
 800475e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004760:	4b21      	ldr	r3, [pc, #132]	; (80047e8 <HAL_RCC_OscConfig+0x508>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004768:	2b00      	cmp	r3, #0
 800476a:	d118      	bne.n	800479e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800476c:	4b1e      	ldr	r3, [pc, #120]	; (80047e8 <HAL_RCC_OscConfig+0x508>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a1d      	ldr	r2, [pc, #116]	; (80047e8 <HAL_RCC_OscConfig+0x508>)
 8004772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004776:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004778:	f7fe fbb4 	bl	8002ee4 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004780:	f7fe fbb0 	bl	8002ee4 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e17a      	b.n	8004a88 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004792:	4b15      	ldr	r3, [pc, #84]	; (80047e8 <HAL_RCC_OscConfig+0x508>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0f0      	beq.n	8004780 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d108      	bne.n	80047b8 <HAL_RCC_OscConfig+0x4d8>
 80047a6:	4b0f      	ldr	r3, [pc, #60]	; (80047e4 <HAL_RCC_OscConfig+0x504>)
 80047a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ac:	4a0d      	ldr	r2, [pc, #52]	; (80047e4 <HAL_RCC_OscConfig+0x504>)
 80047ae:	f043 0301 	orr.w	r3, r3, #1
 80047b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047b6:	e029      	b.n	800480c <HAL_RCC_OscConfig+0x52c>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	2b05      	cmp	r3, #5
 80047be:	d115      	bne.n	80047ec <HAL_RCC_OscConfig+0x50c>
 80047c0:	4b08      	ldr	r3, [pc, #32]	; (80047e4 <HAL_RCC_OscConfig+0x504>)
 80047c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c6:	4a07      	ldr	r2, [pc, #28]	; (80047e4 <HAL_RCC_OscConfig+0x504>)
 80047c8:	f043 0304 	orr.w	r3, r3, #4
 80047cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047d0:	4b04      	ldr	r3, [pc, #16]	; (80047e4 <HAL_RCC_OscConfig+0x504>)
 80047d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d6:	4a03      	ldr	r2, [pc, #12]	; (80047e4 <HAL_RCC_OscConfig+0x504>)
 80047d8:	f043 0301 	orr.w	r3, r3, #1
 80047dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047e0:	e014      	b.n	800480c <HAL_RCC_OscConfig+0x52c>
 80047e2:	bf00      	nop
 80047e4:	40021000 	.word	0x40021000
 80047e8:	40007000 	.word	0x40007000
 80047ec:	4b9c      	ldr	r3, [pc, #624]	; (8004a60 <HAL_RCC_OscConfig+0x780>)
 80047ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f2:	4a9b      	ldr	r2, [pc, #620]	; (8004a60 <HAL_RCC_OscConfig+0x780>)
 80047f4:	f023 0301 	bic.w	r3, r3, #1
 80047f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047fc:	4b98      	ldr	r3, [pc, #608]	; (8004a60 <HAL_RCC_OscConfig+0x780>)
 80047fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004802:	4a97      	ldr	r2, [pc, #604]	; (8004a60 <HAL_RCC_OscConfig+0x780>)
 8004804:	f023 0304 	bic.w	r3, r3, #4
 8004808:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d016      	beq.n	8004842 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004814:	f7fe fb66 	bl	8002ee4 <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800481a:	e00a      	b.n	8004832 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800481c:	f7fe fb62 	bl	8002ee4 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	f241 3288 	movw	r2, #5000	; 0x1388
 800482a:	4293      	cmp	r3, r2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e12a      	b.n	8004a88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004832:	4b8b      	ldr	r3, [pc, #556]	; (8004a60 <HAL_RCC_OscConfig+0x780>)
 8004834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0ed      	beq.n	800481c <HAL_RCC_OscConfig+0x53c>
 8004840:	e015      	b.n	800486e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004842:	f7fe fb4f 	bl	8002ee4 <HAL_GetTick>
 8004846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004848:	e00a      	b.n	8004860 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800484a:	f7fe fb4b 	bl	8002ee4 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	f241 3288 	movw	r2, #5000	; 0x1388
 8004858:	4293      	cmp	r3, r2
 800485a:	d901      	bls.n	8004860 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e113      	b.n	8004a88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004860:	4b7f      	ldr	r3, [pc, #508]	; (8004a60 <HAL_RCC_OscConfig+0x780>)
 8004862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1ed      	bne.n	800484a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800486e:	7ffb      	ldrb	r3, [r7, #31]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d105      	bne.n	8004880 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004874:	4b7a      	ldr	r3, [pc, #488]	; (8004a60 <HAL_RCC_OscConfig+0x780>)
 8004876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004878:	4a79      	ldr	r2, [pc, #484]	; (8004a60 <HAL_RCC_OscConfig+0x780>)
 800487a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800487e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 80fe 	beq.w	8004a86 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488e:	2b02      	cmp	r3, #2
 8004890:	f040 80d0 	bne.w	8004a34 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004894:	4b72      	ldr	r3, [pc, #456]	; (8004a60 <HAL_RCC_OscConfig+0x780>)
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f003 0203 	and.w	r2, r3, #3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d130      	bne.n	800490a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b2:	3b01      	subs	r3, #1
 80048b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d127      	bne.n	800490a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d11f      	bne.n	800490a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048d4:	2a07      	cmp	r2, #7
 80048d6:	bf14      	ite	ne
 80048d8:	2201      	movne	r2, #1
 80048da:	2200      	moveq	r2, #0
 80048dc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048de:	4293      	cmp	r3, r2
 80048e0:	d113      	bne.n	800490a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ec:	085b      	lsrs	r3, r3, #1
 80048ee:	3b01      	subs	r3, #1
 80048f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d109      	bne.n	800490a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004900:	085b      	lsrs	r3, r3, #1
 8004902:	3b01      	subs	r3, #1
 8004904:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004906:	429a      	cmp	r2, r3
 8004908:	d06e      	beq.n	80049e8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	2b0c      	cmp	r3, #12
 800490e:	d069      	beq.n	80049e4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004910:	4b53      	ldr	r3, [pc, #332]	; (8004a60 <HAL_RCC_OscConfig+0x780>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d105      	bne.n	8004928 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800491c:	4b50      	ldr	r3, [pc, #320]	; (8004a60 <HAL_RCC_OscConfig+0x780>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e0ad      	b.n	8004a88 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800492c:	4b4c      	ldr	r3, [pc, #304]	; (8004a60 <HAL_RCC_OscConfig+0x780>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a4b      	ldr	r2, [pc, #300]	; (8004a60 <HAL_RCC_OscConfig+0x780>)
 8004932:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004936:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004938:	f7fe fad4 	bl	8002ee4 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004940:	f7fe fad0 	bl	8002ee4 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e09a      	b.n	8004a88 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004952:	4b43      	ldr	r3, [pc, #268]	; (8004a60 <HAL_RCC_OscConfig+0x780>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1f0      	bne.n	8004940 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800495e:	4b40      	ldr	r3, [pc, #256]	; (8004a60 <HAL_RCC_OscConfig+0x780>)
 8004960:	68da      	ldr	r2, [r3, #12]
 8004962:	4b40      	ldr	r3, [pc, #256]	; (8004a64 <HAL_RCC_OscConfig+0x784>)
 8004964:	4013      	ands	r3, r2
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800496e:	3a01      	subs	r2, #1
 8004970:	0112      	lsls	r2, r2, #4
 8004972:	4311      	orrs	r1, r2
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004978:	0212      	lsls	r2, r2, #8
 800497a:	4311      	orrs	r1, r2
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004980:	0852      	lsrs	r2, r2, #1
 8004982:	3a01      	subs	r2, #1
 8004984:	0552      	lsls	r2, r2, #21
 8004986:	4311      	orrs	r1, r2
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800498c:	0852      	lsrs	r2, r2, #1
 800498e:	3a01      	subs	r2, #1
 8004990:	0652      	lsls	r2, r2, #25
 8004992:	4311      	orrs	r1, r2
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004998:	0912      	lsrs	r2, r2, #4
 800499a:	0452      	lsls	r2, r2, #17
 800499c:	430a      	orrs	r2, r1
 800499e:	4930      	ldr	r1, [pc, #192]	; (8004a60 <HAL_RCC_OscConfig+0x780>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80049a4:	4b2e      	ldr	r3, [pc, #184]	; (8004a60 <HAL_RCC_OscConfig+0x780>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a2d      	ldr	r2, [pc, #180]	; (8004a60 <HAL_RCC_OscConfig+0x780>)
 80049aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049b0:	4b2b      	ldr	r3, [pc, #172]	; (8004a60 <HAL_RCC_OscConfig+0x780>)
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	4a2a      	ldr	r2, [pc, #168]	; (8004a60 <HAL_RCC_OscConfig+0x780>)
 80049b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049bc:	f7fe fa92 	bl	8002ee4 <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049c2:	e008      	b.n	80049d6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c4:	f7fe fa8e 	bl	8002ee4 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e058      	b.n	8004a88 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049d6:	4b22      	ldr	r3, [pc, #136]	; (8004a60 <HAL_RCC_OscConfig+0x780>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d0f0      	beq.n	80049c4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049e2:	e050      	b.n	8004a86 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e04f      	b.n	8004a88 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049e8:	4b1d      	ldr	r3, [pc, #116]	; (8004a60 <HAL_RCC_OscConfig+0x780>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d148      	bne.n	8004a86 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80049f4:	4b1a      	ldr	r3, [pc, #104]	; (8004a60 <HAL_RCC_OscConfig+0x780>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a19      	ldr	r2, [pc, #100]	; (8004a60 <HAL_RCC_OscConfig+0x780>)
 80049fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a00:	4b17      	ldr	r3, [pc, #92]	; (8004a60 <HAL_RCC_OscConfig+0x780>)
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	4a16      	ldr	r2, [pc, #88]	; (8004a60 <HAL_RCC_OscConfig+0x780>)
 8004a06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a0a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a0c:	f7fe fa6a 	bl	8002ee4 <HAL_GetTick>
 8004a10:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a14:	f7fe fa66 	bl	8002ee4 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e030      	b.n	8004a88 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a26:	4b0e      	ldr	r3, [pc, #56]	; (8004a60 <HAL_RCC_OscConfig+0x780>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d0f0      	beq.n	8004a14 <HAL_RCC_OscConfig+0x734>
 8004a32:	e028      	b.n	8004a86 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	2b0c      	cmp	r3, #12
 8004a38:	d023      	beq.n	8004a82 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a3a:	4b09      	ldr	r3, [pc, #36]	; (8004a60 <HAL_RCC_OscConfig+0x780>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a08      	ldr	r2, [pc, #32]	; (8004a60 <HAL_RCC_OscConfig+0x780>)
 8004a40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a46:	f7fe fa4d 	bl	8002ee4 <HAL_GetTick>
 8004a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a4c:	e00c      	b.n	8004a68 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a4e:	f7fe fa49 	bl	8002ee4 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d905      	bls.n	8004a68 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e013      	b.n	8004a88 <HAL_RCC_OscConfig+0x7a8>
 8004a60:	40021000 	.word	0x40021000
 8004a64:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a68:	4b09      	ldr	r3, [pc, #36]	; (8004a90 <HAL_RCC_OscConfig+0x7b0>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1ec      	bne.n	8004a4e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004a74:	4b06      	ldr	r3, [pc, #24]	; (8004a90 <HAL_RCC_OscConfig+0x7b0>)
 8004a76:	68da      	ldr	r2, [r3, #12]
 8004a78:	4905      	ldr	r1, [pc, #20]	; (8004a90 <HAL_RCC_OscConfig+0x7b0>)
 8004a7a:	4b06      	ldr	r3, [pc, #24]	; (8004a94 <HAL_RCC_OscConfig+0x7b4>)
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	60cb      	str	r3, [r1, #12]
 8004a80:	e001      	b.n	8004a86 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e000      	b.n	8004a88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3720      	adds	r7, #32
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40021000 	.word	0x40021000
 8004a94:	feeefffc 	.word	0xfeeefffc

08004a98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e0e7      	b.n	8004c7c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004aac:	4b75      	ldr	r3, [pc, #468]	; (8004c84 <HAL_RCC_ClockConfig+0x1ec>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d910      	bls.n	8004adc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aba:	4b72      	ldr	r3, [pc, #456]	; (8004c84 <HAL_RCC_ClockConfig+0x1ec>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f023 0207 	bic.w	r2, r3, #7
 8004ac2:	4970      	ldr	r1, [pc, #448]	; (8004c84 <HAL_RCC_ClockConfig+0x1ec>)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aca:	4b6e      	ldr	r3, [pc, #440]	; (8004c84 <HAL_RCC_ClockConfig+0x1ec>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0307 	and.w	r3, r3, #7
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d001      	beq.n	8004adc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e0cf      	b.n	8004c7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d010      	beq.n	8004b0a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689a      	ldr	r2, [r3, #8]
 8004aec:	4b66      	ldr	r3, [pc, #408]	; (8004c88 <HAL_RCC_ClockConfig+0x1f0>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d908      	bls.n	8004b0a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004af8:	4b63      	ldr	r3, [pc, #396]	; (8004c88 <HAL_RCC_ClockConfig+0x1f0>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	4960      	ldr	r1, [pc, #384]	; (8004c88 <HAL_RCC_ClockConfig+0x1f0>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d04c      	beq.n	8004bb0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b03      	cmp	r3, #3
 8004b1c:	d107      	bne.n	8004b2e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b1e:	4b5a      	ldr	r3, [pc, #360]	; (8004c88 <HAL_RCC_ClockConfig+0x1f0>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d121      	bne.n	8004b6e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e0a6      	b.n	8004c7c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d107      	bne.n	8004b46 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b36:	4b54      	ldr	r3, [pc, #336]	; (8004c88 <HAL_RCC_ClockConfig+0x1f0>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d115      	bne.n	8004b6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e09a      	b.n	8004c7c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d107      	bne.n	8004b5e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b4e:	4b4e      	ldr	r3, [pc, #312]	; (8004c88 <HAL_RCC_ClockConfig+0x1f0>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d109      	bne.n	8004b6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e08e      	b.n	8004c7c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b5e:	4b4a      	ldr	r3, [pc, #296]	; (8004c88 <HAL_RCC_ClockConfig+0x1f0>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e086      	b.n	8004c7c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b6e:	4b46      	ldr	r3, [pc, #280]	; (8004c88 <HAL_RCC_ClockConfig+0x1f0>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f023 0203 	bic.w	r2, r3, #3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	4943      	ldr	r1, [pc, #268]	; (8004c88 <HAL_RCC_ClockConfig+0x1f0>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b80:	f7fe f9b0 	bl	8002ee4 <HAL_GetTick>
 8004b84:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b86:	e00a      	b.n	8004b9e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b88:	f7fe f9ac 	bl	8002ee4 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e06e      	b.n	8004c7c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b9e:	4b3a      	ldr	r3, [pc, #232]	; (8004c88 <HAL_RCC_ClockConfig+0x1f0>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 020c 	and.w	r2, r3, #12
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d1eb      	bne.n	8004b88 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d010      	beq.n	8004bde <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689a      	ldr	r2, [r3, #8]
 8004bc0:	4b31      	ldr	r3, [pc, #196]	; (8004c88 <HAL_RCC_ClockConfig+0x1f0>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d208      	bcs.n	8004bde <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bcc:	4b2e      	ldr	r3, [pc, #184]	; (8004c88 <HAL_RCC_ClockConfig+0x1f0>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	492b      	ldr	r1, [pc, #172]	; (8004c88 <HAL_RCC_ClockConfig+0x1f0>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bde:	4b29      	ldr	r3, [pc, #164]	; (8004c84 <HAL_RCC_ClockConfig+0x1ec>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0307 	and.w	r3, r3, #7
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d210      	bcs.n	8004c0e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bec:	4b25      	ldr	r3, [pc, #148]	; (8004c84 <HAL_RCC_ClockConfig+0x1ec>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f023 0207 	bic.w	r2, r3, #7
 8004bf4:	4923      	ldr	r1, [pc, #140]	; (8004c84 <HAL_RCC_ClockConfig+0x1ec>)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bfc:	4b21      	ldr	r3, [pc, #132]	; (8004c84 <HAL_RCC_ClockConfig+0x1ec>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d001      	beq.n	8004c0e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e036      	b.n	8004c7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0304 	and.w	r3, r3, #4
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d008      	beq.n	8004c2c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c1a:	4b1b      	ldr	r3, [pc, #108]	; (8004c88 <HAL_RCC_ClockConfig+0x1f0>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	4918      	ldr	r1, [pc, #96]	; (8004c88 <HAL_RCC_ClockConfig+0x1f0>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0308 	and.w	r3, r3, #8
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d009      	beq.n	8004c4c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c38:	4b13      	ldr	r3, [pc, #76]	; (8004c88 <HAL_RCC_ClockConfig+0x1f0>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	4910      	ldr	r1, [pc, #64]	; (8004c88 <HAL_RCC_ClockConfig+0x1f0>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c4c:	f000 f824 	bl	8004c98 <HAL_RCC_GetSysClockFreq>
 8004c50:	4602      	mov	r2, r0
 8004c52:	4b0d      	ldr	r3, [pc, #52]	; (8004c88 <HAL_RCC_ClockConfig+0x1f0>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	091b      	lsrs	r3, r3, #4
 8004c58:	f003 030f 	and.w	r3, r3, #15
 8004c5c:	490b      	ldr	r1, [pc, #44]	; (8004c8c <HAL_RCC_ClockConfig+0x1f4>)
 8004c5e:	5ccb      	ldrb	r3, [r1, r3]
 8004c60:	f003 031f 	and.w	r3, r3, #31
 8004c64:	fa22 f303 	lsr.w	r3, r2, r3
 8004c68:	4a09      	ldr	r2, [pc, #36]	; (8004c90 <HAL_RCC_ClockConfig+0x1f8>)
 8004c6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c6c:	4b09      	ldr	r3, [pc, #36]	; (8004c94 <HAL_RCC_ClockConfig+0x1fc>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7fd ff75 	bl	8002b60 <HAL_InitTick>
 8004c76:	4603      	mov	r3, r0
 8004c78:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c7a:	7afb      	ldrb	r3, [r7, #11]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	40022000 	.word	0x40022000
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	0800f24c 	.word	0x0800f24c
 8004c90:	20000000 	.word	0x20000000
 8004c94:	20000004 	.word	0x20000004

08004c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b089      	sub	sp, #36	; 0x24
 8004c9c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	61fb      	str	r3, [r7, #28]
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ca6:	4b3e      	ldr	r3, [pc, #248]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 030c 	and.w	r3, r3, #12
 8004cae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cb0:	4b3b      	ldr	r3, [pc, #236]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f003 0303 	and.w	r3, r3, #3
 8004cb8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d005      	beq.n	8004ccc <HAL_RCC_GetSysClockFreq+0x34>
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	2b0c      	cmp	r3, #12
 8004cc4:	d121      	bne.n	8004d0a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d11e      	bne.n	8004d0a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ccc:	4b34      	ldr	r3, [pc, #208]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0308 	and.w	r3, r3, #8
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d107      	bne.n	8004ce8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004cd8:	4b31      	ldr	r3, [pc, #196]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cde:	0a1b      	lsrs	r3, r3, #8
 8004ce0:	f003 030f 	and.w	r3, r3, #15
 8004ce4:	61fb      	str	r3, [r7, #28]
 8004ce6:	e005      	b.n	8004cf4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ce8:	4b2d      	ldr	r3, [pc, #180]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	091b      	lsrs	r3, r3, #4
 8004cee:	f003 030f 	and.w	r3, r3, #15
 8004cf2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004cf4:	4a2b      	ldr	r2, [pc, #172]	; (8004da4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cfc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10d      	bne.n	8004d20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d08:	e00a      	b.n	8004d20 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	2b04      	cmp	r3, #4
 8004d0e:	d102      	bne.n	8004d16 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d10:	4b25      	ldr	r3, [pc, #148]	; (8004da8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d12:	61bb      	str	r3, [r7, #24]
 8004d14:	e004      	b.n	8004d20 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d101      	bne.n	8004d20 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d1c:	4b23      	ldr	r3, [pc, #140]	; (8004dac <HAL_RCC_GetSysClockFreq+0x114>)
 8004d1e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	2b0c      	cmp	r3, #12
 8004d24:	d134      	bne.n	8004d90 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d26:	4b1e      	ldr	r3, [pc, #120]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f003 0303 	and.w	r3, r3, #3
 8004d2e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d003      	beq.n	8004d3e <HAL_RCC_GetSysClockFreq+0xa6>
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2b03      	cmp	r3, #3
 8004d3a:	d003      	beq.n	8004d44 <HAL_RCC_GetSysClockFreq+0xac>
 8004d3c:	e005      	b.n	8004d4a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d3e:	4b1a      	ldr	r3, [pc, #104]	; (8004da8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d40:	617b      	str	r3, [r7, #20]
      break;
 8004d42:	e005      	b.n	8004d50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d44:	4b19      	ldr	r3, [pc, #100]	; (8004dac <HAL_RCC_GetSysClockFreq+0x114>)
 8004d46:	617b      	str	r3, [r7, #20]
      break;
 8004d48:	e002      	b.n	8004d50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	617b      	str	r3, [r7, #20]
      break;
 8004d4e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d50:	4b13      	ldr	r3, [pc, #76]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	091b      	lsrs	r3, r3, #4
 8004d56:	f003 0307 	and.w	r3, r3, #7
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d5e:	4b10      	ldr	r3, [pc, #64]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	0a1b      	lsrs	r3, r3, #8
 8004d64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	fb03 f202 	mul.w	r2, r3, r2
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d74:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d76:	4b0a      	ldr	r3, [pc, #40]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	0e5b      	lsrs	r3, r3, #25
 8004d7c:	f003 0303 	and.w	r3, r3, #3
 8004d80:	3301      	adds	r3, #1
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d90:	69bb      	ldr	r3, [r7, #24]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3724      	adds	r7, #36	; 0x24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	40021000 	.word	0x40021000
 8004da4:	0800f264 	.word	0x0800f264
 8004da8:	00f42400 	.word	0x00f42400
 8004dac:	007a1200 	.word	0x007a1200

08004db0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004db0:	b480      	push	{r7}
 8004db2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004db4:	4b03      	ldr	r3, [pc, #12]	; (8004dc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004db6:	681b      	ldr	r3, [r3, #0]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	20000000 	.word	0x20000000

08004dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004dcc:	f7ff fff0 	bl	8004db0 <HAL_RCC_GetHCLKFreq>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	4b06      	ldr	r3, [pc, #24]	; (8004dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	0a1b      	lsrs	r3, r3, #8
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	4904      	ldr	r1, [pc, #16]	; (8004df0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004dde:	5ccb      	ldrb	r3, [r1, r3]
 8004de0:	f003 031f 	and.w	r3, r3, #31
 8004de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	40021000 	.word	0x40021000
 8004df0:	0800f25c 	.word	0x0800f25c

08004df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004df8:	f7ff ffda 	bl	8004db0 <HAL_RCC_GetHCLKFreq>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	4b06      	ldr	r3, [pc, #24]	; (8004e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	0adb      	lsrs	r3, r3, #11
 8004e04:	f003 0307 	and.w	r3, r3, #7
 8004e08:	4904      	ldr	r1, [pc, #16]	; (8004e1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e0a:	5ccb      	ldrb	r3, [r1, r3]
 8004e0c:	f003 031f 	and.w	r3, r3, #31
 8004e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	40021000 	.word	0x40021000
 8004e1c:	0800f25c 	.word	0x0800f25c

08004e20 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	220f      	movs	r2, #15
 8004e2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004e30:	4b12      	ldr	r3, [pc, #72]	; (8004e7c <HAL_RCC_GetClockConfig+0x5c>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f003 0203 	and.w	r2, r3, #3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004e3c:	4b0f      	ldr	r3, [pc, #60]	; (8004e7c <HAL_RCC_GetClockConfig+0x5c>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004e48:	4b0c      	ldr	r3, [pc, #48]	; (8004e7c <HAL_RCC_GetClockConfig+0x5c>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004e54:	4b09      	ldr	r3, [pc, #36]	; (8004e7c <HAL_RCC_GetClockConfig+0x5c>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	08db      	lsrs	r3, r3, #3
 8004e5a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004e62:	4b07      	ldr	r3, [pc, #28]	; (8004e80 <HAL_RCC_GetClockConfig+0x60>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0207 	and.w	r2, r3, #7
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	601a      	str	r2, [r3, #0]
}
 8004e6e:	bf00      	nop
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	40022000 	.word	0x40022000

08004e84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e90:	4b2a      	ldr	r3, [pc, #168]	; (8004f3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d003      	beq.n	8004ea4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e9c:	f7ff f9bc 	bl	8004218 <HAL_PWREx_GetVoltageRange>
 8004ea0:	6178      	str	r0, [r7, #20]
 8004ea2:	e014      	b.n	8004ece <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ea4:	4b25      	ldr	r3, [pc, #148]	; (8004f3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea8:	4a24      	ldr	r2, [pc, #144]	; (8004f3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eae:	6593      	str	r3, [r2, #88]	; 0x58
 8004eb0:	4b22      	ldr	r3, [pc, #136]	; (8004f3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb8:	60fb      	str	r3, [r7, #12]
 8004eba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ebc:	f7ff f9ac 	bl	8004218 <HAL_PWREx_GetVoltageRange>
 8004ec0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ec2:	4b1e      	ldr	r3, [pc, #120]	; (8004f3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec6:	4a1d      	ldr	r2, [pc, #116]	; (8004f3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ec8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ecc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ed4:	d10b      	bne.n	8004eee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b80      	cmp	r3, #128	; 0x80
 8004eda:	d919      	bls.n	8004f10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2ba0      	cmp	r3, #160	; 0xa0
 8004ee0:	d902      	bls.n	8004ee8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	613b      	str	r3, [r7, #16]
 8004ee6:	e013      	b.n	8004f10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ee8:	2301      	movs	r3, #1
 8004eea:	613b      	str	r3, [r7, #16]
 8004eec:	e010      	b.n	8004f10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b80      	cmp	r3, #128	; 0x80
 8004ef2:	d902      	bls.n	8004efa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	613b      	str	r3, [r7, #16]
 8004ef8:	e00a      	b.n	8004f10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b80      	cmp	r3, #128	; 0x80
 8004efe:	d102      	bne.n	8004f06 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f00:	2302      	movs	r3, #2
 8004f02:	613b      	str	r3, [r7, #16]
 8004f04:	e004      	b.n	8004f10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b70      	cmp	r3, #112	; 0x70
 8004f0a:	d101      	bne.n	8004f10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f10:	4b0b      	ldr	r3, [pc, #44]	; (8004f40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f023 0207 	bic.w	r2, r3, #7
 8004f18:	4909      	ldr	r1, [pc, #36]	; (8004f40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f20:	4b07      	ldr	r3, [pc, #28]	; (8004f40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0307 	and.w	r3, r3, #7
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d001      	beq.n	8004f32 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e000      	b.n	8004f34 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3718      	adds	r7, #24
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	40021000 	.word	0x40021000
 8004f40:	40022000 	.word	0x40022000

08004f44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f50:	2300      	movs	r3, #0
 8004f52:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d041      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f64:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f68:	d02a      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004f6a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f6e:	d824      	bhi.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f74:	d008      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f7a:	d81e      	bhi.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00a      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004f80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f84:	d010      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004f86:	e018      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f88:	4b86      	ldr	r3, [pc, #536]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	4a85      	ldr	r2, [pc, #532]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f92:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f94:	e015      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	3304      	adds	r3, #4
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f000 fabb 	bl	8005518 <RCCEx_PLLSAI1_Config>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fa6:	e00c      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3320      	adds	r3, #32
 8004fac:	2100      	movs	r1, #0
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 fba6 	bl	8005700 <RCCEx_PLLSAI2_Config>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fb8:	e003      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	74fb      	strb	r3, [r7, #19]
      break;
 8004fbe:	e000      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004fc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fc2:	7cfb      	ldrb	r3, [r7, #19]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10b      	bne.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fc8:	4b76      	ldr	r3, [pc, #472]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fd6:	4973      	ldr	r1, [pc, #460]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004fde:	e001      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe0:	7cfb      	ldrb	r3, [r7, #19]
 8004fe2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d041      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ff4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ff8:	d02a      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004ffa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ffe:	d824      	bhi.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005000:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005004:	d008      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005006:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800500a:	d81e      	bhi.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00a      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005010:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005014:	d010      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005016:	e018      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005018:	4b62      	ldr	r3, [pc, #392]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	4a61      	ldr	r2, [pc, #388]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800501e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005022:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005024:	e015      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	3304      	adds	r3, #4
 800502a:	2100      	movs	r1, #0
 800502c:	4618      	mov	r0, r3
 800502e:	f000 fa73 	bl	8005518 <RCCEx_PLLSAI1_Config>
 8005032:	4603      	mov	r3, r0
 8005034:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005036:	e00c      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	3320      	adds	r3, #32
 800503c:	2100      	movs	r1, #0
 800503e:	4618      	mov	r0, r3
 8005040:	f000 fb5e 	bl	8005700 <RCCEx_PLLSAI2_Config>
 8005044:	4603      	mov	r3, r0
 8005046:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005048:	e003      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	74fb      	strb	r3, [r7, #19]
      break;
 800504e:	e000      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005050:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005052:	7cfb      	ldrb	r3, [r7, #19]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10b      	bne.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005058:	4b52      	ldr	r3, [pc, #328]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800505a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005066:	494f      	ldr	r1, [pc, #316]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005068:	4313      	orrs	r3, r2
 800506a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800506e:	e001      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005070:	7cfb      	ldrb	r3, [r7, #19]
 8005072:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 80a0 	beq.w	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005082:	2300      	movs	r3, #0
 8005084:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005086:	4b47      	ldr	r3, [pc, #284]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800508a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005092:	2301      	movs	r3, #1
 8005094:	e000      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005096:	2300      	movs	r3, #0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00d      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800509c:	4b41      	ldr	r3, [pc, #260]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800509e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a0:	4a40      	ldr	r2, [pc, #256]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a6:	6593      	str	r3, [r2, #88]	; 0x58
 80050a8:	4b3e      	ldr	r3, [pc, #248]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b0:	60bb      	str	r3, [r7, #8]
 80050b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050b4:	2301      	movs	r3, #1
 80050b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050b8:	4b3b      	ldr	r3, [pc, #236]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a3a      	ldr	r2, [pc, #232]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050c4:	f7fd ff0e 	bl	8002ee4 <HAL_GetTick>
 80050c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050ca:	e009      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050cc:	f7fd ff0a 	bl	8002ee4 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d902      	bls.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	74fb      	strb	r3, [r7, #19]
        break;
 80050de:	e005      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050e0:	4b31      	ldr	r3, [pc, #196]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0ef      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80050ec:	7cfb      	ldrb	r3, [r7, #19]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d15c      	bne.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050f2:	4b2c      	ldr	r3, [pc, #176]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d01f      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	429a      	cmp	r2, r3
 800510e:	d019      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005110:	4b24      	ldr	r3, [pc, #144]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800511a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800511c:	4b21      	ldr	r3, [pc, #132]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800511e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005122:	4a20      	ldr	r2, [pc, #128]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005128:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800512c:	4b1d      	ldr	r3, [pc, #116]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800512e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005132:	4a1c      	ldr	r2, [pc, #112]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005134:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005138:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800513c:	4a19      	ldr	r2, [pc, #100]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	d016      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514e:	f7fd fec9 	bl	8002ee4 <HAL_GetTick>
 8005152:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005154:	e00b      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005156:	f7fd fec5 	bl	8002ee4 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	f241 3288 	movw	r2, #5000	; 0x1388
 8005164:	4293      	cmp	r3, r2
 8005166:	d902      	bls.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	74fb      	strb	r3, [r7, #19]
            break;
 800516c:	e006      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800516e:	4b0d      	ldr	r3, [pc, #52]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005174:	f003 0302 	and.w	r3, r3, #2
 8005178:	2b00      	cmp	r3, #0
 800517a:	d0ec      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800517c:	7cfb      	ldrb	r3, [r7, #19]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10c      	bne.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005182:	4b08      	ldr	r3, [pc, #32]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005188:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005192:	4904      	ldr	r1, [pc, #16]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005194:	4313      	orrs	r3, r2
 8005196:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800519a:	e009      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800519c:	7cfb      	ldrb	r3, [r7, #19]
 800519e:	74bb      	strb	r3, [r7, #18]
 80051a0:	e006      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80051a2:	bf00      	nop
 80051a4:	40021000 	.word	0x40021000
 80051a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ac:	7cfb      	ldrb	r3, [r7, #19]
 80051ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051b0:	7c7b      	ldrb	r3, [r7, #17]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d105      	bne.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051b6:	4b9e      	ldr	r3, [pc, #632]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ba:	4a9d      	ldr	r2, [pc, #628]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00a      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051ce:	4b98      	ldr	r3, [pc, #608]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d4:	f023 0203 	bic.w	r2, r3, #3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051dc:	4994      	ldr	r1, [pc, #592]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00a      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051f0:	4b8f      	ldr	r3, [pc, #572]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f6:	f023 020c 	bic.w	r2, r3, #12
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fe:	498c      	ldr	r1, [pc, #560]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005200:	4313      	orrs	r3, r2
 8005202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0304 	and.w	r3, r3, #4
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00a      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005212:	4b87      	ldr	r3, [pc, #540]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005218:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005220:	4983      	ldr	r1, [pc, #524]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005222:	4313      	orrs	r3, r2
 8005224:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0308 	and.w	r3, r3, #8
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00a      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005234:	4b7e      	ldr	r3, [pc, #504]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800523a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005242:	497b      	ldr	r1, [pc, #492]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005244:	4313      	orrs	r3, r2
 8005246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0310 	and.w	r3, r3, #16
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00a      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005256:	4b76      	ldr	r3, [pc, #472]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005264:	4972      	ldr	r1, [pc, #456]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005266:	4313      	orrs	r3, r2
 8005268:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0320 	and.w	r3, r3, #32
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00a      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005278:	4b6d      	ldr	r3, [pc, #436]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800527a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005286:	496a      	ldr	r1, [pc, #424]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005288:	4313      	orrs	r3, r2
 800528a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00a      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800529a:	4b65      	ldr	r3, [pc, #404]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800529c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052a8:	4961      	ldr	r1, [pc, #388]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00a      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052bc:	4b5c      	ldr	r3, [pc, #368]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ca:	4959      	ldr	r1, [pc, #356]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00a      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052de:	4b54      	ldr	r3, [pc, #336]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ec:	4950      	ldr	r1, [pc, #320]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00a      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005300:	4b4b      	ldr	r3, [pc, #300]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005306:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530e:	4948      	ldr	r1, [pc, #288]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005310:	4313      	orrs	r3, r2
 8005312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00a      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005322:	4b43      	ldr	r3, [pc, #268]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005328:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005330:	493f      	ldr	r1, [pc, #252]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005332:	4313      	orrs	r3, r2
 8005334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d028      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005344:	4b3a      	ldr	r3, [pc, #232]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800534a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005352:	4937      	ldr	r1, [pc, #220]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005354:	4313      	orrs	r3, r2
 8005356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800535e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005362:	d106      	bne.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005364:	4b32      	ldr	r3, [pc, #200]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	4a31      	ldr	r2, [pc, #196]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800536a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800536e:	60d3      	str	r3, [r2, #12]
 8005370:	e011      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005376:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800537a:	d10c      	bne.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	3304      	adds	r3, #4
 8005380:	2101      	movs	r1, #1
 8005382:	4618      	mov	r0, r3
 8005384:	f000 f8c8 	bl	8005518 <RCCEx_PLLSAI1_Config>
 8005388:	4603      	mov	r3, r0
 800538a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800538c:	7cfb      	ldrb	r3, [r7, #19]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005392:	7cfb      	ldrb	r3, [r7, #19]
 8005394:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d028      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80053a2:	4b23      	ldr	r3, [pc, #140]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b0:	491f      	ldr	r1, [pc, #124]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053c0:	d106      	bne.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053c2:	4b1b      	ldr	r3, [pc, #108]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	4a1a      	ldr	r2, [pc, #104]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053cc:	60d3      	str	r3, [r2, #12]
 80053ce:	e011      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053d8:	d10c      	bne.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	3304      	adds	r3, #4
 80053de:	2101      	movs	r1, #1
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 f899 	bl	8005518 <RCCEx_PLLSAI1_Config>
 80053e6:	4603      	mov	r3, r0
 80053e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053ea:	7cfb      	ldrb	r3, [r7, #19]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80053f0:	7cfb      	ldrb	r3, [r7, #19]
 80053f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d02b      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005400:	4b0b      	ldr	r3, [pc, #44]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005406:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800540e:	4908      	ldr	r1, [pc, #32]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005410:	4313      	orrs	r3, r2
 8005412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800541a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800541e:	d109      	bne.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005420:	4b03      	ldr	r3, [pc, #12]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	4a02      	ldr	r2, [pc, #8]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005426:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800542a:	60d3      	str	r3, [r2, #12]
 800542c:	e014      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800542e:	bf00      	nop
 8005430:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005438:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800543c:	d10c      	bne.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	3304      	adds	r3, #4
 8005442:	2101      	movs	r1, #1
 8005444:	4618      	mov	r0, r3
 8005446:	f000 f867 	bl	8005518 <RCCEx_PLLSAI1_Config>
 800544a:	4603      	mov	r3, r0
 800544c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800544e:	7cfb      	ldrb	r3, [r7, #19]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005454:	7cfb      	ldrb	r3, [r7, #19]
 8005456:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d02f      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005464:	4b2b      	ldr	r3, [pc, #172]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005472:	4928      	ldr	r1, [pc, #160]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005474:	4313      	orrs	r3, r2
 8005476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800547e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005482:	d10d      	bne.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3304      	adds	r3, #4
 8005488:	2102      	movs	r1, #2
 800548a:	4618      	mov	r0, r3
 800548c:	f000 f844 	bl	8005518 <RCCEx_PLLSAI1_Config>
 8005490:	4603      	mov	r3, r0
 8005492:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005494:	7cfb      	ldrb	r3, [r7, #19]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d014      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800549a:	7cfb      	ldrb	r3, [r7, #19]
 800549c:	74bb      	strb	r3, [r7, #18]
 800549e:	e011      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054a8:	d10c      	bne.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	3320      	adds	r3, #32
 80054ae:	2102      	movs	r1, #2
 80054b0:	4618      	mov	r0, r3
 80054b2:	f000 f925 	bl	8005700 <RCCEx_PLLSAI2_Config>
 80054b6:	4603      	mov	r3, r0
 80054b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054ba:	7cfb      	ldrb	r3, [r7, #19]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80054c0:	7cfb      	ldrb	r3, [r7, #19]
 80054c2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00a      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80054d0:	4b10      	ldr	r3, [pc, #64]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054de:	490d      	ldr	r1, [pc, #52]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00b      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80054f2:	4b08      	ldr	r3, [pc, #32]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005502:	4904      	ldr	r1, [pc, #16]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005504:	4313      	orrs	r3, r2
 8005506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800550a:	7cbb      	ldrb	r3, [r7, #18]
}
 800550c:	4618      	mov	r0, r3
 800550e:	3718      	adds	r7, #24
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40021000 	.word	0x40021000

08005518 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005522:	2300      	movs	r3, #0
 8005524:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005526:	4b75      	ldr	r3, [pc, #468]	; (80056fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	f003 0303 	and.w	r3, r3, #3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d018      	beq.n	8005564 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005532:	4b72      	ldr	r3, [pc, #456]	; (80056fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f003 0203 	and.w	r2, r3, #3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	429a      	cmp	r2, r3
 8005540:	d10d      	bne.n	800555e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
       ||
 8005546:	2b00      	cmp	r3, #0
 8005548:	d009      	beq.n	800555e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800554a:	4b6c      	ldr	r3, [pc, #432]	; (80056fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	091b      	lsrs	r3, r3, #4
 8005550:	f003 0307 	and.w	r3, r3, #7
 8005554:	1c5a      	adds	r2, r3, #1
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
       ||
 800555a:	429a      	cmp	r2, r3
 800555c:	d047      	beq.n	80055ee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	73fb      	strb	r3, [r7, #15]
 8005562:	e044      	b.n	80055ee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b03      	cmp	r3, #3
 800556a:	d018      	beq.n	800559e <RCCEx_PLLSAI1_Config+0x86>
 800556c:	2b03      	cmp	r3, #3
 800556e:	d825      	bhi.n	80055bc <RCCEx_PLLSAI1_Config+0xa4>
 8005570:	2b01      	cmp	r3, #1
 8005572:	d002      	beq.n	800557a <RCCEx_PLLSAI1_Config+0x62>
 8005574:	2b02      	cmp	r3, #2
 8005576:	d009      	beq.n	800558c <RCCEx_PLLSAI1_Config+0x74>
 8005578:	e020      	b.n	80055bc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800557a:	4b60      	ldr	r3, [pc, #384]	; (80056fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d11d      	bne.n	80055c2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800558a:	e01a      	b.n	80055c2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800558c:	4b5b      	ldr	r3, [pc, #364]	; (80056fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005594:	2b00      	cmp	r3, #0
 8005596:	d116      	bne.n	80055c6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800559c:	e013      	b.n	80055c6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800559e:	4b57      	ldr	r3, [pc, #348]	; (80056fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10f      	bne.n	80055ca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80055aa:	4b54      	ldr	r3, [pc, #336]	; (80056fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d109      	bne.n	80055ca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80055ba:	e006      	b.n	80055ca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	73fb      	strb	r3, [r7, #15]
      break;
 80055c0:	e004      	b.n	80055cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055c2:	bf00      	nop
 80055c4:	e002      	b.n	80055cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055c6:	bf00      	nop
 80055c8:	e000      	b.n	80055cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10d      	bne.n	80055ee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80055d2:	4b4a      	ldr	r3, [pc, #296]	; (80056fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6819      	ldr	r1, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	3b01      	subs	r3, #1
 80055e4:	011b      	lsls	r3, r3, #4
 80055e6:	430b      	orrs	r3, r1
 80055e8:	4944      	ldr	r1, [pc, #272]	; (80056fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80055ee:	7bfb      	ldrb	r3, [r7, #15]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d17d      	bne.n	80056f0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80055f4:	4b41      	ldr	r3, [pc, #260]	; (80056fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a40      	ldr	r2, [pc, #256]	; (80056fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80055fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005600:	f7fd fc70 	bl	8002ee4 <HAL_GetTick>
 8005604:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005606:	e009      	b.n	800561c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005608:	f7fd fc6c 	bl	8002ee4 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b02      	cmp	r3, #2
 8005614:	d902      	bls.n	800561c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	73fb      	strb	r3, [r7, #15]
        break;
 800561a:	e005      	b.n	8005628 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800561c:	4b37      	ldr	r3, [pc, #220]	; (80056fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1ef      	bne.n	8005608 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005628:	7bfb      	ldrb	r3, [r7, #15]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d160      	bne.n	80056f0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d111      	bne.n	8005658 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005634:	4b31      	ldr	r3, [pc, #196]	; (80056fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800563c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	6892      	ldr	r2, [r2, #8]
 8005644:	0211      	lsls	r1, r2, #8
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	68d2      	ldr	r2, [r2, #12]
 800564a:	0912      	lsrs	r2, r2, #4
 800564c:	0452      	lsls	r2, r2, #17
 800564e:	430a      	orrs	r2, r1
 8005650:	492a      	ldr	r1, [pc, #168]	; (80056fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005652:	4313      	orrs	r3, r2
 8005654:	610b      	str	r3, [r1, #16]
 8005656:	e027      	b.n	80056a8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d112      	bne.n	8005684 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800565e:	4b27      	ldr	r3, [pc, #156]	; (80056fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005666:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	6892      	ldr	r2, [r2, #8]
 800566e:	0211      	lsls	r1, r2, #8
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	6912      	ldr	r2, [r2, #16]
 8005674:	0852      	lsrs	r2, r2, #1
 8005676:	3a01      	subs	r2, #1
 8005678:	0552      	lsls	r2, r2, #21
 800567a:	430a      	orrs	r2, r1
 800567c:	491f      	ldr	r1, [pc, #124]	; (80056fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800567e:	4313      	orrs	r3, r2
 8005680:	610b      	str	r3, [r1, #16]
 8005682:	e011      	b.n	80056a8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005684:	4b1d      	ldr	r3, [pc, #116]	; (80056fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800568c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	6892      	ldr	r2, [r2, #8]
 8005694:	0211      	lsls	r1, r2, #8
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	6952      	ldr	r2, [r2, #20]
 800569a:	0852      	lsrs	r2, r2, #1
 800569c:	3a01      	subs	r2, #1
 800569e:	0652      	lsls	r2, r2, #25
 80056a0:	430a      	orrs	r2, r1
 80056a2:	4916      	ldr	r1, [pc, #88]	; (80056fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80056a8:	4b14      	ldr	r3, [pc, #80]	; (80056fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a13      	ldr	r2, [pc, #76]	; (80056fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b4:	f7fd fc16 	bl	8002ee4 <HAL_GetTick>
 80056b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056ba:	e009      	b.n	80056d0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056bc:	f7fd fc12 	bl	8002ee4 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d902      	bls.n	80056d0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	73fb      	strb	r3, [r7, #15]
          break;
 80056ce:	e005      	b.n	80056dc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056d0:	4b0a      	ldr	r3, [pc, #40]	; (80056fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d0ef      	beq.n	80056bc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80056dc:	7bfb      	ldrb	r3, [r7, #15]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d106      	bne.n	80056f0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80056e2:	4b06      	ldr	r3, [pc, #24]	; (80056fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80056e4:	691a      	ldr	r2, [r3, #16]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	4904      	ldr	r1, [pc, #16]	; (80056fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	40021000 	.word	0x40021000

08005700 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800570e:	4b6a      	ldr	r3, [pc, #424]	; (80058b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	f003 0303 	and.w	r3, r3, #3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d018      	beq.n	800574c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800571a:	4b67      	ldr	r3, [pc, #412]	; (80058b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f003 0203 	and.w	r2, r3, #3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	429a      	cmp	r2, r3
 8005728:	d10d      	bne.n	8005746 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
       ||
 800572e:	2b00      	cmp	r3, #0
 8005730:	d009      	beq.n	8005746 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005732:	4b61      	ldr	r3, [pc, #388]	; (80058b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	091b      	lsrs	r3, r3, #4
 8005738:	f003 0307 	and.w	r3, r3, #7
 800573c:	1c5a      	adds	r2, r3, #1
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
       ||
 8005742:	429a      	cmp	r2, r3
 8005744:	d047      	beq.n	80057d6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	73fb      	strb	r3, [r7, #15]
 800574a:	e044      	b.n	80057d6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2b03      	cmp	r3, #3
 8005752:	d018      	beq.n	8005786 <RCCEx_PLLSAI2_Config+0x86>
 8005754:	2b03      	cmp	r3, #3
 8005756:	d825      	bhi.n	80057a4 <RCCEx_PLLSAI2_Config+0xa4>
 8005758:	2b01      	cmp	r3, #1
 800575a:	d002      	beq.n	8005762 <RCCEx_PLLSAI2_Config+0x62>
 800575c:	2b02      	cmp	r3, #2
 800575e:	d009      	beq.n	8005774 <RCCEx_PLLSAI2_Config+0x74>
 8005760:	e020      	b.n	80057a4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005762:	4b55      	ldr	r3, [pc, #340]	; (80058b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	2b00      	cmp	r3, #0
 800576c:	d11d      	bne.n	80057aa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005772:	e01a      	b.n	80057aa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005774:	4b50      	ldr	r3, [pc, #320]	; (80058b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800577c:	2b00      	cmp	r3, #0
 800577e:	d116      	bne.n	80057ae <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005784:	e013      	b.n	80057ae <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005786:	4b4c      	ldr	r3, [pc, #304]	; (80058b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10f      	bne.n	80057b2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005792:	4b49      	ldr	r3, [pc, #292]	; (80058b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d109      	bne.n	80057b2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057a2:	e006      	b.n	80057b2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	73fb      	strb	r3, [r7, #15]
      break;
 80057a8:	e004      	b.n	80057b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057aa:	bf00      	nop
 80057ac:	e002      	b.n	80057b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057ae:	bf00      	nop
 80057b0:	e000      	b.n	80057b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80057b4:	7bfb      	ldrb	r3, [r7, #15]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10d      	bne.n	80057d6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80057ba:	4b3f      	ldr	r3, [pc, #252]	; (80058b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6819      	ldr	r1, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	3b01      	subs	r3, #1
 80057cc:	011b      	lsls	r3, r3, #4
 80057ce:	430b      	orrs	r3, r1
 80057d0:	4939      	ldr	r1, [pc, #228]	; (80058b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80057d6:	7bfb      	ldrb	r3, [r7, #15]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d167      	bne.n	80058ac <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80057dc:	4b36      	ldr	r3, [pc, #216]	; (80058b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a35      	ldr	r2, [pc, #212]	; (80058b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057e8:	f7fd fb7c 	bl	8002ee4 <HAL_GetTick>
 80057ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80057ee:	e009      	b.n	8005804 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057f0:	f7fd fb78 	bl	8002ee4 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d902      	bls.n	8005804 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	73fb      	strb	r3, [r7, #15]
        break;
 8005802:	e005      	b.n	8005810 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005804:	4b2c      	ldr	r3, [pc, #176]	; (80058b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1ef      	bne.n	80057f0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005810:	7bfb      	ldrb	r3, [r7, #15]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d14a      	bne.n	80058ac <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d111      	bne.n	8005840 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800581c:	4b26      	ldr	r3, [pc, #152]	; (80058b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	6892      	ldr	r2, [r2, #8]
 800582c:	0211      	lsls	r1, r2, #8
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	68d2      	ldr	r2, [r2, #12]
 8005832:	0912      	lsrs	r2, r2, #4
 8005834:	0452      	lsls	r2, r2, #17
 8005836:	430a      	orrs	r2, r1
 8005838:	491f      	ldr	r1, [pc, #124]	; (80058b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800583a:	4313      	orrs	r3, r2
 800583c:	614b      	str	r3, [r1, #20]
 800583e:	e011      	b.n	8005864 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005840:	4b1d      	ldr	r3, [pc, #116]	; (80058b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005848:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	6892      	ldr	r2, [r2, #8]
 8005850:	0211      	lsls	r1, r2, #8
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	6912      	ldr	r2, [r2, #16]
 8005856:	0852      	lsrs	r2, r2, #1
 8005858:	3a01      	subs	r2, #1
 800585a:	0652      	lsls	r2, r2, #25
 800585c:	430a      	orrs	r2, r1
 800585e:	4916      	ldr	r1, [pc, #88]	; (80058b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005860:	4313      	orrs	r3, r2
 8005862:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005864:	4b14      	ldr	r3, [pc, #80]	; (80058b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a13      	ldr	r2, [pc, #76]	; (80058b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800586a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800586e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005870:	f7fd fb38 	bl	8002ee4 <HAL_GetTick>
 8005874:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005876:	e009      	b.n	800588c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005878:	f7fd fb34 	bl	8002ee4 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	2b02      	cmp	r3, #2
 8005884:	d902      	bls.n	800588c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	73fb      	strb	r3, [r7, #15]
          break;
 800588a:	e005      	b.n	8005898 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800588c:	4b0a      	ldr	r3, [pc, #40]	; (80058b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d0ef      	beq.n	8005878 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005898:	7bfb      	ldrb	r3, [r7, #15]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d106      	bne.n	80058ac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800589e:	4b06      	ldr	r3, [pc, #24]	; (80058b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058a0:	695a      	ldr	r2, [r3, #20]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	4904      	ldr	r1, [pc, #16]	; (80058b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80058ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	40021000 	.word	0x40021000

080058bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e049      	b.n	8005962 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d106      	bne.n	80058e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7fd f842 	bl	800296c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2202      	movs	r2, #2
 80058ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	3304      	adds	r3, #4
 80058f8:	4619      	mov	r1, r3
 80058fa:	4610      	mov	r0, r2
 80058fc:	f000 fe5a 	bl	80065b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
	...

0800596c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2b01      	cmp	r3, #1
 800597e:	d001      	beq.n	8005984 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e047      	b.n	8005a14 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2202      	movs	r2, #2
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a23      	ldr	r2, [pc, #140]	; (8005a20 <HAL_TIM_Base_Start+0xb4>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d01d      	beq.n	80059d2 <HAL_TIM_Base_Start+0x66>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800599e:	d018      	beq.n	80059d2 <HAL_TIM_Base_Start+0x66>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a1f      	ldr	r2, [pc, #124]	; (8005a24 <HAL_TIM_Base_Start+0xb8>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d013      	beq.n	80059d2 <HAL_TIM_Base_Start+0x66>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a1e      	ldr	r2, [pc, #120]	; (8005a28 <HAL_TIM_Base_Start+0xbc>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d00e      	beq.n	80059d2 <HAL_TIM_Base_Start+0x66>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a1c      	ldr	r2, [pc, #112]	; (8005a2c <HAL_TIM_Base_Start+0xc0>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d009      	beq.n	80059d2 <HAL_TIM_Base_Start+0x66>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a1b      	ldr	r2, [pc, #108]	; (8005a30 <HAL_TIM_Base_Start+0xc4>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d004      	beq.n	80059d2 <HAL_TIM_Base_Start+0x66>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a19      	ldr	r2, [pc, #100]	; (8005a34 <HAL_TIM_Base_Start+0xc8>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d115      	bne.n	80059fe <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	4b17      	ldr	r3, [pc, #92]	; (8005a38 <HAL_TIM_Base_Start+0xcc>)
 80059da:	4013      	ands	r3, r2
 80059dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2b06      	cmp	r3, #6
 80059e2:	d015      	beq.n	8005a10 <HAL_TIM_Base_Start+0xa4>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ea:	d011      	beq.n	8005a10 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f042 0201 	orr.w	r2, r2, #1
 80059fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059fc:	e008      	b.n	8005a10 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f042 0201 	orr.w	r2, r2, #1
 8005a0c:	601a      	str	r2, [r3, #0]
 8005a0e:	e000      	b.n	8005a12 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a10:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	40012c00 	.word	0x40012c00
 8005a24:	40000400 	.word	0x40000400
 8005a28:	40000800 	.word	0x40000800
 8005a2c:	40000c00 	.word	0x40000c00
 8005a30:	40013400 	.word	0x40013400
 8005a34:	40014000 	.word	0x40014000
 8005a38:	00010007 	.word	0x00010007

08005a3c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6a1a      	ldr	r2, [r3, #32]
 8005a4a:	f241 1311 	movw	r3, #4369	; 0x1111
 8005a4e:	4013      	ands	r3, r2
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10f      	bne.n	8005a74 <HAL_TIM_Base_Stop+0x38>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6a1a      	ldr	r2, [r3, #32]
 8005a5a:	f240 4344 	movw	r3, #1092	; 0x444
 8005a5e:	4013      	ands	r3, r2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d107      	bne.n	8005a74 <HAL_TIM_Base_Stop+0x38>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 0201 	bic.w	r2, r2, #1
 8005a72:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	370c      	adds	r7, #12
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
	...

08005a8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d001      	beq.n	8005aa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e04f      	b.n	8005b44 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68da      	ldr	r2, [r3, #12]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f042 0201 	orr.w	r2, r2, #1
 8005aba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a23      	ldr	r2, [pc, #140]	; (8005b50 <HAL_TIM_Base_Start_IT+0xc4>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d01d      	beq.n	8005b02 <HAL_TIM_Base_Start_IT+0x76>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ace:	d018      	beq.n	8005b02 <HAL_TIM_Base_Start_IT+0x76>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a1f      	ldr	r2, [pc, #124]	; (8005b54 <HAL_TIM_Base_Start_IT+0xc8>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d013      	beq.n	8005b02 <HAL_TIM_Base_Start_IT+0x76>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a1e      	ldr	r2, [pc, #120]	; (8005b58 <HAL_TIM_Base_Start_IT+0xcc>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d00e      	beq.n	8005b02 <HAL_TIM_Base_Start_IT+0x76>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a1c      	ldr	r2, [pc, #112]	; (8005b5c <HAL_TIM_Base_Start_IT+0xd0>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d009      	beq.n	8005b02 <HAL_TIM_Base_Start_IT+0x76>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a1b      	ldr	r2, [pc, #108]	; (8005b60 <HAL_TIM_Base_Start_IT+0xd4>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d004      	beq.n	8005b02 <HAL_TIM_Base_Start_IT+0x76>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a19      	ldr	r2, [pc, #100]	; (8005b64 <HAL_TIM_Base_Start_IT+0xd8>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d115      	bne.n	8005b2e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689a      	ldr	r2, [r3, #8]
 8005b08:	4b17      	ldr	r3, [pc, #92]	; (8005b68 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2b06      	cmp	r3, #6
 8005b12:	d015      	beq.n	8005b40 <HAL_TIM_Base_Start_IT+0xb4>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b1a:	d011      	beq.n	8005b40 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f042 0201 	orr.w	r2, r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b2c:	e008      	b.n	8005b40 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f042 0201 	orr.w	r2, r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	e000      	b.n	8005b42 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr
 8005b50:	40012c00 	.word	0x40012c00
 8005b54:	40000400 	.word	0x40000400
 8005b58:	40000800 	.word	0x40000800
 8005b5c:	40000c00 	.word	0x40000c00
 8005b60:	40013400 	.word	0x40013400
 8005b64:	40014000 	.word	0x40014000
 8005b68:	00010007 	.word	0x00010007

08005b6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d101      	bne.n	8005b7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e049      	b.n	8005c12 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d106      	bne.n	8005b98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 f841 	bl	8005c1a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2202      	movs	r2, #2
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	3304      	adds	r3, #4
 8005ba8:	4619      	mov	r1, r3
 8005baa:	4610      	mov	r0, r2
 8005bac:	f000 fd02 	bl	80065b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b083      	sub	sp, #12
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c22:	bf00      	nop
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
	...

08005c30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d109      	bne.n	8005c54 <HAL_TIM_PWM_Start+0x24>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	bf14      	ite	ne
 8005c4c:	2301      	movne	r3, #1
 8005c4e:	2300      	moveq	r3, #0
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	e03c      	b.n	8005cce <HAL_TIM_PWM_Start+0x9e>
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	2b04      	cmp	r3, #4
 8005c58:	d109      	bne.n	8005c6e <HAL_TIM_PWM_Start+0x3e>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	bf14      	ite	ne
 8005c66:	2301      	movne	r3, #1
 8005c68:	2300      	moveq	r3, #0
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	e02f      	b.n	8005cce <HAL_TIM_PWM_Start+0x9e>
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b08      	cmp	r3, #8
 8005c72:	d109      	bne.n	8005c88 <HAL_TIM_PWM_Start+0x58>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	bf14      	ite	ne
 8005c80:	2301      	movne	r3, #1
 8005c82:	2300      	moveq	r3, #0
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	e022      	b.n	8005cce <HAL_TIM_PWM_Start+0x9e>
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	2b0c      	cmp	r3, #12
 8005c8c:	d109      	bne.n	8005ca2 <HAL_TIM_PWM_Start+0x72>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	bf14      	ite	ne
 8005c9a:	2301      	movne	r3, #1
 8005c9c:	2300      	moveq	r3, #0
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	e015      	b.n	8005cce <HAL_TIM_PWM_Start+0x9e>
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	2b10      	cmp	r3, #16
 8005ca6:	d109      	bne.n	8005cbc <HAL_TIM_PWM_Start+0x8c>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	bf14      	ite	ne
 8005cb4:	2301      	movne	r3, #1
 8005cb6:	2300      	moveq	r3, #0
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	e008      	b.n	8005cce <HAL_TIM_PWM_Start+0x9e>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	bf14      	ite	ne
 8005cc8:	2301      	movne	r3, #1
 8005cca:	2300      	moveq	r3, #0
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e09c      	b.n	8005e10 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d104      	bne.n	8005ce6 <HAL_TIM_PWM_Start+0xb6>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ce4:	e023      	b.n	8005d2e <HAL_TIM_PWM_Start+0xfe>
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2b04      	cmp	r3, #4
 8005cea:	d104      	bne.n	8005cf6 <HAL_TIM_PWM_Start+0xc6>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cf4:	e01b      	b.n	8005d2e <HAL_TIM_PWM_Start+0xfe>
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d104      	bne.n	8005d06 <HAL_TIM_PWM_Start+0xd6>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2202      	movs	r2, #2
 8005d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d04:	e013      	b.n	8005d2e <HAL_TIM_PWM_Start+0xfe>
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2b0c      	cmp	r3, #12
 8005d0a:	d104      	bne.n	8005d16 <HAL_TIM_PWM_Start+0xe6>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2202      	movs	r2, #2
 8005d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d14:	e00b      	b.n	8005d2e <HAL_TIM_PWM_Start+0xfe>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	2b10      	cmp	r3, #16
 8005d1a:	d104      	bne.n	8005d26 <HAL_TIM_PWM_Start+0xf6>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d24:	e003      	b.n	8005d2e <HAL_TIM_PWM_Start+0xfe>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2202      	movs	r2, #2
 8005d2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2201      	movs	r2, #1
 8005d34:	6839      	ldr	r1, [r7, #0]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f001 f846 	bl	8006dc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a35      	ldr	r2, [pc, #212]	; (8005e18 <HAL_TIM_PWM_Start+0x1e8>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d013      	beq.n	8005d6e <HAL_TIM_PWM_Start+0x13e>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a34      	ldr	r2, [pc, #208]	; (8005e1c <HAL_TIM_PWM_Start+0x1ec>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d00e      	beq.n	8005d6e <HAL_TIM_PWM_Start+0x13e>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a32      	ldr	r2, [pc, #200]	; (8005e20 <HAL_TIM_PWM_Start+0x1f0>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d009      	beq.n	8005d6e <HAL_TIM_PWM_Start+0x13e>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a31      	ldr	r2, [pc, #196]	; (8005e24 <HAL_TIM_PWM_Start+0x1f4>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d004      	beq.n	8005d6e <HAL_TIM_PWM_Start+0x13e>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a2f      	ldr	r2, [pc, #188]	; (8005e28 <HAL_TIM_PWM_Start+0x1f8>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d101      	bne.n	8005d72 <HAL_TIM_PWM_Start+0x142>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e000      	b.n	8005d74 <HAL_TIM_PWM_Start+0x144>
 8005d72:	2300      	movs	r3, #0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d007      	beq.n	8005d88 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d86:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a22      	ldr	r2, [pc, #136]	; (8005e18 <HAL_TIM_PWM_Start+0x1e8>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d01d      	beq.n	8005dce <HAL_TIM_PWM_Start+0x19e>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d9a:	d018      	beq.n	8005dce <HAL_TIM_PWM_Start+0x19e>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a22      	ldr	r2, [pc, #136]	; (8005e2c <HAL_TIM_PWM_Start+0x1fc>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d013      	beq.n	8005dce <HAL_TIM_PWM_Start+0x19e>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a21      	ldr	r2, [pc, #132]	; (8005e30 <HAL_TIM_PWM_Start+0x200>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d00e      	beq.n	8005dce <HAL_TIM_PWM_Start+0x19e>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a1f      	ldr	r2, [pc, #124]	; (8005e34 <HAL_TIM_PWM_Start+0x204>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d009      	beq.n	8005dce <HAL_TIM_PWM_Start+0x19e>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a17      	ldr	r2, [pc, #92]	; (8005e1c <HAL_TIM_PWM_Start+0x1ec>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d004      	beq.n	8005dce <HAL_TIM_PWM_Start+0x19e>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a15      	ldr	r2, [pc, #84]	; (8005e20 <HAL_TIM_PWM_Start+0x1f0>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d115      	bne.n	8005dfa <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	689a      	ldr	r2, [r3, #8]
 8005dd4:	4b18      	ldr	r3, [pc, #96]	; (8005e38 <HAL_TIM_PWM_Start+0x208>)
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2b06      	cmp	r3, #6
 8005dde:	d015      	beq.n	8005e0c <HAL_TIM_PWM_Start+0x1dc>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005de6:	d011      	beq.n	8005e0c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f042 0201 	orr.w	r2, r2, #1
 8005df6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005df8:	e008      	b.n	8005e0c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f042 0201 	orr.w	r2, r2, #1
 8005e08:	601a      	str	r2, [r3, #0]
 8005e0a:	e000      	b.n	8005e0e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	40012c00 	.word	0x40012c00
 8005e1c:	40013400 	.word	0x40013400
 8005e20:	40014000 	.word	0x40014000
 8005e24:	40014400 	.word	0x40014400
 8005e28:	40014800 	.word	0x40014800
 8005e2c:	40000400 	.word	0x40000400
 8005e30:	40000800 	.word	0x40000800
 8005e34:	40000c00 	.word	0x40000c00
 8005e38:	00010007 	.word	0x00010007

08005e3c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	6839      	ldr	r1, [r7, #0]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 ffba 	bl	8006dc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a3e      	ldr	r2, [pc, #248]	; (8005f54 <HAL_TIM_PWM_Stop+0x118>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d013      	beq.n	8005e86 <HAL_TIM_PWM_Stop+0x4a>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a3d      	ldr	r2, [pc, #244]	; (8005f58 <HAL_TIM_PWM_Stop+0x11c>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d00e      	beq.n	8005e86 <HAL_TIM_PWM_Stop+0x4a>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a3b      	ldr	r2, [pc, #236]	; (8005f5c <HAL_TIM_PWM_Stop+0x120>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d009      	beq.n	8005e86 <HAL_TIM_PWM_Stop+0x4a>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a3a      	ldr	r2, [pc, #232]	; (8005f60 <HAL_TIM_PWM_Stop+0x124>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d004      	beq.n	8005e86 <HAL_TIM_PWM_Stop+0x4a>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a38      	ldr	r2, [pc, #224]	; (8005f64 <HAL_TIM_PWM_Stop+0x128>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d101      	bne.n	8005e8a <HAL_TIM_PWM_Stop+0x4e>
 8005e86:	2301      	movs	r3, #1
 8005e88:	e000      	b.n	8005e8c <HAL_TIM_PWM_Stop+0x50>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d017      	beq.n	8005ec0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6a1a      	ldr	r2, [r3, #32]
 8005e96:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10f      	bne.n	8005ec0 <HAL_TIM_PWM_Stop+0x84>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6a1a      	ldr	r2, [r3, #32]
 8005ea6:	f240 4344 	movw	r3, #1092	; 0x444
 8005eaa:	4013      	ands	r3, r2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d107      	bne.n	8005ec0 <HAL_TIM_PWM_Stop+0x84>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ebe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6a1a      	ldr	r2, [r3, #32]
 8005ec6:	f241 1311 	movw	r3, #4369	; 0x1111
 8005eca:	4013      	ands	r3, r2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10f      	bne.n	8005ef0 <HAL_TIM_PWM_Stop+0xb4>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6a1a      	ldr	r2, [r3, #32]
 8005ed6:	f240 4344 	movw	r3, #1092	; 0x444
 8005eda:	4013      	ands	r3, r2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d107      	bne.n	8005ef0 <HAL_TIM_PWM_Stop+0xb4>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 0201 	bic.w	r2, r2, #1
 8005eee:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d104      	bne.n	8005f00 <HAL_TIM_PWM_Stop+0xc4>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005efe:	e023      	b.n	8005f48 <HAL_TIM_PWM_Stop+0x10c>
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	2b04      	cmp	r3, #4
 8005f04:	d104      	bne.n	8005f10 <HAL_TIM_PWM_Stop+0xd4>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f0e:	e01b      	b.n	8005f48 <HAL_TIM_PWM_Stop+0x10c>
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	2b08      	cmp	r3, #8
 8005f14:	d104      	bne.n	8005f20 <HAL_TIM_PWM_Stop+0xe4>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f1e:	e013      	b.n	8005f48 <HAL_TIM_PWM_Stop+0x10c>
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	2b0c      	cmp	r3, #12
 8005f24:	d104      	bne.n	8005f30 <HAL_TIM_PWM_Stop+0xf4>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f2e:	e00b      	b.n	8005f48 <HAL_TIM_PWM_Stop+0x10c>
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	2b10      	cmp	r3, #16
 8005f34:	d104      	bne.n	8005f40 <HAL_TIM_PWM_Stop+0x104>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f3e:	e003      	b.n	8005f48 <HAL_TIM_PWM_Stop+0x10c>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3708      	adds	r7, #8
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	40012c00 	.word	0x40012c00
 8005f58:	40013400 	.word	0x40013400
 8005f5c:	40014000 	.word	0x40014000
 8005f60:	40014400 	.word	0x40014400
 8005f64:	40014800 	.word	0x40014800

08005f68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	f003 0302 	and.w	r3, r3, #2
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d122      	bne.n	8005fc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d11b      	bne.n	8005fc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f06f 0202 	mvn.w	r2, #2
 8005f94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	f003 0303 	and.w	r3, r3, #3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d003      	beq.n	8005fb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fae3 	bl	8006576 <HAL_TIM_IC_CaptureCallback>
 8005fb0:	e005      	b.n	8005fbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 fad5 	bl	8006562 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fae6 	bl	800658a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	f003 0304 	and.w	r3, r3, #4
 8005fce:	2b04      	cmp	r3, #4
 8005fd0:	d122      	bne.n	8006018 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	f003 0304 	and.w	r3, r3, #4
 8005fdc:	2b04      	cmp	r3, #4
 8005fde:	d11b      	bne.n	8006018 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f06f 0204 	mvn.w	r2, #4
 8005fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2202      	movs	r2, #2
 8005fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fab9 	bl	8006576 <HAL_TIM_IC_CaptureCallback>
 8006004:	e005      	b.n	8006012 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 faab 	bl	8006562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 fabc 	bl	800658a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	f003 0308 	and.w	r3, r3, #8
 8006022:	2b08      	cmp	r3, #8
 8006024:	d122      	bne.n	800606c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	f003 0308 	and.w	r3, r3, #8
 8006030:	2b08      	cmp	r3, #8
 8006032:	d11b      	bne.n	800606c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f06f 0208 	mvn.w	r2, #8
 800603c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2204      	movs	r2, #4
 8006042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	f003 0303 	and.w	r3, r3, #3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d003      	beq.n	800605a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fa8f 	bl	8006576 <HAL_TIM_IC_CaptureCallback>
 8006058:	e005      	b.n	8006066 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 fa81 	bl	8006562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 fa92 	bl	800658a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	f003 0310 	and.w	r3, r3, #16
 8006076:	2b10      	cmp	r3, #16
 8006078:	d122      	bne.n	80060c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	f003 0310 	and.w	r3, r3, #16
 8006084:	2b10      	cmp	r3, #16
 8006086:	d11b      	bne.n	80060c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f06f 0210 	mvn.w	r2, #16
 8006090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2208      	movs	r2, #8
 8006096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	69db      	ldr	r3, [r3, #28]
 800609e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fa65 	bl	8006576 <HAL_TIM_IC_CaptureCallback>
 80060ac:	e005      	b.n	80060ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fa57 	bl	8006562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 fa68 	bl	800658a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	f003 0301 	and.w	r3, r3, #1
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d10e      	bne.n	80060ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	f003 0301 	and.w	r3, r3, #1
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d107      	bne.n	80060ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f06f 0201 	mvn.w	r2, #1
 80060e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7fc f9a4 	bl	8002434 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f6:	2b80      	cmp	r3, #128	; 0x80
 80060f8:	d10e      	bne.n	8006118 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006104:	2b80      	cmp	r3, #128	; 0x80
 8006106:	d107      	bne.n	8006118 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 ff10 	bl	8006f38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006122:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006126:	d10e      	bne.n	8006146 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006132:	2b80      	cmp	r3, #128	; 0x80
 8006134:	d107      	bne.n	8006146 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800613e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 ff03 	bl	8006f4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006150:	2b40      	cmp	r3, #64	; 0x40
 8006152:	d10e      	bne.n	8006172 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615e:	2b40      	cmp	r3, #64	; 0x40
 8006160:	d107      	bne.n	8006172 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800616a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 fa16 	bl	800659e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	f003 0320 	and.w	r3, r3, #32
 800617c:	2b20      	cmp	r3, #32
 800617e:	d10e      	bne.n	800619e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	f003 0320 	and.w	r3, r3, #32
 800618a:	2b20      	cmp	r3, #32
 800618c:	d107      	bne.n	800619e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f06f 0220 	mvn.w	r2, #32
 8006196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 fec3 	bl	8006f24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800619e:	bf00      	nop
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
	...

080061a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061b4:	2300      	movs	r3, #0
 80061b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d101      	bne.n	80061c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80061c2:	2302      	movs	r3, #2
 80061c4:	e0ff      	b.n	80063c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2b14      	cmp	r3, #20
 80061d2:	f200 80f0 	bhi.w	80063b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80061d6:	a201      	add	r2, pc, #4	; (adr r2, 80061dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80061d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061dc:	08006231 	.word	0x08006231
 80061e0:	080063b7 	.word	0x080063b7
 80061e4:	080063b7 	.word	0x080063b7
 80061e8:	080063b7 	.word	0x080063b7
 80061ec:	08006271 	.word	0x08006271
 80061f0:	080063b7 	.word	0x080063b7
 80061f4:	080063b7 	.word	0x080063b7
 80061f8:	080063b7 	.word	0x080063b7
 80061fc:	080062b3 	.word	0x080062b3
 8006200:	080063b7 	.word	0x080063b7
 8006204:	080063b7 	.word	0x080063b7
 8006208:	080063b7 	.word	0x080063b7
 800620c:	080062f3 	.word	0x080062f3
 8006210:	080063b7 	.word	0x080063b7
 8006214:	080063b7 	.word	0x080063b7
 8006218:	080063b7 	.word	0x080063b7
 800621c:	08006335 	.word	0x08006335
 8006220:	080063b7 	.word	0x080063b7
 8006224:	080063b7 	.word	0x080063b7
 8006228:	080063b7 	.word	0x080063b7
 800622c:	08006375 	.word	0x08006375
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68b9      	ldr	r1, [r7, #8]
 8006236:	4618      	mov	r0, r3
 8006238:	f000 fa56 	bl	80066e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	699a      	ldr	r2, [r3, #24]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f042 0208 	orr.w	r2, r2, #8
 800624a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	699a      	ldr	r2, [r3, #24]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f022 0204 	bic.w	r2, r2, #4
 800625a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6999      	ldr	r1, [r3, #24]
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	691a      	ldr	r2, [r3, #16]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	430a      	orrs	r2, r1
 800626c:	619a      	str	r2, [r3, #24]
      break;
 800626e:	e0a5      	b.n	80063bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68b9      	ldr	r1, [r7, #8]
 8006276:	4618      	mov	r0, r3
 8006278:	f000 fac6 	bl	8006808 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	699a      	ldr	r2, [r3, #24]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800628a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	699a      	ldr	r2, [r3, #24]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800629a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6999      	ldr	r1, [r3, #24]
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	021a      	lsls	r2, r3, #8
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	430a      	orrs	r2, r1
 80062ae:	619a      	str	r2, [r3, #24]
      break;
 80062b0:	e084      	b.n	80063bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68b9      	ldr	r1, [r7, #8]
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 fb2f 	bl	800691c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	69da      	ldr	r2, [r3, #28]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f042 0208 	orr.w	r2, r2, #8
 80062cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	69da      	ldr	r2, [r3, #28]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f022 0204 	bic.w	r2, r2, #4
 80062dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	69d9      	ldr	r1, [r3, #28]
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	691a      	ldr	r2, [r3, #16]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	430a      	orrs	r2, r1
 80062ee:	61da      	str	r2, [r3, #28]
      break;
 80062f0:	e064      	b.n	80063bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68b9      	ldr	r1, [r7, #8]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 fb97 	bl	8006a2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	69da      	ldr	r2, [r3, #28]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800630c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	69da      	ldr	r2, [r3, #28]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800631c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	69d9      	ldr	r1, [r3, #28]
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	021a      	lsls	r2, r3, #8
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	61da      	str	r2, [r3, #28]
      break;
 8006332:	e043      	b.n	80063bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68b9      	ldr	r1, [r7, #8]
 800633a:	4618      	mov	r0, r3
 800633c:	f000 fbe0 	bl	8006b00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f042 0208 	orr.w	r2, r2, #8
 800634e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f022 0204 	bic.w	r2, r2, #4
 800635e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	691a      	ldr	r2, [r3, #16]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	430a      	orrs	r2, r1
 8006370:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006372:	e023      	b.n	80063bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68b9      	ldr	r1, [r7, #8]
 800637a:	4618      	mov	r0, r3
 800637c:	f000 fc24 	bl	8006bc8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800638e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800639e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	021a      	lsls	r2, r3, #8
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	430a      	orrs	r2, r1
 80063b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80063b4:	e002      	b.n	80063bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	75fb      	strb	r3, [r7, #23]
      break;
 80063ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3718      	adds	r7, #24
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop

080063d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063da:	2300      	movs	r3, #0
 80063dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d101      	bne.n	80063ec <HAL_TIM_ConfigClockSource+0x1c>
 80063e8:	2302      	movs	r3, #2
 80063ea:	e0b6      	b.n	800655a <HAL_TIM_ConfigClockSource+0x18a>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800640a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800640e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006416:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006428:	d03e      	beq.n	80064a8 <HAL_TIM_ConfigClockSource+0xd8>
 800642a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800642e:	f200 8087 	bhi.w	8006540 <HAL_TIM_ConfigClockSource+0x170>
 8006432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006436:	f000 8086 	beq.w	8006546 <HAL_TIM_ConfigClockSource+0x176>
 800643a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800643e:	d87f      	bhi.n	8006540 <HAL_TIM_ConfigClockSource+0x170>
 8006440:	2b70      	cmp	r3, #112	; 0x70
 8006442:	d01a      	beq.n	800647a <HAL_TIM_ConfigClockSource+0xaa>
 8006444:	2b70      	cmp	r3, #112	; 0x70
 8006446:	d87b      	bhi.n	8006540 <HAL_TIM_ConfigClockSource+0x170>
 8006448:	2b60      	cmp	r3, #96	; 0x60
 800644a:	d050      	beq.n	80064ee <HAL_TIM_ConfigClockSource+0x11e>
 800644c:	2b60      	cmp	r3, #96	; 0x60
 800644e:	d877      	bhi.n	8006540 <HAL_TIM_ConfigClockSource+0x170>
 8006450:	2b50      	cmp	r3, #80	; 0x50
 8006452:	d03c      	beq.n	80064ce <HAL_TIM_ConfigClockSource+0xfe>
 8006454:	2b50      	cmp	r3, #80	; 0x50
 8006456:	d873      	bhi.n	8006540 <HAL_TIM_ConfigClockSource+0x170>
 8006458:	2b40      	cmp	r3, #64	; 0x40
 800645a:	d058      	beq.n	800650e <HAL_TIM_ConfigClockSource+0x13e>
 800645c:	2b40      	cmp	r3, #64	; 0x40
 800645e:	d86f      	bhi.n	8006540 <HAL_TIM_ConfigClockSource+0x170>
 8006460:	2b30      	cmp	r3, #48	; 0x30
 8006462:	d064      	beq.n	800652e <HAL_TIM_ConfigClockSource+0x15e>
 8006464:	2b30      	cmp	r3, #48	; 0x30
 8006466:	d86b      	bhi.n	8006540 <HAL_TIM_ConfigClockSource+0x170>
 8006468:	2b20      	cmp	r3, #32
 800646a:	d060      	beq.n	800652e <HAL_TIM_ConfigClockSource+0x15e>
 800646c:	2b20      	cmp	r3, #32
 800646e:	d867      	bhi.n	8006540 <HAL_TIM_ConfigClockSource+0x170>
 8006470:	2b00      	cmp	r3, #0
 8006472:	d05c      	beq.n	800652e <HAL_TIM_ConfigClockSource+0x15e>
 8006474:	2b10      	cmp	r3, #16
 8006476:	d05a      	beq.n	800652e <HAL_TIM_ConfigClockSource+0x15e>
 8006478:	e062      	b.n	8006540 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6818      	ldr	r0, [r3, #0]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	6899      	ldr	r1, [r3, #8]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	685a      	ldr	r2, [r3, #4]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	f000 fc7d 	bl	8006d88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800649c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	609a      	str	r2, [r3, #8]
      break;
 80064a6:	e04f      	b.n	8006548 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6818      	ldr	r0, [r3, #0]
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	6899      	ldr	r1, [r3, #8]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	685a      	ldr	r2, [r3, #4]
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	f000 fc66 	bl	8006d88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	689a      	ldr	r2, [r3, #8]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064ca:	609a      	str	r2, [r3, #8]
      break;
 80064cc:	e03c      	b.n	8006548 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6818      	ldr	r0, [r3, #0]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	6859      	ldr	r1, [r3, #4]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	461a      	mov	r2, r3
 80064dc:	f000 fbda 	bl	8006c94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2150      	movs	r1, #80	; 0x50
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 fc33 	bl	8006d52 <TIM_ITRx_SetConfig>
      break;
 80064ec:	e02c      	b.n	8006548 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6818      	ldr	r0, [r3, #0]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	6859      	ldr	r1, [r3, #4]
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	461a      	mov	r2, r3
 80064fc:	f000 fbf9 	bl	8006cf2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2160      	movs	r1, #96	; 0x60
 8006506:	4618      	mov	r0, r3
 8006508:	f000 fc23 	bl	8006d52 <TIM_ITRx_SetConfig>
      break;
 800650c:	e01c      	b.n	8006548 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6818      	ldr	r0, [r3, #0]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	6859      	ldr	r1, [r3, #4]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	461a      	mov	r2, r3
 800651c:	f000 fbba 	bl	8006c94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2140      	movs	r1, #64	; 0x40
 8006526:	4618      	mov	r0, r3
 8006528:	f000 fc13 	bl	8006d52 <TIM_ITRx_SetConfig>
      break;
 800652c:	e00c      	b.n	8006548 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4619      	mov	r1, r3
 8006538:	4610      	mov	r0, r2
 800653a:	f000 fc0a 	bl	8006d52 <TIM_ITRx_SetConfig>
      break;
 800653e:	e003      	b.n	8006548 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	73fb      	strb	r3, [r7, #15]
      break;
 8006544:	e000      	b.n	8006548 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006546:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006558:	7bfb      	ldrb	r3, [r7, #15]
}
 800655a:	4618      	mov	r0, r3
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006562:	b480      	push	{r7}
 8006564:	b083      	sub	sp, #12
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800656a:	bf00      	nop
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006576:	b480      	push	{r7}
 8006578:	b083      	sub	sp, #12
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800657e:	bf00      	nop
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr

0800658a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800658a:	b480      	push	{r7}
 800658c:	b083      	sub	sp, #12
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006592:	bf00      	nop
 8006594:	370c      	adds	r7, #12
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr

0800659e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800659e:	b480      	push	{r7}
 80065a0:	b083      	sub	sp, #12
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065a6:	bf00      	nop
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
	...

080065b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a40      	ldr	r2, [pc, #256]	; (80066c8 <TIM_Base_SetConfig+0x114>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d013      	beq.n	80065f4 <TIM_Base_SetConfig+0x40>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d2:	d00f      	beq.n	80065f4 <TIM_Base_SetConfig+0x40>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a3d      	ldr	r2, [pc, #244]	; (80066cc <TIM_Base_SetConfig+0x118>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d00b      	beq.n	80065f4 <TIM_Base_SetConfig+0x40>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a3c      	ldr	r2, [pc, #240]	; (80066d0 <TIM_Base_SetConfig+0x11c>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d007      	beq.n	80065f4 <TIM_Base_SetConfig+0x40>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a3b      	ldr	r2, [pc, #236]	; (80066d4 <TIM_Base_SetConfig+0x120>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d003      	beq.n	80065f4 <TIM_Base_SetConfig+0x40>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a3a      	ldr	r2, [pc, #232]	; (80066d8 <TIM_Base_SetConfig+0x124>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d108      	bne.n	8006606 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	4313      	orrs	r3, r2
 8006604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a2f      	ldr	r2, [pc, #188]	; (80066c8 <TIM_Base_SetConfig+0x114>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d01f      	beq.n	800664e <TIM_Base_SetConfig+0x9a>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006614:	d01b      	beq.n	800664e <TIM_Base_SetConfig+0x9a>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a2c      	ldr	r2, [pc, #176]	; (80066cc <TIM_Base_SetConfig+0x118>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d017      	beq.n	800664e <TIM_Base_SetConfig+0x9a>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a2b      	ldr	r2, [pc, #172]	; (80066d0 <TIM_Base_SetConfig+0x11c>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d013      	beq.n	800664e <TIM_Base_SetConfig+0x9a>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a2a      	ldr	r2, [pc, #168]	; (80066d4 <TIM_Base_SetConfig+0x120>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d00f      	beq.n	800664e <TIM_Base_SetConfig+0x9a>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a29      	ldr	r2, [pc, #164]	; (80066d8 <TIM_Base_SetConfig+0x124>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d00b      	beq.n	800664e <TIM_Base_SetConfig+0x9a>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a28      	ldr	r2, [pc, #160]	; (80066dc <TIM_Base_SetConfig+0x128>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d007      	beq.n	800664e <TIM_Base_SetConfig+0x9a>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a27      	ldr	r2, [pc, #156]	; (80066e0 <TIM_Base_SetConfig+0x12c>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d003      	beq.n	800664e <TIM_Base_SetConfig+0x9a>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a26      	ldr	r2, [pc, #152]	; (80066e4 <TIM_Base_SetConfig+0x130>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d108      	bne.n	8006660 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	4313      	orrs	r3, r2
 800665e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	4313      	orrs	r3, r2
 800666c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	689a      	ldr	r2, [r3, #8]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a10      	ldr	r2, [pc, #64]	; (80066c8 <TIM_Base_SetConfig+0x114>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d00f      	beq.n	80066ac <TIM_Base_SetConfig+0xf8>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a12      	ldr	r2, [pc, #72]	; (80066d8 <TIM_Base_SetConfig+0x124>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d00b      	beq.n	80066ac <TIM_Base_SetConfig+0xf8>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a11      	ldr	r2, [pc, #68]	; (80066dc <TIM_Base_SetConfig+0x128>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d007      	beq.n	80066ac <TIM_Base_SetConfig+0xf8>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a10      	ldr	r2, [pc, #64]	; (80066e0 <TIM_Base_SetConfig+0x12c>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d003      	beq.n	80066ac <TIM_Base_SetConfig+0xf8>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a0f      	ldr	r2, [pc, #60]	; (80066e4 <TIM_Base_SetConfig+0x130>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d103      	bne.n	80066b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	691a      	ldr	r2, [r3, #16]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	615a      	str	r2, [r3, #20]
}
 80066ba:	bf00      	nop
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	40012c00 	.word	0x40012c00
 80066cc:	40000400 	.word	0x40000400
 80066d0:	40000800 	.word	0x40000800
 80066d4:	40000c00 	.word	0x40000c00
 80066d8:	40013400 	.word	0x40013400
 80066dc:	40014000 	.word	0x40014000
 80066e0:	40014400 	.word	0x40014400
 80066e4:	40014800 	.word	0x40014800

080066e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	f023 0201 	bic.w	r2, r3, #1
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800671a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f023 0303 	bic.w	r3, r3, #3
 8006722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	4313      	orrs	r3, r2
 800672c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f023 0302 	bic.w	r3, r3, #2
 8006734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	4313      	orrs	r3, r2
 800673e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a2c      	ldr	r2, [pc, #176]	; (80067f4 <TIM_OC1_SetConfig+0x10c>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d00f      	beq.n	8006768 <TIM_OC1_SetConfig+0x80>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a2b      	ldr	r2, [pc, #172]	; (80067f8 <TIM_OC1_SetConfig+0x110>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d00b      	beq.n	8006768 <TIM_OC1_SetConfig+0x80>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a2a      	ldr	r2, [pc, #168]	; (80067fc <TIM_OC1_SetConfig+0x114>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d007      	beq.n	8006768 <TIM_OC1_SetConfig+0x80>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a29      	ldr	r2, [pc, #164]	; (8006800 <TIM_OC1_SetConfig+0x118>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d003      	beq.n	8006768 <TIM_OC1_SetConfig+0x80>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a28      	ldr	r2, [pc, #160]	; (8006804 <TIM_OC1_SetConfig+0x11c>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d10c      	bne.n	8006782 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	f023 0308 	bic.w	r3, r3, #8
 800676e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	4313      	orrs	r3, r2
 8006778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f023 0304 	bic.w	r3, r3, #4
 8006780:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a1b      	ldr	r2, [pc, #108]	; (80067f4 <TIM_OC1_SetConfig+0x10c>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d00f      	beq.n	80067aa <TIM_OC1_SetConfig+0xc2>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a1a      	ldr	r2, [pc, #104]	; (80067f8 <TIM_OC1_SetConfig+0x110>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d00b      	beq.n	80067aa <TIM_OC1_SetConfig+0xc2>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a19      	ldr	r2, [pc, #100]	; (80067fc <TIM_OC1_SetConfig+0x114>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d007      	beq.n	80067aa <TIM_OC1_SetConfig+0xc2>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a18      	ldr	r2, [pc, #96]	; (8006800 <TIM_OC1_SetConfig+0x118>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d003      	beq.n	80067aa <TIM_OC1_SetConfig+0xc2>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a17      	ldr	r2, [pc, #92]	; (8006804 <TIM_OC1_SetConfig+0x11c>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d111      	bne.n	80067ce <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	621a      	str	r2, [r3, #32]
}
 80067e8:	bf00      	nop
 80067ea:	371c      	adds	r7, #28
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr
 80067f4:	40012c00 	.word	0x40012c00
 80067f8:	40013400 	.word	0x40013400
 80067fc:	40014000 	.word	0x40014000
 8006800:	40014400 	.word	0x40014400
 8006804:	40014800 	.word	0x40014800

08006808 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006808:	b480      	push	{r7}
 800680a:	b087      	sub	sp, #28
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	f023 0210 	bic.w	r2, r3, #16
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800683a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	021b      	lsls	r3, r3, #8
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	4313      	orrs	r3, r2
 800684e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	f023 0320 	bic.w	r3, r3, #32
 8006856:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	011b      	lsls	r3, r3, #4
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	4313      	orrs	r3, r2
 8006862:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a28      	ldr	r2, [pc, #160]	; (8006908 <TIM_OC2_SetConfig+0x100>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d003      	beq.n	8006874 <TIM_OC2_SetConfig+0x6c>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a27      	ldr	r2, [pc, #156]	; (800690c <TIM_OC2_SetConfig+0x104>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d10d      	bne.n	8006890 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800687a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	011b      	lsls	r3, r3, #4
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	4313      	orrs	r3, r2
 8006886:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800688e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a1d      	ldr	r2, [pc, #116]	; (8006908 <TIM_OC2_SetConfig+0x100>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d00f      	beq.n	80068b8 <TIM_OC2_SetConfig+0xb0>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a1c      	ldr	r2, [pc, #112]	; (800690c <TIM_OC2_SetConfig+0x104>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d00b      	beq.n	80068b8 <TIM_OC2_SetConfig+0xb0>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a1b      	ldr	r2, [pc, #108]	; (8006910 <TIM_OC2_SetConfig+0x108>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d007      	beq.n	80068b8 <TIM_OC2_SetConfig+0xb0>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a1a      	ldr	r2, [pc, #104]	; (8006914 <TIM_OC2_SetConfig+0x10c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d003      	beq.n	80068b8 <TIM_OC2_SetConfig+0xb0>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a19      	ldr	r2, [pc, #100]	; (8006918 <TIM_OC2_SetConfig+0x110>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d113      	bne.n	80068e0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	695b      	ldr	r3, [r3, #20]
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	4313      	orrs	r3, r2
 80068de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	697a      	ldr	r2, [r7, #20]
 80068f8:	621a      	str	r2, [r3, #32]
}
 80068fa:	bf00      	nop
 80068fc:	371c      	adds	r7, #28
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	40012c00 	.word	0x40012c00
 800690c:	40013400 	.word	0x40013400
 8006910:	40014000 	.word	0x40014000
 8006914:	40014400 	.word	0x40014400
 8006918:	40014800 	.word	0x40014800

0800691c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800691c:	b480      	push	{r7}
 800691e:	b087      	sub	sp, #28
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	69db      	ldr	r3, [r3, #28]
 8006942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800694a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800694e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f023 0303 	bic.w	r3, r3, #3
 8006956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	4313      	orrs	r3, r2
 8006960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	021b      	lsls	r3, r3, #8
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	4313      	orrs	r3, r2
 8006974:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a27      	ldr	r2, [pc, #156]	; (8006a18 <TIM_OC3_SetConfig+0xfc>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d003      	beq.n	8006986 <TIM_OC3_SetConfig+0x6a>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a26      	ldr	r2, [pc, #152]	; (8006a1c <TIM_OC3_SetConfig+0x100>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d10d      	bne.n	80069a2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800698c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	021b      	lsls	r3, r3, #8
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	4313      	orrs	r3, r2
 8006998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a1c      	ldr	r2, [pc, #112]	; (8006a18 <TIM_OC3_SetConfig+0xfc>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d00f      	beq.n	80069ca <TIM_OC3_SetConfig+0xae>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a1b      	ldr	r2, [pc, #108]	; (8006a1c <TIM_OC3_SetConfig+0x100>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d00b      	beq.n	80069ca <TIM_OC3_SetConfig+0xae>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a1a      	ldr	r2, [pc, #104]	; (8006a20 <TIM_OC3_SetConfig+0x104>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d007      	beq.n	80069ca <TIM_OC3_SetConfig+0xae>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a19      	ldr	r2, [pc, #100]	; (8006a24 <TIM_OC3_SetConfig+0x108>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d003      	beq.n	80069ca <TIM_OC3_SetConfig+0xae>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a18      	ldr	r2, [pc, #96]	; (8006a28 <TIM_OC3_SetConfig+0x10c>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d113      	bne.n	80069f2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	011b      	lsls	r3, r3, #4
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	011b      	lsls	r3, r3, #4
 80069ec:	693a      	ldr	r2, [r7, #16]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	697a      	ldr	r2, [r7, #20]
 8006a0a:	621a      	str	r2, [r3, #32]
}
 8006a0c:	bf00      	nop
 8006a0e:	371c      	adds	r7, #28
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr
 8006a18:	40012c00 	.word	0x40012c00
 8006a1c:	40013400 	.word	0x40013400
 8006a20:	40014000 	.word	0x40014000
 8006a24:	40014400 	.word	0x40014400
 8006a28:	40014800 	.word	0x40014800

08006a2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b087      	sub	sp, #28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	69db      	ldr	r3, [r3, #28]
 8006a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	021b      	lsls	r3, r3, #8
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	031b      	lsls	r3, r3, #12
 8006a82:	693a      	ldr	r2, [r7, #16]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a18      	ldr	r2, [pc, #96]	; (8006aec <TIM_OC4_SetConfig+0xc0>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d00f      	beq.n	8006ab0 <TIM_OC4_SetConfig+0x84>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a17      	ldr	r2, [pc, #92]	; (8006af0 <TIM_OC4_SetConfig+0xc4>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d00b      	beq.n	8006ab0 <TIM_OC4_SetConfig+0x84>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a16      	ldr	r2, [pc, #88]	; (8006af4 <TIM_OC4_SetConfig+0xc8>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d007      	beq.n	8006ab0 <TIM_OC4_SetConfig+0x84>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a15      	ldr	r2, [pc, #84]	; (8006af8 <TIM_OC4_SetConfig+0xcc>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d003      	beq.n	8006ab0 <TIM_OC4_SetConfig+0x84>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a14      	ldr	r2, [pc, #80]	; (8006afc <TIM_OC4_SetConfig+0xd0>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d109      	bne.n	8006ac4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ab6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	695b      	ldr	r3, [r3, #20]
 8006abc:	019b      	lsls	r3, r3, #6
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	685a      	ldr	r2, [r3, #4]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	621a      	str	r2, [r3, #32]
}
 8006ade:	bf00      	nop
 8006ae0:	371c      	adds	r7, #28
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	40012c00 	.word	0x40012c00
 8006af0:	40013400 	.word	0x40013400
 8006af4:	40014000 	.word	0x40014000
 8006af8:	40014400 	.word	0x40014400
 8006afc:	40014800 	.word	0x40014800

08006b00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b087      	sub	sp, #28
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a1b      	ldr	r3, [r3, #32]
 8006b0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006b44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	041b      	lsls	r3, r3, #16
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a17      	ldr	r2, [pc, #92]	; (8006bb4 <TIM_OC5_SetConfig+0xb4>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d00f      	beq.n	8006b7a <TIM_OC5_SetConfig+0x7a>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a16      	ldr	r2, [pc, #88]	; (8006bb8 <TIM_OC5_SetConfig+0xb8>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d00b      	beq.n	8006b7a <TIM_OC5_SetConfig+0x7a>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a15      	ldr	r2, [pc, #84]	; (8006bbc <TIM_OC5_SetConfig+0xbc>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d007      	beq.n	8006b7a <TIM_OC5_SetConfig+0x7a>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a14      	ldr	r2, [pc, #80]	; (8006bc0 <TIM_OC5_SetConfig+0xc0>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d003      	beq.n	8006b7a <TIM_OC5_SetConfig+0x7a>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a13      	ldr	r2, [pc, #76]	; (8006bc4 <TIM_OC5_SetConfig+0xc4>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d109      	bne.n	8006b8e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	021b      	lsls	r3, r3, #8
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	621a      	str	r2, [r3, #32]
}
 8006ba8:	bf00      	nop
 8006baa:	371c      	adds	r7, #28
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	40012c00 	.word	0x40012c00
 8006bb8:	40013400 	.word	0x40013400
 8006bbc:	40014000 	.word	0x40014000
 8006bc0:	40014400 	.word	0x40014400
 8006bc4:	40014800 	.word	0x40014800

08006bc8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b087      	sub	sp, #28
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	021b      	lsls	r3, r3, #8
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	051b      	lsls	r3, r3, #20
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a18      	ldr	r2, [pc, #96]	; (8006c80 <TIM_OC6_SetConfig+0xb8>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d00f      	beq.n	8006c44 <TIM_OC6_SetConfig+0x7c>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a17      	ldr	r2, [pc, #92]	; (8006c84 <TIM_OC6_SetConfig+0xbc>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d00b      	beq.n	8006c44 <TIM_OC6_SetConfig+0x7c>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a16      	ldr	r2, [pc, #88]	; (8006c88 <TIM_OC6_SetConfig+0xc0>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d007      	beq.n	8006c44 <TIM_OC6_SetConfig+0x7c>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a15      	ldr	r2, [pc, #84]	; (8006c8c <TIM_OC6_SetConfig+0xc4>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d003      	beq.n	8006c44 <TIM_OC6_SetConfig+0x7c>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a14      	ldr	r2, [pc, #80]	; (8006c90 <TIM_OC6_SetConfig+0xc8>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d109      	bne.n	8006c58 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	029b      	lsls	r3, r3, #10
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	685a      	ldr	r2, [r3, #4]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	621a      	str	r2, [r3, #32]
}
 8006c72:	bf00      	nop
 8006c74:	371c      	adds	r7, #28
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	40012c00 	.word	0x40012c00
 8006c84:	40013400 	.word	0x40013400
 8006c88:	40014000 	.word	0x40014000
 8006c8c:	40014400 	.word	0x40014400
 8006c90:	40014800 	.word	0x40014800

08006c94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b087      	sub	sp, #28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6a1b      	ldr	r3, [r3, #32]
 8006ca4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	f023 0201 	bic.w	r2, r3, #1
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	011b      	lsls	r3, r3, #4
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	f023 030a 	bic.w	r3, r3, #10
 8006cd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cd2:	697a      	ldr	r2, [r7, #20]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	621a      	str	r2, [r3, #32]
}
 8006ce6:	bf00      	nop
 8006ce8:	371c      	adds	r7, #28
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b087      	sub	sp, #28
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	60f8      	str	r0, [r7, #12]
 8006cfa:	60b9      	str	r1, [r7, #8]
 8006cfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6a1b      	ldr	r3, [r3, #32]
 8006d02:	f023 0210 	bic.w	r2, r3, #16
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	031b      	lsls	r3, r3, #12
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	011b      	lsls	r3, r3, #4
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	693a      	ldr	r2, [r7, #16]
 8006d44:	621a      	str	r2, [r3, #32]
}
 8006d46:	bf00      	nop
 8006d48:	371c      	adds	r7, #28
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr

08006d52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d52:	b480      	push	{r7}
 8006d54:	b085      	sub	sp, #20
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d6a:	683a      	ldr	r2, [r7, #0]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	f043 0307 	orr.w	r3, r3, #7
 8006d74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	609a      	str	r2, [r3, #8]
}
 8006d7c:	bf00      	nop
 8006d7e:	3714      	adds	r7, #20
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b087      	sub	sp, #28
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
 8006d94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006da2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	021a      	lsls	r2, r3, #8
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	431a      	orrs	r2, r3
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	609a      	str	r2, [r3, #8]
}
 8006dbc:	bf00      	nop
 8006dbe:	371c      	adds	r7, #28
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b087      	sub	sp, #28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	f003 031f 	and.w	r3, r3, #31
 8006dda:	2201      	movs	r2, #1
 8006ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8006de0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6a1a      	ldr	r2, [r3, #32]
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	43db      	mvns	r3, r3
 8006dea:	401a      	ands	r2, r3
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6a1a      	ldr	r2, [r3, #32]
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	f003 031f 	and.w	r3, r3, #31
 8006dfa:	6879      	ldr	r1, [r7, #4]
 8006dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8006e00:	431a      	orrs	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	621a      	str	r2, [r3, #32]
}
 8006e06:	bf00      	nop
 8006e08:	371c      	adds	r7, #28
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
	...

08006e14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d101      	bne.n	8006e2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e28:	2302      	movs	r3, #2
 8006e2a:	e068      	b.n	8006efe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2202      	movs	r2, #2
 8006e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a2e      	ldr	r2, [pc, #184]	; (8006f0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d004      	beq.n	8006e60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a2d      	ldr	r2, [pc, #180]	; (8006f10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d108      	bne.n	8006e72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006e66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a1e      	ldr	r2, [pc, #120]	; (8006f0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d01d      	beq.n	8006ed2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e9e:	d018      	beq.n	8006ed2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a1b      	ldr	r2, [pc, #108]	; (8006f14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d013      	beq.n	8006ed2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a1a      	ldr	r2, [pc, #104]	; (8006f18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d00e      	beq.n	8006ed2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a18      	ldr	r2, [pc, #96]	; (8006f1c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d009      	beq.n	8006ed2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a13      	ldr	r2, [pc, #76]	; (8006f10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d004      	beq.n	8006ed2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a14      	ldr	r2, [pc, #80]	; (8006f20 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d10c      	bne.n	8006eec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ed8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	68ba      	ldr	r2, [r7, #8]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68ba      	ldr	r2, [r7, #8]
 8006eea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3714      	adds	r7, #20
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	40012c00 	.word	0x40012c00
 8006f10:	40013400 	.word	0x40013400
 8006f14:	40000400 	.word	0x40000400
 8006f18:	40000800 	.word	0x40000800
 8006f1c:	40000c00 	.word	0x40000c00
 8006f20:	40014000 	.word	0x40014000

08006f24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f40:	bf00      	nop
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d101      	bne.n	8006f72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e040      	b.n	8006ff4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d106      	bne.n	8006f88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f7fb fd88 	bl	8002a98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2224      	movs	r2, #36	; 0x24
 8006f8c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f022 0201 	bic.w	r2, r2, #1
 8006f9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 fc94 	bl	80078cc <UART_SetConfig>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d101      	bne.n	8006fae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e022      	b.n	8006ff4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d002      	beq.n	8006fbc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 ff40 	bl	8007e3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685a      	ldr	r2, [r3, #4]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	689a      	ldr	r2, [r3, #8]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f042 0201 	orr.w	r2, r2, #1
 8006fea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 ffc7 	bl	8007f80 <UART_CheckIdleState>
 8006ff2:	4603      	mov	r3, r0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3708      	adds	r7, #8
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b08a      	sub	sp, #40	; 0x28
 8007000:	af02      	add	r7, sp, #8
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	603b      	str	r3, [r7, #0]
 8007008:	4613      	mov	r3, r2
 800700a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007010:	2b20      	cmp	r3, #32
 8007012:	f040 8082 	bne.w	800711a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d002      	beq.n	8007022 <HAL_UART_Transmit+0x26>
 800701c:	88fb      	ldrh	r3, [r7, #6]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e07a      	b.n	800711c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800702c:	2b01      	cmp	r3, #1
 800702e:	d101      	bne.n	8007034 <HAL_UART_Transmit+0x38>
 8007030:	2302      	movs	r3, #2
 8007032:	e073      	b.n	800711c <HAL_UART_Transmit+0x120>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2221      	movs	r2, #33	; 0x21
 8007048:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800704a:	f7fb ff4b 	bl	8002ee4 <HAL_GetTick>
 800704e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	88fa      	ldrh	r2, [r7, #6]
 8007054:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	88fa      	ldrh	r2, [r7, #6]
 800705c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007068:	d108      	bne.n	800707c <HAL_UART_Transmit+0x80>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d104      	bne.n	800707c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007072:	2300      	movs	r3, #0
 8007074:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	61bb      	str	r3, [r7, #24]
 800707a:	e003      	b.n	8007084 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007080:	2300      	movs	r3, #0
 8007082:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800708c:	e02d      	b.n	80070ea <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	2200      	movs	r2, #0
 8007096:	2180      	movs	r1, #128	; 0x80
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f000 ffba 	bl	8008012 <UART_WaitOnFlagUntilTimeout>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d001      	beq.n	80070a8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e039      	b.n	800711c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d10b      	bne.n	80070c6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	881a      	ldrh	r2, [r3, #0]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070ba:	b292      	uxth	r2, r2
 80070bc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	3302      	adds	r3, #2
 80070c2:	61bb      	str	r3, [r7, #24]
 80070c4:	e008      	b.n	80070d8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	781a      	ldrb	r2, [r3, #0]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	b292      	uxth	r2, r2
 80070d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	3301      	adds	r3, #1
 80070d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80070de:	b29b      	uxth	r3, r3
 80070e0:	3b01      	subs	r3, #1
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d1cb      	bne.n	800708e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	9300      	str	r3, [sp, #0]
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	2200      	movs	r2, #0
 80070fe:	2140      	movs	r1, #64	; 0x40
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f000 ff86 	bl	8008012 <UART_WaitOnFlagUntilTimeout>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d001      	beq.n	8007110 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800710c:	2303      	movs	r3, #3
 800710e:	e005      	b.n	800711c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2220      	movs	r2, #32
 8007114:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007116:	2300      	movs	r3, #0
 8007118:	e000      	b.n	800711c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800711a:	2302      	movs	r3, #2
  }
}
 800711c:	4618      	mov	r0, r3
 800711e:	3720      	adds	r7, #32
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b08a      	sub	sp, #40	; 0x28
 8007128:	af02      	add	r7, sp, #8
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	603b      	str	r3, [r7, #0]
 8007130:	4613      	mov	r3, r2
 8007132:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007138:	2b20      	cmp	r3, #32
 800713a:	f040 80bf 	bne.w	80072bc <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d002      	beq.n	800714a <HAL_UART_Receive+0x26>
 8007144:	88fb      	ldrh	r3, [r7, #6]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d101      	bne.n	800714e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e0b7      	b.n	80072be <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007154:	2b01      	cmp	r3, #1
 8007156:	d101      	bne.n	800715c <HAL_UART_Receive+0x38>
 8007158:	2302      	movs	r3, #2
 800715a:	e0b0      	b.n	80072be <HAL_UART_Receive+0x19a>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2222      	movs	r2, #34	; 0x22
 8007170:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007178:	f7fb feb4 	bl	8002ee4 <HAL_GetTick>
 800717c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	88fa      	ldrh	r2, [r7, #6]
 8007182:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	88fa      	ldrh	r2, [r7, #6]
 800718a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007196:	d10e      	bne.n	80071b6 <HAL_UART_Receive+0x92>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d105      	bne.n	80071ac <HAL_UART_Receive+0x88>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80071a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071aa:	e02d      	b.n	8007208 <HAL_UART_Receive+0xe4>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	22ff      	movs	r2, #255	; 0xff
 80071b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071b4:	e028      	b.n	8007208 <HAL_UART_Receive+0xe4>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d10d      	bne.n	80071da <HAL_UART_Receive+0xb6>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d104      	bne.n	80071d0 <HAL_UART_Receive+0xac>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	22ff      	movs	r2, #255	; 0xff
 80071ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071ce:	e01b      	b.n	8007208 <HAL_UART_Receive+0xe4>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	227f      	movs	r2, #127	; 0x7f
 80071d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071d8:	e016      	b.n	8007208 <HAL_UART_Receive+0xe4>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071e2:	d10d      	bne.n	8007200 <HAL_UART_Receive+0xdc>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d104      	bne.n	80071f6 <HAL_UART_Receive+0xd2>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	227f      	movs	r2, #127	; 0x7f
 80071f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071f4:	e008      	b.n	8007208 <HAL_UART_Receive+0xe4>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	223f      	movs	r2, #63	; 0x3f
 80071fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071fe:	e003      	b.n	8007208 <HAL_UART_Receive+0xe4>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800720e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007218:	d108      	bne.n	800722c <HAL_UART_Receive+0x108>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d104      	bne.n	800722c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8007222:	2300      	movs	r3, #0
 8007224:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	61bb      	str	r3, [r7, #24]
 800722a:	e003      	b.n	8007234 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007230:	2300      	movs	r3, #0
 8007232:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800723c:	e033      	b.n	80072a6 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	9300      	str	r3, [sp, #0]
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	2200      	movs	r2, #0
 8007246:	2120      	movs	r1, #32
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f000 fee2 	bl	8008012 <UART_WaitOnFlagUntilTimeout>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d001      	beq.n	8007258 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	e032      	b.n	80072be <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d10c      	bne.n	8007278 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007264:	b29a      	uxth	r2, r3
 8007266:	8a7b      	ldrh	r3, [r7, #18]
 8007268:	4013      	ands	r3, r2
 800726a:	b29a      	uxth	r2, r3
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	3302      	adds	r3, #2
 8007274:	61bb      	str	r3, [r7, #24]
 8007276:	e00d      	b.n	8007294 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800727e:	b29b      	uxth	r3, r3
 8007280:	b2da      	uxtb	r2, r3
 8007282:	8a7b      	ldrh	r3, [r7, #18]
 8007284:	b2db      	uxtb	r3, r3
 8007286:	4013      	ands	r3, r2
 8007288:	b2da      	uxtb	r2, r3
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	3301      	adds	r3, #1
 8007292:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800729a:	b29b      	uxth	r3, r3
 800729c:	3b01      	subs	r3, #1
 800729e:	b29a      	uxth	r2, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d1c5      	bne.n	800723e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2220      	movs	r2, #32
 80072b6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80072b8:	2300      	movs	r3, #0
 80072ba:	e000      	b.n	80072be <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80072bc:	2302      	movs	r3, #2
  }
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3720      	adds	r7, #32
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
	...

080072c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b0ba      	sub	sp, #232	; 0xe8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	69db      	ldr	r3, [r3, #28]
 80072d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80072ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80072f2:	f640 030f 	movw	r3, #2063	; 0x80f
 80072f6:	4013      	ands	r3, r2
 80072f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80072fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007300:	2b00      	cmp	r3, #0
 8007302:	d115      	bne.n	8007330 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007308:	f003 0320 	and.w	r3, r3, #32
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00f      	beq.n	8007330 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007314:	f003 0320 	and.w	r3, r3, #32
 8007318:	2b00      	cmp	r3, #0
 800731a:	d009      	beq.n	8007330 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007320:	2b00      	cmp	r3, #0
 8007322:	f000 82a6 	beq.w	8007872 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	4798      	blx	r3
      }
      return;
 800732e:	e2a0      	b.n	8007872 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007330:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007334:	2b00      	cmp	r3, #0
 8007336:	f000 8117 	beq.w	8007568 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800733a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800733e:	f003 0301 	and.w	r3, r3, #1
 8007342:	2b00      	cmp	r3, #0
 8007344:	d106      	bne.n	8007354 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007346:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800734a:	4b85      	ldr	r3, [pc, #532]	; (8007560 <HAL_UART_IRQHandler+0x298>)
 800734c:	4013      	ands	r3, r2
 800734e:	2b00      	cmp	r3, #0
 8007350:	f000 810a 	beq.w	8007568 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007358:	f003 0301 	and.w	r3, r3, #1
 800735c:	2b00      	cmp	r3, #0
 800735e:	d011      	beq.n	8007384 <HAL_UART_IRQHandler+0xbc>
 8007360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00b      	beq.n	8007384 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2201      	movs	r2, #1
 8007372:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800737a:	f043 0201 	orr.w	r2, r3, #1
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007388:	f003 0302 	and.w	r3, r3, #2
 800738c:	2b00      	cmp	r3, #0
 800738e:	d011      	beq.n	80073b4 <HAL_UART_IRQHandler+0xec>
 8007390:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007394:	f003 0301 	and.w	r3, r3, #1
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00b      	beq.n	80073b4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2202      	movs	r2, #2
 80073a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073aa:	f043 0204 	orr.w	r2, r3, #4
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073b8:	f003 0304 	and.w	r3, r3, #4
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d011      	beq.n	80073e4 <HAL_UART_IRQHandler+0x11c>
 80073c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073c4:	f003 0301 	and.w	r3, r3, #1
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00b      	beq.n	80073e4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2204      	movs	r2, #4
 80073d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073da:	f043 0202 	orr.w	r2, r3, #2
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80073e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e8:	f003 0308 	and.w	r3, r3, #8
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d017      	beq.n	8007420 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80073f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073f4:	f003 0320 	and.w	r3, r3, #32
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d105      	bne.n	8007408 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80073fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007400:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00b      	beq.n	8007420 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2208      	movs	r2, #8
 800740e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007416:	f043 0208 	orr.w	r2, r3, #8
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007424:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007428:	2b00      	cmp	r3, #0
 800742a:	d012      	beq.n	8007452 <HAL_UART_IRQHandler+0x18a>
 800742c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007430:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00c      	beq.n	8007452 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007440:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007448:	f043 0220 	orr.w	r2, r3, #32
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 820c 	beq.w	8007876 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800745e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007462:	f003 0320 	and.w	r3, r3, #32
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00d      	beq.n	8007486 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800746a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800746e:	f003 0320 	and.w	r3, r3, #32
 8007472:	2b00      	cmp	r3, #0
 8007474:	d007      	beq.n	8007486 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800747a:	2b00      	cmp	r3, #0
 800747c:	d003      	beq.n	8007486 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800748c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800749a:	2b40      	cmp	r3, #64	; 0x40
 800749c:	d005      	beq.n	80074aa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800749e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80074a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d04f      	beq.n	800754a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 fe75 	bl	800819a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ba:	2b40      	cmp	r3, #64	; 0x40
 80074bc:	d141      	bne.n	8007542 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	3308      	adds	r3, #8
 80074c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074cc:	e853 3f00 	ldrex	r3, [r3]
 80074d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80074d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	3308      	adds	r3, #8
 80074e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80074ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80074ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80074f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80074fa:	e841 2300 	strex	r3, r2, [r1]
 80074fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007502:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1d9      	bne.n	80074be <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800750e:	2b00      	cmp	r3, #0
 8007510:	d013      	beq.n	800753a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007516:	4a13      	ldr	r2, [pc, #76]	; (8007564 <HAL_UART_IRQHandler+0x29c>)
 8007518:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800751e:	4618      	mov	r0, r3
 8007520:	f7fb fe30 	bl	8003184 <HAL_DMA_Abort_IT>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d017      	beq.n	800755a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800752e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007534:	4610      	mov	r0, r2
 8007536:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007538:	e00f      	b.n	800755a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f9b0 	bl	80078a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007540:	e00b      	b.n	800755a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f9ac 	bl	80078a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007548:	e007      	b.n	800755a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f9a8 	bl	80078a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007558:	e18d      	b.n	8007876 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800755a:	bf00      	nop
    return;
 800755c:	e18b      	b.n	8007876 <HAL_UART_IRQHandler+0x5ae>
 800755e:	bf00      	nop
 8007560:	04000120 	.word	0x04000120
 8007564:	08008261 	.word	0x08008261

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800756c:	2b01      	cmp	r3, #1
 800756e:	f040 8146 	bne.w	80077fe <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007576:	f003 0310 	and.w	r3, r3, #16
 800757a:	2b00      	cmp	r3, #0
 800757c:	f000 813f 	beq.w	80077fe <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007584:	f003 0310 	and.w	r3, r3, #16
 8007588:	2b00      	cmp	r3, #0
 800758a:	f000 8138 	beq.w	80077fe <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2210      	movs	r2, #16
 8007594:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a0:	2b40      	cmp	r3, #64	; 0x40
 80075a2:	f040 80b4 	bne.w	800770e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80075b2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	f000 815f 	beq.w	800787a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80075c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075c6:	429a      	cmp	r2, r3
 80075c8:	f080 8157 	bcs.w	800787a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 0320 	and.w	r3, r3, #32
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	f040 8085 	bne.w	80076f2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075f4:	e853 3f00 	ldrex	r3, [r3]
 80075f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80075fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007600:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007604:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	461a      	mov	r2, r3
 800760e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007612:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007616:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800761e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007622:	e841 2300 	strex	r3, r2, [r1]
 8007626:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800762a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1da      	bne.n	80075e8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	3308      	adds	r3, #8
 8007638:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800763c:	e853 3f00 	ldrex	r3, [r3]
 8007640:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007642:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007644:	f023 0301 	bic.w	r3, r3, #1
 8007648:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	3308      	adds	r3, #8
 8007652:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007656:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800765a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800765e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007662:	e841 2300 	strex	r3, r2, [r1]
 8007666:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007668:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1e1      	bne.n	8007632 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	3308      	adds	r3, #8
 8007674:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007676:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007678:	e853 3f00 	ldrex	r3, [r3]
 800767c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800767e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007684:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	3308      	adds	r3, #8
 800768e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007692:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007694:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007696:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007698:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800769a:	e841 2300 	strex	r3, r2, [r1]
 800769e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80076a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1e3      	bne.n	800766e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2220      	movs	r2, #32
 80076aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ba:	e853 3f00 	ldrex	r3, [r3]
 80076be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80076c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076c2:	f023 0310 	bic.w	r3, r3, #16
 80076c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	461a      	mov	r2, r3
 80076d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80076d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80076d6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80076da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076dc:	e841 2300 	strex	r3, r2, [r1]
 80076e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80076e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1e4      	bne.n	80076b2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7fb fd0b 	bl	8003108 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076fe:	b29b      	uxth	r3, r3
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	b29b      	uxth	r3, r3
 8007704:	4619      	mov	r1, r3
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f8d4 	bl	80078b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800770c:	e0b5      	b.n	800787a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800771a:	b29b      	uxth	r3, r3
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007728:	b29b      	uxth	r3, r3
 800772a:	2b00      	cmp	r3, #0
 800772c:	f000 80a7 	beq.w	800787e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8007730:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007734:	2b00      	cmp	r3, #0
 8007736:	f000 80a2 	beq.w	800787e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007742:	e853 3f00 	ldrex	r3, [r3]
 8007746:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800774a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800774e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	461a      	mov	r2, r3
 8007758:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800775c:	647b      	str	r3, [r7, #68]	; 0x44
 800775e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007760:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007762:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007764:	e841 2300 	strex	r3, r2, [r1]
 8007768:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800776a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800776c:	2b00      	cmp	r3, #0
 800776e:	d1e4      	bne.n	800773a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	3308      	adds	r3, #8
 8007776:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777a:	e853 3f00 	ldrex	r3, [r3]
 800777e:	623b      	str	r3, [r7, #32]
   return(result);
 8007780:	6a3b      	ldr	r3, [r7, #32]
 8007782:	f023 0301 	bic.w	r3, r3, #1
 8007786:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	3308      	adds	r3, #8
 8007790:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007794:	633a      	str	r2, [r7, #48]	; 0x30
 8007796:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007798:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800779a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800779c:	e841 2300 	strex	r3, r2, [r1]
 80077a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d1e3      	bne.n	8007770 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2220      	movs	r2, #32
 80077ac:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	e853 3f00 	ldrex	r3, [r3]
 80077c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f023 0310 	bic.w	r3, r3, #16
 80077ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	461a      	mov	r2, r3
 80077d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80077dc:	61fb      	str	r3, [r7, #28]
 80077de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e0:	69b9      	ldr	r1, [r7, #24]
 80077e2:	69fa      	ldr	r2, [r7, #28]
 80077e4:	e841 2300 	strex	r3, r2, [r1]
 80077e8:	617b      	str	r3, [r7, #20]
   return(result);
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1e4      	bne.n	80077ba <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80077f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077f4:	4619      	mov	r1, r3
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f85c 	bl	80078b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80077fc:	e03f      	b.n	800787e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80077fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00e      	beq.n	8007828 <HAL_UART_IRQHandler+0x560>
 800780a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800780e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007812:	2b00      	cmp	r3, #0
 8007814:	d008      	beq.n	8007828 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800781e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 fd5d 	bl	80082e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007826:	e02d      	b.n	8007884 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800782c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00e      	beq.n	8007852 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800783c:	2b00      	cmp	r3, #0
 800783e:	d008      	beq.n	8007852 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007844:	2b00      	cmp	r3, #0
 8007846:	d01c      	beq.n	8007882 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	4798      	blx	r3
    }
    return;
 8007850:	e017      	b.n	8007882 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800785a:	2b00      	cmp	r3, #0
 800785c:	d012      	beq.n	8007884 <HAL_UART_IRQHandler+0x5bc>
 800785e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00c      	beq.n	8007884 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 fd0e 	bl	800828c <UART_EndTransmit_IT>
    return;
 8007870:	e008      	b.n	8007884 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007872:	bf00      	nop
 8007874:	e006      	b.n	8007884 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007876:	bf00      	nop
 8007878:	e004      	b.n	8007884 <HAL_UART_IRQHandler+0x5bc>
      return;
 800787a:	bf00      	nop
 800787c:	e002      	b.n	8007884 <HAL_UART_IRQHandler+0x5bc>
      return;
 800787e:	bf00      	nop
 8007880:	e000      	b.n	8007884 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007882:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007884:	37e8      	adds	r7, #232	; 0xe8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop

0800788c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80078a8:	bf00      	nop
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	460b      	mov	r3, r1
 80078be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078d0:	b08a      	sub	sp, #40	; 0x28
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80078d6:	2300      	movs	r3, #0
 80078d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	689a      	ldr	r2, [r3, #8]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	431a      	orrs	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	695b      	ldr	r3, [r3, #20]
 80078ea:	431a      	orrs	r2, r3
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	69db      	ldr	r3, [r3, #28]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	4ba4      	ldr	r3, [pc, #656]	; (8007b8c <UART_SetConfig+0x2c0>)
 80078fc:	4013      	ands	r3, r2
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	6812      	ldr	r2, [r2, #0]
 8007902:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007904:	430b      	orrs	r3, r1
 8007906:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	68da      	ldr	r2, [r3, #12]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	430a      	orrs	r2, r1
 800791c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a99      	ldr	r2, [pc, #612]	; (8007b90 <UART_SetConfig+0x2c4>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d004      	beq.n	8007938 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007934:	4313      	orrs	r3, r2
 8007936:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007948:	430a      	orrs	r2, r1
 800794a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a90      	ldr	r2, [pc, #576]	; (8007b94 <UART_SetConfig+0x2c8>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d126      	bne.n	80079a4 <UART_SetConfig+0xd8>
 8007956:	4b90      	ldr	r3, [pc, #576]	; (8007b98 <UART_SetConfig+0x2cc>)
 8007958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800795c:	f003 0303 	and.w	r3, r3, #3
 8007960:	2b03      	cmp	r3, #3
 8007962:	d81b      	bhi.n	800799c <UART_SetConfig+0xd0>
 8007964:	a201      	add	r2, pc, #4	; (adr r2, 800796c <UART_SetConfig+0xa0>)
 8007966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796a:	bf00      	nop
 800796c:	0800797d 	.word	0x0800797d
 8007970:	0800798d 	.word	0x0800798d
 8007974:	08007985 	.word	0x08007985
 8007978:	08007995 	.word	0x08007995
 800797c:	2301      	movs	r3, #1
 800797e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007982:	e116      	b.n	8007bb2 <UART_SetConfig+0x2e6>
 8007984:	2302      	movs	r3, #2
 8007986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800798a:	e112      	b.n	8007bb2 <UART_SetConfig+0x2e6>
 800798c:	2304      	movs	r3, #4
 800798e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007992:	e10e      	b.n	8007bb2 <UART_SetConfig+0x2e6>
 8007994:	2308      	movs	r3, #8
 8007996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800799a:	e10a      	b.n	8007bb2 <UART_SetConfig+0x2e6>
 800799c:	2310      	movs	r3, #16
 800799e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079a2:	e106      	b.n	8007bb2 <UART_SetConfig+0x2e6>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a7c      	ldr	r2, [pc, #496]	; (8007b9c <UART_SetConfig+0x2d0>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d138      	bne.n	8007a20 <UART_SetConfig+0x154>
 80079ae:	4b7a      	ldr	r3, [pc, #488]	; (8007b98 <UART_SetConfig+0x2cc>)
 80079b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079b4:	f003 030c 	and.w	r3, r3, #12
 80079b8:	2b0c      	cmp	r3, #12
 80079ba:	d82d      	bhi.n	8007a18 <UART_SetConfig+0x14c>
 80079bc:	a201      	add	r2, pc, #4	; (adr r2, 80079c4 <UART_SetConfig+0xf8>)
 80079be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c2:	bf00      	nop
 80079c4:	080079f9 	.word	0x080079f9
 80079c8:	08007a19 	.word	0x08007a19
 80079cc:	08007a19 	.word	0x08007a19
 80079d0:	08007a19 	.word	0x08007a19
 80079d4:	08007a09 	.word	0x08007a09
 80079d8:	08007a19 	.word	0x08007a19
 80079dc:	08007a19 	.word	0x08007a19
 80079e0:	08007a19 	.word	0x08007a19
 80079e4:	08007a01 	.word	0x08007a01
 80079e8:	08007a19 	.word	0x08007a19
 80079ec:	08007a19 	.word	0x08007a19
 80079f0:	08007a19 	.word	0x08007a19
 80079f4:	08007a11 	.word	0x08007a11
 80079f8:	2300      	movs	r3, #0
 80079fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079fe:	e0d8      	b.n	8007bb2 <UART_SetConfig+0x2e6>
 8007a00:	2302      	movs	r3, #2
 8007a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a06:	e0d4      	b.n	8007bb2 <UART_SetConfig+0x2e6>
 8007a08:	2304      	movs	r3, #4
 8007a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a0e:	e0d0      	b.n	8007bb2 <UART_SetConfig+0x2e6>
 8007a10:	2308      	movs	r3, #8
 8007a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a16:	e0cc      	b.n	8007bb2 <UART_SetConfig+0x2e6>
 8007a18:	2310      	movs	r3, #16
 8007a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a1e:	e0c8      	b.n	8007bb2 <UART_SetConfig+0x2e6>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a5e      	ldr	r2, [pc, #376]	; (8007ba0 <UART_SetConfig+0x2d4>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d125      	bne.n	8007a76 <UART_SetConfig+0x1aa>
 8007a2a:	4b5b      	ldr	r3, [pc, #364]	; (8007b98 <UART_SetConfig+0x2cc>)
 8007a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a30:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007a34:	2b30      	cmp	r3, #48	; 0x30
 8007a36:	d016      	beq.n	8007a66 <UART_SetConfig+0x19a>
 8007a38:	2b30      	cmp	r3, #48	; 0x30
 8007a3a:	d818      	bhi.n	8007a6e <UART_SetConfig+0x1a2>
 8007a3c:	2b20      	cmp	r3, #32
 8007a3e:	d00a      	beq.n	8007a56 <UART_SetConfig+0x18a>
 8007a40:	2b20      	cmp	r3, #32
 8007a42:	d814      	bhi.n	8007a6e <UART_SetConfig+0x1a2>
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d002      	beq.n	8007a4e <UART_SetConfig+0x182>
 8007a48:	2b10      	cmp	r3, #16
 8007a4a:	d008      	beq.n	8007a5e <UART_SetConfig+0x192>
 8007a4c:	e00f      	b.n	8007a6e <UART_SetConfig+0x1a2>
 8007a4e:	2300      	movs	r3, #0
 8007a50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a54:	e0ad      	b.n	8007bb2 <UART_SetConfig+0x2e6>
 8007a56:	2302      	movs	r3, #2
 8007a58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a5c:	e0a9      	b.n	8007bb2 <UART_SetConfig+0x2e6>
 8007a5e:	2304      	movs	r3, #4
 8007a60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a64:	e0a5      	b.n	8007bb2 <UART_SetConfig+0x2e6>
 8007a66:	2308      	movs	r3, #8
 8007a68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a6c:	e0a1      	b.n	8007bb2 <UART_SetConfig+0x2e6>
 8007a6e:	2310      	movs	r3, #16
 8007a70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a74:	e09d      	b.n	8007bb2 <UART_SetConfig+0x2e6>
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a4a      	ldr	r2, [pc, #296]	; (8007ba4 <UART_SetConfig+0x2d8>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d125      	bne.n	8007acc <UART_SetConfig+0x200>
 8007a80:	4b45      	ldr	r3, [pc, #276]	; (8007b98 <UART_SetConfig+0x2cc>)
 8007a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007a8a:	2bc0      	cmp	r3, #192	; 0xc0
 8007a8c:	d016      	beq.n	8007abc <UART_SetConfig+0x1f0>
 8007a8e:	2bc0      	cmp	r3, #192	; 0xc0
 8007a90:	d818      	bhi.n	8007ac4 <UART_SetConfig+0x1f8>
 8007a92:	2b80      	cmp	r3, #128	; 0x80
 8007a94:	d00a      	beq.n	8007aac <UART_SetConfig+0x1e0>
 8007a96:	2b80      	cmp	r3, #128	; 0x80
 8007a98:	d814      	bhi.n	8007ac4 <UART_SetConfig+0x1f8>
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d002      	beq.n	8007aa4 <UART_SetConfig+0x1d8>
 8007a9e:	2b40      	cmp	r3, #64	; 0x40
 8007aa0:	d008      	beq.n	8007ab4 <UART_SetConfig+0x1e8>
 8007aa2:	e00f      	b.n	8007ac4 <UART_SetConfig+0x1f8>
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007aaa:	e082      	b.n	8007bb2 <UART_SetConfig+0x2e6>
 8007aac:	2302      	movs	r3, #2
 8007aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ab2:	e07e      	b.n	8007bb2 <UART_SetConfig+0x2e6>
 8007ab4:	2304      	movs	r3, #4
 8007ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007aba:	e07a      	b.n	8007bb2 <UART_SetConfig+0x2e6>
 8007abc:	2308      	movs	r3, #8
 8007abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ac2:	e076      	b.n	8007bb2 <UART_SetConfig+0x2e6>
 8007ac4:	2310      	movs	r3, #16
 8007ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007aca:	e072      	b.n	8007bb2 <UART_SetConfig+0x2e6>
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a35      	ldr	r2, [pc, #212]	; (8007ba8 <UART_SetConfig+0x2dc>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d12a      	bne.n	8007b2c <UART_SetConfig+0x260>
 8007ad6:	4b30      	ldr	r3, [pc, #192]	; (8007b98 <UART_SetConfig+0x2cc>)
 8007ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007adc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ae0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ae4:	d01a      	beq.n	8007b1c <UART_SetConfig+0x250>
 8007ae6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007aea:	d81b      	bhi.n	8007b24 <UART_SetConfig+0x258>
 8007aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007af0:	d00c      	beq.n	8007b0c <UART_SetConfig+0x240>
 8007af2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007af6:	d815      	bhi.n	8007b24 <UART_SetConfig+0x258>
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d003      	beq.n	8007b04 <UART_SetConfig+0x238>
 8007afc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b00:	d008      	beq.n	8007b14 <UART_SetConfig+0x248>
 8007b02:	e00f      	b.n	8007b24 <UART_SetConfig+0x258>
 8007b04:	2300      	movs	r3, #0
 8007b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b0a:	e052      	b.n	8007bb2 <UART_SetConfig+0x2e6>
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b12:	e04e      	b.n	8007bb2 <UART_SetConfig+0x2e6>
 8007b14:	2304      	movs	r3, #4
 8007b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b1a:	e04a      	b.n	8007bb2 <UART_SetConfig+0x2e6>
 8007b1c:	2308      	movs	r3, #8
 8007b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b22:	e046      	b.n	8007bb2 <UART_SetConfig+0x2e6>
 8007b24:	2310      	movs	r3, #16
 8007b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b2a:	e042      	b.n	8007bb2 <UART_SetConfig+0x2e6>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a17      	ldr	r2, [pc, #92]	; (8007b90 <UART_SetConfig+0x2c4>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d13a      	bne.n	8007bac <UART_SetConfig+0x2e0>
 8007b36:	4b18      	ldr	r3, [pc, #96]	; (8007b98 <UART_SetConfig+0x2cc>)
 8007b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007b40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b44:	d01a      	beq.n	8007b7c <UART_SetConfig+0x2b0>
 8007b46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b4a:	d81b      	bhi.n	8007b84 <UART_SetConfig+0x2b8>
 8007b4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b50:	d00c      	beq.n	8007b6c <UART_SetConfig+0x2a0>
 8007b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b56:	d815      	bhi.n	8007b84 <UART_SetConfig+0x2b8>
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d003      	beq.n	8007b64 <UART_SetConfig+0x298>
 8007b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b60:	d008      	beq.n	8007b74 <UART_SetConfig+0x2a8>
 8007b62:	e00f      	b.n	8007b84 <UART_SetConfig+0x2b8>
 8007b64:	2300      	movs	r3, #0
 8007b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b6a:	e022      	b.n	8007bb2 <UART_SetConfig+0x2e6>
 8007b6c:	2302      	movs	r3, #2
 8007b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b72:	e01e      	b.n	8007bb2 <UART_SetConfig+0x2e6>
 8007b74:	2304      	movs	r3, #4
 8007b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b7a:	e01a      	b.n	8007bb2 <UART_SetConfig+0x2e6>
 8007b7c:	2308      	movs	r3, #8
 8007b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b82:	e016      	b.n	8007bb2 <UART_SetConfig+0x2e6>
 8007b84:	2310      	movs	r3, #16
 8007b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b8a:	e012      	b.n	8007bb2 <UART_SetConfig+0x2e6>
 8007b8c:	efff69f3 	.word	0xefff69f3
 8007b90:	40008000 	.word	0x40008000
 8007b94:	40013800 	.word	0x40013800
 8007b98:	40021000 	.word	0x40021000
 8007b9c:	40004400 	.word	0x40004400
 8007ba0:	40004800 	.word	0x40004800
 8007ba4:	40004c00 	.word	0x40004c00
 8007ba8:	40005000 	.word	0x40005000
 8007bac:	2310      	movs	r3, #16
 8007bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a9f      	ldr	r2, [pc, #636]	; (8007e34 <UART_SetConfig+0x568>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d17a      	bne.n	8007cb2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007bbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007bc0:	2b08      	cmp	r3, #8
 8007bc2:	d824      	bhi.n	8007c0e <UART_SetConfig+0x342>
 8007bc4:	a201      	add	r2, pc, #4	; (adr r2, 8007bcc <UART_SetConfig+0x300>)
 8007bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bca:	bf00      	nop
 8007bcc:	08007bf1 	.word	0x08007bf1
 8007bd0:	08007c0f 	.word	0x08007c0f
 8007bd4:	08007bf9 	.word	0x08007bf9
 8007bd8:	08007c0f 	.word	0x08007c0f
 8007bdc:	08007bff 	.word	0x08007bff
 8007be0:	08007c0f 	.word	0x08007c0f
 8007be4:	08007c0f 	.word	0x08007c0f
 8007be8:	08007c0f 	.word	0x08007c0f
 8007bec:	08007c07 	.word	0x08007c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bf0:	f7fd f8ea 	bl	8004dc8 <HAL_RCC_GetPCLK1Freq>
 8007bf4:	61f8      	str	r0, [r7, #28]
        break;
 8007bf6:	e010      	b.n	8007c1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bf8:	4b8f      	ldr	r3, [pc, #572]	; (8007e38 <UART_SetConfig+0x56c>)
 8007bfa:	61fb      	str	r3, [r7, #28]
        break;
 8007bfc:	e00d      	b.n	8007c1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bfe:	f7fd f84b 	bl	8004c98 <HAL_RCC_GetSysClockFreq>
 8007c02:	61f8      	str	r0, [r7, #28]
        break;
 8007c04:	e009      	b.n	8007c1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c0a:	61fb      	str	r3, [r7, #28]
        break;
 8007c0c:	e005      	b.n	8007c1a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007c18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f000 80fb 	beq.w	8007e18 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	4613      	mov	r3, r2
 8007c28:	005b      	lsls	r3, r3, #1
 8007c2a:	4413      	add	r3, r2
 8007c2c:	69fa      	ldr	r2, [r7, #28]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d305      	bcc.n	8007c3e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007c38:	69fa      	ldr	r2, [r7, #28]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d903      	bls.n	8007c46 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007c44:	e0e8      	b.n	8007e18 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	461c      	mov	r4, r3
 8007c4c:	4615      	mov	r5, r2
 8007c4e:	f04f 0200 	mov.w	r2, #0
 8007c52:	f04f 0300 	mov.w	r3, #0
 8007c56:	022b      	lsls	r3, r5, #8
 8007c58:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007c5c:	0222      	lsls	r2, r4, #8
 8007c5e:	68f9      	ldr	r1, [r7, #12]
 8007c60:	6849      	ldr	r1, [r1, #4]
 8007c62:	0849      	lsrs	r1, r1, #1
 8007c64:	2000      	movs	r0, #0
 8007c66:	4688      	mov	r8, r1
 8007c68:	4681      	mov	r9, r0
 8007c6a:	eb12 0a08 	adds.w	sl, r2, r8
 8007c6e:	eb43 0b09 	adc.w	fp, r3, r9
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	603b      	str	r3, [r7, #0]
 8007c7a:	607a      	str	r2, [r7, #4]
 8007c7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c80:	4650      	mov	r0, sl
 8007c82:	4659      	mov	r1, fp
 8007c84:	f7f8 ffa0 	bl	8000bc8 <__aeabi_uldivmod>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c96:	d308      	bcc.n	8007caa <UART_SetConfig+0x3de>
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c9e:	d204      	bcs.n	8007caa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	69ba      	ldr	r2, [r7, #24]
 8007ca6:	60da      	str	r2, [r3, #12]
 8007ca8:	e0b6      	b.n	8007e18 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007cb0:	e0b2      	b.n	8007e18 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	69db      	ldr	r3, [r3, #28]
 8007cb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cba:	d15e      	bne.n	8007d7a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007cbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007cc0:	2b08      	cmp	r3, #8
 8007cc2:	d828      	bhi.n	8007d16 <UART_SetConfig+0x44a>
 8007cc4:	a201      	add	r2, pc, #4	; (adr r2, 8007ccc <UART_SetConfig+0x400>)
 8007cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cca:	bf00      	nop
 8007ccc:	08007cf1 	.word	0x08007cf1
 8007cd0:	08007cf9 	.word	0x08007cf9
 8007cd4:	08007d01 	.word	0x08007d01
 8007cd8:	08007d17 	.word	0x08007d17
 8007cdc:	08007d07 	.word	0x08007d07
 8007ce0:	08007d17 	.word	0x08007d17
 8007ce4:	08007d17 	.word	0x08007d17
 8007ce8:	08007d17 	.word	0x08007d17
 8007cec:	08007d0f 	.word	0x08007d0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cf0:	f7fd f86a 	bl	8004dc8 <HAL_RCC_GetPCLK1Freq>
 8007cf4:	61f8      	str	r0, [r7, #28]
        break;
 8007cf6:	e014      	b.n	8007d22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cf8:	f7fd f87c 	bl	8004df4 <HAL_RCC_GetPCLK2Freq>
 8007cfc:	61f8      	str	r0, [r7, #28]
        break;
 8007cfe:	e010      	b.n	8007d22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d00:	4b4d      	ldr	r3, [pc, #308]	; (8007e38 <UART_SetConfig+0x56c>)
 8007d02:	61fb      	str	r3, [r7, #28]
        break;
 8007d04:	e00d      	b.n	8007d22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d06:	f7fc ffc7 	bl	8004c98 <HAL_RCC_GetSysClockFreq>
 8007d0a:	61f8      	str	r0, [r7, #28]
        break;
 8007d0c:	e009      	b.n	8007d22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d12:	61fb      	str	r3, [r7, #28]
        break;
 8007d14:	e005      	b.n	8007d22 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007d16:	2300      	movs	r3, #0
 8007d18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007d20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d077      	beq.n	8007e18 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	005a      	lsls	r2, r3, #1
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	085b      	lsrs	r3, r3, #1
 8007d32:	441a      	add	r2, r3
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d3c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	2b0f      	cmp	r3, #15
 8007d42:	d916      	bls.n	8007d72 <UART_SetConfig+0x4a6>
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d4a:	d212      	bcs.n	8007d72 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	f023 030f 	bic.w	r3, r3, #15
 8007d54:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	085b      	lsrs	r3, r3, #1
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	f003 0307 	and.w	r3, r3, #7
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	8afb      	ldrh	r3, [r7, #22]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	8afa      	ldrh	r2, [r7, #22]
 8007d6e:	60da      	str	r2, [r3, #12]
 8007d70:	e052      	b.n	8007e18 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007d78:	e04e      	b.n	8007e18 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d7e:	2b08      	cmp	r3, #8
 8007d80:	d827      	bhi.n	8007dd2 <UART_SetConfig+0x506>
 8007d82:	a201      	add	r2, pc, #4	; (adr r2, 8007d88 <UART_SetConfig+0x4bc>)
 8007d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d88:	08007dad 	.word	0x08007dad
 8007d8c:	08007db5 	.word	0x08007db5
 8007d90:	08007dbd 	.word	0x08007dbd
 8007d94:	08007dd3 	.word	0x08007dd3
 8007d98:	08007dc3 	.word	0x08007dc3
 8007d9c:	08007dd3 	.word	0x08007dd3
 8007da0:	08007dd3 	.word	0x08007dd3
 8007da4:	08007dd3 	.word	0x08007dd3
 8007da8:	08007dcb 	.word	0x08007dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dac:	f7fd f80c 	bl	8004dc8 <HAL_RCC_GetPCLK1Freq>
 8007db0:	61f8      	str	r0, [r7, #28]
        break;
 8007db2:	e014      	b.n	8007dde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007db4:	f7fd f81e 	bl	8004df4 <HAL_RCC_GetPCLK2Freq>
 8007db8:	61f8      	str	r0, [r7, #28]
        break;
 8007dba:	e010      	b.n	8007dde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007dbc:	4b1e      	ldr	r3, [pc, #120]	; (8007e38 <UART_SetConfig+0x56c>)
 8007dbe:	61fb      	str	r3, [r7, #28]
        break;
 8007dc0:	e00d      	b.n	8007dde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dc2:	f7fc ff69 	bl	8004c98 <HAL_RCC_GetSysClockFreq>
 8007dc6:	61f8      	str	r0, [r7, #28]
        break;
 8007dc8:	e009      	b.n	8007dde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dce:	61fb      	str	r3, [r7, #28]
        break;
 8007dd0:	e005      	b.n	8007dde <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007ddc:	bf00      	nop
    }

    if (pclk != 0U)
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d019      	beq.n	8007e18 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	085a      	lsrs	r2, r3, #1
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	441a      	add	r2, r3
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	2b0f      	cmp	r3, #15
 8007dfc:	d909      	bls.n	8007e12 <UART_SetConfig+0x546>
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e04:	d205      	bcs.n	8007e12 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	b29a      	uxth	r2, r3
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	60da      	str	r2, [r3, #12]
 8007e10:	e002      	b.n	8007e18 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2200      	movs	r2, #0
 8007e22:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007e24:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3728      	adds	r7, #40	; 0x28
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e32:	bf00      	nop
 8007e34:	40008000 	.word	0x40008000
 8007e38:	00f42400 	.word	0x00f42400

08007e3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e48:	f003 0301 	and.w	r3, r3, #1
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00a      	beq.n	8007e66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	430a      	orrs	r2, r1
 8007e64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6a:	f003 0302 	and.w	r3, r3, #2
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00a      	beq.n	8007e88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	430a      	orrs	r2, r1
 8007e86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8c:	f003 0304 	and.w	r3, r3, #4
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00a      	beq.n	8007eaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	430a      	orrs	r2, r1
 8007ea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eae:	f003 0308 	and.w	r3, r3, #8
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00a      	beq.n	8007ecc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	430a      	orrs	r2, r1
 8007eca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed0:	f003 0310 	and.w	r3, r3, #16
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00a      	beq.n	8007eee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	430a      	orrs	r2, r1
 8007eec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef2:	f003 0320 	and.w	r3, r3, #32
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00a      	beq.n	8007f10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	430a      	orrs	r2, r1
 8007f0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d01a      	beq.n	8007f52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	430a      	orrs	r2, r1
 8007f30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f3a:	d10a      	bne.n	8007f52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	430a      	orrs	r2, r1
 8007f50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00a      	beq.n	8007f74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	430a      	orrs	r2, r1
 8007f72:	605a      	str	r2, [r3, #4]
  }
}
 8007f74:	bf00      	nop
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b086      	sub	sp, #24
 8007f84:	af02      	add	r7, sp, #8
 8007f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f90:	f7fa ffa8 	bl	8002ee4 <HAL_GetTick>
 8007f94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 0308 	and.w	r3, r3, #8
 8007fa0:	2b08      	cmp	r3, #8
 8007fa2:	d10e      	bne.n	8007fc2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007fa8:	9300      	str	r3, [sp, #0]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 f82d 	bl	8008012 <UART_WaitOnFlagUntilTimeout>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d001      	beq.n	8007fc2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fbe:	2303      	movs	r3, #3
 8007fc0:	e023      	b.n	800800a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 0304 	and.w	r3, r3, #4
 8007fcc:	2b04      	cmp	r3, #4
 8007fce:	d10e      	bne.n	8007fee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007fd4:	9300      	str	r3, [sp, #0]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 f817 	bl	8008012 <UART_WaitOnFlagUntilTimeout>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d001      	beq.n	8007fee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fea:	2303      	movs	r3, #3
 8007fec:	e00d      	b.n	800800a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2220      	movs	r2, #32
 8007ff2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2220      	movs	r2, #32
 8007ff8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b09c      	sub	sp, #112	; 0x70
 8008016:	af00      	add	r7, sp, #0
 8008018:	60f8      	str	r0, [r7, #12]
 800801a:	60b9      	str	r1, [r7, #8]
 800801c:	603b      	str	r3, [r7, #0]
 800801e:	4613      	mov	r3, r2
 8008020:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008022:	e0a5      	b.n	8008170 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008024:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800802a:	f000 80a1 	beq.w	8008170 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800802e:	f7fa ff59 	bl	8002ee4 <HAL_GetTick>
 8008032:	4602      	mov	r2, r0
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	1ad3      	subs	r3, r2, r3
 8008038:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800803a:	429a      	cmp	r2, r3
 800803c:	d302      	bcc.n	8008044 <UART_WaitOnFlagUntilTimeout+0x32>
 800803e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008040:	2b00      	cmp	r3, #0
 8008042:	d13e      	bne.n	80080c2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800804c:	e853 3f00 	ldrex	r3, [r3]
 8008050:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008054:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008058:	667b      	str	r3, [r7, #100]	; 0x64
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	461a      	mov	r2, r3
 8008060:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008062:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008064:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008066:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008068:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800806a:	e841 2300 	strex	r3, r2, [r1]
 800806e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1e6      	bne.n	8008044 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	3308      	adds	r3, #8
 800807c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008080:	e853 3f00 	ldrex	r3, [r3]
 8008084:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008088:	f023 0301 	bic.w	r3, r3, #1
 800808c:	663b      	str	r3, [r7, #96]	; 0x60
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	3308      	adds	r3, #8
 8008094:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008096:	64ba      	str	r2, [r7, #72]	; 0x48
 8008098:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800809c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800809e:	e841 2300 	strex	r3, r2, [r1]
 80080a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80080a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1e5      	bne.n	8008076 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2220      	movs	r2, #32
 80080ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2220      	movs	r2, #32
 80080b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80080be:	2303      	movs	r3, #3
 80080c0:	e067      	b.n	8008192 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 0304 	and.w	r3, r3, #4
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d04f      	beq.n	8008170 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	69db      	ldr	r3, [r3, #28]
 80080d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080de:	d147      	bne.n	8008170 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080e8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f2:	e853 3f00 	ldrex	r3, [r3]
 80080f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80080fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	461a      	mov	r2, r3
 8008106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008108:	637b      	str	r3, [r7, #52]	; 0x34
 800810a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800810e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008110:	e841 2300 	strex	r3, r2, [r1]
 8008114:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1e6      	bne.n	80080ea <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	3308      	adds	r3, #8
 8008122:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	e853 3f00 	ldrex	r3, [r3]
 800812a:	613b      	str	r3, [r7, #16]
   return(result);
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	f023 0301 	bic.w	r3, r3, #1
 8008132:	66bb      	str	r3, [r7, #104]	; 0x68
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	3308      	adds	r3, #8
 800813a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800813c:	623a      	str	r2, [r7, #32]
 800813e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008140:	69f9      	ldr	r1, [r7, #28]
 8008142:	6a3a      	ldr	r2, [r7, #32]
 8008144:	e841 2300 	strex	r3, r2, [r1]
 8008148:	61bb      	str	r3, [r7, #24]
   return(result);
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1e5      	bne.n	800811c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2220      	movs	r2, #32
 8008154:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2220      	movs	r2, #32
 800815a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2220      	movs	r2, #32
 8008160:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2200      	movs	r2, #0
 8008168:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800816c:	2303      	movs	r3, #3
 800816e:	e010      	b.n	8008192 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	69da      	ldr	r2, [r3, #28]
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	4013      	ands	r3, r2
 800817a:	68ba      	ldr	r2, [r7, #8]
 800817c:	429a      	cmp	r2, r3
 800817e:	bf0c      	ite	eq
 8008180:	2301      	moveq	r3, #1
 8008182:	2300      	movne	r3, #0
 8008184:	b2db      	uxtb	r3, r3
 8008186:	461a      	mov	r2, r3
 8008188:	79fb      	ldrb	r3, [r7, #7]
 800818a:	429a      	cmp	r2, r3
 800818c:	f43f af4a 	beq.w	8008024 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3770      	adds	r7, #112	; 0x70
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800819a:	b480      	push	{r7}
 800819c:	b095      	sub	sp, #84	; 0x54
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081aa:	e853 3f00 	ldrex	r3, [r3]
 80081ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80081b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	461a      	mov	r2, r3
 80081be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081c0:	643b      	str	r3, [r7, #64]	; 0x40
 80081c2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80081c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081c8:	e841 2300 	strex	r3, r2, [r1]
 80081cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d1e6      	bne.n	80081a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	3308      	adds	r3, #8
 80081da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081dc:	6a3b      	ldr	r3, [r7, #32]
 80081de:	e853 3f00 	ldrex	r3, [r3]
 80081e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	f023 0301 	bic.w	r3, r3, #1
 80081ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	3308      	adds	r3, #8
 80081f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081fc:	e841 2300 	strex	r3, r2, [r1]
 8008200:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008204:	2b00      	cmp	r3, #0
 8008206:	d1e5      	bne.n	80081d4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800820c:	2b01      	cmp	r3, #1
 800820e:	d118      	bne.n	8008242 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	e853 3f00 	ldrex	r3, [r3]
 800821c:	60bb      	str	r3, [r7, #8]
   return(result);
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	f023 0310 	bic.w	r3, r3, #16
 8008224:	647b      	str	r3, [r7, #68]	; 0x44
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	461a      	mov	r2, r3
 800822c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800822e:	61bb      	str	r3, [r7, #24]
 8008230:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008232:	6979      	ldr	r1, [r7, #20]
 8008234:	69ba      	ldr	r2, [r7, #24]
 8008236:	e841 2300 	strex	r3, r2, [r1]
 800823a:	613b      	str	r3, [r7, #16]
   return(result);
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d1e6      	bne.n	8008210 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2220      	movs	r2, #32
 8008246:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008254:	bf00      	nop
 8008256:	3754      	adds	r7, #84	; 0x54
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800826c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2200      	movs	r2, #0
 8008272:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2200      	movs	r2, #0
 800827a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	f7ff fb0e 	bl	80078a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008284:	bf00      	nop
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b088      	sub	sp, #32
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	e853 3f00 	ldrex	r3, [r3]
 80082a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082a8:	61fb      	str	r3, [r7, #28]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	461a      	mov	r2, r3
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	61bb      	str	r3, [r7, #24]
 80082b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b6:	6979      	ldr	r1, [r7, #20]
 80082b8:	69ba      	ldr	r2, [r7, #24]
 80082ba:	e841 2300 	strex	r3, r2, [r1]
 80082be:	613b      	str	r3, [r7, #16]
   return(result);
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1e6      	bne.n	8008294 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2220      	movs	r2, #32
 80082ca:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f7ff fada 	bl	800788c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082d8:	bf00      	nop
 80082da:	3720      	adds	r7, #32
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <__NVIC_SetPriority>:
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	4603      	mov	r3, r0
 80082fc:	6039      	str	r1, [r7, #0]
 80082fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008304:	2b00      	cmp	r3, #0
 8008306:	db0a      	blt.n	800831e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	b2da      	uxtb	r2, r3
 800830c:	490c      	ldr	r1, [pc, #48]	; (8008340 <__NVIC_SetPriority+0x4c>)
 800830e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008312:	0112      	lsls	r2, r2, #4
 8008314:	b2d2      	uxtb	r2, r2
 8008316:	440b      	add	r3, r1
 8008318:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800831c:	e00a      	b.n	8008334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	b2da      	uxtb	r2, r3
 8008322:	4908      	ldr	r1, [pc, #32]	; (8008344 <__NVIC_SetPriority+0x50>)
 8008324:	79fb      	ldrb	r3, [r7, #7]
 8008326:	f003 030f 	and.w	r3, r3, #15
 800832a:	3b04      	subs	r3, #4
 800832c:	0112      	lsls	r2, r2, #4
 800832e:	b2d2      	uxtb	r2, r2
 8008330:	440b      	add	r3, r1
 8008332:	761a      	strb	r2, [r3, #24]
}
 8008334:	bf00      	nop
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr
 8008340:	e000e100 	.word	0xe000e100
 8008344:	e000ed00 	.word	0xe000ed00

08008348 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008348:	b580      	push	{r7, lr}
 800834a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800834c:	4b05      	ldr	r3, [pc, #20]	; (8008364 <SysTick_Handler+0x1c>)
 800834e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008350:	f002 f93e 	bl	800a5d0 <xTaskGetSchedulerState>
 8008354:	4603      	mov	r3, r0
 8008356:	2b01      	cmp	r3, #1
 8008358:	d001      	beq.n	800835e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800835a:	f003 f825 	bl	800b3a8 <xPortSysTickHandler>
  }
}
 800835e:	bf00      	nop
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	e000e010 	.word	0xe000e010

08008368 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008368:	b580      	push	{r7, lr}
 800836a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800836c:	2100      	movs	r1, #0
 800836e:	f06f 0004 	mvn.w	r0, #4
 8008372:	f7ff ffbf 	bl	80082f4 <__NVIC_SetPriority>
#endif
}
 8008376:	bf00      	nop
 8008378:	bd80      	pop	{r7, pc}
	...

0800837c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008382:	f3ef 8305 	mrs	r3, IPSR
 8008386:	603b      	str	r3, [r7, #0]
  return(result);
 8008388:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800838a:	2b00      	cmp	r3, #0
 800838c:	d003      	beq.n	8008396 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800838e:	f06f 0305 	mvn.w	r3, #5
 8008392:	607b      	str	r3, [r7, #4]
 8008394:	e00c      	b.n	80083b0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008396:	4b0a      	ldr	r3, [pc, #40]	; (80083c0 <osKernelInitialize+0x44>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d105      	bne.n	80083aa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800839e:	4b08      	ldr	r3, [pc, #32]	; (80083c0 <osKernelInitialize+0x44>)
 80083a0:	2201      	movs	r2, #1
 80083a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80083a4:	2300      	movs	r3, #0
 80083a6:	607b      	str	r3, [r7, #4]
 80083a8:	e002      	b.n	80083b0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80083aa:	f04f 33ff 	mov.w	r3, #4294967295
 80083ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80083b0:	687b      	ldr	r3, [r7, #4]
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	370c      	adds	r7, #12
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	2000059c 	.word	0x2000059c

080083c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083ca:	f3ef 8305 	mrs	r3, IPSR
 80083ce:	603b      	str	r3, [r7, #0]
  return(result);
 80083d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d003      	beq.n	80083de <osKernelStart+0x1a>
    stat = osErrorISR;
 80083d6:	f06f 0305 	mvn.w	r3, #5
 80083da:	607b      	str	r3, [r7, #4]
 80083dc:	e010      	b.n	8008400 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80083de:	4b0b      	ldr	r3, [pc, #44]	; (800840c <osKernelStart+0x48>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d109      	bne.n	80083fa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80083e6:	f7ff ffbf 	bl	8008368 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80083ea:	4b08      	ldr	r3, [pc, #32]	; (800840c <osKernelStart+0x48>)
 80083ec:	2202      	movs	r2, #2
 80083ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80083f0:	f001 fca6 	bl	8009d40 <vTaskStartScheduler>
      stat = osOK;
 80083f4:	2300      	movs	r3, #0
 80083f6:	607b      	str	r3, [r7, #4]
 80083f8:	e002      	b.n	8008400 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80083fa:	f04f 33ff 	mov.w	r3, #4294967295
 80083fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008400:	687b      	ldr	r3, [r7, #4]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3708      	adds	r7, #8
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	2000059c 	.word	0x2000059c

08008410 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008410:	b580      	push	{r7, lr}
 8008412:	b08e      	sub	sp, #56	; 0x38
 8008414:	af04      	add	r7, sp, #16
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800841c:	2300      	movs	r3, #0
 800841e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008420:	f3ef 8305 	mrs	r3, IPSR
 8008424:	617b      	str	r3, [r7, #20]
  return(result);
 8008426:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008428:	2b00      	cmp	r3, #0
 800842a:	d17e      	bne.n	800852a <osThreadNew+0x11a>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d07b      	beq.n	800852a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008432:	2380      	movs	r3, #128	; 0x80
 8008434:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008436:	2318      	movs	r3, #24
 8008438:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800843a:	2300      	movs	r3, #0
 800843c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800843e:	f04f 33ff 	mov.w	r3, #4294967295
 8008442:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d045      	beq.n	80084d6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d002      	beq.n	8008458 <osThreadNew+0x48>
        name = attr->name;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	699b      	ldr	r3, [r3, #24]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d002      	beq.n	8008466 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	699b      	ldr	r3, [r3, #24]
 8008464:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d008      	beq.n	800847e <osThreadNew+0x6e>
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	2b38      	cmp	r3, #56	; 0x38
 8008470:	d805      	bhi.n	800847e <osThreadNew+0x6e>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	f003 0301 	and.w	r3, r3, #1
 800847a:	2b00      	cmp	r3, #0
 800847c:	d001      	beq.n	8008482 <osThreadNew+0x72>
        return (NULL);
 800847e:	2300      	movs	r3, #0
 8008480:	e054      	b.n	800852c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	695b      	ldr	r3, [r3, #20]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d003      	beq.n	8008492 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	695b      	ldr	r3, [r3, #20]
 800848e:	089b      	lsrs	r3, r3, #2
 8008490:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00e      	beq.n	80084b8 <osThreadNew+0xa8>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	2b5b      	cmp	r3, #91	; 0x5b
 80084a0:	d90a      	bls.n	80084b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d006      	beq.n	80084b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	695b      	ldr	r3, [r3, #20]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d002      	beq.n	80084b8 <osThreadNew+0xa8>
        mem = 1;
 80084b2:	2301      	movs	r3, #1
 80084b4:	61bb      	str	r3, [r7, #24]
 80084b6:	e010      	b.n	80084da <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d10c      	bne.n	80084da <osThreadNew+0xca>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d108      	bne.n	80084da <osThreadNew+0xca>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d104      	bne.n	80084da <osThreadNew+0xca>
          mem = 0;
 80084d0:	2300      	movs	r3, #0
 80084d2:	61bb      	str	r3, [r7, #24]
 80084d4:	e001      	b.n	80084da <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80084d6:	2300      	movs	r3, #0
 80084d8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d110      	bne.n	8008502 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80084e8:	9202      	str	r2, [sp, #8]
 80084ea:	9301      	str	r3, [sp, #4]
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	6a3a      	ldr	r2, [r7, #32]
 80084f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f001 fa4c 	bl	8009994 <xTaskCreateStatic>
 80084fc:	4603      	mov	r3, r0
 80084fe:	613b      	str	r3, [r7, #16]
 8008500:	e013      	b.n	800852a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d110      	bne.n	800852a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008508:	6a3b      	ldr	r3, [r7, #32]
 800850a:	b29a      	uxth	r2, r3
 800850c:	f107 0310 	add.w	r3, r7, #16
 8008510:	9301      	str	r3, [sp, #4]
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	9300      	str	r3, [sp, #0]
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f001 fa97 	bl	8009a4e <xTaskCreate>
 8008520:	4603      	mov	r3, r0
 8008522:	2b01      	cmp	r3, #1
 8008524:	d001      	beq.n	800852a <osThreadNew+0x11a>
            hTask = NULL;
 8008526:	2300      	movs	r3, #0
 8008528:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800852a:	693b      	ldr	r3, [r7, #16]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3728      	adds	r7, #40	; 0x28
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800853c:	f3ef 8305 	mrs	r3, IPSR
 8008540:	60bb      	str	r3, [r7, #8]
  return(result);
 8008542:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008544:	2b00      	cmp	r3, #0
 8008546:	d003      	beq.n	8008550 <osDelay+0x1c>
    stat = osErrorISR;
 8008548:	f06f 0305 	mvn.w	r3, #5
 800854c:	60fb      	str	r3, [r7, #12]
 800854e:	e007      	b.n	8008560 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008550:	2300      	movs	r3, #0
 8008552:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d002      	beq.n	8008560 <osDelay+0x2c>
      vTaskDelay(ticks);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f001 fbbc 	bl	8009cd8 <vTaskDelay>
    }
  }

  return (stat);
 8008560:	68fb      	ldr	r3, [r7, #12]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800856a:	b580      	push	{r7, lr}
 800856c:	b08a      	sub	sp, #40	; 0x28
 800856e:	af02      	add	r7, sp, #8
 8008570:	60f8      	str	r0, [r7, #12]
 8008572:	60b9      	str	r1, [r7, #8]
 8008574:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008576:	2300      	movs	r3, #0
 8008578:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800857a:	f3ef 8305 	mrs	r3, IPSR
 800857e:	613b      	str	r3, [r7, #16]
  return(result);
 8008580:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008582:	2b00      	cmp	r3, #0
 8008584:	d175      	bne.n	8008672 <osSemaphoreNew+0x108>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d072      	beq.n	8008672 <osSemaphoreNew+0x108>
 800858c:	68ba      	ldr	r2, [r7, #8]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	429a      	cmp	r2, r3
 8008592:	d86e      	bhi.n	8008672 <osSemaphoreNew+0x108>
    mem = -1;
 8008594:	f04f 33ff 	mov.w	r3, #4294967295
 8008598:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d015      	beq.n	80085cc <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d006      	beq.n	80085b6 <osSemaphoreNew+0x4c>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	2b4f      	cmp	r3, #79	; 0x4f
 80085ae:	d902      	bls.n	80085b6 <osSemaphoreNew+0x4c>
        mem = 1;
 80085b0:	2301      	movs	r3, #1
 80085b2:	61bb      	str	r3, [r7, #24]
 80085b4:	e00c      	b.n	80085d0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d108      	bne.n	80085d0 <osSemaphoreNew+0x66>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d104      	bne.n	80085d0 <osSemaphoreNew+0x66>
          mem = 0;
 80085c6:	2300      	movs	r3, #0
 80085c8:	61bb      	str	r3, [r7, #24]
 80085ca:	e001      	b.n	80085d0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80085cc:	2300      	movs	r3, #0
 80085ce:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d6:	d04c      	beq.n	8008672 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d128      	bne.n	8008630 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d10a      	bne.n	80085fa <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	2203      	movs	r2, #3
 80085ea:	9200      	str	r2, [sp, #0]
 80085ec:	2200      	movs	r2, #0
 80085ee:	2100      	movs	r1, #0
 80085f0:	2001      	movs	r0, #1
 80085f2:	f000 fa29 	bl	8008a48 <xQueueGenericCreateStatic>
 80085f6:	61f8      	str	r0, [r7, #28]
 80085f8:	e005      	b.n	8008606 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80085fa:	2203      	movs	r2, #3
 80085fc:	2100      	movs	r1, #0
 80085fe:	2001      	movs	r0, #1
 8008600:	f000 fa9a 	bl	8008b38 <xQueueGenericCreate>
 8008604:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d022      	beq.n	8008652 <osSemaphoreNew+0xe8>
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d01f      	beq.n	8008652 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008612:	2300      	movs	r3, #0
 8008614:	2200      	movs	r2, #0
 8008616:	2100      	movs	r1, #0
 8008618:	69f8      	ldr	r0, [r7, #28]
 800861a:	f000 fb55 	bl	8008cc8 <xQueueGenericSend>
 800861e:	4603      	mov	r3, r0
 8008620:	2b01      	cmp	r3, #1
 8008622:	d016      	beq.n	8008652 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008624:	69f8      	ldr	r0, [r7, #28]
 8008626:	f000 ffe1 	bl	80095ec <vQueueDelete>
            hSemaphore = NULL;
 800862a:	2300      	movs	r3, #0
 800862c:	61fb      	str	r3, [r7, #28]
 800862e:	e010      	b.n	8008652 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	2b01      	cmp	r3, #1
 8008634:	d108      	bne.n	8008648 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	461a      	mov	r2, r3
 800863c:	68b9      	ldr	r1, [r7, #8]
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f000 fad7 	bl	8008bf2 <xQueueCreateCountingSemaphoreStatic>
 8008644:	61f8      	str	r0, [r7, #28]
 8008646:	e004      	b.n	8008652 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008648:	68b9      	ldr	r1, [r7, #8]
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f000 fb08 	bl	8008c60 <xQueueCreateCountingSemaphore>
 8008650:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00c      	beq.n	8008672 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d003      	beq.n	8008666 <osSemaphoreNew+0xfc>
          name = attr->name;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	617b      	str	r3, [r7, #20]
 8008664:	e001      	b.n	800866a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008666:	2300      	movs	r3, #0
 8008668:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800866a:	6979      	ldr	r1, [r7, #20]
 800866c:	69f8      	ldr	r0, [r7, #28]
 800866e:	f001 f909 	bl	8009884 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008672:	69fb      	ldr	r3, [r7, #28]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3720      	adds	r7, #32
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800867c:	b580      	push	{r7, lr}
 800867e:	b086      	sub	sp, #24
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800868a:	2300      	movs	r3, #0
 800868c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d103      	bne.n	800869c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008694:	f06f 0303 	mvn.w	r3, #3
 8008698:	617b      	str	r3, [r7, #20]
 800869a:	e039      	b.n	8008710 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800869c:	f3ef 8305 	mrs	r3, IPSR
 80086a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80086a2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d022      	beq.n	80086ee <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d003      	beq.n	80086b6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80086ae:	f06f 0303 	mvn.w	r3, #3
 80086b2:	617b      	str	r3, [r7, #20]
 80086b4:	e02c      	b.n	8008710 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80086b6:	2300      	movs	r3, #0
 80086b8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80086ba:	f107 0308 	add.w	r3, r7, #8
 80086be:	461a      	mov	r2, r3
 80086c0:	2100      	movs	r1, #0
 80086c2:	6938      	ldr	r0, [r7, #16]
 80086c4:	f000 ff12 	bl	80094ec <xQueueReceiveFromISR>
 80086c8:	4603      	mov	r3, r0
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d003      	beq.n	80086d6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80086ce:	f06f 0302 	mvn.w	r3, #2
 80086d2:	617b      	str	r3, [r7, #20]
 80086d4:	e01c      	b.n	8008710 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d019      	beq.n	8008710 <osSemaphoreAcquire+0x94>
 80086dc:	4b0f      	ldr	r3, [pc, #60]	; (800871c <osSemaphoreAcquire+0xa0>)
 80086de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086e2:	601a      	str	r2, [r3, #0]
 80086e4:	f3bf 8f4f 	dsb	sy
 80086e8:	f3bf 8f6f 	isb	sy
 80086ec:	e010      	b.n	8008710 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80086ee:	6839      	ldr	r1, [r7, #0]
 80086f0:	6938      	ldr	r0, [r7, #16]
 80086f2:	f000 fdef 	bl	80092d4 <xQueueSemaphoreTake>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d009      	beq.n	8008710 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d003      	beq.n	800870a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8008702:	f06f 0301 	mvn.w	r3, #1
 8008706:	617b      	str	r3, [r7, #20]
 8008708:	e002      	b.n	8008710 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800870a:	f06f 0302 	mvn.w	r3, #2
 800870e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008710:	697b      	ldr	r3, [r7, #20]
}
 8008712:	4618      	mov	r0, r3
 8008714:	3718      	adds	r7, #24
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	e000ed04 	.word	0xe000ed04

08008720 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008720:	b580      	push	{r7, lr}
 8008722:	b086      	sub	sp, #24
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800872c:	2300      	movs	r3, #0
 800872e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d103      	bne.n	800873e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008736:	f06f 0303 	mvn.w	r3, #3
 800873a:	617b      	str	r3, [r7, #20]
 800873c:	e02c      	b.n	8008798 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800873e:	f3ef 8305 	mrs	r3, IPSR
 8008742:	60fb      	str	r3, [r7, #12]
  return(result);
 8008744:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008746:	2b00      	cmp	r3, #0
 8008748:	d01a      	beq.n	8008780 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800874a:	2300      	movs	r3, #0
 800874c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800874e:	f107 0308 	add.w	r3, r7, #8
 8008752:	4619      	mov	r1, r3
 8008754:	6938      	ldr	r0, [r7, #16]
 8008756:	f000 fc50 	bl	8008ffa <xQueueGiveFromISR>
 800875a:	4603      	mov	r3, r0
 800875c:	2b01      	cmp	r3, #1
 800875e:	d003      	beq.n	8008768 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008760:	f06f 0302 	mvn.w	r3, #2
 8008764:	617b      	str	r3, [r7, #20]
 8008766:	e017      	b.n	8008798 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d014      	beq.n	8008798 <osSemaphoreRelease+0x78>
 800876e:	4b0d      	ldr	r3, [pc, #52]	; (80087a4 <osSemaphoreRelease+0x84>)
 8008770:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008774:	601a      	str	r2, [r3, #0]
 8008776:	f3bf 8f4f 	dsb	sy
 800877a:	f3bf 8f6f 	isb	sy
 800877e:	e00b      	b.n	8008798 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008780:	2300      	movs	r3, #0
 8008782:	2200      	movs	r2, #0
 8008784:	2100      	movs	r1, #0
 8008786:	6938      	ldr	r0, [r7, #16]
 8008788:	f000 fa9e 	bl	8008cc8 <xQueueGenericSend>
 800878c:	4603      	mov	r3, r0
 800878e:	2b01      	cmp	r3, #1
 8008790:	d002      	beq.n	8008798 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8008792:	f06f 0302 	mvn.w	r3, #2
 8008796:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008798:	697b      	ldr	r3, [r7, #20]
}
 800879a:	4618      	mov	r0, r3
 800879c:	3718      	adds	r7, #24
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	e000ed04 	.word	0xe000ed04

080087a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	4a07      	ldr	r2, [pc, #28]	; (80087d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80087b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	4a06      	ldr	r2, [pc, #24]	; (80087d8 <vApplicationGetIdleTaskMemory+0x30>)
 80087be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2280      	movs	r2, #128	; 0x80
 80087c4:	601a      	str	r2, [r3, #0]
}
 80087c6:	bf00      	nop
 80087c8:	3714      	adds	r7, #20
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	200005a0 	.word	0x200005a0
 80087d8:	200005fc 	.word	0x200005fc

080087dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	4a07      	ldr	r2, [pc, #28]	; (8008808 <vApplicationGetTimerTaskMemory+0x2c>)
 80087ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	4a06      	ldr	r2, [pc, #24]	; (800880c <vApplicationGetTimerTaskMemory+0x30>)
 80087f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80087fa:	601a      	str	r2, [r3, #0]
}
 80087fc:	bf00      	nop
 80087fe:	3714      	adds	r7, #20
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr
 8008808:	200007fc 	.word	0x200007fc
 800880c:	20000858 	.word	0x20000858

08008810 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f103 0208 	add.w	r2, r3, #8
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f04f 32ff 	mov.w	r2, #4294967295
 8008828:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f103 0208 	add.w	r2, r3, #8
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f103 0208 	add.w	r2, r3, #8
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008844:	bf00      	nop
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800885e:	bf00      	nop
 8008860:	370c      	adds	r7, #12
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr

0800886a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800886a:	b480      	push	{r7}
 800886c:	b085      	sub	sp, #20
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
 8008872:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	689a      	ldr	r2, [r3, #8]
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	683a      	ldr	r2, [r7, #0]
 800888e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	683a      	ldr	r2, [r7, #0]
 8008894:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	1c5a      	adds	r2, r3, #1
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	601a      	str	r2, [r3, #0]
}
 80088a6:	bf00      	nop
 80088a8:	3714      	adds	r7, #20
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr

080088b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80088b2:	b480      	push	{r7}
 80088b4:	b085      	sub	sp, #20
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
 80088ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088c8:	d103      	bne.n	80088d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	691b      	ldr	r3, [r3, #16]
 80088ce:	60fb      	str	r3, [r7, #12]
 80088d0:	e00c      	b.n	80088ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	3308      	adds	r3, #8
 80088d6:	60fb      	str	r3, [r7, #12]
 80088d8:	e002      	b.n	80088e0 <vListInsert+0x2e>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	60fb      	str	r3, [r7, #12]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	68ba      	ldr	r2, [r7, #8]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d2f6      	bcs.n	80088da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	685a      	ldr	r2, [r3, #4]
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	683a      	ldr	r2, [r7, #0]
 80088fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	683a      	ldr	r2, [r7, #0]
 8008906:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	1c5a      	adds	r2, r3, #1
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	601a      	str	r2, [r3, #0]
}
 8008918:	bf00      	nop
 800891a:	3714      	adds	r7, #20
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008924:	b480      	push	{r7}
 8008926:	b085      	sub	sp, #20
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	6892      	ldr	r2, [r2, #8]
 800893a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	6852      	ldr	r2, [r2, #4]
 8008944:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	429a      	cmp	r2, r3
 800894e:	d103      	bne.n	8008958 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	689a      	ldr	r2, [r3, #8]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	1e5a      	subs	r2, r3, #1
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
}
 800896c:	4618      	mov	r0, r3
 800896e:	3714      	adds	r7, #20
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d10a      	bne.n	80089a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800898c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008990:	f383 8811 	msr	BASEPRI, r3
 8008994:	f3bf 8f6f 	isb	sy
 8008998:	f3bf 8f4f 	dsb	sy
 800899c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800899e:	bf00      	nop
 80089a0:	e7fe      	b.n	80089a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80089a2:	f002 fc6f 	bl	800b284 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ae:	68f9      	ldr	r1, [r7, #12]
 80089b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80089b2:	fb01 f303 	mul.w	r3, r1, r3
 80089b6:	441a      	add	r2, r3
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2200      	movs	r2, #0
 80089c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d2:	3b01      	subs	r3, #1
 80089d4:	68f9      	ldr	r1, [r7, #12]
 80089d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80089d8:	fb01 f303 	mul.w	r3, r1, r3
 80089dc:	441a      	add	r2, r3
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	22ff      	movs	r2, #255	; 0xff
 80089e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	22ff      	movs	r2, #255	; 0xff
 80089ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d114      	bne.n	8008a22 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d01a      	beq.n	8008a36 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	3310      	adds	r3, #16
 8008a04:	4618      	mov	r0, r3
 8008a06:	f001 fc25 	bl	800a254 <xTaskRemoveFromEventList>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d012      	beq.n	8008a36 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008a10:	4b0c      	ldr	r3, [pc, #48]	; (8008a44 <xQueueGenericReset+0xcc>)
 8008a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a16:	601a      	str	r2, [r3, #0]
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	f3bf 8f6f 	isb	sy
 8008a20:	e009      	b.n	8008a36 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	3310      	adds	r3, #16
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7ff fef2 	bl	8008810 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	3324      	adds	r3, #36	; 0x24
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7ff feed 	bl	8008810 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008a36:	f002 fc55 	bl	800b2e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008a3a:	2301      	movs	r3, #1
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3710      	adds	r7, #16
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	e000ed04 	.word	0xe000ed04

08008a48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b08e      	sub	sp, #56	; 0x38
 8008a4c:	af02      	add	r7, sp, #8
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	607a      	str	r2, [r7, #4]
 8008a54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d10a      	bne.n	8008a72 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a60:	f383 8811 	msr	BASEPRI, r3
 8008a64:	f3bf 8f6f 	isb	sy
 8008a68:	f3bf 8f4f 	dsb	sy
 8008a6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008a6e:	bf00      	nop
 8008a70:	e7fe      	b.n	8008a70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d10a      	bne.n	8008a8e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7c:	f383 8811 	msr	BASEPRI, r3
 8008a80:	f3bf 8f6f 	isb	sy
 8008a84:	f3bf 8f4f 	dsb	sy
 8008a88:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008a8a:	bf00      	nop
 8008a8c:	e7fe      	b.n	8008a8c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d002      	beq.n	8008a9a <xQueueGenericCreateStatic+0x52>
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d001      	beq.n	8008a9e <xQueueGenericCreateStatic+0x56>
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e000      	b.n	8008aa0 <xQueueGenericCreateStatic+0x58>
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d10a      	bne.n	8008aba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa8:	f383 8811 	msr	BASEPRI, r3
 8008aac:	f3bf 8f6f 	isb	sy
 8008ab0:	f3bf 8f4f 	dsb	sy
 8008ab4:	623b      	str	r3, [r7, #32]
}
 8008ab6:	bf00      	nop
 8008ab8:	e7fe      	b.n	8008ab8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d102      	bne.n	8008ac6 <xQueueGenericCreateStatic+0x7e>
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d101      	bne.n	8008aca <xQueueGenericCreateStatic+0x82>
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e000      	b.n	8008acc <xQueueGenericCreateStatic+0x84>
 8008aca:	2300      	movs	r3, #0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d10a      	bne.n	8008ae6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad4:	f383 8811 	msr	BASEPRI, r3
 8008ad8:	f3bf 8f6f 	isb	sy
 8008adc:	f3bf 8f4f 	dsb	sy
 8008ae0:	61fb      	str	r3, [r7, #28]
}
 8008ae2:	bf00      	nop
 8008ae4:	e7fe      	b.n	8008ae4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008ae6:	2350      	movs	r3, #80	; 0x50
 8008ae8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	2b50      	cmp	r3, #80	; 0x50
 8008aee:	d00a      	beq.n	8008b06 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af4:	f383 8811 	msr	BASEPRI, r3
 8008af8:	f3bf 8f6f 	isb	sy
 8008afc:	f3bf 8f4f 	dsb	sy
 8008b00:	61bb      	str	r3, [r7, #24]
}
 8008b02:	bf00      	nop
 8008b04:	e7fe      	b.n	8008b04 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008b06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d00d      	beq.n	8008b2e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b14:	2201      	movs	r2, #1
 8008b16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008b1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b20:	9300      	str	r3, [sp, #0]
 8008b22:	4613      	mov	r3, r2
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	68b9      	ldr	r1, [r7, #8]
 8008b28:	68f8      	ldr	r0, [r7, #12]
 8008b2a:	f000 f83f 	bl	8008bac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3730      	adds	r7, #48	; 0x30
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b08a      	sub	sp, #40	; 0x28
 8008b3c:	af02      	add	r7, sp, #8
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	4613      	mov	r3, r2
 8008b44:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d10a      	bne.n	8008b62 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b50:	f383 8811 	msr	BASEPRI, r3
 8008b54:	f3bf 8f6f 	isb	sy
 8008b58:	f3bf 8f4f 	dsb	sy
 8008b5c:	613b      	str	r3, [r7, #16]
}
 8008b5e:	bf00      	nop
 8008b60:	e7fe      	b.n	8008b60 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	68ba      	ldr	r2, [r7, #8]
 8008b66:	fb02 f303 	mul.w	r3, r2, r3
 8008b6a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	3350      	adds	r3, #80	; 0x50
 8008b70:	4618      	mov	r0, r3
 8008b72:	f002 fca9 	bl	800b4c8 <pvPortMalloc>
 8008b76:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d011      	beq.n	8008ba2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	3350      	adds	r3, #80	; 0x50
 8008b86:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008b88:	69bb      	ldr	r3, [r7, #24]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008b90:	79fa      	ldrb	r2, [r7, #7]
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	9300      	str	r3, [sp, #0]
 8008b96:	4613      	mov	r3, r2
 8008b98:	697a      	ldr	r2, [r7, #20]
 8008b9a:	68b9      	ldr	r1, [r7, #8]
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f000 f805 	bl	8008bac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008ba2:	69bb      	ldr	r3, [r7, #24]
	}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3720      	adds	r7, #32
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
 8008bb8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d103      	bne.n	8008bc8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	69ba      	ldr	r2, [r7, #24]
 8008bc4:	601a      	str	r2, [r3, #0]
 8008bc6:	e002      	b.n	8008bce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	68ba      	ldr	r2, [r7, #8]
 8008bd8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008bda:	2101      	movs	r1, #1
 8008bdc:	69b8      	ldr	r0, [r7, #24]
 8008bde:	f7ff fecb 	bl	8008978 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	78fa      	ldrb	r2, [r7, #3]
 8008be6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008bea:	bf00      	nop
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b08a      	sub	sp, #40	; 0x28
 8008bf6:	af02      	add	r7, sp, #8
 8008bf8:	60f8      	str	r0, [r7, #12]
 8008bfa:	60b9      	str	r1, [r7, #8]
 8008bfc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d10a      	bne.n	8008c1a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c08:	f383 8811 	msr	BASEPRI, r3
 8008c0c:	f3bf 8f6f 	isb	sy
 8008c10:	f3bf 8f4f 	dsb	sy
 8008c14:	61bb      	str	r3, [r7, #24]
}
 8008c16:	bf00      	nop
 8008c18:	e7fe      	b.n	8008c18 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008c1a:	68ba      	ldr	r2, [r7, #8]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d90a      	bls.n	8008c38 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c26:	f383 8811 	msr	BASEPRI, r3
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	f3bf 8f4f 	dsb	sy
 8008c32:	617b      	str	r3, [r7, #20]
}
 8008c34:	bf00      	nop
 8008c36:	e7fe      	b.n	8008c36 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008c38:	2302      	movs	r3, #2
 8008c3a:	9300      	str	r3, [sp, #0]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	2100      	movs	r1, #0
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f7ff ff00 	bl	8008a48 <xQueueGenericCreateStatic>
 8008c48:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d002      	beq.n	8008c56 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	68ba      	ldr	r2, [r7, #8]
 8008c54:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008c56:	69fb      	ldr	r3, [r7, #28]
	}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3720      	adds	r7, #32
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b086      	sub	sp, #24
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d10a      	bne.n	8008c86 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	613b      	str	r3, [r7, #16]
}
 8008c82:	bf00      	nop
 8008c84:	e7fe      	b.n	8008c84 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008c86:	683a      	ldr	r2, [r7, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d90a      	bls.n	8008ca4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c92:	f383 8811 	msr	BASEPRI, r3
 8008c96:	f3bf 8f6f 	isb	sy
 8008c9a:	f3bf 8f4f 	dsb	sy
 8008c9e:	60fb      	str	r3, [r7, #12]
}
 8008ca0:	bf00      	nop
 8008ca2:	e7fe      	b.n	8008ca2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008ca4:	2202      	movs	r2, #2
 8008ca6:	2100      	movs	r1, #0
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f7ff ff45 	bl	8008b38 <xQueueGenericCreate>
 8008cae:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d002      	beq.n	8008cbc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	683a      	ldr	r2, [r7, #0]
 8008cba:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008cbc:	697b      	ldr	r3, [r7, #20]
	}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3718      	adds	r7, #24
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
	...

08008cc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b08e      	sub	sp, #56	; 0x38
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	607a      	str	r2, [r7, #4]
 8008cd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d10a      	bne.n	8008cfa <xQueueGenericSend+0x32>
	__asm volatile
 8008ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce8:	f383 8811 	msr	BASEPRI, r3
 8008cec:	f3bf 8f6f 	isb	sy
 8008cf0:	f3bf 8f4f 	dsb	sy
 8008cf4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008cf6:	bf00      	nop
 8008cf8:	e7fe      	b.n	8008cf8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d103      	bne.n	8008d08 <xQueueGenericSend+0x40>
 8008d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d101      	bne.n	8008d0c <xQueueGenericSend+0x44>
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e000      	b.n	8008d0e <xQueueGenericSend+0x46>
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d10a      	bne.n	8008d28 <xQueueGenericSend+0x60>
	__asm volatile
 8008d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d16:	f383 8811 	msr	BASEPRI, r3
 8008d1a:	f3bf 8f6f 	isb	sy
 8008d1e:	f3bf 8f4f 	dsb	sy
 8008d22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008d24:	bf00      	nop
 8008d26:	e7fe      	b.n	8008d26 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	2b02      	cmp	r3, #2
 8008d2c:	d103      	bne.n	8008d36 <xQueueGenericSend+0x6e>
 8008d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d101      	bne.n	8008d3a <xQueueGenericSend+0x72>
 8008d36:	2301      	movs	r3, #1
 8008d38:	e000      	b.n	8008d3c <xQueueGenericSend+0x74>
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d10a      	bne.n	8008d56 <xQueueGenericSend+0x8e>
	__asm volatile
 8008d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	623b      	str	r3, [r7, #32]
}
 8008d52:	bf00      	nop
 8008d54:	e7fe      	b.n	8008d54 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d56:	f001 fc3b 	bl	800a5d0 <xTaskGetSchedulerState>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d102      	bne.n	8008d66 <xQueueGenericSend+0x9e>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d101      	bne.n	8008d6a <xQueueGenericSend+0xa2>
 8008d66:	2301      	movs	r3, #1
 8008d68:	e000      	b.n	8008d6c <xQueueGenericSend+0xa4>
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d10a      	bne.n	8008d86 <xQueueGenericSend+0xbe>
	__asm volatile
 8008d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d74:	f383 8811 	msr	BASEPRI, r3
 8008d78:	f3bf 8f6f 	isb	sy
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	61fb      	str	r3, [r7, #28]
}
 8008d82:	bf00      	nop
 8008d84:	e7fe      	b.n	8008d84 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d86:	f002 fa7d 	bl	800b284 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d302      	bcc.n	8008d9c <xQueueGenericSend+0xd4>
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d129      	bne.n	8008df0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d9c:	683a      	ldr	r2, [r7, #0]
 8008d9e:	68b9      	ldr	r1, [r7, #8]
 8008da0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008da2:	f000 fc5e 	bl	8009662 <prvCopyDataToQueue>
 8008da6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d010      	beq.n	8008dd2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db2:	3324      	adds	r3, #36	; 0x24
 8008db4:	4618      	mov	r0, r3
 8008db6:	f001 fa4d 	bl	800a254 <xTaskRemoveFromEventList>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d013      	beq.n	8008de8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008dc0:	4b3f      	ldr	r3, [pc, #252]	; (8008ec0 <xQueueGenericSend+0x1f8>)
 8008dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dc6:	601a      	str	r2, [r3, #0]
 8008dc8:	f3bf 8f4f 	dsb	sy
 8008dcc:	f3bf 8f6f 	isb	sy
 8008dd0:	e00a      	b.n	8008de8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d007      	beq.n	8008de8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008dd8:	4b39      	ldr	r3, [pc, #228]	; (8008ec0 <xQueueGenericSend+0x1f8>)
 8008dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dde:	601a      	str	r2, [r3, #0]
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008de8:	f002 fa7c 	bl	800b2e4 <vPortExitCritical>
				return pdPASS;
 8008dec:	2301      	movs	r3, #1
 8008dee:	e063      	b.n	8008eb8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d103      	bne.n	8008dfe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008df6:	f002 fa75 	bl	800b2e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	e05c      	b.n	8008eb8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d106      	bne.n	8008e12 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e04:	f107 0314 	add.w	r3, r7, #20
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f001 fa87 	bl	800a31c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e12:	f002 fa67 	bl	800b2e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e16:	f000 fff9 	bl	8009e0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e1a:	f002 fa33 	bl	800b284 <vPortEnterCritical>
 8008e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e24:	b25b      	sxtb	r3, r3
 8008e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e2a:	d103      	bne.n	8008e34 <xQueueGenericSend+0x16c>
 8008e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e3a:	b25b      	sxtb	r3, r3
 8008e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e40:	d103      	bne.n	8008e4a <xQueueGenericSend+0x182>
 8008e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e44:	2200      	movs	r2, #0
 8008e46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e4a:	f002 fa4b 	bl	800b2e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e4e:	1d3a      	adds	r2, r7, #4
 8008e50:	f107 0314 	add.w	r3, r7, #20
 8008e54:	4611      	mov	r1, r2
 8008e56:	4618      	mov	r0, r3
 8008e58:	f001 fa76 	bl	800a348 <xTaskCheckForTimeOut>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d124      	bne.n	8008eac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008e62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e64:	f000 fcf5 	bl	8009852 <prvIsQueueFull>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d018      	beq.n	8008ea0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e70:	3310      	adds	r3, #16
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	4611      	mov	r1, r2
 8008e76:	4618      	mov	r0, r3
 8008e78:	f001 f99c 	bl	800a1b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008e7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e7e:	f000 fc80 	bl	8009782 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008e82:	f000 ffd1 	bl	8009e28 <xTaskResumeAll>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	f47f af7c 	bne.w	8008d86 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008e8e:	4b0c      	ldr	r3, [pc, #48]	; (8008ec0 <xQueueGenericSend+0x1f8>)
 8008e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e94:	601a      	str	r2, [r3, #0]
 8008e96:	f3bf 8f4f 	dsb	sy
 8008e9a:	f3bf 8f6f 	isb	sy
 8008e9e:	e772      	b.n	8008d86 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008ea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ea2:	f000 fc6e 	bl	8009782 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ea6:	f000 ffbf 	bl	8009e28 <xTaskResumeAll>
 8008eaa:	e76c      	b.n	8008d86 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008eac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008eae:	f000 fc68 	bl	8009782 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008eb2:	f000 ffb9 	bl	8009e28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008eb6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3738      	adds	r7, #56	; 0x38
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	e000ed04 	.word	0xe000ed04

08008ec4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b090      	sub	sp, #64	; 0x40
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	607a      	str	r2, [r7, #4]
 8008ed0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d10a      	bne.n	8008ef2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee0:	f383 8811 	msr	BASEPRI, r3
 8008ee4:	f3bf 8f6f 	isb	sy
 8008ee8:	f3bf 8f4f 	dsb	sy
 8008eec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008eee:	bf00      	nop
 8008ef0:	e7fe      	b.n	8008ef0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d103      	bne.n	8008f00 <xQueueGenericSendFromISR+0x3c>
 8008ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d101      	bne.n	8008f04 <xQueueGenericSendFromISR+0x40>
 8008f00:	2301      	movs	r3, #1
 8008f02:	e000      	b.n	8008f06 <xQueueGenericSendFromISR+0x42>
 8008f04:	2300      	movs	r3, #0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d10a      	bne.n	8008f20 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0e:	f383 8811 	msr	BASEPRI, r3
 8008f12:	f3bf 8f6f 	isb	sy
 8008f16:	f3bf 8f4f 	dsb	sy
 8008f1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008f1c:	bf00      	nop
 8008f1e:	e7fe      	b.n	8008f1e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	d103      	bne.n	8008f2e <xQueueGenericSendFromISR+0x6a>
 8008f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d101      	bne.n	8008f32 <xQueueGenericSendFromISR+0x6e>
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e000      	b.n	8008f34 <xQueueGenericSendFromISR+0x70>
 8008f32:	2300      	movs	r3, #0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d10a      	bne.n	8008f4e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f3c:	f383 8811 	msr	BASEPRI, r3
 8008f40:	f3bf 8f6f 	isb	sy
 8008f44:	f3bf 8f4f 	dsb	sy
 8008f48:	623b      	str	r3, [r7, #32]
}
 8008f4a:	bf00      	nop
 8008f4c:	e7fe      	b.n	8008f4c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f4e:	f002 fa7b 	bl	800b448 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008f52:	f3ef 8211 	mrs	r2, BASEPRI
 8008f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5a:	f383 8811 	msr	BASEPRI, r3
 8008f5e:	f3bf 8f6f 	isb	sy
 8008f62:	f3bf 8f4f 	dsb	sy
 8008f66:	61fa      	str	r2, [r7, #28]
 8008f68:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008f6a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f6c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d302      	bcc.n	8008f80 <xQueueGenericSendFromISR+0xbc>
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	2b02      	cmp	r3, #2
 8008f7e:	d12f      	bne.n	8008fe0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f90:	683a      	ldr	r2, [r7, #0]
 8008f92:	68b9      	ldr	r1, [r7, #8]
 8008f94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008f96:	f000 fb64 	bl	8009662 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008f9a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fa2:	d112      	bne.n	8008fca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d016      	beq.n	8008fda <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fae:	3324      	adds	r3, #36	; 0x24
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f001 f94f 	bl	800a254 <xTaskRemoveFromEventList>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d00e      	beq.n	8008fda <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00b      	beq.n	8008fda <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	601a      	str	r2, [r3, #0]
 8008fc8:	e007      	b.n	8008fda <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008fca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008fce:	3301      	adds	r3, #1
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	b25a      	sxtb	r2, r3
 8008fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008fde:	e001      	b.n	8008fe4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fe6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008fee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3740      	adds	r7, #64	; 0x40
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b08e      	sub	sp, #56	; 0x38
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
 8009002:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900a:	2b00      	cmp	r3, #0
 800900c:	d10a      	bne.n	8009024 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800900e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009012:	f383 8811 	msr	BASEPRI, r3
 8009016:	f3bf 8f6f 	isb	sy
 800901a:	f3bf 8f4f 	dsb	sy
 800901e:	623b      	str	r3, [r7, #32]
}
 8009020:	bf00      	nop
 8009022:	e7fe      	b.n	8009022 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009028:	2b00      	cmp	r3, #0
 800902a:	d00a      	beq.n	8009042 <xQueueGiveFromISR+0x48>
	__asm volatile
 800902c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009030:	f383 8811 	msr	BASEPRI, r3
 8009034:	f3bf 8f6f 	isb	sy
 8009038:	f3bf 8f4f 	dsb	sy
 800903c:	61fb      	str	r3, [r7, #28]
}
 800903e:	bf00      	nop
 8009040:	e7fe      	b.n	8009040 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d103      	bne.n	8009052 <xQueueGiveFromISR+0x58>
 800904a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d101      	bne.n	8009056 <xQueueGiveFromISR+0x5c>
 8009052:	2301      	movs	r3, #1
 8009054:	e000      	b.n	8009058 <xQueueGiveFromISR+0x5e>
 8009056:	2300      	movs	r3, #0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d10a      	bne.n	8009072 <xQueueGiveFromISR+0x78>
	__asm volatile
 800905c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009060:	f383 8811 	msr	BASEPRI, r3
 8009064:	f3bf 8f6f 	isb	sy
 8009068:	f3bf 8f4f 	dsb	sy
 800906c:	61bb      	str	r3, [r7, #24]
}
 800906e:	bf00      	nop
 8009070:	e7fe      	b.n	8009070 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009072:	f002 f9e9 	bl	800b448 <vPortValidateInterruptPriority>
	__asm volatile
 8009076:	f3ef 8211 	mrs	r2, BASEPRI
 800907a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907e:	f383 8811 	msr	BASEPRI, r3
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	617a      	str	r2, [r7, #20]
 800908c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800908e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009090:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009096:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800909c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800909e:	429a      	cmp	r2, r3
 80090a0:	d22b      	bcs.n	80090fa <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80090a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80090ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ae:	1c5a      	adds	r2, r3, #1
 80090b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80090b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80090b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090bc:	d112      	bne.n	80090e4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d016      	beq.n	80090f4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c8:	3324      	adds	r3, #36	; 0x24
 80090ca:	4618      	mov	r0, r3
 80090cc:	f001 f8c2 	bl	800a254 <xTaskRemoveFromEventList>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00e      	beq.n	80090f4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d00b      	beq.n	80090f4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	2201      	movs	r2, #1
 80090e0:	601a      	str	r2, [r3, #0]
 80090e2:	e007      	b.n	80090f4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80090e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090e8:	3301      	adds	r3, #1
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	b25a      	sxtb	r2, r3
 80090ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80090f4:	2301      	movs	r3, #1
 80090f6:	637b      	str	r3, [r7, #52]	; 0x34
 80090f8:	e001      	b.n	80090fe <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80090fa:	2300      	movs	r3, #0
 80090fc:	637b      	str	r3, [r7, #52]	; 0x34
 80090fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009100:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f383 8811 	msr	BASEPRI, r3
}
 8009108:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800910a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800910c:	4618      	mov	r0, r3
 800910e:	3738      	adds	r7, #56	; 0x38
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b08c      	sub	sp, #48	; 0x30
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009120:	2300      	movs	r3, #0
 8009122:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912a:	2b00      	cmp	r3, #0
 800912c:	d10a      	bne.n	8009144 <xQueueReceive+0x30>
	__asm volatile
 800912e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009132:	f383 8811 	msr	BASEPRI, r3
 8009136:	f3bf 8f6f 	isb	sy
 800913a:	f3bf 8f4f 	dsb	sy
 800913e:	623b      	str	r3, [r7, #32]
}
 8009140:	bf00      	nop
 8009142:	e7fe      	b.n	8009142 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d103      	bne.n	8009152 <xQueueReceive+0x3e>
 800914a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914e:	2b00      	cmp	r3, #0
 8009150:	d101      	bne.n	8009156 <xQueueReceive+0x42>
 8009152:	2301      	movs	r3, #1
 8009154:	e000      	b.n	8009158 <xQueueReceive+0x44>
 8009156:	2300      	movs	r3, #0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d10a      	bne.n	8009172 <xQueueReceive+0x5e>
	__asm volatile
 800915c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009160:	f383 8811 	msr	BASEPRI, r3
 8009164:	f3bf 8f6f 	isb	sy
 8009168:	f3bf 8f4f 	dsb	sy
 800916c:	61fb      	str	r3, [r7, #28]
}
 800916e:	bf00      	nop
 8009170:	e7fe      	b.n	8009170 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009172:	f001 fa2d 	bl	800a5d0 <xTaskGetSchedulerState>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d102      	bne.n	8009182 <xQueueReceive+0x6e>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d101      	bne.n	8009186 <xQueueReceive+0x72>
 8009182:	2301      	movs	r3, #1
 8009184:	e000      	b.n	8009188 <xQueueReceive+0x74>
 8009186:	2300      	movs	r3, #0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d10a      	bne.n	80091a2 <xQueueReceive+0x8e>
	__asm volatile
 800918c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009190:	f383 8811 	msr	BASEPRI, r3
 8009194:	f3bf 8f6f 	isb	sy
 8009198:	f3bf 8f4f 	dsb	sy
 800919c:	61bb      	str	r3, [r7, #24]
}
 800919e:	bf00      	nop
 80091a0:	e7fe      	b.n	80091a0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80091a2:	f002 f86f 	bl	800b284 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091aa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80091ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d01f      	beq.n	80091f2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80091b2:	68b9      	ldr	r1, [r7, #8]
 80091b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091b6:	f000 fabe 	bl	8009736 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80091ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091bc:	1e5a      	subs	r2, r3, #1
 80091be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c4:	691b      	ldr	r3, [r3, #16]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00f      	beq.n	80091ea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091cc:	3310      	adds	r3, #16
 80091ce:	4618      	mov	r0, r3
 80091d0:	f001 f840 	bl	800a254 <xTaskRemoveFromEventList>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d007      	beq.n	80091ea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80091da:	4b3d      	ldr	r3, [pc, #244]	; (80092d0 <xQueueReceive+0x1bc>)
 80091dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091e0:	601a      	str	r2, [r3, #0]
 80091e2:	f3bf 8f4f 	dsb	sy
 80091e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80091ea:	f002 f87b 	bl	800b2e4 <vPortExitCritical>
				return pdPASS;
 80091ee:	2301      	movs	r3, #1
 80091f0:	e069      	b.n	80092c6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d103      	bne.n	8009200 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80091f8:	f002 f874 	bl	800b2e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80091fc:	2300      	movs	r3, #0
 80091fe:	e062      	b.n	80092c6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009202:	2b00      	cmp	r3, #0
 8009204:	d106      	bne.n	8009214 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009206:	f107 0310 	add.w	r3, r7, #16
 800920a:	4618      	mov	r0, r3
 800920c:	f001 f886 	bl	800a31c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009210:	2301      	movs	r3, #1
 8009212:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009214:	f002 f866 	bl	800b2e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009218:	f000 fdf8 	bl	8009e0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800921c:	f002 f832 	bl	800b284 <vPortEnterCritical>
 8009220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009222:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009226:	b25b      	sxtb	r3, r3
 8009228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800922c:	d103      	bne.n	8009236 <xQueueReceive+0x122>
 800922e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009230:	2200      	movs	r2, #0
 8009232:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009238:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800923c:	b25b      	sxtb	r3, r3
 800923e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009242:	d103      	bne.n	800924c <xQueueReceive+0x138>
 8009244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009246:	2200      	movs	r2, #0
 8009248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800924c:	f002 f84a 	bl	800b2e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009250:	1d3a      	adds	r2, r7, #4
 8009252:	f107 0310 	add.w	r3, r7, #16
 8009256:	4611      	mov	r1, r2
 8009258:	4618      	mov	r0, r3
 800925a:	f001 f875 	bl	800a348 <xTaskCheckForTimeOut>
 800925e:	4603      	mov	r3, r0
 8009260:	2b00      	cmp	r3, #0
 8009262:	d123      	bne.n	80092ac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009264:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009266:	f000 fade 	bl	8009826 <prvIsQueueEmpty>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d017      	beq.n	80092a0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009272:	3324      	adds	r3, #36	; 0x24
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	4611      	mov	r1, r2
 8009278:	4618      	mov	r0, r3
 800927a:	f000 ff9b 	bl	800a1b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800927e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009280:	f000 fa7f 	bl	8009782 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009284:	f000 fdd0 	bl	8009e28 <xTaskResumeAll>
 8009288:	4603      	mov	r3, r0
 800928a:	2b00      	cmp	r3, #0
 800928c:	d189      	bne.n	80091a2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800928e:	4b10      	ldr	r3, [pc, #64]	; (80092d0 <xQueueReceive+0x1bc>)
 8009290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009294:	601a      	str	r2, [r3, #0]
 8009296:	f3bf 8f4f 	dsb	sy
 800929a:	f3bf 8f6f 	isb	sy
 800929e:	e780      	b.n	80091a2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80092a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092a2:	f000 fa6e 	bl	8009782 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80092a6:	f000 fdbf 	bl	8009e28 <xTaskResumeAll>
 80092aa:	e77a      	b.n	80091a2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80092ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092ae:	f000 fa68 	bl	8009782 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80092b2:	f000 fdb9 	bl	8009e28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80092b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092b8:	f000 fab5 	bl	8009826 <prvIsQueueEmpty>
 80092bc:	4603      	mov	r3, r0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	f43f af6f 	beq.w	80091a2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80092c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3730      	adds	r7, #48	; 0x30
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	e000ed04 	.word	0xe000ed04

080092d4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b08e      	sub	sp, #56	; 0x38
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80092de:	2300      	movs	r3, #0
 80092e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80092e6:	2300      	movs	r3, #0
 80092e8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80092ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d10a      	bne.n	8009306 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80092f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f4:	f383 8811 	msr	BASEPRI, r3
 80092f8:	f3bf 8f6f 	isb	sy
 80092fc:	f3bf 8f4f 	dsb	sy
 8009300:	623b      	str	r3, [r7, #32]
}
 8009302:	bf00      	nop
 8009304:	e7fe      	b.n	8009304 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800930a:	2b00      	cmp	r3, #0
 800930c:	d00a      	beq.n	8009324 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800930e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009312:	f383 8811 	msr	BASEPRI, r3
 8009316:	f3bf 8f6f 	isb	sy
 800931a:	f3bf 8f4f 	dsb	sy
 800931e:	61fb      	str	r3, [r7, #28]
}
 8009320:	bf00      	nop
 8009322:	e7fe      	b.n	8009322 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009324:	f001 f954 	bl	800a5d0 <xTaskGetSchedulerState>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d102      	bne.n	8009334 <xQueueSemaphoreTake+0x60>
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d101      	bne.n	8009338 <xQueueSemaphoreTake+0x64>
 8009334:	2301      	movs	r3, #1
 8009336:	e000      	b.n	800933a <xQueueSemaphoreTake+0x66>
 8009338:	2300      	movs	r3, #0
 800933a:	2b00      	cmp	r3, #0
 800933c:	d10a      	bne.n	8009354 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800933e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009342:	f383 8811 	msr	BASEPRI, r3
 8009346:	f3bf 8f6f 	isb	sy
 800934a:	f3bf 8f4f 	dsb	sy
 800934e:	61bb      	str	r3, [r7, #24]
}
 8009350:	bf00      	nop
 8009352:	e7fe      	b.n	8009352 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009354:	f001 ff96 	bl	800b284 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800935a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800935c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800935e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009360:	2b00      	cmp	r3, #0
 8009362:	d024      	beq.n	80093ae <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009366:	1e5a      	subs	r2, r3, #1
 8009368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800936c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d104      	bne.n	800937e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009374:	f001 faa2 	bl	800a8bc <pvTaskIncrementMutexHeldCount>
 8009378:	4602      	mov	r2, r0
 800937a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800937c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800937e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00f      	beq.n	80093a6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009388:	3310      	adds	r3, #16
 800938a:	4618      	mov	r0, r3
 800938c:	f000 ff62 	bl	800a254 <xTaskRemoveFromEventList>
 8009390:	4603      	mov	r3, r0
 8009392:	2b00      	cmp	r3, #0
 8009394:	d007      	beq.n	80093a6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009396:	4b54      	ldr	r3, [pc, #336]	; (80094e8 <xQueueSemaphoreTake+0x214>)
 8009398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800939c:	601a      	str	r2, [r3, #0]
 800939e:	f3bf 8f4f 	dsb	sy
 80093a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80093a6:	f001 ff9d 	bl	800b2e4 <vPortExitCritical>
				return pdPASS;
 80093aa:	2301      	movs	r3, #1
 80093ac:	e097      	b.n	80094de <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d111      	bne.n	80093d8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80093b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00a      	beq.n	80093d0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80093ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	617b      	str	r3, [r7, #20]
}
 80093cc:	bf00      	nop
 80093ce:	e7fe      	b.n	80093ce <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80093d0:	f001 ff88 	bl	800b2e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80093d4:	2300      	movs	r3, #0
 80093d6:	e082      	b.n	80094de <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80093d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d106      	bne.n	80093ec <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80093de:	f107 030c 	add.w	r3, r7, #12
 80093e2:	4618      	mov	r0, r3
 80093e4:	f000 ff9a 	bl	800a31c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80093e8:	2301      	movs	r3, #1
 80093ea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80093ec:	f001 ff7a 	bl	800b2e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80093f0:	f000 fd0c 	bl	8009e0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093f4:	f001 ff46 	bl	800b284 <vPortEnterCritical>
 80093f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093fe:	b25b      	sxtb	r3, r3
 8009400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009404:	d103      	bne.n	800940e <xQueueSemaphoreTake+0x13a>
 8009406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009408:	2200      	movs	r2, #0
 800940a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800940e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009410:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009414:	b25b      	sxtb	r3, r3
 8009416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800941a:	d103      	bne.n	8009424 <xQueueSemaphoreTake+0x150>
 800941c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800941e:	2200      	movs	r2, #0
 8009420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009424:	f001 ff5e 	bl	800b2e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009428:	463a      	mov	r2, r7
 800942a:	f107 030c 	add.w	r3, r7, #12
 800942e:	4611      	mov	r1, r2
 8009430:	4618      	mov	r0, r3
 8009432:	f000 ff89 	bl	800a348 <xTaskCheckForTimeOut>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d132      	bne.n	80094a2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800943c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800943e:	f000 f9f2 	bl	8009826 <prvIsQueueEmpty>
 8009442:	4603      	mov	r3, r0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d026      	beq.n	8009496 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d109      	bne.n	8009464 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009450:	f001 ff18 	bl	800b284 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	4618      	mov	r0, r3
 800945a:	f001 f8d7 	bl	800a60c <xTaskPriorityInherit>
 800945e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009460:	f001 ff40 	bl	800b2e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009466:	3324      	adds	r3, #36	; 0x24
 8009468:	683a      	ldr	r2, [r7, #0]
 800946a:	4611      	mov	r1, r2
 800946c:	4618      	mov	r0, r3
 800946e:	f000 fea1 	bl	800a1b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009472:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009474:	f000 f985 	bl	8009782 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009478:	f000 fcd6 	bl	8009e28 <xTaskResumeAll>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	f47f af68 	bne.w	8009354 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009484:	4b18      	ldr	r3, [pc, #96]	; (80094e8 <xQueueSemaphoreTake+0x214>)
 8009486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800948a:	601a      	str	r2, [r3, #0]
 800948c:	f3bf 8f4f 	dsb	sy
 8009490:	f3bf 8f6f 	isb	sy
 8009494:	e75e      	b.n	8009354 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009496:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009498:	f000 f973 	bl	8009782 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800949c:	f000 fcc4 	bl	8009e28 <xTaskResumeAll>
 80094a0:	e758      	b.n	8009354 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80094a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094a4:	f000 f96d 	bl	8009782 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80094a8:	f000 fcbe 	bl	8009e28 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094ae:	f000 f9ba 	bl	8009826 <prvIsQueueEmpty>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	f43f af4d 	beq.w	8009354 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80094ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d00d      	beq.n	80094dc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80094c0:	f001 fee0 	bl	800b284 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80094c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094c6:	f000 f8b4 	bl	8009632 <prvGetDisinheritPriorityAfterTimeout>
 80094ca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80094cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80094d2:	4618      	mov	r0, r3
 80094d4:	f001 f970 	bl	800a7b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80094d8:	f001 ff04 	bl	800b2e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80094dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3738      	adds	r7, #56	; 0x38
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	e000ed04 	.word	0xe000ed04

080094ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b08e      	sub	sp, #56	; 0x38
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80094fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d10a      	bne.n	8009518 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009506:	f383 8811 	msr	BASEPRI, r3
 800950a:	f3bf 8f6f 	isb	sy
 800950e:	f3bf 8f4f 	dsb	sy
 8009512:	623b      	str	r3, [r7, #32]
}
 8009514:	bf00      	nop
 8009516:	e7fe      	b.n	8009516 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d103      	bne.n	8009526 <xQueueReceiveFromISR+0x3a>
 800951e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009522:	2b00      	cmp	r3, #0
 8009524:	d101      	bne.n	800952a <xQueueReceiveFromISR+0x3e>
 8009526:	2301      	movs	r3, #1
 8009528:	e000      	b.n	800952c <xQueueReceiveFromISR+0x40>
 800952a:	2300      	movs	r3, #0
 800952c:	2b00      	cmp	r3, #0
 800952e:	d10a      	bne.n	8009546 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009534:	f383 8811 	msr	BASEPRI, r3
 8009538:	f3bf 8f6f 	isb	sy
 800953c:	f3bf 8f4f 	dsb	sy
 8009540:	61fb      	str	r3, [r7, #28]
}
 8009542:	bf00      	nop
 8009544:	e7fe      	b.n	8009544 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009546:	f001 ff7f 	bl	800b448 <vPortValidateInterruptPriority>
	__asm volatile
 800954a:	f3ef 8211 	mrs	r2, BASEPRI
 800954e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009552:	f383 8811 	msr	BASEPRI, r3
 8009556:	f3bf 8f6f 	isb	sy
 800955a:	f3bf 8f4f 	dsb	sy
 800955e:	61ba      	str	r2, [r7, #24]
 8009560:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009562:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009564:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800956a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800956c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956e:	2b00      	cmp	r3, #0
 8009570:	d02f      	beq.n	80095d2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009574:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009578:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800957c:	68b9      	ldr	r1, [r7, #8]
 800957e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009580:	f000 f8d9 	bl	8009736 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009586:	1e5a      	subs	r2, r3, #1
 8009588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800958a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800958c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009594:	d112      	bne.n	80095bc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009598:	691b      	ldr	r3, [r3, #16]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d016      	beq.n	80095cc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800959e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a0:	3310      	adds	r3, #16
 80095a2:	4618      	mov	r0, r3
 80095a4:	f000 fe56 	bl	800a254 <xTaskRemoveFromEventList>
 80095a8:	4603      	mov	r3, r0
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d00e      	beq.n	80095cc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d00b      	beq.n	80095cc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2201      	movs	r2, #1
 80095b8:	601a      	str	r2, [r3, #0]
 80095ba:	e007      	b.n	80095cc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80095bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095c0:	3301      	adds	r3, #1
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	b25a      	sxtb	r2, r3
 80095c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80095cc:	2301      	movs	r3, #1
 80095ce:	637b      	str	r3, [r7, #52]	; 0x34
 80095d0:	e001      	b.n	80095d6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80095d2:	2300      	movs	r3, #0
 80095d4:	637b      	str	r3, [r7, #52]	; 0x34
 80095d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	f383 8811 	msr	BASEPRI, r3
}
 80095e0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80095e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3738      	adds	r7, #56	; 0x38
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d10a      	bne.n	8009614 <vQueueDelete+0x28>
	__asm volatile
 80095fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009602:	f383 8811 	msr	BASEPRI, r3
 8009606:	f3bf 8f6f 	isb	sy
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	60bb      	str	r3, [r7, #8]
}
 8009610:	bf00      	nop
 8009612:	e7fe      	b.n	8009612 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009614:	68f8      	ldr	r0, [r7, #12]
 8009616:	f000 f95f 	bl	80098d8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009620:	2b00      	cmp	r3, #0
 8009622:	d102      	bne.n	800962a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009624:	68f8      	ldr	r0, [r7, #12]
 8009626:	f002 f81b 	bl	800b660 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800962a:	bf00      	nop
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009632:	b480      	push	{r7}
 8009634:	b085      	sub	sp, #20
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800963e:	2b00      	cmp	r3, #0
 8009640:	d006      	beq.n	8009650 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800964c:	60fb      	str	r3, [r7, #12]
 800964e:	e001      	b.n	8009654 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009650:	2300      	movs	r3, #0
 8009652:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009654:	68fb      	ldr	r3, [r7, #12]
	}
 8009656:	4618      	mov	r0, r3
 8009658:	3714      	adds	r7, #20
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr

08009662 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b086      	sub	sp, #24
 8009666:	af00      	add	r7, sp, #0
 8009668:	60f8      	str	r0, [r7, #12]
 800966a:	60b9      	str	r1, [r7, #8]
 800966c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800966e:	2300      	movs	r3, #0
 8009670:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009676:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800967c:	2b00      	cmp	r3, #0
 800967e:	d10d      	bne.n	800969c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d14d      	bne.n	8009724 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	4618      	mov	r0, r3
 800968e:	f001 f825 	bl	800a6dc <xTaskPriorityDisinherit>
 8009692:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2200      	movs	r2, #0
 8009698:	609a      	str	r2, [r3, #8]
 800969a:	e043      	b.n	8009724 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d119      	bne.n	80096d6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	6858      	ldr	r0, [r3, #4]
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096aa:	461a      	mov	r2, r3
 80096ac:	68b9      	ldr	r1, [r7, #8]
 80096ae:	f002 f96d 	bl	800b98c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	685a      	ldr	r2, [r3, #4]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ba:	441a      	add	r2, r3
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	685a      	ldr	r2, [r3, #4]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d32b      	bcc.n	8009724 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	605a      	str	r2, [r3, #4]
 80096d4:	e026      	b.n	8009724 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	68d8      	ldr	r0, [r3, #12]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096de:	461a      	mov	r2, r3
 80096e0:	68b9      	ldr	r1, [r7, #8]
 80096e2:	f002 f953 	bl	800b98c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	68da      	ldr	r2, [r3, #12]
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ee:	425b      	negs	r3, r3
 80096f0:	441a      	add	r2, r3
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	68da      	ldr	r2, [r3, #12]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d207      	bcs.n	8009712 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	689a      	ldr	r2, [r3, #8]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800970a:	425b      	negs	r3, r3
 800970c:	441a      	add	r2, r3
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2b02      	cmp	r3, #2
 8009716:	d105      	bne.n	8009724 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d002      	beq.n	8009724 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	3b01      	subs	r3, #1
 8009722:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	1c5a      	adds	r2, r3, #1
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800972c:	697b      	ldr	r3, [r7, #20]
}
 800972e:	4618      	mov	r0, r3
 8009730:	3718      	adds	r7, #24
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b082      	sub	sp, #8
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
 800973e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009744:	2b00      	cmp	r3, #0
 8009746:	d018      	beq.n	800977a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	68da      	ldr	r2, [r3, #12]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009750:	441a      	add	r2, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	68da      	ldr	r2, [r3, #12]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	689b      	ldr	r3, [r3, #8]
 800975e:	429a      	cmp	r2, r3
 8009760:	d303      	bcc.n	800976a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	68d9      	ldr	r1, [r3, #12]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009772:	461a      	mov	r2, r3
 8009774:	6838      	ldr	r0, [r7, #0]
 8009776:	f002 f909 	bl	800b98c <memcpy>
	}
}
 800977a:	bf00      	nop
 800977c:	3708      	adds	r7, #8
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b084      	sub	sp, #16
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800978a:	f001 fd7b 	bl	800b284 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009794:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009796:	e011      	b.n	80097bc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979c:	2b00      	cmp	r3, #0
 800979e:	d012      	beq.n	80097c6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	3324      	adds	r3, #36	; 0x24
 80097a4:	4618      	mov	r0, r3
 80097a6:	f000 fd55 	bl	800a254 <xTaskRemoveFromEventList>
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d001      	beq.n	80097b4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80097b0:	f000 fe2c 	bl	800a40c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80097b4:	7bfb      	ldrb	r3, [r7, #15]
 80097b6:	3b01      	subs	r3, #1
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80097bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	dce9      	bgt.n	8009798 <prvUnlockQueue+0x16>
 80097c4:	e000      	b.n	80097c8 <prvUnlockQueue+0x46>
					break;
 80097c6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	22ff      	movs	r2, #255	; 0xff
 80097cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80097d0:	f001 fd88 	bl	800b2e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80097d4:	f001 fd56 	bl	800b284 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097de:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80097e0:	e011      	b.n	8009806 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	691b      	ldr	r3, [r3, #16]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d012      	beq.n	8009810 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	3310      	adds	r3, #16
 80097ee:	4618      	mov	r0, r3
 80097f0:	f000 fd30 	bl	800a254 <xTaskRemoveFromEventList>
 80097f4:	4603      	mov	r3, r0
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d001      	beq.n	80097fe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80097fa:	f000 fe07 	bl	800a40c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80097fe:	7bbb      	ldrb	r3, [r7, #14]
 8009800:	3b01      	subs	r3, #1
 8009802:	b2db      	uxtb	r3, r3
 8009804:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009806:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800980a:	2b00      	cmp	r3, #0
 800980c:	dce9      	bgt.n	80097e2 <prvUnlockQueue+0x60>
 800980e:	e000      	b.n	8009812 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009810:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	22ff      	movs	r2, #255	; 0xff
 8009816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800981a:	f001 fd63 	bl	800b2e4 <vPortExitCritical>
}
 800981e:	bf00      	nop
 8009820:	3710      	adds	r7, #16
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}

08009826 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009826:	b580      	push	{r7, lr}
 8009828:	b084      	sub	sp, #16
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800982e:	f001 fd29 	bl	800b284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009836:	2b00      	cmp	r3, #0
 8009838:	d102      	bne.n	8009840 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800983a:	2301      	movs	r3, #1
 800983c:	60fb      	str	r3, [r7, #12]
 800983e:	e001      	b.n	8009844 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009840:	2300      	movs	r3, #0
 8009842:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009844:	f001 fd4e 	bl	800b2e4 <vPortExitCritical>

	return xReturn;
 8009848:	68fb      	ldr	r3, [r7, #12]
}
 800984a:	4618      	mov	r0, r3
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b084      	sub	sp, #16
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800985a:	f001 fd13 	bl	800b284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009866:	429a      	cmp	r2, r3
 8009868:	d102      	bne.n	8009870 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800986a:	2301      	movs	r3, #1
 800986c:	60fb      	str	r3, [r7, #12]
 800986e:	e001      	b.n	8009874 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009870:	2300      	movs	r3, #0
 8009872:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009874:	f001 fd36 	bl	800b2e4 <vPortExitCritical>

	return xReturn;
 8009878:	68fb      	ldr	r3, [r7, #12]
}
 800987a:	4618      	mov	r0, r3
 800987c:	3710      	adds	r7, #16
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
	...

08009884 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800988e:	2300      	movs	r3, #0
 8009890:	60fb      	str	r3, [r7, #12]
 8009892:	e014      	b.n	80098be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009894:	4a0f      	ldr	r2, [pc, #60]	; (80098d4 <vQueueAddToRegistry+0x50>)
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d10b      	bne.n	80098b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80098a0:	490c      	ldr	r1, [pc, #48]	; (80098d4 <vQueueAddToRegistry+0x50>)
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	683a      	ldr	r2, [r7, #0]
 80098a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80098aa:	4a0a      	ldr	r2, [pc, #40]	; (80098d4 <vQueueAddToRegistry+0x50>)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	00db      	lsls	r3, r3, #3
 80098b0:	4413      	add	r3, r2
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80098b6:	e006      	b.n	80098c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	3301      	adds	r3, #1
 80098bc:	60fb      	str	r3, [r7, #12]
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2b07      	cmp	r3, #7
 80098c2:	d9e7      	bls.n	8009894 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80098c4:	bf00      	nop
 80098c6:	bf00      	nop
 80098c8:	3714      	adds	r7, #20
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr
 80098d2:	bf00      	nop
 80098d4:	20000c58 	.word	0x20000c58

080098d8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80098d8:	b480      	push	{r7}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80098e0:	2300      	movs	r3, #0
 80098e2:	60fb      	str	r3, [r7, #12]
 80098e4:	e016      	b.n	8009914 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80098e6:	4a10      	ldr	r2, [pc, #64]	; (8009928 <vQueueUnregisterQueue+0x50>)
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	00db      	lsls	r3, r3, #3
 80098ec:	4413      	add	r3, r2
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d10b      	bne.n	800990e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80098f6:	4a0c      	ldr	r2, [pc, #48]	; (8009928 <vQueueUnregisterQueue+0x50>)
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2100      	movs	r1, #0
 80098fc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009900:	4a09      	ldr	r2, [pc, #36]	; (8009928 <vQueueUnregisterQueue+0x50>)
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	00db      	lsls	r3, r3, #3
 8009906:	4413      	add	r3, r2
 8009908:	2200      	movs	r2, #0
 800990a:	605a      	str	r2, [r3, #4]
				break;
 800990c:	e006      	b.n	800991c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	3301      	adds	r3, #1
 8009912:	60fb      	str	r3, [r7, #12]
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2b07      	cmp	r3, #7
 8009918:	d9e5      	bls.n	80098e6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800991a:	bf00      	nop
 800991c:	bf00      	nop
 800991e:	3714      	adds	r7, #20
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr
 8009928:	20000c58 	.word	0x20000c58

0800992c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800992c:	b580      	push	{r7, lr}
 800992e:	b086      	sub	sp, #24
 8009930:	af00      	add	r7, sp, #0
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800993c:	f001 fca2 	bl	800b284 <vPortEnterCritical>
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009946:	b25b      	sxtb	r3, r3
 8009948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800994c:	d103      	bne.n	8009956 <vQueueWaitForMessageRestricted+0x2a>
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	2200      	movs	r2, #0
 8009952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800995c:	b25b      	sxtb	r3, r3
 800995e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009962:	d103      	bne.n	800996c <vQueueWaitForMessageRestricted+0x40>
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	2200      	movs	r2, #0
 8009968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800996c:	f001 fcba 	bl	800b2e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009974:	2b00      	cmp	r3, #0
 8009976:	d106      	bne.n	8009986 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	3324      	adds	r3, #36	; 0x24
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	68b9      	ldr	r1, [r7, #8]
 8009980:	4618      	mov	r0, r3
 8009982:	f000 fc3b 	bl	800a1fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009986:	6978      	ldr	r0, [r7, #20]
 8009988:	f7ff fefb 	bl	8009782 <prvUnlockQueue>
	}
 800998c:	bf00      	nop
 800998e:	3718      	adds	r7, #24
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009994:	b580      	push	{r7, lr}
 8009996:	b08e      	sub	sp, #56	; 0x38
 8009998:	af04      	add	r7, sp, #16
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	607a      	str	r2, [r7, #4]
 80099a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80099a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d10a      	bne.n	80099be <xTaskCreateStatic+0x2a>
	__asm volatile
 80099a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ac:	f383 8811 	msr	BASEPRI, r3
 80099b0:	f3bf 8f6f 	isb	sy
 80099b4:	f3bf 8f4f 	dsb	sy
 80099b8:	623b      	str	r3, [r7, #32]
}
 80099ba:	bf00      	nop
 80099bc:	e7fe      	b.n	80099bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80099be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d10a      	bne.n	80099da <xTaskCreateStatic+0x46>
	__asm volatile
 80099c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c8:	f383 8811 	msr	BASEPRI, r3
 80099cc:	f3bf 8f6f 	isb	sy
 80099d0:	f3bf 8f4f 	dsb	sy
 80099d4:	61fb      	str	r3, [r7, #28]
}
 80099d6:	bf00      	nop
 80099d8:	e7fe      	b.n	80099d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80099da:	235c      	movs	r3, #92	; 0x5c
 80099dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	2b5c      	cmp	r3, #92	; 0x5c
 80099e2:	d00a      	beq.n	80099fa <xTaskCreateStatic+0x66>
	__asm volatile
 80099e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e8:	f383 8811 	msr	BASEPRI, r3
 80099ec:	f3bf 8f6f 	isb	sy
 80099f0:	f3bf 8f4f 	dsb	sy
 80099f4:	61bb      	str	r3, [r7, #24]
}
 80099f6:	bf00      	nop
 80099f8:	e7fe      	b.n	80099f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80099fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80099fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d01e      	beq.n	8009a40 <xTaskCreateStatic+0xac>
 8009a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d01b      	beq.n	8009a40 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a0a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a10:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a14:	2202      	movs	r2, #2
 8009a16:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	9303      	str	r3, [sp, #12]
 8009a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a20:	9302      	str	r3, [sp, #8]
 8009a22:	f107 0314 	add.w	r3, r7, #20
 8009a26:	9301      	str	r3, [sp, #4]
 8009a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a2a:	9300      	str	r3, [sp, #0]
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	68b9      	ldr	r1, [r7, #8]
 8009a32:	68f8      	ldr	r0, [r7, #12]
 8009a34:	f000 f850 	bl	8009ad8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a3a:	f000 f8dd 	bl	8009bf8 <prvAddNewTaskToReadyList>
 8009a3e:	e001      	b.n	8009a44 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009a40:	2300      	movs	r3, #0
 8009a42:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009a44:	697b      	ldr	r3, [r7, #20]
	}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3728      	adds	r7, #40	; 0x28
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b08c      	sub	sp, #48	; 0x30
 8009a52:	af04      	add	r7, sp, #16
 8009a54:	60f8      	str	r0, [r7, #12]
 8009a56:	60b9      	str	r1, [r7, #8]
 8009a58:	603b      	str	r3, [r7, #0]
 8009a5a:	4613      	mov	r3, r2
 8009a5c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009a5e:	88fb      	ldrh	r3, [r7, #6]
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	4618      	mov	r0, r3
 8009a64:	f001 fd30 	bl	800b4c8 <pvPortMalloc>
 8009a68:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d00e      	beq.n	8009a8e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009a70:	205c      	movs	r0, #92	; 0x5c
 8009a72:	f001 fd29 	bl	800b4c8 <pvPortMalloc>
 8009a76:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009a78:	69fb      	ldr	r3, [r7, #28]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d003      	beq.n	8009a86 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009a7e:	69fb      	ldr	r3, [r7, #28]
 8009a80:	697a      	ldr	r2, [r7, #20]
 8009a82:	631a      	str	r2, [r3, #48]	; 0x30
 8009a84:	e005      	b.n	8009a92 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009a86:	6978      	ldr	r0, [r7, #20]
 8009a88:	f001 fdea 	bl	800b660 <vPortFree>
 8009a8c:	e001      	b.n	8009a92 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009a92:	69fb      	ldr	r3, [r7, #28]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d017      	beq.n	8009ac8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009a98:	69fb      	ldr	r3, [r7, #28]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009aa0:	88fa      	ldrh	r2, [r7, #6]
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	9303      	str	r3, [sp, #12]
 8009aa6:	69fb      	ldr	r3, [r7, #28]
 8009aa8:	9302      	str	r3, [sp, #8]
 8009aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aac:	9301      	str	r3, [sp, #4]
 8009aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab0:	9300      	str	r3, [sp, #0]
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	68b9      	ldr	r1, [r7, #8]
 8009ab6:	68f8      	ldr	r0, [r7, #12]
 8009ab8:	f000 f80e 	bl	8009ad8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009abc:	69f8      	ldr	r0, [r7, #28]
 8009abe:	f000 f89b 	bl	8009bf8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	61bb      	str	r3, [r7, #24]
 8009ac6:	e002      	b.n	8009ace <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8009acc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009ace:	69bb      	ldr	r3, [r7, #24]
	}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3720      	adds	r7, #32
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b088      	sub	sp, #32
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	607a      	str	r2, [r7, #4]
 8009ae4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	461a      	mov	r2, r3
 8009af0:	21a5      	movs	r1, #165	; 0xa5
 8009af2:	f001 ff59 	bl	800b9a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009b00:	3b01      	subs	r3, #1
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	4413      	add	r3, r2
 8009b06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009b08:	69bb      	ldr	r3, [r7, #24]
 8009b0a:	f023 0307 	bic.w	r3, r3, #7
 8009b0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009b10:	69bb      	ldr	r3, [r7, #24]
 8009b12:	f003 0307 	and.w	r3, r3, #7
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00a      	beq.n	8009b30 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1e:	f383 8811 	msr	BASEPRI, r3
 8009b22:	f3bf 8f6f 	isb	sy
 8009b26:	f3bf 8f4f 	dsb	sy
 8009b2a:	617b      	str	r3, [r7, #20]
}
 8009b2c:	bf00      	nop
 8009b2e:	e7fe      	b.n	8009b2e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d01f      	beq.n	8009b76 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b36:	2300      	movs	r3, #0
 8009b38:	61fb      	str	r3, [r7, #28]
 8009b3a:	e012      	b.n	8009b62 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b3c:	68ba      	ldr	r2, [r7, #8]
 8009b3e:	69fb      	ldr	r3, [r7, #28]
 8009b40:	4413      	add	r3, r2
 8009b42:	7819      	ldrb	r1, [r3, #0]
 8009b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	4413      	add	r3, r2
 8009b4a:	3334      	adds	r3, #52	; 0x34
 8009b4c:	460a      	mov	r2, r1
 8009b4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009b50:	68ba      	ldr	r2, [r7, #8]
 8009b52:	69fb      	ldr	r3, [r7, #28]
 8009b54:	4413      	add	r3, r2
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d006      	beq.n	8009b6a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	3301      	adds	r3, #1
 8009b60:	61fb      	str	r3, [r7, #28]
 8009b62:	69fb      	ldr	r3, [r7, #28]
 8009b64:	2b0f      	cmp	r3, #15
 8009b66:	d9e9      	bls.n	8009b3c <prvInitialiseNewTask+0x64>
 8009b68:	e000      	b.n	8009b6c <prvInitialiseNewTask+0x94>
			{
				break;
 8009b6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6e:	2200      	movs	r2, #0
 8009b70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b74:	e003      	b.n	8009b7e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b80:	2b37      	cmp	r3, #55	; 0x37
 8009b82:	d901      	bls.n	8009b88 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009b84:	2337      	movs	r3, #55	; 0x37
 8009b86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b92:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b96:	2200      	movs	r2, #0
 8009b98:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b9c:	3304      	adds	r3, #4
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7fe fe56 	bl	8008850 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba6:	3318      	adds	r3, #24
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7fe fe51 	bl	8008850 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bb2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bbc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bc2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bcc:	2200      	movs	r2, #0
 8009bce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009bd2:	683a      	ldr	r2, [r7, #0]
 8009bd4:	68f9      	ldr	r1, [r7, #12]
 8009bd6:	69b8      	ldr	r0, [r7, #24]
 8009bd8:	f001 fa26 	bl	800b028 <pxPortInitialiseStack>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d002      	beq.n	8009bee <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009bee:	bf00      	nop
 8009bf0:	3720      	adds	r7, #32
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
	...

08009bf8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009c00:	f001 fb40 	bl	800b284 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009c04:	4b2d      	ldr	r3, [pc, #180]	; (8009cbc <prvAddNewTaskToReadyList+0xc4>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	3301      	adds	r3, #1
 8009c0a:	4a2c      	ldr	r2, [pc, #176]	; (8009cbc <prvAddNewTaskToReadyList+0xc4>)
 8009c0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009c0e:	4b2c      	ldr	r3, [pc, #176]	; (8009cc0 <prvAddNewTaskToReadyList+0xc8>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d109      	bne.n	8009c2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009c16:	4a2a      	ldr	r2, [pc, #168]	; (8009cc0 <prvAddNewTaskToReadyList+0xc8>)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009c1c:	4b27      	ldr	r3, [pc, #156]	; (8009cbc <prvAddNewTaskToReadyList+0xc4>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d110      	bne.n	8009c46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009c24:	f000 fc16 	bl	800a454 <prvInitialiseTaskLists>
 8009c28:	e00d      	b.n	8009c46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009c2a:	4b26      	ldr	r3, [pc, #152]	; (8009cc4 <prvAddNewTaskToReadyList+0xcc>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d109      	bne.n	8009c46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009c32:	4b23      	ldr	r3, [pc, #140]	; (8009cc0 <prvAddNewTaskToReadyList+0xc8>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d802      	bhi.n	8009c46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009c40:	4a1f      	ldr	r2, [pc, #124]	; (8009cc0 <prvAddNewTaskToReadyList+0xc8>)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009c46:	4b20      	ldr	r3, [pc, #128]	; (8009cc8 <prvAddNewTaskToReadyList+0xd0>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	4a1e      	ldr	r2, [pc, #120]	; (8009cc8 <prvAddNewTaskToReadyList+0xd0>)
 8009c4e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009c50:	4b1d      	ldr	r3, [pc, #116]	; (8009cc8 <prvAddNewTaskToReadyList+0xd0>)
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c5c:	4b1b      	ldr	r3, [pc, #108]	; (8009ccc <prvAddNewTaskToReadyList+0xd4>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d903      	bls.n	8009c6c <prvAddNewTaskToReadyList+0x74>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c68:	4a18      	ldr	r2, [pc, #96]	; (8009ccc <prvAddNewTaskToReadyList+0xd4>)
 8009c6a:	6013      	str	r3, [r2, #0]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c70:	4613      	mov	r3, r2
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	4413      	add	r3, r2
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	4a15      	ldr	r2, [pc, #84]	; (8009cd0 <prvAddNewTaskToReadyList+0xd8>)
 8009c7a:	441a      	add	r2, r3
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	3304      	adds	r3, #4
 8009c80:	4619      	mov	r1, r3
 8009c82:	4610      	mov	r0, r2
 8009c84:	f7fe fdf1 	bl	800886a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009c88:	f001 fb2c 	bl	800b2e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009c8c:	4b0d      	ldr	r3, [pc, #52]	; (8009cc4 <prvAddNewTaskToReadyList+0xcc>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d00e      	beq.n	8009cb2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009c94:	4b0a      	ldr	r3, [pc, #40]	; (8009cc0 <prvAddNewTaskToReadyList+0xc8>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d207      	bcs.n	8009cb2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009ca2:	4b0c      	ldr	r3, [pc, #48]	; (8009cd4 <prvAddNewTaskToReadyList+0xdc>)
 8009ca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ca8:	601a      	str	r2, [r3, #0]
 8009caa:	f3bf 8f4f 	dsb	sy
 8009cae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009cb2:	bf00      	nop
 8009cb4:	3708      	adds	r7, #8
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
 8009cba:	bf00      	nop
 8009cbc:	2000116c 	.word	0x2000116c
 8009cc0:	20000c98 	.word	0x20000c98
 8009cc4:	20001178 	.word	0x20001178
 8009cc8:	20001188 	.word	0x20001188
 8009ccc:	20001174 	.word	0x20001174
 8009cd0:	20000c9c 	.word	0x20000c9c
 8009cd4:	e000ed04 	.word	0xe000ed04

08009cd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d017      	beq.n	8009d1a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009cea:	4b13      	ldr	r3, [pc, #76]	; (8009d38 <vTaskDelay+0x60>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00a      	beq.n	8009d08 <vTaskDelay+0x30>
	__asm volatile
 8009cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf6:	f383 8811 	msr	BASEPRI, r3
 8009cfa:	f3bf 8f6f 	isb	sy
 8009cfe:	f3bf 8f4f 	dsb	sy
 8009d02:	60bb      	str	r3, [r7, #8]
}
 8009d04:	bf00      	nop
 8009d06:	e7fe      	b.n	8009d06 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009d08:	f000 f880 	bl	8009e0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009d0c:	2100      	movs	r1, #0
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 fde8 	bl	800a8e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009d14:	f000 f888 	bl	8009e28 <xTaskResumeAll>
 8009d18:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d107      	bne.n	8009d30 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009d20:	4b06      	ldr	r3, [pc, #24]	; (8009d3c <vTaskDelay+0x64>)
 8009d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d26:	601a      	str	r2, [r3, #0]
 8009d28:	f3bf 8f4f 	dsb	sy
 8009d2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009d30:	bf00      	nop
 8009d32:	3710      	adds	r7, #16
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}
 8009d38:	20001194 	.word	0x20001194
 8009d3c:	e000ed04 	.word	0xe000ed04

08009d40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b08a      	sub	sp, #40	; 0x28
 8009d44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009d46:	2300      	movs	r3, #0
 8009d48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009d4e:	463a      	mov	r2, r7
 8009d50:	1d39      	adds	r1, r7, #4
 8009d52:	f107 0308 	add.w	r3, r7, #8
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7fe fd26 	bl	80087a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009d5c:	6839      	ldr	r1, [r7, #0]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	68ba      	ldr	r2, [r7, #8]
 8009d62:	9202      	str	r2, [sp, #8]
 8009d64:	9301      	str	r3, [sp, #4]
 8009d66:	2300      	movs	r3, #0
 8009d68:	9300      	str	r3, [sp, #0]
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	460a      	mov	r2, r1
 8009d6e:	4921      	ldr	r1, [pc, #132]	; (8009df4 <vTaskStartScheduler+0xb4>)
 8009d70:	4821      	ldr	r0, [pc, #132]	; (8009df8 <vTaskStartScheduler+0xb8>)
 8009d72:	f7ff fe0f 	bl	8009994 <xTaskCreateStatic>
 8009d76:	4603      	mov	r3, r0
 8009d78:	4a20      	ldr	r2, [pc, #128]	; (8009dfc <vTaskStartScheduler+0xbc>)
 8009d7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009d7c:	4b1f      	ldr	r3, [pc, #124]	; (8009dfc <vTaskStartScheduler+0xbc>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d002      	beq.n	8009d8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009d84:	2301      	movs	r3, #1
 8009d86:	617b      	str	r3, [r7, #20]
 8009d88:	e001      	b.n	8009d8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d102      	bne.n	8009d9a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009d94:	f000 fdfa 	bl	800a98c <xTimerCreateTimerTask>
 8009d98:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d116      	bne.n	8009dce <vTaskStartScheduler+0x8e>
	__asm volatile
 8009da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da4:	f383 8811 	msr	BASEPRI, r3
 8009da8:	f3bf 8f6f 	isb	sy
 8009dac:	f3bf 8f4f 	dsb	sy
 8009db0:	613b      	str	r3, [r7, #16]
}
 8009db2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009db4:	4b12      	ldr	r3, [pc, #72]	; (8009e00 <vTaskStartScheduler+0xc0>)
 8009db6:	f04f 32ff 	mov.w	r2, #4294967295
 8009dba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009dbc:	4b11      	ldr	r3, [pc, #68]	; (8009e04 <vTaskStartScheduler+0xc4>)
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009dc2:	4b11      	ldr	r3, [pc, #68]	; (8009e08 <vTaskStartScheduler+0xc8>)
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009dc8:	f001 f9ba 	bl	800b140 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009dcc:	e00e      	b.n	8009dec <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dd4:	d10a      	bne.n	8009dec <vTaskStartScheduler+0xac>
	__asm volatile
 8009dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dda:	f383 8811 	msr	BASEPRI, r3
 8009dde:	f3bf 8f6f 	isb	sy
 8009de2:	f3bf 8f4f 	dsb	sy
 8009de6:	60fb      	str	r3, [r7, #12]
}
 8009de8:	bf00      	nop
 8009dea:	e7fe      	b.n	8009dea <vTaskStartScheduler+0xaa>
}
 8009dec:	bf00      	nop
 8009dee:	3718      	adds	r7, #24
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	0800f0c0 	.word	0x0800f0c0
 8009df8:	0800a425 	.word	0x0800a425
 8009dfc:	20001190 	.word	0x20001190
 8009e00:	2000118c 	.word	0x2000118c
 8009e04:	20001178 	.word	0x20001178
 8009e08:	20001170 	.word	0x20001170

08009e0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009e10:	4b04      	ldr	r3, [pc, #16]	; (8009e24 <vTaskSuspendAll+0x18>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	3301      	adds	r3, #1
 8009e16:	4a03      	ldr	r2, [pc, #12]	; (8009e24 <vTaskSuspendAll+0x18>)
 8009e18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009e1a:	bf00      	nop
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr
 8009e24:	20001194 	.word	0x20001194

08009e28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009e32:	2300      	movs	r3, #0
 8009e34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009e36:	4b42      	ldr	r3, [pc, #264]	; (8009f40 <xTaskResumeAll+0x118>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d10a      	bne.n	8009e54 <xTaskResumeAll+0x2c>
	__asm volatile
 8009e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e42:	f383 8811 	msr	BASEPRI, r3
 8009e46:	f3bf 8f6f 	isb	sy
 8009e4a:	f3bf 8f4f 	dsb	sy
 8009e4e:	603b      	str	r3, [r7, #0]
}
 8009e50:	bf00      	nop
 8009e52:	e7fe      	b.n	8009e52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009e54:	f001 fa16 	bl	800b284 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009e58:	4b39      	ldr	r3, [pc, #228]	; (8009f40 <xTaskResumeAll+0x118>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	3b01      	subs	r3, #1
 8009e5e:	4a38      	ldr	r2, [pc, #224]	; (8009f40 <xTaskResumeAll+0x118>)
 8009e60:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e62:	4b37      	ldr	r3, [pc, #220]	; (8009f40 <xTaskResumeAll+0x118>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d162      	bne.n	8009f30 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009e6a:	4b36      	ldr	r3, [pc, #216]	; (8009f44 <xTaskResumeAll+0x11c>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d05e      	beq.n	8009f30 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e72:	e02f      	b.n	8009ed4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e74:	4b34      	ldr	r3, [pc, #208]	; (8009f48 <xTaskResumeAll+0x120>)
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	68db      	ldr	r3, [r3, #12]
 8009e7a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	3318      	adds	r3, #24
 8009e80:	4618      	mov	r0, r3
 8009e82:	f7fe fd4f 	bl	8008924 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	3304      	adds	r3, #4
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7fe fd4a 	bl	8008924 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e94:	4b2d      	ldr	r3, [pc, #180]	; (8009f4c <xTaskResumeAll+0x124>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d903      	bls.n	8009ea4 <xTaskResumeAll+0x7c>
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea0:	4a2a      	ldr	r2, [pc, #168]	; (8009f4c <xTaskResumeAll+0x124>)
 8009ea2:	6013      	str	r3, [r2, #0]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ea8:	4613      	mov	r3, r2
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	4413      	add	r3, r2
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	4a27      	ldr	r2, [pc, #156]	; (8009f50 <xTaskResumeAll+0x128>)
 8009eb2:	441a      	add	r2, r3
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	3304      	adds	r3, #4
 8009eb8:	4619      	mov	r1, r3
 8009eba:	4610      	mov	r0, r2
 8009ebc:	f7fe fcd5 	bl	800886a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ec4:	4b23      	ldr	r3, [pc, #140]	; (8009f54 <xTaskResumeAll+0x12c>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d302      	bcc.n	8009ed4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009ece:	4b22      	ldr	r3, [pc, #136]	; (8009f58 <xTaskResumeAll+0x130>)
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ed4:	4b1c      	ldr	r3, [pc, #112]	; (8009f48 <xTaskResumeAll+0x120>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d1cb      	bne.n	8009e74 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d001      	beq.n	8009ee6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009ee2:	f000 fb55 	bl	800a590 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009ee6:	4b1d      	ldr	r3, [pc, #116]	; (8009f5c <xTaskResumeAll+0x134>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d010      	beq.n	8009f14 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009ef2:	f000 f847 	bl	8009f84 <xTaskIncrementTick>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d002      	beq.n	8009f02 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009efc:	4b16      	ldr	r3, [pc, #88]	; (8009f58 <xTaskResumeAll+0x130>)
 8009efe:	2201      	movs	r2, #1
 8009f00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	3b01      	subs	r3, #1
 8009f06:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d1f1      	bne.n	8009ef2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009f0e:	4b13      	ldr	r3, [pc, #76]	; (8009f5c <xTaskResumeAll+0x134>)
 8009f10:	2200      	movs	r2, #0
 8009f12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009f14:	4b10      	ldr	r3, [pc, #64]	; (8009f58 <xTaskResumeAll+0x130>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d009      	beq.n	8009f30 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009f20:	4b0f      	ldr	r3, [pc, #60]	; (8009f60 <xTaskResumeAll+0x138>)
 8009f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f26:	601a      	str	r2, [r3, #0]
 8009f28:	f3bf 8f4f 	dsb	sy
 8009f2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009f30:	f001 f9d8 	bl	800b2e4 <vPortExitCritical>

	return xAlreadyYielded;
 8009f34:	68bb      	ldr	r3, [r7, #8]
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3710      	adds	r7, #16
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	20001194 	.word	0x20001194
 8009f44:	2000116c 	.word	0x2000116c
 8009f48:	2000112c 	.word	0x2000112c
 8009f4c:	20001174 	.word	0x20001174
 8009f50:	20000c9c 	.word	0x20000c9c
 8009f54:	20000c98 	.word	0x20000c98
 8009f58:	20001180 	.word	0x20001180
 8009f5c:	2000117c 	.word	0x2000117c
 8009f60:	e000ed04 	.word	0xe000ed04

08009f64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009f6a:	4b05      	ldr	r3, [pc, #20]	; (8009f80 <xTaskGetTickCount+0x1c>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009f70:	687b      	ldr	r3, [r7, #4]
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	370c      	adds	r7, #12
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr
 8009f7e:	bf00      	nop
 8009f80:	20001170 	.word	0x20001170

08009f84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b086      	sub	sp, #24
 8009f88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f8e:	4b4f      	ldr	r3, [pc, #316]	; (800a0cc <xTaskIncrementTick+0x148>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	f040 808f 	bne.w	800a0b6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009f98:	4b4d      	ldr	r3, [pc, #308]	; (800a0d0 <xTaskIncrementTick+0x14c>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009fa0:	4a4b      	ldr	r2, [pc, #300]	; (800a0d0 <xTaskIncrementTick+0x14c>)
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d120      	bne.n	8009fee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009fac:	4b49      	ldr	r3, [pc, #292]	; (800a0d4 <xTaskIncrementTick+0x150>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d00a      	beq.n	8009fcc <xTaskIncrementTick+0x48>
	__asm volatile
 8009fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fba:	f383 8811 	msr	BASEPRI, r3
 8009fbe:	f3bf 8f6f 	isb	sy
 8009fc2:	f3bf 8f4f 	dsb	sy
 8009fc6:	603b      	str	r3, [r7, #0]
}
 8009fc8:	bf00      	nop
 8009fca:	e7fe      	b.n	8009fca <xTaskIncrementTick+0x46>
 8009fcc:	4b41      	ldr	r3, [pc, #260]	; (800a0d4 <xTaskIncrementTick+0x150>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	60fb      	str	r3, [r7, #12]
 8009fd2:	4b41      	ldr	r3, [pc, #260]	; (800a0d8 <xTaskIncrementTick+0x154>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a3f      	ldr	r2, [pc, #252]	; (800a0d4 <xTaskIncrementTick+0x150>)
 8009fd8:	6013      	str	r3, [r2, #0]
 8009fda:	4a3f      	ldr	r2, [pc, #252]	; (800a0d8 <xTaskIncrementTick+0x154>)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6013      	str	r3, [r2, #0]
 8009fe0:	4b3e      	ldr	r3, [pc, #248]	; (800a0dc <xTaskIncrementTick+0x158>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	4a3d      	ldr	r2, [pc, #244]	; (800a0dc <xTaskIncrementTick+0x158>)
 8009fe8:	6013      	str	r3, [r2, #0]
 8009fea:	f000 fad1 	bl	800a590 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009fee:	4b3c      	ldr	r3, [pc, #240]	; (800a0e0 <xTaskIncrementTick+0x15c>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	693a      	ldr	r2, [r7, #16]
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d349      	bcc.n	800a08c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ff8:	4b36      	ldr	r3, [pc, #216]	; (800a0d4 <xTaskIncrementTick+0x150>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d104      	bne.n	800a00c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a002:	4b37      	ldr	r3, [pc, #220]	; (800a0e0 <xTaskIncrementTick+0x15c>)
 800a004:	f04f 32ff 	mov.w	r2, #4294967295
 800a008:	601a      	str	r2, [r3, #0]
					break;
 800a00a:	e03f      	b.n	800a08c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a00c:	4b31      	ldr	r3, [pc, #196]	; (800a0d4 <xTaskIncrementTick+0x150>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	68db      	ldr	r3, [r3, #12]
 800a012:	68db      	ldr	r3, [r3, #12]
 800a014:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a01c:	693a      	ldr	r2, [r7, #16]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	429a      	cmp	r2, r3
 800a022:	d203      	bcs.n	800a02c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a024:	4a2e      	ldr	r2, [pc, #184]	; (800a0e0 <xTaskIncrementTick+0x15c>)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a02a:	e02f      	b.n	800a08c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	3304      	adds	r3, #4
 800a030:	4618      	mov	r0, r3
 800a032:	f7fe fc77 	bl	8008924 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d004      	beq.n	800a048 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	3318      	adds	r3, #24
 800a042:	4618      	mov	r0, r3
 800a044:	f7fe fc6e 	bl	8008924 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a04c:	4b25      	ldr	r3, [pc, #148]	; (800a0e4 <xTaskIncrementTick+0x160>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	429a      	cmp	r2, r3
 800a052:	d903      	bls.n	800a05c <xTaskIncrementTick+0xd8>
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a058:	4a22      	ldr	r2, [pc, #136]	; (800a0e4 <xTaskIncrementTick+0x160>)
 800a05a:	6013      	str	r3, [r2, #0]
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a060:	4613      	mov	r3, r2
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	4413      	add	r3, r2
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	4a1f      	ldr	r2, [pc, #124]	; (800a0e8 <xTaskIncrementTick+0x164>)
 800a06a:	441a      	add	r2, r3
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	3304      	adds	r3, #4
 800a070:	4619      	mov	r1, r3
 800a072:	4610      	mov	r0, r2
 800a074:	f7fe fbf9 	bl	800886a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a07c:	4b1b      	ldr	r3, [pc, #108]	; (800a0ec <xTaskIncrementTick+0x168>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a082:	429a      	cmp	r2, r3
 800a084:	d3b8      	bcc.n	8009ff8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a086:	2301      	movs	r3, #1
 800a088:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a08a:	e7b5      	b.n	8009ff8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a08c:	4b17      	ldr	r3, [pc, #92]	; (800a0ec <xTaskIncrementTick+0x168>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a092:	4915      	ldr	r1, [pc, #84]	; (800a0e8 <xTaskIncrementTick+0x164>)
 800a094:	4613      	mov	r3, r2
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	4413      	add	r3, r2
 800a09a:	009b      	lsls	r3, r3, #2
 800a09c:	440b      	add	r3, r1
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d901      	bls.n	800a0a8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a0a8:	4b11      	ldr	r3, [pc, #68]	; (800a0f0 <xTaskIncrementTick+0x16c>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d007      	beq.n	800a0c0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	617b      	str	r3, [r7, #20]
 800a0b4:	e004      	b.n	800a0c0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a0b6:	4b0f      	ldr	r3, [pc, #60]	; (800a0f4 <xTaskIncrementTick+0x170>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	4a0d      	ldr	r2, [pc, #52]	; (800a0f4 <xTaskIncrementTick+0x170>)
 800a0be:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a0c0:	697b      	ldr	r3, [r7, #20]
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3718      	adds	r7, #24
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	20001194 	.word	0x20001194
 800a0d0:	20001170 	.word	0x20001170
 800a0d4:	20001124 	.word	0x20001124
 800a0d8:	20001128 	.word	0x20001128
 800a0dc:	20001184 	.word	0x20001184
 800a0e0:	2000118c 	.word	0x2000118c
 800a0e4:	20001174 	.word	0x20001174
 800a0e8:	20000c9c 	.word	0x20000c9c
 800a0ec:	20000c98 	.word	0x20000c98
 800a0f0:	20001180 	.word	0x20001180
 800a0f4:	2000117c 	.word	0x2000117c

0800a0f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b085      	sub	sp, #20
 800a0fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a0fe:	4b28      	ldr	r3, [pc, #160]	; (800a1a0 <vTaskSwitchContext+0xa8>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d003      	beq.n	800a10e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a106:	4b27      	ldr	r3, [pc, #156]	; (800a1a4 <vTaskSwitchContext+0xac>)
 800a108:	2201      	movs	r2, #1
 800a10a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a10c:	e041      	b.n	800a192 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a10e:	4b25      	ldr	r3, [pc, #148]	; (800a1a4 <vTaskSwitchContext+0xac>)
 800a110:	2200      	movs	r2, #0
 800a112:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a114:	4b24      	ldr	r3, [pc, #144]	; (800a1a8 <vTaskSwitchContext+0xb0>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	60fb      	str	r3, [r7, #12]
 800a11a:	e010      	b.n	800a13e <vTaskSwitchContext+0x46>
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d10a      	bne.n	800a138 <vTaskSwitchContext+0x40>
	__asm volatile
 800a122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a126:	f383 8811 	msr	BASEPRI, r3
 800a12a:	f3bf 8f6f 	isb	sy
 800a12e:	f3bf 8f4f 	dsb	sy
 800a132:	607b      	str	r3, [r7, #4]
}
 800a134:	bf00      	nop
 800a136:	e7fe      	b.n	800a136 <vTaskSwitchContext+0x3e>
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	3b01      	subs	r3, #1
 800a13c:	60fb      	str	r3, [r7, #12]
 800a13e:	491b      	ldr	r1, [pc, #108]	; (800a1ac <vTaskSwitchContext+0xb4>)
 800a140:	68fa      	ldr	r2, [r7, #12]
 800a142:	4613      	mov	r3, r2
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	4413      	add	r3, r2
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	440b      	add	r3, r1
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d0e4      	beq.n	800a11c <vTaskSwitchContext+0x24>
 800a152:	68fa      	ldr	r2, [r7, #12]
 800a154:	4613      	mov	r3, r2
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	4413      	add	r3, r2
 800a15a:	009b      	lsls	r3, r3, #2
 800a15c:	4a13      	ldr	r2, [pc, #76]	; (800a1ac <vTaskSwitchContext+0xb4>)
 800a15e:	4413      	add	r3, r2
 800a160:	60bb      	str	r3, [r7, #8]
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	685a      	ldr	r2, [r3, #4]
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	605a      	str	r2, [r3, #4]
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	685a      	ldr	r2, [r3, #4]
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	3308      	adds	r3, #8
 800a174:	429a      	cmp	r2, r3
 800a176:	d104      	bne.n	800a182 <vTaskSwitchContext+0x8a>
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	685a      	ldr	r2, [r3, #4]
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	605a      	str	r2, [r3, #4]
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	4a09      	ldr	r2, [pc, #36]	; (800a1b0 <vTaskSwitchContext+0xb8>)
 800a18a:	6013      	str	r3, [r2, #0]
 800a18c:	4a06      	ldr	r2, [pc, #24]	; (800a1a8 <vTaskSwitchContext+0xb0>)
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	6013      	str	r3, [r2, #0]
}
 800a192:	bf00      	nop
 800a194:	3714      	adds	r7, #20
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr
 800a19e:	bf00      	nop
 800a1a0:	20001194 	.word	0x20001194
 800a1a4:	20001180 	.word	0x20001180
 800a1a8:	20001174 	.word	0x20001174
 800a1ac:	20000c9c 	.word	0x20000c9c
 800a1b0:	20000c98 	.word	0x20000c98

0800a1b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d10a      	bne.n	800a1da <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c8:	f383 8811 	msr	BASEPRI, r3
 800a1cc:	f3bf 8f6f 	isb	sy
 800a1d0:	f3bf 8f4f 	dsb	sy
 800a1d4:	60fb      	str	r3, [r7, #12]
}
 800a1d6:	bf00      	nop
 800a1d8:	e7fe      	b.n	800a1d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a1da:	4b07      	ldr	r3, [pc, #28]	; (800a1f8 <vTaskPlaceOnEventList+0x44>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	3318      	adds	r3, #24
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f7fe fb65 	bl	80088b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a1e8:	2101      	movs	r1, #1
 800a1ea:	6838      	ldr	r0, [r7, #0]
 800a1ec:	f000 fb7a 	bl	800a8e4 <prvAddCurrentTaskToDelayedList>
}
 800a1f0:	bf00      	nop
 800a1f2:	3710      	adds	r7, #16
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}
 800a1f8:	20000c98 	.word	0x20000c98

0800a1fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b086      	sub	sp, #24
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d10a      	bne.n	800a224 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a212:	f383 8811 	msr	BASEPRI, r3
 800a216:	f3bf 8f6f 	isb	sy
 800a21a:	f3bf 8f4f 	dsb	sy
 800a21e:	617b      	str	r3, [r7, #20]
}
 800a220:	bf00      	nop
 800a222:	e7fe      	b.n	800a222 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a224:	4b0a      	ldr	r3, [pc, #40]	; (800a250 <vTaskPlaceOnEventListRestricted+0x54>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	3318      	adds	r3, #24
 800a22a:	4619      	mov	r1, r3
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	f7fe fb1c 	bl	800886a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d002      	beq.n	800a23e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a238:	f04f 33ff 	mov.w	r3, #4294967295
 800a23c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a23e:	6879      	ldr	r1, [r7, #4]
 800a240:	68b8      	ldr	r0, [r7, #8]
 800a242:	f000 fb4f 	bl	800a8e4 <prvAddCurrentTaskToDelayedList>
	}
 800a246:	bf00      	nop
 800a248:	3718      	adds	r7, #24
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	20000c98 	.word	0x20000c98

0800a254 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b086      	sub	sp, #24
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d10a      	bne.n	800a280 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26e:	f383 8811 	msr	BASEPRI, r3
 800a272:	f3bf 8f6f 	isb	sy
 800a276:	f3bf 8f4f 	dsb	sy
 800a27a:	60fb      	str	r3, [r7, #12]
}
 800a27c:	bf00      	nop
 800a27e:	e7fe      	b.n	800a27e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	3318      	adds	r3, #24
 800a284:	4618      	mov	r0, r3
 800a286:	f7fe fb4d 	bl	8008924 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a28a:	4b1e      	ldr	r3, [pc, #120]	; (800a304 <xTaskRemoveFromEventList+0xb0>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d11d      	bne.n	800a2ce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	3304      	adds	r3, #4
 800a296:	4618      	mov	r0, r3
 800a298:	f7fe fb44 	bl	8008924 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2a0:	4b19      	ldr	r3, [pc, #100]	; (800a308 <xTaskRemoveFromEventList+0xb4>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d903      	bls.n	800a2b0 <xTaskRemoveFromEventList+0x5c>
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ac:	4a16      	ldr	r2, [pc, #88]	; (800a308 <xTaskRemoveFromEventList+0xb4>)
 800a2ae:	6013      	str	r3, [r2, #0]
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2b4:	4613      	mov	r3, r2
 800a2b6:	009b      	lsls	r3, r3, #2
 800a2b8:	4413      	add	r3, r2
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	4a13      	ldr	r2, [pc, #76]	; (800a30c <xTaskRemoveFromEventList+0xb8>)
 800a2be:	441a      	add	r2, r3
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	3304      	adds	r3, #4
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	4610      	mov	r0, r2
 800a2c8:	f7fe facf 	bl	800886a <vListInsertEnd>
 800a2cc:	e005      	b.n	800a2da <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	3318      	adds	r3, #24
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	480e      	ldr	r0, [pc, #56]	; (800a310 <xTaskRemoveFromEventList+0xbc>)
 800a2d6:	f7fe fac8 	bl	800886a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2de:	4b0d      	ldr	r3, [pc, #52]	; (800a314 <xTaskRemoveFromEventList+0xc0>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d905      	bls.n	800a2f4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a2ec:	4b0a      	ldr	r3, [pc, #40]	; (800a318 <xTaskRemoveFromEventList+0xc4>)
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	601a      	str	r2, [r3, #0]
 800a2f2:	e001      	b.n	800a2f8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a2f8:	697b      	ldr	r3, [r7, #20]
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3718      	adds	r7, #24
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	20001194 	.word	0x20001194
 800a308:	20001174 	.word	0x20001174
 800a30c:	20000c9c 	.word	0x20000c9c
 800a310:	2000112c 	.word	0x2000112c
 800a314:	20000c98 	.word	0x20000c98
 800a318:	20001180 	.word	0x20001180

0800a31c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a31c:	b480      	push	{r7}
 800a31e:	b083      	sub	sp, #12
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a324:	4b06      	ldr	r3, [pc, #24]	; (800a340 <vTaskInternalSetTimeOutState+0x24>)
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a32c:	4b05      	ldr	r3, [pc, #20]	; (800a344 <vTaskInternalSetTimeOutState+0x28>)
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	605a      	str	r2, [r3, #4]
}
 800a334:	bf00      	nop
 800a336:	370c      	adds	r7, #12
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr
 800a340:	20001184 	.word	0x20001184
 800a344:	20001170 	.word	0x20001170

0800a348 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b088      	sub	sp, #32
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d10a      	bne.n	800a36e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35c:	f383 8811 	msr	BASEPRI, r3
 800a360:	f3bf 8f6f 	isb	sy
 800a364:	f3bf 8f4f 	dsb	sy
 800a368:	613b      	str	r3, [r7, #16]
}
 800a36a:	bf00      	nop
 800a36c:	e7fe      	b.n	800a36c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d10a      	bne.n	800a38a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a378:	f383 8811 	msr	BASEPRI, r3
 800a37c:	f3bf 8f6f 	isb	sy
 800a380:	f3bf 8f4f 	dsb	sy
 800a384:	60fb      	str	r3, [r7, #12]
}
 800a386:	bf00      	nop
 800a388:	e7fe      	b.n	800a388 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a38a:	f000 ff7b 	bl	800b284 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a38e:	4b1d      	ldr	r3, [pc, #116]	; (800a404 <xTaskCheckForTimeOut+0xbc>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	69ba      	ldr	r2, [r7, #24]
 800a39a:	1ad3      	subs	r3, r2, r3
 800a39c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3a6:	d102      	bne.n	800a3ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	61fb      	str	r3, [r7, #28]
 800a3ac:	e023      	b.n	800a3f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	4b15      	ldr	r3, [pc, #84]	; (800a408 <xTaskCheckForTimeOut+0xc0>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d007      	beq.n	800a3ca <xTaskCheckForTimeOut+0x82>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	69ba      	ldr	r2, [r7, #24]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d302      	bcc.n	800a3ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	61fb      	str	r3, [r7, #28]
 800a3c8:	e015      	b.n	800a3f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	697a      	ldr	r2, [r7, #20]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d20b      	bcs.n	800a3ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	681a      	ldr	r2, [r3, #0]
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	1ad2      	subs	r2, r2, r3
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f7ff ff9b 	bl	800a31c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	61fb      	str	r3, [r7, #28]
 800a3ea:	e004      	b.n	800a3f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a3f6:	f000 ff75 	bl	800b2e4 <vPortExitCritical>

	return xReturn;
 800a3fa:	69fb      	ldr	r3, [r7, #28]
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3720      	adds	r7, #32
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}
 800a404:	20001170 	.word	0x20001170
 800a408:	20001184 	.word	0x20001184

0800a40c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a40c:	b480      	push	{r7}
 800a40e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a410:	4b03      	ldr	r3, [pc, #12]	; (800a420 <vTaskMissedYield+0x14>)
 800a412:	2201      	movs	r2, #1
 800a414:	601a      	str	r2, [r3, #0]
}
 800a416:	bf00      	nop
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr
 800a420:	20001180 	.word	0x20001180

0800a424 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b082      	sub	sp, #8
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a42c:	f000 f852 	bl	800a4d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a430:	4b06      	ldr	r3, [pc, #24]	; (800a44c <prvIdleTask+0x28>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	2b01      	cmp	r3, #1
 800a436:	d9f9      	bls.n	800a42c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a438:	4b05      	ldr	r3, [pc, #20]	; (800a450 <prvIdleTask+0x2c>)
 800a43a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a43e:	601a      	str	r2, [r3, #0]
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a448:	e7f0      	b.n	800a42c <prvIdleTask+0x8>
 800a44a:	bf00      	nop
 800a44c:	20000c9c 	.word	0x20000c9c
 800a450:	e000ed04 	.word	0xe000ed04

0800a454 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a45a:	2300      	movs	r3, #0
 800a45c:	607b      	str	r3, [r7, #4]
 800a45e:	e00c      	b.n	800a47a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	4613      	mov	r3, r2
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	4413      	add	r3, r2
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	4a12      	ldr	r2, [pc, #72]	; (800a4b4 <prvInitialiseTaskLists+0x60>)
 800a46c:	4413      	add	r3, r2
 800a46e:	4618      	mov	r0, r3
 800a470:	f7fe f9ce 	bl	8008810 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	3301      	adds	r3, #1
 800a478:	607b      	str	r3, [r7, #4]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2b37      	cmp	r3, #55	; 0x37
 800a47e:	d9ef      	bls.n	800a460 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a480:	480d      	ldr	r0, [pc, #52]	; (800a4b8 <prvInitialiseTaskLists+0x64>)
 800a482:	f7fe f9c5 	bl	8008810 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a486:	480d      	ldr	r0, [pc, #52]	; (800a4bc <prvInitialiseTaskLists+0x68>)
 800a488:	f7fe f9c2 	bl	8008810 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a48c:	480c      	ldr	r0, [pc, #48]	; (800a4c0 <prvInitialiseTaskLists+0x6c>)
 800a48e:	f7fe f9bf 	bl	8008810 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a492:	480c      	ldr	r0, [pc, #48]	; (800a4c4 <prvInitialiseTaskLists+0x70>)
 800a494:	f7fe f9bc 	bl	8008810 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a498:	480b      	ldr	r0, [pc, #44]	; (800a4c8 <prvInitialiseTaskLists+0x74>)
 800a49a:	f7fe f9b9 	bl	8008810 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a49e:	4b0b      	ldr	r3, [pc, #44]	; (800a4cc <prvInitialiseTaskLists+0x78>)
 800a4a0:	4a05      	ldr	r2, [pc, #20]	; (800a4b8 <prvInitialiseTaskLists+0x64>)
 800a4a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a4a4:	4b0a      	ldr	r3, [pc, #40]	; (800a4d0 <prvInitialiseTaskLists+0x7c>)
 800a4a6:	4a05      	ldr	r2, [pc, #20]	; (800a4bc <prvInitialiseTaskLists+0x68>)
 800a4a8:	601a      	str	r2, [r3, #0]
}
 800a4aa:	bf00      	nop
 800a4ac:	3708      	adds	r7, #8
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	20000c9c 	.word	0x20000c9c
 800a4b8:	200010fc 	.word	0x200010fc
 800a4bc:	20001110 	.word	0x20001110
 800a4c0:	2000112c 	.word	0x2000112c
 800a4c4:	20001140 	.word	0x20001140
 800a4c8:	20001158 	.word	0x20001158
 800a4cc:	20001124 	.word	0x20001124
 800a4d0:	20001128 	.word	0x20001128

0800a4d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b082      	sub	sp, #8
 800a4d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a4da:	e019      	b.n	800a510 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a4dc:	f000 fed2 	bl	800b284 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4e0:	4b10      	ldr	r3, [pc, #64]	; (800a524 <prvCheckTasksWaitingTermination+0x50>)
 800a4e2:	68db      	ldr	r3, [r3, #12]
 800a4e4:	68db      	ldr	r3, [r3, #12]
 800a4e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	3304      	adds	r3, #4
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f7fe fa19 	bl	8008924 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a4f2:	4b0d      	ldr	r3, [pc, #52]	; (800a528 <prvCheckTasksWaitingTermination+0x54>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	3b01      	subs	r3, #1
 800a4f8:	4a0b      	ldr	r2, [pc, #44]	; (800a528 <prvCheckTasksWaitingTermination+0x54>)
 800a4fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a4fc:	4b0b      	ldr	r3, [pc, #44]	; (800a52c <prvCheckTasksWaitingTermination+0x58>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	3b01      	subs	r3, #1
 800a502:	4a0a      	ldr	r2, [pc, #40]	; (800a52c <prvCheckTasksWaitingTermination+0x58>)
 800a504:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a506:	f000 feed 	bl	800b2e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 f810 	bl	800a530 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a510:	4b06      	ldr	r3, [pc, #24]	; (800a52c <prvCheckTasksWaitingTermination+0x58>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d1e1      	bne.n	800a4dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a518:	bf00      	nop
 800a51a:	bf00      	nop
 800a51c:	3708      	adds	r7, #8
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	20001140 	.word	0x20001140
 800a528:	2000116c 	.word	0x2000116c
 800a52c:	20001154 	.word	0x20001154

0800a530 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d108      	bne.n	800a554 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a546:	4618      	mov	r0, r3
 800a548:	f001 f88a 	bl	800b660 <vPortFree>
				vPortFree( pxTCB );
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f001 f887 	bl	800b660 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a552:	e018      	b.n	800a586 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d103      	bne.n	800a566 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f001 f87e 	bl	800b660 <vPortFree>
	}
 800a564:	e00f      	b.n	800a586 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a56c:	2b02      	cmp	r3, #2
 800a56e:	d00a      	beq.n	800a586 <prvDeleteTCB+0x56>
	__asm volatile
 800a570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a574:	f383 8811 	msr	BASEPRI, r3
 800a578:	f3bf 8f6f 	isb	sy
 800a57c:	f3bf 8f4f 	dsb	sy
 800a580:	60fb      	str	r3, [r7, #12]
}
 800a582:	bf00      	nop
 800a584:	e7fe      	b.n	800a584 <prvDeleteTCB+0x54>
	}
 800a586:	bf00      	nop
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
	...

0800a590 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a596:	4b0c      	ldr	r3, [pc, #48]	; (800a5c8 <prvResetNextTaskUnblockTime+0x38>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d104      	bne.n	800a5aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a5a0:	4b0a      	ldr	r3, [pc, #40]	; (800a5cc <prvResetNextTaskUnblockTime+0x3c>)
 800a5a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a5a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a5a8:	e008      	b.n	800a5bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5aa:	4b07      	ldr	r3, [pc, #28]	; (800a5c8 <prvResetNextTaskUnblockTime+0x38>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	68db      	ldr	r3, [r3, #12]
 800a5b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	4a04      	ldr	r2, [pc, #16]	; (800a5cc <prvResetNextTaskUnblockTime+0x3c>)
 800a5ba:	6013      	str	r3, [r2, #0]
}
 800a5bc:	bf00      	nop
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr
 800a5c8:	20001124 	.word	0x20001124
 800a5cc:	2000118c 	.word	0x2000118c

0800a5d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b083      	sub	sp, #12
 800a5d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a5d6:	4b0b      	ldr	r3, [pc, #44]	; (800a604 <xTaskGetSchedulerState+0x34>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d102      	bne.n	800a5e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	607b      	str	r3, [r7, #4]
 800a5e2:	e008      	b.n	800a5f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5e4:	4b08      	ldr	r3, [pc, #32]	; (800a608 <xTaskGetSchedulerState+0x38>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d102      	bne.n	800a5f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a5ec:	2302      	movs	r3, #2
 800a5ee:	607b      	str	r3, [r7, #4]
 800a5f0:	e001      	b.n	800a5f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a5f6:	687b      	ldr	r3, [r7, #4]
	}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	370c      	adds	r7, #12
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr
 800a604:	20001178 	.word	0x20001178
 800a608:	20001194 	.word	0x20001194

0800a60c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a618:	2300      	movs	r3, #0
 800a61a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d051      	beq.n	800a6c6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a626:	4b2a      	ldr	r3, [pc, #168]	; (800a6d0 <xTaskPriorityInherit+0xc4>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d241      	bcs.n	800a6b4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	699b      	ldr	r3, [r3, #24]
 800a634:	2b00      	cmp	r3, #0
 800a636:	db06      	blt.n	800a646 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a638:	4b25      	ldr	r3, [pc, #148]	; (800a6d0 <xTaskPriorityInherit+0xc4>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a63e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	6959      	ldr	r1, [r3, #20]
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a64e:	4613      	mov	r3, r2
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	4413      	add	r3, r2
 800a654:	009b      	lsls	r3, r3, #2
 800a656:	4a1f      	ldr	r2, [pc, #124]	; (800a6d4 <xTaskPriorityInherit+0xc8>)
 800a658:	4413      	add	r3, r2
 800a65a:	4299      	cmp	r1, r3
 800a65c:	d122      	bne.n	800a6a4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	3304      	adds	r3, #4
 800a662:	4618      	mov	r0, r3
 800a664:	f7fe f95e 	bl	8008924 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a668:	4b19      	ldr	r3, [pc, #100]	; (800a6d0 <xTaskPriorityInherit+0xc4>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a676:	4b18      	ldr	r3, [pc, #96]	; (800a6d8 <xTaskPriorityInherit+0xcc>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d903      	bls.n	800a686 <xTaskPriorityInherit+0x7a>
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a682:	4a15      	ldr	r2, [pc, #84]	; (800a6d8 <xTaskPriorityInherit+0xcc>)
 800a684:	6013      	str	r3, [r2, #0]
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a68a:	4613      	mov	r3, r2
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	4413      	add	r3, r2
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	4a10      	ldr	r2, [pc, #64]	; (800a6d4 <xTaskPriorityInherit+0xc8>)
 800a694:	441a      	add	r2, r3
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	3304      	adds	r3, #4
 800a69a:	4619      	mov	r1, r3
 800a69c:	4610      	mov	r0, r2
 800a69e:	f7fe f8e4 	bl	800886a <vListInsertEnd>
 800a6a2:	e004      	b.n	800a6ae <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a6a4:	4b0a      	ldr	r3, [pc, #40]	; (800a6d0 <xTaskPriorityInherit+0xc4>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	60fb      	str	r3, [r7, #12]
 800a6b2:	e008      	b.n	800a6c6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a6b8:	4b05      	ldr	r3, [pc, #20]	; (800a6d0 <xTaskPriorityInherit+0xc4>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d201      	bcs.n	800a6c6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
	}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3710      	adds	r7, #16
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	20000c98 	.word	0x20000c98
 800a6d4:	20000c9c 	.word	0x20000c9c
 800a6d8:	20001174 	.word	0x20001174

0800a6dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b086      	sub	sp, #24
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d056      	beq.n	800a7a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a6f2:	4b2e      	ldr	r3, [pc, #184]	; (800a7ac <xTaskPriorityDisinherit+0xd0>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	693a      	ldr	r2, [r7, #16]
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d00a      	beq.n	800a712 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a700:	f383 8811 	msr	BASEPRI, r3
 800a704:	f3bf 8f6f 	isb	sy
 800a708:	f3bf 8f4f 	dsb	sy
 800a70c:	60fb      	str	r3, [r7, #12]
}
 800a70e:	bf00      	nop
 800a710:	e7fe      	b.n	800a710 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a716:	2b00      	cmp	r3, #0
 800a718:	d10a      	bne.n	800a730 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71e:	f383 8811 	msr	BASEPRI, r3
 800a722:	f3bf 8f6f 	isb	sy
 800a726:	f3bf 8f4f 	dsb	sy
 800a72a:	60bb      	str	r3, [r7, #8]
}
 800a72c:	bf00      	nop
 800a72e:	e7fe      	b.n	800a72e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a734:	1e5a      	subs	r2, r3, #1
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a742:	429a      	cmp	r2, r3
 800a744:	d02c      	beq.n	800a7a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d128      	bne.n	800a7a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	3304      	adds	r3, #4
 800a752:	4618      	mov	r0, r3
 800a754:	f7fe f8e6 	bl	8008924 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a764:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a770:	4b0f      	ldr	r3, [pc, #60]	; (800a7b0 <xTaskPriorityDisinherit+0xd4>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	429a      	cmp	r2, r3
 800a776:	d903      	bls.n	800a780 <xTaskPriorityDisinherit+0xa4>
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a77c:	4a0c      	ldr	r2, [pc, #48]	; (800a7b0 <xTaskPriorityDisinherit+0xd4>)
 800a77e:	6013      	str	r3, [r2, #0]
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a784:	4613      	mov	r3, r2
 800a786:	009b      	lsls	r3, r3, #2
 800a788:	4413      	add	r3, r2
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	4a09      	ldr	r2, [pc, #36]	; (800a7b4 <xTaskPriorityDisinherit+0xd8>)
 800a78e:	441a      	add	r2, r3
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	3304      	adds	r3, #4
 800a794:	4619      	mov	r1, r3
 800a796:	4610      	mov	r0, r2
 800a798:	f7fe f867 	bl	800886a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a79c:	2301      	movs	r3, #1
 800a79e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a7a0:	697b      	ldr	r3, [r7, #20]
	}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3718      	adds	r7, #24
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	20000c98 	.word	0x20000c98
 800a7b0:	20001174 	.word	0x20001174
 800a7b4:	20000c9c 	.word	0x20000c9c

0800a7b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b088      	sub	sp, #32
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d06a      	beq.n	800a8a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a7d0:	69bb      	ldr	r3, [r7, #24]
 800a7d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d10a      	bne.n	800a7ee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7dc:	f383 8811 	msr	BASEPRI, r3
 800a7e0:	f3bf 8f6f 	isb	sy
 800a7e4:	f3bf 8f4f 	dsb	sy
 800a7e8:	60fb      	str	r3, [r7, #12]
}
 800a7ea:	bf00      	nop
 800a7ec:	e7fe      	b.n	800a7ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a7ee:	69bb      	ldr	r3, [r7, #24]
 800a7f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7f2:	683a      	ldr	r2, [r7, #0]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d902      	bls.n	800a7fe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	61fb      	str	r3, [r7, #28]
 800a7fc:	e002      	b.n	800a804 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a7fe:	69bb      	ldr	r3, [r7, #24]
 800a800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a802:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a804:	69bb      	ldr	r3, [r7, #24]
 800a806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a808:	69fa      	ldr	r2, [r7, #28]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d04b      	beq.n	800a8a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a80e:	69bb      	ldr	r3, [r7, #24]
 800a810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a812:	697a      	ldr	r2, [r7, #20]
 800a814:	429a      	cmp	r2, r3
 800a816:	d146      	bne.n	800a8a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a818:	4b25      	ldr	r3, [pc, #148]	; (800a8b0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	69ba      	ldr	r2, [r7, #24]
 800a81e:	429a      	cmp	r2, r3
 800a820:	d10a      	bne.n	800a838 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a826:	f383 8811 	msr	BASEPRI, r3
 800a82a:	f3bf 8f6f 	isb	sy
 800a82e:	f3bf 8f4f 	dsb	sy
 800a832:	60bb      	str	r3, [r7, #8]
}
 800a834:	bf00      	nop
 800a836:	e7fe      	b.n	800a836 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a83c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a83e:	69bb      	ldr	r3, [r7, #24]
 800a840:	69fa      	ldr	r2, [r7, #28]
 800a842:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a844:	69bb      	ldr	r3, [r7, #24]
 800a846:	699b      	ldr	r3, [r3, #24]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	db04      	blt.n	800a856 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a84c:	69fb      	ldr	r3, [r7, #28]
 800a84e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a856:	69bb      	ldr	r3, [r7, #24]
 800a858:	6959      	ldr	r1, [r3, #20]
 800a85a:	693a      	ldr	r2, [r7, #16]
 800a85c:	4613      	mov	r3, r2
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	4413      	add	r3, r2
 800a862:	009b      	lsls	r3, r3, #2
 800a864:	4a13      	ldr	r2, [pc, #76]	; (800a8b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a866:	4413      	add	r3, r2
 800a868:	4299      	cmp	r1, r3
 800a86a:	d11c      	bne.n	800a8a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a86c:	69bb      	ldr	r3, [r7, #24]
 800a86e:	3304      	adds	r3, #4
 800a870:	4618      	mov	r0, r3
 800a872:	f7fe f857 	bl	8008924 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a876:	69bb      	ldr	r3, [r7, #24]
 800a878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a87a:	4b0f      	ldr	r3, [pc, #60]	; (800a8b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	429a      	cmp	r2, r3
 800a880:	d903      	bls.n	800a88a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800a882:	69bb      	ldr	r3, [r7, #24]
 800a884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a886:	4a0c      	ldr	r2, [pc, #48]	; (800a8b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a888:	6013      	str	r3, [r2, #0]
 800a88a:	69bb      	ldr	r3, [r7, #24]
 800a88c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a88e:	4613      	mov	r3, r2
 800a890:	009b      	lsls	r3, r3, #2
 800a892:	4413      	add	r3, r2
 800a894:	009b      	lsls	r3, r3, #2
 800a896:	4a07      	ldr	r2, [pc, #28]	; (800a8b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a898:	441a      	add	r2, r3
 800a89a:	69bb      	ldr	r3, [r7, #24]
 800a89c:	3304      	adds	r3, #4
 800a89e:	4619      	mov	r1, r3
 800a8a0:	4610      	mov	r0, r2
 800a8a2:	f7fd ffe2 	bl	800886a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a8a6:	bf00      	nop
 800a8a8:	3720      	adds	r7, #32
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	20000c98 	.word	0x20000c98
 800a8b4:	20000c9c 	.word	0x20000c9c
 800a8b8:	20001174 	.word	0x20001174

0800a8bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a8bc:	b480      	push	{r7}
 800a8be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a8c0:	4b07      	ldr	r3, [pc, #28]	; (800a8e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d004      	beq.n	800a8d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a8c8:	4b05      	ldr	r3, [pc, #20]	; (800a8e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a8ce:	3201      	adds	r2, #1
 800a8d0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a8d2:	4b03      	ldr	r3, [pc, #12]	; (800a8e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
	}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr
 800a8e0:	20000c98 	.word	0x20000c98

0800a8e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a8ee:	4b21      	ldr	r3, [pc, #132]	; (800a974 <prvAddCurrentTaskToDelayedList+0x90>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8f4:	4b20      	ldr	r3, [pc, #128]	; (800a978 <prvAddCurrentTaskToDelayedList+0x94>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	3304      	adds	r3, #4
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f7fe f812 	bl	8008924 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a906:	d10a      	bne.n	800a91e <prvAddCurrentTaskToDelayedList+0x3a>
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d007      	beq.n	800a91e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a90e:	4b1a      	ldr	r3, [pc, #104]	; (800a978 <prvAddCurrentTaskToDelayedList+0x94>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	3304      	adds	r3, #4
 800a914:	4619      	mov	r1, r3
 800a916:	4819      	ldr	r0, [pc, #100]	; (800a97c <prvAddCurrentTaskToDelayedList+0x98>)
 800a918:	f7fd ffa7 	bl	800886a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a91c:	e026      	b.n	800a96c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a91e:	68fa      	ldr	r2, [r7, #12]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	4413      	add	r3, r2
 800a924:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a926:	4b14      	ldr	r3, [pc, #80]	; (800a978 <prvAddCurrentTaskToDelayedList+0x94>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	68ba      	ldr	r2, [r7, #8]
 800a92c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a92e:	68ba      	ldr	r2, [r7, #8]
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	429a      	cmp	r2, r3
 800a934:	d209      	bcs.n	800a94a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a936:	4b12      	ldr	r3, [pc, #72]	; (800a980 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	4b0f      	ldr	r3, [pc, #60]	; (800a978 <prvAddCurrentTaskToDelayedList+0x94>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	3304      	adds	r3, #4
 800a940:	4619      	mov	r1, r3
 800a942:	4610      	mov	r0, r2
 800a944:	f7fd ffb5 	bl	80088b2 <vListInsert>
}
 800a948:	e010      	b.n	800a96c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a94a:	4b0e      	ldr	r3, [pc, #56]	; (800a984 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	4b0a      	ldr	r3, [pc, #40]	; (800a978 <prvAddCurrentTaskToDelayedList+0x94>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	3304      	adds	r3, #4
 800a954:	4619      	mov	r1, r3
 800a956:	4610      	mov	r0, r2
 800a958:	f7fd ffab 	bl	80088b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a95c:	4b0a      	ldr	r3, [pc, #40]	; (800a988 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	68ba      	ldr	r2, [r7, #8]
 800a962:	429a      	cmp	r2, r3
 800a964:	d202      	bcs.n	800a96c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a966:	4a08      	ldr	r2, [pc, #32]	; (800a988 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	6013      	str	r3, [r2, #0]
}
 800a96c:	bf00      	nop
 800a96e:	3710      	adds	r7, #16
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}
 800a974:	20001170 	.word	0x20001170
 800a978:	20000c98 	.word	0x20000c98
 800a97c:	20001158 	.word	0x20001158
 800a980:	20001128 	.word	0x20001128
 800a984:	20001124 	.word	0x20001124
 800a988:	2000118c 	.word	0x2000118c

0800a98c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b08a      	sub	sp, #40	; 0x28
 800a990:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a992:	2300      	movs	r3, #0
 800a994:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a996:	f000 fb07 	bl	800afa8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a99a:	4b1c      	ldr	r3, [pc, #112]	; (800aa0c <xTimerCreateTimerTask+0x80>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d021      	beq.n	800a9e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a9aa:	1d3a      	adds	r2, r7, #4
 800a9ac:	f107 0108 	add.w	r1, r7, #8
 800a9b0:	f107 030c 	add.w	r3, r7, #12
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7fd ff11 	bl	80087dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a9ba:	6879      	ldr	r1, [r7, #4]
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	68fa      	ldr	r2, [r7, #12]
 800a9c0:	9202      	str	r2, [sp, #8]
 800a9c2:	9301      	str	r3, [sp, #4]
 800a9c4:	2302      	movs	r3, #2
 800a9c6:	9300      	str	r3, [sp, #0]
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	460a      	mov	r2, r1
 800a9cc:	4910      	ldr	r1, [pc, #64]	; (800aa10 <xTimerCreateTimerTask+0x84>)
 800a9ce:	4811      	ldr	r0, [pc, #68]	; (800aa14 <xTimerCreateTimerTask+0x88>)
 800a9d0:	f7fe ffe0 	bl	8009994 <xTaskCreateStatic>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	4a10      	ldr	r2, [pc, #64]	; (800aa18 <xTimerCreateTimerTask+0x8c>)
 800a9d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a9da:	4b0f      	ldr	r3, [pc, #60]	; (800aa18 <xTimerCreateTimerTask+0x8c>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d001      	beq.n	800a9e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d10a      	bne.n	800aa02 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f0:	f383 8811 	msr	BASEPRI, r3
 800a9f4:	f3bf 8f6f 	isb	sy
 800a9f8:	f3bf 8f4f 	dsb	sy
 800a9fc:	613b      	str	r3, [r7, #16]
}
 800a9fe:	bf00      	nop
 800aa00:	e7fe      	b.n	800aa00 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800aa02:	697b      	ldr	r3, [r7, #20]
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3718      	adds	r7, #24
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}
 800aa0c:	200011c8 	.word	0x200011c8
 800aa10:	0800f0c8 	.word	0x0800f0c8
 800aa14:	0800ab51 	.word	0x0800ab51
 800aa18:	200011cc 	.word	0x200011cc

0800aa1c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b08a      	sub	sp, #40	; 0x28
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	607a      	str	r2, [r7, #4]
 800aa28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d10a      	bne.n	800aa4a <xTimerGenericCommand+0x2e>
	__asm volatile
 800aa34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa38:	f383 8811 	msr	BASEPRI, r3
 800aa3c:	f3bf 8f6f 	isb	sy
 800aa40:	f3bf 8f4f 	dsb	sy
 800aa44:	623b      	str	r3, [r7, #32]
}
 800aa46:	bf00      	nop
 800aa48:	e7fe      	b.n	800aa48 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aa4a:	4b1a      	ldr	r3, [pc, #104]	; (800aab4 <xTimerGenericCommand+0x98>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d02a      	beq.n	800aaa8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	2b05      	cmp	r3, #5
 800aa62:	dc18      	bgt.n	800aa96 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aa64:	f7ff fdb4 	bl	800a5d0 <xTaskGetSchedulerState>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	2b02      	cmp	r3, #2
 800aa6c:	d109      	bne.n	800aa82 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aa6e:	4b11      	ldr	r3, [pc, #68]	; (800aab4 <xTimerGenericCommand+0x98>)
 800aa70:	6818      	ldr	r0, [r3, #0]
 800aa72:	f107 0110 	add.w	r1, r7, #16
 800aa76:	2300      	movs	r3, #0
 800aa78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa7a:	f7fe f925 	bl	8008cc8 <xQueueGenericSend>
 800aa7e:	6278      	str	r0, [r7, #36]	; 0x24
 800aa80:	e012      	b.n	800aaa8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aa82:	4b0c      	ldr	r3, [pc, #48]	; (800aab4 <xTimerGenericCommand+0x98>)
 800aa84:	6818      	ldr	r0, [r3, #0]
 800aa86:	f107 0110 	add.w	r1, r7, #16
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	f7fe f91b 	bl	8008cc8 <xQueueGenericSend>
 800aa92:	6278      	str	r0, [r7, #36]	; 0x24
 800aa94:	e008      	b.n	800aaa8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aa96:	4b07      	ldr	r3, [pc, #28]	; (800aab4 <xTimerGenericCommand+0x98>)
 800aa98:	6818      	ldr	r0, [r3, #0]
 800aa9a:	f107 0110 	add.w	r1, r7, #16
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	683a      	ldr	r2, [r7, #0]
 800aaa2:	f7fe fa0f 	bl	8008ec4 <xQueueGenericSendFromISR>
 800aaa6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aaa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3728      	adds	r7, #40	; 0x28
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop
 800aab4:	200011c8 	.word	0x200011c8

0800aab8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b088      	sub	sp, #32
 800aabc:	af02      	add	r7, sp, #8
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aac2:	4b22      	ldr	r3, [pc, #136]	; (800ab4c <prvProcessExpiredTimer+0x94>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	68db      	ldr	r3, [r3, #12]
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	3304      	adds	r3, #4
 800aad0:	4618      	mov	r0, r3
 800aad2:	f7fd ff27 	bl	8008924 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aadc:	f003 0304 	and.w	r3, r3, #4
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d022      	beq.n	800ab2a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	699a      	ldr	r2, [r3, #24]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	18d1      	adds	r1, r2, r3
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	683a      	ldr	r2, [r7, #0]
 800aaf0:	6978      	ldr	r0, [r7, #20]
 800aaf2:	f000 f8d1 	bl	800ac98 <prvInsertTimerInActiveList>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d01f      	beq.n	800ab3c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aafc:	2300      	movs	r3, #0
 800aafe:	9300      	str	r3, [sp, #0]
 800ab00:	2300      	movs	r3, #0
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	2100      	movs	r1, #0
 800ab06:	6978      	ldr	r0, [r7, #20]
 800ab08:	f7ff ff88 	bl	800aa1c <xTimerGenericCommand>
 800ab0c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d113      	bne.n	800ab3c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ab14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab18:	f383 8811 	msr	BASEPRI, r3
 800ab1c:	f3bf 8f6f 	isb	sy
 800ab20:	f3bf 8f4f 	dsb	sy
 800ab24:	60fb      	str	r3, [r7, #12]
}
 800ab26:	bf00      	nop
 800ab28:	e7fe      	b.n	800ab28 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab30:	f023 0301 	bic.w	r3, r3, #1
 800ab34:	b2da      	uxtb	r2, r3
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	6a1b      	ldr	r3, [r3, #32]
 800ab40:	6978      	ldr	r0, [r7, #20]
 800ab42:	4798      	blx	r3
}
 800ab44:	bf00      	nop
 800ab46:	3718      	adds	r7, #24
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	200011c0 	.word	0x200011c0

0800ab50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ab58:	f107 0308 	add.w	r3, r7, #8
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f000 f857 	bl	800ac10 <prvGetNextExpireTime>
 800ab62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	4619      	mov	r1, r3
 800ab68:	68f8      	ldr	r0, [r7, #12]
 800ab6a:	f000 f803 	bl	800ab74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ab6e:	f000 f8d5 	bl	800ad1c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ab72:	e7f1      	b.n	800ab58 <prvTimerTask+0x8>

0800ab74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b084      	sub	sp, #16
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ab7e:	f7ff f945 	bl	8009e0c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ab82:	f107 0308 	add.w	r3, r7, #8
 800ab86:	4618      	mov	r0, r3
 800ab88:	f000 f866 	bl	800ac58 <prvSampleTimeNow>
 800ab8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d130      	bne.n	800abf6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d10a      	bne.n	800abb0 <prvProcessTimerOrBlockTask+0x3c>
 800ab9a:	687a      	ldr	r2, [r7, #4]
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d806      	bhi.n	800abb0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aba2:	f7ff f941 	bl	8009e28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aba6:	68f9      	ldr	r1, [r7, #12]
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f7ff ff85 	bl	800aab8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800abae:	e024      	b.n	800abfa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d008      	beq.n	800abc8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800abb6:	4b13      	ldr	r3, [pc, #76]	; (800ac04 <prvProcessTimerOrBlockTask+0x90>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d101      	bne.n	800abc4 <prvProcessTimerOrBlockTask+0x50>
 800abc0:	2301      	movs	r3, #1
 800abc2:	e000      	b.n	800abc6 <prvProcessTimerOrBlockTask+0x52>
 800abc4:	2300      	movs	r3, #0
 800abc6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800abc8:	4b0f      	ldr	r3, [pc, #60]	; (800ac08 <prvProcessTimerOrBlockTask+0x94>)
 800abca:	6818      	ldr	r0, [r3, #0]
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	1ad3      	subs	r3, r2, r3
 800abd2:	683a      	ldr	r2, [r7, #0]
 800abd4:	4619      	mov	r1, r3
 800abd6:	f7fe fea9 	bl	800992c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800abda:	f7ff f925 	bl	8009e28 <xTaskResumeAll>
 800abde:	4603      	mov	r3, r0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d10a      	bne.n	800abfa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800abe4:	4b09      	ldr	r3, [pc, #36]	; (800ac0c <prvProcessTimerOrBlockTask+0x98>)
 800abe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abea:	601a      	str	r2, [r3, #0]
 800abec:	f3bf 8f4f 	dsb	sy
 800abf0:	f3bf 8f6f 	isb	sy
}
 800abf4:	e001      	b.n	800abfa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800abf6:	f7ff f917 	bl	8009e28 <xTaskResumeAll>
}
 800abfa:	bf00      	nop
 800abfc:	3710      	adds	r7, #16
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop
 800ac04:	200011c4 	.word	0x200011c4
 800ac08:	200011c8 	.word	0x200011c8
 800ac0c:	e000ed04 	.word	0xe000ed04

0800ac10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ac10:	b480      	push	{r7}
 800ac12:	b085      	sub	sp, #20
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ac18:	4b0e      	ldr	r3, [pc, #56]	; (800ac54 <prvGetNextExpireTime+0x44>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d101      	bne.n	800ac26 <prvGetNextExpireTime+0x16>
 800ac22:	2201      	movs	r2, #1
 800ac24:	e000      	b.n	800ac28 <prvGetNextExpireTime+0x18>
 800ac26:	2200      	movs	r2, #0
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d105      	bne.n	800ac40 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ac34:	4b07      	ldr	r3, [pc, #28]	; (800ac54 <prvGetNextExpireTime+0x44>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	68db      	ldr	r3, [r3, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	60fb      	str	r3, [r7, #12]
 800ac3e:	e001      	b.n	800ac44 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ac40:	2300      	movs	r3, #0
 800ac42:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ac44:	68fb      	ldr	r3, [r7, #12]
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3714      	adds	r7, #20
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr
 800ac52:	bf00      	nop
 800ac54:	200011c0 	.word	0x200011c0

0800ac58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ac60:	f7ff f980 	bl	8009f64 <xTaskGetTickCount>
 800ac64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ac66:	4b0b      	ldr	r3, [pc, #44]	; (800ac94 <prvSampleTimeNow+0x3c>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	68fa      	ldr	r2, [r7, #12]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d205      	bcs.n	800ac7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ac70:	f000 f936 	bl	800aee0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2201      	movs	r2, #1
 800ac78:	601a      	str	r2, [r3, #0]
 800ac7a:	e002      	b.n	800ac82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ac82:	4a04      	ldr	r2, [pc, #16]	; (800ac94 <prvSampleTimeNow+0x3c>)
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ac88:	68fb      	ldr	r3, [r7, #12]
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3710      	adds	r7, #16
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	200011d0 	.word	0x200011d0

0800ac98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b086      	sub	sp, #24
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	60f8      	str	r0, [r7, #12]
 800aca0:	60b9      	str	r1, [r7, #8]
 800aca2:	607a      	str	r2, [r7, #4]
 800aca4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800aca6:	2300      	movs	r3, #0
 800aca8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	68ba      	ldr	r2, [r7, #8]
 800acae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	68fa      	ldr	r2, [r7, #12]
 800acb4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800acb6:	68ba      	ldr	r2, [r7, #8]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	429a      	cmp	r2, r3
 800acbc:	d812      	bhi.n	800ace4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	1ad2      	subs	r2, r2, r3
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	699b      	ldr	r3, [r3, #24]
 800acc8:	429a      	cmp	r2, r3
 800acca:	d302      	bcc.n	800acd2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800accc:	2301      	movs	r3, #1
 800acce:	617b      	str	r3, [r7, #20]
 800acd0:	e01b      	b.n	800ad0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800acd2:	4b10      	ldr	r3, [pc, #64]	; (800ad14 <prvInsertTimerInActiveList+0x7c>)
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	3304      	adds	r3, #4
 800acda:	4619      	mov	r1, r3
 800acdc:	4610      	mov	r0, r2
 800acde:	f7fd fde8 	bl	80088b2 <vListInsert>
 800ace2:	e012      	b.n	800ad0a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	429a      	cmp	r2, r3
 800acea:	d206      	bcs.n	800acfa <prvInsertTimerInActiveList+0x62>
 800acec:	68ba      	ldr	r2, [r7, #8]
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d302      	bcc.n	800acfa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800acf4:	2301      	movs	r3, #1
 800acf6:	617b      	str	r3, [r7, #20]
 800acf8:	e007      	b.n	800ad0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800acfa:	4b07      	ldr	r3, [pc, #28]	; (800ad18 <prvInsertTimerInActiveList+0x80>)
 800acfc:	681a      	ldr	r2, [r3, #0]
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	3304      	adds	r3, #4
 800ad02:	4619      	mov	r1, r3
 800ad04:	4610      	mov	r0, r2
 800ad06:	f7fd fdd4 	bl	80088b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ad0a:	697b      	ldr	r3, [r7, #20]
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3718      	adds	r7, #24
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}
 800ad14:	200011c4 	.word	0x200011c4
 800ad18:	200011c0 	.word	0x200011c0

0800ad1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b08e      	sub	sp, #56	; 0x38
 800ad20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ad22:	e0ca      	b.n	800aeba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	da18      	bge.n	800ad5c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ad2a:	1d3b      	adds	r3, r7, #4
 800ad2c:	3304      	adds	r3, #4
 800ad2e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ad30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d10a      	bne.n	800ad4c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ad36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3a:	f383 8811 	msr	BASEPRI, r3
 800ad3e:	f3bf 8f6f 	isb	sy
 800ad42:	f3bf 8f4f 	dsb	sy
 800ad46:	61fb      	str	r3, [r7, #28]
}
 800ad48:	bf00      	nop
 800ad4a:	e7fe      	b.n	800ad4a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ad4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad52:	6850      	ldr	r0, [r2, #4]
 800ad54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad56:	6892      	ldr	r2, [r2, #8]
 800ad58:	4611      	mov	r1, r2
 800ad5a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	f2c0 80aa 	blt.w	800aeb8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ad68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6a:	695b      	ldr	r3, [r3, #20]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d004      	beq.n	800ad7a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad72:	3304      	adds	r3, #4
 800ad74:	4618      	mov	r0, r3
 800ad76:	f7fd fdd5 	bl	8008924 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ad7a:	463b      	mov	r3, r7
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f7ff ff6b 	bl	800ac58 <prvSampleTimeNow>
 800ad82:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2b09      	cmp	r3, #9
 800ad88:	f200 8097 	bhi.w	800aeba <prvProcessReceivedCommands+0x19e>
 800ad8c:	a201      	add	r2, pc, #4	; (adr r2, 800ad94 <prvProcessReceivedCommands+0x78>)
 800ad8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad92:	bf00      	nop
 800ad94:	0800adbd 	.word	0x0800adbd
 800ad98:	0800adbd 	.word	0x0800adbd
 800ad9c:	0800adbd 	.word	0x0800adbd
 800ada0:	0800ae31 	.word	0x0800ae31
 800ada4:	0800ae45 	.word	0x0800ae45
 800ada8:	0800ae8f 	.word	0x0800ae8f
 800adac:	0800adbd 	.word	0x0800adbd
 800adb0:	0800adbd 	.word	0x0800adbd
 800adb4:	0800ae31 	.word	0x0800ae31
 800adb8:	0800ae45 	.word	0x0800ae45
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800adbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800adc2:	f043 0301 	orr.w	r3, r3, #1
 800adc6:	b2da      	uxtb	r2, r3
 800adc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800adce:	68ba      	ldr	r2, [r7, #8]
 800add0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add2:	699b      	ldr	r3, [r3, #24]
 800add4:	18d1      	adds	r1, r2, r3
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800addc:	f7ff ff5c 	bl	800ac98 <prvInsertTimerInActiveList>
 800ade0:	4603      	mov	r3, r0
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d069      	beq.n	800aeba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ade6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade8:	6a1b      	ldr	r3, [r3, #32]
 800adea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800adee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800adf4:	f003 0304 	and.w	r3, r3, #4
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d05e      	beq.n	800aeba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800adfc:	68ba      	ldr	r2, [r7, #8]
 800adfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae00:	699b      	ldr	r3, [r3, #24]
 800ae02:	441a      	add	r2, r3
 800ae04:	2300      	movs	r3, #0
 800ae06:	9300      	str	r3, [sp, #0]
 800ae08:	2300      	movs	r3, #0
 800ae0a:	2100      	movs	r1, #0
 800ae0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae0e:	f7ff fe05 	bl	800aa1c <xTimerGenericCommand>
 800ae12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ae14:	6a3b      	ldr	r3, [r7, #32]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d14f      	bne.n	800aeba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ae1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae1e:	f383 8811 	msr	BASEPRI, r3
 800ae22:	f3bf 8f6f 	isb	sy
 800ae26:	f3bf 8f4f 	dsb	sy
 800ae2a:	61bb      	str	r3, [r7, #24]
}
 800ae2c:	bf00      	nop
 800ae2e:	e7fe      	b.n	800ae2e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae36:	f023 0301 	bic.w	r3, r3, #1
 800ae3a:	b2da      	uxtb	r2, r3
 800ae3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ae42:	e03a      	b.n	800aeba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ae44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae4a:	f043 0301 	orr.w	r3, r3, #1
 800ae4e:	b2da      	uxtb	r2, r3
 800ae50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ae56:	68ba      	ldr	r2, [r7, #8]
 800ae58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ae5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5e:	699b      	ldr	r3, [r3, #24]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d10a      	bne.n	800ae7a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ae64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae68:	f383 8811 	msr	BASEPRI, r3
 800ae6c:	f3bf 8f6f 	isb	sy
 800ae70:	f3bf 8f4f 	dsb	sy
 800ae74:	617b      	str	r3, [r7, #20]
}
 800ae76:	bf00      	nop
 800ae78:	e7fe      	b.n	800ae78 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ae7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7c:	699a      	ldr	r2, [r3, #24]
 800ae7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae80:	18d1      	adds	r1, r2, r3
 800ae82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae88:	f7ff ff06 	bl	800ac98 <prvInsertTimerInActiveList>
					break;
 800ae8c:	e015      	b.n	800aeba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ae8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae94:	f003 0302 	and.w	r3, r3, #2
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d103      	bne.n	800aea4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ae9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae9e:	f000 fbdf 	bl	800b660 <vPortFree>
 800aea2:	e00a      	b.n	800aeba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aeaa:	f023 0301 	bic.w	r3, r3, #1
 800aeae:	b2da      	uxtb	r2, r3
 800aeb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aeb6:	e000      	b.n	800aeba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800aeb8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aeba:	4b08      	ldr	r3, [pc, #32]	; (800aedc <prvProcessReceivedCommands+0x1c0>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	1d39      	adds	r1, r7, #4
 800aec0:	2200      	movs	r2, #0
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7fe f926 	bl	8009114 <xQueueReceive>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	f47f af2a 	bne.w	800ad24 <prvProcessReceivedCommands+0x8>
	}
}
 800aed0:	bf00      	nop
 800aed2:	bf00      	nop
 800aed4:	3730      	adds	r7, #48	; 0x30
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	200011c8 	.word	0x200011c8

0800aee0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b088      	sub	sp, #32
 800aee4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aee6:	e048      	b.n	800af7a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aee8:	4b2d      	ldr	r3, [pc, #180]	; (800afa0 <prvSwitchTimerLists+0xc0>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	68db      	ldr	r3, [r3, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aef2:	4b2b      	ldr	r3, [pc, #172]	; (800afa0 <prvSwitchTimerLists+0xc0>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	68db      	ldr	r3, [r3, #12]
 800aef8:	68db      	ldr	r3, [r3, #12]
 800aefa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	3304      	adds	r3, #4
 800af00:	4618      	mov	r0, r3
 800af02:	f7fd fd0f 	bl	8008924 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	6a1b      	ldr	r3, [r3, #32]
 800af0a:	68f8      	ldr	r0, [r7, #12]
 800af0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af14:	f003 0304 	and.w	r3, r3, #4
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d02e      	beq.n	800af7a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	699b      	ldr	r3, [r3, #24]
 800af20:	693a      	ldr	r2, [r7, #16]
 800af22:	4413      	add	r3, r2
 800af24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800af26:	68ba      	ldr	r2, [r7, #8]
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d90e      	bls.n	800af4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	68ba      	ldr	r2, [r7, #8]
 800af32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	68fa      	ldr	r2, [r7, #12]
 800af38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800af3a:	4b19      	ldr	r3, [pc, #100]	; (800afa0 <prvSwitchTimerLists+0xc0>)
 800af3c:	681a      	ldr	r2, [r3, #0]
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	3304      	adds	r3, #4
 800af42:	4619      	mov	r1, r3
 800af44:	4610      	mov	r0, r2
 800af46:	f7fd fcb4 	bl	80088b2 <vListInsert>
 800af4a:	e016      	b.n	800af7a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af4c:	2300      	movs	r3, #0
 800af4e:	9300      	str	r3, [sp, #0]
 800af50:	2300      	movs	r3, #0
 800af52:	693a      	ldr	r2, [r7, #16]
 800af54:	2100      	movs	r1, #0
 800af56:	68f8      	ldr	r0, [r7, #12]
 800af58:	f7ff fd60 	bl	800aa1c <xTimerGenericCommand>
 800af5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d10a      	bne.n	800af7a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800af64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af68:	f383 8811 	msr	BASEPRI, r3
 800af6c:	f3bf 8f6f 	isb	sy
 800af70:	f3bf 8f4f 	dsb	sy
 800af74:	603b      	str	r3, [r7, #0]
}
 800af76:	bf00      	nop
 800af78:	e7fe      	b.n	800af78 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af7a:	4b09      	ldr	r3, [pc, #36]	; (800afa0 <prvSwitchTimerLists+0xc0>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d1b1      	bne.n	800aee8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800af84:	4b06      	ldr	r3, [pc, #24]	; (800afa0 <prvSwitchTimerLists+0xc0>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800af8a:	4b06      	ldr	r3, [pc, #24]	; (800afa4 <prvSwitchTimerLists+0xc4>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4a04      	ldr	r2, [pc, #16]	; (800afa0 <prvSwitchTimerLists+0xc0>)
 800af90:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800af92:	4a04      	ldr	r2, [pc, #16]	; (800afa4 <prvSwitchTimerLists+0xc4>)
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	6013      	str	r3, [r2, #0]
}
 800af98:	bf00      	nop
 800af9a:	3718      	adds	r7, #24
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	200011c0 	.word	0x200011c0
 800afa4:	200011c4 	.word	0x200011c4

0800afa8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800afae:	f000 f969 	bl	800b284 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800afb2:	4b15      	ldr	r3, [pc, #84]	; (800b008 <prvCheckForValidListAndQueue+0x60>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d120      	bne.n	800affc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800afba:	4814      	ldr	r0, [pc, #80]	; (800b00c <prvCheckForValidListAndQueue+0x64>)
 800afbc:	f7fd fc28 	bl	8008810 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800afc0:	4813      	ldr	r0, [pc, #76]	; (800b010 <prvCheckForValidListAndQueue+0x68>)
 800afc2:	f7fd fc25 	bl	8008810 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800afc6:	4b13      	ldr	r3, [pc, #76]	; (800b014 <prvCheckForValidListAndQueue+0x6c>)
 800afc8:	4a10      	ldr	r2, [pc, #64]	; (800b00c <prvCheckForValidListAndQueue+0x64>)
 800afca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800afcc:	4b12      	ldr	r3, [pc, #72]	; (800b018 <prvCheckForValidListAndQueue+0x70>)
 800afce:	4a10      	ldr	r2, [pc, #64]	; (800b010 <prvCheckForValidListAndQueue+0x68>)
 800afd0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800afd2:	2300      	movs	r3, #0
 800afd4:	9300      	str	r3, [sp, #0]
 800afd6:	4b11      	ldr	r3, [pc, #68]	; (800b01c <prvCheckForValidListAndQueue+0x74>)
 800afd8:	4a11      	ldr	r2, [pc, #68]	; (800b020 <prvCheckForValidListAndQueue+0x78>)
 800afda:	2110      	movs	r1, #16
 800afdc:	200a      	movs	r0, #10
 800afde:	f7fd fd33 	bl	8008a48 <xQueueGenericCreateStatic>
 800afe2:	4603      	mov	r3, r0
 800afe4:	4a08      	ldr	r2, [pc, #32]	; (800b008 <prvCheckForValidListAndQueue+0x60>)
 800afe6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800afe8:	4b07      	ldr	r3, [pc, #28]	; (800b008 <prvCheckForValidListAndQueue+0x60>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d005      	beq.n	800affc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aff0:	4b05      	ldr	r3, [pc, #20]	; (800b008 <prvCheckForValidListAndQueue+0x60>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	490b      	ldr	r1, [pc, #44]	; (800b024 <prvCheckForValidListAndQueue+0x7c>)
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7fe fc44 	bl	8009884 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800affc:	f000 f972 	bl	800b2e4 <vPortExitCritical>
}
 800b000:	bf00      	nop
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop
 800b008:	200011c8 	.word	0x200011c8
 800b00c:	20001198 	.word	0x20001198
 800b010:	200011ac 	.word	0x200011ac
 800b014:	200011c0 	.word	0x200011c0
 800b018:	200011c4 	.word	0x200011c4
 800b01c:	20001274 	.word	0x20001274
 800b020:	200011d4 	.word	0x200011d4
 800b024:	0800f0d0 	.word	0x0800f0d0

0800b028 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b028:	b480      	push	{r7}
 800b02a:	b085      	sub	sp, #20
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	60f8      	str	r0, [r7, #12]
 800b030:	60b9      	str	r1, [r7, #8]
 800b032:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	3b04      	subs	r3, #4
 800b038:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b040:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	3b04      	subs	r3, #4
 800b046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	f023 0201 	bic.w	r2, r3, #1
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	3b04      	subs	r3, #4
 800b056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b058:	4a0c      	ldr	r2, [pc, #48]	; (800b08c <pxPortInitialiseStack+0x64>)
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	3b14      	subs	r3, #20
 800b062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	3b04      	subs	r3, #4
 800b06e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f06f 0202 	mvn.w	r2, #2
 800b076:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	3b20      	subs	r3, #32
 800b07c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b07e:	68fb      	ldr	r3, [r7, #12]
}
 800b080:	4618      	mov	r0, r3
 800b082:	3714      	adds	r7, #20
 800b084:	46bd      	mov	sp, r7
 800b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08a:	4770      	bx	lr
 800b08c:	0800b091 	.word	0x0800b091

0800b090 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b090:	b480      	push	{r7}
 800b092:	b085      	sub	sp, #20
 800b094:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b096:	2300      	movs	r3, #0
 800b098:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b09a:	4b12      	ldr	r3, [pc, #72]	; (800b0e4 <prvTaskExitError+0x54>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0a2:	d00a      	beq.n	800b0ba <prvTaskExitError+0x2a>
	__asm volatile
 800b0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a8:	f383 8811 	msr	BASEPRI, r3
 800b0ac:	f3bf 8f6f 	isb	sy
 800b0b0:	f3bf 8f4f 	dsb	sy
 800b0b4:	60fb      	str	r3, [r7, #12]
}
 800b0b6:	bf00      	nop
 800b0b8:	e7fe      	b.n	800b0b8 <prvTaskExitError+0x28>
	__asm volatile
 800b0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0be:	f383 8811 	msr	BASEPRI, r3
 800b0c2:	f3bf 8f6f 	isb	sy
 800b0c6:	f3bf 8f4f 	dsb	sy
 800b0ca:	60bb      	str	r3, [r7, #8]
}
 800b0cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b0ce:	bf00      	nop
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d0fc      	beq.n	800b0d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b0d6:	bf00      	nop
 800b0d8:	bf00      	nop
 800b0da:	3714      	adds	r7, #20
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr
 800b0e4:	2000000c 	.word	0x2000000c
	...

0800b0f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b0f0:	4b07      	ldr	r3, [pc, #28]	; (800b110 <pxCurrentTCBConst2>)
 800b0f2:	6819      	ldr	r1, [r3, #0]
 800b0f4:	6808      	ldr	r0, [r1, #0]
 800b0f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0fa:	f380 8809 	msr	PSP, r0
 800b0fe:	f3bf 8f6f 	isb	sy
 800b102:	f04f 0000 	mov.w	r0, #0
 800b106:	f380 8811 	msr	BASEPRI, r0
 800b10a:	4770      	bx	lr
 800b10c:	f3af 8000 	nop.w

0800b110 <pxCurrentTCBConst2>:
 800b110:	20000c98 	.word	0x20000c98
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b114:	bf00      	nop
 800b116:	bf00      	nop

0800b118 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b118:	4808      	ldr	r0, [pc, #32]	; (800b13c <prvPortStartFirstTask+0x24>)
 800b11a:	6800      	ldr	r0, [r0, #0]
 800b11c:	6800      	ldr	r0, [r0, #0]
 800b11e:	f380 8808 	msr	MSP, r0
 800b122:	f04f 0000 	mov.w	r0, #0
 800b126:	f380 8814 	msr	CONTROL, r0
 800b12a:	b662      	cpsie	i
 800b12c:	b661      	cpsie	f
 800b12e:	f3bf 8f4f 	dsb	sy
 800b132:	f3bf 8f6f 	isb	sy
 800b136:	df00      	svc	0
 800b138:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b13a:	bf00      	nop
 800b13c:	e000ed08 	.word	0xe000ed08

0800b140 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b086      	sub	sp, #24
 800b144:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b146:	4b46      	ldr	r3, [pc, #280]	; (800b260 <xPortStartScheduler+0x120>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4a46      	ldr	r2, [pc, #280]	; (800b264 <xPortStartScheduler+0x124>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d10a      	bne.n	800b166 <xPortStartScheduler+0x26>
	__asm volatile
 800b150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b154:	f383 8811 	msr	BASEPRI, r3
 800b158:	f3bf 8f6f 	isb	sy
 800b15c:	f3bf 8f4f 	dsb	sy
 800b160:	613b      	str	r3, [r7, #16]
}
 800b162:	bf00      	nop
 800b164:	e7fe      	b.n	800b164 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b166:	4b3e      	ldr	r3, [pc, #248]	; (800b260 <xPortStartScheduler+0x120>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	4a3f      	ldr	r2, [pc, #252]	; (800b268 <xPortStartScheduler+0x128>)
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d10a      	bne.n	800b186 <xPortStartScheduler+0x46>
	__asm volatile
 800b170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b174:	f383 8811 	msr	BASEPRI, r3
 800b178:	f3bf 8f6f 	isb	sy
 800b17c:	f3bf 8f4f 	dsb	sy
 800b180:	60fb      	str	r3, [r7, #12]
}
 800b182:	bf00      	nop
 800b184:	e7fe      	b.n	800b184 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b186:	4b39      	ldr	r3, [pc, #228]	; (800b26c <xPortStartScheduler+0x12c>)
 800b188:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	b2db      	uxtb	r3, r3
 800b190:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	22ff      	movs	r2, #255	; 0xff
 800b196:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	b2db      	uxtb	r3, r3
 800b19e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b1a0:	78fb      	ldrb	r3, [r7, #3]
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b1a8:	b2da      	uxtb	r2, r3
 800b1aa:	4b31      	ldr	r3, [pc, #196]	; (800b270 <xPortStartScheduler+0x130>)
 800b1ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b1ae:	4b31      	ldr	r3, [pc, #196]	; (800b274 <xPortStartScheduler+0x134>)
 800b1b0:	2207      	movs	r2, #7
 800b1b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b1b4:	e009      	b.n	800b1ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b1b6:	4b2f      	ldr	r3, [pc, #188]	; (800b274 <xPortStartScheduler+0x134>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	3b01      	subs	r3, #1
 800b1bc:	4a2d      	ldr	r2, [pc, #180]	; (800b274 <xPortStartScheduler+0x134>)
 800b1be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b1c0:	78fb      	ldrb	r3, [r7, #3]
 800b1c2:	b2db      	uxtb	r3, r3
 800b1c4:	005b      	lsls	r3, r3, #1
 800b1c6:	b2db      	uxtb	r3, r3
 800b1c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b1ca:	78fb      	ldrb	r3, [r7, #3]
 800b1cc:	b2db      	uxtb	r3, r3
 800b1ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1d2:	2b80      	cmp	r3, #128	; 0x80
 800b1d4:	d0ef      	beq.n	800b1b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b1d6:	4b27      	ldr	r3, [pc, #156]	; (800b274 <xPortStartScheduler+0x134>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f1c3 0307 	rsb	r3, r3, #7
 800b1de:	2b04      	cmp	r3, #4
 800b1e0:	d00a      	beq.n	800b1f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e6:	f383 8811 	msr	BASEPRI, r3
 800b1ea:	f3bf 8f6f 	isb	sy
 800b1ee:	f3bf 8f4f 	dsb	sy
 800b1f2:	60bb      	str	r3, [r7, #8]
}
 800b1f4:	bf00      	nop
 800b1f6:	e7fe      	b.n	800b1f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b1f8:	4b1e      	ldr	r3, [pc, #120]	; (800b274 <xPortStartScheduler+0x134>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	021b      	lsls	r3, r3, #8
 800b1fe:	4a1d      	ldr	r2, [pc, #116]	; (800b274 <xPortStartScheduler+0x134>)
 800b200:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b202:	4b1c      	ldr	r3, [pc, #112]	; (800b274 <xPortStartScheduler+0x134>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b20a:	4a1a      	ldr	r2, [pc, #104]	; (800b274 <xPortStartScheduler+0x134>)
 800b20c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	b2da      	uxtb	r2, r3
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b216:	4b18      	ldr	r3, [pc, #96]	; (800b278 <xPortStartScheduler+0x138>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4a17      	ldr	r2, [pc, #92]	; (800b278 <xPortStartScheduler+0x138>)
 800b21c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b220:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b222:	4b15      	ldr	r3, [pc, #84]	; (800b278 <xPortStartScheduler+0x138>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	4a14      	ldr	r2, [pc, #80]	; (800b278 <xPortStartScheduler+0x138>)
 800b228:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b22c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b22e:	f000 f8dd 	bl	800b3ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b232:	4b12      	ldr	r3, [pc, #72]	; (800b27c <xPortStartScheduler+0x13c>)
 800b234:	2200      	movs	r2, #0
 800b236:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b238:	f000 f8fc 	bl	800b434 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b23c:	4b10      	ldr	r3, [pc, #64]	; (800b280 <xPortStartScheduler+0x140>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a0f      	ldr	r2, [pc, #60]	; (800b280 <xPortStartScheduler+0x140>)
 800b242:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b246:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b248:	f7ff ff66 	bl	800b118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b24c:	f7fe ff54 	bl	800a0f8 <vTaskSwitchContext>
	prvTaskExitError();
 800b250:	f7ff ff1e 	bl	800b090 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b254:	2300      	movs	r3, #0
}
 800b256:	4618      	mov	r0, r3
 800b258:	3718      	adds	r7, #24
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}
 800b25e:	bf00      	nop
 800b260:	e000ed00 	.word	0xe000ed00
 800b264:	410fc271 	.word	0x410fc271
 800b268:	410fc270 	.word	0x410fc270
 800b26c:	e000e400 	.word	0xe000e400
 800b270:	200012c4 	.word	0x200012c4
 800b274:	200012c8 	.word	0x200012c8
 800b278:	e000ed20 	.word	0xe000ed20
 800b27c:	2000000c 	.word	0x2000000c
 800b280:	e000ef34 	.word	0xe000ef34

0800b284 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b284:	b480      	push	{r7}
 800b286:	b083      	sub	sp, #12
 800b288:	af00      	add	r7, sp, #0
	__asm volatile
 800b28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b28e:	f383 8811 	msr	BASEPRI, r3
 800b292:	f3bf 8f6f 	isb	sy
 800b296:	f3bf 8f4f 	dsb	sy
 800b29a:	607b      	str	r3, [r7, #4]
}
 800b29c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b29e:	4b0f      	ldr	r3, [pc, #60]	; (800b2dc <vPortEnterCritical+0x58>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	4a0d      	ldr	r2, [pc, #52]	; (800b2dc <vPortEnterCritical+0x58>)
 800b2a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b2a8:	4b0c      	ldr	r3, [pc, #48]	; (800b2dc <vPortEnterCritical+0x58>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	2b01      	cmp	r3, #1
 800b2ae:	d10f      	bne.n	800b2d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b2b0:	4b0b      	ldr	r3, [pc, #44]	; (800b2e0 <vPortEnterCritical+0x5c>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d00a      	beq.n	800b2d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2be:	f383 8811 	msr	BASEPRI, r3
 800b2c2:	f3bf 8f6f 	isb	sy
 800b2c6:	f3bf 8f4f 	dsb	sy
 800b2ca:	603b      	str	r3, [r7, #0]
}
 800b2cc:	bf00      	nop
 800b2ce:	e7fe      	b.n	800b2ce <vPortEnterCritical+0x4a>
	}
}
 800b2d0:	bf00      	nop
 800b2d2:	370c      	adds	r7, #12
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr
 800b2dc:	2000000c 	.word	0x2000000c
 800b2e0:	e000ed04 	.word	0xe000ed04

0800b2e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b083      	sub	sp, #12
 800b2e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b2ea:	4b12      	ldr	r3, [pc, #72]	; (800b334 <vPortExitCritical+0x50>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d10a      	bne.n	800b308 <vPortExitCritical+0x24>
	__asm volatile
 800b2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f6:	f383 8811 	msr	BASEPRI, r3
 800b2fa:	f3bf 8f6f 	isb	sy
 800b2fe:	f3bf 8f4f 	dsb	sy
 800b302:	607b      	str	r3, [r7, #4]
}
 800b304:	bf00      	nop
 800b306:	e7fe      	b.n	800b306 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b308:	4b0a      	ldr	r3, [pc, #40]	; (800b334 <vPortExitCritical+0x50>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	3b01      	subs	r3, #1
 800b30e:	4a09      	ldr	r2, [pc, #36]	; (800b334 <vPortExitCritical+0x50>)
 800b310:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b312:	4b08      	ldr	r3, [pc, #32]	; (800b334 <vPortExitCritical+0x50>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d105      	bne.n	800b326 <vPortExitCritical+0x42>
 800b31a:	2300      	movs	r3, #0
 800b31c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	f383 8811 	msr	BASEPRI, r3
}
 800b324:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b326:	bf00      	nop
 800b328:	370c      	adds	r7, #12
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr
 800b332:	bf00      	nop
 800b334:	2000000c 	.word	0x2000000c
	...

0800b340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b340:	f3ef 8009 	mrs	r0, PSP
 800b344:	f3bf 8f6f 	isb	sy
 800b348:	4b15      	ldr	r3, [pc, #84]	; (800b3a0 <pxCurrentTCBConst>)
 800b34a:	681a      	ldr	r2, [r3, #0]
 800b34c:	f01e 0f10 	tst.w	lr, #16
 800b350:	bf08      	it	eq
 800b352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b35a:	6010      	str	r0, [r2, #0]
 800b35c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b360:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b364:	f380 8811 	msr	BASEPRI, r0
 800b368:	f3bf 8f4f 	dsb	sy
 800b36c:	f3bf 8f6f 	isb	sy
 800b370:	f7fe fec2 	bl	800a0f8 <vTaskSwitchContext>
 800b374:	f04f 0000 	mov.w	r0, #0
 800b378:	f380 8811 	msr	BASEPRI, r0
 800b37c:	bc09      	pop	{r0, r3}
 800b37e:	6819      	ldr	r1, [r3, #0]
 800b380:	6808      	ldr	r0, [r1, #0]
 800b382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b386:	f01e 0f10 	tst.w	lr, #16
 800b38a:	bf08      	it	eq
 800b38c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b390:	f380 8809 	msr	PSP, r0
 800b394:	f3bf 8f6f 	isb	sy
 800b398:	4770      	bx	lr
 800b39a:	bf00      	nop
 800b39c:	f3af 8000 	nop.w

0800b3a0 <pxCurrentTCBConst>:
 800b3a0:	20000c98 	.word	0x20000c98
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b3a4:	bf00      	nop
 800b3a6:	bf00      	nop

0800b3a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b082      	sub	sp, #8
 800b3ac:	af00      	add	r7, sp, #0
	__asm volatile
 800b3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b2:	f383 8811 	msr	BASEPRI, r3
 800b3b6:	f3bf 8f6f 	isb	sy
 800b3ba:	f3bf 8f4f 	dsb	sy
 800b3be:	607b      	str	r3, [r7, #4]
}
 800b3c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b3c2:	f7fe fddf 	bl	8009f84 <xTaskIncrementTick>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d003      	beq.n	800b3d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b3cc:	4b06      	ldr	r3, [pc, #24]	; (800b3e8 <xPortSysTickHandler+0x40>)
 800b3ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3d2:	601a      	str	r2, [r3, #0]
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	f383 8811 	msr	BASEPRI, r3
}
 800b3de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b3e0:	bf00      	nop
 800b3e2:	3708      	adds	r7, #8
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}
 800b3e8:	e000ed04 	.word	0xe000ed04

0800b3ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b3f0:	4b0b      	ldr	r3, [pc, #44]	; (800b420 <vPortSetupTimerInterrupt+0x34>)
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b3f6:	4b0b      	ldr	r3, [pc, #44]	; (800b424 <vPortSetupTimerInterrupt+0x38>)
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b3fc:	4b0a      	ldr	r3, [pc, #40]	; (800b428 <vPortSetupTimerInterrupt+0x3c>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4a0a      	ldr	r2, [pc, #40]	; (800b42c <vPortSetupTimerInterrupt+0x40>)
 800b402:	fba2 2303 	umull	r2, r3, r2, r3
 800b406:	099b      	lsrs	r3, r3, #6
 800b408:	4a09      	ldr	r2, [pc, #36]	; (800b430 <vPortSetupTimerInterrupt+0x44>)
 800b40a:	3b01      	subs	r3, #1
 800b40c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b40e:	4b04      	ldr	r3, [pc, #16]	; (800b420 <vPortSetupTimerInterrupt+0x34>)
 800b410:	2207      	movs	r2, #7
 800b412:	601a      	str	r2, [r3, #0]
}
 800b414:	bf00      	nop
 800b416:	46bd      	mov	sp, r7
 800b418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41c:	4770      	bx	lr
 800b41e:	bf00      	nop
 800b420:	e000e010 	.word	0xe000e010
 800b424:	e000e018 	.word	0xe000e018
 800b428:	20000000 	.word	0x20000000
 800b42c:	10624dd3 	.word	0x10624dd3
 800b430:	e000e014 	.word	0xe000e014

0800b434 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b434:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b444 <vPortEnableVFP+0x10>
 800b438:	6801      	ldr	r1, [r0, #0]
 800b43a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b43e:	6001      	str	r1, [r0, #0]
 800b440:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b442:	bf00      	nop
 800b444:	e000ed88 	.word	0xe000ed88

0800b448 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b448:	b480      	push	{r7}
 800b44a:	b085      	sub	sp, #20
 800b44c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b44e:	f3ef 8305 	mrs	r3, IPSR
 800b452:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	2b0f      	cmp	r3, #15
 800b458:	d914      	bls.n	800b484 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b45a:	4a17      	ldr	r2, [pc, #92]	; (800b4b8 <vPortValidateInterruptPriority+0x70>)
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	4413      	add	r3, r2
 800b460:	781b      	ldrb	r3, [r3, #0]
 800b462:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b464:	4b15      	ldr	r3, [pc, #84]	; (800b4bc <vPortValidateInterruptPriority+0x74>)
 800b466:	781b      	ldrb	r3, [r3, #0]
 800b468:	7afa      	ldrb	r2, [r7, #11]
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d20a      	bcs.n	800b484 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b472:	f383 8811 	msr	BASEPRI, r3
 800b476:	f3bf 8f6f 	isb	sy
 800b47a:	f3bf 8f4f 	dsb	sy
 800b47e:	607b      	str	r3, [r7, #4]
}
 800b480:	bf00      	nop
 800b482:	e7fe      	b.n	800b482 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b484:	4b0e      	ldr	r3, [pc, #56]	; (800b4c0 <vPortValidateInterruptPriority+0x78>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b48c:	4b0d      	ldr	r3, [pc, #52]	; (800b4c4 <vPortValidateInterruptPriority+0x7c>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	429a      	cmp	r2, r3
 800b492:	d90a      	bls.n	800b4aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b498:	f383 8811 	msr	BASEPRI, r3
 800b49c:	f3bf 8f6f 	isb	sy
 800b4a0:	f3bf 8f4f 	dsb	sy
 800b4a4:	603b      	str	r3, [r7, #0]
}
 800b4a6:	bf00      	nop
 800b4a8:	e7fe      	b.n	800b4a8 <vPortValidateInterruptPriority+0x60>
	}
 800b4aa:	bf00      	nop
 800b4ac:	3714      	adds	r7, #20
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr
 800b4b6:	bf00      	nop
 800b4b8:	e000e3f0 	.word	0xe000e3f0
 800b4bc:	200012c4 	.word	0x200012c4
 800b4c0:	e000ed0c 	.word	0xe000ed0c
 800b4c4:	200012c8 	.word	0x200012c8

0800b4c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b08a      	sub	sp, #40	; 0x28
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b4d4:	f7fe fc9a 	bl	8009e0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b4d8:	4b5b      	ldr	r3, [pc, #364]	; (800b648 <pvPortMalloc+0x180>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d101      	bne.n	800b4e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b4e0:	f000 f920 	bl	800b724 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b4e4:	4b59      	ldr	r3, [pc, #356]	; (800b64c <pvPortMalloc+0x184>)
 800b4e6:	681a      	ldr	r2, [r3, #0]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	4013      	ands	r3, r2
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	f040 8093 	bne.w	800b618 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d01d      	beq.n	800b534 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b4f8:	2208      	movs	r2, #8
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	4413      	add	r3, r2
 800b4fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f003 0307 	and.w	r3, r3, #7
 800b506:	2b00      	cmp	r3, #0
 800b508:	d014      	beq.n	800b534 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f023 0307 	bic.w	r3, r3, #7
 800b510:	3308      	adds	r3, #8
 800b512:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f003 0307 	and.w	r3, r3, #7
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d00a      	beq.n	800b534 <pvPortMalloc+0x6c>
	__asm volatile
 800b51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b522:	f383 8811 	msr	BASEPRI, r3
 800b526:	f3bf 8f6f 	isb	sy
 800b52a:	f3bf 8f4f 	dsb	sy
 800b52e:	617b      	str	r3, [r7, #20]
}
 800b530:	bf00      	nop
 800b532:	e7fe      	b.n	800b532 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d06e      	beq.n	800b618 <pvPortMalloc+0x150>
 800b53a:	4b45      	ldr	r3, [pc, #276]	; (800b650 <pvPortMalloc+0x188>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	687a      	ldr	r2, [r7, #4]
 800b540:	429a      	cmp	r2, r3
 800b542:	d869      	bhi.n	800b618 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b544:	4b43      	ldr	r3, [pc, #268]	; (800b654 <pvPortMalloc+0x18c>)
 800b546:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b548:	4b42      	ldr	r3, [pc, #264]	; (800b654 <pvPortMalloc+0x18c>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b54e:	e004      	b.n	800b55a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b552:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	429a      	cmp	r2, r3
 800b562:	d903      	bls.n	800b56c <pvPortMalloc+0xa4>
 800b564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d1f1      	bne.n	800b550 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b56c:	4b36      	ldr	r3, [pc, #216]	; (800b648 <pvPortMalloc+0x180>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b572:	429a      	cmp	r2, r3
 800b574:	d050      	beq.n	800b618 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b576:	6a3b      	ldr	r3, [r7, #32]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2208      	movs	r2, #8
 800b57c:	4413      	add	r3, r2
 800b57e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b582:	681a      	ldr	r2, [r3, #0]
 800b584:	6a3b      	ldr	r3, [r7, #32]
 800b586:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58a:	685a      	ldr	r2, [r3, #4]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	1ad2      	subs	r2, r2, r3
 800b590:	2308      	movs	r3, #8
 800b592:	005b      	lsls	r3, r3, #1
 800b594:	429a      	cmp	r2, r3
 800b596:	d91f      	bls.n	800b5d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	4413      	add	r3, r2
 800b59e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5a0:	69bb      	ldr	r3, [r7, #24]
 800b5a2:	f003 0307 	and.w	r3, r3, #7
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d00a      	beq.n	800b5c0 <pvPortMalloc+0xf8>
	__asm volatile
 800b5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ae:	f383 8811 	msr	BASEPRI, r3
 800b5b2:	f3bf 8f6f 	isb	sy
 800b5b6:	f3bf 8f4f 	dsb	sy
 800b5ba:	613b      	str	r3, [r7, #16]
}
 800b5bc:	bf00      	nop
 800b5be:	e7fe      	b.n	800b5be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c2:	685a      	ldr	r2, [r3, #4]
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	1ad2      	subs	r2, r2, r3
 800b5c8:	69bb      	ldr	r3, [r7, #24]
 800b5ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ce:	687a      	ldr	r2, [r7, #4]
 800b5d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b5d2:	69b8      	ldr	r0, [r7, #24]
 800b5d4:	f000 f908 	bl	800b7e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b5d8:	4b1d      	ldr	r3, [pc, #116]	; (800b650 <pvPortMalloc+0x188>)
 800b5da:	681a      	ldr	r2, [r3, #0]
 800b5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	1ad3      	subs	r3, r2, r3
 800b5e2:	4a1b      	ldr	r2, [pc, #108]	; (800b650 <pvPortMalloc+0x188>)
 800b5e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b5e6:	4b1a      	ldr	r3, [pc, #104]	; (800b650 <pvPortMalloc+0x188>)
 800b5e8:	681a      	ldr	r2, [r3, #0]
 800b5ea:	4b1b      	ldr	r3, [pc, #108]	; (800b658 <pvPortMalloc+0x190>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	d203      	bcs.n	800b5fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b5f2:	4b17      	ldr	r3, [pc, #92]	; (800b650 <pvPortMalloc+0x188>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4a18      	ldr	r2, [pc, #96]	; (800b658 <pvPortMalloc+0x190>)
 800b5f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fc:	685a      	ldr	r2, [r3, #4]
 800b5fe:	4b13      	ldr	r3, [pc, #76]	; (800b64c <pvPortMalloc+0x184>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	431a      	orrs	r2, r3
 800b604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b606:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b60a:	2200      	movs	r2, #0
 800b60c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b60e:	4b13      	ldr	r3, [pc, #76]	; (800b65c <pvPortMalloc+0x194>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	3301      	adds	r3, #1
 800b614:	4a11      	ldr	r2, [pc, #68]	; (800b65c <pvPortMalloc+0x194>)
 800b616:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b618:	f7fe fc06 	bl	8009e28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b61c:	69fb      	ldr	r3, [r7, #28]
 800b61e:	f003 0307 	and.w	r3, r3, #7
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00a      	beq.n	800b63c <pvPortMalloc+0x174>
	__asm volatile
 800b626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b62a:	f383 8811 	msr	BASEPRI, r3
 800b62e:	f3bf 8f6f 	isb	sy
 800b632:	f3bf 8f4f 	dsb	sy
 800b636:	60fb      	str	r3, [r7, #12]
}
 800b638:	bf00      	nop
 800b63a:	e7fe      	b.n	800b63a <pvPortMalloc+0x172>
	return pvReturn;
 800b63c:	69fb      	ldr	r3, [r7, #28]
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3728      	adds	r7, #40	; 0x28
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}
 800b646:	bf00      	nop
 800b648:	200035fc 	.word	0x200035fc
 800b64c:	20003610 	.word	0x20003610
 800b650:	20003600 	.word	0x20003600
 800b654:	200035f4 	.word	0x200035f4
 800b658:	20003604 	.word	0x20003604
 800b65c:	20003608 	.word	0x20003608

0800b660 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b086      	sub	sp, #24
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d04d      	beq.n	800b70e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b672:	2308      	movs	r3, #8
 800b674:	425b      	negs	r3, r3
 800b676:	697a      	ldr	r2, [r7, #20]
 800b678:	4413      	add	r3, r2
 800b67a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	685a      	ldr	r2, [r3, #4]
 800b684:	4b24      	ldr	r3, [pc, #144]	; (800b718 <vPortFree+0xb8>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	4013      	ands	r3, r2
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d10a      	bne.n	800b6a4 <vPortFree+0x44>
	__asm volatile
 800b68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b692:	f383 8811 	msr	BASEPRI, r3
 800b696:	f3bf 8f6f 	isb	sy
 800b69a:	f3bf 8f4f 	dsb	sy
 800b69e:	60fb      	str	r3, [r7, #12]
}
 800b6a0:	bf00      	nop
 800b6a2:	e7fe      	b.n	800b6a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d00a      	beq.n	800b6c2 <vPortFree+0x62>
	__asm volatile
 800b6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b0:	f383 8811 	msr	BASEPRI, r3
 800b6b4:	f3bf 8f6f 	isb	sy
 800b6b8:	f3bf 8f4f 	dsb	sy
 800b6bc:	60bb      	str	r3, [r7, #8]
}
 800b6be:	bf00      	nop
 800b6c0:	e7fe      	b.n	800b6c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	685a      	ldr	r2, [r3, #4]
 800b6c6:	4b14      	ldr	r3, [pc, #80]	; (800b718 <vPortFree+0xb8>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	4013      	ands	r3, r2
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d01e      	beq.n	800b70e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d11a      	bne.n	800b70e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	685a      	ldr	r2, [r3, #4]
 800b6dc:	4b0e      	ldr	r3, [pc, #56]	; (800b718 <vPortFree+0xb8>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	43db      	mvns	r3, r3
 800b6e2:	401a      	ands	r2, r3
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b6e8:	f7fe fb90 	bl	8009e0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	685a      	ldr	r2, [r3, #4]
 800b6f0:	4b0a      	ldr	r3, [pc, #40]	; (800b71c <vPortFree+0xbc>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	4413      	add	r3, r2
 800b6f6:	4a09      	ldr	r2, [pc, #36]	; (800b71c <vPortFree+0xbc>)
 800b6f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b6fa:	6938      	ldr	r0, [r7, #16]
 800b6fc:	f000 f874 	bl	800b7e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b700:	4b07      	ldr	r3, [pc, #28]	; (800b720 <vPortFree+0xc0>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	3301      	adds	r3, #1
 800b706:	4a06      	ldr	r2, [pc, #24]	; (800b720 <vPortFree+0xc0>)
 800b708:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b70a:	f7fe fb8d 	bl	8009e28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b70e:	bf00      	nop
 800b710:	3718      	adds	r7, #24
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}
 800b716:	bf00      	nop
 800b718:	20003610 	.word	0x20003610
 800b71c:	20003600 	.word	0x20003600
 800b720:	2000360c 	.word	0x2000360c

0800b724 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b724:	b480      	push	{r7}
 800b726:	b085      	sub	sp, #20
 800b728:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b72a:	f242 3328 	movw	r3, #9000	; 0x2328
 800b72e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b730:	4b27      	ldr	r3, [pc, #156]	; (800b7d0 <prvHeapInit+0xac>)
 800b732:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	f003 0307 	and.w	r3, r3, #7
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d00c      	beq.n	800b758 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	3307      	adds	r3, #7
 800b742:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	f023 0307 	bic.w	r3, r3, #7
 800b74a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b74c:	68ba      	ldr	r2, [r7, #8]
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	1ad3      	subs	r3, r2, r3
 800b752:	4a1f      	ldr	r2, [pc, #124]	; (800b7d0 <prvHeapInit+0xac>)
 800b754:	4413      	add	r3, r2
 800b756:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b75c:	4a1d      	ldr	r2, [pc, #116]	; (800b7d4 <prvHeapInit+0xb0>)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b762:	4b1c      	ldr	r3, [pc, #112]	; (800b7d4 <prvHeapInit+0xb0>)
 800b764:	2200      	movs	r2, #0
 800b766:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	68ba      	ldr	r2, [r7, #8]
 800b76c:	4413      	add	r3, r2
 800b76e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b770:	2208      	movs	r2, #8
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	1a9b      	subs	r3, r3, r2
 800b776:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	f023 0307 	bic.w	r3, r3, #7
 800b77e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	4a15      	ldr	r2, [pc, #84]	; (800b7d8 <prvHeapInit+0xb4>)
 800b784:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b786:	4b14      	ldr	r3, [pc, #80]	; (800b7d8 <prvHeapInit+0xb4>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	2200      	movs	r2, #0
 800b78c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b78e:	4b12      	ldr	r3, [pc, #72]	; (800b7d8 <prvHeapInit+0xb4>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	2200      	movs	r2, #0
 800b794:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	68fa      	ldr	r2, [r7, #12]
 800b79e:	1ad2      	subs	r2, r2, r3
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b7a4:	4b0c      	ldr	r3, [pc, #48]	; (800b7d8 <prvHeapInit+0xb4>)
 800b7a6:	681a      	ldr	r2, [r3, #0]
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	685b      	ldr	r3, [r3, #4]
 800b7b0:	4a0a      	ldr	r2, [pc, #40]	; (800b7dc <prvHeapInit+0xb8>)
 800b7b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	4a09      	ldr	r2, [pc, #36]	; (800b7e0 <prvHeapInit+0xbc>)
 800b7ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b7bc:	4b09      	ldr	r3, [pc, #36]	; (800b7e4 <prvHeapInit+0xc0>)
 800b7be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b7c2:	601a      	str	r2, [r3, #0]
}
 800b7c4:	bf00      	nop
 800b7c6:	3714      	adds	r7, #20
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr
 800b7d0:	200012cc 	.word	0x200012cc
 800b7d4:	200035f4 	.word	0x200035f4
 800b7d8:	200035fc 	.word	0x200035fc
 800b7dc:	20003604 	.word	0x20003604
 800b7e0:	20003600 	.word	0x20003600
 800b7e4:	20003610 	.word	0x20003610

0800b7e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b085      	sub	sp, #20
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b7f0:	4b28      	ldr	r3, [pc, #160]	; (800b894 <prvInsertBlockIntoFreeList+0xac>)
 800b7f2:	60fb      	str	r3, [r7, #12]
 800b7f4:	e002      	b.n	800b7fc <prvInsertBlockIntoFreeList+0x14>
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	60fb      	str	r3, [r7, #12]
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	429a      	cmp	r2, r3
 800b804:	d8f7      	bhi.n	800b7f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	68ba      	ldr	r2, [r7, #8]
 800b810:	4413      	add	r3, r2
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	429a      	cmp	r2, r3
 800b816:	d108      	bne.n	800b82a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	685a      	ldr	r2, [r3, #4]
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	685b      	ldr	r3, [r3, #4]
 800b820:	441a      	add	r2, r3
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	68ba      	ldr	r2, [r7, #8]
 800b834:	441a      	add	r2, r3
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d118      	bne.n	800b870 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681a      	ldr	r2, [r3, #0]
 800b842:	4b15      	ldr	r3, [pc, #84]	; (800b898 <prvInsertBlockIntoFreeList+0xb0>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	429a      	cmp	r2, r3
 800b848:	d00d      	beq.n	800b866 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	685a      	ldr	r2, [r3, #4]
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	441a      	add	r2, r3
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	681a      	ldr	r2, [r3, #0]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	601a      	str	r2, [r3, #0]
 800b864:	e008      	b.n	800b878 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b866:	4b0c      	ldr	r3, [pc, #48]	; (800b898 <prvInsertBlockIntoFreeList+0xb0>)
 800b868:	681a      	ldr	r2, [r3, #0]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	601a      	str	r2, [r3, #0]
 800b86e:	e003      	b.n	800b878 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681a      	ldr	r2, [r3, #0]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b878:	68fa      	ldr	r2, [r7, #12]
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d002      	beq.n	800b886 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b886:	bf00      	nop
 800b888:	3714      	adds	r7, #20
 800b88a:	46bd      	mov	sp, r7
 800b88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b890:	4770      	bx	lr
 800b892:	bf00      	nop
 800b894:	200035f4 	.word	0x200035f4
 800b898:	200035fc 	.word	0x200035fc

0800b89c <_ZdlPvj>:
 800b89c:	f000 b814 	b.w	800b8c8 <_ZdlPv>

0800b8a0 <_Znwj>:
 800b8a0:	2801      	cmp	r0, #1
 800b8a2:	bf38      	it	cc
 800b8a4:	2001      	movcc	r0, #1
 800b8a6:	b510      	push	{r4, lr}
 800b8a8:	4604      	mov	r4, r0
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	f000 f85e 	bl	800b96c <malloc>
 800b8b0:	b930      	cbnz	r0, 800b8c0 <_Znwj+0x20>
 800b8b2:	f000 f81d 	bl	800b8f0 <_ZSt15get_new_handlerv>
 800b8b6:	b908      	cbnz	r0, 800b8bc <_Znwj+0x1c>
 800b8b8:	f000 f822 	bl	800b900 <abort>
 800b8bc:	4780      	blx	r0
 800b8be:	e7f4      	b.n	800b8aa <_Znwj+0xa>
 800b8c0:	bd10      	pop	{r4, pc}

0800b8c2 <__cxa_pure_virtual>:
 800b8c2:	b508      	push	{r3, lr}
 800b8c4:	f000 f80e 	bl	800b8e4 <_ZSt9terminatev>

0800b8c8 <_ZdlPv>:
 800b8c8:	f000 b858 	b.w	800b97c <free>

0800b8cc <_ZN10__cxxabiv111__terminateEPFvvE>:
 800b8cc:	b508      	push	{r3, lr}
 800b8ce:	4780      	blx	r0
 800b8d0:	f000 f816 	bl	800b900 <abort>

0800b8d4 <_ZSt13get_terminatev>:
 800b8d4:	4b02      	ldr	r3, [pc, #8]	; (800b8e0 <_ZSt13get_terminatev+0xc>)
 800b8d6:	6818      	ldr	r0, [r3, #0]
 800b8d8:	f3bf 8f5b 	dmb	ish
 800b8dc:	4770      	bx	lr
 800b8de:	bf00      	nop
 800b8e0:	20000010 	.word	0x20000010

0800b8e4 <_ZSt9terminatev>:
 800b8e4:	b508      	push	{r3, lr}
 800b8e6:	f7ff fff5 	bl	800b8d4 <_ZSt13get_terminatev>
 800b8ea:	f7ff ffef 	bl	800b8cc <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800b8f0 <_ZSt15get_new_handlerv>:
 800b8f0:	4b02      	ldr	r3, [pc, #8]	; (800b8fc <_ZSt15get_new_handlerv+0xc>)
 800b8f2:	6818      	ldr	r0, [r3, #0]
 800b8f4:	f3bf 8f5b 	dmb	ish
 800b8f8:	4770      	bx	lr
 800b8fa:	bf00      	nop
 800b8fc:	20003614 	.word	0x20003614

0800b900 <abort>:
 800b900:	b508      	push	{r3, lr}
 800b902:	2006      	movs	r0, #6
 800b904:	f000 fe68 	bl	800c5d8 <raise>
 800b908:	2001      	movs	r0, #1
 800b90a:	f7f7 f9e9 	bl	8002ce0 <_exit>

0800b90e <atoi>:
 800b90e:	220a      	movs	r2, #10
 800b910:	2100      	movs	r1, #0
 800b912:	f000 bfd7 	b.w	800c8c4 <strtol>
	...

0800b918 <__errno>:
 800b918:	4b01      	ldr	r3, [pc, #4]	; (800b920 <__errno+0x8>)
 800b91a:	6818      	ldr	r0, [r3, #0]
 800b91c:	4770      	bx	lr
 800b91e:	bf00      	nop
 800b920:	20000014 	.word	0x20000014

0800b924 <__libc_init_array>:
 800b924:	b570      	push	{r4, r5, r6, lr}
 800b926:	4d0d      	ldr	r5, [pc, #52]	; (800b95c <__libc_init_array+0x38>)
 800b928:	4c0d      	ldr	r4, [pc, #52]	; (800b960 <__libc_init_array+0x3c>)
 800b92a:	1b64      	subs	r4, r4, r5
 800b92c:	10a4      	asrs	r4, r4, #2
 800b92e:	2600      	movs	r6, #0
 800b930:	42a6      	cmp	r6, r4
 800b932:	d109      	bne.n	800b948 <__libc_init_array+0x24>
 800b934:	4d0b      	ldr	r5, [pc, #44]	; (800b964 <__libc_init_array+0x40>)
 800b936:	4c0c      	ldr	r4, [pc, #48]	; (800b968 <__libc_init_array+0x44>)
 800b938:	f003 fb26 	bl	800ef88 <_init>
 800b93c:	1b64      	subs	r4, r4, r5
 800b93e:	10a4      	asrs	r4, r4, #2
 800b940:	2600      	movs	r6, #0
 800b942:	42a6      	cmp	r6, r4
 800b944:	d105      	bne.n	800b952 <__libc_init_array+0x2e>
 800b946:	bd70      	pop	{r4, r5, r6, pc}
 800b948:	f855 3b04 	ldr.w	r3, [r5], #4
 800b94c:	4798      	blx	r3
 800b94e:	3601      	adds	r6, #1
 800b950:	e7ee      	b.n	800b930 <__libc_init_array+0xc>
 800b952:	f855 3b04 	ldr.w	r3, [r5], #4
 800b956:	4798      	blx	r3
 800b958:	3601      	adds	r6, #1
 800b95a:	e7f2      	b.n	800b942 <__libc_init_array+0x1e>
 800b95c:	0800f6ec 	.word	0x0800f6ec
 800b960:	0800f6ec 	.word	0x0800f6ec
 800b964:	0800f6ec 	.word	0x0800f6ec
 800b968:	0800f6f4 	.word	0x0800f6f4

0800b96c <malloc>:
 800b96c:	4b02      	ldr	r3, [pc, #8]	; (800b978 <malloc+0xc>)
 800b96e:	4601      	mov	r1, r0
 800b970:	6818      	ldr	r0, [r3, #0]
 800b972:	f000 b88d 	b.w	800ba90 <_malloc_r>
 800b976:	bf00      	nop
 800b978:	20000014 	.word	0x20000014

0800b97c <free>:
 800b97c:	4b02      	ldr	r3, [pc, #8]	; (800b988 <free+0xc>)
 800b97e:	4601      	mov	r1, r0
 800b980:	6818      	ldr	r0, [r3, #0]
 800b982:	f000 b819 	b.w	800b9b8 <_free_r>
 800b986:	bf00      	nop
 800b988:	20000014 	.word	0x20000014

0800b98c <memcpy>:
 800b98c:	440a      	add	r2, r1
 800b98e:	4291      	cmp	r1, r2
 800b990:	f100 33ff 	add.w	r3, r0, #4294967295
 800b994:	d100      	bne.n	800b998 <memcpy+0xc>
 800b996:	4770      	bx	lr
 800b998:	b510      	push	{r4, lr}
 800b99a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b99e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9a2:	4291      	cmp	r1, r2
 800b9a4:	d1f9      	bne.n	800b99a <memcpy+0xe>
 800b9a6:	bd10      	pop	{r4, pc}

0800b9a8 <memset>:
 800b9a8:	4402      	add	r2, r0
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d100      	bne.n	800b9b2 <memset+0xa>
 800b9b0:	4770      	bx	lr
 800b9b2:	f803 1b01 	strb.w	r1, [r3], #1
 800b9b6:	e7f9      	b.n	800b9ac <memset+0x4>

0800b9b8 <_free_r>:
 800b9b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9ba:	2900      	cmp	r1, #0
 800b9bc:	d044      	beq.n	800ba48 <_free_r+0x90>
 800b9be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9c2:	9001      	str	r0, [sp, #4]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	f1a1 0404 	sub.w	r4, r1, #4
 800b9ca:	bfb8      	it	lt
 800b9cc:	18e4      	addlt	r4, r4, r3
 800b9ce:	f002 f947 	bl	800dc60 <__malloc_lock>
 800b9d2:	4a1e      	ldr	r2, [pc, #120]	; (800ba4c <_free_r+0x94>)
 800b9d4:	9801      	ldr	r0, [sp, #4]
 800b9d6:	6813      	ldr	r3, [r2, #0]
 800b9d8:	b933      	cbnz	r3, 800b9e8 <_free_r+0x30>
 800b9da:	6063      	str	r3, [r4, #4]
 800b9dc:	6014      	str	r4, [r2, #0]
 800b9de:	b003      	add	sp, #12
 800b9e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9e4:	f002 b942 	b.w	800dc6c <__malloc_unlock>
 800b9e8:	42a3      	cmp	r3, r4
 800b9ea:	d908      	bls.n	800b9fe <_free_r+0x46>
 800b9ec:	6825      	ldr	r5, [r4, #0]
 800b9ee:	1961      	adds	r1, r4, r5
 800b9f0:	428b      	cmp	r3, r1
 800b9f2:	bf01      	itttt	eq
 800b9f4:	6819      	ldreq	r1, [r3, #0]
 800b9f6:	685b      	ldreq	r3, [r3, #4]
 800b9f8:	1949      	addeq	r1, r1, r5
 800b9fa:	6021      	streq	r1, [r4, #0]
 800b9fc:	e7ed      	b.n	800b9da <_free_r+0x22>
 800b9fe:	461a      	mov	r2, r3
 800ba00:	685b      	ldr	r3, [r3, #4]
 800ba02:	b10b      	cbz	r3, 800ba08 <_free_r+0x50>
 800ba04:	42a3      	cmp	r3, r4
 800ba06:	d9fa      	bls.n	800b9fe <_free_r+0x46>
 800ba08:	6811      	ldr	r1, [r2, #0]
 800ba0a:	1855      	adds	r5, r2, r1
 800ba0c:	42a5      	cmp	r5, r4
 800ba0e:	d10b      	bne.n	800ba28 <_free_r+0x70>
 800ba10:	6824      	ldr	r4, [r4, #0]
 800ba12:	4421      	add	r1, r4
 800ba14:	1854      	adds	r4, r2, r1
 800ba16:	42a3      	cmp	r3, r4
 800ba18:	6011      	str	r1, [r2, #0]
 800ba1a:	d1e0      	bne.n	800b9de <_free_r+0x26>
 800ba1c:	681c      	ldr	r4, [r3, #0]
 800ba1e:	685b      	ldr	r3, [r3, #4]
 800ba20:	6053      	str	r3, [r2, #4]
 800ba22:	4421      	add	r1, r4
 800ba24:	6011      	str	r1, [r2, #0]
 800ba26:	e7da      	b.n	800b9de <_free_r+0x26>
 800ba28:	d902      	bls.n	800ba30 <_free_r+0x78>
 800ba2a:	230c      	movs	r3, #12
 800ba2c:	6003      	str	r3, [r0, #0]
 800ba2e:	e7d6      	b.n	800b9de <_free_r+0x26>
 800ba30:	6825      	ldr	r5, [r4, #0]
 800ba32:	1961      	adds	r1, r4, r5
 800ba34:	428b      	cmp	r3, r1
 800ba36:	bf04      	itt	eq
 800ba38:	6819      	ldreq	r1, [r3, #0]
 800ba3a:	685b      	ldreq	r3, [r3, #4]
 800ba3c:	6063      	str	r3, [r4, #4]
 800ba3e:	bf04      	itt	eq
 800ba40:	1949      	addeq	r1, r1, r5
 800ba42:	6021      	streq	r1, [r4, #0]
 800ba44:	6054      	str	r4, [r2, #4]
 800ba46:	e7ca      	b.n	800b9de <_free_r+0x26>
 800ba48:	b003      	add	sp, #12
 800ba4a:	bd30      	pop	{r4, r5, pc}
 800ba4c:	20003618 	.word	0x20003618

0800ba50 <sbrk_aligned>:
 800ba50:	b570      	push	{r4, r5, r6, lr}
 800ba52:	4e0e      	ldr	r6, [pc, #56]	; (800ba8c <sbrk_aligned+0x3c>)
 800ba54:	460c      	mov	r4, r1
 800ba56:	6831      	ldr	r1, [r6, #0]
 800ba58:	4605      	mov	r5, r0
 800ba5a:	b911      	cbnz	r1, 800ba62 <sbrk_aligned+0x12>
 800ba5c:	f000 fd84 	bl	800c568 <_sbrk_r>
 800ba60:	6030      	str	r0, [r6, #0]
 800ba62:	4621      	mov	r1, r4
 800ba64:	4628      	mov	r0, r5
 800ba66:	f000 fd7f 	bl	800c568 <_sbrk_r>
 800ba6a:	1c43      	adds	r3, r0, #1
 800ba6c:	d00a      	beq.n	800ba84 <sbrk_aligned+0x34>
 800ba6e:	1cc4      	adds	r4, r0, #3
 800ba70:	f024 0403 	bic.w	r4, r4, #3
 800ba74:	42a0      	cmp	r0, r4
 800ba76:	d007      	beq.n	800ba88 <sbrk_aligned+0x38>
 800ba78:	1a21      	subs	r1, r4, r0
 800ba7a:	4628      	mov	r0, r5
 800ba7c:	f000 fd74 	bl	800c568 <_sbrk_r>
 800ba80:	3001      	adds	r0, #1
 800ba82:	d101      	bne.n	800ba88 <sbrk_aligned+0x38>
 800ba84:	f04f 34ff 	mov.w	r4, #4294967295
 800ba88:	4620      	mov	r0, r4
 800ba8a:	bd70      	pop	{r4, r5, r6, pc}
 800ba8c:	2000361c 	.word	0x2000361c

0800ba90 <_malloc_r>:
 800ba90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba94:	1ccd      	adds	r5, r1, #3
 800ba96:	f025 0503 	bic.w	r5, r5, #3
 800ba9a:	3508      	adds	r5, #8
 800ba9c:	2d0c      	cmp	r5, #12
 800ba9e:	bf38      	it	cc
 800baa0:	250c      	movcc	r5, #12
 800baa2:	2d00      	cmp	r5, #0
 800baa4:	4607      	mov	r7, r0
 800baa6:	db01      	blt.n	800baac <_malloc_r+0x1c>
 800baa8:	42a9      	cmp	r1, r5
 800baaa:	d905      	bls.n	800bab8 <_malloc_r+0x28>
 800baac:	230c      	movs	r3, #12
 800baae:	603b      	str	r3, [r7, #0]
 800bab0:	2600      	movs	r6, #0
 800bab2:	4630      	mov	r0, r6
 800bab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bab8:	4e2e      	ldr	r6, [pc, #184]	; (800bb74 <_malloc_r+0xe4>)
 800baba:	f002 f8d1 	bl	800dc60 <__malloc_lock>
 800babe:	6833      	ldr	r3, [r6, #0]
 800bac0:	461c      	mov	r4, r3
 800bac2:	bb34      	cbnz	r4, 800bb12 <_malloc_r+0x82>
 800bac4:	4629      	mov	r1, r5
 800bac6:	4638      	mov	r0, r7
 800bac8:	f7ff ffc2 	bl	800ba50 <sbrk_aligned>
 800bacc:	1c43      	adds	r3, r0, #1
 800bace:	4604      	mov	r4, r0
 800bad0:	d14d      	bne.n	800bb6e <_malloc_r+0xde>
 800bad2:	6834      	ldr	r4, [r6, #0]
 800bad4:	4626      	mov	r6, r4
 800bad6:	2e00      	cmp	r6, #0
 800bad8:	d140      	bne.n	800bb5c <_malloc_r+0xcc>
 800bada:	6823      	ldr	r3, [r4, #0]
 800badc:	4631      	mov	r1, r6
 800bade:	4638      	mov	r0, r7
 800bae0:	eb04 0803 	add.w	r8, r4, r3
 800bae4:	f000 fd40 	bl	800c568 <_sbrk_r>
 800bae8:	4580      	cmp	r8, r0
 800baea:	d13a      	bne.n	800bb62 <_malloc_r+0xd2>
 800baec:	6821      	ldr	r1, [r4, #0]
 800baee:	3503      	adds	r5, #3
 800baf0:	1a6d      	subs	r5, r5, r1
 800baf2:	f025 0503 	bic.w	r5, r5, #3
 800baf6:	3508      	adds	r5, #8
 800baf8:	2d0c      	cmp	r5, #12
 800bafa:	bf38      	it	cc
 800bafc:	250c      	movcc	r5, #12
 800bafe:	4629      	mov	r1, r5
 800bb00:	4638      	mov	r0, r7
 800bb02:	f7ff ffa5 	bl	800ba50 <sbrk_aligned>
 800bb06:	3001      	adds	r0, #1
 800bb08:	d02b      	beq.n	800bb62 <_malloc_r+0xd2>
 800bb0a:	6823      	ldr	r3, [r4, #0]
 800bb0c:	442b      	add	r3, r5
 800bb0e:	6023      	str	r3, [r4, #0]
 800bb10:	e00e      	b.n	800bb30 <_malloc_r+0xa0>
 800bb12:	6822      	ldr	r2, [r4, #0]
 800bb14:	1b52      	subs	r2, r2, r5
 800bb16:	d41e      	bmi.n	800bb56 <_malloc_r+0xc6>
 800bb18:	2a0b      	cmp	r2, #11
 800bb1a:	d916      	bls.n	800bb4a <_malloc_r+0xba>
 800bb1c:	1961      	adds	r1, r4, r5
 800bb1e:	42a3      	cmp	r3, r4
 800bb20:	6025      	str	r5, [r4, #0]
 800bb22:	bf18      	it	ne
 800bb24:	6059      	strne	r1, [r3, #4]
 800bb26:	6863      	ldr	r3, [r4, #4]
 800bb28:	bf08      	it	eq
 800bb2a:	6031      	streq	r1, [r6, #0]
 800bb2c:	5162      	str	r2, [r4, r5]
 800bb2e:	604b      	str	r3, [r1, #4]
 800bb30:	4638      	mov	r0, r7
 800bb32:	f104 060b 	add.w	r6, r4, #11
 800bb36:	f002 f899 	bl	800dc6c <__malloc_unlock>
 800bb3a:	f026 0607 	bic.w	r6, r6, #7
 800bb3e:	1d23      	adds	r3, r4, #4
 800bb40:	1af2      	subs	r2, r6, r3
 800bb42:	d0b6      	beq.n	800bab2 <_malloc_r+0x22>
 800bb44:	1b9b      	subs	r3, r3, r6
 800bb46:	50a3      	str	r3, [r4, r2]
 800bb48:	e7b3      	b.n	800bab2 <_malloc_r+0x22>
 800bb4a:	6862      	ldr	r2, [r4, #4]
 800bb4c:	42a3      	cmp	r3, r4
 800bb4e:	bf0c      	ite	eq
 800bb50:	6032      	streq	r2, [r6, #0]
 800bb52:	605a      	strne	r2, [r3, #4]
 800bb54:	e7ec      	b.n	800bb30 <_malloc_r+0xa0>
 800bb56:	4623      	mov	r3, r4
 800bb58:	6864      	ldr	r4, [r4, #4]
 800bb5a:	e7b2      	b.n	800bac2 <_malloc_r+0x32>
 800bb5c:	4634      	mov	r4, r6
 800bb5e:	6876      	ldr	r6, [r6, #4]
 800bb60:	e7b9      	b.n	800bad6 <_malloc_r+0x46>
 800bb62:	230c      	movs	r3, #12
 800bb64:	603b      	str	r3, [r7, #0]
 800bb66:	4638      	mov	r0, r7
 800bb68:	f002 f880 	bl	800dc6c <__malloc_unlock>
 800bb6c:	e7a1      	b.n	800bab2 <_malloc_r+0x22>
 800bb6e:	6025      	str	r5, [r4, #0]
 800bb70:	e7de      	b.n	800bb30 <_malloc_r+0xa0>
 800bb72:	bf00      	nop
 800bb74:	20003618 	.word	0x20003618

0800bb78 <__cvt>:
 800bb78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb7c:	ec55 4b10 	vmov	r4, r5, d0
 800bb80:	2d00      	cmp	r5, #0
 800bb82:	460e      	mov	r6, r1
 800bb84:	4619      	mov	r1, r3
 800bb86:	462b      	mov	r3, r5
 800bb88:	bfbb      	ittet	lt
 800bb8a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bb8e:	461d      	movlt	r5, r3
 800bb90:	2300      	movge	r3, #0
 800bb92:	232d      	movlt	r3, #45	; 0x2d
 800bb94:	700b      	strb	r3, [r1, #0]
 800bb96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb98:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bb9c:	4691      	mov	r9, r2
 800bb9e:	f023 0820 	bic.w	r8, r3, #32
 800bba2:	bfbc      	itt	lt
 800bba4:	4622      	movlt	r2, r4
 800bba6:	4614      	movlt	r4, r2
 800bba8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bbac:	d005      	beq.n	800bbba <__cvt+0x42>
 800bbae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bbb2:	d100      	bne.n	800bbb6 <__cvt+0x3e>
 800bbb4:	3601      	adds	r6, #1
 800bbb6:	2102      	movs	r1, #2
 800bbb8:	e000      	b.n	800bbbc <__cvt+0x44>
 800bbba:	2103      	movs	r1, #3
 800bbbc:	ab03      	add	r3, sp, #12
 800bbbe:	9301      	str	r3, [sp, #4]
 800bbc0:	ab02      	add	r3, sp, #8
 800bbc2:	9300      	str	r3, [sp, #0]
 800bbc4:	ec45 4b10 	vmov	d0, r4, r5
 800bbc8:	4653      	mov	r3, sl
 800bbca:	4632      	mov	r2, r6
 800bbcc:	f001 f810 	bl	800cbf0 <_dtoa_r>
 800bbd0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bbd4:	4607      	mov	r7, r0
 800bbd6:	d102      	bne.n	800bbde <__cvt+0x66>
 800bbd8:	f019 0f01 	tst.w	r9, #1
 800bbdc:	d022      	beq.n	800bc24 <__cvt+0xac>
 800bbde:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bbe2:	eb07 0906 	add.w	r9, r7, r6
 800bbe6:	d110      	bne.n	800bc0a <__cvt+0x92>
 800bbe8:	783b      	ldrb	r3, [r7, #0]
 800bbea:	2b30      	cmp	r3, #48	; 0x30
 800bbec:	d10a      	bne.n	800bc04 <__cvt+0x8c>
 800bbee:	2200      	movs	r2, #0
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	4620      	mov	r0, r4
 800bbf4:	4629      	mov	r1, r5
 800bbf6:	f7f4 ff77 	bl	8000ae8 <__aeabi_dcmpeq>
 800bbfa:	b918      	cbnz	r0, 800bc04 <__cvt+0x8c>
 800bbfc:	f1c6 0601 	rsb	r6, r6, #1
 800bc00:	f8ca 6000 	str.w	r6, [sl]
 800bc04:	f8da 3000 	ldr.w	r3, [sl]
 800bc08:	4499      	add	r9, r3
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	4620      	mov	r0, r4
 800bc10:	4629      	mov	r1, r5
 800bc12:	f7f4 ff69 	bl	8000ae8 <__aeabi_dcmpeq>
 800bc16:	b108      	cbz	r0, 800bc1c <__cvt+0xa4>
 800bc18:	f8cd 900c 	str.w	r9, [sp, #12]
 800bc1c:	2230      	movs	r2, #48	; 0x30
 800bc1e:	9b03      	ldr	r3, [sp, #12]
 800bc20:	454b      	cmp	r3, r9
 800bc22:	d307      	bcc.n	800bc34 <__cvt+0xbc>
 800bc24:	9b03      	ldr	r3, [sp, #12]
 800bc26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc28:	1bdb      	subs	r3, r3, r7
 800bc2a:	4638      	mov	r0, r7
 800bc2c:	6013      	str	r3, [r2, #0]
 800bc2e:	b004      	add	sp, #16
 800bc30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc34:	1c59      	adds	r1, r3, #1
 800bc36:	9103      	str	r1, [sp, #12]
 800bc38:	701a      	strb	r2, [r3, #0]
 800bc3a:	e7f0      	b.n	800bc1e <__cvt+0xa6>

0800bc3c <__exponent>:
 800bc3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc3e:	4603      	mov	r3, r0
 800bc40:	2900      	cmp	r1, #0
 800bc42:	bfb8      	it	lt
 800bc44:	4249      	neglt	r1, r1
 800bc46:	f803 2b02 	strb.w	r2, [r3], #2
 800bc4a:	bfb4      	ite	lt
 800bc4c:	222d      	movlt	r2, #45	; 0x2d
 800bc4e:	222b      	movge	r2, #43	; 0x2b
 800bc50:	2909      	cmp	r1, #9
 800bc52:	7042      	strb	r2, [r0, #1]
 800bc54:	dd2a      	ble.n	800bcac <__exponent+0x70>
 800bc56:	f10d 0407 	add.w	r4, sp, #7
 800bc5a:	46a4      	mov	ip, r4
 800bc5c:	270a      	movs	r7, #10
 800bc5e:	46a6      	mov	lr, r4
 800bc60:	460a      	mov	r2, r1
 800bc62:	fb91 f6f7 	sdiv	r6, r1, r7
 800bc66:	fb07 1516 	mls	r5, r7, r6, r1
 800bc6a:	3530      	adds	r5, #48	; 0x30
 800bc6c:	2a63      	cmp	r2, #99	; 0x63
 800bc6e:	f104 34ff 	add.w	r4, r4, #4294967295
 800bc72:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bc76:	4631      	mov	r1, r6
 800bc78:	dcf1      	bgt.n	800bc5e <__exponent+0x22>
 800bc7a:	3130      	adds	r1, #48	; 0x30
 800bc7c:	f1ae 0502 	sub.w	r5, lr, #2
 800bc80:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bc84:	1c44      	adds	r4, r0, #1
 800bc86:	4629      	mov	r1, r5
 800bc88:	4561      	cmp	r1, ip
 800bc8a:	d30a      	bcc.n	800bca2 <__exponent+0x66>
 800bc8c:	f10d 0209 	add.w	r2, sp, #9
 800bc90:	eba2 020e 	sub.w	r2, r2, lr
 800bc94:	4565      	cmp	r5, ip
 800bc96:	bf88      	it	hi
 800bc98:	2200      	movhi	r2, #0
 800bc9a:	4413      	add	r3, r2
 800bc9c:	1a18      	subs	r0, r3, r0
 800bc9e:	b003      	add	sp, #12
 800bca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bca2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bca6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bcaa:	e7ed      	b.n	800bc88 <__exponent+0x4c>
 800bcac:	2330      	movs	r3, #48	; 0x30
 800bcae:	3130      	adds	r1, #48	; 0x30
 800bcb0:	7083      	strb	r3, [r0, #2]
 800bcb2:	70c1      	strb	r1, [r0, #3]
 800bcb4:	1d03      	adds	r3, r0, #4
 800bcb6:	e7f1      	b.n	800bc9c <__exponent+0x60>

0800bcb8 <_printf_float>:
 800bcb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcbc:	ed2d 8b02 	vpush	{d8}
 800bcc0:	b08d      	sub	sp, #52	; 0x34
 800bcc2:	460c      	mov	r4, r1
 800bcc4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bcc8:	4616      	mov	r6, r2
 800bcca:	461f      	mov	r7, r3
 800bccc:	4605      	mov	r5, r0
 800bcce:	f001 ff47 	bl	800db60 <_localeconv_r>
 800bcd2:	f8d0 a000 	ldr.w	sl, [r0]
 800bcd6:	4650      	mov	r0, sl
 800bcd8:	f7f4 fa84 	bl	80001e4 <strlen>
 800bcdc:	2300      	movs	r3, #0
 800bcde:	930a      	str	r3, [sp, #40]	; 0x28
 800bce0:	6823      	ldr	r3, [r4, #0]
 800bce2:	9305      	str	r3, [sp, #20]
 800bce4:	f8d8 3000 	ldr.w	r3, [r8]
 800bce8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bcec:	3307      	adds	r3, #7
 800bcee:	f023 0307 	bic.w	r3, r3, #7
 800bcf2:	f103 0208 	add.w	r2, r3, #8
 800bcf6:	f8c8 2000 	str.w	r2, [r8]
 800bcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bd02:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bd06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bd0a:	9307      	str	r3, [sp, #28]
 800bd0c:	f8cd 8018 	str.w	r8, [sp, #24]
 800bd10:	ee08 0a10 	vmov	s16, r0
 800bd14:	4b9f      	ldr	r3, [pc, #636]	; (800bf94 <_printf_float+0x2dc>)
 800bd16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd1a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd1e:	f7f4 ff15 	bl	8000b4c <__aeabi_dcmpun>
 800bd22:	bb88      	cbnz	r0, 800bd88 <_printf_float+0xd0>
 800bd24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd28:	4b9a      	ldr	r3, [pc, #616]	; (800bf94 <_printf_float+0x2dc>)
 800bd2a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd2e:	f7f4 feef 	bl	8000b10 <__aeabi_dcmple>
 800bd32:	bb48      	cbnz	r0, 800bd88 <_printf_float+0xd0>
 800bd34:	2200      	movs	r2, #0
 800bd36:	2300      	movs	r3, #0
 800bd38:	4640      	mov	r0, r8
 800bd3a:	4649      	mov	r1, r9
 800bd3c:	f7f4 fede 	bl	8000afc <__aeabi_dcmplt>
 800bd40:	b110      	cbz	r0, 800bd48 <_printf_float+0x90>
 800bd42:	232d      	movs	r3, #45	; 0x2d
 800bd44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd48:	4b93      	ldr	r3, [pc, #588]	; (800bf98 <_printf_float+0x2e0>)
 800bd4a:	4894      	ldr	r0, [pc, #592]	; (800bf9c <_printf_float+0x2e4>)
 800bd4c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bd50:	bf94      	ite	ls
 800bd52:	4698      	movls	r8, r3
 800bd54:	4680      	movhi	r8, r0
 800bd56:	2303      	movs	r3, #3
 800bd58:	6123      	str	r3, [r4, #16]
 800bd5a:	9b05      	ldr	r3, [sp, #20]
 800bd5c:	f023 0204 	bic.w	r2, r3, #4
 800bd60:	6022      	str	r2, [r4, #0]
 800bd62:	f04f 0900 	mov.w	r9, #0
 800bd66:	9700      	str	r7, [sp, #0]
 800bd68:	4633      	mov	r3, r6
 800bd6a:	aa0b      	add	r2, sp, #44	; 0x2c
 800bd6c:	4621      	mov	r1, r4
 800bd6e:	4628      	mov	r0, r5
 800bd70:	f000 f9d8 	bl	800c124 <_printf_common>
 800bd74:	3001      	adds	r0, #1
 800bd76:	f040 8090 	bne.w	800be9a <_printf_float+0x1e2>
 800bd7a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd7e:	b00d      	add	sp, #52	; 0x34
 800bd80:	ecbd 8b02 	vpop	{d8}
 800bd84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd88:	4642      	mov	r2, r8
 800bd8a:	464b      	mov	r3, r9
 800bd8c:	4640      	mov	r0, r8
 800bd8e:	4649      	mov	r1, r9
 800bd90:	f7f4 fedc 	bl	8000b4c <__aeabi_dcmpun>
 800bd94:	b140      	cbz	r0, 800bda8 <_printf_float+0xf0>
 800bd96:	464b      	mov	r3, r9
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	bfbc      	itt	lt
 800bd9c:	232d      	movlt	r3, #45	; 0x2d
 800bd9e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bda2:	487f      	ldr	r0, [pc, #508]	; (800bfa0 <_printf_float+0x2e8>)
 800bda4:	4b7f      	ldr	r3, [pc, #508]	; (800bfa4 <_printf_float+0x2ec>)
 800bda6:	e7d1      	b.n	800bd4c <_printf_float+0x94>
 800bda8:	6863      	ldr	r3, [r4, #4]
 800bdaa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bdae:	9206      	str	r2, [sp, #24]
 800bdb0:	1c5a      	adds	r2, r3, #1
 800bdb2:	d13f      	bne.n	800be34 <_printf_float+0x17c>
 800bdb4:	2306      	movs	r3, #6
 800bdb6:	6063      	str	r3, [r4, #4]
 800bdb8:	9b05      	ldr	r3, [sp, #20]
 800bdba:	6861      	ldr	r1, [r4, #4]
 800bdbc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	9303      	str	r3, [sp, #12]
 800bdc4:	ab0a      	add	r3, sp, #40	; 0x28
 800bdc6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bdca:	ab09      	add	r3, sp, #36	; 0x24
 800bdcc:	ec49 8b10 	vmov	d0, r8, r9
 800bdd0:	9300      	str	r3, [sp, #0]
 800bdd2:	6022      	str	r2, [r4, #0]
 800bdd4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bdd8:	4628      	mov	r0, r5
 800bdda:	f7ff fecd 	bl	800bb78 <__cvt>
 800bdde:	9b06      	ldr	r3, [sp, #24]
 800bde0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bde2:	2b47      	cmp	r3, #71	; 0x47
 800bde4:	4680      	mov	r8, r0
 800bde6:	d108      	bne.n	800bdfa <_printf_float+0x142>
 800bde8:	1cc8      	adds	r0, r1, #3
 800bdea:	db02      	blt.n	800bdf2 <_printf_float+0x13a>
 800bdec:	6863      	ldr	r3, [r4, #4]
 800bdee:	4299      	cmp	r1, r3
 800bdf0:	dd41      	ble.n	800be76 <_printf_float+0x1be>
 800bdf2:	f1ab 0b02 	sub.w	fp, fp, #2
 800bdf6:	fa5f fb8b 	uxtb.w	fp, fp
 800bdfa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bdfe:	d820      	bhi.n	800be42 <_printf_float+0x18a>
 800be00:	3901      	subs	r1, #1
 800be02:	465a      	mov	r2, fp
 800be04:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800be08:	9109      	str	r1, [sp, #36]	; 0x24
 800be0a:	f7ff ff17 	bl	800bc3c <__exponent>
 800be0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be10:	1813      	adds	r3, r2, r0
 800be12:	2a01      	cmp	r2, #1
 800be14:	4681      	mov	r9, r0
 800be16:	6123      	str	r3, [r4, #16]
 800be18:	dc02      	bgt.n	800be20 <_printf_float+0x168>
 800be1a:	6822      	ldr	r2, [r4, #0]
 800be1c:	07d2      	lsls	r2, r2, #31
 800be1e:	d501      	bpl.n	800be24 <_printf_float+0x16c>
 800be20:	3301      	adds	r3, #1
 800be22:	6123      	str	r3, [r4, #16]
 800be24:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d09c      	beq.n	800bd66 <_printf_float+0xae>
 800be2c:	232d      	movs	r3, #45	; 0x2d
 800be2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be32:	e798      	b.n	800bd66 <_printf_float+0xae>
 800be34:	9a06      	ldr	r2, [sp, #24]
 800be36:	2a47      	cmp	r2, #71	; 0x47
 800be38:	d1be      	bne.n	800bdb8 <_printf_float+0x100>
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d1bc      	bne.n	800bdb8 <_printf_float+0x100>
 800be3e:	2301      	movs	r3, #1
 800be40:	e7b9      	b.n	800bdb6 <_printf_float+0xfe>
 800be42:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800be46:	d118      	bne.n	800be7a <_printf_float+0x1c2>
 800be48:	2900      	cmp	r1, #0
 800be4a:	6863      	ldr	r3, [r4, #4]
 800be4c:	dd0b      	ble.n	800be66 <_printf_float+0x1ae>
 800be4e:	6121      	str	r1, [r4, #16]
 800be50:	b913      	cbnz	r3, 800be58 <_printf_float+0x1a0>
 800be52:	6822      	ldr	r2, [r4, #0]
 800be54:	07d0      	lsls	r0, r2, #31
 800be56:	d502      	bpl.n	800be5e <_printf_float+0x1a6>
 800be58:	3301      	adds	r3, #1
 800be5a:	440b      	add	r3, r1
 800be5c:	6123      	str	r3, [r4, #16]
 800be5e:	65a1      	str	r1, [r4, #88]	; 0x58
 800be60:	f04f 0900 	mov.w	r9, #0
 800be64:	e7de      	b.n	800be24 <_printf_float+0x16c>
 800be66:	b913      	cbnz	r3, 800be6e <_printf_float+0x1b6>
 800be68:	6822      	ldr	r2, [r4, #0]
 800be6a:	07d2      	lsls	r2, r2, #31
 800be6c:	d501      	bpl.n	800be72 <_printf_float+0x1ba>
 800be6e:	3302      	adds	r3, #2
 800be70:	e7f4      	b.n	800be5c <_printf_float+0x1a4>
 800be72:	2301      	movs	r3, #1
 800be74:	e7f2      	b.n	800be5c <_printf_float+0x1a4>
 800be76:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800be7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be7c:	4299      	cmp	r1, r3
 800be7e:	db05      	blt.n	800be8c <_printf_float+0x1d4>
 800be80:	6823      	ldr	r3, [r4, #0]
 800be82:	6121      	str	r1, [r4, #16]
 800be84:	07d8      	lsls	r0, r3, #31
 800be86:	d5ea      	bpl.n	800be5e <_printf_float+0x1a6>
 800be88:	1c4b      	adds	r3, r1, #1
 800be8a:	e7e7      	b.n	800be5c <_printf_float+0x1a4>
 800be8c:	2900      	cmp	r1, #0
 800be8e:	bfd4      	ite	le
 800be90:	f1c1 0202 	rsble	r2, r1, #2
 800be94:	2201      	movgt	r2, #1
 800be96:	4413      	add	r3, r2
 800be98:	e7e0      	b.n	800be5c <_printf_float+0x1a4>
 800be9a:	6823      	ldr	r3, [r4, #0]
 800be9c:	055a      	lsls	r2, r3, #21
 800be9e:	d407      	bmi.n	800beb0 <_printf_float+0x1f8>
 800bea0:	6923      	ldr	r3, [r4, #16]
 800bea2:	4642      	mov	r2, r8
 800bea4:	4631      	mov	r1, r6
 800bea6:	4628      	mov	r0, r5
 800bea8:	47b8      	blx	r7
 800beaa:	3001      	adds	r0, #1
 800beac:	d12c      	bne.n	800bf08 <_printf_float+0x250>
 800beae:	e764      	b.n	800bd7a <_printf_float+0xc2>
 800beb0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800beb4:	f240 80e0 	bls.w	800c078 <_printf_float+0x3c0>
 800beb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bebc:	2200      	movs	r2, #0
 800bebe:	2300      	movs	r3, #0
 800bec0:	f7f4 fe12 	bl	8000ae8 <__aeabi_dcmpeq>
 800bec4:	2800      	cmp	r0, #0
 800bec6:	d034      	beq.n	800bf32 <_printf_float+0x27a>
 800bec8:	4a37      	ldr	r2, [pc, #220]	; (800bfa8 <_printf_float+0x2f0>)
 800beca:	2301      	movs	r3, #1
 800becc:	4631      	mov	r1, r6
 800bece:	4628      	mov	r0, r5
 800bed0:	47b8      	blx	r7
 800bed2:	3001      	adds	r0, #1
 800bed4:	f43f af51 	beq.w	800bd7a <_printf_float+0xc2>
 800bed8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bedc:	429a      	cmp	r2, r3
 800bede:	db02      	blt.n	800bee6 <_printf_float+0x22e>
 800bee0:	6823      	ldr	r3, [r4, #0]
 800bee2:	07d8      	lsls	r0, r3, #31
 800bee4:	d510      	bpl.n	800bf08 <_printf_float+0x250>
 800bee6:	ee18 3a10 	vmov	r3, s16
 800beea:	4652      	mov	r2, sl
 800beec:	4631      	mov	r1, r6
 800beee:	4628      	mov	r0, r5
 800bef0:	47b8      	blx	r7
 800bef2:	3001      	adds	r0, #1
 800bef4:	f43f af41 	beq.w	800bd7a <_printf_float+0xc2>
 800bef8:	f04f 0800 	mov.w	r8, #0
 800befc:	f104 091a 	add.w	r9, r4, #26
 800bf00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf02:	3b01      	subs	r3, #1
 800bf04:	4543      	cmp	r3, r8
 800bf06:	dc09      	bgt.n	800bf1c <_printf_float+0x264>
 800bf08:	6823      	ldr	r3, [r4, #0]
 800bf0a:	079b      	lsls	r3, r3, #30
 800bf0c:	f100 8105 	bmi.w	800c11a <_printf_float+0x462>
 800bf10:	68e0      	ldr	r0, [r4, #12]
 800bf12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf14:	4298      	cmp	r0, r3
 800bf16:	bfb8      	it	lt
 800bf18:	4618      	movlt	r0, r3
 800bf1a:	e730      	b.n	800bd7e <_printf_float+0xc6>
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	464a      	mov	r2, r9
 800bf20:	4631      	mov	r1, r6
 800bf22:	4628      	mov	r0, r5
 800bf24:	47b8      	blx	r7
 800bf26:	3001      	adds	r0, #1
 800bf28:	f43f af27 	beq.w	800bd7a <_printf_float+0xc2>
 800bf2c:	f108 0801 	add.w	r8, r8, #1
 800bf30:	e7e6      	b.n	800bf00 <_printf_float+0x248>
 800bf32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	dc39      	bgt.n	800bfac <_printf_float+0x2f4>
 800bf38:	4a1b      	ldr	r2, [pc, #108]	; (800bfa8 <_printf_float+0x2f0>)
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	4631      	mov	r1, r6
 800bf3e:	4628      	mov	r0, r5
 800bf40:	47b8      	blx	r7
 800bf42:	3001      	adds	r0, #1
 800bf44:	f43f af19 	beq.w	800bd7a <_printf_float+0xc2>
 800bf48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	d102      	bne.n	800bf56 <_printf_float+0x29e>
 800bf50:	6823      	ldr	r3, [r4, #0]
 800bf52:	07d9      	lsls	r1, r3, #31
 800bf54:	d5d8      	bpl.n	800bf08 <_printf_float+0x250>
 800bf56:	ee18 3a10 	vmov	r3, s16
 800bf5a:	4652      	mov	r2, sl
 800bf5c:	4631      	mov	r1, r6
 800bf5e:	4628      	mov	r0, r5
 800bf60:	47b8      	blx	r7
 800bf62:	3001      	adds	r0, #1
 800bf64:	f43f af09 	beq.w	800bd7a <_printf_float+0xc2>
 800bf68:	f04f 0900 	mov.w	r9, #0
 800bf6c:	f104 0a1a 	add.w	sl, r4, #26
 800bf70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf72:	425b      	negs	r3, r3
 800bf74:	454b      	cmp	r3, r9
 800bf76:	dc01      	bgt.n	800bf7c <_printf_float+0x2c4>
 800bf78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf7a:	e792      	b.n	800bea2 <_printf_float+0x1ea>
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	4652      	mov	r2, sl
 800bf80:	4631      	mov	r1, r6
 800bf82:	4628      	mov	r0, r5
 800bf84:	47b8      	blx	r7
 800bf86:	3001      	adds	r0, #1
 800bf88:	f43f aef7 	beq.w	800bd7a <_printf_float+0xc2>
 800bf8c:	f109 0901 	add.w	r9, r9, #1
 800bf90:	e7ee      	b.n	800bf70 <_printf_float+0x2b8>
 800bf92:	bf00      	nop
 800bf94:	7fefffff 	.word	0x7fefffff
 800bf98:	0800f298 	.word	0x0800f298
 800bf9c:	0800f29c 	.word	0x0800f29c
 800bfa0:	0800f2a4 	.word	0x0800f2a4
 800bfa4:	0800f2a0 	.word	0x0800f2a0
 800bfa8:	0800f6c1 	.word	0x0800f6c1
 800bfac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bfae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	bfa8      	it	ge
 800bfb4:	461a      	movge	r2, r3
 800bfb6:	2a00      	cmp	r2, #0
 800bfb8:	4691      	mov	r9, r2
 800bfba:	dc37      	bgt.n	800c02c <_printf_float+0x374>
 800bfbc:	f04f 0b00 	mov.w	fp, #0
 800bfc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bfc4:	f104 021a 	add.w	r2, r4, #26
 800bfc8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bfca:	9305      	str	r3, [sp, #20]
 800bfcc:	eba3 0309 	sub.w	r3, r3, r9
 800bfd0:	455b      	cmp	r3, fp
 800bfd2:	dc33      	bgt.n	800c03c <_printf_float+0x384>
 800bfd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	db3b      	blt.n	800c054 <_printf_float+0x39c>
 800bfdc:	6823      	ldr	r3, [r4, #0]
 800bfde:	07da      	lsls	r2, r3, #31
 800bfe0:	d438      	bmi.n	800c054 <_printf_float+0x39c>
 800bfe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfe4:	9a05      	ldr	r2, [sp, #20]
 800bfe6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bfe8:	1a9a      	subs	r2, r3, r2
 800bfea:	eba3 0901 	sub.w	r9, r3, r1
 800bfee:	4591      	cmp	r9, r2
 800bff0:	bfa8      	it	ge
 800bff2:	4691      	movge	r9, r2
 800bff4:	f1b9 0f00 	cmp.w	r9, #0
 800bff8:	dc35      	bgt.n	800c066 <_printf_float+0x3ae>
 800bffa:	f04f 0800 	mov.w	r8, #0
 800bffe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c002:	f104 0a1a 	add.w	sl, r4, #26
 800c006:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c00a:	1a9b      	subs	r3, r3, r2
 800c00c:	eba3 0309 	sub.w	r3, r3, r9
 800c010:	4543      	cmp	r3, r8
 800c012:	f77f af79 	ble.w	800bf08 <_printf_float+0x250>
 800c016:	2301      	movs	r3, #1
 800c018:	4652      	mov	r2, sl
 800c01a:	4631      	mov	r1, r6
 800c01c:	4628      	mov	r0, r5
 800c01e:	47b8      	blx	r7
 800c020:	3001      	adds	r0, #1
 800c022:	f43f aeaa 	beq.w	800bd7a <_printf_float+0xc2>
 800c026:	f108 0801 	add.w	r8, r8, #1
 800c02a:	e7ec      	b.n	800c006 <_printf_float+0x34e>
 800c02c:	4613      	mov	r3, r2
 800c02e:	4631      	mov	r1, r6
 800c030:	4642      	mov	r2, r8
 800c032:	4628      	mov	r0, r5
 800c034:	47b8      	blx	r7
 800c036:	3001      	adds	r0, #1
 800c038:	d1c0      	bne.n	800bfbc <_printf_float+0x304>
 800c03a:	e69e      	b.n	800bd7a <_printf_float+0xc2>
 800c03c:	2301      	movs	r3, #1
 800c03e:	4631      	mov	r1, r6
 800c040:	4628      	mov	r0, r5
 800c042:	9205      	str	r2, [sp, #20]
 800c044:	47b8      	blx	r7
 800c046:	3001      	adds	r0, #1
 800c048:	f43f ae97 	beq.w	800bd7a <_printf_float+0xc2>
 800c04c:	9a05      	ldr	r2, [sp, #20]
 800c04e:	f10b 0b01 	add.w	fp, fp, #1
 800c052:	e7b9      	b.n	800bfc8 <_printf_float+0x310>
 800c054:	ee18 3a10 	vmov	r3, s16
 800c058:	4652      	mov	r2, sl
 800c05a:	4631      	mov	r1, r6
 800c05c:	4628      	mov	r0, r5
 800c05e:	47b8      	blx	r7
 800c060:	3001      	adds	r0, #1
 800c062:	d1be      	bne.n	800bfe2 <_printf_float+0x32a>
 800c064:	e689      	b.n	800bd7a <_printf_float+0xc2>
 800c066:	9a05      	ldr	r2, [sp, #20]
 800c068:	464b      	mov	r3, r9
 800c06a:	4442      	add	r2, r8
 800c06c:	4631      	mov	r1, r6
 800c06e:	4628      	mov	r0, r5
 800c070:	47b8      	blx	r7
 800c072:	3001      	adds	r0, #1
 800c074:	d1c1      	bne.n	800bffa <_printf_float+0x342>
 800c076:	e680      	b.n	800bd7a <_printf_float+0xc2>
 800c078:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c07a:	2a01      	cmp	r2, #1
 800c07c:	dc01      	bgt.n	800c082 <_printf_float+0x3ca>
 800c07e:	07db      	lsls	r3, r3, #31
 800c080:	d538      	bpl.n	800c0f4 <_printf_float+0x43c>
 800c082:	2301      	movs	r3, #1
 800c084:	4642      	mov	r2, r8
 800c086:	4631      	mov	r1, r6
 800c088:	4628      	mov	r0, r5
 800c08a:	47b8      	blx	r7
 800c08c:	3001      	adds	r0, #1
 800c08e:	f43f ae74 	beq.w	800bd7a <_printf_float+0xc2>
 800c092:	ee18 3a10 	vmov	r3, s16
 800c096:	4652      	mov	r2, sl
 800c098:	4631      	mov	r1, r6
 800c09a:	4628      	mov	r0, r5
 800c09c:	47b8      	blx	r7
 800c09e:	3001      	adds	r0, #1
 800c0a0:	f43f ae6b 	beq.w	800bd7a <_printf_float+0xc2>
 800c0a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	f7f4 fd1c 	bl	8000ae8 <__aeabi_dcmpeq>
 800c0b0:	b9d8      	cbnz	r0, 800c0ea <_printf_float+0x432>
 800c0b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0b4:	f108 0201 	add.w	r2, r8, #1
 800c0b8:	3b01      	subs	r3, #1
 800c0ba:	4631      	mov	r1, r6
 800c0bc:	4628      	mov	r0, r5
 800c0be:	47b8      	blx	r7
 800c0c0:	3001      	adds	r0, #1
 800c0c2:	d10e      	bne.n	800c0e2 <_printf_float+0x42a>
 800c0c4:	e659      	b.n	800bd7a <_printf_float+0xc2>
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	4652      	mov	r2, sl
 800c0ca:	4631      	mov	r1, r6
 800c0cc:	4628      	mov	r0, r5
 800c0ce:	47b8      	blx	r7
 800c0d0:	3001      	adds	r0, #1
 800c0d2:	f43f ae52 	beq.w	800bd7a <_printf_float+0xc2>
 800c0d6:	f108 0801 	add.w	r8, r8, #1
 800c0da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0dc:	3b01      	subs	r3, #1
 800c0de:	4543      	cmp	r3, r8
 800c0e0:	dcf1      	bgt.n	800c0c6 <_printf_float+0x40e>
 800c0e2:	464b      	mov	r3, r9
 800c0e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c0e8:	e6dc      	b.n	800bea4 <_printf_float+0x1ec>
 800c0ea:	f04f 0800 	mov.w	r8, #0
 800c0ee:	f104 0a1a 	add.w	sl, r4, #26
 800c0f2:	e7f2      	b.n	800c0da <_printf_float+0x422>
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	4642      	mov	r2, r8
 800c0f8:	e7df      	b.n	800c0ba <_printf_float+0x402>
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	464a      	mov	r2, r9
 800c0fe:	4631      	mov	r1, r6
 800c100:	4628      	mov	r0, r5
 800c102:	47b8      	blx	r7
 800c104:	3001      	adds	r0, #1
 800c106:	f43f ae38 	beq.w	800bd7a <_printf_float+0xc2>
 800c10a:	f108 0801 	add.w	r8, r8, #1
 800c10e:	68e3      	ldr	r3, [r4, #12]
 800c110:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c112:	1a5b      	subs	r3, r3, r1
 800c114:	4543      	cmp	r3, r8
 800c116:	dcf0      	bgt.n	800c0fa <_printf_float+0x442>
 800c118:	e6fa      	b.n	800bf10 <_printf_float+0x258>
 800c11a:	f04f 0800 	mov.w	r8, #0
 800c11e:	f104 0919 	add.w	r9, r4, #25
 800c122:	e7f4      	b.n	800c10e <_printf_float+0x456>

0800c124 <_printf_common>:
 800c124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c128:	4616      	mov	r6, r2
 800c12a:	4699      	mov	r9, r3
 800c12c:	688a      	ldr	r2, [r1, #8]
 800c12e:	690b      	ldr	r3, [r1, #16]
 800c130:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c134:	4293      	cmp	r3, r2
 800c136:	bfb8      	it	lt
 800c138:	4613      	movlt	r3, r2
 800c13a:	6033      	str	r3, [r6, #0]
 800c13c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c140:	4607      	mov	r7, r0
 800c142:	460c      	mov	r4, r1
 800c144:	b10a      	cbz	r2, 800c14a <_printf_common+0x26>
 800c146:	3301      	adds	r3, #1
 800c148:	6033      	str	r3, [r6, #0]
 800c14a:	6823      	ldr	r3, [r4, #0]
 800c14c:	0699      	lsls	r1, r3, #26
 800c14e:	bf42      	ittt	mi
 800c150:	6833      	ldrmi	r3, [r6, #0]
 800c152:	3302      	addmi	r3, #2
 800c154:	6033      	strmi	r3, [r6, #0]
 800c156:	6825      	ldr	r5, [r4, #0]
 800c158:	f015 0506 	ands.w	r5, r5, #6
 800c15c:	d106      	bne.n	800c16c <_printf_common+0x48>
 800c15e:	f104 0a19 	add.w	sl, r4, #25
 800c162:	68e3      	ldr	r3, [r4, #12]
 800c164:	6832      	ldr	r2, [r6, #0]
 800c166:	1a9b      	subs	r3, r3, r2
 800c168:	42ab      	cmp	r3, r5
 800c16a:	dc26      	bgt.n	800c1ba <_printf_common+0x96>
 800c16c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c170:	1e13      	subs	r3, r2, #0
 800c172:	6822      	ldr	r2, [r4, #0]
 800c174:	bf18      	it	ne
 800c176:	2301      	movne	r3, #1
 800c178:	0692      	lsls	r2, r2, #26
 800c17a:	d42b      	bmi.n	800c1d4 <_printf_common+0xb0>
 800c17c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c180:	4649      	mov	r1, r9
 800c182:	4638      	mov	r0, r7
 800c184:	47c0      	blx	r8
 800c186:	3001      	adds	r0, #1
 800c188:	d01e      	beq.n	800c1c8 <_printf_common+0xa4>
 800c18a:	6823      	ldr	r3, [r4, #0]
 800c18c:	68e5      	ldr	r5, [r4, #12]
 800c18e:	6832      	ldr	r2, [r6, #0]
 800c190:	f003 0306 	and.w	r3, r3, #6
 800c194:	2b04      	cmp	r3, #4
 800c196:	bf08      	it	eq
 800c198:	1aad      	subeq	r5, r5, r2
 800c19a:	68a3      	ldr	r3, [r4, #8]
 800c19c:	6922      	ldr	r2, [r4, #16]
 800c19e:	bf0c      	ite	eq
 800c1a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c1a4:	2500      	movne	r5, #0
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	bfc4      	itt	gt
 800c1aa:	1a9b      	subgt	r3, r3, r2
 800c1ac:	18ed      	addgt	r5, r5, r3
 800c1ae:	2600      	movs	r6, #0
 800c1b0:	341a      	adds	r4, #26
 800c1b2:	42b5      	cmp	r5, r6
 800c1b4:	d11a      	bne.n	800c1ec <_printf_common+0xc8>
 800c1b6:	2000      	movs	r0, #0
 800c1b8:	e008      	b.n	800c1cc <_printf_common+0xa8>
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	4652      	mov	r2, sl
 800c1be:	4649      	mov	r1, r9
 800c1c0:	4638      	mov	r0, r7
 800c1c2:	47c0      	blx	r8
 800c1c4:	3001      	adds	r0, #1
 800c1c6:	d103      	bne.n	800c1d0 <_printf_common+0xac>
 800c1c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c1cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1d0:	3501      	adds	r5, #1
 800c1d2:	e7c6      	b.n	800c162 <_printf_common+0x3e>
 800c1d4:	18e1      	adds	r1, r4, r3
 800c1d6:	1c5a      	adds	r2, r3, #1
 800c1d8:	2030      	movs	r0, #48	; 0x30
 800c1da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c1de:	4422      	add	r2, r4
 800c1e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c1e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c1e8:	3302      	adds	r3, #2
 800c1ea:	e7c7      	b.n	800c17c <_printf_common+0x58>
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	4622      	mov	r2, r4
 800c1f0:	4649      	mov	r1, r9
 800c1f2:	4638      	mov	r0, r7
 800c1f4:	47c0      	blx	r8
 800c1f6:	3001      	adds	r0, #1
 800c1f8:	d0e6      	beq.n	800c1c8 <_printf_common+0xa4>
 800c1fa:	3601      	adds	r6, #1
 800c1fc:	e7d9      	b.n	800c1b2 <_printf_common+0x8e>
	...

0800c200 <_printf_i>:
 800c200:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c204:	7e0f      	ldrb	r7, [r1, #24]
 800c206:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c208:	2f78      	cmp	r7, #120	; 0x78
 800c20a:	4691      	mov	r9, r2
 800c20c:	4680      	mov	r8, r0
 800c20e:	460c      	mov	r4, r1
 800c210:	469a      	mov	sl, r3
 800c212:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c216:	d807      	bhi.n	800c228 <_printf_i+0x28>
 800c218:	2f62      	cmp	r7, #98	; 0x62
 800c21a:	d80a      	bhi.n	800c232 <_printf_i+0x32>
 800c21c:	2f00      	cmp	r7, #0
 800c21e:	f000 80d8 	beq.w	800c3d2 <_printf_i+0x1d2>
 800c222:	2f58      	cmp	r7, #88	; 0x58
 800c224:	f000 80a3 	beq.w	800c36e <_printf_i+0x16e>
 800c228:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c22c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c230:	e03a      	b.n	800c2a8 <_printf_i+0xa8>
 800c232:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c236:	2b15      	cmp	r3, #21
 800c238:	d8f6      	bhi.n	800c228 <_printf_i+0x28>
 800c23a:	a101      	add	r1, pc, #4	; (adr r1, 800c240 <_printf_i+0x40>)
 800c23c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c240:	0800c299 	.word	0x0800c299
 800c244:	0800c2ad 	.word	0x0800c2ad
 800c248:	0800c229 	.word	0x0800c229
 800c24c:	0800c229 	.word	0x0800c229
 800c250:	0800c229 	.word	0x0800c229
 800c254:	0800c229 	.word	0x0800c229
 800c258:	0800c2ad 	.word	0x0800c2ad
 800c25c:	0800c229 	.word	0x0800c229
 800c260:	0800c229 	.word	0x0800c229
 800c264:	0800c229 	.word	0x0800c229
 800c268:	0800c229 	.word	0x0800c229
 800c26c:	0800c3b9 	.word	0x0800c3b9
 800c270:	0800c2dd 	.word	0x0800c2dd
 800c274:	0800c39b 	.word	0x0800c39b
 800c278:	0800c229 	.word	0x0800c229
 800c27c:	0800c229 	.word	0x0800c229
 800c280:	0800c3db 	.word	0x0800c3db
 800c284:	0800c229 	.word	0x0800c229
 800c288:	0800c2dd 	.word	0x0800c2dd
 800c28c:	0800c229 	.word	0x0800c229
 800c290:	0800c229 	.word	0x0800c229
 800c294:	0800c3a3 	.word	0x0800c3a3
 800c298:	682b      	ldr	r3, [r5, #0]
 800c29a:	1d1a      	adds	r2, r3, #4
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	602a      	str	r2, [r5, #0]
 800c2a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c2a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	e0a3      	b.n	800c3f4 <_printf_i+0x1f4>
 800c2ac:	6820      	ldr	r0, [r4, #0]
 800c2ae:	6829      	ldr	r1, [r5, #0]
 800c2b0:	0606      	lsls	r6, r0, #24
 800c2b2:	f101 0304 	add.w	r3, r1, #4
 800c2b6:	d50a      	bpl.n	800c2ce <_printf_i+0xce>
 800c2b8:	680e      	ldr	r6, [r1, #0]
 800c2ba:	602b      	str	r3, [r5, #0]
 800c2bc:	2e00      	cmp	r6, #0
 800c2be:	da03      	bge.n	800c2c8 <_printf_i+0xc8>
 800c2c0:	232d      	movs	r3, #45	; 0x2d
 800c2c2:	4276      	negs	r6, r6
 800c2c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c2c8:	485e      	ldr	r0, [pc, #376]	; (800c444 <_printf_i+0x244>)
 800c2ca:	230a      	movs	r3, #10
 800c2cc:	e019      	b.n	800c302 <_printf_i+0x102>
 800c2ce:	680e      	ldr	r6, [r1, #0]
 800c2d0:	602b      	str	r3, [r5, #0]
 800c2d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c2d6:	bf18      	it	ne
 800c2d8:	b236      	sxthne	r6, r6
 800c2da:	e7ef      	b.n	800c2bc <_printf_i+0xbc>
 800c2dc:	682b      	ldr	r3, [r5, #0]
 800c2de:	6820      	ldr	r0, [r4, #0]
 800c2e0:	1d19      	adds	r1, r3, #4
 800c2e2:	6029      	str	r1, [r5, #0]
 800c2e4:	0601      	lsls	r1, r0, #24
 800c2e6:	d501      	bpl.n	800c2ec <_printf_i+0xec>
 800c2e8:	681e      	ldr	r6, [r3, #0]
 800c2ea:	e002      	b.n	800c2f2 <_printf_i+0xf2>
 800c2ec:	0646      	lsls	r6, r0, #25
 800c2ee:	d5fb      	bpl.n	800c2e8 <_printf_i+0xe8>
 800c2f0:	881e      	ldrh	r6, [r3, #0]
 800c2f2:	4854      	ldr	r0, [pc, #336]	; (800c444 <_printf_i+0x244>)
 800c2f4:	2f6f      	cmp	r7, #111	; 0x6f
 800c2f6:	bf0c      	ite	eq
 800c2f8:	2308      	moveq	r3, #8
 800c2fa:	230a      	movne	r3, #10
 800c2fc:	2100      	movs	r1, #0
 800c2fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c302:	6865      	ldr	r5, [r4, #4]
 800c304:	60a5      	str	r5, [r4, #8]
 800c306:	2d00      	cmp	r5, #0
 800c308:	bfa2      	ittt	ge
 800c30a:	6821      	ldrge	r1, [r4, #0]
 800c30c:	f021 0104 	bicge.w	r1, r1, #4
 800c310:	6021      	strge	r1, [r4, #0]
 800c312:	b90e      	cbnz	r6, 800c318 <_printf_i+0x118>
 800c314:	2d00      	cmp	r5, #0
 800c316:	d04d      	beq.n	800c3b4 <_printf_i+0x1b4>
 800c318:	4615      	mov	r5, r2
 800c31a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c31e:	fb03 6711 	mls	r7, r3, r1, r6
 800c322:	5dc7      	ldrb	r7, [r0, r7]
 800c324:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c328:	4637      	mov	r7, r6
 800c32a:	42bb      	cmp	r3, r7
 800c32c:	460e      	mov	r6, r1
 800c32e:	d9f4      	bls.n	800c31a <_printf_i+0x11a>
 800c330:	2b08      	cmp	r3, #8
 800c332:	d10b      	bne.n	800c34c <_printf_i+0x14c>
 800c334:	6823      	ldr	r3, [r4, #0]
 800c336:	07de      	lsls	r6, r3, #31
 800c338:	d508      	bpl.n	800c34c <_printf_i+0x14c>
 800c33a:	6923      	ldr	r3, [r4, #16]
 800c33c:	6861      	ldr	r1, [r4, #4]
 800c33e:	4299      	cmp	r1, r3
 800c340:	bfde      	ittt	le
 800c342:	2330      	movle	r3, #48	; 0x30
 800c344:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c348:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c34c:	1b52      	subs	r2, r2, r5
 800c34e:	6122      	str	r2, [r4, #16]
 800c350:	f8cd a000 	str.w	sl, [sp]
 800c354:	464b      	mov	r3, r9
 800c356:	aa03      	add	r2, sp, #12
 800c358:	4621      	mov	r1, r4
 800c35a:	4640      	mov	r0, r8
 800c35c:	f7ff fee2 	bl	800c124 <_printf_common>
 800c360:	3001      	adds	r0, #1
 800c362:	d14c      	bne.n	800c3fe <_printf_i+0x1fe>
 800c364:	f04f 30ff 	mov.w	r0, #4294967295
 800c368:	b004      	add	sp, #16
 800c36a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c36e:	4835      	ldr	r0, [pc, #212]	; (800c444 <_printf_i+0x244>)
 800c370:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c374:	6829      	ldr	r1, [r5, #0]
 800c376:	6823      	ldr	r3, [r4, #0]
 800c378:	f851 6b04 	ldr.w	r6, [r1], #4
 800c37c:	6029      	str	r1, [r5, #0]
 800c37e:	061d      	lsls	r5, r3, #24
 800c380:	d514      	bpl.n	800c3ac <_printf_i+0x1ac>
 800c382:	07df      	lsls	r7, r3, #31
 800c384:	bf44      	itt	mi
 800c386:	f043 0320 	orrmi.w	r3, r3, #32
 800c38a:	6023      	strmi	r3, [r4, #0]
 800c38c:	b91e      	cbnz	r6, 800c396 <_printf_i+0x196>
 800c38e:	6823      	ldr	r3, [r4, #0]
 800c390:	f023 0320 	bic.w	r3, r3, #32
 800c394:	6023      	str	r3, [r4, #0]
 800c396:	2310      	movs	r3, #16
 800c398:	e7b0      	b.n	800c2fc <_printf_i+0xfc>
 800c39a:	6823      	ldr	r3, [r4, #0]
 800c39c:	f043 0320 	orr.w	r3, r3, #32
 800c3a0:	6023      	str	r3, [r4, #0]
 800c3a2:	2378      	movs	r3, #120	; 0x78
 800c3a4:	4828      	ldr	r0, [pc, #160]	; (800c448 <_printf_i+0x248>)
 800c3a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c3aa:	e7e3      	b.n	800c374 <_printf_i+0x174>
 800c3ac:	0659      	lsls	r1, r3, #25
 800c3ae:	bf48      	it	mi
 800c3b0:	b2b6      	uxthmi	r6, r6
 800c3b2:	e7e6      	b.n	800c382 <_printf_i+0x182>
 800c3b4:	4615      	mov	r5, r2
 800c3b6:	e7bb      	b.n	800c330 <_printf_i+0x130>
 800c3b8:	682b      	ldr	r3, [r5, #0]
 800c3ba:	6826      	ldr	r6, [r4, #0]
 800c3bc:	6961      	ldr	r1, [r4, #20]
 800c3be:	1d18      	adds	r0, r3, #4
 800c3c0:	6028      	str	r0, [r5, #0]
 800c3c2:	0635      	lsls	r5, r6, #24
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	d501      	bpl.n	800c3cc <_printf_i+0x1cc>
 800c3c8:	6019      	str	r1, [r3, #0]
 800c3ca:	e002      	b.n	800c3d2 <_printf_i+0x1d2>
 800c3cc:	0670      	lsls	r0, r6, #25
 800c3ce:	d5fb      	bpl.n	800c3c8 <_printf_i+0x1c8>
 800c3d0:	8019      	strh	r1, [r3, #0]
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	6123      	str	r3, [r4, #16]
 800c3d6:	4615      	mov	r5, r2
 800c3d8:	e7ba      	b.n	800c350 <_printf_i+0x150>
 800c3da:	682b      	ldr	r3, [r5, #0]
 800c3dc:	1d1a      	adds	r2, r3, #4
 800c3de:	602a      	str	r2, [r5, #0]
 800c3e0:	681d      	ldr	r5, [r3, #0]
 800c3e2:	6862      	ldr	r2, [r4, #4]
 800c3e4:	2100      	movs	r1, #0
 800c3e6:	4628      	mov	r0, r5
 800c3e8:	f7f3 ff0a 	bl	8000200 <memchr>
 800c3ec:	b108      	cbz	r0, 800c3f2 <_printf_i+0x1f2>
 800c3ee:	1b40      	subs	r0, r0, r5
 800c3f0:	6060      	str	r0, [r4, #4]
 800c3f2:	6863      	ldr	r3, [r4, #4]
 800c3f4:	6123      	str	r3, [r4, #16]
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3fc:	e7a8      	b.n	800c350 <_printf_i+0x150>
 800c3fe:	6923      	ldr	r3, [r4, #16]
 800c400:	462a      	mov	r2, r5
 800c402:	4649      	mov	r1, r9
 800c404:	4640      	mov	r0, r8
 800c406:	47d0      	blx	sl
 800c408:	3001      	adds	r0, #1
 800c40a:	d0ab      	beq.n	800c364 <_printf_i+0x164>
 800c40c:	6823      	ldr	r3, [r4, #0]
 800c40e:	079b      	lsls	r3, r3, #30
 800c410:	d413      	bmi.n	800c43a <_printf_i+0x23a>
 800c412:	68e0      	ldr	r0, [r4, #12]
 800c414:	9b03      	ldr	r3, [sp, #12]
 800c416:	4298      	cmp	r0, r3
 800c418:	bfb8      	it	lt
 800c41a:	4618      	movlt	r0, r3
 800c41c:	e7a4      	b.n	800c368 <_printf_i+0x168>
 800c41e:	2301      	movs	r3, #1
 800c420:	4632      	mov	r2, r6
 800c422:	4649      	mov	r1, r9
 800c424:	4640      	mov	r0, r8
 800c426:	47d0      	blx	sl
 800c428:	3001      	adds	r0, #1
 800c42a:	d09b      	beq.n	800c364 <_printf_i+0x164>
 800c42c:	3501      	adds	r5, #1
 800c42e:	68e3      	ldr	r3, [r4, #12]
 800c430:	9903      	ldr	r1, [sp, #12]
 800c432:	1a5b      	subs	r3, r3, r1
 800c434:	42ab      	cmp	r3, r5
 800c436:	dcf2      	bgt.n	800c41e <_printf_i+0x21e>
 800c438:	e7eb      	b.n	800c412 <_printf_i+0x212>
 800c43a:	2500      	movs	r5, #0
 800c43c:	f104 0619 	add.w	r6, r4, #25
 800c440:	e7f5      	b.n	800c42e <_printf_i+0x22e>
 800c442:	bf00      	nop
 800c444:	0800f2a8 	.word	0x0800f2a8
 800c448:	0800f2b9 	.word	0x0800f2b9

0800c44c <iprintf>:
 800c44c:	b40f      	push	{r0, r1, r2, r3}
 800c44e:	4b0a      	ldr	r3, [pc, #40]	; (800c478 <iprintf+0x2c>)
 800c450:	b513      	push	{r0, r1, r4, lr}
 800c452:	681c      	ldr	r4, [r3, #0]
 800c454:	b124      	cbz	r4, 800c460 <iprintf+0x14>
 800c456:	69a3      	ldr	r3, [r4, #24]
 800c458:	b913      	cbnz	r3, 800c460 <iprintf+0x14>
 800c45a:	4620      	mov	r0, r4
 800c45c:	f001 fad0 	bl	800da00 <__sinit>
 800c460:	ab05      	add	r3, sp, #20
 800c462:	9a04      	ldr	r2, [sp, #16]
 800c464:	68a1      	ldr	r1, [r4, #8]
 800c466:	9301      	str	r3, [sp, #4]
 800c468:	4620      	mov	r0, r4
 800c46a:	f002 f99b 	bl	800e7a4 <_vfiprintf_r>
 800c46e:	b002      	add	sp, #8
 800c470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c474:	b004      	add	sp, #16
 800c476:	4770      	bx	lr
 800c478:	20000014 	.word	0x20000014

0800c47c <_puts_r>:
 800c47c:	b570      	push	{r4, r5, r6, lr}
 800c47e:	460e      	mov	r6, r1
 800c480:	4605      	mov	r5, r0
 800c482:	b118      	cbz	r0, 800c48c <_puts_r+0x10>
 800c484:	6983      	ldr	r3, [r0, #24]
 800c486:	b90b      	cbnz	r3, 800c48c <_puts_r+0x10>
 800c488:	f001 faba 	bl	800da00 <__sinit>
 800c48c:	69ab      	ldr	r3, [r5, #24]
 800c48e:	68ac      	ldr	r4, [r5, #8]
 800c490:	b913      	cbnz	r3, 800c498 <_puts_r+0x1c>
 800c492:	4628      	mov	r0, r5
 800c494:	f001 fab4 	bl	800da00 <__sinit>
 800c498:	4b2c      	ldr	r3, [pc, #176]	; (800c54c <_puts_r+0xd0>)
 800c49a:	429c      	cmp	r4, r3
 800c49c:	d120      	bne.n	800c4e0 <_puts_r+0x64>
 800c49e:	686c      	ldr	r4, [r5, #4]
 800c4a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c4a2:	07db      	lsls	r3, r3, #31
 800c4a4:	d405      	bmi.n	800c4b2 <_puts_r+0x36>
 800c4a6:	89a3      	ldrh	r3, [r4, #12]
 800c4a8:	0598      	lsls	r0, r3, #22
 800c4aa:	d402      	bmi.n	800c4b2 <_puts_r+0x36>
 800c4ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4ae:	f001 fb5c 	bl	800db6a <__retarget_lock_acquire_recursive>
 800c4b2:	89a3      	ldrh	r3, [r4, #12]
 800c4b4:	0719      	lsls	r1, r3, #28
 800c4b6:	d51d      	bpl.n	800c4f4 <_puts_r+0x78>
 800c4b8:	6923      	ldr	r3, [r4, #16]
 800c4ba:	b1db      	cbz	r3, 800c4f4 <_puts_r+0x78>
 800c4bc:	3e01      	subs	r6, #1
 800c4be:	68a3      	ldr	r3, [r4, #8]
 800c4c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c4c4:	3b01      	subs	r3, #1
 800c4c6:	60a3      	str	r3, [r4, #8]
 800c4c8:	bb39      	cbnz	r1, 800c51a <_puts_r+0x9e>
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	da38      	bge.n	800c540 <_puts_r+0xc4>
 800c4ce:	4622      	mov	r2, r4
 800c4d0:	210a      	movs	r1, #10
 800c4d2:	4628      	mov	r0, r5
 800c4d4:	f000 fa00 	bl	800c8d8 <__swbuf_r>
 800c4d8:	3001      	adds	r0, #1
 800c4da:	d011      	beq.n	800c500 <_puts_r+0x84>
 800c4dc:	250a      	movs	r5, #10
 800c4de:	e011      	b.n	800c504 <_puts_r+0x88>
 800c4e0:	4b1b      	ldr	r3, [pc, #108]	; (800c550 <_puts_r+0xd4>)
 800c4e2:	429c      	cmp	r4, r3
 800c4e4:	d101      	bne.n	800c4ea <_puts_r+0x6e>
 800c4e6:	68ac      	ldr	r4, [r5, #8]
 800c4e8:	e7da      	b.n	800c4a0 <_puts_r+0x24>
 800c4ea:	4b1a      	ldr	r3, [pc, #104]	; (800c554 <_puts_r+0xd8>)
 800c4ec:	429c      	cmp	r4, r3
 800c4ee:	bf08      	it	eq
 800c4f0:	68ec      	ldreq	r4, [r5, #12]
 800c4f2:	e7d5      	b.n	800c4a0 <_puts_r+0x24>
 800c4f4:	4621      	mov	r1, r4
 800c4f6:	4628      	mov	r0, r5
 800c4f8:	f000 fa52 	bl	800c9a0 <__swsetup_r>
 800c4fc:	2800      	cmp	r0, #0
 800c4fe:	d0dd      	beq.n	800c4bc <_puts_r+0x40>
 800c500:	f04f 35ff 	mov.w	r5, #4294967295
 800c504:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c506:	07da      	lsls	r2, r3, #31
 800c508:	d405      	bmi.n	800c516 <_puts_r+0x9a>
 800c50a:	89a3      	ldrh	r3, [r4, #12]
 800c50c:	059b      	lsls	r3, r3, #22
 800c50e:	d402      	bmi.n	800c516 <_puts_r+0x9a>
 800c510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c512:	f001 fb2b 	bl	800db6c <__retarget_lock_release_recursive>
 800c516:	4628      	mov	r0, r5
 800c518:	bd70      	pop	{r4, r5, r6, pc}
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	da04      	bge.n	800c528 <_puts_r+0xac>
 800c51e:	69a2      	ldr	r2, [r4, #24]
 800c520:	429a      	cmp	r2, r3
 800c522:	dc06      	bgt.n	800c532 <_puts_r+0xb6>
 800c524:	290a      	cmp	r1, #10
 800c526:	d004      	beq.n	800c532 <_puts_r+0xb6>
 800c528:	6823      	ldr	r3, [r4, #0]
 800c52a:	1c5a      	adds	r2, r3, #1
 800c52c:	6022      	str	r2, [r4, #0]
 800c52e:	7019      	strb	r1, [r3, #0]
 800c530:	e7c5      	b.n	800c4be <_puts_r+0x42>
 800c532:	4622      	mov	r2, r4
 800c534:	4628      	mov	r0, r5
 800c536:	f000 f9cf 	bl	800c8d8 <__swbuf_r>
 800c53a:	3001      	adds	r0, #1
 800c53c:	d1bf      	bne.n	800c4be <_puts_r+0x42>
 800c53e:	e7df      	b.n	800c500 <_puts_r+0x84>
 800c540:	6823      	ldr	r3, [r4, #0]
 800c542:	250a      	movs	r5, #10
 800c544:	1c5a      	adds	r2, r3, #1
 800c546:	6022      	str	r2, [r4, #0]
 800c548:	701d      	strb	r5, [r3, #0]
 800c54a:	e7db      	b.n	800c504 <_puts_r+0x88>
 800c54c:	0800f514 	.word	0x0800f514
 800c550:	0800f534 	.word	0x0800f534
 800c554:	0800f4f4 	.word	0x0800f4f4

0800c558 <puts>:
 800c558:	4b02      	ldr	r3, [pc, #8]	; (800c564 <puts+0xc>)
 800c55a:	4601      	mov	r1, r0
 800c55c:	6818      	ldr	r0, [r3, #0]
 800c55e:	f7ff bf8d 	b.w	800c47c <_puts_r>
 800c562:	bf00      	nop
 800c564:	20000014 	.word	0x20000014

0800c568 <_sbrk_r>:
 800c568:	b538      	push	{r3, r4, r5, lr}
 800c56a:	4d06      	ldr	r5, [pc, #24]	; (800c584 <_sbrk_r+0x1c>)
 800c56c:	2300      	movs	r3, #0
 800c56e:	4604      	mov	r4, r0
 800c570:	4608      	mov	r0, r1
 800c572:	602b      	str	r3, [r5, #0]
 800c574:	f7f6 fc10 	bl	8002d98 <_sbrk>
 800c578:	1c43      	adds	r3, r0, #1
 800c57a:	d102      	bne.n	800c582 <_sbrk_r+0x1a>
 800c57c:	682b      	ldr	r3, [r5, #0]
 800c57e:	b103      	cbz	r3, 800c582 <_sbrk_r+0x1a>
 800c580:	6023      	str	r3, [r4, #0]
 800c582:	bd38      	pop	{r3, r4, r5, pc}
 800c584:	20003624 	.word	0x20003624

0800c588 <_raise_r>:
 800c588:	291f      	cmp	r1, #31
 800c58a:	b538      	push	{r3, r4, r5, lr}
 800c58c:	4604      	mov	r4, r0
 800c58e:	460d      	mov	r5, r1
 800c590:	d904      	bls.n	800c59c <_raise_r+0x14>
 800c592:	2316      	movs	r3, #22
 800c594:	6003      	str	r3, [r0, #0]
 800c596:	f04f 30ff 	mov.w	r0, #4294967295
 800c59a:	bd38      	pop	{r3, r4, r5, pc}
 800c59c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c59e:	b112      	cbz	r2, 800c5a6 <_raise_r+0x1e>
 800c5a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c5a4:	b94b      	cbnz	r3, 800c5ba <_raise_r+0x32>
 800c5a6:	4620      	mov	r0, r4
 800c5a8:	f000 f830 	bl	800c60c <_getpid_r>
 800c5ac:	462a      	mov	r2, r5
 800c5ae:	4601      	mov	r1, r0
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5b6:	f000 b817 	b.w	800c5e8 <_kill_r>
 800c5ba:	2b01      	cmp	r3, #1
 800c5bc:	d00a      	beq.n	800c5d4 <_raise_r+0x4c>
 800c5be:	1c59      	adds	r1, r3, #1
 800c5c0:	d103      	bne.n	800c5ca <_raise_r+0x42>
 800c5c2:	2316      	movs	r3, #22
 800c5c4:	6003      	str	r3, [r0, #0]
 800c5c6:	2001      	movs	r0, #1
 800c5c8:	e7e7      	b.n	800c59a <_raise_r+0x12>
 800c5ca:	2400      	movs	r4, #0
 800c5cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c5d0:	4628      	mov	r0, r5
 800c5d2:	4798      	blx	r3
 800c5d4:	2000      	movs	r0, #0
 800c5d6:	e7e0      	b.n	800c59a <_raise_r+0x12>

0800c5d8 <raise>:
 800c5d8:	4b02      	ldr	r3, [pc, #8]	; (800c5e4 <raise+0xc>)
 800c5da:	4601      	mov	r1, r0
 800c5dc:	6818      	ldr	r0, [r3, #0]
 800c5de:	f7ff bfd3 	b.w	800c588 <_raise_r>
 800c5e2:	bf00      	nop
 800c5e4:	20000014 	.word	0x20000014

0800c5e8 <_kill_r>:
 800c5e8:	b538      	push	{r3, r4, r5, lr}
 800c5ea:	4d07      	ldr	r5, [pc, #28]	; (800c608 <_kill_r+0x20>)
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	4604      	mov	r4, r0
 800c5f0:	4608      	mov	r0, r1
 800c5f2:	4611      	mov	r1, r2
 800c5f4:	602b      	str	r3, [r5, #0]
 800c5f6:	f7f6 fb63 	bl	8002cc0 <_kill>
 800c5fa:	1c43      	adds	r3, r0, #1
 800c5fc:	d102      	bne.n	800c604 <_kill_r+0x1c>
 800c5fe:	682b      	ldr	r3, [r5, #0]
 800c600:	b103      	cbz	r3, 800c604 <_kill_r+0x1c>
 800c602:	6023      	str	r3, [r4, #0]
 800c604:	bd38      	pop	{r3, r4, r5, pc}
 800c606:	bf00      	nop
 800c608:	20003624 	.word	0x20003624

0800c60c <_getpid_r>:
 800c60c:	f7f6 bb50 	b.w	8002cb0 <_getpid>

0800c610 <siscanf>:
 800c610:	b40e      	push	{r1, r2, r3}
 800c612:	b510      	push	{r4, lr}
 800c614:	b09f      	sub	sp, #124	; 0x7c
 800c616:	ac21      	add	r4, sp, #132	; 0x84
 800c618:	f44f 7101 	mov.w	r1, #516	; 0x204
 800c61c:	f854 2b04 	ldr.w	r2, [r4], #4
 800c620:	9201      	str	r2, [sp, #4]
 800c622:	f8ad 101c 	strh.w	r1, [sp, #28]
 800c626:	9004      	str	r0, [sp, #16]
 800c628:	9008      	str	r0, [sp, #32]
 800c62a:	f7f3 fddb 	bl	80001e4 <strlen>
 800c62e:	4b0c      	ldr	r3, [pc, #48]	; (800c660 <siscanf+0x50>)
 800c630:	9005      	str	r0, [sp, #20]
 800c632:	9009      	str	r0, [sp, #36]	; 0x24
 800c634:	930d      	str	r3, [sp, #52]	; 0x34
 800c636:	480b      	ldr	r0, [pc, #44]	; (800c664 <siscanf+0x54>)
 800c638:	9a01      	ldr	r2, [sp, #4]
 800c63a:	6800      	ldr	r0, [r0, #0]
 800c63c:	9403      	str	r4, [sp, #12]
 800c63e:	2300      	movs	r3, #0
 800c640:	9311      	str	r3, [sp, #68]	; 0x44
 800c642:	9316      	str	r3, [sp, #88]	; 0x58
 800c644:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c648:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c64c:	a904      	add	r1, sp, #16
 800c64e:	4623      	mov	r3, r4
 800c650:	f001 ff06 	bl	800e460 <__ssvfiscanf_r>
 800c654:	b01f      	add	sp, #124	; 0x7c
 800c656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c65a:	b003      	add	sp, #12
 800c65c:	4770      	bx	lr
 800c65e:	bf00      	nop
 800c660:	0800c68b 	.word	0x0800c68b
 800c664:	20000014 	.word	0x20000014

0800c668 <__sread>:
 800c668:	b510      	push	{r4, lr}
 800c66a:	460c      	mov	r4, r1
 800c66c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c670:	f002 fb1a 	bl	800eca8 <_read_r>
 800c674:	2800      	cmp	r0, #0
 800c676:	bfab      	itete	ge
 800c678:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c67a:	89a3      	ldrhlt	r3, [r4, #12]
 800c67c:	181b      	addge	r3, r3, r0
 800c67e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c682:	bfac      	ite	ge
 800c684:	6563      	strge	r3, [r4, #84]	; 0x54
 800c686:	81a3      	strhlt	r3, [r4, #12]
 800c688:	bd10      	pop	{r4, pc}

0800c68a <__seofread>:
 800c68a:	2000      	movs	r0, #0
 800c68c:	4770      	bx	lr

0800c68e <__swrite>:
 800c68e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c692:	461f      	mov	r7, r3
 800c694:	898b      	ldrh	r3, [r1, #12]
 800c696:	05db      	lsls	r3, r3, #23
 800c698:	4605      	mov	r5, r0
 800c69a:	460c      	mov	r4, r1
 800c69c:	4616      	mov	r6, r2
 800c69e:	d505      	bpl.n	800c6ac <__swrite+0x1e>
 800c6a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6a4:	2302      	movs	r3, #2
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	f001 fa62 	bl	800db70 <_lseek_r>
 800c6ac:	89a3      	ldrh	r3, [r4, #12]
 800c6ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c6b6:	81a3      	strh	r3, [r4, #12]
 800c6b8:	4632      	mov	r2, r6
 800c6ba:	463b      	mov	r3, r7
 800c6bc:	4628      	mov	r0, r5
 800c6be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6c2:	f000 b95b 	b.w	800c97c <_write_r>

0800c6c6 <__sseek>:
 800c6c6:	b510      	push	{r4, lr}
 800c6c8:	460c      	mov	r4, r1
 800c6ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6ce:	f001 fa4f 	bl	800db70 <_lseek_r>
 800c6d2:	1c43      	adds	r3, r0, #1
 800c6d4:	89a3      	ldrh	r3, [r4, #12]
 800c6d6:	bf15      	itete	ne
 800c6d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c6da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c6de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c6e2:	81a3      	strheq	r3, [r4, #12]
 800c6e4:	bf18      	it	ne
 800c6e6:	81a3      	strhne	r3, [r4, #12]
 800c6e8:	bd10      	pop	{r4, pc}

0800c6ea <__sclose>:
 800c6ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6ee:	f000 b9e3 	b.w	800cab8 <_close_r>

0800c6f2 <strcpy>:
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6f8:	f803 2b01 	strb.w	r2, [r3], #1
 800c6fc:	2a00      	cmp	r2, #0
 800c6fe:	d1f9      	bne.n	800c6f4 <strcpy+0x2>
 800c700:	4770      	bx	lr
	...

0800c704 <strtok>:
 800c704:	4b16      	ldr	r3, [pc, #88]	; (800c760 <strtok+0x5c>)
 800c706:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c708:	681e      	ldr	r6, [r3, #0]
 800c70a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800c70c:	4605      	mov	r5, r0
 800c70e:	b9fc      	cbnz	r4, 800c750 <strtok+0x4c>
 800c710:	2050      	movs	r0, #80	; 0x50
 800c712:	9101      	str	r1, [sp, #4]
 800c714:	f7ff f92a 	bl	800b96c <malloc>
 800c718:	9901      	ldr	r1, [sp, #4]
 800c71a:	65b0      	str	r0, [r6, #88]	; 0x58
 800c71c:	4602      	mov	r2, r0
 800c71e:	b920      	cbnz	r0, 800c72a <strtok+0x26>
 800c720:	4b10      	ldr	r3, [pc, #64]	; (800c764 <strtok+0x60>)
 800c722:	4811      	ldr	r0, [pc, #68]	; (800c768 <strtok+0x64>)
 800c724:	2157      	movs	r1, #87	; 0x57
 800c726:	f000 f9a9 	bl	800ca7c <__assert_func>
 800c72a:	e9c0 4400 	strd	r4, r4, [r0]
 800c72e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c732:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c736:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c73a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c73e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c742:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c746:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c74a:	6184      	str	r4, [r0, #24]
 800c74c:	7704      	strb	r4, [r0, #28]
 800c74e:	6244      	str	r4, [r0, #36]	; 0x24
 800c750:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800c752:	2301      	movs	r3, #1
 800c754:	4628      	mov	r0, r5
 800c756:	b002      	add	sp, #8
 800c758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c75c:	f000 b806 	b.w	800c76c <__strtok_r>
 800c760:	20000014 	.word	0x20000014
 800c764:	0800f2ca 	.word	0x0800f2ca
 800c768:	0800f2e1 	.word	0x0800f2e1

0800c76c <__strtok_r>:
 800c76c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c76e:	b908      	cbnz	r0, 800c774 <__strtok_r+0x8>
 800c770:	6810      	ldr	r0, [r2, #0]
 800c772:	b188      	cbz	r0, 800c798 <__strtok_r+0x2c>
 800c774:	4604      	mov	r4, r0
 800c776:	4620      	mov	r0, r4
 800c778:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c77c:	460f      	mov	r7, r1
 800c77e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c782:	b91e      	cbnz	r6, 800c78c <__strtok_r+0x20>
 800c784:	b965      	cbnz	r5, 800c7a0 <__strtok_r+0x34>
 800c786:	6015      	str	r5, [r2, #0]
 800c788:	4628      	mov	r0, r5
 800c78a:	e005      	b.n	800c798 <__strtok_r+0x2c>
 800c78c:	42b5      	cmp	r5, r6
 800c78e:	d1f6      	bne.n	800c77e <__strtok_r+0x12>
 800c790:	2b00      	cmp	r3, #0
 800c792:	d1f0      	bne.n	800c776 <__strtok_r+0xa>
 800c794:	6014      	str	r4, [r2, #0]
 800c796:	7003      	strb	r3, [r0, #0]
 800c798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c79a:	461c      	mov	r4, r3
 800c79c:	e00c      	b.n	800c7b8 <__strtok_r+0x4c>
 800c79e:	b915      	cbnz	r5, 800c7a6 <__strtok_r+0x3a>
 800c7a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c7a4:	460e      	mov	r6, r1
 800c7a6:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c7aa:	42ab      	cmp	r3, r5
 800c7ac:	d1f7      	bne.n	800c79e <__strtok_r+0x32>
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d0f3      	beq.n	800c79a <__strtok_r+0x2e>
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c7b8:	6014      	str	r4, [r2, #0]
 800c7ba:	e7ed      	b.n	800c798 <__strtok_r+0x2c>

0800c7bc <_strtol_l.constprop.0>:
 800c7bc:	2b01      	cmp	r3, #1
 800c7be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7c2:	d001      	beq.n	800c7c8 <_strtol_l.constprop.0+0xc>
 800c7c4:	2b24      	cmp	r3, #36	; 0x24
 800c7c6:	d906      	bls.n	800c7d6 <_strtol_l.constprop.0+0x1a>
 800c7c8:	f7ff f8a6 	bl	800b918 <__errno>
 800c7cc:	2316      	movs	r3, #22
 800c7ce:	6003      	str	r3, [r0, #0]
 800c7d0:	2000      	movs	r0, #0
 800c7d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7d6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c8bc <_strtol_l.constprop.0+0x100>
 800c7da:	460d      	mov	r5, r1
 800c7dc:	462e      	mov	r6, r5
 800c7de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c7e2:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c7e6:	f017 0708 	ands.w	r7, r7, #8
 800c7ea:	d1f7      	bne.n	800c7dc <_strtol_l.constprop.0+0x20>
 800c7ec:	2c2d      	cmp	r4, #45	; 0x2d
 800c7ee:	d132      	bne.n	800c856 <_strtol_l.constprop.0+0x9a>
 800c7f0:	782c      	ldrb	r4, [r5, #0]
 800c7f2:	2701      	movs	r7, #1
 800c7f4:	1cb5      	adds	r5, r6, #2
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d05b      	beq.n	800c8b2 <_strtol_l.constprop.0+0xf6>
 800c7fa:	2b10      	cmp	r3, #16
 800c7fc:	d109      	bne.n	800c812 <_strtol_l.constprop.0+0x56>
 800c7fe:	2c30      	cmp	r4, #48	; 0x30
 800c800:	d107      	bne.n	800c812 <_strtol_l.constprop.0+0x56>
 800c802:	782c      	ldrb	r4, [r5, #0]
 800c804:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c808:	2c58      	cmp	r4, #88	; 0x58
 800c80a:	d14d      	bne.n	800c8a8 <_strtol_l.constprop.0+0xec>
 800c80c:	786c      	ldrb	r4, [r5, #1]
 800c80e:	2310      	movs	r3, #16
 800c810:	3502      	adds	r5, #2
 800c812:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c816:	f108 38ff 	add.w	r8, r8, #4294967295
 800c81a:	f04f 0c00 	mov.w	ip, #0
 800c81e:	fbb8 f9f3 	udiv	r9, r8, r3
 800c822:	4666      	mov	r6, ip
 800c824:	fb03 8a19 	mls	sl, r3, r9, r8
 800c828:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c82c:	f1be 0f09 	cmp.w	lr, #9
 800c830:	d816      	bhi.n	800c860 <_strtol_l.constprop.0+0xa4>
 800c832:	4674      	mov	r4, lr
 800c834:	42a3      	cmp	r3, r4
 800c836:	dd24      	ble.n	800c882 <_strtol_l.constprop.0+0xc6>
 800c838:	f1bc 0f00 	cmp.w	ip, #0
 800c83c:	db1e      	blt.n	800c87c <_strtol_l.constprop.0+0xc0>
 800c83e:	45b1      	cmp	r9, r6
 800c840:	d31c      	bcc.n	800c87c <_strtol_l.constprop.0+0xc0>
 800c842:	d101      	bne.n	800c848 <_strtol_l.constprop.0+0x8c>
 800c844:	45a2      	cmp	sl, r4
 800c846:	db19      	blt.n	800c87c <_strtol_l.constprop.0+0xc0>
 800c848:	fb06 4603 	mla	r6, r6, r3, r4
 800c84c:	f04f 0c01 	mov.w	ip, #1
 800c850:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c854:	e7e8      	b.n	800c828 <_strtol_l.constprop.0+0x6c>
 800c856:	2c2b      	cmp	r4, #43	; 0x2b
 800c858:	bf04      	itt	eq
 800c85a:	782c      	ldrbeq	r4, [r5, #0]
 800c85c:	1cb5      	addeq	r5, r6, #2
 800c85e:	e7ca      	b.n	800c7f6 <_strtol_l.constprop.0+0x3a>
 800c860:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c864:	f1be 0f19 	cmp.w	lr, #25
 800c868:	d801      	bhi.n	800c86e <_strtol_l.constprop.0+0xb2>
 800c86a:	3c37      	subs	r4, #55	; 0x37
 800c86c:	e7e2      	b.n	800c834 <_strtol_l.constprop.0+0x78>
 800c86e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c872:	f1be 0f19 	cmp.w	lr, #25
 800c876:	d804      	bhi.n	800c882 <_strtol_l.constprop.0+0xc6>
 800c878:	3c57      	subs	r4, #87	; 0x57
 800c87a:	e7db      	b.n	800c834 <_strtol_l.constprop.0+0x78>
 800c87c:	f04f 3cff 	mov.w	ip, #4294967295
 800c880:	e7e6      	b.n	800c850 <_strtol_l.constprop.0+0x94>
 800c882:	f1bc 0f00 	cmp.w	ip, #0
 800c886:	da05      	bge.n	800c894 <_strtol_l.constprop.0+0xd8>
 800c888:	2322      	movs	r3, #34	; 0x22
 800c88a:	6003      	str	r3, [r0, #0]
 800c88c:	4646      	mov	r6, r8
 800c88e:	b942      	cbnz	r2, 800c8a2 <_strtol_l.constprop.0+0xe6>
 800c890:	4630      	mov	r0, r6
 800c892:	e79e      	b.n	800c7d2 <_strtol_l.constprop.0+0x16>
 800c894:	b107      	cbz	r7, 800c898 <_strtol_l.constprop.0+0xdc>
 800c896:	4276      	negs	r6, r6
 800c898:	2a00      	cmp	r2, #0
 800c89a:	d0f9      	beq.n	800c890 <_strtol_l.constprop.0+0xd4>
 800c89c:	f1bc 0f00 	cmp.w	ip, #0
 800c8a0:	d000      	beq.n	800c8a4 <_strtol_l.constprop.0+0xe8>
 800c8a2:	1e69      	subs	r1, r5, #1
 800c8a4:	6011      	str	r1, [r2, #0]
 800c8a6:	e7f3      	b.n	800c890 <_strtol_l.constprop.0+0xd4>
 800c8a8:	2430      	movs	r4, #48	; 0x30
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d1b1      	bne.n	800c812 <_strtol_l.constprop.0+0x56>
 800c8ae:	2308      	movs	r3, #8
 800c8b0:	e7af      	b.n	800c812 <_strtol_l.constprop.0+0x56>
 800c8b2:	2c30      	cmp	r4, #48	; 0x30
 800c8b4:	d0a5      	beq.n	800c802 <_strtol_l.constprop.0+0x46>
 800c8b6:	230a      	movs	r3, #10
 800c8b8:	e7ab      	b.n	800c812 <_strtol_l.constprop.0+0x56>
 800c8ba:	bf00      	nop
 800c8bc:	0800f37b 	.word	0x0800f37b

0800c8c0 <_strtol_r>:
 800c8c0:	f7ff bf7c 	b.w	800c7bc <_strtol_l.constprop.0>

0800c8c4 <strtol>:
 800c8c4:	4613      	mov	r3, r2
 800c8c6:	460a      	mov	r2, r1
 800c8c8:	4601      	mov	r1, r0
 800c8ca:	4802      	ldr	r0, [pc, #8]	; (800c8d4 <strtol+0x10>)
 800c8cc:	6800      	ldr	r0, [r0, #0]
 800c8ce:	f7ff bf75 	b.w	800c7bc <_strtol_l.constprop.0>
 800c8d2:	bf00      	nop
 800c8d4:	20000014 	.word	0x20000014

0800c8d8 <__swbuf_r>:
 800c8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8da:	460e      	mov	r6, r1
 800c8dc:	4614      	mov	r4, r2
 800c8de:	4605      	mov	r5, r0
 800c8e0:	b118      	cbz	r0, 800c8ea <__swbuf_r+0x12>
 800c8e2:	6983      	ldr	r3, [r0, #24]
 800c8e4:	b90b      	cbnz	r3, 800c8ea <__swbuf_r+0x12>
 800c8e6:	f001 f88b 	bl	800da00 <__sinit>
 800c8ea:	4b21      	ldr	r3, [pc, #132]	; (800c970 <__swbuf_r+0x98>)
 800c8ec:	429c      	cmp	r4, r3
 800c8ee:	d12b      	bne.n	800c948 <__swbuf_r+0x70>
 800c8f0:	686c      	ldr	r4, [r5, #4]
 800c8f2:	69a3      	ldr	r3, [r4, #24]
 800c8f4:	60a3      	str	r3, [r4, #8]
 800c8f6:	89a3      	ldrh	r3, [r4, #12]
 800c8f8:	071a      	lsls	r2, r3, #28
 800c8fa:	d52f      	bpl.n	800c95c <__swbuf_r+0x84>
 800c8fc:	6923      	ldr	r3, [r4, #16]
 800c8fe:	b36b      	cbz	r3, 800c95c <__swbuf_r+0x84>
 800c900:	6923      	ldr	r3, [r4, #16]
 800c902:	6820      	ldr	r0, [r4, #0]
 800c904:	1ac0      	subs	r0, r0, r3
 800c906:	6963      	ldr	r3, [r4, #20]
 800c908:	b2f6      	uxtb	r6, r6
 800c90a:	4283      	cmp	r3, r0
 800c90c:	4637      	mov	r7, r6
 800c90e:	dc04      	bgt.n	800c91a <__swbuf_r+0x42>
 800c910:	4621      	mov	r1, r4
 800c912:	4628      	mov	r0, r5
 800c914:	f000 ffe0 	bl	800d8d8 <_fflush_r>
 800c918:	bb30      	cbnz	r0, 800c968 <__swbuf_r+0x90>
 800c91a:	68a3      	ldr	r3, [r4, #8]
 800c91c:	3b01      	subs	r3, #1
 800c91e:	60a3      	str	r3, [r4, #8]
 800c920:	6823      	ldr	r3, [r4, #0]
 800c922:	1c5a      	adds	r2, r3, #1
 800c924:	6022      	str	r2, [r4, #0]
 800c926:	701e      	strb	r6, [r3, #0]
 800c928:	6963      	ldr	r3, [r4, #20]
 800c92a:	3001      	adds	r0, #1
 800c92c:	4283      	cmp	r3, r0
 800c92e:	d004      	beq.n	800c93a <__swbuf_r+0x62>
 800c930:	89a3      	ldrh	r3, [r4, #12]
 800c932:	07db      	lsls	r3, r3, #31
 800c934:	d506      	bpl.n	800c944 <__swbuf_r+0x6c>
 800c936:	2e0a      	cmp	r6, #10
 800c938:	d104      	bne.n	800c944 <__swbuf_r+0x6c>
 800c93a:	4621      	mov	r1, r4
 800c93c:	4628      	mov	r0, r5
 800c93e:	f000 ffcb 	bl	800d8d8 <_fflush_r>
 800c942:	b988      	cbnz	r0, 800c968 <__swbuf_r+0x90>
 800c944:	4638      	mov	r0, r7
 800c946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c948:	4b0a      	ldr	r3, [pc, #40]	; (800c974 <__swbuf_r+0x9c>)
 800c94a:	429c      	cmp	r4, r3
 800c94c:	d101      	bne.n	800c952 <__swbuf_r+0x7a>
 800c94e:	68ac      	ldr	r4, [r5, #8]
 800c950:	e7cf      	b.n	800c8f2 <__swbuf_r+0x1a>
 800c952:	4b09      	ldr	r3, [pc, #36]	; (800c978 <__swbuf_r+0xa0>)
 800c954:	429c      	cmp	r4, r3
 800c956:	bf08      	it	eq
 800c958:	68ec      	ldreq	r4, [r5, #12]
 800c95a:	e7ca      	b.n	800c8f2 <__swbuf_r+0x1a>
 800c95c:	4621      	mov	r1, r4
 800c95e:	4628      	mov	r0, r5
 800c960:	f000 f81e 	bl	800c9a0 <__swsetup_r>
 800c964:	2800      	cmp	r0, #0
 800c966:	d0cb      	beq.n	800c900 <__swbuf_r+0x28>
 800c968:	f04f 37ff 	mov.w	r7, #4294967295
 800c96c:	e7ea      	b.n	800c944 <__swbuf_r+0x6c>
 800c96e:	bf00      	nop
 800c970:	0800f514 	.word	0x0800f514
 800c974:	0800f534 	.word	0x0800f534
 800c978:	0800f4f4 	.word	0x0800f4f4

0800c97c <_write_r>:
 800c97c:	b538      	push	{r3, r4, r5, lr}
 800c97e:	4d07      	ldr	r5, [pc, #28]	; (800c99c <_write_r+0x20>)
 800c980:	4604      	mov	r4, r0
 800c982:	4608      	mov	r0, r1
 800c984:	4611      	mov	r1, r2
 800c986:	2200      	movs	r2, #0
 800c988:	602a      	str	r2, [r5, #0]
 800c98a:	461a      	mov	r2, r3
 800c98c:	f7f5 fe18 	bl	80025c0 <_write>
 800c990:	1c43      	adds	r3, r0, #1
 800c992:	d102      	bne.n	800c99a <_write_r+0x1e>
 800c994:	682b      	ldr	r3, [r5, #0]
 800c996:	b103      	cbz	r3, 800c99a <_write_r+0x1e>
 800c998:	6023      	str	r3, [r4, #0]
 800c99a:	bd38      	pop	{r3, r4, r5, pc}
 800c99c:	20003624 	.word	0x20003624

0800c9a0 <__swsetup_r>:
 800c9a0:	4b32      	ldr	r3, [pc, #200]	; (800ca6c <__swsetup_r+0xcc>)
 800c9a2:	b570      	push	{r4, r5, r6, lr}
 800c9a4:	681d      	ldr	r5, [r3, #0]
 800c9a6:	4606      	mov	r6, r0
 800c9a8:	460c      	mov	r4, r1
 800c9aa:	b125      	cbz	r5, 800c9b6 <__swsetup_r+0x16>
 800c9ac:	69ab      	ldr	r3, [r5, #24]
 800c9ae:	b913      	cbnz	r3, 800c9b6 <__swsetup_r+0x16>
 800c9b0:	4628      	mov	r0, r5
 800c9b2:	f001 f825 	bl	800da00 <__sinit>
 800c9b6:	4b2e      	ldr	r3, [pc, #184]	; (800ca70 <__swsetup_r+0xd0>)
 800c9b8:	429c      	cmp	r4, r3
 800c9ba:	d10f      	bne.n	800c9dc <__swsetup_r+0x3c>
 800c9bc:	686c      	ldr	r4, [r5, #4]
 800c9be:	89a3      	ldrh	r3, [r4, #12]
 800c9c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c9c4:	0719      	lsls	r1, r3, #28
 800c9c6:	d42c      	bmi.n	800ca22 <__swsetup_r+0x82>
 800c9c8:	06dd      	lsls	r5, r3, #27
 800c9ca:	d411      	bmi.n	800c9f0 <__swsetup_r+0x50>
 800c9cc:	2309      	movs	r3, #9
 800c9ce:	6033      	str	r3, [r6, #0]
 800c9d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c9d4:	81a3      	strh	r3, [r4, #12]
 800c9d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c9da:	e03e      	b.n	800ca5a <__swsetup_r+0xba>
 800c9dc:	4b25      	ldr	r3, [pc, #148]	; (800ca74 <__swsetup_r+0xd4>)
 800c9de:	429c      	cmp	r4, r3
 800c9e0:	d101      	bne.n	800c9e6 <__swsetup_r+0x46>
 800c9e2:	68ac      	ldr	r4, [r5, #8]
 800c9e4:	e7eb      	b.n	800c9be <__swsetup_r+0x1e>
 800c9e6:	4b24      	ldr	r3, [pc, #144]	; (800ca78 <__swsetup_r+0xd8>)
 800c9e8:	429c      	cmp	r4, r3
 800c9ea:	bf08      	it	eq
 800c9ec:	68ec      	ldreq	r4, [r5, #12]
 800c9ee:	e7e6      	b.n	800c9be <__swsetup_r+0x1e>
 800c9f0:	0758      	lsls	r0, r3, #29
 800c9f2:	d512      	bpl.n	800ca1a <__swsetup_r+0x7a>
 800c9f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9f6:	b141      	cbz	r1, 800ca0a <__swsetup_r+0x6a>
 800c9f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9fc:	4299      	cmp	r1, r3
 800c9fe:	d002      	beq.n	800ca06 <__swsetup_r+0x66>
 800ca00:	4630      	mov	r0, r6
 800ca02:	f7fe ffd9 	bl	800b9b8 <_free_r>
 800ca06:	2300      	movs	r3, #0
 800ca08:	6363      	str	r3, [r4, #52]	; 0x34
 800ca0a:	89a3      	ldrh	r3, [r4, #12]
 800ca0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca10:	81a3      	strh	r3, [r4, #12]
 800ca12:	2300      	movs	r3, #0
 800ca14:	6063      	str	r3, [r4, #4]
 800ca16:	6923      	ldr	r3, [r4, #16]
 800ca18:	6023      	str	r3, [r4, #0]
 800ca1a:	89a3      	ldrh	r3, [r4, #12]
 800ca1c:	f043 0308 	orr.w	r3, r3, #8
 800ca20:	81a3      	strh	r3, [r4, #12]
 800ca22:	6923      	ldr	r3, [r4, #16]
 800ca24:	b94b      	cbnz	r3, 800ca3a <__swsetup_r+0x9a>
 800ca26:	89a3      	ldrh	r3, [r4, #12]
 800ca28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca30:	d003      	beq.n	800ca3a <__swsetup_r+0x9a>
 800ca32:	4621      	mov	r1, r4
 800ca34:	4630      	mov	r0, r6
 800ca36:	f001 f8d3 	bl	800dbe0 <__smakebuf_r>
 800ca3a:	89a0      	ldrh	r0, [r4, #12]
 800ca3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca40:	f010 0301 	ands.w	r3, r0, #1
 800ca44:	d00a      	beq.n	800ca5c <__swsetup_r+0xbc>
 800ca46:	2300      	movs	r3, #0
 800ca48:	60a3      	str	r3, [r4, #8]
 800ca4a:	6963      	ldr	r3, [r4, #20]
 800ca4c:	425b      	negs	r3, r3
 800ca4e:	61a3      	str	r3, [r4, #24]
 800ca50:	6923      	ldr	r3, [r4, #16]
 800ca52:	b943      	cbnz	r3, 800ca66 <__swsetup_r+0xc6>
 800ca54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ca58:	d1ba      	bne.n	800c9d0 <__swsetup_r+0x30>
 800ca5a:	bd70      	pop	{r4, r5, r6, pc}
 800ca5c:	0781      	lsls	r1, r0, #30
 800ca5e:	bf58      	it	pl
 800ca60:	6963      	ldrpl	r3, [r4, #20]
 800ca62:	60a3      	str	r3, [r4, #8]
 800ca64:	e7f4      	b.n	800ca50 <__swsetup_r+0xb0>
 800ca66:	2000      	movs	r0, #0
 800ca68:	e7f7      	b.n	800ca5a <__swsetup_r+0xba>
 800ca6a:	bf00      	nop
 800ca6c:	20000014 	.word	0x20000014
 800ca70:	0800f514 	.word	0x0800f514
 800ca74:	0800f534 	.word	0x0800f534
 800ca78:	0800f4f4 	.word	0x0800f4f4

0800ca7c <__assert_func>:
 800ca7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca7e:	4614      	mov	r4, r2
 800ca80:	461a      	mov	r2, r3
 800ca82:	4b09      	ldr	r3, [pc, #36]	; (800caa8 <__assert_func+0x2c>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	4605      	mov	r5, r0
 800ca88:	68d8      	ldr	r0, [r3, #12]
 800ca8a:	b14c      	cbz	r4, 800caa0 <__assert_func+0x24>
 800ca8c:	4b07      	ldr	r3, [pc, #28]	; (800caac <__assert_func+0x30>)
 800ca8e:	9100      	str	r1, [sp, #0]
 800ca90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca94:	4906      	ldr	r1, [pc, #24]	; (800cab0 <__assert_func+0x34>)
 800ca96:	462b      	mov	r3, r5
 800ca98:	f001 f830 	bl	800dafc <fiprintf>
 800ca9c:	f7fe ff30 	bl	800b900 <abort>
 800caa0:	4b04      	ldr	r3, [pc, #16]	; (800cab4 <__assert_func+0x38>)
 800caa2:	461c      	mov	r4, r3
 800caa4:	e7f3      	b.n	800ca8e <__assert_func+0x12>
 800caa6:	bf00      	nop
 800caa8:	20000014 	.word	0x20000014
 800caac:	0800f33e 	.word	0x0800f33e
 800cab0:	0800f34b 	.word	0x0800f34b
 800cab4:	0800f379 	.word	0x0800f379

0800cab8 <_close_r>:
 800cab8:	b538      	push	{r3, r4, r5, lr}
 800caba:	4d06      	ldr	r5, [pc, #24]	; (800cad4 <_close_r+0x1c>)
 800cabc:	2300      	movs	r3, #0
 800cabe:	4604      	mov	r4, r0
 800cac0:	4608      	mov	r0, r1
 800cac2:	602b      	str	r3, [r5, #0]
 800cac4:	f7f6 f933 	bl	8002d2e <_close>
 800cac8:	1c43      	adds	r3, r0, #1
 800caca:	d102      	bne.n	800cad2 <_close_r+0x1a>
 800cacc:	682b      	ldr	r3, [r5, #0]
 800cace:	b103      	cbz	r3, 800cad2 <_close_r+0x1a>
 800cad0:	6023      	str	r3, [r4, #0]
 800cad2:	bd38      	pop	{r3, r4, r5, pc}
 800cad4:	20003624 	.word	0x20003624

0800cad8 <quorem>:
 800cad8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cadc:	6903      	ldr	r3, [r0, #16]
 800cade:	690c      	ldr	r4, [r1, #16]
 800cae0:	42a3      	cmp	r3, r4
 800cae2:	4607      	mov	r7, r0
 800cae4:	f2c0 8081 	blt.w	800cbea <quorem+0x112>
 800cae8:	3c01      	subs	r4, #1
 800caea:	f101 0814 	add.w	r8, r1, #20
 800caee:	f100 0514 	add.w	r5, r0, #20
 800caf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800caf6:	9301      	str	r3, [sp, #4]
 800caf8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cafc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb00:	3301      	adds	r3, #1
 800cb02:	429a      	cmp	r2, r3
 800cb04:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cb08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cb0c:	fbb2 f6f3 	udiv	r6, r2, r3
 800cb10:	d331      	bcc.n	800cb76 <quorem+0x9e>
 800cb12:	f04f 0e00 	mov.w	lr, #0
 800cb16:	4640      	mov	r0, r8
 800cb18:	46ac      	mov	ip, r5
 800cb1a:	46f2      	mov	sl, lr
 800cb1c:	f850 2b04 	ldr.w	r2, [r0], #4
 800cb20:	b293      	uxth	r3, r2
 800cb22:	fb06 e303 	mla	r3, r6, r3, lr
 800cb26:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	ebaa 0303 	sub.w	r3, sl, r3
 800cb30:	f8dc a000 	ldr.w	sl, [ip]
 800cb34:	0c12      	lsrs	r2, r2, #16
 800cb36:	fa13 f38a 	uxtah	r3, r3, sl
 800cb3a:	fb06 e202 	mla	r2, r6, r2, lr
 800cb3e:	9300      	str	r3, [sp, #0]
 800cb40:	9b00      	ldr	r3, [sp, #0]
 800cb42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cb46:	b292      	uxth	r2, r2
 800cb48:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cb4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cb50:	f8bd 3000 	ldrh.w	r3, [sp]
 800cb54:	4581      	cmp	r9, r0
 800cb56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb5a:	f84c 3b04 	str.w	r3, [ip], #4
 800cb5e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cb62:	d2db      	bcs.n	800cb1c <quorem+0x44>
 800cb64:	f855 300b 	ldr.w	r3, [r5, fp]
 800cb68:	b92b      	cbnz	r3, 800cb76 <quorem+0x9e>
 800cb6a:	9b01      	ldr	r3, [sp, #4]
 800cb6c:	3b04      	subs	r3, #4
 800cb6e:	429d      	cmp	r5, r3
 800cb70:	461a      	mov	r2, r3
 800cb72:	d32e      	bcc.n	800cbd2 <quorem+0xfa>
 800cb74:	613c      	str	r4, [r7, #16]
 800cb76:	4638      	mov	r0, r7
 800cb78:	f001 fb00 	bl	800e17c <__mcmp>
 800cb7c:	2800      	cmp	r0, #0
 800cb7e:	db24      	blt.n	800cbca <quorem+0xf2>
 800cb80:	3601      	adds	r6, #1
 800cb82:	4628      	mov	r0, r5
 800cb84:	f04f 0c00 	mov.w	ip, #0
 800cb88:	f858 2b04 	ldr.w	r2, [r8], #4
 800cb8c:	f8d0 e000 	ldr.w	lr, [r0]
 800cb90:	b293      	uxth	r3, r2
 800cb92:	ebac 0303 	sub.w	r3, ip, r3
 800cb96:	0c12      	lsrs	r2, r2, #16
 800cb98:	fa13 f38e 	uxtah	r3, r3, lr
 800cb9c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cba0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cba4:	b29b      	uxth	r3, r3
 800cba6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cbaa:	45c1      	cmp	r9, r8
 800cbac:	f840 3b04 	str.w	r3, [r0], #4
 800cbb0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cbb4:	d2e8      	bcs.n	800cb88 <quorem+0xb0>
 800cbb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cbba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cbbe:	b922      	cbnz	r2, 800cbca <quorem+0xf2>
 800cbc0:	3b04      	subs	r3, #4
 800cbc2:	429d      	cmp	r5, r3
 800cbc4:	461a      	mov	r2, r3
 800cbc6:	d30a      	bcc.n	800cbde <quorem+0x106>
 800cbc8:	613c      	str	r4, [r7, #16]
 800cbca:	4630      	mov	r0, r6
 800cbcc:	b003      	add	sp, #12
 800cbce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbd2:	6812      	ldr	r2, [r2, #0]
 800cbd4:	3b04      	subs	r3, #4
 800cbd6:	2a00      	cmp	r2, #0
 800cbd8:	d1cc      	bne.n	800cb74 <quorem+0x9c>
 800cbda:	3c01      	subs	r4, #1
 800cbdc:	e7c7      	b.n	800cb6e <quorem+0x96>
 800cbde:	6812      	ldr	r2, [r2, #0]
 800cbe0:	3b04      	subs	r3, #4
 800cbe2:	2a00      	cmp	r2, #0
 800cbe4:	d1f0      	bne.n	800cbc8 <quorem+0xf0>
 800cbe6:	3c01      	subs	r4, #1
 800cbe8:	e7eb      	b.n	800cbc2 <quorem+0xea>
 800cbea:	2000      	movs	r0, #0
 800cbec:	e7ee      	b.n	800cbcc <quorem+0xf4>
	...

0800cbf0 <_dtoa_r>:
 800cbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbf4:	ed2d 8b04 	vpush	{d8-d9}
 800cbf8:	ec57 6b10 	vmov	r6, r7, d0
 800cbfc:	b093      	sub	sp, #76	; 0x4c
 800cbfe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cc00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cc04:	9106      	str	r1, [sp, #24]
 800cc06:	ee10 aa10 	vmov	sl, s0
 800cc0a:	4604      	mov	r4, r0
 800cc0c:	9209      	str	r2, [sp, #36]	; 0x24
 800cc0e:	930c      	str	r3, [sp, #48]	; 0x30
 800cc10:	46bb      	mov	fp, r7
 800cc12:	b975      	cbnz	r5, 800cc32 <_dtoa_r+0x42>
 800cc14:	2010      	movs	r0, #16
 800cc16:	f7fe fea9 	bl	800b96c <malloc>
 800cc1a:	4602      	mov	r2, r0
 800cc1c:	6260      	str	r0, [r4, #36]	; 0x24
 800cc1e:	b920      	cbnz	r0, 800cc2a <_dtoa_r+0x3a>
 800cc20:	4ba7      	ldr	r3, [pc, #668]	; (800cec0 <_dtoa_r+0x2d0>)
 800cc22:	21ea      	movs	r1, #234	; 0xea
 800cc24:	48a7      	ldr	r0, [pc, #668]	; (800cec4 <_dtoa_r+0x2d4>)
 800cc26:	f7ff ff29 	bl	800ca7c <__assert_func>
 800cc2a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cc2e:	6005      	str	r5, [r0, #0]
 800cc30:	60c5      	str	r5, [r0, #12]
 800cc32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc34:	6819      	ldr	r1, [r3, #0]
 800cc36:	b151      	cbz	r1, 800cc4e <_dtoa_r+0x5e>
 800cc38:	685a      	ldr	r2, [r3, #4]
 800cc3a:	604a      	str	r2, [r1, #4]
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	4093      	lsls	r3, r2
 800cc40:	608b      	str	r3, [r1, #8]
 800cc42:	4620      	mov	r0, r4
 800cc44:	f001 f858 	bl	800dcf8 <_Bfree>
 800cc48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	601a      	str	r2, [r3, #0]
 800cc4e:	1e3b      	subs	r3, r7, #0
 800cc50:	bfaa      	itet	ge
 800cc52:	2300      	movge	r3, #0
 800cc54:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800cc58:	f8c8 3000 	strge.w	r3, [r8]
 800cc5c:	4b9a      	ldr	r3, [pc, #616]	; (800cec8 <_dtoa_r+0x2d8>)
 800cc5e:	bfbc      	itt	lt
 800cc60:	2201      	movlt	r2, #1
 800cc62:	f8c8 2000 	strlt.w	r2, [r8]
 800cc66:	ea33 030b 	bics.w	r3, r3, fp
 800cc6a:	d11b      	bne.n	800cca4 <_dtoa_r+0xb4>
 800cc6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc6e:	f242 730f 	movw	r3, #9999	; 0x270f
 800cc72:	6013      	str	r3, [r2, #0]
 800cc74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc78:	4333      	orrs	r3, r6
 800cc7a:	f000 8592 	beq.w	800d7a2 <_dtoa_r+0xbb2>
 800cc7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc80:	b963      	cbnz	r3, 800cc9c <_dtoa_r+0xac>
 800cc82:	4b92      	ldr	r3, [pc, #584]	; (800cecc <_dtoa_r+0x2dc>)
 800cc84:	e022      	b.n	800cccc <_dtoa_r+0xdc>
 800cc86:	4b92      	ldr	r3, [pc, #584]	; (800ced0 <_dtoa_r+0x2e0>)
 800cc88:	9301      	str	r3, [sp, #4]
 800cc8a:	3308      	adds	r3, #8
 800cc8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cc8e:	6013      	str	r3, [r2, #0]
 800cc90:	9801      	ldr	r0, [sp, #4]
 800cc92:	b013      	add	sp, #76	; 0x4c
 800cc94:	ecbd 8b04 	vpop	{d8-d9}
 800cc98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc9c:	4b8b      	ldr	r3, [pc, #556]	; (800cecc <_dtoa_r+0x2dc>)
 800cc9e:	9301      	str	r3, [sp, #4]
 800cca0:	3303      	adds	r3, #3
 800cca2:	e7f3      	b.n	800cc8c <_dtoa_r+0x9c>
 800cca4:	2200      	movs	r2, #0
 800cca6:	2300      	movs	r3, #0
 800cca8:	4650      	mov	r0, sl
 800ccaa:	4659      	mov	r1, fp
 800ccac:	f7f3 ff1c 	bl	8000ae8 <__aeabi_dcmpeq>
 800ccb0:	ec4b ab19 	vmov	d9, sl, fp
 800ccb4:	4680      	mov	r8, r0
 800ccb6:	b158      	cbz	r0, 800ccd0 <_dtoa_r+0xe0>
 800ccb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ccba:	2301      	movs	r3, #1
 800ccbc:	6013      	str	r3, [r2, #0]
 800ccbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	f000 856b 	beq.w	800d79c <_dtoa_r+0xbac>
 800ccc6:	4883      	ldr	r0, [pc, #524]	; (800ced4 <_dtoa_r+0x2e4>)
 800ccc8:	6018      	str	r0, [r3, #0]
 800ccca:	1e43      	subs	r3, r0, #1
 800cccc:	9301      	str	r3, [sp, #4]
 800ccce:	e7df      	b.n	800cc90 <_dtoa_r+0xa0>
 800ccd0:	ec4b ab10 	vmov	d0, sl, fp
 800ccd4:	aa10      	add	r2, sp, #64	; 0x40
 800ccd6:	a911      	add	r1, sp, #68	; 0x44
 800ccd8:	4620      	mov	r0, r4
 800ccda:	f001 faf5 	bl	800e2c8 <__d2b>
 800ccde:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800cce2:	ee08 0a10 	vmov	s16, r0
 800cce6:	2d00      	cmp	r5, #0
 800cce8:	f000 8084 	beq.w	800cdf4 <_dtoa_r+0x204>
 800ccec:	ee19 3a90 	vmov	r3, s19
 800ccf0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ccf4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ccf8:	4656      	mov	r6, sl
 800ccfa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ccfe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cd02:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800cd06:	4b74      	ldr	r3, [pc, #464]	; (800ced8 <_dtoa_r+0x2e8>)
 800cd08:	2200      	movs	r2, #0
 800cd0a:	4630      	mov	r0, r6
 800cd0c:	4639      	mov	r1, r7
 800cd0e:	f7f3 facb 	bl	80002a8 <__aeabi_dsub>
 800cd12:	a365      	add	r3, pc, #404	; (adr r3, 800cea8 <_dtoa_r+0x2b8>)
 800cd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd18:	f7f3 fc7e 	bl	8000618 <__aeabi_dmul>
 800cd1c:	a364      	add	r3, pc, #400	; (adr r3, 800ceb0 <_dtoa_r+0x2c0>)
 800cd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd22:	f7f3 fac3 	bl	80002ac <__adddf3>
 800cd26:	4606      	mov	r6, r0
 800cd28:	4628      	mov	r0, r5
 800cd2a:	460f      	mov	r7, r1
 800cd2c:	f7f3 fc0a 	bl	8000544 <__aeabi_i2d>
 800cd30:	a361      	add	r3, pc, #388	; (adr r3, 800ceb8 <_dtoa_r+0x2c8>)
 800cd32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd36:	f7f3 fc6f 	bl	8000618 <__aeabi_dmul>
 800cd3a:	4602      	mov	r2, r0
 800cd3c:	460b      	mov	r3, r1
 800cd3e:	4630      	mov	r0, r6
 800cd40:	4639      	mov	r1, r7
 800cd42:	f7f3 fab3 	bl	80002ac <__adddf3>
 800cd46:	4606      	mov	r6, r0
 800cd48:	460f      	mov	r7, r1
 800cd4a:	f7f3 ff15 	bl	8000b78 <__aeabi_d2iz>
 800cd4e:	2200      	movs	r2, #0
 800cd50:	9000      	str	r0, [sp, #0]
 800cd52:	2300      	movs	r3, #0
 800cd54:	4630      	mov	r0, r6
 800cd56:	4639      	mov	r1, r7
 800cd58:	f7f3 fed0 	bl	8000afc <__aeabi_dcmplt>
 800cd5c:	b150      	cbz	r0, 800cd74 <_dtoa_r+0x184>
 800cd5e:	9800      	ldr	r0, [sp, #0]
 800cd60:	f7f3 fbf0 	bl	8000544 <__aeabi_i2d>
 800cd64:	4632      	mov	r2, r6
 800cd66:	463b      	mov	r3, r7
 800cd68:	f7f3 febe 	bl	8000ae8 <__aeabi_dcmpeq>
 800cd6c:	b910      	cbnz	r0, 800cd74 <_dtoa_r+0x184>
 800cd6e:	9b00      	ldr	r3, [sp, #0]
 800cd70:	3b01      	subs	r3, #1
 800cd72:	9300      	str	r3, [sp, #0]
 800cd74:	9b00      	ldr	r3, [sp, #0]
 800cd76:	2b16      	cmp	r3, #22
 800cd78:	d85a      	bhi.n	800ce30 <_dtoa_r+0x240>
 800cd7a:	9a00      	ldr	r2, [sp, #0]
 800cd7c:	4b57      	ldr	r3, [pc, #348]	; (800cedc <_dtoa_r+0x2ec>)
 800cd7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd86:	ec51 0b19 	vmov	r0, r1, d9
 800cd8a:	f7f3 feb7 	bl	8000afc <__aeabi_dcmplt>
 800cd8e:	2800      	cmp	r0, #0
 800cd90:	d050      	beq.n	800ce34 <_dtoa_r+0x244>
 800cd92:	9b00      	ldr	r3, [sp, #0]
 800cd94:	3b01      	subs	r3, #1
 800cd96:	9300      	str	r3, [sp, #0]
 800cd98:	2300      	movs	r3, #0
 800cd9a:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cd9e:	1b5d      	subs	r5, r3, r5
 800cda0:	1e6b      	subs	r3, r5, #1
 800cda2:	9305      	str	r3, [sp, #20]
 800cda4:	bf45      	ittet	mi
 800cda6:	f1c5 0301 	rsbmi	r3, r5, #1
 800cdaa:	9304      	strmi	r3, [sp, #16]
 800cdac:	2300      	movpl	r3, #0
 800cdae:	2300      	movmi	r3, #0
 800cdb0:	bf4c      	ite	mi
 800cdb2:	9305      	strmi	r3, [sp, #20]
 800cdb4:	9304      	strpl	r3, [sp, #16]
 800cdb6:	9b00      	ldr	r3, [sp, #0]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	db3d      	blt.n	800ce38 <_dtoa_r+0x248>
 800cdbc:	9b05      	ldr	r3, [sp, #20]
 800cdbe:	9a00      	ldr	r2, [sp, #0]
 800cdc0:	920a      	str	r2, [sp, #40]	; 0x28
 800cdc2:	4413      	add	r3, r2
 800cdc4:	9305      	str	r3, [sp, #20]
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	9307      	str	r3, [sp, #28]
 800cdca:	9b06      	ldr	r3, [sp, #24]
 800cdcc:	2b09      	cmp	r3, #9
 800cdce:	f200 8089 	bhi.w	800cee4 <_dtoa_r+0x2f4>
 800cdd2:	2b05      	cmp	r3, #5
 800cdd4:	bfc4      	itt	gt
 800cdd6:	3b04      	subgt	r3, #4
 800cdd8:	9306      	strgt	r3, [sp, #24]
 800cdda:	9b06      	ldr	r3, [sp, #24]
 800cddc:	f1a3 0302 	sub.w	r3, r3, #2
 800cde0:	bfcc      	ite	gt
 800cde2:	2500      	movgt	r5, #0
 800cde4:	2501      	movle	r5, #1
 800cde6:	2b03      	cmp	r3, #3
 800cde8:	f200 8087 	bhi.w	800cefa <_dtoa_r+0x30a>
 800cdec:	e8df f003 	tbb	[pc, r3]
 800cdf0:	59383a2d 	.word	0x59383a2d
 800cdf4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cdf8:	441d      	add	r5, r3
 800cdfa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cdfe:	2b20      	cmp	r3, #32
 800ce00:	bfc1      	itttt	gt
 800ce02:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ce06:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ce0a:	fa0b f303 	lslgt.w	r3, fp, r3
 800ce0e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ce12:	bfda      	itte	le
 800ce14:	f1c3 0320 	rsble	r3, r3, #32
 800ce18:	fa06 f003 	lslle.w	r0, r6, r3
 800ce1c:	4318      	orrgt	r0, r3
 800ce1e:	f7f3 fb81 	bl	8000524 <__aeabi_ui2d>
 800ce22:	2301      	movs	r3, #1
 800ce24:	4606      	mov	r6, r0
 800ce26:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ce2a:	3d01      	subs	r5, #1
 800ce2c:	930e      	str	r3, [sp, #56]	; 0x38
 800ce2e:	e76a      	b.n	800cd06 <_dtoa_r+0x116>
 800ce30:	2301      	movs	r3, #1
 800ce32:	e7b2      	b.n	800cd9a <_dtoa_r+0x1aa>
 800ce34:	900b      	str	r0, [sp, #44]	; 0x2c
 800ce36:	e7b1      	b.n	800cd9c <_dtoa_r+0x1ac>
 800ce38:	9b04      	ldr	r3, [sp, #16]
 800ce3a:	9a00      	ldr	r2, [sp, #0]
 800ce3c:	1a9b      	subs	r3, r3, r2
 800ce3e:	9304      	str	r3, [sp, #16]
 800ce40:	4253      	negs	r3, r2
 800ce42:	9307      	str	r3, [sp, #28]
 800ce44:	2300      	movs	r3, #0
 800ce46:	930a      	str	r3, [sp, #40]	; 0x28
 800ce48:	e7bf      	b.n	800cdca <_dtoa_r+0x1da>
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	9308      	str	r3, [sp, #32]
 800ce4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	dc55      	bgt.n	800cf00 <_dtoa_r+0x310>
 800ce54:	2301      	movs	r3, #1
 800ce56:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ce5a:	461a      	mov	r2, r3
 800ce5c:	9209      	str	r2, [sp, #36]	; 0x24
 800ce5e:	e00c      	b.n	800ce7a <_dtoa_r+0x28a>
 800ce60:	2301      	movs	r3, #1
 800ce62:	e7f3      	b.n	800ce4c <_dtoa_r+0x25c>
 800ce64:	2300      	movs	r3, #0
 800ce66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce68:	9308      	str	r3, [sp, #32]
 800ce6a:	9b00      	ldr	r3, [sp, #0]
 800ce6c:	4413      	add	r3, r2
 800ce6e:	9302      	str	r3, [sp, #8]
 800ce70:	3301      	adds	r3, #1
 800ce72:	2b01      	cmp	r3, #1
 800ce74:	9303      	str	r3, [sp, #12]
 800ce76:	bfb8      	it	lt
 800ce78:	2301      	movlt	r3, #1
 800ce7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	6042      	str	r2, [r0, #4]
 800ce80:	2204      	movs	r2, #4
 800ce82:	f102 0614 	add.w	r6, r2, #20
 800ce86:	429e      	cmp	r6, r3
 800ce88:	6841      	ldr	r1, [r0, #4]
 800ce8a:	d93d      	bls.n	800cf08 <_dtoa_r+0x318>
 800ce8c:	4620      	mov	r0, r4
 800ce8e:	f000 fef3 	bl	800dc78 <_Balloc>
 800ce92:	9001      	str	r0, [sp, #4]
 800ce94:	2800      	cmp	r0, #0
 800ce96:	d13b      	bne.n	800cf10 <_dtoa_r+0x320>
 800ce98:	4b11      	ldr	r3, [pc, #68]	; (800cee0 <_dtoa_r+0x2f0>)
 800ce9a:	4602      	mov	r2, r0
 800ce9c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cea0:	e6c0      	b.n	800cc24 <_dtoa_r+0x34>
 800cea2:	2301      	movs	r3, #1
 800cea4:	e7df      	b.n	800ce66 <_dtoa_r+0x276>
 800cea6:	bf00      	nop
 800cea8:	636f4361 	.word	0x636f4361
 800ceac:	3fd287a7 	.word	0x3fd287a7
 800ceb0:	8b60c8b3 	.word	0x8b60c8b3
 800ceb4:	3fc68a28 	.word	0x3fc68a28
 800ceb8:	509f79fb 	.word	0x509f79fb
 800cebc:	3fd34413 	.word	0x3fd34413
 800cec0:	0800f2ca 	.word	0x0800f2ca
 800cec4:	0800f488 	.word	0x0800f488
 800cec8:	7ff00000 	.word	0x7ff00000
 800cecc:	0800f484 	.word	0x0800f484
 800ced0:	0800f47b 	.word	0x0800f47b
 800ced4:	0800f6c2 	.word	0x0800f6c2
 800ced8:	3ff80000 	.word	0x3ff80000
 800cedc:	0800f5d8 	.word	0x0800f5d8
 800cee0:	0800f4e3 	.word	0x0800f4e3
 800cee4:	2501      	movs	r5, #1
 800cee6:	2300      	movs	r3, #0
 800cee8:	9306      	str	r3, [sp, #24]
 800ceea:	9508      	str	r5, [sp, #32]
 800ceec:	f04f 33ff 	mov.w	r3, #4294967295
 800cef0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cef4:	2200      	movs	r2, #0
 800cef6:	2312      	movs	r3, #18
 800cef8:	e7b0      	b.n	800ce5c <_dtoa_r+0x26c>
 800cefa:	2301      	movs	r3, #1
 800cefc:	9308      	str	r3, [sp, #32]
 800cefe:	e7f5      	b.n	800ceec <_dtoa_r+0x2fc>
 800cf00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf02:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cf06:	e7b8      	b.n	800ce7a <_dtoa_r+0x28a>
 800cf08:	3101      	adds	r1, #1
 800cf0a:	6041      	str	r1, [r0, #4]
 800cf0c:	0052      	lsls	r2, r2, #1
 800cf0e:	e7b8      	b.n	800ce82 <_dtoa_r+0x292>
 800cf10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf12:	9a01      	ldr	r2, [sp, #4]
 800cf14:	601a      	str	r2, [r3, #0]
 800cf16:	9b03      	ldr	r3, [sp, #12]
 800cf18:	2b0e      	cmp	r3, #14
 800cf1a:	f200 809d 	bhi.w	800d058 <_dtoa_r+0x468>
 800cf1e:	2d00      	cmp	r5, #0
 800cf20:	f000 809a 	beq.w	800d058 <_dtoa_r+0x468>
 800cf24:	9b00      	ldr	r3, [sp, #0]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	dd32      	ble.n	800cf90 <_dtoa_r+0x3a0>
 800cf2a:	4ab7      	ldr	r2, [pc, #732]	; (800d208 <_dtoa_r+0x618>)
 800cf2c:	f003 030f 	and.w	r3, r3, #15
 800cf30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cf34:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cf38:	9b00      	ldr	r3, [sp, #0]
 800cf3a:	05d8      	lsls	r0, r3, #23
 800cf3c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800cf40:	d516      	bpl.n	800cf70 <_dtoa_r+0x380>
 800cf42:	4bb2      	ldr	r3, [pc, #712]	; (800d20c <_dtoa_r+0x61c>)
 800cf44:	ec51 0b19 	vmov	r0, r1, d9
 800cf48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cf4c:	f7f3 fc8e 	bl	800086c <__aeabi_ddiv>
 800cf50:	f007 070f 	and.w	r7, r7, #15
 800cf54:	4682      	mov	sl, r0
 800cf56:	468b      	mov	fp, r1
 800cf58:	2503      	movs	r5, #3
 800cf5a:	4eac      	ldr	r6, [pc, #688]	; (800d20c <_dtoa_r+0x61c>)
 800cf5c:	b957      	cbnz	r7, 800cf74 <_dtoa_r+0x384>
 800cf5e:	4642      	mov	r2, r8
 800cf60:	464b      	mov	r3, r9
 800cf62:	4650      	mov	r0, sl
 800cf64:	4659      	mov	r1, fp
 800cf66:	f7f3 fc81 	bl	800086c <__aeabi_ddiv>
 800cf6a:	4682      	mov	sl, r0
 800cf6c:	468b      	mov	fp, r1
 800cf6e:	e028      	b.n	800cfc2 <_dtoa_r+0x3d2>
 800cf70:	2502      	movs	r5, #2
 800cf72:	e7f2      	b.n	800cf5a <_dtoa_r+0x36a>
 800cf74:	07f9      	lsls	r1, r7, #31
 800cf76:	d508      	bpl.n	800cf8a <_dtoa_r+0x39a>
 800cf78:	4640      	mov	r0, r8
 800cf7a:	4649      	mov	r1, r9
 800cf7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cf80:	f7f3 fb4a 	bl	8000618 <__aeabi_dmul>
 800cf84:	3501      	adds	r5, #1
 800cf86:	4680      	mov	r8, r0
 800cf88:	4689      	mov	r9, r1
 800cf8a:	107f      	asrs	r7, r7, #1
 800cf8c:	3608      	adds	r6, #8
 800cf8e:	e7e5      	b.n	800cf5c <_dtoa_r+0x36c>
 800cf90:	f000 809b 	beq.w	800d0ca <_dtoa_r+0x4da>
 800cf94:	9b00      	ldr	r3, [sp, #0]
 800cf96:	4f9d      	ldr	r7, [pc, #628]	; (800d20c <_dtoa_r+0x61c>)
 800cf98:	425e      	negs	r6, r3
 800cf9a:	4b9b      	ldr	r3, [pc, #620]	; (800d208 <_dtoa_r+0x618>)
 800cf9c:	f006 020f 	and.w	r2, r6, #15
 800cfa0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa8:	ec51 0b19 	vmov	r0, r1, d9
 800cfac:	f7f3 fb34 	bl	8000618 <__aeabi_dmul>
 800cfb0:	1136      	asrs	r6, r6, #4
 800cfb2:	4682      	mov	sl, r0
 800cfb4:	468b      	mov	fp, r1
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	2502      	movs	r5, #2
 800cfba:	2e00      	cmp	r6, #0
 800cfbc:	d17a      	bne.n	800d0b4 <_dtoa_r+0x4c4>
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d1d3      	bne.n	800cf6a <_dtoa_r+0x37a>
 800cfc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	f000 8082 	beq.w	800d0ce <_dtoa_r+0x4de>
 800cfca:	4b91      	ldr	r3, [pc, #580]	; (800d210 <_dtoa_r+0x620>)
 800cfcc:	2200      	movs	r2, #0
 800cfce:	4650      	mov	r0, sl
 800cfd0:	4659      	mov	r1, fp
 800cfd2:	f7f3 fd93 	bl	8000afc <__aeabi_dcmplt>
 800cfd6:	2800      	cmp	r0, #0
 800cfd8:	d079      	beq.n	800d0ce <_dtoa_r+0x4de>
 800cfda:	9b03      	ldr	r3, [sp, #12]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d076      	beq.n	800d0ce <_dtoa_r+0x4de>
 800cfe0:	9b02      	ldr	r3, [sp, #8]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	dd36      	ble.n	800d054 <_dtoa_r+0x464>
 800cfe6:	9b00      	ldr	r3, [sp, #0]
 800cfe8:	4650      	mov	r0, sl
 800cfea:	4659      	mov	r1, fp
 800cfec:	1e5f      	subs	r7, r3, #1
 800cfee:	2200      	movs	r2, #0
 800cff0:	4b88      	ldr	r3, [pc, #544]	; (800d214 <_dtoa_r+0x624>)
 800cff2:	f7f3 fb11 	bl	8000618 <__aeabi_dmul>
 800cff6:	9e02      	ldr	r6, [sp, #8]
 800cff8:	4682      	mov	sl, r0
 800cffa:	468b      	mov	fp, r1
 800cffc:	3501      	adds	r5, #1
 800cffe:	4628      	mov	r0, r5
 800d000:	f7f3 faa0 	bl	8000544 <__aeabi_i2d>
 800d004:	4652      	mov	r2, sl
 800d006:	465b      	mov	r3, fp
 800d008:	f7f3 fb06 	bl	8000618 <__aeabi_dmul>
 800d00c:	4b82      	ldr	r3, [pc, #520]	; (800d218 <_dtoa_r+0x628>)
 800d00e:	2200      	movs	r2, #0
 800d010:	f7f3 f94c 	bl	80002ac <__adddf3>
 800d014:	46d0      	mov	r8, sl
 800d016:	46d9      	mov	r9, fp
 800d018:	4682      	mov	sl, r0
 800d01a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d01e:	2e00      	cmp	r6, #0
 800d020:	d158      	bne.n	800d0d4 <_dtoa_r+0x4e4>
 800d022:	4b7e      	ldr	r3, [pc, #504]	; (800d21c <_dtoa_r+0x62c>)
 800d024:	2200      	movs	r2, #0
 800d026:	4640      	mov	r0, r8
 800d028:	4649      	mov	r1, r9
 800d02a:	f7f3 f93d 	bl	80002a8 <__aeabi_dsub>
 800d02e:	4652      	mov	r2, sl
 800d030:	465b      	mov	r3, fp
 800d032:	4680      	mov	r8, r0
 800d034:	4689      	mov	r9, r1
 800d036:	f7f3 fd7f 	bl	8000b38 <__aeabi_dcmpgt>
 800d03a:	2800      	cmp	r0, #0
 800d03c:	f040 8295 	bne.w	800d56a <_dtoa_r+0x97a>
 800d040:	4652      	mov	r2, sl
 800d042:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d046:	4640      	mov	r0, r8
 800d048:	4649      	mov	r1, r9
 800d04a:	f7f3 fd57 	bl	8000afc <__aeabi_dcmplt>
 800d04e:	2800      	cmp	r0, #0
 800d050:	f040 8289 	bne.w	800d566 <_dtoa_r+0x976>
 800d054:	ec5b ab19 	vmov	sl, fp, d9
 800d058:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	f2c0 8148 	blt.w	800d2f0 <_dtoa_r+0x700>
 800d060:	9a00      	ldr	r2, [sp, #0]
 800d062:	2a0e      	cmp	r2, #14
 800d064:	f300 8144 	bgt.w	800d2f0 <_dtoa_r+0x700>
 800d068:	4b67      	ldr	r3, [pc, #412]	; (800d208 <_dtoa_r+0x618>)
 800d06a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d06e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d074:	2b00      	cmp	r3, #0
 800d076:	f280 80d5 	bge.w	800d224 <_dtoa_r+0x634>
 800d07a:	9b03      	ldr	r3, [sp, #12]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	f300 80d1 	bgt.w	800d224 <_dtoa_r+0x634>
 800d082:	f040 826f 	bne.w	800d564 <_dtoa_r+0x974>
 800d086:	4b65      	ldr	r3, [pc, #404]	; (800d21c <_dtoa_r+0x62c>)
 800d088:	2200      	movs	r2, #0
 800d08a:	4640      	mov	r0, r8
 800d08c:	4649      	mov	r1, r9
 800d08e:	f7f3 fac3 	bl	8000618 <__aeabi_dmul>
 800d092:	4652      	mov	r2, sl
 800d094:	465b      	mov	r3, fp
 800d096:	f7f3 fd45 	bl	8000b24 <__aeabi_dcmpge>
 800d09a:	9e03      	ldr	r6, [sp, #12]
 800d09c:	4637      	mov	r7, r6
 800d09e:	2800      	cmp	r0, #0
 800d0a0:	f040 8245 	bne.w	800d52e <_dtoa_r+0x93e>
 800d0a4:	9d01      	ldr	r5, [sp, #4]
 800d0a6:	2331      	movs	r3, #49	; 0x31
 800d0a8:	f805 3b01 	strb.w	r3, [r5], #1
 800d0ac:	9b00      	ldr	r3, [sp, #0]
 800d0ae:	3301      	adds	r3, #1
 800d0b0:	9300      	str	r3, [sp, #0]
 800d0b2:	e240      	b.n	800d536 <_dtoa_r+0x946>
 800d0b4:	07f2      	lsls	r2, r6, #31
 800d0b6:	d505      	bpl.n	800d0c4 <_dtoa_r+0x4d4>
 800d0b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0bc:	f7f3 faac 	bl	8000618 <__aeabi_dmul>
 800d0c0:	3501      	adds	r5, #1
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	1076      	asrs	r6, r6, #1
 800d0c6:	3708      	adds	r7, #8
 800d0c8:	e777      	b.n	800cfba <_dtoa_r+0x3ca>
 800d0ca:	2502      	movs	r5, #2
 800d0cc:	e779      	b.n	800cfc2 <_dtoa_r+0x3d2>
 800d0ce:	9f00      	ldr	r7, [sp, #0]
 800d0d0:	9e03      	ldr	r6, [sp, #12]
 800d0d2:	e794      	b.n	800cffe <_dtoa_r+0x40e>
 800d0d4:	9901      	ldr	r1, [sp, #4]
 800d0d6:	4b4c      	ldr	r3, [pc, #304]	; (800d208 <_dtoa_r+0x618>)
 800d0d8:	4431      	add	r1, r6
 800d0da:	910d      	str	r1, [sp, #52]	; 0x34
 800d0dc:	9908      	ldr	r1, [sp, #32]
 800d0de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d0e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d0e6:	2900      	cmp	r1, #0
 800d0e8:	d043      	beq.n	800d172 <_dtoa_r+0x582>
 800d0ea:	494d      	ldr	r1, [pc, #308]	; (800d220 <_dtoa_r+0x630>)
 800d0ec:	2000      	movs	r0, #0
 800d0ee:	f7f3 fbbd 	bl	800086c <__aeabi_ddiv>
 800d0f2:	4652      	mov	r2, sl
 800d0f4:	465b      	mov	r3, fp
 800d0f6:	f7f3 f8d7 	bl	80002a8 <__aeabi_dsub>
 800d0fa:	9d01      	ldr	r5, [sp, #4]
 800d0fc:	4682      	mov	sl, r0
 800d0fe:	468b      	mov	fp, r1
 800d100:	4649      	mov	r1, r9
 800d102:	4640      	mov	r0, r8
 800d104:	f7f3 fd38 	bl	8000b78 <__aeabi_d2iz>
 800d108:	4606      	mov	r6, r0
 800d10a:	f7f3 fa1b 	bl	8000544 <__aeabi_i2d>
 800d10e:	4602      	mov	r2, r0
 800d110:	460b      	mov	r3, r1
 800d112:	4640      	mov	r0, r8
 800d114:	4649      	mov	r1, r9
 800d116:	f7f3 f8c7 	bl	80002a8 <__aeabi_dsub>
 800d11a:	3630      	adds	r6, #48	; 0x30
 800d11c:	f805 6b01 	strb.w	r6, [r5], #1
 800d120:	4652      	mov	r2, sl
 800d122:	465b      	mov	r3, fp
 800d124:	4680      	mov	r8, r0
 800d126:	4689      	mov	r9, r1
 800d128:	f7f3 fce8 	bl	8000afc <__aeabi_dcmplt>
 800d12c:	2800      	cmp	r0, #0
 800d12e:	d163      	bne.n	800d1f8 <_dtoa_r+0x608>
 800d130:	4642      	mov	r2, r8
 800d132:	464b      	mov	r3, r9
 800d134:	4936      	ldr	r1, [pc, #216]	; (800d210 <_dtoa_r+0x620>)
 800d136:	2000      	movs	r0, #0
 800d138:	f7f3 f8b6 	bl	80002a8 <__aeabi_dsub>
 800d13c:	4652      	mov	r2, sl
 800d13e:	465b      	mov	r3, fp
 800d140:	f7f3 fcdc 	bl	8000afc <__aeabi_dcmplt>
 800d144:	2800      	cmp	r0, #0
 800d146:	f040 80b5 	bne.w	800d2b4 <_dtoa_r+0x6c4>
 800d14a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d14c:	429d      	cmp	r5, r3
 800d14e:	d081      	beq.n	800d054 <_dtoa_r+0x464>
 800d150:	4b30      	ldr	r3, [pc, #192]	; (800d214 <_dtoa_r+0x624>)
 800d152:	2200      	movs	r2, #0
 800d154:	4650      	mov	r0, sl
 800d156:	4659      	mov	r1, fp
 800d158:	f7f3 fa5e 	bl	8000618 <__aeabi_dmul>
 800d15c:	4b2d      	ldr	r3, [pc, #180]	; (800d214 <_dtoa_r+0x624>)
 800d15e:	4682      	mov	sl, r0
 800d160:	468b      	mov	fp, r1
 800d162:	4640      	mov	r0, r8
 800d164:	4649      	mov	r1, r9
 800d166:	2200      	movs	r2, #0
 800d168:	f7f3 fa56 	bl	8000618 <__aeabi_dmul>
 800d16c:	4680      	mov	r8, r0
 800d16e:	4689      	mov	r9, r1
 800d170:	e7c6      	b.n	800d100 <_dtoa_r+0x510>
 800d172:	4650      	mov	r0, sl
 800d174:	4659      	mov	r1, fp
 800d176:	f7f3 fa4f 	bl	8000618 <__aeabi_dmul>
 800d17a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d17c:	9d01      	ldr	r5, [sp, #4]
 800d17e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d180:	4682      	mov	sl, r0
 800d182:	468b      	mov	fp, r1
 800d184:	4649      	mov	r1, r9
 800d186:	4640      	mov	r0, r8
 800d188:	f7f3 fcf6 	bl	8000b78 <__aeabi_d2iz>
 800d18c:	4606      	mov	r6, r0
 800d18e:	f7f3 f9d9 	bl	8000544 <__aeabi_i2d>
 800d192:	3630      	adds	r6, #48	; 0x30
 800d194:	4602      	mov	r2, r0
 800d196:	460b      	mov	r3, r1
 800d198:	4640      	mov	r0, r8
 800d19a:	4649      	mov	r1, r9
 800d19c:	f7f3 f884 	bl	80002a8 <__aeabi_dsub>
 800d1a0:	f805 6b01 	strb.w	r6, [r5], #1
 800d1a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d1a6:	429d      	cmp	r5, r3
 800d1a8:	4680      	mov	r8, r0
 800d1aa:	4689      	mov	r9, r1
 800d1ac:	f04f 0200 	mov.w	r2, #0
 800d1b0:	d124      	bne.n	800d1fc <_dtoa_r+0x60c>
 800d1b2:	4b1b      	ldr	r3, [pc, #108]	; (800d220 <_dtoa_r+0x630>)
 800d1b4:	4650      	mov	r0, sl
 800d1b6:	4659      	mov	r1, fp
 800d1b8:	f7f3 f878 	bl	80002ac <__adddf3>
 800d1bc:	4602      	mov	r2, r0
 800d1be:	460b      	mov	r3, r1
 800d1c0:	4640      	mov	r0, r8
 800d1c2:	4649      	mov	r1, r9
 800d1c4:	f7f3 fcb8 	bl	8000b38 <__aeabi_dcmpgt>
 800d1c8:	2800      	cmp	r0, #0
 800d1ca:	d173      	bne.n	800d2b4 <_dtoa_r+0x6c4>
 800d1cc:	4652      	mov	r2, sl
 800d1ce:	465b      	mov	r3, fp
 800d1d0:	4913      	ldr	r1, [pc, #76]	; (800d220 <_dtoa_r+0x630>)
 800d1d2:	2000      	movs	r0, #0
 800d1d4:	f7f3 f868 	bl	80002a8 <__aeabi_dsub>
 800d1d8:	4602      	mov	r2, r0
 800d1da:	460b      	mov	r3, r1
 800d1dc:	4640      	mov	r0, r8
 800d1de:	4649      	mov	r1, r9
 800d1e0:	f7f3 fc8c 	bl	8000afc <__aeabi_dcmplt>
 800d1e4:	2800      	cmp	r0, #0
 800d1e6:	f43f af35 	beq.w	800d054 <_dtoa_r+0x464>
 800d1ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d1ec:	1e6b      	subs	r3, r5, #1
 800d1ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800d1f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d1f4:	2b30      	cmp	r3, #48	; 0x30
 800d1f6:	d0f8      	beq.n	800d1ea <_dtoa_r+0x5fa>
 800d1f8:	9700      	str	r7, [sp, #0]
 800d1fa:	e049      	b.n	800d290 <_dtoa_r+0x6a0>
 800d1fc:	4b05      	ldr	r3, [pc, #20]	; (800d214 <_dtoa_r+0x624>)
 800d1fe:	f7f3 fa0b 	bl	8000618 <__aeabi_dmul>
 800d202:	4680      	mov	r8, r0
 800d204:	4689      	mov	r9, r1
 800d206:	e7bd      	b.n	800d184 <_dtoa_r+0x594>
 800d208:	0800f5d8 	.word	0x0800f5d8
 800d20c:	0800f5b0 	.word	0x0800f5b0
 800d210:	3ff00000 	.word	0x3ff00000
 800d214:	40240000 	.word	0x40240000
 800d218:	401c0000 	.word	0x401c0000
 800d21c:	40140000 	.word	0x40140000
 800d220:	3fe00000 	.word	0x3fe00000
 800d224:	9d01      	ldr	r5, [sp, #4]
 800d226:	4656      	mov	r6, sl
 800d228:	465f      	mov	r7, fp
 800d22a:	4642      	mov	r2, r8
 800d22c:	464b      	mov	r3, r9
 800d22e:	4630      	mov	r0, r6
 800d230:	4639      	mov	r1, r7
 800d232:	f7f3 fb1b 	bl	800086c <__aeabi_ddiv>
 800d236:	f7f3 fc9f 	bl	8000b78 <__aeabi_d2iz>
 800d23a:	4682      	mov	sl, r0
 800d23c:	f7f3 f982 	bl	8000544 <__aeabi_i2d>
 800d240:	4642      	mov	r2, r8
 800d242:	464b      	mov	r3, r9
 800d244:	f7f3 f9e8 	bl	8000618 <__aeabi_dmul>
 800d248:	4602      	mov	r2, r0
 800d24a:	460b      	mov	r3, r1
 800d24c:	4630      	mov	r0, r6
 800d24e:	4639      	mov	r1, r7
 800d250:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d254:	f7f3 f828 	bl	80002a8 <__aeabi_dsub>
 800d258:	f805 6b01 	strb.w	r6, [r5], #1
 800d25c:	9e01      	ldr	r6, [sp, #4]
 800d25e:	9f03      	ldr	r7, [sp, #12]
 800d260:	1bae      	subs	r6, r5, r6
 800d262:	42b7      	cmp	r7, r6
 800d264:	4602      	mov	r2, r0
 800d266:	460b      	mov	r3, r1
 800d268:	d135      	bne.n	800d2d6 <_dtoa_r+0x6e6>
 800d26a:	f7f3 f81f 	bl	80002ac <__adddf3>
 800d26e:	4642      	mov	r2, r8
 800d270:	464b      	mov	r3, r9
 800d272:	4606      	mov	r6, r0
 800d274:	460f      	mov	r7, r1
 800d276:	f7f3 fc5f 	bl	8000b38 <__aeabi_dcmpgt>
 800d27a:	b9d0      	cbnz	r0, 800d2b2 <_dtoa_r+0x6c2>
 800d27c:	4642      	mov	r2, r8
 800d27e:	464b      	mov	r3, r9
 800d280:	4630      	mov	r0, r6
 800d282:	4639      	mov	r1, r7
 800d284:	f7f3 fc30 	bl	8000ae8 <__aeabi_dcmpeq>
 800d288:	b110      	cbz	r0, 800d290 <_dtoa_r+0x6a0>
 800d28a:	f01a 0f01 	tst.w	sl, #1
 800d28e:	d110      	bne.n	800d2b2 <_dtoa_r+0x6c2>
 800d290:	4620      	mov	r0, r4
 800d292:	ee18 1a10 	vmov	r1, s16
 800d296:	f000 fd2f 	bl	800dcf8 <_Bfree>
 800d29a:	2300      	movs	r3, #0
 800d29c:	9800      	ldr	r0, [sp, #0]
 800d29e:	702b      	strb	r3, [r5, #0]
 800d2a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d2a2:	3001      	adds	r0, #1
 800d2a4:	6018      	str	r0, [r3, #0]
 800d2a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	f43f acf1 	beq.w	800cc90 <_dtoa_r+0xa0>
 800d2ae:	601d      	str	r5, [r3, #0]
 800d2b0:	e4ee      	b.n	800cc90 <_dtoa_r+0xa0>
 800d2b2:	9f00      	ldr	r7, [sp, #0]
 800d2b4:	462b      	mov	r3, r5
 800d2b6:	461d      	mov	r5, r3
 800d2b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d2bc:	2a39      	cmp	r2, #57	; 0x39
 800d2be:	d106      	bne.n	800d2ce <_dtoa_r+0x6de>
 800d2c0:	9a01      	ldr	r2, [sp, #4]
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	d1f7      	bne.n	800d2b6 <_dtoa_r+0x6c6>
 800d2c6:	9901      	ldr	r1, [sp, #4]
 800d2c8:	2230      	movs	r2, #48	; 0x30
 800d2ca:	3701      	adds	r7, #1
 800d2cc:	700a      	strb	r2, [r1, #0]
 800d2ce:	781a      	ldrb	r2, [r3, #0]
 800d2d0:	3201      	adds	r2, #1
 800d2d2:	701a      	strb	r2, [r3, #0]
 800d2d4:	e790      	b.n	800d1f8 <_dtoa_r+0x608>
 800d2d6:	4ba6      	ldr	r3, [pc, #664]	; (800d570 <_dtoa_r+0x980>)
 800d2d8:	2200      	movs	r2, #0
 800d2da:	f7f3 f99d 	bl	8000618 <__aeabi_dmul>
 800d2de:	2200      	movs	r2, #0
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	4606      	mov	r6, r0
 800d2e4:	460f      	mov	r7, r1
 800d2e6:	f7f3 fbff 	bl	8000ae8 <__aeabi_dcmpeq>
 800d2ea:	2800      	cmp	r0, #0
 800d2ec:	d09d      	beq.n	800d22a <_dtoa_r+0x63a>
 800d2ee:	e7cf      	b.n	800d290 <_dtoa_r+0x6a0>
 800d2f0:	9a08      	ldr	r2, [sp, #32]
 800d2f2:	2a00      	cmp	r2, #0
 800d2f4:	f000 80d7 	beq.w	800d4a6 <_dtoa_r+0x8b6>
 800d2f8:	9a06      	ldr	r2, [sp, #24]
 800d2fa:	2a01      	cmp	r2, #1
 800d2fc:	f300 80ba 	bgt.w	800d474 <_dtoa_r+0x884>
 800d300:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d302:	2a00      	cmp	r2, #0
 800d304:	f000 80b2 	beq.w	800d46c <_dtoa_r+0x87c>
 800d308:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d30c:	9e07      	ldr	r6, [sp, #28]
 800d30e:	9d04      	ldr	r5, [sp, #16]
 800d310:	9a04      	ldr	r2, [sp, #16]
 800d312:	441a      	add	r2, r3
 800d314:	9204      	str	r2, [sp, #16]
 800d316:	9a05      	ldr	r2, [sp, #20]
 800d318:	2101      	movs	r1, #1
 800d31a:	441a      	add	r2, r3
 800d31c:	4620      	mov	r0, r4
 800d31e:	9205      	str	r2, [sp, #20]
 800d320:	f000 fda2 	bl	800de68 <__i2b>
 800d324:	4607      	mov	r7, r0
 800d326:	2d00      	cmp	r5, #0
 800d328:	dd0c      	ble.n	800d344 <_dtoa_r+0x754>
 800d32a:	9b05      	ldr	r3, [sp, #20]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	dd09      	ble.n	800d344 <_dtoa_r+0x754>
 800d330:	42ab      	cmp	r3, r5
 800d332:	9a04      	ldr	r2, [sp, #16]
 800d334:	bfa8      	it	ge
 800d336:	462b      	movge	r3, r5
 800d338:	1ad2      	subs	r2, r2, r3
 800d33a:	9204      	str	r2, [sp, #16]
 800d33c:	9a05      	ldr	r2, [sp, #20]
 800d33e:	1aed      	subs	r5, r5, r3
 800d340:	1ad3      	subs	r3, r2, r3
 800d342:	9305      	str	r3, [sp, #20]
 800d344:	9b07      	ldr	r3, [sp, #28]
 800d346:	b31b      	cbz	r3, 800d390 <_dtoa_r+0x7a0>
 800d348:	9b08      	ldr	r3, [sp, #32]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	f000 80af 	beq.w	800d4ae <_dtoa_r+0x8be>
 800d350:	2e00      	cmp	r6, #0
 800d352:	dd13      	ble.n	800d37c <_dtoa_r+0x78c>
 800d354:	4639      	mov	r1, r7
 800d356:	4632      	mov	r2, r6
 800d358:	4620      	mov	r0, r4
 800d35a:	f000 fe45 	bl	800dfe8 <__pow5mult>
 800d35e:	ee18 2a10 	vmov	r2, s16
 800d362:	4601      	mov	r1, r0
 800d364:	4607      	mov	r7, r0
 800d366:	4620      	mov	r0, r4
 800d368:	f000 fd94 	bl	800de94 <__multiply>
 800d36c:	ee18 1a10 	vmov	r1, s16
 800d370:	4680      	mov	r8, r0
 800d372:	4620      	mov	r0, r4
 800d374:	f000 fcc0 	bl	800dcf8 <_Bfree>
 800d378:	ee08 8a10 	vmov	s16, r8
 800d37c:	9b07      	ldr	r3, [sp, #28]
 800d37e:	1b9a      	subs	r2, r3, r6
 800d380:	d006      	beq.n	800d390 <_dtoa_r+0x7a0>
 800d382:	ee18 1a10 	vmov	r1, s16
 800d386:	4620      	mov	r0, r4
 800d388:	f000 fe2e 	bl	800dfe8 <__pow5mult>
 800d38c:	ee08 0a10 	vmov	s16, r0
 800d390:	2101      	movs	r1, #1
 800d392:	4620      	mov	r0, r4
 800d394:	f000 fd68 	bl	800de68 <__i2b>
 800d398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	4606      	mov	r6, r0
 800d39e:	f340 8088 	ble.w	800d4b2 <_dtoa_r+0x8c2>
 800d3a2:	461a      	mov	r2, r3
 800d3a4:	4601      	mov	r1, r0
 800d3a6:	4620      	mov	r0, r4
 800d3a8:	f000 fe1e 	bl	800dfe8 <__pow5mult>
 800d3ac:	9b06      	ldr	r3, [sp, #24]
 800d3ae:	2b01      	cmp	r3, #1
 800d3b0:	4606      	mov	r6, r0
 800d3b2:	f340 8081 	ble.w	800d4b8 <_dtoa_r+0x8c8>
 800d3b6:	f04f 0800 	mov.w	r8, #0
 800d3ba:	6933      	ldr	r3, [r6, #16]
 800d3bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d3c0:	6918      	ldr	r0, [r3, #16]
 800d3c2:	f000 fd01 	bl	800ddc8 <__hi0bits>
 800d3c6:	f1c0 0020 	rsb	r0, r0, #32
 800d3ca:	9b05      	ldr	r3, [sp, #20]
 800d3cc:	4418      	add	r0, r3
 800d3ce:	f010 001f 	ands.w	r0, r0, #31
 800d3d2:	f000 8092 	beq.w	800d4fa <_dtoa_r+0x90a>
 800d3d6:	f1c0 0320 	rsb	r3, r0, #32
 800d3da:	2b04      	cmp	r3, #4
 800d3dc:	f340 808a 	ble.w	800d4f4 <_dtoa_r+0x904>
 800d3e0:	f1c0 001c 	rsb	r0, r0, #28
 800d3e4:	9b04      	ldr	r3, [sp, #16]
 800d3e6:	4403      	add	r3, r0
 800d3e8:	9304      	str	r3, [sp, #16]
 800d3ea:	9b05      	ldr	r3, [sp, #20]
 800d3ec:	4403      	add	r3, r0
 800d3ee:	4405      	add	r5, r0
 800d3f0:	9305      	str	r3, [sp, #20]
 800d3f2:	9b04      	ldr	r3, [sp, #16]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	dd07      	ble.n	800d408 <_dtoa_r+0x818>
 800d3f8:	ee18 1a10 	vmov	r1, s16
 800d3fc:	461a      	mov	r2, r3
 800d3fe:	4620      	mov	r0, r4
 800d400:	f000 fe4c 	bl	800e09c <__lshift>
 800d404:	ee08 0a10 	vmov	s16, r0
 800d408:	9b05      	ldr	r3, [sp, #20]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	dd05      	ble.n	800d41a <_dtoa_r+0x82a>
 800d40e:	4631      	mov	r1, r6
 800d410:	461a      	mov	r2, r3
 800d412:	4620      	mov	r0, r4
 800d414:	f000 fe42 	bl	800e09c <__lshift>
 800d418:	4606      	mov	r6, r0
 800d41a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d06e      	beq.n	800d4fe <_dtoa_r+0x90e>
 800d420:	ee18 0a10 	vmov	r0, s16
 800d424:	4631      	mov	r1, r6
 800d426:	f000 fea9 	bl	800e17c <__mcmp>
 800d42a:	2800      	cmp	r0, #0
 800d42c:	da67      	bge.n	800d4fe <_dtoa_r+0x90e>
 800d42e:	9b00      	ldr	r3, [sp, #0]
 800d430:	3b01      	subs	r3, #1
 800d432:	ee18 1a10 	vmov	r1, s16
 800d436:	9300      	str	r3, [sp, #0]
 800d438:	220a      	movs	r2, #10
 800d43a:	2300      	movs	r3, #0
 800d43c:	4620      	mov	r0, r4
 800d43e:	f000 fc7d 	bl	800dd3c <__multadd>
 800d442:	9b08      	ldr	r3, [sp, #32]
 800d444:	ee08 0a10 	vmov	s16, r0
 800d448:	2b00      	cmp	r3, #0
 800d44a:	f000 81b1 	beq.w	800d7b0 <_dtoa_r+0xbc0>
 800d44e:	2300      	movs	r3, #0
 800d450:	4639      	mov	r1, r7
 800d452:	220a      	movs	r2, #10
 800d454:	4620      	mov	r0, r4
 800d456:	f000 fc71 	bl	800dd3c <__multadd>
 800d45a:	9b02      	ldr	r3, [sp, #8]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	4607      	mov	r7, r0
 800d460:	f300 808e 	bgt.w	800d580 <_dtoa_r+0x990>
 800d464:	9b06      	ldr	r3, [sp, #24]
 800d466:	2b02      	cmp	r3, #2
 800d468:	dc51      	bgt.n	800d50e <_dtoa_r+0x91e>
 800d46a:	e089      	b.n	800d580 <_dtoa_r+0x990>
 800d46c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d46e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d472:	e74b      	b.n	800d30c <_dtoa_r+0x71c>
 800d474:	9b03      	ldr	r3, [sp, #12]
 800d476:	1e5e      	subs	r6, r3, #1
 800d478:	9b07      	ldr	r3, [sp, #28]
 800d47a:	42b3      	cmp	r3, r6
 800d47c:	bfbf      	itttt	lt
 800d47e:	9b07      	ldrlt	r3, [sp, #28]
 800d480:	9607      	strlt	r6, [sp, #28]
 800d482:	1af2      	sublt	r2, r6, r3
 800d484:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d486:	bfb6      	itet	lt
 800d488:	189b      	addlt	r3, r3, r2
 800d48a:	1b9e      	subge	r6, r3, r6
 800d48c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d48e:	9b03      	ldr	r3, [sp, #12]
 800d490:	bfb8      	it	lt
 800d492:	2600      	movlt	r6, #0
 800d494:	2b00      	cmp	r3, #0
 800d496:	bfb7      	itett	lt
 800d498:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d49c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d4a0:	1a9d      	sublt	r5, r3, r2
 800d4a2:	2300      	movlt	r3, #0
 800d4a4:	e734      	b.n	800d310 <_dtoa_r+0x720>
 800d4a6:	9e07      	ldr	r6, [sp, #28]
 800d4a8:	9d04      	ldr	r5, [sp, #16]
 800d4aa:	9f08      	ldr	r7, [sp, #32]
 800d4ac:	e73b      	b.n	800d326 <_dtoa_r+0x736>
 800d4ae:	9a07      	ldr	r2, [sp, #28]
 800d4b0:	e767      	b.n	800d382 <_dtoa_r+0x792>
 800d4b2:	9b06      	ldr	r3, [sp, #24]
 800d4b4:	2b01      	cmp	r3, #1
 800d4b6:	dc18      	bgt.n	800d4ea <_dtoa_r+0x8fa>
 800d4b8:	f1ba 0f00 	cmp.w	sl, #0
 800d4bc:	d115      	bne.n	800d4ea <_dtoa_r+0x8fa>
 800d4be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d4c2:	b993      	cbnz	r3, 800d4ea <_dtoa_r+0x8fa>
 800d4c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d4c8:	0d1b      	lsrs	r3, r3, #20
 800d4ca:	051b      	lsls	r3, r3, #20
 800d4cc:	b183      	cbz	r3, 800d4f0 <_dtoa_r+0x900>
 800d4ce:	9b04      	ldr	r3, [sp, #16]
 800d4d0:	3301      	adds	r3, #1
 800d4d2:	9304      	str	r3, [sp, #16]
 800d4d4:	9b05      	ldr	r3, [sp, #20]
 800d4d6:	3301      	adds	r3, #1
 800d4d8:	9305      	str	r3, [sp, #20]
 800d4da:	f04f 0801 	mov.w	r8, #1
 800d4de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	f47f af6a 	bne.w	800d3ba <_dtoa_r+0x7ca>
 800d4e6:	2001      	movs	r0, #1
 800d4e8:	e76f      	b.n	800d3ca <_dtoa_r+0x7da>
 800d4ea:	f04f 0800 	mov.w	r8, #0
 800d4ee:	e7f6      	b.n	800d4de <_dtoa_r+0x8ee>
 800d4f0:	4698      	mov	r8, r3
 800d4f2:	e7f4      	b.n	800d4de <_dtoa_r+0x8ee>
 800d4f4:	f43f af7d 	beq.w	800d3f2 <_dtoa_r+0x802>
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	301c      	adds	r0, #28
 800d4fc:	e772      	b.n	800d3e4 <_dtoa_r+0x7f4>
 800d4fe:	9b03      	ldr	r3, [sp, #12]
 800d500:	2b00      	cmp	r3, #0
 800d502:	dc37      	bgt.n	800d574 <_dtoa_r+0x984>
 800d504:	9b06      	ldr	r3, [sp, #24]
 800d506:	2b02      	cmp	r3, #2
 800d508:	dd34      	ble.n	800d574 <_dtoa_r+0x984>
 800d50a:	9b03      	ldr	r3, [sp, #12]
 800d50c:	9302      	str	r3, [sp, #8]
 800d50e:	9b02      	ldr	r3, [sp, #8]
 800d510:	b96b      	cbnz	r3, 800d52e <_dtoa_r+0x93e>
 800d512:	4631      	mov	r1, r6
 800d514:	2205      	movs	r2, #5
 800d516:	4620      	mov	r0, r4
 800d518:	f000 fc10 	bl	800dd3c <__multadd>
 800d51c:	4601      	mov	r1, r0
 800d51e:	4606      	mov	r6, r0
 800d520:	ee18 0a10 	vmov	r0, s16
 800d524:	f000 fe2a 	bl	800e17c <__mcmp>
 800d528:	2800      	cmp	r0, #0
 800d52a:	f73f adbb 	bgt.w	800d0a4 <_dtoa_r+0x4b4>
 800d52e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d530:	9d01      	ldr	r5, [sp, #4]
 800d532:	43db      	mvns	r3, r3
 800d534:	9300      	str	r3, [sp, #0]
 800d536:	f04f 0800 	mov.w	r8, #0
 800d53a:	4631      	mov	r1, r6
 800d53c:	4620      	mov	r0, r4
 800d53e:	f000 fbdb 	bl	800dcf8 <_Bfree>
 800d542:	2f00      	cmp	r7, #0
 800d544:	f43f aea4 	beq.w	800d290 <_dtoa_r+0x6a0>
 800d548:	f1b8 0f00 	cmp.w	r8, #0
 800d54c:	d005      	beq.n	800d55a <_dtoa_r+0x96a>
 800d54e:	45b8      	cmp	r8, r7
 800d550:	d003      	beq.n	800d55a <_dtoa_r+0x96a>
 800d552:	4641      	mov	r1, r8
 800d554:	4620      	mov	r0, r4
 800d556:	f000 fbcf 	bl	800dcf8 <_Bfree>
 800d55a:	4639      	mov	r1, r7
 800d55c:	4620      	mov	r0, r4
 800d55e:	f000 fbcb 	bl	800dcf8 <_Bfree>
 800d562:	e695      	b.n	800d290 <_dtoa_r+0x6a0>
 800d564:	2600      	movs	r6, #0
 800d566:	4637      	mov	r7, r6
 800d568:	e7e1      	b.n	800d52e <_dtoa_r+0x93e>
 800d56a:	9700      	str	r7, [sp, #0]
 800d56c:	4637      	mov	r7, r6
 800d56e:	e599      	b.n	800d0a4 <_dtoa_r+0x4b4>
 800d570:	40240000 	.word	0x40240000
 800d574:	9b08      	ldr	r3, [sp, #32]
 800d576:	2b00      	cmp	r3, #0
 800d578:	f000 80ca 	beq.w	800d710 <_dtoa_r+0xb20>
 800d57c:	9b03      	ldr	r3, [sp, #12]
 800d57e:	9302      	str	r3, [sp, #8]
 800d580:	2d00      	cmp	r5, #0
 800d582:	dd05      	ble.n	800d590 <_dtoa_r+0x9a0>
 800d584:	4639      	mov	r1, r7
 800d586:	462a      	mov	r2, r5
 800d588:	4620      	mov	r0, r4
 800d58a:	f000 fd87 	bl	800e09c <__lshift>
 800d58e:	4607      	mov	r7, r0
 800d590:	f1b8 0f00 	cmp.w	r8, #0
 800d594:	d05b      	beq.n	800d64e <_dtoa_r+0xa5e>
 800d596:	6879      	ldr	r1, [r7, #4]
 800d598:	4620      	mov	r0, r4
 800d59a:	f000 fb6d 	bl	800dc78 <_Balloc>
 800d59e:	4605      	mov	r5, r0
 800d5a0:	b928      	cbnz	r0, 800d5ae <_dtoa_r+0x9be>
 800d5a2:	4b87      	ldr	r3, [pc, #540]	; (800d7c0 <_dtoa_r+0xbd0>)
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d5aa:	f7ff bb3b 	b.w	800cc24 <_dtoa_r+0x34>
 800d5ae:	693a      	ldr	r2, [r7, #16]
 800d5b0:	3202      	adds	r2, #2
 800d5b2:	0092      	lsls	r2, r2, #2
 800d5b4:	f107 010c 	add.w	r1, r7, #12
 800d5b8:	300c      	adds	r0, #12
 800d5ba:	f7fe f9e7 	bl	800b98c <memcpy>
 800d5be:	2201      	movs	r2, #1
 800d5c0:	4629      	mov	r1, r5
 800d5c2:	4620      	mov	r0, r4
 800d5c4:	f000 fd6a 	bl	800e09c <__lshift>
 800d5c8:	9b01      	ldr	r3, [sp, #4]
 800d5ca:	f103 0901 	add.w	r9, r3, #1
 800d5ce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d5d2:	4413      	add	r3, r2
 800d5d4:	9305      	str	r3, [sp, #20]
 800d5d6:	f00a 0301 	and.w	r3, sl, #1
 800d5da:	46b8      	mov	r8, r7
 800d5dc:	9304      	str	r3, [sp, #16]
 800d5de:	4607      	mov	r7, r0
 800d5e0:	4631      	mov	r1, r6
 800d5e2:	ee18 0a10 	vmov	r0, s16
 800d5e6:	f7ff fa77 	bl	800cad8 <quorem>
 800d5ea:	4641      	mov	r1, r8
 800d5ec:	9002      	str	r0, [sp, #8]
 800d5ee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d5f2:	ee18 0a10 	vmov	r0, s16
 800d5f6:	f000 fdc1 	bl	800e17c <__mcmp>
 800d5fa:	463a      	mov	r2, r7
 800d5fc:	9003      	str	r0, [sp, #12]
 800d5fe:	4631      	mov	r1, r6
 800d600:	4620      	mov	r0, r4
 800d602:	f000 fdd7 	bl	800e1b4 <__mdiff>
 800d606:	68c2      	ldr	r2, [r0, #12]
 800d608:	f109 3bff 	add.w	fp, r9, #4294967295
 800d60c:	4605      	mov	r5, r0
 800d60e:	bb02      	cbnz	r2, 800d652 <_dtoa_r+0xa62>
 800d610:	4601      	mov	r1, r0
 800d612:	ee18 0a10 	vmov	r0, s16
 800d616:	f000 fdb1 	bl	800e17c <__mcmp>
 800d61a:	4602      	mov	r2, r0
 800d61c:	4629      	mov	r1, r5
 800d61e:	4620      	mov	r0, r4
 800d620:	9207      	str	r2, [sp, #28]
 800d622:	f000 fb69 	bl	800dcf8 <_Bfree>
 800d626:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d62a:	ea43 0102 	orr.w	r1, r3, r2
 800d62e:	9b04      	ldr	r3, [sp, #16]
 800d630:	430b      	orrs	r3, r1
 800d632:	464d      	mov	r5, r9
 800d634:	d10f      	bne.n	800d656 <_dtoa_r+0xa66>
 800d636:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d63a:	d02a      	beq.n	800d692 <_dtoa_r+0xaa2>
 800d63c:	9b03      	ldr	r3, [sp, #12]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	dd02      	ble.n	800d648 <_dtoa_r+0xa58>
 800d642:	9b02      	ldr	r3, [sp, #8]
 800d644:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d648:	f88b a000 	strb.w	sl, [fp]
 800d64c:	e775      	b.n	800d53a <_dtoa_r+0x94a>
 800d64e:	4638      	mov	r0, r7
 800d650:	e7ba      	b.n	800d5c8 <_dtoa_r+0x9d8>
 800d652:	2201      	movs	r2, #1
 800d654:	e7e2      	b.n	800d61c <_dtoa_r+0xa2c>
 800d656:	9b03      	ldr	r3, [sp, #12]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	db04      	blt.n	800d666 <_dtoa_r+0xa76>
 800d65c:	9906      	ldr	r1, [sp, #24]
 800d65e:	430b      	orrs	r3, r1
 800d660:	9904      	ldr	r1, [sp, #16]
 800d662:	430b      	orrs	r3, r1
 800d664:	d122      	bne.n	800d6ac <_dtoa_r+0xabc>
 800d666:	2a00      	cmp	r2, #0
 800d668:	ddee      	ble.n	800d648 <_dtoa_r+0xa58>
 800d66a:	ee18 1a10 	vmov	r1, s16
 800d66e:	2201      	movs	r2, #1
 800d670:	4620      	mov	r0, r4
 800d672:	f000 fd13 	bl	800e09c <__lshift>
 800d676:	4631      	mov	r1, r6
 800d678:	ee08 0a10 	vmov	s16, r0
 800d67c:	f000 fd7e 	bl	800e17c <__mcmp>
 800d680:	2800      	cmp	r0, #0
 800d682:	dc03      	bgt.n	800d68c <_dtoa_r+0xa9c>
 800d684:	d1e0      	bne.n	800d648 <_dtoa_r+0xa58>
 800d686:	f01a 0f01 	tst.w	sl, #1
 800d68a:	d0dd      	beq.n	800d648 <_dtoa_r+0xa58>
 800d68c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d690:	d1d7      	bne.n	800d642 <_dtoa_r+0xa52>
 800d692:	2339      	movs	r3, #57	; 0x39
 800d694:	f88b 3000 	strb.w	r3, [fp]
 800d698:	462b      	mov	r3, r5
 800d69a:	461d      	mov	r5, r3
 800d69c:	3b01      	subs	r3, #1
 800d69e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d6a2:	2a39      	cmp	r2, #57	; 0x39
 800d6a4:	d071      	beq.n	800d78a <_dtoa_r+0xb9a>
 800d6a6:	3201      	adds	r2, #1
 800d6a8:	701a      	strb	r2, [r3, #0]
 800d6aa:	e746      	b.n	800d53a <_dtoa_r+0x94a>
 800d6ac:	2a00      	cmp	r2, #0
 800d6ae:	dd07      	ble.n	800d6c0 <_dtoa_r+0xad0>
 800d6b0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d6b4:	d0ed      	beq.n	800d692 <_dtoa_r+0xaa2>
 800d6b6:	f10a 0301 	add.w	r3, sl, #1
 800d6ba:	f88b 3000 	strb.w	r3, [fp]
 800d6be:	e73c      	b.n	800d53a <_dtoa_r+0x94a>
 800d6c0:	9b05      	ldr	r3, [sp, #20]
 800d6c2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d6c6:	4599      	cmp	r9, r3
 800d6c8:	d047      	beq.n	800d75a <_dtoa_r+0xb6a>
 800d6ca:	ee18 1a10 	vmov	r1, s16
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	220a      	movs	r2, #10
 800d6d2:	4620      	mov	r0, r4
 800d6d4:	f000 fb32 	bl	800dd3c <__multadd>
 800d6d8:	45b8      	cmp	r8, r7
 800d6da:	ee08 0a10 	vmov	s16, r0
 800d6de:	f04f 0300 	mov.w	r3, #0
 800d6e2:	f04f 020a 	mov.w	r2, #10
 800d6e6:	4641      	mov	r1, r8
 800d6e8:	4620      	mov	r0, r4
 800d6ea:	d106      	bne.n	800d6fa <_dtoa_r+0xb0a>
 800d6ec:	f000 fb26 	bl	800dd3c <__multadd>
 800d6f0:	4680      	mov	r8, r0
 800d6f2:	4607      	mov	r7, r0
 800d6f4:	f109 0901 	add.w	r9, r9, #1
 800d6f8:	e772      	b.n	800d5e0 <_dtoa_r+0x9f0>
 800d6fa:	f000 fb1f 	bl	800dd3c <__multadd>
 800d6fe:	4639      	mov	r1, r7
 800d700:	4680      	mov	r8, r0
 800d702:	2300      	movs	r3, #0
 800d704:	220a      	movs	r2, #10
 800d706:	4620      	mov	r0, r4
 800d708:	f000 fb18 	bl	800dd3c <__multadd>
 800d70c:	4607      	mov	r7, r0
 800d70e:	e7f1      	b.n	800d6f4 <_dtoa_r+0xb04>
 800d710:	9b03      	ldr	r3, [sp, #12]
 800d712:	9302      	str	r3, [sp, #8]
 800d714:	9d01      	ldr	r5, [sp, #4]
 800d716:	ee18 0a10 	vmov	r0, s16
 800d71a:	4631      	mov	r1, r6
 800d71c:	f7ff f9dc 	bl	800cad8 <quorem>
 800d720:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d724:	9b01      	ldr	r3, [sp, #4]
 800d726:	f805 ab01 	strb.w	sl, [r5], #1
 800d72a:	1aea      	subs	r2, r5, r3
 800d72c:	9b02      	ldr	r3, [sp, #8]
 800d72e:	4293      	cmp	r3, r2
 800d730:	dd09      	ble.n	800d746 <_dtoa_r+0xb56>
 800d732:	ee18 1a10 	vmov	r1, s16
 800d736:	2300      	movs	r3, #0
 800d738:	220a      	movs	r2, #10
 800d73a:	4620      	mov	r0, r4
 800d73c:	f000 fafe 	bl	800dd3c <__multadd>
 800d740:	ee08 0a10 	vmov	s16, r0
 800d744:	e7e7      	b.n	800d716 <_dtoa_r+0xb26>
 800d746:	9b02      	ldr	r3, [sp, #8]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	bfc8      	it	gt
 800d74c:	461d      	movgt	r5, r3
 800d74e:	9b01      	ldr	r3, [sp, #4]
 800d750:	bfd8      	it	le
 800d752:	2501      	movle	r5, #1
 800d754:	441d      	add	r5, r3
 800d756:	f04f 0800 	mov.w	r8, #0
 800d75a:	ee18 1a10 	vmov	r1, s16
 800d75e:	2201      	movs	r2, #1
 800d760:	4620      	mov	r0, r4
 800d762:	f000 fc9b 	bl	800e09c <__lshift>
 800d766:	4631      	mov	r1, r6
 800d768:	ee08 0a10 	vmov	s16, r0
 800d76c:	f000 fd06 	bl	800e17c <__mcmp>
 800d770:	2800      	cmp	r0, #0
 800d772:	dc91      	bgt.n	800d698 <_dtoa_r+0xaa8>
 800d774:	d102      	bne.n	800d77c <_dtoa_r+0xb8c>
 800d776:	f01a 0f01 	tst.w	sl, #1
 800d77a:	d18d      	bne.n	800d698 <_dtoa_r+0xaa8>
 800d77c:	462b      	mov	r3, r5
 800d77e:	461d      	mov	r5, r3
 800d780:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d784:	2a30      	cmp	r2, #48	; 0x30
 800d786:	d0fa      	beq.n	800d77e <_dtoa_r+0xb8e>
 800d788:	e6d7      	b.n	800d53a <_dtoa_r+0x94a>
 800d78a:	9a01      	ldr	r2, [sp, #4]
 800d78c:	429a      	cmp	r2, r3
 800d78e:	d184      	bne.n	800d69a <_dtoa_r+0xaaa>
 800d790:	9b00      	ldr	r3, [sp, #0]
 800d792:	3301      	adds	r3, #1
 800d794:	9300      	str	r3, [sp, #0]
 800d796:	2331      	movs	r3, #49	; 0x31
 800d798:	7013      	strb	r3, [r2, #0]
 800d79a:	e6ce      	b.n	800d53a <_dtoa_r+0x94a>
 800d79c:	4b09      	ldr	r3, [pc, #36]	; (800d7c4 <_dtoa_r+0xbd4>)
 800d79e:	f7ff ba95 	b.w	800cccc <_dtoa_r+0xdc>
 800d7a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	f47f aa6e 	bne.w	800cc86 <_dtoa_r+0x96>
 800d7aa:	4b07      	ldr	r3, [pc, #28]	; (800d7c8 <_dtoa_r+0xbd8>)
 800d7ac:	f7ff ba8e 	b.w	800cccc <_dtoa_r+0xdc>
 800d7b0:	9b02      	ldr	r3, [sp, #8]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	dcae      	bgt.n	800d714 <_dtoa_r+0xb24>
 800d7b6:	9b06      	ldr	r3, [sp, #24]
 800d7b8:	2b02      	cmp	r3, #2
 800d7ba:	f73f aea8 	bgt.w	800d50e <_dtoa_r+0x91e>
 800d7be:	e7a9      	b.n	800d714 <_dtoa_r+0xb24>
 800d7c0:	0800f4e3 	.word	0x0800f4e3
 800d7c4:	0800f6c1 	.word	0x0800f6c1
 800d7c8:	0800f47b 	.word	0x0800f47b

0800d7cc <__sflush_r>:
 800d7cc:	898a      	ldrh	r2, [r1, #12]
 800d7ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7d2:	4605      	mov	r5, r0
 800d7d4:	0710      	lsls	r0, r2, #28
 800d7d6:	460c      	mov	r4, r1
 800d7d8:	d458      	bmi.n	800d88c <__sflush_r+0xc0>
 800d7da:	684b      	ldr	r3, [r1, #4]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	dc05      	bgt.n	800d7ec <__sflush_r+0x20>
 800d7e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	dc02      	bgt.n	800d7ec <__sflush_r+0x20>
 800d7e6:	2000      	movs	r0, #0
 800d7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d7ee:	2e00      	cmp	r6, #0
 800d7f0:	d0f9      	beq.n	800d7e6 <__sflush_r+0x1a>
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d7f8:	682f      	ldr	r7, [r5, #0]
 800d7fa:	602b      	str	r3, [r5, #0]
 800d7fc:	d032      	beq.n	800d864 <__sflush_r+0x98>
 800d7fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d800:	89a3      	ldrh	r3, [r4, #12]
 800d802:	075a      	lsls	r2, r3, #29
 800d804:	d505      	bpl.n	800d812 <__sflush_r+0x46>
 800d806:	6863      	ldr	r3, [r4, #4]
 800d808:	1ac0      	subs	r0, r0, r3
 800d80a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d80c:	b10b      	cbz	r3, 800d812 <__sflush_r+0x46>
 800d80e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d810:	1ac0      	subs	r0, r0, r3
 800d812:	2300      	movs	r3, #0
 800d814:	4602      	mov	r2, r0
 800d816:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d818:	6a21      	ldr	r1, [r4, #32]
 800d81a:	4628      	mov	r0, r5
 800d81c:	47b0      	blx	r6
 800d81e:	1c43      	adds	r3, r0, #1
 800d820:	89a3      	ldrh	r3, [r4, #12]
 800d822:	d106      	bne.n	800d832 <__sflush_r+0x66>
 800d824:	6829      	ldr	r1, [r5, #0]
 800d826:	291d      	cmp	r1, #29
 800d828:	d82c      	bhi.n	800d884 <__sflush_r+0xb8>
 800d82a:	4a2a      	ldr	r2, [pc, #168]	; (800d8d4 <__sflush_r+0x108>)
 800d82c:	40ca      	lsrs	r2, r1
 800d82e:	07d6      	lsls	r6, r2, #31
 800d830:	d528      	bpl.n	800d884 <__sflush_r+0xb8>
 800d832:	2200      	movs	r2, #0
 800d834:	6062      	str	r2, [r4, #4]
 800d836:	04d9      	lsls	r1, r3, #19
 800d838:	6922      	ldr	r2, [r4, #16]
 800d83a:	6022      	str	r2, [r4, #0]
 800d83c:	d504      	bpl.n	800d848 <__sflush_r+0x7c>
 800d83e:	1c42      	adds	r2, r0, #1
 800d840:	d101      	bne.n	800d846 <__sflush_r+0x7a>
 800d842:	682b      	ldr	r3, [r5, #0]
 800d844:	b903      	cbnz	r3, 800d848 <__sflush_r+0x7c>
 800d846:	6560      	str	r0, [r4, #84]	; 0x54
 800d848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d84a:	602f      	str	r7, [r5, #0]
 800d84c:	2900      	cmp	r1, #0
 800d84e:	d0ca      	beq.n	800d7e6 <__sflush_r+0x1a>
 800d850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d854:	4299      	cmp	r1, r3
 800d856:	d002      	beq.n	800d85e <__sflush_r+0x92>
 800d858:	4628      	mov	r0, r5
 800d85a:	f7fe f8ad 	bl	800b9b8 <_free_r>
 800d85e:	2000      	movs	r0, #0
 800d860:	6360      	str	r0, [r4, #52]	; 0x34
 800d862:	e7c1      	b.n	800d7e8 <__sflush_r+0x1c>
 800d864:	6a21      	ldr	r1, [r4, #32]
 800d866:	2301      	movs	r3, #1
 800d868:	4628      	mov	r0, r5
 800d86a:	47b0      	blx	r6
 800d86c:	1c41      	adds	r1, r0, #1
 800d86e:	d1c7      	bne.n	800d800 <__sflush_r+0x34>
 800d870:	682b      	ldr	r3, [r5, #0]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d0c4      	beq.n	800d800 <__sflush_r+0x34>
 800d876:	2b1d      	cmp	r3, #29
 800d878:	d001      	beq.n	800d87e <__sflush_r+0xb2>
 800d87a:	2b16      	cmp	r3, #22
 800d87c:	d101      	bne.n	800d882 <__sflush_r+0xb6>
 800d87e:	602f      	str	r7, [r5, #0]
 800d880:	e7b1      	b.n	800d7e6 <__sflush_r+0x1a>
 800d882:	89a3      	ldrh	r3, [r4, #12]
 800d884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d888:	81a3      	strh	r3, [r4, #12]
 800d88a:	e7ad      	b.n	800d7e8 <__sflush_r+0x1c>
 800d88c:	690f      	ldr	r7, [r1, #16]
 800d88e:	2f00      	cmp	r7, #0
 800d890:	d0a9      	beq.n	800d7e6 <__sflush_r+0x1a>
 800d892:	0793      	lsls	r3, r2, #30
 800d894:	680e      	ldr	r6, [r1, #0]
 800d896:	bf08      	it	eq
 800d898:	694b      	ldreq	r3, [r1, #20]
 800d89a:	600f      	str	r7, [r1, #0]
 800d89c:	bf18      	it	ne
 800d89e:	2300      	movne	r3, #0
 800d8a0:	eba6 0807 	sub.w	r8, r6, r7
 800d8a4:	608b      	str	r3, [r1, #8]
 800d8a6:	f1b8 0f00 	cmp.w	r8, #0
 800d8aa:	dd9c      	ble.n	800d7e6 <__sflush_r+0x1a>
 800d8ac:	6a21      	ldr	r1, [r4, #32]
 800d8ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d8b0:	4643      	mov	r3, r8
 800d8b2:	463a      	mov	r2, r7
 800d8b4:	4628      	mov	r0, r5
 800d8b6:	47b0      	blx	r6
 800d8b8:	2800      	cmp	r0, #0
 800d8ba:	dc06      	bgt.n	800d8ca <__sflush_r+0xfe>
 800d8bc:	89a3      	ldrh	r3, [r4, #12]
 800d8be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8c2:	81a3      	strh	r3, [r4, #12]
 800d8c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d8c8:	e78e      	b.n	800d7e8 <__sflush_r+0x1c>
 800d8ca:	4407      	add	r7, r0
 800d8cc:	eba8 0800 	sub.w	r8, r8, r0
 800d8d0:	e7e9      	b.n	800d8a6 <__sflush_r+0xda>
 800d8d2:	bf00      	nop
 800d8d4:	20400001 	.word	0x20400001

0800d8d8 <_fflush_r>:
 800d8d8:	b538      	push	{r3, r4, r5, lr}
 800d8da:	690b      	ldr	r3, [r1, #16]
 800d8dc:	4605      	mov	r5, r0
 800d8de:	460c      	mov	r4, r1
 800d8e0:	b913      	cbnz	r3, 800d8e8 <_fflush_r+0x10>
 800d8e2:	2500      	movs	r5, #0
 800d8e4:	4628      	mov	r0, r5
 800d8e6:	bd38      	pop	{r3, r4, r5, pc}
 800d8e8:	b118      	cbz	r0, 800d8f2 <_fflush_r+0x1a>
 800d8ea:	6983      	ldr	r3, [r0, #24]
 800d8ec:	b90b      	cbnz	r3, 800d8f2 <_fflush_r+0x1a>
 800d8ee:	f000 f887 	bl	800da00 <__sinit>
 800d8f2:	4b14      	ldr	r3, [pc, #80]	; (800d944 <_fflush_r+0x6c>)
 800d8f4:	429c      	cmp	r4, r3
 800d8f6:	d11b      	bne.n	800d930 <_fflush_r+0x58>
 800d8f8:	686c      	ldr	r4, [r5, #4]
 800d8fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d0ef      	beq.n	800d8e2 <_fflush_r+0xa>
 800d902:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d904:	07d0      	lsls	r0, r2, #31
 800d906:	d404      	bmi.n	800d912 <_fflush_r+0x3a>
 800d908:	0599      	lsls	r1, r3, #22
 800d90a:	d402      	bmi.n	800d912 <_fflush_r+0x3a>
 800d90c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d90e:	f000 f92c 	bl	800db6a <__retarget_lock_acquire_recursive>
 800d912:	4628      	mov	r0, r5
 800d914:	4621      	mov	r1, r4
 800d916:	f7ff ff59 	bl	800d7cc <__sflush_r>
 800d91a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d91c:	07da      	lsls	r2, r3, #31
 800d91e:	4605      	mov	r5, r0
 800d920:	d4e0      	bmi.n	800d8e4 <_fflush_r+0xc>
 800d922:	89a3      	ldrh	r3, [r4, #12]
 800d924:	059b      	lsls	r3, r3, #22
 800d926:	d4dd      	bmi.n	800d8e4 <_fflush_r+0xc>
 800d928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d92a:	f000 f91f 	bl	800db6c <__retarget_lock_release_recursive>
 800d92e:	e7d9      	b.n	800d8e4 <_fflush_r+0xc>
 800d930:	4b05      	ldr	r3, [pc, #20]	; (800d948 <_fflush_r+0x70>)
 800d932:	429c      	cmp	r4, r3
 800d934:	d101      	bne.n	800d93a <_fflush_r+0x62>
 800d936:	68ac      	ldr	r4, [r5, #8]
 800d938:	e7df      	b.n	800d8fa <_fflush_r+0x22>
 800d93a:	4b04      	ldr	r3, [pc, #16]	; (800d94c <_fflush_r+0x74>)
 800d93c:	429c      	cmp	r4, r3
 800d93e:	bf08      	it	eq
 800d940:	68ec      	ldreq	r4, [r5, #12]
 800d942:	e7da      	b.n	800d8fa <_fflush_r+0x22>
 800d944:	0800f514 	.word	0x0800f514
 800d948:	0800f534 	.word	0x0800f534
 800d94c:	0800f4f4 	.word	0x0800f4f4

0800d950 <std>:
 800d950:	2300      	movs	r3, #0
 800d952:	b510      	push	{r4, lr}
 800d954:	4604      	mov	r4, r0
 800d956:	e9c0 3300 	strd	r3, r3, [r0]
 800d95a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d95e:	6083      	str	r3, [r0, #8]
 800d960:	8181      	strh	r1, [r0, #12]
 800d962:	6643      	str	r3, [r0, #100]	; 0x64
 800d964:	81c2      	strh	r2, [r0, #14]
 800d966:	6183      	str	r3, [r0, #24]
 800d968:	4619      	mov	r1, r3
 800d96a:	2208      	movs	r2, #8
 800d96c:	305c      	adds	r0, #92	; 0x5c
 800d96e:	f7fe f81b 	bl	800b9a8 <memset>
 800d972:	4b05      	ldr	r3, [pc, #20]	; (800d988 <std+0x38>)
 800d974:	6263      	str	r3, [r4, #36]	; 0x24
 800d976:	4b05      	ldr	r3, [pc, #20]	; (800d98c <std+0x3c>)
 800d978:	62a3      	str	r3, [r4, #40]	; 0x28
 800d97a:	4b05      	ldr	r3, [pc, #20]	; (800d990 <std+0x40>)
 800d97c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d97e:	4b05      	ldr	r3, [pc, #20]	; (800d994 <std+0x44>)
 800d980:	6224      	str	r4, [r4, #32]
 800d982:	6323      	str	r3, [r4, #48]	; 0x30
 800d984:	bd10      	pop	{r4, pc}
 800d986:	bf00      	nop
 800d988:	0800c669 	.word	0x0800c669
 800d98c:	0800c68f 	.word	0x0800c68f
 800d990:	0800c6c7 	.word	0x0800c6c7
 800d994:	0800c6eb 	.word	0x0800c6eb

0800d998 <_cleanup_r>:
 800d998:	4901      	ldr	r1, [pc, #4]	; (800d9a0 <_cleanup_r+0x8>)
 800d99a:	f000 b8c1 	b.w	800db20 <_fwalk_reent>
 800d99e:	bf00      	nop
 800d9a0:	0800d8d9 	.word	0x0800d8d9

0800d9a4 <__sfmoreglue>:
 800d9a4:	b570      	push	{r4, r5, r6, lr}
 800d9a6:	2268      	movs	r2, #104	; 0x68
 800d9a8:	1e4d      	subs	r5, r1, #1
 800d9aa:	4355      	muls	r5, r2
 800d9ac:	460e      	mov	r6, r1
 800d9ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d9b2:	f7fe f86d 	bl	800ba90 <_malloc_r>
 800d9b6:	4604      	mov	r4, r0
 800d9b8:	b140      	cbz	r0, 800d9cc <__sfmoreglue+0x28>
 800d9ba:	2100      	movs	r1, #0
 800d9bc:	e9c0 1600 	strd	r1, r6, [r0]
 800d9c0:	300c      	adds	r0, #12
 800d9c2:	60a0      	str	r0, [r4, #8]
 800d9c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d9c8:	f7fd ffee 	bl	800b9a8 <memset>
 800d9cc:	4620      	mov	r0, r4
 800d9ce:	bd70      	pop	{r4, r5, r6, pc}

0800d9d0 <__sfp_lock_acquire>:
 800d9d0:	4801      	ldr	r0, [pc, #4]	; (800d9d8 <__sfp_lock_acquire+0x8>)
 800d9d2:	f000 b8ca 	b.w	800db6a <__retarget_lock_acquire_recursive>
 800d9d6:	bf00      	nop
 800d9d8:	20003621 	.word	0x20003621

0800d9dc <__sfp_lock_release>:
 800d9dc:	4801      	ldr	r0, [pc, #4]	; (800d9e4 <__sfp_lock_release+0x8>)
 800d9de:	f000 b8c5 	b.w	800db6c <__retarget_lock_release_recursive>
 800d9e2:	bf00      	nop
 800d9e4:	20003621 	.word	0x20003621

0800d9e8 <__sinit_lock_acquire>:
 800d9e8:	4801      	ldr	r0, [pc, #4]	; (800d9f0 <__sinit_lock_acquire+0x8>)
 800d9ea:	f000 b8be 	b.w	800db6a <__retarget_lock_acquire_recursive>
 800d9ee:	bf00      	nop
 800d9f0:	20003622 	.word	0x20003622

0800d9f4 <__sinit_lock_release>:
 800d9f4:	4801      	ldr	r0, [pc, #4]	; (800d9fc <__sinit_lock_release+0x8>)
 800d9f6:	f000 b8b9 	b.w	800db6c <__retarget_lock_release_recursive>
 800d9fa:	bf00      	nop
 800d9fc:	20003622 	.word	0x20003622

0800da00 <__sinit>:
 800da00:	b510      	push	{r4, lr}
 800da02:	4604      	mov	r4, r0
 800da04:	f7ff fff0 	bl	800d9e8 <__sinit_lock_acquire>
 800da08:	69a3      	ldr	r3, [r4, #24]
 800da0a:	b11b      	cbz	r3, 800da14 <__sinit+0x14>
 800da0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da10:	f7ff bff0 	b.w	800d9f4 <__sinit_lock_release>
 800da14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800da18:	6523      	str	r3, [r4, #80]	; 0x50
 800da1a:	4b13      	ldr	r3, [pc, #76]	; (800da68 <__sinit+0x68>)
 800da1c:	4a13      	ldr	r2, [pc, #76]	; (800da6c <__sinit+0x6c>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	62a2      	str	r2, [r4, #40]	; 0x28
 800da22:	42a3      	cmp	r3, r4
 800da24:	bf04      	itt	eq
 800da26:	2301      	moveq	r3, #1
 800da28:	61a3      	streq	r3, [r4, #24]
 800da2a:	4620      	mov	r0, r4
 800da2c:	f000 f820 	bl	800da70 <__sfp>
 800da30:	6060      	str	r0, [r4, #4]
 800da32:	4620      	mov	r0, r4
 800da34:	f000 f81c 	bl	800da70 <__sfp>
 800da38:	60a0      	str	r0, [r4, #8]
 800da3a:	4620      	mov	r0, r4
 800da3c:	f000 f818 	bl	800da70 <__sfp>
 800da40:	2200      	movs	r2, #0
 800da42:	60e0      	str	r0, [r4, #12]
 800da44:	2104      	movs	r1, #4
 800da46:	6860      	ldr	r0, [r4, #4]
 800da48:	f7ff ff82 	bl	800d950 <std>
 800da4c:	68a0      	ldr	r0, [r4, #8]
 800da4e:	2201      	movs	r2, #1
 800da50:	2109      	movs	r1, #9
 800da52:	f7ff ff7d 	bl	800d950 <std>
 800da56:	68e0      	ldr	r0, [r4, #12]
 800da58:	2202      	movs	r2, #2
 800da5a:	2112      	movs	r1, #18
 800da5c:	f7ff ff78 	bl	800d950 <std>
 800da60:	2301      	movs	r3, #1
 800da62:	61a3      	str	r3, [r4, #24]
 800da64:	e7d2      	b.n	800da0c <__sinit+0xc>
 800da66:	bf00      	nop
 800da68:	0800f294 	.word	0x0800f294
 800da6c:	0800d999 	.word	0x0800d999

0800da70 <__sfp>:
 800da70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da72:	4607      	mov	r7, r0
 800da74:	f7ff ffac 	bl	800d9d0 <__sfp_lock_acquire>
 800da78:	4b1e      	ldr	r3, [pc, #120]	; (800daf4 <__sfp+0x84>)
 800da7a:	681e      	ldr	r6, [r3, #0]
 800da7c:	69b3      	ldr	r3, [r6, #24]
 800da7e:	b913      	cbnz	r3, 800da86 <__sfp+0x16>
 800da80:	4630      	mov	r0, r6
 800da82:	f7ff ffbd 	bl	800da00 <__sinit>
 800da86:	3648      	adds	r6, #72	; 0x48
 800da88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800da8c:	3b01      	subs	r3, #1
 800da8e:	d503      	bpl.n	800da98 <__sfp+0x28>
 800da90:	6833      	ldr	r3, [r6, #0]
 800da92:	b30b      	cbz	r3, 800dad8 <__sfp+0x68>
 800da94:	6836      	ldr	r6, [r6, #0]
 800da96:	e7f7      	b.n	800da88 <__sfp+0x18>
 800da98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800da9c:	b9d5      	cbnz	r5, 800dad4 <__sfp+0x64>
 800da9e:	4b16      	ldr	r3, [pc, #88]	; (800daf8 <__sfp+0x88>)
 800daa0:	60e3      	str	r3, [r4, #12]
 800daa2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800daa6:	6665      	str	r5, [r4, #100]	; 0x64
 800daa8:	f000 f85e 	bl	800db68 <__retarget_lock_init_recursive>
 800daac:	f7ff ff96 	bl	800d9dc <__sfp_lock_release>
 800dab0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dab4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dab8:	6025      	str	r5, [r4, #0]
 800daba:	61a5      	str	r5, [r4, #24]
 800dabc:	2208      	movs	r2, #8
 800dabe:	4629      	mov	r1, r5
 800dac0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dac4:	f7fd ff70 	bl	800b9a8 <memset>
 800dac8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dacc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dad0:	4620      	mov	r0, r4
 800dad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dad4:	3468      	adds	r4, #104	; 0x68
 800dad6:	e7d9      	b.n	800da8c <__sfp+0x1c>
 800dad8:	2104      	movs	r1, #4
 800dada:	4638      	mov	r0, r7
 800dadc:	f7ff ff62 	bl	800d9a4 <__sfmoreglue>
 800dae0:	4604      	mov	r4, r0
 800dae2:	6030      	str	r0, [r6, #0]
 800dae4:	2800      	cmp	r0, #0
 800dae6:	d1d5      	bne.n	800da94 <__sfp+0x24>
 800dae8:	f7ff ff78 	bl	800d9dc <__sfp_lock_release>
 800daec:	230c      	movs	r3, #12
 800daee:	603b      	str	r3, [r7, #0]
 800daf0:	e7ee      	b.n	800dad0 <__sfp+0x60>
 800daf2:	bf00      	nop
 800daf4:	0800f294 	.word	0x0800f294
 800daf8:	ffff0001 	.word	0xffff0001

0800dafc <fiprintf>:
 800dafc:	b40e      	push	{r1, r2, r3}
 800dafe:	b503      	push	{r0, r1, lr}
 800db00:	4601      	mov	r1, r0
 800db02:	ab03      	add	r3, sp, #12
 800db04:	4805      	ldr	r0, [pc, #20]	; (800db1c <fiprintf+0x20>)
 800db06:	f853 2b04 	ldr.w	r2, [r3], #4
 800db0a:	6800      	ldr	r0, [r0, #0]
 800db0c:	9301      	str	r3, [sp, #4]
 800db0e:	f000 fe49 	bl	800e7a4 <_vfiprintf_r>
 800db12:	b002      	add	sp, #8
 800db14:	f85d eb04 	ldr.w	lr, [sp], #4
 800db18:	b003      	add	sp, #12
 800db1a:	4770      	bx	lr
 800db1c:	20000014 	.word	0x20000014

0800db20 <_fwalk_reent>:
 800db20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db24:	4606      	mov	r6, r0
 800db26:	4688      	mov	r8, r1
 800db28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800db2c:	2700      	movs	r7, #0
 800db2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800db32:	f1b9 0901 	subs.w	r9, r9, #1
 800db36:	d505      	bpl.n	800db44 <_fwalk_reent+0x24>
 800db38:	6824      	ldr	r4, [r4, #0]
 800db3a:	2c00      	cmp	r4, #0
 800db3c:	d1f7      	bne.n	800db2e <_fwalk_reent+0xe>
 800db3e:	4638      	mov	r0, r7
 800db40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db44:	89ab      	ldrh	r3, [r5, #12]
 800db46:	2b01      	cmp	r3, #1
 800db48:	d907      	bls.n	800db5a <_fwalk_reent+0x3a>
 800db4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800db4e:	3301      	adds	r3, #1
 800db50:	d003      	beq.n	800db5a <_fwalk_reent+0x3a>
 800db52:	4629      	mov	r1, r5
 800db54:	4630      	mov	r0, r6
 800db56:	47c0      	blx	r8
 800db58:	4307      	orrs	r7, r0
 800db5a:	3568      	adds	r5, #104	; 0x68
 800db5c:	e7e9      	b.n	800db32 <_fwalk_reent+0x12>
	...

0800db60 <_localeconv_r>:
 800db60:	4800      	ldr	r0, [pc, #0]	; (800db64 <_localeconv_r+0x4>)
 800db62:	4770      	bx	lr
 800db64:	20000168 	.word	0x20000168

0800db68 <__retarget_lock_init_recursive>:
 800db68:	4770      	bx	lr

0800db6a <__retarget_lock_acquire_recursive>:
 800db6a:	4770      	bx	lr

0800db6c <__retarget_lock_release_recursive>:
 800db6c:	4770      	bx	lr
	...

0800db70 <_lseek_r>:
 800db70:	b538      	push	{r3, r4, r5, lr}
 800db72:	4d07      	ldr	r5, [pc, #28]	; (800db90 <_lseek_r+0x20>)
 800db74:	4604      	mov	r4, r0
 800db76:	4608      	mov	r0, r1
 800db78:	4611      	mov	r1, r2
 800db7a:	2200      	movs	r2, #0
 800db7c:	602a      	str	r2, [r5, #0]
 800db7e:	461a      	mov	r2, r3
 800db80:	f7f5 f8fc 	bl	8002d7c <_lseek>
 800db84:	1c43      	adds	r3, r0, #1
 800db86:	d102      	bne.n	800db8e <_lseek_r+0x1e>
 800db88:	682b      	ldr	r3, [r5, #0]
 800db8a:	b103      	cbz	r3, 800db8e <_lseek_r+0x1e>
 800db8c:	6023      	str	r3, [r4, #0]
 800db8e:	bd38      	pop	{r3, r4, r5, pc}
 800db90:	20003624 	.word	0x20003624

0800db94 <__swhatbuf_r>:
 800db94:	b570      	push	{r4, r5, r6, lr}
 800db96:	460e      	mov	r6, r1
 800db98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db9c:	2900      	cmp	r1, #0
 800db9e:	b096      	sub	sp, #88	; 0x58
 800dba0:	4614      	mov	r4, r2
 800dba2:	461d      	mov	r5, r3
 800dba4:	da08      	bge.n	800dbb8 <__swhatbuf_r+0x24>
 800dba6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800dbaa:	2200      	movs	r2, #0
 800dbac:	602a      	str	r2, [r5, #0]
 800dbae:	061a      	lsls	r2, r3, #24
 800dbb0:	d410      	bmi.n	800dbd4 <__swhatbuf_r+0x40>
 800dbb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbb6:	e00e      	b.n	800dbd6 <__swhatbuf_r+0x42>
 800dbb8:	466a      	mov	r2, sp
 800dbba:	f001 f96d 	bl	800ee98 <_fstat_r>
 800dbbe:	2800      	cmp	r0, #0
 800dbc0:	dbf1      	blt.n	800dba6 <__swhatbuf_r+0x12>
 800dbc2:	9a01      	ldr	r2, [sp, #4]
 800dbc4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dbc8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dbcc:	425a      	negs	r2, r3
 800dbce:	415a      	adcs	r2, r3
 800dbd0:	602a      	str	r2, [r5, #0]
 800dbd2:	e7ee      	b.n	800dbb2 <__swhatbuf_r+0x1e>
 800dbd4:	2340      	movs	r3, #64	; 0x40
 800dbd6:	2000      	movs	r0, #0
 800dbd8:	6023      	str	r3, [r4, #0]
 800dbda:	b016      	add	sp, #88	; 0x58
 800dbdc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dbe0 <__smakebuf_r>:
 800dbe0:	898b      	ldrh	r3, [r1, #12]
 800dbe2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dbe4:	079d      	lsls	r5, r3, #30
 800dbe6:	4606      	mov	r6, r0
 800dbe8:	460c      	mov	r4, r1
 800dbea:	d507      	bpl.n	800dbfc <__smakebuf_r+0x1c>
 800dbec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dbf0:	6023      	str	r3, [r4, #0]
 800dbf2:	6123      	str	r3, [r4, #16]
 800dbf4:	2301      	movs	r3, #1
 800dbf6:	6163      	str	r3, [r4, #20]
 800dbf8:	b002      	add	sp, #8
 800dbfa:	bd70      	pop	{r4, r5, r6, pc}
 800dbfc:	ab01      	add	r3, sp, #4
 800dbfe:	466a      	mov	r2, sp
 800dc00:	f7ff ffc8 	bl	800db94 <__swhatbuf_r>
 800dc04:	9900      	ldr	r1, [sp, #0]
 800dc06:	4605      	mov	r5, r0
 800dc08:	4630      	mov	r0, r6
 800dc0a:	f7fd ff41 	bl	800ba90 <_malloc_r>
 800dc0e:	b948      	cbnz	r0, 800dc24 <__smakebuf_r+0x44>
 800dc10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc14:	059a      	lsls	r2, r3, #22
 800dc16:	d4ef      	bmi.n	800dbf8 <__smakebuf_r+0x18>
 800dc18:	f023 0303 	bic.w	r3, r3, #3
 800dc1c:	f043 0302 	orr.w	r3, r3, #2
 800dc20:	81a3      	strh	r3, [r4, #12]
 800dc22:	e7e3      	b.n	800dbec <__smakebuf_r+0xc>
 800dc24:	4b0d      	ldr	r3, [pc, #52]	; (800dc5c <__smakebuf_r+0x7c>)
 800dc26:	62b3      	str	r3, [r6, #40]	; 0x28
 800dc28:	89a3      	ldrh	r3, [r4, #12]
 800dc2a:	6020      	str	r0, [r4, #0]
 800dc2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc30:	81a3      	strh	r3, [r4, #12]
 800dc32:	9b00      	ldr	r3, [sp, #0]
 800dc34:	6163      	str	r3, [r4, #20]
 800dc36:	9b01      	ldr	r3, [sp, #4]
 800dc38:	6120      	str	r0, [r4, #16]
 800dc3a:	b15b      	cbz	r3, 800dc54 <__smakebuf_r+0x74>
 800dc3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc40:	4630      	mov	r0, r6
 800dc42:	f001 f93b 	bl	800eebc <_isatty_r>
 800dc46:	b128      	cbz	r0, 800dc54 <__smakebuf_r+0x74>
 800dc48:	89a3      	ldrh	r3, [r4, #12]
 800dc4a:	f023 0303 	bic.w	r3, r3, #3
 800dc4e:	f043 0301 	orr.w	r3, r3, #1
 800dc52:	81a3      	strh	r3, [r4, #12]
 800dc54:	89a0      	ldrh	r0, [r4, #12]
 800dc56:	4305      	orrs	r5, r0
 800dc58:	81a5      	strh	r5, [r4, #12]
 800dc5a:	e7cd      	b.n	800dbf8 <__smakebuf_r+0x18>
 800dc5c:	0800d999 	.word	0x0800d999

0800dc60 <__malloc_lock>:
 800dc60:	4801      	ldr	r0, [pc, #4]	; (800dc68 <__malloc_lock+0x8>)
 800dc62:	f7ff bf82 	b.w	800db6a <__retarget_lock_acquire_recursive>
 800dc66:	bf00      	nop
 800dc68:	20003620 	.word	0x20003620

0800dc6c <__malloc_unlock>:
 800dc6c:	4801      	ldr	r0, [pc, #4]	; (800dc74 <__malloc_unlock+0x8>)
 800dc6e:	f7ff bf7d 	b.w	800db6c <__retarget_lock_release_recursive>
 800dc72:	bf00      	nop
 800dc74:	20003620 	.word	0x20003620

0800dc78 <_Balloc>:
 800dc78:	b570      	push	{r4, r5, r6, lr}
 800dc7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dc7c:	4604      	mov	r4, r0
 800dc7e:	460d      	mov	r5, r1
 800dc80:	b976      	cbnz	r6, 800dca0 <_Balloc+0x28>
 800dc82:	2010      	movs	r0, #16
 800dc84:	f7fd fe72 	bl	800b96c <malloc>
 800dc88:	4602      	mov	r2, r0
 800dc8a:	6260      	str	r0, [r4, #36]	; 0x24
 800dc8c:	b920      	cbnz	r0, 800dc98 <_Balloc+0x20>
 800dc8e:	4b18      	ldr	r3, [pc, #96]	; (800dcf0 <_Balloc+0x78>)
 800dc90:	4818      	ldr	r0, [pc, #96]	; (800dcf4 <_Balloc+0x7c>)
 800dc92:	2166      	movs	r1, #102	; 0x66
 800dc94:	f7fe fef2 	bl	800ca7c <__assert_func>
 800dc98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dc9c:	6006      	str	r6, [r0, #0]
 800dc9e:	60c6      	str	r6, [r0, #12]
 800dca0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dca2:	68f3      	ldr	r3, [r6, #12]
 800dca4:	b183      	cbz	r3, 800dcc8 <_Balloc+0x50>
 800dca6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dca8:	68db      	ldr	r3, [r3, #12]
 800dcaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dcae:	b9b8      	cbnz	r0, 800dce0 <_Balloc+0x68>
 800dcb0:	2101      	movs	r1, #1
 800dcb2:	fa01 f605 	lsl.w	r6, r1, r5
 800dcb6:	1d72      	adds	r2, r6, #5
 800dcb8:	0092      	lsls	r2, r2, #2
 800dcba:	4620      	mov	r0, r4
 800dcbc:	f000 fb60 	bl	800e380 <_calloc_r>
 800dcc0:	b160      	cbz	r0, 800dcdc <_Balloc+0x64>
 800dcc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dcc6:	e00e      	b.n	800dce6 <_Balloc+0x6e>
 800dcc8:	2221      	movs	r2, #33	; 0x21
 800dcca:	2104      	movs	r1, #4
 800dccc:	4620      	mov	r0, r4
 800dcce:	f000 fb57 	bl	800e380 <_calloc_r>
 800dcd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dcd4:	60f0      	str	r0, [r6, #12]
 800dcd6:	68db      	ldr	r3, [r3, #12]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d1e4      	bne.n	800dca6 <_Balloc+0x2e>
 800dcdc:	2000      	movs	r0, #0
 800dcde:	bd70      	pop	{r4, r5, r6, pc}
 800dce0:	6802      	ldr	r2, [r0, #0]
 800dce2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dce6:	2300      	movs	r3, #0
 800dce8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dcec:	e7f7      	b.n	800dcde <_Balloc+0x66>
 800dcee:	bf00      	nop
 800dcf0:	0800f2ca 	.word	0x0800f2ca
 800dcf4:	0800f554 	.word	0x0800f554

0800dcf8 <_Bfree>:
 800dcf8:	b570      	push	{r4, r5, r6, lr}
 800dcfa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dcfc:	4605      	mov	r5, r0
 800dcfe:	460c      	mov	r4, r1
 800dd00:	b976      	cbnz	r6, 800dd20 <_Bfree+0x28>
 800dd02:	2010      	movs	r0, #16
 800dd04:	f7fd fe32 	bl	800b96c <malloc>
 800dd08:	4602      	mov	r2, r0
 800dd0a:	6268      	str	r0, [r5, #36]	; 0x24
 800dd0c:	b920      	cbnz	r0, 800dd18 <_Bfree+0x20>
 800dd0e:	4b09      	ldr	r3, [pc, #36]	; (800dd34 <_Bfree+0x3c>)
 800dd10:	4809      	ldr	r0, [pc, #36]	; (800dd38 <_Bfree+0x40>)
 800dd12:	218a      	movs	r1, #138	; 0x8a
 800dd14:	f7fe feb2 	bl	800ca7c <__assert_func>
 800dd18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dd1c:	6006      	str	r6, [r0, #0]
 800dd1e:	60c6      	str	r6, [r0, #12]
 800dd20:	b13c      	cbz	r4, 800dd32 <_Bfree+0x3a>
 800dd22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dd24:	6862      	ldr	r2, [r4, #4]
 800dd26:	68db      	ldr	r3, [r3, #12]
 800dd28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dd2c:	6021      	str	r1, [r4, #0]
 800dd2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dd32:	bd70      	pop	{r4, r5, r6, pc}
 800dd34:	0800f2ca 	.word	0x0800f2ca
 800dd38:	0800f554 	.word	0x0800f554

0800dd3c <__multadd>:
 800dd3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd40:	690d      	ldr	r5, [r1, #16]
 800dd42:	4607      	mov	r7, r0
 800dd44:	460c      	mov	r4, r1
 800dd46:	461e      	mov	r6, r3
 800dd48:	f101 0c14 	add.w	ip, r1, #20
 800dd4c:	2000      	movs	r0, #0
 800dd4e:	f8dc 3000 	ldr.w	r3, [ip]
 800dd52:	b299      	uxth	r1, r3
 800dd54:	fb02 6101 	mla	r1, r2, r1, r6
 800dd58:	0c1e      	lsrs	r6, r3, #16
 800dd5a:	0c0b      	lsrs	r3, r1, #16
 800dd5c:	fb02 3306 	mla	r3, r2, r6, r3
 800dd60:	b289      	uxth	r1, r1
 800dd62:	3001      	adds	r0, #1
 800dd64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dd68:	4285      	cmp	r5, r0
 800dd6a:	f84c 1b04 	str.w	r1, [ip], #4
 800dd6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dd72:	dcec      	bgt.n	800dd4e <__multadd+0x12>
 800dd74:	b30e      	cbz	r6, 800ddba <__multadd+0x7e>
 800dd76:	68a3      	ldr	r3, [r4, #8]
 800dd78:	42ab      	cmp	r3, r5
 800dd7a:	dc19      	bgt.n	800ddb0 <__multadd+0x74>
 800dd7c:	6861      	ldr	r1, [r4, #4]
 800dd7e:	4638      	mov	r0, r7
 800dd80:	3101      	adds	r1, #1
 800dd82:	f7ff ff79 	bl	800dc78 <_Balloc>
 800dd86:	4680      	mov	r8, r0
 800dd88:	b928      	cbnz	r0, 800dd96 <__multadd+0x5a>
 800dd8a:	4602      	mov	r2, r0
 800dd8c:	4b0c      	ldr	r3, [pc, #48]	; (800ddc0 <__multadd+0x84>)
 800dd8e:	480d      	ldr	r0, [pc, #52]	; (800ddc4 <__multadd+0x88>)
 800dd90:	21b5      	movs	r1, #181	; 0xb5
 800dd92:	f7fe fe73 	bl	800ca7c <__assert_func>
 800dd96:	6922      	ldr	r2, [r4, #16]
 800dd98:	3202      	adds	r2, #2
 800dd9a:	f104 010c 	add.w	r1, r4, #12
 800dd9e:	0092      	lsls	r2, r2, #2
 800dda0:	300c      	adds	r0, #12
 800dda2:	f7fd fdf3 	bl	800b98c <memcpy>
 800dda6:	4621      	mov	r1, r4
 800dda8:	4638      	mov	r0, r7
 800ddaa:	f7ff ffa5 	bl	800dcf8 <_Bfree>
 800ddae:	4644      	mov	r4, r8
 800ddb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ddb4:	3501      	adds	r5, #1
 800ddb6:	615e      	str	r6, [r3, #20]
 800ddb8:	6125      	str	r5, [r4, #16]
 800ddba:	4620      	mov	r0, r4
 800ddbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddc0:	0800f4e3 	.word	0x0800f4e3
 800ddc4:	0800f554 	.word	0x0800f554

0800ddc8 <__hi0bits>:
 800ddc8:	0c03      	lsrs	r3, r0, #16
 800ddca:	041b      	lsls	r3, r3, #16
 800ddcc:	b9d3      	cbnz	r3, 800de04 <__hi0bits+0x3c>
 800ddce:	0400      	lsls	r0, r0, #16
 800ddd0:	2310      	movs	r3, #16
 800ddd2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ddd6:	bf04      	itt	eq
 800ddd8:	0200      	lsleq	r0, r0, #8
 800ddda:	3308      	addeq	r3, #8
 800dddc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dde0:	bf04      	itt	eq
 800dde2:	0100      	lsleq	r0, r0, #4
 800dde4:	3304      	addeq	r3, #4
 800dde6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ddea:	bf04      	itt	eq
 800ddec:	0080      	lsleq	r0, r0, #2
 800ddee:	3302      	addeq	r3, #2
 800ddf0:	2800      	cmp	r0, #0
 800ddf2:	db05      	blt.n	800de00 <__hi0bits+0x38>
 800ddf4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ddf8:	f103 0301 	add.w	r3, r3, #1
 800ddfc:	bf08      	it	eq
 800ddfe:	2320      	moveq	r3, #32
 800de00:	4618      	mov	r0, r3
 800de02:	4770      	bx	lr
 800de04:	2300      	movs	r3, #0
 800de06:	e7e4      	b.n	800ddd2 <__hi0bits+0xa>

0800de08 <__lo0bits>:
 800de08:	6803      	ldr	r3, [r0, #0]
 800de0a:	f013 0207 	ands.w	r2, r3, #7
 800de0e:	4601      	mov	r1, r0
 800de10:	d00b      	beq.n	800de2a <__lo0bits+0x22>
 800de12:	07da      	lsls	r2, r3, #31
 800de14:	d423      	bmi.n	800de5e <__lo0bits+0x56>
 800de16:	0798      	lsls	r0, r3, #30
 800de18:	bf49      	itett	mi
 800de1a:	085b      	lsrmi	r3, r3, #1
 800de1c:	089b      	lsrpl	r3, r3, #2
 800de1e:	2001      	movmi	r0, #1
 800de20:	600b      	strmi	r3, [r1, #0]
 800de22:	bf5c      	itt	pl
 800de24:	600b      	strpl	r3, [r1, #0]
 800de26:	2002      	movpl	r0, #2
 800de28:	4770      	bx	lr
 800de2a:	b298      	uxth	r0, r3
 800de2c:	b9a8      	cbnz	r0, 800de5a <__lo0bits+0x52>
 800de2e:	0c1b      	lsrs	r3, r3, #16
 800de30:	2010      	movs	r0, #16
 800de32:	b2da      	uxtb	r2, r3
 800de34:	b90a      	cbnz	r2, 800de3a <__lo0bits+0x32>
 800de36:	3008      	adds	r0, #8
 800de38:	0a1b      	lsrs	r3, r3, #8
 800de3a:	071a      	lsls	r2, r3, #28
 800de3c:	bf04      	itt	eq
 800de3e:	091b      	lsreq	r3, r3, #4
 800de40:	3004      	addeq	r0, #4
 800de42:	079a      	lsls	r2, r3, #30
 800de44:	bf04      	itt	eq
 800de46:	089b      	lsreq	r3, r3, #2
 800de48:	3002      	addeq	r0, #2
 800de4a:	07da      	lsls	r2, r3, #31
 800de4c:	d403      	bmi.n	800de56 <__lo0bits+0x4e>
 800de4e:	085b      	lsrs	r3, r3, #1
 800de50:	f100 0001 	add.w	r0, r0, #1
 800de54:	d005      	beq.n	800de62 <__lo0bits+0x5a>
 800de56:	600b      	str	r3, [r1, #0]
 800de58:	4770      	bx	lr
 800de5a:	4610      	mov	r0, r2
 800de5c:	e7e9      	b.n	800de32 <__lo0bits+0x2a>
 800de5e:	2000      	movs	r0, #0
 800de60:	4770      	bx	lr
 800de62:	2020      	movs	r0, #32
 800de64:	4770      	bx	lr
	...

0800de68 <__i2b>:
 800de68:	b510      	push	{r4, lr}
 800de6a:	460c      	mov	r4, r1
 800de6c:	2101      	movs	r1, #1
 800de6e:	f7ff ff03 	bl	800dc78 <_Balloc>
 800de72:	4602      	mov	r2, r0
 800de74:	b928      	cbnz	r0, 800de82 <__i2b+0x1a>
 800de76:	4b05      	ldr	r3, [pc, #20]	; (800de8c <__i2b+0x24>)
 800de78:	4805      	ldr	r0, [pc, #20]	; (800de90 <__i2b+0x28>)
 800de7a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800de7e:	f7fe fdfd 	bl	800ca7c <__assert_func>
 800de82:	2301      	movs	r3, #1
 800de84:	6144      	str	r4, [r0, #20]
 800de86:	6103      	str	r3, [r0, #16]
 800de88:	bd10      	pop	{r4, pc}
 800de8a:	bf00      	nop
 800de8c:	0800f4e3 	.word	0x0800f4e3
 800de90:	0800f554 	.word	0x0800f554

0800de94 <__multiply>:
 800de94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de98:	4691      	mov	r9, r2
 800de9a:	690a      	ldr	r2, [r1, #16]
 800de9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dea0:	429a      	cmp	r2, r3
 800dea2:	bfb8      	it	lt
 800dea4:	460b      	movlt	r3, r1
 800dea6:	460c      	mov	r4, r1
 800dea8:	bfbc      	itt	lt
 800deaa:	464c      	movlt	r4, r9
 800deac:	4699      	movlt	r9, r3
 800deae:	6927      	ldr	r7, [r4, #16]
 800deb0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800deb4:	68a3      	ldr	r3, [r4, #8]
 800deb6:	6861      	ldr	r1, [r4, #4]
 800deb8:	eb07 060a 	add.w	r6, r7, sl
 800debc:	42b3      	cmp	r3, r6
 800debe:	b085      	sub	sp, #20
 800dec0:	bfb8      	it	lt
 800dec2:	3101      	addlt	r1, #1
 800dec4:	f7ff fed8 	bl	800dc78 <_Balloc>
 800dec8:	b930      	cbnz	r0, 800ded8 <__multiply+0x44>
 800deca:	4602      	mov	r2, r0
 800decc:	4b44      	ldr	r3, [pc, #272]	; (800dfe0 <__multiply+0x14c>)
 800dece:	4845      	ldr	r0, [pc, #276]	; (800dfe4 <__multiply+0x150>)
 800ded0:	f240 115d 	movw	r1, #349	; 0x15d
 800ded4:	f7fe fdd2 	bl	800ca7c <__assert_func>
 800ded8:	f100 0514 	add.w	r5, r0, #20
 800dedc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dee0:	462b      	mov	r3, r5
 800dee2:	2200      	movs	r2, #0
 800dee4:	4543      	cmp	r3, r8
 800dee6:	d321      	bcc.n	800df2c <__multiply+0x98>
 800dee8:	f104 0314 	add.w	r3, r4, #20
 800deec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800def0:	f109 0314 	add.w	r3, r9, #20
 800def4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800def8:	9202      	str	r2, [sp, #8]
 800defa:	1b3a      	subs	r2, r7, r4
 800defc:	3a15      	subs	r2, #21
 800defe:	f022 0203 	bic.w	r2, r2, #3
 800df02:	3204      	adds	r2, #4
 800df04:	f104 0115 	add.w	r1, r4, #21
 800df08:	428f      	cmp	r7, r1
 800df0a:	bf38      	it	cc
 800df0c:	2204      	movcc	r2, #4
 800df0e:	9201      	str	r2, [sp, #4]
 800df10:	9a02      	ldr	r2, [sp, #8]
 800df12:	9303      	str	r3, [sp, #12]
 800df14:	429a      	cmp	r2, r3
 800df16:	d80c      	bhi.n	800df32 <__multiply+0x9e>
 800df18:	2e00      	cmp	r6, #0
 800df1a:	dd03      	ble.n	800df24 <__multiply+0x90>
 800df1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800df20:	2b00      	cmp	r3, #0
 800df22:	d05a      	beq.n	800dfda <__multiply+0x146>
 800df24:	6106      	str	r6, [r0, #16]
 800df26:	b005      	add	sp, #20
 800df28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df2c:	f843 2b04 	str.w	r2, [r3], #4
 800df30:	e7d8      	b.n	800dee4 <__multiply+0x50>
 800df32:	f8b3 a000 	ldrh.w	sl, [r3]
 800df36:	f1ba 0f00 	cmp.w	sl, #0
 800df3a:	d024      	beq.n	800df86 <__multiply+0xf2>
 800df3c:	f104 0e14 	add.w	lr, r4, #20
 800df40:	46a9      	mov	r9, r5
 800df42:	f04f 0c00 	mov.w	ip, #0
 800df46:	f85e 2b04 	ldr.w	r2, [lr], #4
 800df4a:	f8d9 1000 	ldr.w	r1, [r9]
 800df4e:	fa1f fb82 	uxth.w	fp, r2
 800df52:	b289      	uxth	r1, r1
 800df54:	fb0a 110b 	mla	r1, sl, fp, r1
 800df58:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800df5c:	f8d9 2000 	ldr.w	r2, [r9]
 800df60:	4461      	add	r1, ip
 800df62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800df66:	fb0a c20b 	mla	r2, sl, fp, ip
 800df6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800df6e:	b289      	uxth	r1, r1
 800df70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800df74:	4577      	cmp	r7, lr
 800df76:	f849 1b04 	str.w	r1, [r9], #4
 800df7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800df7e:	d8e2      	bhi.n	800df46 <__multiply+0xb2>
 800df80:	9a01      	ldr	r2, [sp, #4]
 800df82:	f845 c002 	str.w	ip, [r5, r2]
 800df86:	9a03      	ldr	r2, [sp, #12]
 800df88:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800df8c:	3304      	adds	r3, #4
 800df8e:	f1b9 0f00 	cmp.w	r9, #0
 800df92:	d020      	beq.n	800dfd6 <__multiply+0x142>
 800df94:	6829      	ldr	r1, [r5, #0]
 800df96:	f104 0c14 	add.w	ip, r4, #20
 800df9a:	46ae      	mov	lr, r5
 800df9c:	f04f 0a00 	mov.w	sl, #0
 800dfa0:	f8bc b000 	ldrh.w	fp, [ip]
 800dfa4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dfa8:	fb09 220b 	mla	r2, r9, fp, r2
 800dfac:	4492      	add	sl, r2
 800dfae:	b289      	uxth	r1, r1
 800dfb0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800dfb4:	f84e 1b04 	str.w	r1, [lr], #4
 800dfb8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dfbc:	f8be 1000 	ldrh.w	r1, [lr]
 800dfc0:	0c12      	lsrs	r2, r2, #16
 800dfc2:	fb09 1102 	mla	r1, r9, r2, r1
 800dfc6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800dfca:	4567      	cmp	r7, ip
 800dfcc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dfd0:	d8e6      	bhi.n	800dfa0 <__multiply+0x10c>
 800dfd2:	9a01      	ldr	r2, [sp, #4]
 800dfd4:	50a9      	str	r1, [r5, r2]
 800dfd6:	3504      	adds	r5, #4
 800dfd8:	e79a      	b.n	800df10 <__multiply+0x7c>
 800dfda:	3e01      	subs	r6, #1
 800dfdc:	e79c      	b.n	800df18 <__multiply+0x84>
 800dfde:	bf00      	nop
 800dfe0:	0800f4e3 	.word	0x0800f4e3
 800dfe4:	0800f554 	.word	0x0800f554

0800dfe8 <__pow5mult>:
 800dfe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfec:	4615      	mov	r5, r2
 800dfee:	f012 0203 	ands.w	r2, r2, #3
 800dff2:	4606      	mov	r6, r0
 800dff4:	460f      	mov	r7, r1
 800dff6:	d007      	beq.n	800e008 <__pow5mult+0x20>
 800dff8:	4c25      	ldr	r4, [pc, #148]	; (800e090 <__pow5mult+0xa8>)
 800dffa:	3a01      	subs	r2, #1
 800dffc:	2300      	movs	r3, #0
 800dffe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e002:	f7ff fe9b 	bl	800dd3c <__multadd>
 800e006:	4607      	mov	r7, r0
 800e008:	10ad      	asrs	r5, r5, #2
 800e00a:	d03d      	beq.n	800e088 <__pow5mult+0xa0>
 800e00c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e00e:	b97c      	cbnz	r4, 800e030 <__pow5mult+0x48>
 800e010:	2010      	movs	r0, #16
 800e012:	f7fd fcab 	bl	800b96c <malloc>
 800e016:	4602      	mov	r2, r0
 800e018:	6270      	str	r0, [r6, #36]	; 0x24
 800e01a:	b928      	cbnz	r0, 800e028 <__pow5mult+0x40>
 800e01c:	4b1d      	ldr	r3, [pc, #116]	; (800e094 <__pow5mult+0xac>)
 800e01e:	481e      	ldr	r0, [pc, #120]	; (800e098 <__pow5mult+0xb0>)
 800e020:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e024:	f7fe fd2a 	bl	800ca7c <__assert_func>
 800e028:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e02c:	6004      	str	r4, [r0, #0]
 800e02e:	60c4      	str	r4, [r0, #12]
 800e030:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e034:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e038:	b94c      	cbnz	r4, 800e04e <__pow5mult+0x66>
 800e03a:	f240 2171 	movw	r1, #625	; 0x271
 800e03e:	4630      	mov	r0, r6
 800e040:	f7ff ff12 	bl	800de68 <__i2b>
 800e044:	2300      	movs	r3, #0
 800e046:	f8c8 0008 	str.w	r0, [r8, #8]
 800e04a:	4604      	mov	r4, r0
 800e04c:	6003      	str	r3, [r0, #0]
 800e04e:	f04f 0900 	mov.w	r9, #0
 800e052:	07eb      	lsls	r3, r5, #31
 800e054:	d50a      	bpl.n	800e06c <__pow5mult+0x84>
 800e056:	4639      	mov	r1, r7
 800e058:	4622      	mov	r2, r4
 800e05a:	4630      	mov	r0, r6
 800e05c:	f7ff ff1a 	bl	800de94 <__multiply>
 800e060:	4639      	mov	r1, r7
 800e062:	4680      	mov	r8, r0
 800e064:	4630      	mov	r0, r6
 800e066:	f7ff fe47 	bl	800dcf8 <_Bfree>
 800e06a:	4647      	mov	r7, r8
 800e06c:	106d      	asrs	r5, r5, #1
 800e06e:	d00b      	beq.n	800e088 <__pow5mult+0xa0>
 800e070:	6820      	ldr	r0, [r4, #0]
 800e072:	b938      	cbnz	r0, 800e084 <__pow5mult+0x9c>
 800e074:	4622      	mov	r2, r4
 800e076:	4621      	mov	r1, r4
 800e078:	4630      	mov	r0, r6
 800e07a:	f7ff ff0b 	bl	800de94 <__multiply>
 800e07e:	6020      	str	r0, [r4, #0]
 800e080:	f8c0 9000 	str.w	r9, [r0]
 800e084:	4604      	mov	r4, r0
 800e086:	e7e4      	b.n	800e052 <__pow5mult+0x6a>
 800e088:	4638      	mov	r0, r7
 800e08a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e08e:	bf00      	nop
 800e090:	0800f6a0 	.word	0x0800f6a0
 800e094:	0800f2ca 	.word	0x0800f2ca
 800e098:	0800f554 	.word	0x0800f554

0800e09c <__lshift>:
 800e09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0a0:	460c      	mov	r4, r1
 800e0a2:	6849      	ldr	r1, [r1, #4]
 800e0a4:	6923      	ldr	r3, [r4, #16]
 800e0a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e0aa:	68a3      	ldr	r3, [r4, #8]
 800e0ac:	4607      	mov	r7, r0
 800e0ae:	4691      	mov	r9, r2
 800e0b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e0b4:	f108 0601 	add.w	r6, r8, #1
 800e0b8:	42b3      	cmp	r3, r6
 800e0ba:	db0b      	blt.n	800e0d4 <__lshift+0x38>
 800e0bc:	4638      	mov	r0, r7
 800e0be:	f7ff fddb 	bl	800dc78 <_Balloc>
 800e0c2:	4605      	mov	r5, r0
 800e0c4:	b948      	cbnz	r0, 800e0da <__lshift+0x3e>
 800e0c6:	4602      	mov	r2, r0
 800e0c8:	4b2a      	ldr	r3, [pc, #168]	; (800e174 <__lshift+0xd8>)
 800e0ca:	482b      	ldr	r0, [pc, #172]	; (800e178 <__lshift+0xdc>)
 800e0cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e0d0:	f7fe fcd4 	bl	800ca7c <__assert_func>
 800e0d4:	3101      	adds	r1, #1
 800e0d6:	005b      	lsls	r3, r3, #1
 800e0d8:	e7ee      	b.n	800e0b8 <__lshift+0x1c>
 800e0da:	2300      	movs	r3, #0
 800e0dc:	f100 0114 	add.w	r1, r0, #20
 800e0e0:	f100 0210 	add.w	r2, r0, #16
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	4553      	cmp	r3, sl
 800e0e8:	db37      	blt.n	800e15a <__lshift+0xbe>
 800e0ea:	6920      	ldr	r0, [r4, #16]
 800e0ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e0f0:	f104 0314 	add.w	r3, r4, #20
 800e0f4:	f019 091f 	ands.w	r9, r9, #31
 800e0f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e0fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e100:	d02f      	beq.n	800e162 <__lshift+0xc6>
 800e102:	f1c9 0e20 	rsb	lr, r9, #32
 800e106:	468a      	mov	sl, r1
 800e108:	f04f 0c00 	mov.w	ip, #0
 800e10c:	681a      	ldr	r2, [r3, #0]
 800e10e:	fa02 f209 	lsl.w	r2, r2, r9
 800e112:	ea42 020c 	orr.w	r2, r2, ip
 800e116:	f84a 2b04 	str.w	r2, [sl], #4
 800e11a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e11e:	4298      	cmp	r0, r3
 800e120:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e124:	d8f2      	bhi.n	800e10c <__lshift+0x70>
 800e126:	1b03      	subs	r3, r0, r4
 800e128:	3b15      	subs	r3, #21
 800e12a:	f023 0303 	bic.w	r3, r3, #3
 800e12e:	3304      	adds	r3, #4
 800e130:	f104 0215 	add.w	r2, r4, #21
 800e134:	4290      	cmp	r0, r2
 800e136:	bf38      	it	cc
 800e138:	2304      	movcc	r3, #4
 800e13a:	f841 c003 	str.w	ip, [r1, r3]
 800e13e:	f1bc 0f00 	cmp.w	ip, #0
 800e142:	d001      	beq.n	800e148 <__lshift+0xac>
 800e144:	f108 0602 	add.w	r6, r8, #2
 800e148:	3e01      	subs	r6, #1
 800e14a:	4638      	mov	r0, r7
 800e14c:	612e      	str	r6, [r5, #16]
 800e14e:	4621      	mov	r1, r4
 800e150:	f7ff fdd2 	bl	800dcf8 <_Bfree>
 800e154:	4628      	mov	r0, r5
 800e156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e15a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e15e:	3301      	adds	r3, #1
 800e160:	e7c1      	b.n	800e0e6 <__lshift+0x4a>
 800e162:	3904      	subs	r1, #4
 800e164:	f853 2b04 	ldr.w	r2, [r3], #4
 800e168:	f841 2f04 	str.w	r2, [r1, #4]!
 800e16c:	4298      	cmp	r0, r3
 800e16e:	d8f9      	bhi.n	800e164 <__lshift+0xc8>
 800e170:	e7ea      	b.n	800e148 <__lshift+0xac>
 800e172:	bf00      	nop
 800e174:	0800f4e3 	.word	0x0800f4e3
 800e178:	0800f554 	.word	0x0800f554

0800e17c <__mcmp>:
 800e17c:	b530      	push	{r4, r5, lr}
 800e17e:	6902      	ldr	r2, [r0, #16]
 800e180:	690c      	ldr	r4, [r1, #16]
 800e182:	1b12      	subs	r2, r2, r4
 800e184:	d10e      	bne.n	800e1a4 <__mcmp+0x28>
 800e186:	f100 0314 	add.w	r3, r0, #20
 800e18a:	3114      	adds	r1, #20
 800e18c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e190:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e194:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e198:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e19c:	42a5      	cmp	r5, r4
 800e19e:	d003      	beq.n	800e1a8 <__mcmp+0x2c>
 800e1a0:	d305      	bcc.n	800e1ae <__mcmp+0x32>
 800e1a2:	2201      	movs	r2, #1
 800e1a4:	4610      	mov	r0, r2
 800e1a6:	bd30      	pop	{r4, r5, pc}
 800e1a8:	4283      	cmp	r3, r0
 800e1aa:	d3f3      	bcc.n	800e194 <__mcmp+0x18>
 800e1ac:	e7fa      	b.n	800e1a4 <__mcmp+0x28>
 800e1ae:	f04f 32ff 	mov.w	r2, #4294967295
 800e1b2:	e7f7      	b.n	800e1a4 <__mcmp+0x28>

0800e1b4 <__mdiff>:
 800e1b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1b8:	460c      	mov	r4, r1
 800e1ba:	4606      	mov	r6, r0
 800e1bc:	4611      	mov	r1, r2
 800e1be:	4620      	mov	r0, r4
 800e1c0:	4690      	mov	r8, r2
 800e1c2:	f7ff ffdb 	bl	800e17c <__mcmp>
 800e1c6:	1e05      	subs	r5, r0, #0
 800e1c8:	d110      	bne.n	800e1ec <__mdiff+0x38>
 800e1ca:	4629      	mov	r1, r5
 800e1cc:	4630      	mov	r0, r6
 800e1ce:	f7ff fd53 	bl	800dc78 <_Balloc>
 800e1d2:	b930      	cbnz	r0, 800e1e2 <__mdiff+0x2e>
 800e1d4:	4b3a      	ldr	r3, [pc, #232]	; (800e2c0 <__mdiff+0x10c>)
 800e1d6:	4602      	mov	r2, r0
 800e1d8:	f240 2132 	movw	r1, #562	; 0x232
 800e1dc:	4839      	ldr	r0, [pc, #228]	; (800e2c4 <__mdiff+0x110>)
 800e1de:	f7fe fc4d 	bl	800ca7c <__assert_func>
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e1e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ec:	bfa4      	itt	ge
 800e1ee:	4643      	movge	r3, r8
 800e1f0:	46a0      	movge	r8, r4
 800e1f2:	4630      	mov	r0, r6
 800e1f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e1f8:	bfa6      	itte	ge
 800e1fa:	461c      	movge	r4, r3
 800e1fc:	2500      	movge	r5, #0
 800e1fe:	2501      	movlt	r5, #1
 800e200:	f7ff fd3a 	bl	800dc78 <_Balloc>
 800e204:	b920      	cbnz	r0, 800e210 <__mdiff+0x5c>
 800e206:	4b2e      	ldr	r3, [pc, #184]	; (800e2c0 <__mdiff+0x10c>)
 800e208:	4602      	mov	r2, r0
 800e20a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e20e:	e7e5      	b.n	800e1dc <__mdiff+0x28>
 800e210:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e214:	6926      	ldr	r6, [r4, #16]
 800e216:	60c5      	str	r5, [r0, #12]
 800e218:	f104 0914 	add.w	r9, r4, #20
 800e21c:	f108 0514 	add.w	r5, r8, #20
 800e220:	f100 0e14 	add.w	lr, r0, #20
 800e224:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e228:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e22c:	f108 0210 	add.w	r2, r8, #16
 800e230:	46f2      	mov	sl, lr
 800e232:	2100      	movs	r1, #0
 800e234:	f859 3b04 	ldr.w	r3, [r9], #4
 800e238:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e23c:	fa1f f883 	uxth.w	r8, r3
 800e240:	fa11 f18b 	uxtah	r1, r1, fp
 800e244:	0c1b      	lsrs	r3, r3, #16
 800e246:	eba1 0808 	sub.w	r8, r1, r8
 800e24a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e24e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e252:	fa1f f888 	uxth.w	r8, r8
 800e256:	1419      	asrs	r1, r3, #16
 800e258:	454e      	cmp	r6, r9
 800e25a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e25e:	f84a 3b04 	str.w	r3, [sl], #4
 800e262:	d8e7      	bhi.n	800e234 <__mdiff+0x80>
 800e264:	1b33      	subs	r3, r6, r4
 800e266:	3b15      	subs	r3, #21
 800e268:	f023 0303 	bic.w	r3, r3, #3
 800e26c:	3304      	adds	r3, #4
 800e26e:	3415      	adds	r4, #21
 800e270:	42a6      	cmp	r6, r4
 800e272:	bf38      	it	cc
 800e274:	2304      	movcc	r3, #4
 800e276:	441d      	add	r5, r3
 800e278:	4473      	add	r3, lr
 800e27a:	469e      	mov	lr, r3
 800e27c:	462e      	mov	r6, r5
 800e27e:	4566      	cmp	r6, ip
 800e280:	d30e      	bcc.n	800e2a0 <__mdiff+0xec>
 800e282:	f10c 0203 	add.w	r2, ip, #3
 800e286:	1b52      	subs	r2, r2, r5
 800e288:	f022 0203 	bic.w	r2, r2, #3
 800e28c:	3d03      	subs	r5, #3
 800e28e:	45ac      	cmp	ip, r5
 800e290:	bf38      	it	cc
 800e292:	2200      	movcc	r2, #0
 800e294:	441a      	add	r2, r3
 800e296:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e29a:	b17b      	cbz	r3, 800e2bc <__mdiff+0x108>
 800e29c:	6107      	str	r7, [r0, #16]
 800e29e:	e7a3      	b.n	800e1e8 <__mdiff+0x34>
 800e2a0:	f856 8b04 	ldr.w	r8, [r6], #4
 800e2a4:	fa11 f288 	uxtah	r2, r1, r8
 800e2a8:	1414      	asrs	r4, r2, #16
 800e2aa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e2ae:	b292      	uxth	r2, r2
 800e2b0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e2b4:	f84e 2b04 	str.w	r2, [lr], #4
 800e2b8:	1421      	asrs	r1, r4, #16
 800e2ba:	e7e0      	b.n	800e27e <__mdiff+0xca>
 800e2bc:	3f01      	subs	r7, #1
 800e2be:	e7ea      	b.n	800e296 <__mdiff+0xe2>
 800e2c0:	0800f4e3 	.word	0x0800f4e3
 800e2c4:	0800f554 	.word	0x0800f554

0800e2c8 <__d2b>:
 800e2c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e2cc:	4689      	mov	r9, r1
 800e2ce:	2101      	movs	r1, #1
 800e2d0:	ec57 6b10 	vmov	r6, r7, d0
 800e2d4:	4690      	mov	r8, r2
 800e2d6:	f7ff fccf 	bl	800dc78 <_Balloc>
 800e2da:	4604      	mov	r4, r0
 800e2dc:	b930      	cbnz	r0, 800e2ec <__d2b+0x24>
 800e2de:	4602      	mov	r2, r0
 800e2e0:	4b25      	ldr	r3, [pc, #148]	; (800e378 <__d2b+0xb0>)
 800e2e2:	4826      	ldr	r0, [pc, #152]	; (800e37c <__d2b+0xb4>)
 800e2e4:	f240 310a 	movw	r1, #778	; 0x30a
 800e2e8:	f7fe fbc8 	bl	800ca7c <__assert_func>
 800e2ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e2f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e2f4:	bb35      	cbnz	r5, 800e344 <__d2b+0x7c>
 800e2f6:	2e00      	cmp	r6, #0
 800e2f8:	9301      	str	r3, [sp, #4]
 800e2fa:	d028      	beq.n	800e34e <__d2b+0x86>
 800e2fc:	4668      	mov	r0, sp
 800e2fe:	9600      	str	r6, [sp, #0]
 800e300:	f7ff fd82 	bl	800de08 <__lo0bits>
 800e304:	9900      	ldr	r1, [sp, #0]
 800e306:	b300      	cbz	r0, 800e34a <__d2b+0x82>
 800e308:	9a01      	ldr	r2, [sp, #4]
 800e30a:	f1c0 0320 	rsb	r3, r0, #32
 800e30e:	fa02 f303 	lsl.w	r3, r2, r3
 800e312:	430b      	orrs	r3, r1
 800e314:	40c2      	lsrs	r2, r0
 800e316:	6163      	str	r3, [r4, #20]
 800e318:	9201      	str	r2, [sp, #4]
 800e31a:	9b01      	ldr	r3, [sp, #4]
 800e31c:	61a3      	str	r3, [r4, #24]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	bf14      	ite	ne
 800e322:	2202      	movne	r2, #2
 800e324:	2201      	moveq	r2, #1
 800e326:	6122      	str	r2, [r4, #16]
 800e328:	b1d5      	cbz	r5, 800e360 <__d2b+0x98>
 800e32a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e32e:	4405      	add	r5, r0
 800e330:	f8c9 5000 	str.w	r5, [r9]
 800e334:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e338:	f8c8 0000 	str.w	r0, [r8]
 800e33c:	4620      	mov	r0, r4
 800e33e:	b003      	add	sp, #12
 800e340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e344:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e348:	e7d5      	b.n	800e2f6 <__d2b+0x2e>
 800e34a:	6161      	str	r1, [r4, #20]
 800e34c:	e7e5      	b.n	800e31a <__d2b+0x52>
 800e34e:	a801      	add	r0, sp, #4
 800e350:	f7ff fd5a 	bl	800de08 <__lo0bits>
 800e354:	9b01      	ldr	r3, [sp, #4]
 800e356:	6163      	str	r3, [r4, #20]
 800e358:	2201      	movs	r2, #1
 800e35a:	6122      	str	r2, [r4, #16]
 800e35c:	3020      	adds	r0, #32
 800e35e:	e7e3      	b.n	800e328 <__d2b+0x60>
 800e360:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e364:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e368:	f8c9 0000 	str.w	r0, [r9]
 800e36c:	6918      	ldr	r0, [r3, #16]
 800e36e:	f7ff fd2b 	bl	800ddc8 <__hi0bits>
 800e372:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e376:	e7df      	b.n	800e338 <__d2b+0x70>
 800e378:	0800f4e3 	.word	0x0800f4e3
 800e37c:	0800f554 	.word	0x0800f554

0800e380 <_calloc_r>:
 800e380:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e382:	fba1 2402 	umull	r2, r4, r1, r2
 800e386:	b94c      	cbnz	r4, 800e39c <_calloc_r+0x1c>
 800e388:	4611      	mov	r1, r2
 800e38a:	9201      	str	r2, [sp, #4]
 800e38c:	f7fd fb80 	bl	800ba90 <_malloc_r>
 800e390:	9a01      	ldr	r2, [sp, #4]
 800e392:	4605      	mov	r5, r0
 800e394:	b930      	cbnz	r0, 800e3a4 <_calloc_r+0x24>
 800e396:	4628      	mov	r0, r5
 800e398:	b003      	add	sp, #12
 800e39a:	bd30      	pop	{r4, r5, pc}
 800e39c:	220c      	movs	r2, #12
 800e39e:	6002      	str	r2, [r0, #0]
 800e3a0:	2500      	movs	r5, #0
 800e3a2:	e7f8      	b.n	800e396 <_calloc_r+0x16>
 800e3a4:	4621      	mov	r1, r4
 800e3a6:	f7fd faff 	bl	800b9a8 <memset>
 800e3aa:	e7f4      	b.n	800e396 <_calloc_r+0x16>

0800e3ac <_sungetc_r>:
 800e3ac:	b538      	push	{r3, r4, r5, lr}
 800e3ae:	1c4b      	adds	r3, r1, #1
 800e3b0:	4614      	mov	r4, r2
 800e3b2:	d103      	bne.n	800e3bc <_sungetc_r+0x10>
 800e3b4:	f04f 35ff 	mov.w	r5, #4294967295
 800e3b8:	4628      	mov	r0, r5
 800e3ba:	bd38      	pop	{r3, r4, r5, pc}
 800e3bc:	8993      	ldrh	r3, [r2, #12]
 800e3be:	f023 0320 	bic.w	r3, r3, #32
 800e3c2:	8193      	strh	r3, [r2, #12]
 800e3c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e3c6:	6852      	ldr	r2, [r2, #4]
 800e3c8:	b2cd      	uxtb	r5, r1
 800e3ca:	b18b      	cbz	r3, 800e3f0 <_sungetc_r+0x44>
 800e3cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e3ce:	4293      	cmp	r3, r2
 800e3d0:	dd08      	ble.n	800e3e4 <_sungetc_r+0x38>
 800e3d2:	6823      	ldr	r3, [r4, #0]
 800e3d4:	1e5a      	subs	r2, r3, #1
 800e3d6:	6022      	str	r2, [r4, #0]
 800e3d8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e3dc:	6863      	ldr	r3, [r4, #4]
 800e3de:	3301      	adds	r3, #1
 800e3e0:	6063      	str	r3, [r4, #4]
 800e3e2:	e7e9      	b.n	800e3b8 <_sungetc_r+0xc>
 800e3e4:	4621      	mov	r1, r4
 800e3e6:	f000 fd1d 	bl	800ee24 <__submore>
 800e3ea:	2800      	cmp	r0, #0
 800e3ec:	d0f1      	beq.n	800e3d2 <_sungetc_r+0x26>
 800e3ee:	e7e1      	b.n	800e3b4 <_sungetc_r+0x8>
 800e3f0:	6921      	ldr	r1, [r4, #16]
 800e3f2:	6823      	ldr	r3, [r4, #0]
 800e3f4:	b151      	cbz	r1, 800e40c <_sungetc_r+0x60>
 800e3f6:	4299      	cmp	r1, r3
 800e3f8:	d208      	bcs.n	800e40c <_sungetc_r+0x60>
 800e3fa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e3fe:	42a9      	cmp	r1, r5
 800e400:	d104      	bne.n	800e40c <_sungetc_r+0x60>
 800e402:	3b01      	subs	r3, #1
 800e404:	3201      	adds	r2, #1
 800e406:	6023      	str	r3, [r4, #0]
 800e408:	6062      	str	r2, [r4, #4]
 800e40a:	e7d5      	b.n	800e3b8 <_sungetc_r+0xc>
 800e40c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800e410:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e414:	6363      	str	r3, [r4, #52]	; 0x34
 800e416:	2303      	movs	r3, #3
 800e418:	63a3      	str	r3, [r4, #56]	; 0x38
 800e41a:	4623      	mov	r3, r4
 800e41c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e420:	6023      	str	r3, [r4, #0]
 800e422:	2301      	movs	r3, #1
 800e424:	e7dc      	b.n	800e3e0 <_sungetc_r+0x34>

0800e426 <__ssrefill_r>:
 800e426:	b510      	push	{r4, lr}
 800e428:	460c      	mov	r4, r1
 800e42a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e42c:	b169      	cbz	r1, 800e44a <__ssrefill_r+0x24>
 800e42e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e432:	4299      	cmp	r1, r3
 800e434:	d001      	beq.n	800e43a <__ssrefill_r+0x14>
 800e436:	f7fd fabf 	bl	800b9b8 <_free_r>
 800e43a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e43c:	6063      	str	r3, [r4, #4]
 800e43e:	2000      	movs	r0, #0
 800e440:	6360      	str	r0, [r4, #52]	; 0x34
 800e442:	b113      	cbz	r3, 800e44a <__ssrefill_r+0x24>
 800e444:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e446:	6023      	str	r3, [r4, #0]
 800e448:	bd10      	pop	{r4, pc}
 800e44a:	6923      	ldr	r3, [r4, #16]
 800e44c:	6023      	str	r3, [r4, #0]
 800e44e:	2300      	movs	r3, #0
 800e450:	6063      	str	r3, [r4, #4]
 800e452:	89a3      	ldrh	r3, [r4, #12]
 800e454:	f043 0320 	orr.w	r3, r3, #32
 800e458:	81a3      	strh	r3, [r4, #12]
 800e45a:	f04f 30ff 	mov.w	r0, #4294967295
 800e45e:	e7f3      	b.n	800e448 <__ssrefill_r+0x22>

0800e460 <__ssvfiscanf_r>:
 800e460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e464:	460c      	mov	r4, r1
 800e466:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800e46a:	2100      	movs	r1, #0
 800e46c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800e470:	49a6      	ldr	r1, [pc, #664]	; (800e70c <__ssvfiscanf_r+0x2ac>)
 800e472:	91a0      	str	r1, [sp, #640]	; 0x280
 800e474:	f10d 0804 	add.w	r8, sp, #4
 800e478:	49a5      	ldr	r1, [pc, #660]	; (800e710 <__ssvfiscanf_r+0x2b0>)
 800e47a:	4fa6      	ldr	r7, [pc, #664]	; (800e714 <__ssvfiscanf_r+0x2b4>)
 800e47c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800e718 <__ssvfiscanf_r+0x2b8>
 800e480:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800e484:	4606      	mov	r6, r0
 800e486:	91a1      	str	r1, [sp, #644]	; 0x284
 800e488:	9300      	str	r3, [sp, #0]
 800e48a:	7813      	ldrb	r3, [r2, #0]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	f000 815a 	beq.w	800e746 <__ssvfiscanf_r+0x2e6>
 800e492:	5dd9      	ldrb	r1, [r3, r7]
 800e494:	f011 0108 	ands.w	r1, r1, #8
 800e498:	f102 0501 	add.w	r5, r2, #1
 800e49c:	d019      	beq.n	800e4d2 <__ssvfiscanf_r+0x72>
 800e49e:	6863      	ldr	r3, [r4, #4]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	dd0f      	ble.n	800e4c4 <__ssvfiscanf_r+0x64>
 800e4a4:	6823      	ldr	r3, [r4, #0]
 800e4a6:	781a      	ldrb	r2, [r3, #0]
 800e4a8:	5cba      	ldrb	r2, [r7, r2]
 800e4aa:	0712      	lsls	r2, r2, #28
 800e4ac:	d401      	bmi.n	800e4b2 <__ssvfiscanf_r+0x52>
 800e4ae:	462a      	mov	r2, r5
 800e4b0:	e7eb      	b.n	800e48a <__ssvfiscanf_r+0x2a>
 800e4b2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e4b4:	3201      	adds	r2, #1
 800e4b6:	9245      	str	r2, [sp, #276]	; 0x114
 800e4b8:	6862      	ldr	r2, [r4, #4]
 800e4ba:	3301      	adds	r3, #1
 800e4bc:	3a01      	subs	r2, #1
 800e4be:	6062      	str	r2, [r4, #4]
 800e4c0:	6023      	str	r3, [r4, #0]
 800e4c2:	e7ec      	b.n	800e49e <__ssvfiscanf_r+0x3e>
 800e4c4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e4c6:	4621      	mov	r1, r4
 800e4c8:	4630      	mov	r0, r6
 800e4ca:	4798      	blx	r3
 800e4cc:	2800      	cmp	r0, #0
 800e4ce:	d0e9      	beq.n	800e4a4 <__ssvfiscanf_r+0x44>
 800e4d0:	e7ed      	b.n	800e4ae <__ssvfiscanf_r+0x4e>
 800e4d2:	2b25      	cmp	r3, #37	; 0x25
 800e4d4:	d012      	beq.n	800e4fc <__ssvfiscanf_r+0x9c>
 800e4d6:	469a      	mov	sl, r3
 800e4d8:	6863      	ldr	r3, [r4, #4]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	f340 8091 	ble.w	800e602 <__ssvfiscanf_r+0x1a2>
 800e4e0:	6822      	ldr	r2, [r4, #0]
 800e4e2:	7813      	ldrb	r3, [r2, #0]
 800e4e4:	4553      	cmp	r3, sl
 800e4e6:	f040 812e 	bne.w	800e746 <__ssvfiscanf_r+0x2e6>
 800e4ea:	6863      	ldr	r3, [r4, #4]
 800e4ec:	3b01      	subs	r3, #1
 800e4ee:	6063      	str	r3, [r4, #4]
 800e4f0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e4f2:	3201      	adds	r2, #1
 800e4f4:	3301      	adds	r3, #1
 800e4f6:	6022      	str	r2, [r4, #0]
 800e4f8:	9345      	str	r3, [sp, #276]	; 0x114
 800e4fa:	e7d8      	b.n	800e4ae <__ssvfiscanf_r+0x4e>
 800e4fc:	9141      	str	r1, [sp, #260]	; 0x104
 800e4fe:	9143      	str	r1, [sp, #268]	; 0x10c
 800e500:	7853      	ldrb	r3, [r2, #1]
 800e502:	2b2a      	cmp	r3, #42	; 0x2a
 800e504:	bf02      	ittt	eq
 800e506:	2310      	moveq	r3, #16
 800e508:	1c95      	addeq	r5, r2, #2
 800e50a:	9341      	streq	r3, [sp, #260]	; 0x104
 800e50c:	220a      	movs	r2, #10
 800e50e:	46aa      	mov	sl, r5
 800e510:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800e514:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800e518:	2b09      	cmp	r3, #9
 800e51a:	d91d      	bls.n	800e558 <__ssvfiscanf_r+0xf8>
 800e51c:	487e      	ldr	r0, [pc, #504]	; (800e718 <__ssvfiscanf_r+0x2b8>)
 800e51e:	2203      	movs	r2, #3
 800e520:	f7f1 fe6e 	bl	8000200 <memchr>
 800e524:	b140      	cbz	r0, 800e538 <__ssvfiscanf_r+0xd8>
 800e526:	2301      	movs	r3, #1
 800e528:	eba0 0009 	sub.w	r0, r0, r9
 800e52c:	fa03 f000 	lsl.w	r0, r3, r0
 800e530:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e532:	4318      	orrs	r0, r3
 800e534:	9041      	str	r0, [sp, #260]	; 0x104
 800e536:	4655      	mov	r5, sl
 800e538:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e53c:	2b78      	cmp	r3, #120	; 0x78
 800e53e:	d806      	bhi.n	800e54e <__ssvfiscanf_r+0xee>
 800e540:	2b57      	cmp	r3, #87	; 0x57
 800e542:	d810      	bhi.n	800e566 <__ssvfiscanf_r+0x106>
 800e544:	2b25      	cmp	r3, #37	; 0x25
 800e546:	d0c6      	beq.n	800e4d6 <__ssvfiscanf_r+0x76>
 800e548:	d856      	bhi.n	800e5f8 <__ssvfiscanf_r+0x198>
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d064      	beq.n	800e618 <__ssvfiscanf_r+0x1b8>
 800e54e:	2303      	movs	r3, #3
 800e550:	9347      	str	r3, [sp, #284]	; 0x11c
 800e552:	230a      	movs	r3, #10
 800e554:	9342      	str	r3, [sp, #264]	; 0x108
 800e556:	e071      	b.n	800e63c <__ssvfiscanf_r+0x1dc>
 800e558:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e55a:	fb02 1103 	mla	r1, r2, r3, r1
 800e55e:	3930      	subs	r1, #48	; 0x30
 800e560:	9143      	str	r1, [sp, #268]	; 0x10c
 800e562:	4655      	mov	r5, sl
 800e564:	e7d3      	b.n	800e50e <__ssvfiscanf_r+0xae>
 800e566:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800e56a:	2a20      	cmp	r2, #32
 800e56c:	d8ef      	bhi.n	800e54e <__ssvfiscanf_r+0xee>
 800e56e:	a101      	add	r1, pc, #4	; (adr r1, 800e574 <__ssvfiscanf_r+0x114>)
 800e570:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e574:	0800e627 	.word	0x0800e627
 800e578:	0800e54f 	.word	0x0800e54f
 800e57c:	0800e54f 	.word	0x0800e54f
 800e580:	0800e685 	.word	0x0800e685
 800e584:	0800e54f 	.word	0x0800e54f
 800e588:	0800e54f 	.word	0x0800e54f
 800e58c:	0800e54f 	.word	0x0800e54f
 800e590:	0800e54f 	.word	0x0800e54f
 800e594:	0800e54f 	.word	0x0800e54f
 800e598:	0800e54f 	.word	0x0800e54f
 800e59c:	0800e54f 	.word	0x0800e54f
 800e5a0:	0800e69b 	.word	0x0800e69b
 800e5a4:	0800e671 	.word	0x0800e671
 800e5a8:	0800e5ff 	.word	0x0800e5ff
 800e5ac:	0800e5ff 	.word	0x0800e5ff
 800e5b0:	0800e5ff 	.word	0x0800e5ff
 800e5b4:	0800e54f 	.word	0x0800e54f
 800e5b8:	0800e675 	.word	0x0800e675
 800e5bc:	0800e54f 	.word	0x0800e54f
 800e5c0:	0800e54f 	.word	0x0800e54f
 800e5c4:	0800e54f 	.word	0x0800e54f
 800e5c8:	0800e54f 	.word	0x0800e54f
 800e5cc:	0800e6ab 	.word	0x0800e6ab
 800e5d0:	0800e67d 	.word	0x0800e67d
 800e5d4:	0800e61f 	.word	0x0800e61f
 800e5d8:	0800e54f 	.word	0x0800e54f
 800e5dc:	0800e54f 	.word	0x0800e54f
 800e5e0:	0800e6a7 	.word	0x0800e6a7
 800e5e4:	0800e54f 	.word	0x0800e54f
 800e5e8:	0800e671 	.word	0x0800e671
 800e5ec:	0800e54f 	.word	0x0800e54f
 800e5f0:	0800e54f 	.word	0x0800e54f
 800e5f4:	0800e627 	.word	0x0800e627
 800e5f8:	3b45      	subs	r3, #69	; 0x45
 800e5fa:	2b02      	cmp	r3, #2
 800e5fc:	d8a7      	bhi.n	800e54e <__ssvfiscanf_r+0xee>
 800e5fe:	2305      	movs	r3, #5
 800e600:	e01b      	b.n	800e63a <__ssvfiscanf_r+0x1da>
 800e602:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e604:	4621      	mov	r1, r4
 800e606:	4630      	mov	r0, r6
 800e608:	4798      	blx	r3
 800e60a:	2800      	cmp	r0, #0
 800e60c:	f43f af68 	beq.w	800e4e0 <__ssvfiscanf_r+0x80>
 800e610:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e612:	2800      	cmp	r0, #0
 800e614:	f040 808d 	bne.w	800e732 <__ssvfiscanf_r+0x2d2>
 800e618:	f04f 30ff 	mov.w	r0, #4294967295
 800e61c:	e08f      	b.n	800e73e <__ssvfiscanf_r+0x2de>
 800e61e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e620:	f042 0220 	orr.w	r2, r2, #32
 800e624:	9241      	str	r2, [sp, #260]	; 0x104
 800e626:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e62c:	9241      	str	r2, [sp, #260]	; 0x104
 800e62e:	2210      	movs	r2, #16
 800e630:	2b6f      	cmp	r3, #111	; 0x6f
 800e632:	9242      	str	r2, [sp, #264]	; 0x108
 800e634:	bf34      	ite	cc
 800e636:	2303      	movcc	r3, #3
 800e638:	2304      	movcs	r3, #4
 800e63a:	9347      	str	r3, [sp, #284]	; 0x11c
 800e63c:	6863      	ldr	r3, [r4, #4]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	dd42      	ble.n	800e6c8 <__ssvfiscanf_r+0x268>
 800e642:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e644:	0659      	lsls	r1, r3, #25
 800e646:	d404      	bmi.n	800e652 <__ssvfiscanf_r+0x1f2>
 800e648:	6823      	ldr	r3, [r4, #0]
 800e64a:	781a      	ldrb	r2, [r3, #0]
 800e64c:	5cba      	ldrb	r2, [r7, r2]
 800e64e:	0712      	lsls	r2, r2, #28
 800e650:	d441      	bmi.n	800e6d6 <__ssvfiscanf_r+0x276>
 800e652:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e654:	2b02      	cmp	r3, #2
 800e656:	dc50      	bgt.n	800e6fa <__ssvfiscanf_r+0x29a>
 800e658:	466b      	mov	r3, sp
 800e65a:	4622      	mov	r2, r4
 800e65c:	a941      	add	r1, sp, #260	; 0x104
 800e65e:	4630      	mov	r0, r6
 800e660:	f000 f9d0 	bl	800ea04 <_scanf_chars>
 800e664:	2801      	cmp	r0, #1
 800e666:	d06e      	beq.n	800e746 <__ssvfiscanf_r+0x2e6>
 800e668:	2802      	cmp	r0, #2
 800e66a:	f47f af20 	bne.w	800e4ae <__ssvfiscanf_r+0x4e>
 800e66e:	e7cf      	b.n	800e610 <__ssvfiscanf_r+0x1b0>
 800e670:	220a      	movs	r2, #10
 800e672:	e7dd      	b.n	800e630 <__ssvfiscanf_r+0x1d0>
 800e674:	2300      	movs	r3, #0
 800e676:	9342      	str	r3, [sp, #264]	; 0x108
 800e678:	2303      	movs	r3, #3
 800e67a:	e7de      	b.n	800e63a <__ssvfiscanf_r+0x1da>
 800e67c:	2308      	movs	r3, #8
 800e67e:	9342      	str	r3, [sp, #264]	; 0x108
 800e680:	2304      	movs	r3, #4
 800e682:	e7da      	b.n	800e63a <__ssvfiscanf_r+0x1da>
 800e684:	4629      	mov	r1, r5
 800e686:	4640      	mov	r0, r8
 800e688:	f000 fb20 	bl	800eccc <__sccl>
 800e68c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e68e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e692:	9341      	str	r3, [sp, #260]	; 0x104
 800e694:	4605      	mov	r5, r0
 800e696:	2301      	movs	r3, #1
 800e698:	e7cf      	b.n	800e63a <__ssvfiscanf_r+0x1da>
 800e69a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e69c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6a0:	9341      	str	r3, [sp, #260]	; 0x104
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	e7c9      	b.n	800e63a <__ssvfiscanf_r+0x1da>
 800e6a6:	2302      	movs	r3, #2
 800e6a8:	e7c7      	b.n	800e63a <__ssvfiscanf_r+0x1da>
 800e6aa:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e6ac:	06c3      	lsls	r3, r0, #27
 800e6ae:	f53f aefe 	bmi.w	800e4ae <__ssvfiscanf_r+0x4e>
 800e6b2:	9b00      	ldr	r3, [sp, #0]
 800e6b4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e6b6:	1d19      	adds	r1, r3, #4
 800e6b8:	9100      	str	r1, [sp, #0]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	f010 0f01 	tst.w	r0, #1
 800e6c0:	bf14      	ite	ne
 800e6c2:	801a      	strhne	r2, [r3, #0]
 800e6c4:	601a      	streq	r2, [r3, #0]
 800e6c6:	e6f2      	b.n	800e4ae <__ssvfiscanf_r+0x4e>
 800e6c8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e6ca:	4621      	mov	r1, r4
 800e6cc:	4630      	mov	r0, r6
 800e6ce:	4798      	blx	r3
 800e6d0:	2800      	cmp	r0, #0
 800e6d2:	d0b6      	beq.n	800e642 <__ssvfiscanf_r+0x1e2>
 800e6d4:	e79c      	b.n	800e610 <__ssvfiscanf_r+0x1b0>
 800e6d6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e6d8:	3201      	adds	r2, #1
 800e6da:	9245      	str	r2, [sp, #276]	; 0x114
 800e6dc:	6862      	ldr	r2, [r4, #4]
 800e6de:	3a01      	subs	r2, #1
 800e6e0:	2a00      	cmp	r2, #0
 800e6e2:	6062      	str	r2, [r4, #4]
 800e6e4:	dd02      	ble.n	800e6ec <__ssvfiscanf_r+0x28c>
 800e6e6:	3301      	adds	r3, #1
 800e6e8:	6023      	str	r3, [r4, #0]
 800e6ea:	e7ad      	b.n	800e648 <__ssvfiscanf_r+0x1e8>
 800e6ec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e6ee:	4621      	mov	r1, r4
 800e6f0:	4630      	mov	r0, r6
 800e6f2:	4798      	blx	r3
 800e6f4:	2800      	cmp	r0, #0
 800e6f6:	d0a7      	beq.n	800e648 <__ssvfiscanf_r+0x1e8>
 800e6f8:	e78a      	b.n	800e610 <__ssvfiscanf_r+0x1b0>
 800e6fa:	2b04      	cmp	r3, #4
 800e6fc:	dc0e      	bgt.n	800e71c <__ssvfiscanf_r+0x2bc>
 800e6fe:	466b      	mov	r3, sp
 800e700:	4622      	mov	r2, r4
 800e702:	a941      	add	r1, sp, #260	; 0x104
 800e704:	4630      	mov	r0, r6
 800e706:	f000 f9d7 	bl	800eab8 <_scanf_i>
 800e70a:	e7ab      	b.n	800e664 <__ssvfiscanf_r+0x204>
 800e70c:	0800e3ad 	.word	0x0800e3ad
 800e710:	0800e427 	.word	0x0800e427
 800e714:	0800f37b 	.word	0x0800f37b
 800e718:	0800f6ac 	.word	0x0800f6ac
 800e71c:	4b0b      	ldr	r3, [pc, #44]	; (800e74c <__ssvfiscanf_r+0x2ec>)
 800e71e:	2b00      	cmp	r3, #0
 800e720:	f43f aec5 	beq.w	800e4ae <__ssvfiscanf_r+0x4e>
 800e724:	466b      	mov	r3, sp
 800e726:	4622      	mov	r2, r4
 800e728:	a941      	add	r1, sp, #260	; 0x104
 800e72a:	4630      	mov	r0, r6
 800e72c:	f3af 8000 	nop.w
 800e730:	e798      	b.n	800e664 <__ssvfiscanf_r+0x204>
 800e732:	89a3      	ldrh	r3, [r4, #12]
 800e734:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e738:	bf18      	it	ne
 800e73a:	f04f 30ff 	movne.w	r0, #4294967295
 800e73e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800e742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e746:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e748:	e7f9      	b.n	800e73e <__ssvfiscanf_r+0x2de>
 800e74a:	bf00      	nop
 800e74c:	00000000 	.word	0x00000000

0800e750 <__sfputc_r>:
 800e750:	6893      	ldr	r3, [r2, #8]
 800e752:	3b01      	subs	r3, #1
 800e754:	2b00      	cmp	r3, #0
 800e756:	b410      	push	{r4}
 800e758:	6093      	str	r3, [r2, #8]
 800e75a:	da08      	bge.n	800e76e <__sfputc_r+0x1e>
 800e75c:	6994      	ldr	r4, [r2, #24]
 800e75e:	42a3      	cmp	r3, r4
 800e760:	db01      	blt.n	800e766 <__sfputc_r+0x16>
 800e762:	290a      	cmp	r1, #10
 800e764:	d103      	bne.n	800e76e <__sfputc_r+0x1e>
 800e766:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e76a:	f7fe b8b5 	b.w	800c8d8 <__swbuf_r>
 800e76e:	6813      	ldr	r3, [r2, #0]
 800e770:	1c58      	adds	r0, r3, #1
 800e772:	6010      	str	r0, [r2, #0]
 800e774:	7019      	strb	r1, [r3, #0]
 800e776:	4608      	mov	r0, r1
 800e778:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e77c:	4770      	bx	lr

0800e77e <__sfputs_r>:
 800e77e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e780:	4606      	mov	r6, r0
 800e782:	460f      	mov	r7, r1
 800e784:	4614      	mov	r4, r2
 800e786:	18d5      	adds	r5, r2, r3
 800e788:	42ac      	cmp	r4, r5
 800e78a:	d101      	bne.n	800e790 <__sfputs_r+0x12>
 800e78c:	2000      	movs	r0, #0
 800e78e:	e007      	b.n	800e7a0 <__sfputs_r+0x22>
 800e790:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e794:	463a      	mov	r2, r7
 800e796:	4630      	mov	r0, r6
 800e798:	f7ff ffda 	bl	800e750 <__sfputc_r>
 800e79c:	1c43      	adds	r3, r0, #1
 800e79e:	d1f3      	bne.n	800e788 <__sfputs_r+0xa>
 800e7a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e7a4 <_vfiprintf_r>:
 800e7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7a8:	460d      	mov	r5, r1
 800e7aa:	b09d      	sub	sp, #116	; 0x74
 800e7ac:	4614      	mov	r4, r2
 800e7ae:	4698      	mov	r8, r3
 800e7b0:	4606      	mov	r6, r0
 800e7b2:	b118      	cbz	r0, 800e7bc <_vfiprintf_r+0x18>
 800e7b4:	6983      	ldr	r3, [r0, #24]
 800e7b6:	b90b      	cbnz	r3, 800e7bc <_vfiprintf_r+0x18>
 800e7b8:	f7ff f922 	bl	800da00 <__sinit>
 800e7bc:	4b89      	ldr	r3, [pc, #548]	; (800e9e4 <_vfiprintf_r+0x240>)
 800e7be:	429d      	cmp	r5, r3
 800e7c0:	d11b      	bne.n	800e7fa <_vfiprintf_r+0x56>
 800e7c2:	6875      	ldr	r5, [r6, #4]
 800e7c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e7c6:	07d9      	lsls	r1, r3, #31
 800e7c8:	d405      	bmi.n	800e7d6 <_vfiprintf_r+0x32>
 800e7ca:	89ab      	ldrh	r3, [r5, #12]
 800e7cc:	059a      	lsls	r2, r3, #22
 800e7ce:	d402      	bmi.n	800e7d6 <_vfiprintf_r+0x32>
 800e7d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e7d2:	f7ff f9ca 	bl	800db6a <__retarget_lock_acquire_recursive>
 800e7d6:	89ab      	ldrh	r3, [r5, #12]
 800e7d8:	071b      	lsls	r3, r3, #28
 800e7da:	d501      	bpl.n	800e7e0 <_vfiprintf_r+0x3c>
 800e7dc:	692b      	ldr	r3, [r5, #16]
 800e7de:	b9eb      	cbnz	r3, 800e81c <_vfiprintf_r+0x78>
 800e7e0:	4629      	mov	r1, r5
 800e7e2:	4630      	mov	r0, r6
 800e7e4:	f7fe f8dc 	bl	800c9a0 <__swsetup_r>
 800e7e8:	b1c0      	cbz	r0, 800e81c <_vfiprintf_r+0x78>
 800e7ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e7ec:	07dc      	lsls	r4, r3, #31
 800e7ee:	d50e      	bpl.n	800e80e <_vfiprintf_r+0x6a>
 800e7f0:	f04f 30ff 	mov.w	r0, #4294967295
 800e7f4:	b01d      	add	sp, #116	; 0x74
 800e7f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7fa:	4b7b      	ldr	r3, [pc, #492]	; (800e9e8 <_vfiprintf_r+0x244>)
 800e7fc:	429d      	cmp	r5, r3
 800e7fe:	d101      	bne.n	800e804 <_vfiprintf_r+0x60>
 800e800:	68b5      	ldr	r5, [r6, #8]
 800e802:	e7df      	b.n	800e7c4 <_vfiprintf_r+0x20>
 800e804:	4b79      	ldr	r3, [pc, #484]	; (800e9ec <_vfiprintf_r+0x248>)
 800e806:	429d      	cmp	r5, r3
 800e808:	bf08      	it	eq
 800e80a:	68f5      	ldreq	r5, [r6, #12]
 800e80c:	e7da      	b.n	800e7c4 <_vfiprintf_r+0x20>
 800e80e:	89ab      	ldrh	r3, [r5, #12]
 800e810:	0598      	lsls	r0, r3, #22
 800e812:	d4ed      	bmi.n	800e7f0 <_vfiprintf_r+0x4c>
 800e814:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e816:	f7ff f9a9 	bl	800db6c <__retarget_lock_release_recursive>
 800e81a:	e7e9      	b.n	800e7f0 <_vfiprintf_r+0x4c>
 800e81c:	2300      	movs	r3, #0
 800e81e:	9309      	str	r3, [sp, #36]	; 0x24
 800e820:	2320      	movs	r3, #32
 800e822:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e826:	f8cd 800c 	str.w	r8, [sp, #12]
 800e82a:	2330      	movs	r3, #48	; 0x30
 800e82c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e9f0 <_vfiprintf_r+0x24c>
 800e830:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e834:	f04f 0901 	mov.w	r9, #1
 800e838:	4623      	mov	r3, r4
 800e83a:	469a      	mov	sl, r3
 800e83c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e840:	b10a      	cbz	r2, 800e846 <_vfiprintf_r+0xa2>
 800e842:	2a25      	cmp	r2, #37	; 0x25
 800e844:	d1f9      	bne.n	800e83a <_vfiprintf_r+0x96>
 800e846:	ebba 0b04 	subs.w	fp, sl, r4
 800e84a:	d00b      	beq.n	800e864 <_vfiprintf_r+0xc0>
 800e84c:	465b      	mov	r3, fp
 800e84e:	4622      	mov	r2, r4
 800e850:	4629      	mov	r1, r5
 800e852:	4630      	mov	r0, r6
 800e854:	f7ff ff93 	bl	800e77e <__sfputs_r>
 800e858:	3001      	adds	r0, #1
 800e85a:	f000 80aa 	beq.w	800e9b2 <_vfiprintf_r+0x20e>
 800e85e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e860:	445a      	add	r2, fp
 800e862:	9209      	str	r2, [sp, #36]	; 0x24
 800e864:	f89a 3000 	ldrb.w	r3, [sl]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	f000 80a2 	beq.w	800e9b2 <_vfiprintf_r+0x20e>
 800e86e:	2300      	movs	r3, #0
 800e870:	f04f 32ff 	mov.w	r2, #4294967295
 800e874:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e878:	f10a 0a01 	add.w	sl, sl, #1
 800e87c:	9304      	str	r3, [sp, #16]
 800e87e:	9307      	str	r3, [sp, #28]
 800e880:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e884:	931a      	str	r3, [sp, #104]	; 0x68
 800e886:	4654      	mov	r4, sl
 800e888:	2205      	movs	r2, #5
 800e88a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e88e:	4858      	ldr	r0, [pc, #352]	; (800e9f0 <_vfiprintf_r+0x24c>)
 800e890:	f7f1 fcb6 	bl	8000200 <memchr>
 800e894:	9a04      	ldr	r2, [sp, #16]
 800e896:	b9d8      	cbnz	r0, 800e8d0 <_vfiprintf_r+0x12c>
 800e898:	06d1      	lsls	r1, r2, #27
 800e89a:	bf44      	itt	mi
 800e89c:	2320      	movmi	r3, #32
 800e89e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8a2:	0713      	lsls	r3, r2, #28
 800e8a4:	bf44      	itt	mi
 800e8a6:	232b      	movmi	r3, #43	; 0x2b
 800e8a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8ac:	f89a 3000 	ldrb.w	r3, [sl]
 800e8b0:	2b2a      	cmp	r3, #42	; 0x2a
 800e8b2:	d015      	beq.n	800e8e0 <_vfiprintf_r+0x13c>
 800e8b4:	9a07      	ldr	r2, [sp, #28]
 800e8b6:	4654      	mov	r4, sl
 800e8b8:	2000      	movs	r0, #0
 800e8ba:	f04f 0c0a 	mov.w	ip, #10
 800e8be:	4621      	mov	r1, r4
 800e8c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8c4:	3b30      	subs	r3, #48	; 0x30
 800e8c6:	2b09      	cmp	r3, #9
 800e8c8:	d94e      	bls.n	800e968 <_vfiprintf_r+0x1c4>
 800e8ca:	b1b0      	cbz	r0, 800e8fa <_vfiprintf_r+0x156>
 800e8cc:	9207      	str	r2, [sp, #28]
 800e8ce:	e014      	b.n	800e8fa <_vfiprintf_r+0x156>
 800e8d0:	eba0 0308 	sub.w	r3, r0, r8
 800e8d4:	fa09 f303 	lsl.w	r3, r9, r3
 800e8d8:	4313      	orrs	r3, r2
 800e8da:	9304      	str	r3, [sp, #16]
 800e8dc:	46a2      	mov	sl, r4
 800e8de:	e7d2      	b.n	800e886 <_vfiprintf_r+0xe2>
 800e8e0:	9b03      	ldr	r3, [sp, #12]
 800e8e2:	1d19      	adds	r1, r3, #4
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	9103      	str	r1, [sp, #12]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	bfbb      	ittet	lt
 800e8ec:	425b      	neglt	r3, r3
 800e8ee:	f042 0202 	orrlt.w	r2, r2, #2
 800e8f2:	9307      	strge	r3, [sp, #28]
 800e8f4:	9307      	strlt	r3, [sp, #28]
 800e8f6:	bfb8      	it	lt
 800e8f8:	9204      	strlt	r2, [sp, #16]
 800e8fa:	7823      	ldrb	r3, [r4, #0]
 800e8fc:	2b2e      	cmp	r3, #46	; 0x2e
 800e8fe:	d10c      	bne.n	800e91a <_vfiprintf_r+0x176>
 800e900:	7863      	ldrb	r3, [r4, #1]
 800e902:	2b2a      	cmp	r3, #42	; 0x2a
 800e904:	d135      	bne.n	800e972 <_vfiprintf_r+0x1ce>
 800e906:	9b03      	ldr	r3, [sp, #12]
 800e908:	1d1a      	adds	r2, r3, #4
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	9203      	str	r2, [sp, #12]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	bfb8      	it	lt
 800e912:	f04f 33ff 	movlt.w	r3, #4294967295
 800e916:	3402      	adds	r4, #2
 800e918:	9305      	str	r3, [sp, #20]
 800e91a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ea00 <_vfiprintf_r+0x25c>
 800e91e:	7821      	ldrb	r1, [r4, #0]
 800e920:	2203      	movs	r2, #3
 800e922:	4650      	mov	r0, sl
 800e924:	f7f1 fc6c 	bl	8000200 <memchr>
 800e928:	b140      	cbz	r0, 800e93c <_vfiprintf_r+0x198>
 800e92a:	2340      	movs	r3, #64	; 0x40
 800e92c:	eba0 000a 	sub.w	r0, r0, sl
 800e930:	fa03 f000 	lsl.w	r0, r3, r0
 800e934:	9b04      	ldr	r3, [sp, #16]
 800e936:	4303      	orrs	r3, r0
 800e938:	3401      	adds	r4, #1
 800e93a:	9304      	str	r3, [sp, #16]
 800e93c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e940:	482c      	ldr	r0, [pc, #176]	; (800e9f4 <_vfiprintf_r+0x250>)
 800e942:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e946:	2206      	movs	r2, #6
 800e948:	f7f1 fc5a 	bl	8000200 <memchr>
 800e94c:	2800      	cmp	r0, #0
 800e94e:	d03f      	beq.n	800e9d0 <_vfiprintf_r+0x22c>
 800e950:	4b29      	ldr	r3, [pc, #164]	; (800e9f8 <_vfiprintf_r+0x254>)
 800e952:	bb1b      	cbnz	r3, 800e99c <_vfiprintf_r+0x1f8>
 800e954:	9b03      	ldr	r3, [sp, #12]
 800e956:	3307      	adds	r3, #7
 800e958:	f023 0307 	bic.w	r3, r3, #7
 800e95c:	3308      	adds	r3, #8
 800e95e:	9303      	str	r3, [sp, #12]
 800e960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e962:	443b      	add	r3, r7
 800e964:	9309      	str	r3, [sp, #36]	; 0x24
 800e966:	e767      	b.n	800e838 <_vfiprintf_r+0x94>
 800e968:	fb0c 3202 	mla	r2, ip, r2, r3
 800e96c:	460c      	mov	r4, r1
 800e96e:	2001      	movs	r0, #1
 800e970:	e7a5      	b.n	800e8be <_vfiprintf_r+0x11a>
 800e972:	2300      	movs	r3, #0
 800e974:	3401      	adds	r4, #1
 800e976:	9305      	str	r3, [sp, #20]
 800e978:	4619      	mov	r1, r3
 800e97a:	f04f 0c0a 	mov.w	ip, #10
 800e97e:	4620      	mov	r0, r4
 800e980:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e984:	3a30      	subs	r2, #48	; 0x30
 800e986:	2a09      	cmp	r2, #9
 800e988:	d903      	bls.n	800e992 <_vfiprintf_r+0x1ee>
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d0c5      	beq.n	800e91a <_vfiprintf_r+0x176>
 800e98e:	9105      	str	r1, [sp, #20]
 800e990:	e7c3      	b.n	800e91a <_vfiprintf_r+0x176>
 800e992:	fb0c 2101 	mla	r1, ip, r1, r2
 800e996:	4604      	mov	r4, r0
 800e998:	2301      	movs	r3, #1
 800e99a:	e7f0      	b.n	800e97e <_vfiprintf_r+0x1da>
 800e99c:	ab03      	add	r3, sp, #12
 800e99e:	9300      	str	r3, [sp, #0]
 800e9a0:	462a      	mov	r2, r5
 800e9a2:	4b16      	ldr	r3, [pc, #88]	; (800e9fc <_vfiprintf_r+0x258>)
 800e9a4:	a904      	add	r1, sp, #16
 800e9a6:	4630      	mov	r0, r6
 800e9a8:	f7fd f986 	bl	800bcb8 <_printf_float>
 800e9ac:	4607      	mov	r7, r0
 800e9ae:	1c78      	adds	r0, r7, #1
 800e9b0:	d1d6      	bne.n	800e960 <_vfiprintf_r+0x1bc>
 800e9b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e9b4:	07d9      	lsls	r1, r3, #31
 800e9b6:	d405      	bmi.n	800e9c4 <_vfiprintf_r+0x220>
 800e9b8:	89ab      	ldrh	r3, [r5, #12]
 800e9ba:	059a      	lsls	r2, r3, #22
 800e9bc:	d402      	bmi.n	800e9c4 <_vfiprintf_r+0x220>
 800e9be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e9c0:	f7ff f8d4 	bl	800db6c <__retarget_lock_release_recursive>
 800e9c4:	89ab      	ldrh	r3, [r5, #12]
 800e9c6:	065b      	lsls	r3, r3, #25
 800e9c8:	f53f af12 	bmi.w	800e7f0 <_vfiprintf_r+0x4c>
 800e9cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e9ce:	e711      	b.n	800e7f4 <_vfiprintf_r+0x50>
 800e9d0:	ab03      	add	r3, sp, #12
 800e9d2:	9300      	str	r3, [sp, #0]
 800e9d4:	462a      	mov	r2, r5
 800e9d6:	4b09      	ldr	r3, [pc, #36]	; (800e9fc <_vfiprintf_r+0x258>)
 800e9d8:	a904      	add	r1, sp, #16
 800e9da:	4630      	mov	r0, r6
 800e9dc:	f7fd fc10 	bl	800c200 <_printf_i>
 800e9e0:	e7e4      	b.n	800e9ac <_vfiprintf_r+0x208>
 800e9e2:	bf00      	nop
 800e9e4:	0800f514 	.word	0x0800f514
 800e9e8:	0800f534 	.word	0x0800f534
 800e9ec:	0800f4f4 	.word	0x0800f4f4
 800e9f0:	0800f6b0 	.word	0x0800f6b0
 800e9f4:	0800f6b6 	.word	0x0800f6b6
 800e9f8:	0800bcb9 	.word	0x0800bcb9
 800e9fc:	0800e77f 	.word	0x0800e77f
 800ea00:	0800f6ac 	.word	0x0800f6ac

0800ea04 <_scanf_chars>:
 800ea04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea08:	4615      	mov	r5, r2
 800ea0a:	688a      	ldr	r2, [r1, #8]
 800ea0c:	4680      	mov	r8, r0
 800ea0e:	460c      	mov	r4, r1
 800ea10:	b932      	cbnz	r2, 800ea20 <_scanf_chars+0x1c>
 800ea12:	698a      	ldr	r2, [r1, #24]
 800ea14:	2a00      	cmp	r2, #0
 800ea16:	bf0c      	ite	eq
 800ea18:	2201      	moveq	r2, #1
 800ea1a:	f04f 32ff 	movne.w	r2, #4294967295
 800ea1e:	608a      	str	r2, [r1, #8]
 800ea20:	6822      	ldr	r2, [r4, #0]
 800ea22:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800eab4 <_scanf_chars+0xb0>
 800ea26:	06d1      	lsls	r1, r2, #27
 800ea28:	bf5f      	itttt	pl
 800ea2a:	681a      	ldrpl	r2, [r3, #0]
 800ea2c:	1d11      	addpl	r1, r2, #4
 800ea2e:	6019      	strpl	r1, [r3, #0]
 800ea30:	6816      	ldrpl	r6, [r2, #0]
 800ea32:	2700      	movs	r7, #0
 800ea34:	69a0      	ldr	r0, [r4, #24]
 800ea36:	b188      	cbz	r0, 800ea5c <_scanf_chars+0x58>
 800ea38:	2801      	cmp	r0, #1
 800ea3a:	d107      	bne.n	800ea4c <_scanf_chars+0x48>
 800ea3c:	682a      	ldr	r2, [r5, #0]
 800ea3e:	7811      	ldrb	r1, [r2, #0]
 800ea40:	6962      	ldr	r2, [r4, #20]
 800ea42:	5c52      	ldrb	r2, [r2, r1]
 800ea44:	b952      	cbnz	r2, 800ea5c <_scanf_chars+0x58>
 800ea46:	2f00      	cmp	r7, #0
 800ea48:	d031      	beq.n	800eaae <_scanf_chars+0xaa>
 800ea4a:	e022      	b.n	800ea92 <_scanf_chars+0x8e>
 800ea4c:	2802      	cmp	r0, #2
 800ea4e:	d120      	bne.n	800ea92 <_scanf_chars+0x8e>
 800ea50:	682b      	ldr	r3, [r5, #0]
 800ea52:	781b      	ldrb	r3, [r3, #0]
 800ea54:	f813 3009 	ldrb.w	r3, [r3, r9]
 800ea58:	071b      	lsls	r3, r3, #28
 800ea5a:	d41a      	bmi.n	800ea92 <_scanf_chars+0x8e>
 800ea5c:	6823      	ldr	r3, [r4, #0]
 800ea5e:	06da      	lsls	r2, r3, #27
 800ea60:	bf5e      	ittt	pl
 800ea62:	682b      	ldrpl	r3, [r5, #0]
 800ea64:	781b      	ldrbpl	r3, [r3, #0]
 800ea66:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ea6a:	682a      	ldr	r2, [r5, #0]
 800ea6c:	686b      	ldr	r3, [r5, #4]
 800ea6e:	3201      	adds	r2, #1
 800ea70:	602a      	str	r2, [r5, #0]
 800ea72:	68a2      	ldr	r2, [r4, #8]
 800ea74:	3b01      	subs	r3, #1
 800ea76:	3a01      	subs	r2, #1
 800ea78:	606b      	str	r3, [r5, #4]
 800ea7a:	3701      	adds	r7, #1
 800ea7c:	60a2      	str	r2, [r4, #8]
 800ea7e:	b142      	cbz	r2, 800ea92 <_scanf_chars+0x8e>
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	dcd7      	bgt.n	800ea34 <_scanf_chars+0x30>
 800ea84:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ea88:	4629      	mov	r1, r5
 800ea8a:	4640      	mov	r0, r8
 800ea8c:	4798      	blx	r3
 800ea8e:	2800      	cmp	r0, #0
 800ea90:	d0d0      	beq.n	800ea34 <_scanf_chars+0x30>
 800ea92:	6823      	ldr	r3, [r4, #0]
 800ea94:	f013 0310 	ands.w	r3, r3, #16
 800ea98:	d105      	bne.n	800eaa6 <_scanf_chars+0xa2>
 800ea9a:	68e2      	ldr	r2, [r4, #12]
 800ea9c:	3201      	adds	r2, #1
 800ea9e:	60e2      	str	r2, [r4, #12]
 800eaa0:	69a2      	ldr	r2, [r4, #24]
 800eaa2:	b102      	cbz	r2, 800eaa6 <_scanf_chars+0xa2>
 800eaa4:	7033      	strb	r3, [r6, #0]
 800eaa6:	6923      	ldr	r3, [r4, #16]
 800eaa8:	443b      	add	r3, r7
 800eaaa:	6123      	str	r3, [r4, #16]
 800eaac:	2000      	movs	r0, #0
 800eaae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eab2:	bf00      	nop
 800eab4:	0800f37b 	.word	0x0800f37b

0800eab8 <_scanf_i>:
 800eab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eabc:	4698      	mov	r8, r3
 800eabe:	4b76      	ldr	r3, [pc, #472]	; (800ec98 <_scanf_i+0x1e0>)
 800eac0:	460c      	mov	r4, r1
 800eac2:	4682      	mov	sl, r0
 800eac4:	4616      	mov	r6, r2
 800eac6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800eaca:	b087      	sub	sp, #28
 800eacc:	ab03      	add	r3, sp, #12
 800eace:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ead2:	4b72      	ldr	r3, [pc, #456]	; (800ec9c <_scanf_i+0x1e4>)
 800ead4:	69a1      	ldr	r1, [r4, #24]
 800ead6:	4a72      	ldr	r2, [pc, #456]	; (800eca0 <_scanf_i+0x1e8>)
 800ead8:	2903      	cmp	r1, #3
 800eada:	bf18      	it	ne
 800eadc:	461a      	movne	r2, r3
 800eade:	68a3      	ldr	r3, [r4, #8]
 800eae0:	9201      	str	r2, [sp, #4]
 800eae2:	1e5a      	subs	r2, r3, #1
 800eae4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800eae8:	bf88      	it	hi
 800eaea:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800eaee:	4627      	mov	r7, r4
 800eaf0:	bf82      	ittt	hi
 800eaf2:	eb03 0905 	addhi.w	r9, r3, r5
 800eaf6:	f240 135d 	movwhi	r3, #349	; 0x15d
 800eafa:	60a3      	strhi	r3, [r4, #8]
 800eafc:	f857 3b1c 	ldr.w	r3, [r7], #28
 800eb00:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800eb04:	bf98      	it	ls
 800eb06:	f04f 0900 	movls.w	r9, #0
 800eb0a:	6023      	str	r3, [r4, #0]
 800eb0c:	463d      	mov	r5, r7
 800eb0e:	f04f 0b00 	mov.w	fp, #0
 800eb12:	6831      	ldr	r1, [r6, #0]
 800eb14:	ab03      	add	r3, sp, #12
 800eb16:	7809      	ldrb	r1, [r1, #0]
 800eb18:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800eb1c:	2202      	movs	r2, #2
 800eb1e:	f7f1 fb6f 	bl	8000200 <memchr>
 800eb22:	b328      	cbz	r0, 800eb70 <_scanf_i+0xb8>
 800eb24:	f1bb 0f01 	cmp.w	fp, #1
 800eb28:	d159      	bne.n	800ebde <_scanf_i+0x126>
 800eb2a:	6862      	ldr	r2, [r4, #4]
 800eb2c:	b92a      	cbnz	r2, 800eb3a <_scanf_i+0x82>
 800eb2e:	6822      	ldr	r2, [r4, #0]
 800eb30:	2308      	movs	r3, #8
 800eb32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eb36:	6063      	str	r3, [r4, #4]
 800eb38:	6022      	str	r2, [r4, #0]
 800eb3a:	6822      	ldr	r2, [r4, #0]
 800eb3c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800eb40:	6022      	str	r2, [r4, #0]
 800eb42:	68a2      	ldr	r2, [r4, #8]
 800eb44:	1e51      	subs	r1, r2, #1
 800eb46:	60a1      	str	r1, [r4, #8]
 800eb48:	b192      	cbz	r2, 800eb70 <_scanf_i+0xb8>
 800eb4a:	6832      	ldr	r2, [r6, #0]
 800eb4c:	1c51      	adds	r1, r2, #1
 800eb4e:	6031      	str	r1, [r6, #0]
 800eb50:	7812      	ldrb	r2, [r2, #0]
 800eb52:	f805 2b01 	strb.w	r2, [r5], #1
 800eb56:	6872      	ldr	r2, [r6, #4]
 800eb58:	3a01      	subs	r2, #1
 800eb5a:	2a00      	cmp	r2, #0
 800eb5c:	6072      	str	r2, [r6, #4]
 800eb5e:	dc07      	bgt.n	800eb70 <_scanf_i+0xb8>
 800eb60:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800eb64:	4631      	mov	r1, r6
 800eb66:	4650      	mov	r0, sl
 800eb68:	4790      	blx	r2
 800eb6a:	2800      	cmp	r0, #0
 800eb6c:	f040 8085 	bne.w	800ec7a <_scanf_i+0x1c2>
 800eb70:	f10b 0b01 	add.w	fp, fp, #1
 800eb74:	f1bb 0f03 	cmp.w	fp, #3
 800eb78:	d1cb      	bne.n	800eb12 <_scanf_i+0x5a>
 800eb7a:	6863      	ldr	r3, [r4, #4]
 800eb7c:	b90b      	cbnz	r3, 800eb82 <_scanf_i+0xca>
 800eb7e:	230a      	movs	r3, #10
 800eb80:	6063      	str	r3, [r4, #4]
 800eb82:	6863      	ldr	r3, [r4, #4]
 800eb84:	4947      	ldr	r1, [pc, #284]	; (800eca4 <_scanf_i+0x1ec>)
 800eb86:	6960      	ldr	r0, [r4, #20]
 800eb88:	1ac9      	subs	r1, r1, r3
 800eb8a:	f000 f89f 	bl	800eccc <__sccl>
 800eb8e:	f04f 0b00 	mov.w	fp, #0
 800eb92:	68a3      	ldr	r3, [r4, #8]
 800eb94:	6822      	ldr	r2, [r4, #0]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d03d      	beq.n	800ec16 <_scanf_i+0x15e>
 800eb9a:	6831      	ldr	r1, [r6, #0]
 800eb9c:	6960      	ldr	r0, [r4, #20]
 800eb9e:	f891 c000 	ldrb.w	ip, [r1]
 800eba2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800eba6:	2800      	cmp	r0, #0
 800eba8:	d035      	beq.n	800ec16 <_scanf_i+0x15e>
 800ebaa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800ebae:	d124      	bne.n	800ebfa <_scanf_i+0x142>
 800ebb0:	0510      	lsls	r0, r2, #20
 800ebb2:	d522      	bpl.n	800ebfa <_scanf_i+0x142>
 800ebb4:	f10b 0b01 	add.w	fp, fp, #1
 800ebb8:	f1b9 0f00 	cmp.w	r9, #0
 800ebbc:	d003      	beq.n	800ebc6 <_scanf_i+0x10e>
 800ebbe:	3301      	adds	r3, #1
 800ebc0:	f109 39ff 	add.w	r9, r9, #4294967295
 800ebc4:	60a3      	str	r3, [r4, #8]
 800ebc6:	6873      	ldr	r3, [r6, #4]
 800ebc8:	3b01      	subs	r3, #1
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	6073      	str	r3, [r6, #4]
 800ebce:	dd1b      	ble.n	800ec08 <_scanf_i+0x150>
 800ebd0:	6833      	ldr	r3, [r6, #0]
 800ebd2:	3301      	adds	r3, #1
 800ebd4:	6033      	str	r3, [r6, #0]
 800ebd6:	68a3      	ldr	r3, [r4, #8]
 800ebd8:	3b01      	subs	r3, #1
 800ebda:	60a3      	str	r3, [r4, #8]
 800ebdc:	e7d9      	b.n	800eb92 <_scanf_i+0xda>
 800ebde:	f1bb 0f02 	cmp.w	fp, #2
 800ebe2:	d1ae      	bne.n	800eb42 <_scanf_i+0x8a>
 800ebe4:	6822      	ldr	r2, [r4, #0]
 800ebe6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ebea:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ebee:	d1bf      	bne.n	800eb70 <_scanf_i+0xb8>
 800ebf0:	2310      	movs	r3, #16
 800ebf2:	6063      	str	r3, [r4, #4]
 800ebf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ebf8:	e7a2      	b.n	800eb40 <_scanf_i+0x88>
 800ebfa:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ebfe:	6022      	str	r2, [r4, #0]
 800ec00:	780b      	ldrb	r3, [r1, #0]
 800ec02:	f805 3b01 	strb.w	r3, [r5], #1
 800ec06:	e7de      	b.n	800ebc6 <_scanf_i+0x10e>
 800ec08:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ec0c:	4631      	mov	r1, r6
 800ec0e:	4650      	mov	r0, sl
 800ec10:	4798      	blx	r3
 800ec12:	2800      	cmp	r0, #0
 800ec14:	d0df      	beq.n	800ebd6 <_scanf_i+0x11e>
 800ec16:	6823      	ldr	r3, [r4, #0]
 800ec18:	05db      	lsls	r3, r3, #23
 800ec1a:	d50d      	bpl.n	800ec38 <_scanf_i+0x180>
 800ec1c:	42bd      	cmp	r5, r7
 800ec1e:	d909      	bls.n	800ec34 <_scanf_i+0x17c>
 800ec20:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ec24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ec28:	4632      	mov	r2, r6
 800ec2a:	4650      	mov	r0, sl
 800ec2c:	4798      	blx	r3
 800ec2e:	f105 39ff 	add.w	r9, r5, #4294967295
 800ec32:	464d      	mov	r5, r9
 800ec34:	42bd      	cmp	r5, r7
 800ec36:	d02d      	beq.n	800ec94 <_scanf_i+0x1dc>
 800ec38:	6822      	ldr	r2, [r4, #0]
 800ec3a:	f012 0210 	ands.w	r2, r2, #16
 800ec3e:	d113      	bne.n	800ec68 <_scanf_i+0x1b0>
 800ec40:	702a      	strb	r2, [r5, #0]
 800ec42:	6863      	ldr	r3, [r4, #4]
 800ec44:	9e01      	ldr	r6, [sp, #4]
 800ec46:	4639      	mov	r1, r7
 800ec48:	4650      	mov	r0, sl
 800ec4a:	47b0      	blx	r6
 800ec4c:	6821      	ldr	r1, [r4, #0]
 800ec4e:	f8d8 3000 	ldr.w	r3, [r8]
 800ec52:	f011 0f20 	tst.w	r1, #32
 800ec56:	d013      	beq.n	800ec80 <_scanf_i+0x1c8>
 800ec58:	1d1a      	adds	r2, r3, #4
 800ec5a:	f8c8 2000 	str.w	r2, [r8]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	6018      	str	r0, [r3, #0]
 800ec62:	68e3      	ldr	r3, [r4, #12]
 800ec64:	3301      	adds	r3, #1
 800ec66:	60e3      	str	r3, [r4, #12]
 800ec68:	1bed      	subs	r5, r5, r7
 800ec6a:	44ab      	add	fp, r5
 800ec6c:	6925      	ldr	r5, [r4, #16]
 800ec6e:	445d      	add	r5, fp
 800ec70:	6125      	str	r5, [r4, #16]
 800ec72:	2000      	movs	r0, #0
 800ec74:	b007      	add	sp, #28
 800ec76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec7a:	f04f 0b00 	mov.w	fp, #0
 800ec7e:	e7ca      	b.n	800ec16 <_scanf_i+0x15e>
 800ec80:	1d1a      	adds	r2, r3, #4
 800ec82:	f8c8 2000 	str.w	r2, [r8]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	f011 0f01 	tst.w	r1, #1
 800ec8c:	bf14      	ite	ne
 800ec8e:	8018      	strhne	r0, [r3, #0]
 800ec90:	6018      	streq	r0, [r3, #0]
 800ec92:	e7e6      	b.n	800ec62 <_scanf_i+0x1aa>
 800ec94:	2001      	movs	r0, #1
 800ec96:	e7ed      	b.n	800ec74 <_scanf_i+0x1bc>
 800ec98:	0800f0d8 	.word	0x0800f0d8
 800ec9c:	0800ee21 	.word	0x0800ee21
 800eca0:	0800c8c1 	.word	0x0800c8c1
 800eca4:	0800f6d6 	.word	0x0800f6d6

0800eca8 <_read_r>:
 800eca8:	b538      	push	{r3, r4, r5, lr}
 800ecaa:	4d07      	ldr	r5, [pc, #28]	; (800ecc8 <_read_r+0x20>)
 800ecac:	4604      	mov	r4, r0
 800ecae:	4608      	mov	r0, r1
 800ecb0:	4611      	mov	r1, r2
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	602a      	str	r2, [r5, #0]
 800ecb6:	461a      	mov	r2, r3
 800ecb8:	f7f4 f81c 	bl	8002cf4 <_read>
 800ecbc:	1c43      	adds	r3, r0, #1
 800ecbe:	d102      	bne.n	800ecc6 <_read_r+0x1e>
 800ecc0:	682b      	ldr	r3, [r5, #0]
 800ecc2:	b103      	cbz	r3, 800ecc6 <_read_r+0x1e>
 800ecc4:	6023      	str	r3, [r4, #0]
 800ecc6:	bd38      	pop	{r3, r4, r5, pc}
 800ecc8:	20003624 	.word	0x20003624

0800eccc <__sccl>:
 800eccc:	b570      	push	{r4, r5, r6, lr}
 800ecce:	780b      	ldrb	r3, [r1, #0]
 800ecd0:	4604      	mov	r4, r0
 800ecd2:	2b5e      	cmp	r3, #94	; 0x5e
 800ecd4:	bf0b      	itete	eq
 800ecd6:	784b      	ldrbeq	r3, [r1, #1]
 800ecd8:	1c48      	addne	r0, r1, #1
 800ecda:	1c88      	addeq	r0, r1, #2
 800ecdc:	2200      	movne	r2, #0
 800ecde:	bf08      	it	eq
 800ece0:	2201      	moveq	r2, #1
 800ece2:	1e61      	subs	r1, r4, #1
 800ece4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ece8:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ecec:	42a9      	cmp	r1, r5
 800ecee:	d1fb      	bne.n	800ece8 <__sccl+0x1c>
 800ecf0:	b90b      	cbnz	r3, 800ecf6 <__sccl+0x2a>
 800ecf2:	3801      	subs	r0, #1
 800ecf4:	bd70      	pop	{r4, r5, r6, pc}
 800ecf6:	f082 0201 	eor.w	r2, r2, #1
 800ecfa:	54e2      	strb	r2, [r4, r3]
 800ecfc:	4605      	mov	r5, r0
 800ecfe:	4628      	mov	r0, r5
 800ed00:	f810 1b01 	ldrb.w	r1, [r0], #1
 800ed04:	292d      	cmp	r1, #45	; 0x2d
 800ed06:	d006      	beq.n	800ed16 <__sccl+0x4a>
 800ed08:	295d      	cmp	r1, #93	; 0x5d
 800ed0a:	d0f3      	beq.n	800ecf4 <__sccl+0x28>
 800ed0c:	b909      	cbnz	r1, 800ed12 <__sccl+0x46>
 800ed0e:	4628      	mov	r0, r5
 800ed10:	e7f0      	b.n	800ecf4 <__sccl+0x28>
 800ed12:	460b      	mov	r3, r1
 800ed14:	e7f1      	b.n	800ecfa <__sccl+0x2e>
 800ed16:	786e      	ldrb	r6, [r5, #1]
 800ed18:	2e5d      	cmp	r6, #93	; 0x5d
 800ed1a:	d0fa      	beq.n	800ed12 <__sccl+0x46>
 800ed1c:	42b3      	cmp	r3, r6
 800ed1e:	dcf8      	bgt.n	800ed12 <__sccl+0x46>
 800ed20:	3502      	adds	r5, #2
 800ed22:	4619      	mov	r1, r3
 800ed24:	3101      	adds	r1, #1
 800ed26:	428e      	cmp	r6, r1
 800ed28:	5462      	strb	r2, [r4, r1]
 800ed2a:	dcfb      	bgt.n	800ed24 <__sccl+0x58>
 800ed2c:	1af1      	subs	r1, r6, r3
 800ed2e:	3901      	subs	r1, #1
 800ed30:	1c58      	adds	r0, r3, #1
 800ed32:	42b3      	cmp	r3, r6
 800ed34:	bfa8      	it	ge
 800ed36:	2100      	movge	r1, #0
 800ed38:	1843      	adds	r3, r0, r1
 800ed3a:	e7e0      	b.n	800ecfe <__sccl+0x32>

0800ed3c <_strtoul_l.constprop.0>:
 800ed3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed40:	4f36      	ldr	r7, [pc, #216]	; (800ee1c <_strtoul_l.constprop.0+0xe0>)
 800ed42:	4686      	mov	lr, r0
 800ed44:	460d      	mov	r5, r1
 800ed46:	4628      	mov	r0, r5
 800ed48:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ed4c:	5de6      	ldrb	r6, [r4, r7]
 800ed4e:	f016 0608 	ands.w	r6, r6, #8
 800ed52:	d1f8      	bne.n	800ed46 <_strtoul_l.constprop.0+0xa>
 800ed54:	2c2d      	cmp	r4, #45	; 0x2d
 800ed56:	d12f      	bne.n	800edb8 <_strtoul_l.constprop.0+0x7c>
 800ed58:	782c      	ldrb	r4, [r5, #0]
 800ed5a:	2601      	movs	r6, #1
 800ed5c:	1c85      	adds	r5, r0, #2
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d057      	beq.n	800ee12 <_strtoul_l.constprop.0+0xd6>
 800ed62:	2b10      	cmp	r3, #16
 800ed64:	d109      	bne.n	800ed7a <_strtoul_l.constprop.0+0x3e>
 800ed66:	2c30      	cmp	r4, #48	; 0x30
 800ed68:	d107      	bne.n	800ed7a <_strtoul_l.constprop.0+0x3e>
 800ed6a:	7828      	ldrb	r0, [r5, #0]
 800ed6c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ed70:	2858      	cmp	r0, #88	; 0x58
 800ed72:	d149      	bne.n	800ee08 <_strtoul_l.constprop.0+0xcc>
 800ed74:	786c      	ldrb	r4, [r5, #1]
 800ed76:	2310      	movs	r3, #16
 800ed78:	3502      	adds	r5, #2
 800ed7a:	f04f 38ff 	mov.w	r8, #4294967295
 800ed7e:	2700      	movs	r7, #0
 800ed80:	fbb8 f8f3 	udiv	r8, r8, r3
 800ed84:	fb03 f908 	mul.w	r9, r3, r8
 800ed88:	ea6f 0909 	mvn.w	r9, r9
 800ed8c:	4638      	mov	r0, r7
 800ed8e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ed92:	f1bc 0f09 	cmp.w	ip, #9
 800ed96:	d814      	bhi.n	800edc2 <_strtoul_l.constprop.0+0x86>
 800ed98:	4664      	mov	r4, ip
 800ed9a:	42a3      	cmp	r3, r4
 800ed9c:	dd22      	ble.n	800ede4 <_strtoul_l.constprop.0+0xa8>
 800ed9e:	2f00      	cmp	r7, #0
 800eda0:	db1d      	blt.n	800edde <_strtoul_l.constprop.0+0xa2>
 800eda2:	4580      	cmp	r8, r0
 800eda4:	d31b      	bcc.n	800edde <_strtoul_l.constprop.0+0xa2>
 800eda6:	d101      	bne.n	800edac <_strtoul_l.constprop.0+0x70>
 800eda8:	45a1      	cmp	r9, r4
 800edaa:	db18      	blt.n	800edde <_strtoul_l.constprop.0+0xa2>
 800edac:	fb00 4003 	mla	r0, r0, r3, r4
 800edb0:	2701      	movs	r7, #1
 800edb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800edb6:	e7ea      	b.n	800ed8e <_strtoul_l.constprop.0+0x52>
 800edb8:	2c2b      	cmp	r4, #43	; 0x2b
 800edba:	bf04      	itt	eq
 800edbc:	782c      	ldrbeq	r4, [r5, #0]
 800edbe:	1c85      	addeq	r5, r0, #2
 800edc0:	e7cd      	b.n	800ed5e <_strtoul_l.constprop.0+0x22>
 800edc2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800edc6:	f1bc 0f19 	cmp.w	ip, #25
 800edca:	d801      	bhi.n	800edd0 <_strtoul_l.constprop.0+0x94>
 800edcc:	3c37      	subs	r4, #55	; 0x37
 800edce:	e7e4      	b.n	800ed9a <_strtoul_l.constprop.0+0x5e>
 800edd0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800edd4:	f1bc 0f19 	cmp.w	ip, #25
 800edd8:	d804      	bhi.n	800ede4 <_strtoul_l.constprop.0+0xa8>
 800edda:	3c57      	subs	r4, #87	; 0x57
 800eddc:	e7dd      	b.n	800ed9a <_strtoul_l.constprop.0+0x5e>
 800edde:	f04f 37ff 	mov.w	r7, #4294967295
 800ede2:	e7e6      	b.n	800edb2 <_strtoul_l.constprop.0+0x76>
 800ede4:	2f00      	cmp	r7, #0
 800ede6:	da07      	bge.n	800edf8 <_strtoul_l.constprop.0+0xbc>
 800ede8:	2322      	movs	r3, #34	; 0x22
 800edea:	f8ce 3000 	str.w	r3, [lr]
 800edee:	f04f 30ff 	mov.w	r0, #4294967295
 800edf2:	b932      	cbnz	r2, 800ee02 <_strtoul_l.constprop.0+0xc6>
 800edf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800edf8:	b106      	cbz	r6, 800edfc <_strtoul_l.constprop.0+0xc0>
 800edfa:	4240      	negs	r0, r0
 800edfc:	2a00      	cmp	r2, #0
 800edfe:	d0f9      	beq.n	800edf4 <_strtoul_l.constprop.0+0xb8>
 800ee00:	b107      	cbz	r7, 800ee04 <_strtoul_l.constprop.0+0xc8>
 800ee02:	1e69      	subs	r1, r5, #1
 800ee04:	6011      	str	r1, [r2, #0]
 800ee06:	e7f5      	b.n	800edf4 <_strtoul_l.constprop.0+0xb8>
 800ee08:	2430      	movs	r4, #48	; 0x30
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d1b5      	bne.n	800ed7a <_strtoul_l.constprop.0+0x3e>
 800ee0e:	2308      	movs	r3, #8
 800ee10:	e7b3      	b.n	800ed7a <_strtoul_l.constprop.0+0x3e>
 800ee12:	2c30      	cmp	r4, #48	; 0x30
 800ee14:	d0a9      	beq.n	800ed6a <_strtoul_l.constprop.0+0x2e>
 800ee16:	230a      	movs	r3, #10
 800ee18:	e7af      	b.n	800ed7a <_strtoul_l.constprop.0+0x3e>
 800ee1a:	bf00      	nop
 800ee1c:	0800f37b 	.word	0x0800f37b

0800ee20 <_strtoul_r>:
 800ee20:	f7ff bf8c 	b.w	800ed3c <_strtoul_l.constprop.0>

0800ee24 <__submore>:
 800ee24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee28:	460c      	mov	r4, r1
 800ee2a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ee2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee30:	4299      	cmp	r1, r3
 800ee32:	d11d      	bne.n	800ee70 <__submore+0x4c>
 800ee34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ee38:	f7fc fe2a 	bl	800ba90 <_malloc_r>
 800ee3c:	b918      	cbnz	r0, 800ee46 <__submore+0x22>
 800ee3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ee42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee4a:	63a3      	str	r3, [r4, #56]	; 0x38
 800ee4c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ee50:	6360      	str	r0, [r4, #52]	; 0x34
 800ee52:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ee56:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ee5a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ee5e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ee62:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ee66:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ee6a:	6020      	str	r0, [r4, #0]
 800ee6c:	2000      	movs	r0, #0
 800ee6e:	e7e8      	b.n	800ee42 <__submore+0x1e>
 800ee70:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ee72:	0077      	lsls	r7, r6, #1
 800ee74:	463a      	mov	r2, r7
 800ee76:	f000 f843 	bl	800ef00 <_realloc_r>
 800ee7a:	4605      	mov	r5, r0
 800ee7c:	2800      	cmp	r0, #0
 800ee7e:	d0de      	beq.n	800ee3e <__submore+0x1a>
 800ee80:	eb00 0806 	add.w	r8, r0, r6
 800ee84:	4601      	mov	r1, r0
 800ee86:	4632      	mov	r2, r6
 800ee88:	4640      	mov	r0, r8
 800ee8a:	f7fc fd7f 	bl	800b98c <memcpy>
 800ee8e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ee92:	f8c4 8000 	str.w	r8, [r4]
 800ee96:	e7e9      	b.n	800ee6c <__submore+0x48>

0800ee98 <_fstat_r>:
 800ee98:	b538      	push	{r3, r4, r5, lr}
 800ee9a:	4d07      	ldr	r5, [pc, #28]	; (800eeb8 <_fstat_r+0x20>)
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	4604      	mov	r4, r0
 800eea0:	4608      	mov	r0, r1
 800eea2:	4611      	mov	r1, r2
 800eea4:	602b      	str	r3, [r5, #0]
 800eea6:	f7f3 ff4e 	bl	8002d46 <_fstat>
 800eeaa:	1c43      	adds	r3, r0, #1
 800eeac:	d102      	bne.n	800eeb4 <_fstat_r+0x1c>
 800eeae:	682b      	ldr	r3, [r5, #0]
 800eeb0:	b103      	cbz	r3, 800eeb4 <_fstat_r+0x1c>
 800eeb2:	6023      	str	r3, [r4, #0]
 800eeb4:	bd38      	pop	{r3, r4, r5, pc}
 800eeb6:	bf00      	nop
 800eeb8:	20003624 	.word	0x20003624

0800eebc <_isatty_r>:
 800eebc:	b538      	push	{r3, r4, r5, lr}
 800eebe:	4d06      	ldr	r5, [pc, #24]	; (800eed8 <_isatty_r+0x1c>)
 800eec0:	2300      	movs	r3, #0
 800eec2:	4604      	mov	r4, r0
 800eec4:	4608      	mov	r0, r1
 800eec6:	602b      	str	r3, [r5, #0]
 800eec8:	f7f3 ff4d 	bl	8002d66 <_isatty>
 800eecc:	1c43      	adds	r3, r0, #1
 800eece:	d102      	bne.n	800eed6 <_isatty_r+0x1a>
 800eed0:	682b      	ldr	r3, [r5, #0]
 800eed2:	b103      	cbz	r3, 800eed6 <_isatty_r+0x1a>
 800eed4:	6023      	str	r3, [r4, #0]
 800eed6:	bd38      	pop	{r3, r4, r5, pc}
 800eed8:	20003624 	.word	0x20003624

0800eedc <__ascii_mbtowc>:
 800eedc:	b082      	sub	sp, #8
 800eede:	b901      	cbnz	r1, 800eee2 <__ascii_mbtowc+0x6>
 800eee0:	a901      	add	r1, sp, #4
 800eee2:	b142      	cbz	r2, 800eef6 <__ascii_mbtowc+0x1a>
 800eee4:	b14b      	cbz	r3, 800eefa <__ascii_mbtowc+0x1e>
 800eee6:	7813      	ldrb	r3, [r2, #0]
 800eee8:	600b      	str	r3, [r1, #0]
 800eeea:	7812      	ldrb	r2, [r2, #0]
 800eeec:	1e10      	subs	r0, r2, #0
 800eeee:	bf18      	it	ne
 800eef0:	2001      	movne	r0, #1
 800eef2:	b002      	add	sp, #8
 800eef4:	4770      	bx	lr
 800eef6:	4610      	mov	r0, r2
 800eef8:	e7fb      	b.n	800eef2 <__ascii_mbtowc+0x16>
 800eefa:	f06f 0001 	mvn.w	r0, #1
 800eefe:	e7f8      	b.n	800eef2 <__ascii_mbtowc+0x16>

0800ef00 <_realloc_r>:
 800ef00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef04:	4680      	mov	r8, r0
 800ef06:	4614      	mov	r4, r2
 800ef08:	460e      	mov	r6, r1
 800ef0a:	b921      	cbnz	r1, 800ef16 <_realloc_r+0x16>
 800ef0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef10:	4611      	mov	r1, r2
 800ef12:	f7fc bdbd 	b.w	800ba90 <_malloc_r>
 800ef16:	b92a      	cbnz	r2, 800ef24 <_realloc_r+0x24>
 800ef18:	f7fc fd4e 	bl	800b9b8 <_free_r>
 800ef1c:	4625      	mov	r5, r4
 800ef1e:	4628      	mov	r0, r5
 800ef20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef24:	f000 f828 	bl	800ef78 <_malloc_usable_size_r>
 800ef28:	4284      	cmp	r4, r0
 800ef2a:	4607      	mov	r7, r0
 800ef2c:	d802      	bhi.n	800ef34 <_realloc_r+0x34>
 800ef2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ef32:	d812      	bhi.n	800ef5a <_realloc_r+0x5a>
 800ef34:	4621      	mov	r1, r4
 800ef36:	4640      	mov	r0, r8
 800ef38:	f7fc fdaa 	bl	800ba90 <_malloc_r>
 800ef3c:	4605      	mov	r5, r0
 800ef3e:	2800      	cmp	r0, #0
 800ef40:	d0ed      	beq.n	800ef1e <_realloc_r+0x1e>
 800ef42:	42bc      	cmp	r4, r7
 800ef44:	4622      	mov	r2, r4
 800ef46:	4631      	mov	r1, r6
 800ef48:	bf28      	it	cs
 800ef4a:	463a      	movcs	r2, r7
 800ef4c:	f7fc fd1e 	bl	800b98c <memcpy>
 800ef50:	4631      	mov	r1, r6
 800ef52:	4640      	mov	r0, r8
 800ef54:	f7fc fd30 	bl	800b9b8 <_free_r>
 800ef58:	e7e1      	b.n	800ef1e <_realloc_r+0x1e>
 800ef5a:	4635      	mov	r5, r6
 800ef5c:	e7df      	b.n	800ef1e <_realloc_r+0x1e>

0800ef5e <__ascii_wctomb>:
 800ef5e:	b149      	cbz	r1, 800ef74 <__ascii_wctomb+0x16>
 800ef60:	2aff      	cmp	r2, #255	; 0xff
 800ef62:	bf85      	ittet	hi
 800ef64:	238a      	movhi	r3, #138	; 0x8a
 800ef66:	6003      	strhi	r3, [r0, #0]
 800ef68:	700a      	strbls	r2, [r1, #0]
 800ef6a:	f04f 30ff 	movhi.w	r0, #4294967295
 800ef6e:	bf98      	it	ls
 800ef70:	2001      	movls	r0, #1
 800ef72:	4770      	bx	lr
 800ef74:	4608      	mov	r0, r1
 800ef76:	4770      	bx	lr

0800ef78 <_malloc_usable_size_r>:
 800ef78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef7c:	1f18      	subs	r0, r3, #4
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	bfbc      	itt	lt
 800ef82:	580b      	ldrlt	r3, [r1, r0]
 800ef84:	18c0      	addlt	r0, r0, r3
 800ef86:	4770      	bx	lr

0800ef88 <_init>:
 800ef88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef8a:	bf00      	nop
 800ef8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef8e:	bc08      	pop	{r3}
 800ef90:	469e      	mov	lr, r3
 800ef92:	4770      	bx	lr

0800ef94 <_fini>:
 800ef94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef96:	bf00      	nop
 800ef98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef9a:	bc08      	pop	{r3}
 800ef9c:	469e      	mov	lr, r3
 800ef9e:	4770      	bx	lr
