
Temperture_Monitoring_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08008ec0  08008ec0  00018ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009008  08009008  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009008  08009008  00019008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009010  08009010  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08009010  08009010  00019010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800901c  0800901c  0001901c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000032d4  20000074  08009098  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003348  08009098  00023348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020658  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045ad  00000000  00000000  000406fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001948  00000000  00000000  00044cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b0  00000000  00000000  000465f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000056f9  00000000  00000000  00047da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cec8  00000000  00000000  0004d4a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102a95  00000000  00000000  0006a369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016cdfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007134  00000000  00000000  0016ce50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008ea8 	.word	0x08008ea8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008ea8 	.word	0x08008ea8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <_ZN3DHTC1EP12GPIO_TypeDeft>:
extern uint8_t DHT_data[5];
 int delay=0;
//extern int startdelay;
extern TIM_HandleTypeDef htim1;

DHT::DHT(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	4613      	mov	r3, r2
 8000580:	80fb      	strh	r3, [r7, #6]
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	2200      	movs	r2, #0
 8000586:	60da      	str	r2, [r3, #12]
	_GPIOx = GPIOx;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	68ba      	ldr	r2, [r7, #8]
 800058c:	601a      	str	r2, [r3, #0]
	_GPIO_Pin = GPIO_Pin;
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	88fa      	ldrh	r2, [r7, #6]
 8000592:	809a      	strh	r2, [r3, #4]
	dhtPin = WAKING;
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	2200      	movs	r2, #0
 8000598:	719a      	strb	r2, [r3, #6]
	bitcount=0;
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]

}
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4618      	mov	r0, r3
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <_ZN3DHT11setGpioExtiEv>:

 void DHT::setGpioExti()
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b088      	sub	sp, #32
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpioStruct = {0};
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]
	gpioStruct.Pin = _GPIO_Pin;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	889b      	ldrh	r3, [r3, #4]
 80005ca:	60fb      	str	r3, [r7, #12]
	gpioStruct.Mode = GPIO_MODE_IT_FALLING;
 80005cc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005d0:	613b      	str	r3, [r7, #16]
	gpioStruct.Pull = GPIO_PULLUP;
 80005d2:	2301      	movs	r3, #1
 80005d4:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(_GPIOx, &gpioStruct);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f107 020c 	add.w	r2, r7, #12
 80005de:	4611      	mov	r1, r2
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 f839 	bl	8001658 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80005e6:	2017      	movs	r0, #23
 80005e8:	f000 ffa8 	bl	800153c <HAL_NVIC_EnableIRQ>
}
 80005ec:	bf00      	nop
 80005ee:	3720      	adds	r7, #32
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <_ZN3DHT13Dht_readAsyncEv>:

void DHT::Dht_readAsync()
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpioStruct;
	gpioStruct.Pin = pin_4_Pin;
 80005fc:	2320      	movs	r3, #32
 80005fe:	60fb      	str	r3, [r7, #12]
	gpioStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000600:	2301      	movs	r3, #1
 8000602:	613b      	str	r3, [r7, #16]
	gpioStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
	gpioStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000608:	2300      	movs	r3, #0
 800060a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(pin_4_GPIO_Port, &gpioStruct);
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	4619      	mov	r1, r3
 8000612:	480b      	ldr	r0, [pc, #44]	; (8000640 <_ZN3DHT13Dht_readAsyncEv+0x4c>)
 8000614:	f001 f820 	bl	8001658 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(pin_4_GPIO_Port, pin_4_Pin,GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	2120      	movs	r1, #32
 800061c:	4808      	ldr	r0, [pc, #32]	; (8000640 <_ZN3DHT13Dht_readAsyncEv+0x4c>)
 800061e:	f001 f9c5 	bl	80019ac <HAL_GPIO_WritePin>
	HAL_Delay(18);
 8000622:	2012      	movs	r0, #18
 8000624:	f000 fe92 	bl	800134c <HAL_Delay>
	HAL_GPIO_WritePin(pin_4_GPIO_Port, pin_4_Pin,GPIO_PIN_SET);
 8000628:	2201      	movs	r2, #1
 800062a:	2120      	movs	r1, #32
 800062c:	4804      	ldr	r0, [pc, #16]	; (8000640 <_ZN3DHT13Dht_readAsyncEv+0x4c>)
 800062e:	f001 f9bd 	bl	80019ac <HAL_GPIO_WritePin>
	setGpioExti();
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f7ff ffbb 	bl	80005ae <_ZN3DHT11setGpioExtiEv>

}
 8000638:	bf00      	nop
 800063a:	3720      	adds	r7, #32
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	48000400 	.word	0x48000400

08000644 <_ZN3DHT19Dht_onGpioInterruptEt>:

void DHT::Dht_onGpioInterrupt(uint16_t pin)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	460b      	mov	r3, r1
 800064e:	807b      	strh	r3, [r7, #2]
	uint32_t counter;
	if(_GPIO_Pin==pin){
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	889b      	ldrh	r3, [r3, #4]
 8000654:	887a      	ldrh	r2, [r7, #2]
 8000656:	429a      	cmp	r2, r3
 8000658:	f040 8082 	bne.w	8000760 <_ZN3DHT19Dht_onGpioInterruptEt+0x11c>
		switch (dhtPin){
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	799b      	ldrb	r3, [r3, #6]
 8000660:	2b04      	cmp	r3, #4
 8000662:	d879      	bhi.n	8000758 <_ZN3DHT19Dht_onGpioInterruptEt+0x114>
 8000664:	a201      	add	r2, pc, #4	; (adr r2, 800066c <_ZN3DHT19Dht_onGpioInterruptEt+0x28>)
 8000666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066a:	bf00      	nop
 800066c:	08000681 	.word	0x08000681
 8000670:	08000689 	.word	0x08000689
 8000674:	08000691 	.word	0x08000691
 8000678:	08000699 	.word	0x08000699
 800067c:	08000751 	.word	0x08000751
		case WAKING:
			dhtPin=WAIT_RESPONSE_START;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2201      	movs	r2, #1
 8000684:	719a      	strb	r2, [r3, #6]
			break;
 8000686:	e067      	b.n	8000758 <_ZN3DHT19Dht_onGpioInterruptEt+0x114>
		case WAIT_RESPONSE_START:
			dhtPin=WAIT_RESPONSE_STOP;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2202      	movs	r2, #2
 800068c:	719a      	strb	r2, [r3, #6]
			break;
 800068e:	e063      	b.n	8000758 <_ZN3DHT19Dht_onGpioInterruptEt+0x114>
		case WAIT_RESPONSE_STOP:
			dhtPin=RECEIVING_BITS;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2203      	movs	r2, #3
 8000694:	719a      	strb	r2, [r3, #6]
			break;
 8000696:	e05f      	b.n	8000758 <_ZN3DHT19Dht_onGpioInterruptEt+0x114>
		case RECEIVING_BITS:
			counter = __HAL_TIM_GET_COUNTER(&htim1);
 8000698:	4b34      	ldr	r3, [pc, #208]	; (800076c <_ZN3DHT19Dht_onGpioInterruptEt+0x128>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	60fb      	str	r3, [r7, #12]
			if(counter<=100)
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	2b64      	cmp	r3, #100	; 0x64
 80006a4:	d812      	bhi.n	80006cc <_ZN3DHT19Dht_onGpioInterruptEt+0x88>
			{
				dht_byte&= ~(1<<(7-p));
 80006a6:	4b32      	ldr	r3, [pc, #200]	; (8000770 <_ZN3DHT19Dht_onGpioInterruptEt+0x12c>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	f1c3 0307 	rsb	r3, r3, #7
 80006ae:	2201      	movs	r2, #1
 80006b0:	fa02 f303 	lsl.w	r3, r2, r3
 80006b4:	b25b      	sxtb	r3, r3
 80006b6:	43db      	mvns	r3, r3
 80006b8:	b25a      	sxtb	r2, r3
 80006ba:	4b2e      	ldr	r3, [pc, #184]	; (8000774 <_ZN3DHT19Dht_onGpioInterruptEt+0x130>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	b25b      	sxtb	r3, r3
 80006c0:	4013      	ands	r3, r2
 80006c2:	b25b      	sxtb	r3, r3
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4b2b      	ldr	r3, [pc, #172]	; (8000774 <_ZN3DHT19Dht_onGpioInterruptEt+0x130>)
 80006c8:	701a      	strb	r2, [r3, #0]
 80006ca:	e00f      	b.n	80006ec <_ZN3DHT19Dht_onGpioInterruptEt+0xa8>
			}
			else dht_byte|= (1<<(7-p));
 80006cc:	4b28      	ldr	r3, [pc, #160]	; (8000770 <_ZN3DHT19Dht_onGpioInterruptEt+0x12c>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	f1c3 0307 	rsb	r3, r3, #7
 80006d4:	2201      	movs	r2, #1
 80006d6:	fa02 f303 	lsl.w	r3, r2, r3
 80006da:	b25a      	sxtb	r2, r3
 80006dc:	4b25      	ldr	r3, [pc, #148]	; (8000774 <_ZN3DHT19Dht_onGpioInterruptEt+0x130>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	b25b      	sxtb	r3, r3
 80006e2:	4313      	orrs	r3, r2
 80006e4:	b25b      	sxtb	r3, r3
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	4b22      	ldr	r3, [pc, #136]	; (8000774 <_ZN3DHT19Dht_onGpioInterruptEt+0x130>)
 80006ea:	701a      	strb	r2, [r3, #0]

			p++;
 80006ec:	4b20      	ldr	r3, [pc, #128]	; (8000770 <_ZN3DHT19Dht_onGpioInterruptEt+0x12c>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	3301      	adds	r3, #1
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	4b1e      	ldr	r3, [pc, #120]	; (8000770 <_ZN3DHT19Dht_onGpioInterruptEt+0x12c>)
 80006f6:	701a      	strb	r2, [r3, #0]
			bitcount++;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	1c5a      	adds	r2, r3, #1
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	609a      	str	r2, [r3, #8]

			if(bitcount%8==0){
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	689b      	ldr	r3, [r3, #8]
 8000706:	f003 0307 	and.w	r3, r3, #7
 800070a:	2b00      	cmp	r3, #0
 800070c:	d112      	bne.n	8000734 <_ZN3DHT19Dht_onGpioInterruptEt+0xf0>
				DHT_data[m]=dht_byte;
 800070e:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <_ZN3DHT19Dht_onGpioInterruptEt+0x134>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	4b17      	ldr	r3, [pc, #92]	; (8000774 <_ZN3DHT19Dht_onGpioInterruptEt+0x130>)
 8000716:	7819      	ldrb	r1, [r3, #0]
 8000718:	4b18      	ldr	r3, [pc, #96]	; (800077c <_ZN3DHT19Dht_onGpioInterruptEt+0x138>)
 800071a:	5499      	strb	r1, [r3, r2]
				dht_byte=0;
 800071c:	4b15      	ldr	r3, [pc, #84]	; (8000774 <_ZN3DHT19Dht_onGpioInterruptEt+0x130>)
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
				m++;
 8000722:	4b15      	ldr	r3, [pc, #84]	; (8000778 <_ZN3DHT19Dht_onGpioInterruptEt+0x134>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	3301      	adds	r3, #1
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4b13      	ldr	r3, [pc, #76]	; (8000778 <_ZN3DHT19Dht_onGpioInterruptEt+0x134>)
 800072c:	701a      	strb	r2, [r3, #0]
				p=0;
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <_ZN3DHT19Dht_onGpioInterruptEt+0x12c>)
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
			}

			if(bitcount>=40){
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	689b      	ldr	r3, [r3, #8]
 8000738:	2b27      	cmp	r3, #39	; 0x27
 800073a:	dd0c      	ble.n	8000756 <_ZN3DHT19Dht_onGpioInterruptEt+0x112>
				bitcount=0;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
				m=0;
 8000742:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <_ZN3DHT19Dht_onGpioInterruptEt+0x134>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]

				dhtPin=DATA_RECEIVED;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2204      	movs	r2, #4
 800074c:	719a      	strb	r2, [r3, #6]
			}
			break;
 800074e:	e002      	b.n	8000756 <_ZN3DHT19Dht_onGpioInterruptEt+0x112>
		case DATA_RECEIVED:
			counter = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
			break;
 8000754:	e000      	b.n	8000758 <_ZN3DHT19Dht_onGpioInterruptEt+0x114>
			break;
 8000756:	bf00      	nop
		}
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000758:	4b04      	ldr	r3, [pc, #16]	; (800076c <_ZN3DHT19Dht_onGpioInterruptEt+0x128>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2200      	movs	r2, #0
 800075e:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8000760:	bf00      	nop
 8000762:	3714      	adds	r7, #20
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	200000e8 	.word	0x200000e8
 8000770:	20000092 	.word	0x20000092
 8000774:	20000090 	.word	0x20000090
 8000778:	20000091 	.word	0x20000091
 800077c:	20000264 	.word	0x20000264

08000780 <_ZN3DHT11Dht_hasDataEv>:

int DHT::Dht_hasData(){
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	if (dhtPin==DATA_RECEIVED){
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	799b      	ldrb	r3, [r3, #6]
 800078c:	2b04      	cmp	r3, #4
 800078e:	d104      	bne.n	800079a <_ZN3DHT11Dht_hasDataEv+0x1a>
//		startdelay=0;
//		delay =0;
		dhtPin=WAKING;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2200      	movs	r2, #0
 8000794:	719a      	strb	r2, [r3, #6]
		return 1;
 8000796:	2301      	movs	r3, #1
 8000798:	e000      	b.n	800079c <_ZN3DHT11Dht_hasDataEv+0x1c>
	}
	return 0;
 800079a:	2300      	movs	r3, #0
}
 800079c:	4618      	mov	r0, r3
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <_ZN12CliContainerD1Ev>:
class CliContainer{
private:
	clicommand_entry * commands[20];
	int funcounter = 0;
public:
	~CliContainer(){}
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4618      	mov	r0, r3
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <_ZN12CliContainerC1Ev>:
class CliContainer{
 80007be:	b480      	push	{r7}
 80007c0:	b083      	sub	sp, #12
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2200      	movs	r2, #0
 80007ca:	651a      	str	r2, [r3, #80]	; 0x50
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4618      	mov	r0, r3
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
	...

080007dc <_Z41__static_initialization_and_destruction_0ii>:
void handleCommand() {
	char cmd[20];
	char param[20];

	container.doCommand(cmd,param);
}
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d107      	bne.n	80007fc <_Z41__static_initialization_and_destruction_0ii+0x20>
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d102      	bne.n	80007fc <_Z41__static_initialization_and_destruction_0ii+0x20>
CliContainer container;
 80007f6:	4809      	ldr	r0, [pc, #36]	; (800081c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80007f8:	f7ff ffe1 	bl	80007be <_ZN12CliContainerC1Ev>
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d107      	bne.n	8000812 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000808:	4293      	cmp	r3, r2
 800080a:	d102      	bne.n	8000812 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800080c:	4803      	ldr	r0, [pc, #12]	; (800081c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800080e:	f7ff ffcb 	bl	80007a8 <_ZN12CliContainerD1Ev>
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000094 	.word	0x20000094

08000820 <_GLOBAL__sub_I_cmdbuffer>:
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
 8000824:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000828:	2001      	movs	r0, #1
 800082a:	f7ff ffd7 	bl	80007dc <_Z41__static_initialization_and_destruction_0ii>
 800082e:	bd80      	pop	{r7, pc}

08000830 <_GLOBAL__sub_D_cmdbuffer>:
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
 8000834:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000838:	2000      	movs	r0, #0
 800083a:	f7ff ffcf 	bl	80007dc <_Z41__static_initialization_and_destruction_0ii>
 800083e:	bd80      	pop	{r7, pc}

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000844:	f000 fd42 	bl	80012cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000848:	f000 f820 	bl	800088c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084c:	f000 f984 	bl	8000b58 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000850:	f000 f952 	bl	8000af8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000854:	f000 f8c0 	bl	80009d8 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000858:	f000 f918 	bl	8000a8c <MX_TIM6_Init>
  MX_TIM1_Init();
 800085c:	f000 f868 	bl	8000930 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  mymaininit();
 8000860:	f000 fa50 	bl	8000d04 <mymaininit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000864:	f004 fe54 	bl	8005510 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000868:	4a05      	ldr	r2, [pc, #20]	; (8000880 <main+0x40>)
 800086a:	2100      	movs	r1, #0
 800086c:	4805      	ldr	r0, [pc, #20]	; (8000884 <main+0x44>)
 800086e:	f004 fe99 	bl	80055a4 <osThreadNew>
 8000872:	4603      	mov	r3, r0
 8000874:	4a04      	ldr	r2, [pc, #16]	; (8000888 <main+0x48>)
 8000876:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000878:	f004 fe6e 	bl	8005558 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800087c:	e7fe      	b.n	800087c <main+0x3c>
 800087e:	bf00      	nop
 8000880:	08008f04 	.word	0x08008f04
 8000884:	08000c65 	.word	0x08000c65
 8000888:	20000250 	.word	0x20000250

0800088c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b096      	sub	sp, #88	; 0x58
 8000890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	2244      	movs	r2, #68	; 0x44
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f007 fb6e 	bl	8007f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a0:	463b      	mov	r3, r7
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008b2:	f001 f8b9 	bl	8001a28 <HAL_PWREx_ControlVoltageScaling>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008bc:	f000 f9ee 	bl	8000c9c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c0:	2302      	movs	r3, #2
 80008c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ca:	2310      	movs	r3, #16
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ce:	2302      	movs	r3, #2
 80008d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008d2:	2302      	movs	r3, #2
 80008d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008d6:	2301      	movs	r3, #1
 80008d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008da:	230a      	movs	r3, #10
 80008dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008de:	2307      	movs	r3, #7
 80008e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008e2:	2302      	movs	r3, #2
 80008e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008e6:	2302      	movs	r3, #2
 80008e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4618      	mov	r0, r3
 80008f0:	f001 f8f0 	bl	8001ad4 <HAL_RCC_OscConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008fa:	f000 f9cf 	bl	8000c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fe:	230f      	movs	r3, #15
 8000900:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000902:	2303      	movs	r3, #3
 8000904:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000912:	463b      	mov	r3, r7
 8000914:	2104      	movs	r1, #4
 8000916:	4618      	mov	r0, r3
 8000918:	f001 fcb8 	bl	800228c <HAL_RCC_ClockConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000922:	f000 f9bb 	bl	8000c9c <Error_Handler>
  }
}
 8000926:	bf00      	nop
 8000928:	3758      	adds	r7, #88	; 0x58
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000936:	f107 0310 	add.w	r3, r7, #16
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800094e:	4b20      	ldr	r3, [pc, #128]	; (80009d0 <MX_TIM1_Init+0xa0>)
 8000950:	4a20      	ldr	r2, [pc, #128]	; (80009d4 <MX_TIM1_Init+0xa4>)
 8000952:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8000954:	4b1e      	ldr	r3, [pc, #120]	; (80009d0 <MX_TIM1_Init+0xa0>)
 8000956:	224f      	movs	r2, #79	; 0x4f
 8000958:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095a:	4b1d      	ldr	r3, [pc, #116]	; (80009d0 <MX_TIM1_Init+0xa0>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000960:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <MX_TIM1_Init+0xa0>)
 8000962:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000966:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000968:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <MX_TIM1_Init+0xa0>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800096e:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <MX_TIM1_Init+0xa0>)
 8000970:	2200      	movs	r2, #0
 8000972:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000974:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <MX_TIM1_Init+0xa0>)
 8000976:	2200      	movs	r2, #0
 8000978:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800097a:	4815      	ldr	r0, [pc, #84]	; (80009d0 <MX_TIM1_Init+0xa0>)
 800097c:	f002 fb98 	bl	80030b0 <HAL_TIM_Base_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000986:	f000 f989 	bl	8000c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800098a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800098e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000990:	f107 0310 	add.w	r3, r7, #16
 8000994:	4619      	mov	r1, r3
 8000996:	480e      	ldr	r0, [pc, #56]	; (80009d0 <MX_TIM1_Init+0xa0>)
 8000998:	f002 fedc 	bl	8003754 <HAL_TIM_ConfigClockSource>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80009a2:	f000 f97b 	bl	8000c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	4619      	mov	r1, r3
 80009b6:	4806      	ldr	r0, [pc, #24]	; (80009d0 <MX_TIM1_Init+0xa0>)
 80009b8:	f003 fbc8 	bl	800414c <HAL_TIMEx_MasterConfigSynchronization>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80009c2:	f000 f96b 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	3720      	adds	r7, #32
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200000e8 	.word	0x200000e8
 80009d4:	40012c00 	.word	0x40012c00

080009d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ea:	463b      	mov	r3, r7
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
 80009f8:	615a      	str	r2, [r3, #20]
 80009fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009fc:	4b21      	ldr	r3, [pc, #132]	; (8000a84 <MX_TIM3_Init+0xac>)
 80009fe:	4a22      	ldr	r2, [pc, #136]	; (8000a88 <MX_TIM3_Init+0xb0>)
 8000a00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 8000a02:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <MX_TIM3_Init+0xac>)
 8000a04:	f240 321f 	movw	r2, #799	; 0x31f
 8000a08:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0a:	4b1e      	ldr	r3, [pc, #120]	; (8000a84 <MX_TIM3_Init+0xac>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 8000a10:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <MX_TIM3_Init+0xac>)
 8000a12:	22c8      	movs	r2, #200	; 0xc8
 8000a14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a16:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <MX_TIM3_Init+0xac>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1c:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <MX_TIM3_Init+0xac>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a22:	4818      	ldr	r0, [pc, #96]	; (8000a84 <MX_TIM3_Init+0xac>)
 8000a24:	f002 fc0c 	bl	8003240 <HAL_TIM_PWM_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000a2e:	f000 f935 	bl	8000c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4810      	ldr	r0, [pc, #64]	; (8000a84 <MX_TIM3_Init+0xac>)
 8000a42:	f003 fb83 	bl	800414c <HAL_TIMEx_MasterConfigSynchronization>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000a4c:	f000 f926 	bl	8000c9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a50:	2360      	movs	r3, #96	; 0x60
 8000a52:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a60:	463b      	mov	r3, r7
 8000a62:	2200      	movs	r2, #0
 8000a64:	4619      	mov	r1, r3
 8000a66:	4807      	ldr	r0, [pc, #28]	; (8000a84 <MX_TIM3_Init+0xac>)
 8000a68:	f002 fd60 	bl	800352c <HAL_TIM_PWM_ConfigChannel>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000a72:	f000 f913 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a76:	4803      	ldr	r0, [pc, #12]	; (8000a84 <MX_TIM3_Init+0xac>)
 8000a78:	f000 fa2a 	bl	8000ed0 <HAL_TIM_MspPostInit>

}
 8000a7c:	bf00      	nop
 8000a7e:	3728      	adds	r7, #40	; 0x28
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000134 	.word	0x20000134
 8000a88:	40000400 	.word	0x40000400

08000a8c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <MX_TIM6_Init+0x64>)
 8000a9e:	4a15      	ldr	r2, [pc, #84]	; (8000af4 <MX_TIM6_Init+0x68>)
 8000aa0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8000aa2:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <MX_TIM6_Init+0x64>)
 8000aa4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000aa8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <MX_TIM6_Init+0x64>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <MX_TIM6_Init+0x64>)
 8000ab2:	220a      	movs	r2, #10
 8000ab4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <MX_TIM6_Init+0x64>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000abc:	480c      	ldr	r0, [pc, #48]	; (8000af0 <MX_TIM6_Init+0x64>)
 8000abe:	f002 faf7 	bl	80030b0 <HAL_TIM_Base_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000ac8:	f000 f8e8 	bl	8000c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000acc:	2300      	movs	r3, #0
 8000ace:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_TIM6_Init+0x64>)
 8000ada:	f003 fb37 	bl	800414c <HAL_TIMEx_MasterConfigSynchronization>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000ae4:	f000 f8da 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000180 	.word	0x20000180
 8000af4:	40001000 	.word	0x40001000

08000af8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <MX_USART2_UART_Init+0x58>)
 8000afe:	4a15      	ldr	r2, [pc, #84]	; (8000b54 <MX_USART2_UART_Init+0x5c>)
 8000b00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <MX_USART2_UART_Init+0x58>)
 8000b04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_USART2_UART_Init+0x58>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <MX_USART2_UART_Init+0x58>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_USART2_UART_Init+0x58>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_USART2_UART_Init+0x58>)
 8000b1e:	220c      	movs	r2, #12
 8000b20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <MX_USART2_UART_Init+0x58>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_USART2_UART_Init+0x58>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <MX_USART2_UART_Init+0x58>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_USART2_UART_Init+0x58>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_USART2_UART_Init+0x58>)
 8000b3c:	f003 fbac 	bl	8004298 <HAL_UART_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b46:	f000 f8a9 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200001cc 	.word	0x200001cc
 8000b54:	40004400 	.word	0x40004400

08000b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	; 0x28
 8000b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6e:	4b3a      	ldr	r3, [pc, #232]	; (8000c58 <MX_GPIO_Init+0x100>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	4a39      	ldr	r2, [pc, #228]	; (8000c58 <MX_GPIO_Init+0x100>)
 8000b74:	f043 0304 	orr.w	r3, r3, #4
 8000b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7a:	4b37      	ldr	r3, [pc, #220]	; (8000c58 <MX_GPIO_Init+0x100>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7e:	f003 0304 	and.w	r3, r3, #4
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b86:	4b34      	ldr	r3, [pc, #208]	; (8000c58 <MX_GPIO_Init+0x100>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8a:	4a33      	ldr	r2, [pc, #204]	; (8000c58 <MX_GPIO_Init+0x100>)
 8000b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b92:	4b31      	ldr	r3, [pc, #196]	; (8000c58 <MX_GPIO_Init+0x100>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	4b2e      	ldr	r3, [pc, #184]	; (8000c58 <MX_GPIO_Init+0x100>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba2:	4a2d      	ldr	r2, [pc, #180]	; (8000c58 <MX_GPIO_Init+0x100>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000baa:	4b2b      	ldr	r3, [pc, #172]	; (8000c58 <MX_GPIO_Init+0x100>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb6:	4b28      	ldr	r3, [pc, #160]	; (8000c58 <MX_GPIO_Init+0x100>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bba:	4a27      	ldr	r2, [pc, #156]	; (8000c58 <MX_GPIO_Init+0x100>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc2:	4b25      	ldr	r3, [pc, #148]	; (8000c58 <MX_GPIO_Init+0x100>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2120      	movs	r1, #32
 8000bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd6:	f000 fee9 	bl	80019ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000be0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	481a      	ldr	r0, [pc, #104]	; (8000c5c <MX_GPIO_Init+0x104>)
 8000bf2:	f000 fd31 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bf6:	2320      	movs	r3, #32
 8000bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c10:	f000 fd22 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pin : pin_4_Pin */
  GPIO_InitStruct.Pin = pin_4_Pin;
 8000c14:	2320      	movs	r3, #32
 8000c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c18:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(pin_4_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	480d      	ldr	r0, [pc, #52]	; (8000c60 <MX_GPIO_Init+0x108>)
 8000c2a:	f000 fd15 	bl	8001658 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2105      	movs	r1, #5
 8000c32:	2017      	movs	r0, #23
 8000c34:	f000 fc66 	bl	8001504 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c38:	2017      	movs	r0, #23
 8000c3a:	f000 fc7f 	bl	800153c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2105      	movs	r1, #5
 8000c42:	2028      	movs	r0, #40	; 0x28
 8000c44:	f000 fc5e 	bl	8001504 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c48:	2028      	movs	r0, #40	; 0x28
 8000c4a:	f000 fc77 	bl	800153c <HAL_NVIC_EnableIRQ>

}
 8000c4e:	bf00      	nop
 8000c50:	3728      	adds	r7, #40	; 0x28
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	48000800 	.word	0x48000800
 8000c60:	48000400 	.word	0x48000400

08000c64 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  myloop();
 8000c6c:	f000 f866 	bl	8000d3c <myloop>
 8000c70:	e7fc      	b.n	8000c6c <StartDefaultTask+0x8>
	...

08000c74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a05      	ldr	r2, [pc, #20]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d101      	bne.n	8000c8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c86:	f000 fb41 	bl	800130c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  mycallback();
 8000c8a:	f000 f833 	bl	8000cf4 <mycallback>

  /* USER CODE END Callback 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40014400 	.word	0x40014400

08000c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
}
 8000ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <Error_Handler+0x8>
	...

08000ca8 <_write>:

DHT dht = DHT(GPIOB,pin_4_Pin);
uint8_t DHT_data[5];
int alarm_on = 0;

int _write(int fd, char *ptr, int len) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbc:	68b9      	ldr	r1, [r7, #8]
 8000cbe:	4804      	ldr	r0, [pc, #16]	; (8000cd0 <_write+0x28>)
 8000cc0:	f003 fb38 	bl	8004334 <HAL_UART_Transmit>
	return len;
 8000cc4:	687b      	ldr	r3, [r7, #4]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200001cc 	.word	0x200001cc

08000cd4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	80fb      	strh	r3, [r7, #6]
	dht.Dht_onGpioInterrupt(pin_4_Pin);
 8000cde:	2120      	movs	r1, #32
 8000ce0:	4803      	ldr	r0, [pc, #12]	; (8000cf0 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000ce2:	f7ff fcaf 	bl	8000644 <_ZN3DHT19Dht_onGpioInterruptEt>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000254 	.word	0x20000254

08000cf4 <mycallback>:
void mycallback(){
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0

}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
	...

08000d04 <mymaininit>:

void mymaininit()
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000d08:	2036      	movs	r0, #54	; 0x36
 8000d0a:	f000 fc17 	bl	800153c <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim3);
 8000d0e:	4807      	ldr	r0, [pc, #28]	; (8000d2c <mymaininit+0x28>)
 8000d10:	f002 fa26 	bl	8003160 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 8000d14:	4806      	ldr	r0, [pc, #24]	; (8000d30 <mymaininit+0x2c>)
 8000d16:	f002 fa23 	bl	8003160 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim1);
 8000d1a:	4806      	ldr	r0, [pc, #24]	; (8000d34 <mymaininit+0x30>)
 8000d1c:	f002 fa20 	bl	8003160 <HAL_TIM_Base_Start_IT>
	dht.Dht_readAsync();
 8000d20:	4805      	ldr	r0, [pc, #20]	; (8000d38 <mymaininit+0x34>)
 8000d22:	f7ff fc67 	bl	80005f4 <_ZN3DHT13Dht_readAsyncEv>

}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000134 	.word	0x20000134
 8000d30:	20000180 	.word	0x20000180
 8000d34:	200000e8 	.word	0x200000e8
 8000d38:	20000254 	.word	0x20000254

08000d3c <myloop>:

void myloop()
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
	if(dht.Dht_hasData()){
 8000d40:	480a      	ldr	r0, [pc, #40]	; (8000d6c <myloop+0x30>)
 8000d42:	f7ff fd1d 	bl	8000780 <_ZN3DHT11Dht_hasDataEv>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	bf14      	ite	ne
 8000d4c:	2301      	movne	r3, #1
 8000d4e:	2300      	moveq	r3, #0
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d008      	beq.n	8000d68 <myloop+0x2c>
			 printf("temp is : %d\n\r humid is : %d\r\n", DHT_data[2],DHT_data[0]);
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <myloop+0x34>)
 8000d58:	789b      	ldrb	r3, [r3, #2]
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <myloop+0x34>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	4804      	ldr	r0, [pc, #16]	; (8000d74 <myloop+0x38>)
 8000d64:	f007 f912 	bl	8007f8c <iprintf>
		}
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000254 	.word	0x20000254
 8000d70:	20000264 	.word	0x20000264
 8000d74:	08008ecc 	.word	0x08008ecc

08000d78 <_Z41__static_initialization_and_destruction_0ii>:
		FRAME_0,FRAME_1,
		FRAME_0,FRAME_1,
		FRAME_2,FRAME_2,FRAME_0,
		0

};
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d109      	bne.n	8000d9c <_Z41__static_initialization_and_destruction_0ii+0x24>
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d104      	bne.n	8000d9c <_Z41__static_initialization_and_destruction_0ii+0x24>
DHT dht = DHT(GPIOB,pin_4_Pin);
 8000d92:	2220      	movs	r2, #32
 8000d94:	4903      	ldr	r1, [pc, #12]	; (8000da4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8000d96:	4804      	ldr	r0, [pc, #16]	; (8000da8 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8000d98:	f7ff fbec 	bl	8000574 <_ZN3DHTC1EP12GPIO_TypeDeft>
};
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	48000400 	.word	0x48000400
 8000da8:	20000254 	.word	0x20000254

08000dac <_GLOBAL__sub_I_dht>:
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000db4:	2001      	movs	r0, #1
 8000db6:	f7ff ffdf 	bl	8000d78 <_Z41__static_initialization_and_destruction_0ii>
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <HAL_MspInit+0x4c>)
 8000dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dc6:	4a10      	ldr	r2, [pc, #64]	; (8000e08 <HAL_MspInit+0x4c>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6613      	str	r3, [r2, #96]	; 0x60
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <HAL_MspInit+0x4c>)
 8000dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <HAL_MspInit+0x4c>)
 8000ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dde:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <HAL_MspInit+0x4c>)
 8000de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de4:	6593      	str	r3, [r2, #88]	; 0x58
 8000de6:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <HAL_MspInit+0x4c>)
 8000de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	210f      	movs	r1, #15
 8000df6:	f06f 0001 	mvn.w	r0, #1
 8000dfa:	f000 fb83 	bl	8001504 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40021000 	.word	0x40021000

08000e0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a1a      	ldr	r2, [pc, #104]	; (8000e84 <HAL_TIM_Base_MspInit+0x78>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d114      	bne.n	8000e48 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <HAL_TIM_Base_MspInit+0x7c>)
 8000e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e22:	4a19      	ldr	r2, [pc, #100]	; (8000e88 <HAL_TIM_Base_MspInit+0x7c>)
 8000e24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e28:	6613      	str	r3, [r2, #96]	; 0x60
 8000e2a:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <HAL_TIM_Base_MspInit+0x7c>)
 8000e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2105      	movs	r1, #5
 8000e3a:	2019      	movs	r0, #25
 8000e3c:	f000 fb62 	bl	8001504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000e40:	2019      	movs	r0, #25
 8000e42:	f000 fb7b 	bl	800153c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000e46:	e018      	b.n	8000e7a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0f      	ldr	r2, [pc, #60]	; (8000e8c <HAL_TIM_Base_MspInit+0x80>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d113      	bne.n	8000e7a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e52:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <HAL_TIM_Base_MspInit+0x7c>)
 8000e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e56:	4a0c      	ldr	r2, [pc, #48]	; (8000e88 <HAL_TIM_Base_MspInit+0x7c>)
 8000e58:	f043 0310 	orr.w	r3, r3, #16
 8000e5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <HAL_TIM_Base_MspInit+0x7c>)
 8000e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e62:	f003 0310 	and.w	r3, r3, #16
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2105      	movs	r1, #5
 8000e6e:	2036      	movs	r0, #54	; 0x36
 8000e70:	f000 fb48 	bl	8001504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e74:	2036      	movs	r0, #54	; 0x36
 8000e76:	f000 fb61 	bl	800153c <HAL_NVIC_EnableIRQ>
}
 8000e7a:	bf00      	nop
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40012c00 	.word	0x40012c00
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40001000 	.word	0x40001000

08000e90 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <HAL_TIM_PWM_MspInit+0x38>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d10b      	bne.n	8000eba <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ea2:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <HAL_TIM_PWM_MspInit+0x3c>)
 8000ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea6:	4a09      	ldr	r2, [pc, #36]	; (8000ecc <HAL_TIM_PWM_MspInit+0x3c>)
 8000ea8:	f043 0302 	orr.w	r3, r3, #2
 8000eac:	6593      	str	r3, [r2, #88]	; 0x58
 8000eae:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <HAL_TIM_PWM_MspInit+0x3c>)
 8000eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000eba:	bf00      	nop
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40000400 	.word	0x40000400
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 030c 	add.w	r3, r7, #12
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a11      	ldr	r2, [pc, #68]	; (8000f34 <HAL_TIM_MspPostInit+0x64>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d11b      	bne.n	8000f2a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <HAL_TIM_MspPostInit+0x68>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	4a10      	ldr	r2, [pc, #64]	; (8000f38 <HAL_TIM_MspPostInit+0x68>)
 8000ef8:	f043 0302 	orr.w	r3, r3, #2
 8000efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <HAL_TIM_MspPostInit+0x68>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f0a:	2310      	movs	r3, #16
 8000f0c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1e:	f107 030c 	add.w	r3, r7, #12
 8000f22:	4619      	mov	r1, r3
 8000f24:	4805      	ldr	r0, [pc, #20]	; (8000f3c <HAL_TIM_MspPostInit+0x6c>)
 8000f26:	f000 fb97 	bl	8001658 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f2a:	bf00      	nop
 8000f2c:	3720      	adds	r7, #32
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40000400 	.word	0x40000400
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	48000400 	.word	0x48000400

08000f40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b0ac      	sub	sp, #176	; 0xb0
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2288      	movs	r2, #136	; 0x88
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f007 f80b 	bl	8007f7c <memset>
  if(huart->Instance==USART2)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a25      	ldr	r2, [pc, #148]	; (8001000 <HAL_UART_MspInit+0xc0>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d143      	bne.n	8000ff8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f70:	2302      	movs	r3, #2
 8000f72:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f74:	2300      	movs	r3, #0
 8000f76:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f001 fbdb 	bl	8002738 <HAL_RCCEx_PeriphCLKConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f88:	f7ff fe88 	bl	8000c9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <HAL_UART_MspInit+0xc4>)
 8000f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f90:	4a1c      	ldr	r2, [pc, #112]	; (8001004 <HAL_UART_MspInit+0xc4>)
 8000f92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f96:	6593      	str	r3, [r2, #88]	; 0x58
 8000f98:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <HAL_UART_MspInit+0xc4>)
 8000f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa4:	4b17      	ldr	r3, [pc, #92]	; (8001004 <HAL_UART_MspInit+0xc4>)
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa8:	4a16      	ldr	r2, [pc, #88]	; (8001004 <HAL_UART_MspInit+0xc4>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <HAL_UART_MspInit+0xc4>)
 8000fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fbc:	230c      	movs	r3, #12
 8000fbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fd4:	2307      	movs	r3, #7
 8000fd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe4:	f000 fb38 	bl	8001658 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2105      	movs	r1, #5
 8000fec:	2026      	movs	r0, #38	; 0x26
 8000fee:	f000 fa89 	bl	8001504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ff2:	2026      	movs	r0, #38	; 0x26
 8000ff4:	f000 faa2 	bl	800153c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ff8:	bf00      	nop
 8000ffa:	37b0      	adds	r7, #176	; 0xb0
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40004400 	.word	0x40004400
 8001004:	40021000 	.word	0x40021000

08001008 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08c      	sub	sp, #48	; 0x30
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001018:	2200      	movs	r2, #0
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	2019      	movs	r0, #25
 800101e:	f000 fa71 	bl	8001504 <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001022:	2019      	movs	r0, #25
 8001024:	f000 fa8a 	bl	800153c <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8001028:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <HAL_InitTick+0x9c>)
 800102a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800102c:	4a1d      	ldr	r2, [pc, #116]	; (80010a4 <HAL_InitTick+0x9c>)
 800102e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001032:	6613      	str	r3, [r2, #96]	; 0x60
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <HAL_InitTick+0x9c>)
 8001036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001040:	f107 0210 	add.w	r2, r7, #16
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	4611      	mov	r1, r2
 800104a:	4618      	mov	r0, r3
 800104c:	f001 fae2 	bl	8002614 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001050:	f001 faca 	bl	80025e8 <HAL_RCC_GetPCLK2Freq>
 8001054:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001058:	4a13      	ldr	r2, [pc, #76]	; (80010a8 <HAL_InitTick+0xa0>)
 800105a:	fba2 2303 	umull	r2, r3, r2, r3
 800105e:	0c9b      	lsrs	r3, r3, #18
 8001060:	3b01      	subs	r3, #1
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <HAL_InitTick+0xa4>)
 8001066:	4a12      	ldr	r2, [pc, #72]	; (80010b0 <HAL_InitTick+0xa8>)
 8001068:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <HAL_InitTick+0xa4>)
 800106c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001070:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8001072:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <HAL_InitTick+0xa4>)
 8001074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001076:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <HAL_InitTick+0xa4>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <HAL_InitTick+0xa4>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8001084:	4809      	ldr	r0, [pc, #36]	; (80010ac <HAL_InitTick+0xa4>)
 8001086:	f002 f813 	bl	80030b0 <HAL_TIM_Base_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d104      	bne.n	800109a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 8001090:	4806      	ldr	r0, [pc, #24]	; (80010ac <HAL_InitTick+0xa4>)
 8001092:	f002 f865 	bl	8003160 <HAL_TIM_Base_Start_IT>
 8001096:	4603      	mov	r3, r0
 8001098:	e000      	b.n	800109c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
}
 800109c:	4618      	mov	r0, r3
 800109e:	3730      	adds	r7, #48	; 0x30
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40021000 	.word	0x40021000
 80010a8:	431bde83 	.word	0x431bde83
 80010ac:	2000026c 	.word	0x2000026c
 80010b0:	40014400 	.word	0x40014400

080010b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <NMI_Handler+0x4>

080010ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010be:	e7fe      	b.n	80010be <HardFault_Handler+0x4>

080010c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <MemManage_Handler+0x4>

080010c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ca:	e7fe      	b.n	80010ca <BusFault_Handler+0x4>

080010cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <UsageFault_Handler+0x4>

080010d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(pin_4_Pin);
 80010e4:	2020      	movs	r0, #32
 80010e6:	f000 fc79 	bl	80019dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010f4:	4803      	ldr	r0, [pc, #12]	; (8001104 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80010f6:	f002 f8fa 	bl	80032ee <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80010fa:	4803      	ldr	r0, [pc, #12]	; (8001108 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80010fc:	f002 f8f7 	bl	80032ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200000e8 	.word	0x200000e8
 8001108:	2000026c 	.word	0x2000026c

0800110c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001110:	4802      	ldr	r0, [pc, #8]	; (800111c <USART2_IRQHandler+0x10>)
 8001112:	f003 f9a3 	bl	800445c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200001cc 	.word	0x200001cc

08001120 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001124:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001128:	f000 fc58 	bl	80019dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}

08001130 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <TIM6_DAC_IRQHandler+0x10>)
 8001136:	f002 f8da 	bl	80032ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000180 	.word	0x20000180

08001144 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	e00a      	b.n	800116c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001156:	f3af 8000 	nop.w
 800115a:	4601      	mov	r1, r0
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	1c5a      	adds	r2, r3, #1
 8001160:	60ba      	str	r2, [r7, #8]
 8001162:	b2ca      	uxtb	r2, r1
 8001164:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	3301      	adds	r3, #1
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	429a      	cmp	r2, r3
 8001172:	dbf0      	blt.n	8001156 <_read+0x12>
	}

return len;
 8001174:	687b      	ldr	r3, [r7, #4]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <_close>:
	}
	return len;
}

int _close(int file)
{
 800117e:	b480      	push	{r7}
 8001180:	b083      	sub	sp, #12
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
	return -1;
 8001186:	f04f 33ff 	mov.w	r3, #4294967295
}
 800118a:	4618      	mov	r0, r3
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011a6:	605a      	str	r2, [r3, #4]
	return 0;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <_isatty>:

int _isatty(int file)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
	return 1;
 80011be:	2301      	movs	r3, #1
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
	return 0;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
	...

080011e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f0:	4a14      	ldr	r2, [pc, #80]	; (8001244 <_sbrk+0x5c>)
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <_sbrk+0x60>)
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <_sbrk+0x64>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d102      	bne.n	800120a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <_sbrk+0x64>)
 8001206:	4a12      	ldr	r2, [pc, #72]	; (8001250 <_sbrk+0x68>)
 8001208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	429a      	cmp	r2, r3
 8001216:	d207      	bcs.n	8001228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001218:	f006 fe78 	bl	8007f0c <__errno>
 800121c:	4603      	mov	r3, r0
 800121e:	220c      	movs	r2, #12
 8001220:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
 8001226:	e009      	b.n	800123c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <_sbrk+0x64>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <_sbrk+0x64>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	4a05      	ldr	r2, [pc, #20]	; (800124c <_sbrk+0x64>)
 8001238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800123a:	68fb      	ldr	r3, [r7, #12]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20018000 	.word	0x20018000
 8001248:	00000400 	.word	0x00000400
 800124c:	200002b8 	.word	0x200002b8
 8001250:	20003348 	.word	0x20003348

08001254 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <SystemInit+0x20>)
 800125a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800125e:	4a05      	ldr	r2, [pc, #20]	; (8001274 <SystemInit+0x20>)
 8001260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001278:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800127c:	f7ff ffea 	bl	8001254 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001280:	480c      	ldr	r0, [pc, #48]	; (80012b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001282:	490d      	ldr	r1, [pc, #52]	; (80012b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001284:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <LoopForever+0xe>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001288:	e002      	b.n	8001290 <LoopCopyDataInit>

0800128a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800128c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128e:	3304      	adds	r3, #4

08001290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001294:	d3f9      	bcc.n	800128a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001298:	4c0a      	ldr	r4, [pc, #40]	; (80012c4 <LoopForever+0x16>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800129c:	e001      	b.n	80012a2 <LoopFillZerobss>

0800129e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a0:	3204      	adds	r2, #4

080012a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a4:	d3fb      	bcc.n	800129e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012a6:	f006 fe37 	bl	8007f18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012aa:	f7ff fac9 	bl	8000840 <main>

080012ae <LoopForever>:

LoopForever:
    b LoopForever
 80012ae:	e7fe      	b.n	80012ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80012bc:	08009024 	.word	0x08009024
  ldr r2, =_sbss
 80012c0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80012c4:	20003348 	.word	0x20003348

080012c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012c8:	e7fe      	b.n	80012c8 <ADC1_2_IRQHandler>
	...

080012cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012d2:	2300      	movs	r3, #0
 80012d4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <HAL_Init+0x3c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a0b      	ldr	r2, [pc, #44]	; (8001308 <HAL_Init+0x3c>)
 80012dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e2:	2003      	movs	r0, #3
 80012e4:	f000 f903 	bl	80014ee <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012e8:	2005      	movs	r0, #5
 80012ea:	f7ff fe8d 	bl	8001008 <HAL_InitTick>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d002      	beq.n	80012fa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	71fb      	strb	r3, [r7, #7]
 80012f8:	e001      	b.n	80012fe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012fa:	f7ff fd5f 	bl	8000dbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012fe:	79fb      	ldrb	r3, [r7, #7]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40022000 	.word	0x40022000

0800130c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_IncTick+0x20>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	461a      	mov	r2, r3
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_IncTick+0x24>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4413      	add	r3, r2
 800131c:	4a04      	ldr	r2, [pc, #16]	; (8001330 <HAL_IncTick+0x24>)
 800131e:	6013      	str	r3, [r2, #0]
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000008 	.word	0x20000008
 8001330:	200002bc 	.word	0x200002bc

08001334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return uwTick;
 8001338:	4b03      	ldr	r3, [pc, #12]	; (8001348 <HAL_GetTick+0x14>)
 800133a:	681b      	ldr	r3, [r3, #0]
}
 800133c:	4618      	mov	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	200002bc 	.word	0x200002bc

0800134c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001354:	f7ff ffee 	bl	8001334 <HAL_GetTick>
 8001358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001364:	d005      	beq.n	8001372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <HAL_Delay+0x44>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4413      	add	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001372:	bf00      	nop
 8001374:	f7ff ffde 	bl	8001334 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	429a      	cmp	r2, r3
 8001382:	d8f7      	bhi.n	8001374 <HAL_Delay+0x28>
  {
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000008 	.word	0x20000008

08001394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <__NVIC_SetPriorityGrouping+0x44>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b0:	4013      	ands	r3, r2
 80013b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c6:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <__NVIC_SetPriorityGrouping+0x44>)
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	60d3      	str	r3, [r2, #12]
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <__NVIC_GetPriorityGrouping+0x18>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	0a1b      	lsrs	r3, r3, #8
 80013e6:	f003 0307 	and.w	r3, r3, #7
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	2b00      	cmp	r3, #0
 8001408:	db0b      	blt.n	8001422 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	f003 021f 	and.w	r2, r3, #31
 8001410:	4907      	ldr	r1, [pc, #28]	; (8001430 <__NVIC_EnableIRQ+0x38>)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	095b      	lsrs	r3, r3, #5
 8001418:	2001      	movs	r0, #1
 800141a:	fa00 f202 	lsl.w	r2, r0, r2
 800141e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000e100 	.word	0xe000e100

08001434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	6039      	str	r1, [r7, #0]
 800143e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001444:	2b00      	cmp	r3, #0
 8001446:	db0a      	blt.n	800145e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	b2da      	uxtb	r2, r3
 800144c:	490c      	ldr	r1, [pc, #48]	; (8001480 <__NVIC_SetPriority+0x4c>)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	0112      	lsls	r2, r2, #4
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	440b      	add	r3, r1
 8001458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800145c:	e00a      	b.n	8001474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	b2da      	uxtb	r2, r3
 8001462:	4908      	ldr	r1, [pc, #32]	; (8001484 <__NVIC_SetPriority+0x50>)
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	3b04      	subs	r3, #4
 800146c:	0112      	lsls	r2, r2, #4
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	440b      	add	r3, r1
 8001472:	761a      	strb	r2, [r3, #24]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000e100 	.word	0xe000e100
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001488:	b480      	push	{r7}
 800148a:	b089      	sub	sp, #36	; 0x24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f1c3 0307 	rsb	r3, r3, #7
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	bf28      	it	cs
 80014a6:	2304      	movcs	r3, #4
 80014a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3304      	adds	r3, #4
 80014ae:	2b06      	cmp	r3, #6
 80014b0:	d902      	bls.n	80014b8 <NVIC_EncodePriority+0x30>
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3b03      	subs	r3, #3
 80014b6:	e000      	b.n	80014ba <NVIC_EncodePriority+0x32>
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	f04f 32ff 	mov.w	r2, #4294967295
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43da      	mvns	r2, r3
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	401a      	ands	r2, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d0:	f04f 31ff 	mov.w	r1, #4294967295
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa01 f303 	lsl.w	r3, r1, r3
 80014da:	43d9      	mvns	r1, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	4313      	orrs	r3, r2
         );
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3724      	adds	r7, #36	; 0x24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ff4c 	bl	8001394 <__NVIC_SetPriorityGrouping>
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001516:	f7ff ff61 	bl	80013dc <__NVIC_GetPriorityGrouping>
 800151a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	68b9      	ldr	r1, [r7, #8]
 8001520:	6978      	ldr	r0, [r7, #20]
 8001522:	f7ff ffb1 	bl	8001488 <NVIC_EncodePriority>
 8001526:	4602      	mov	r2, r0
 8001528:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800152c:	4611      	mov	r1, r2
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff ff80 	bl	8001434 <__NVIC_SetPriority>
}
 8001534:	bf00      	nop
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff ff54 	bl	80013f8 <__NVIC_EnableIRQ>
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001560:	2300      	movs	r3, #0
 8001562:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d008      	beq.n	8001582 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2204      	movs	r2, #4
 8001574:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e022      	b.n	80015c8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f022 020e 	bic.w	r2, r2, #14
 8001590:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 0201 	bic.w	r2, r2, #1
 80015a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f003 021c 	and.w	r2, r3, #28
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	2101      	movs	r1, #1
 80015b0:	fa01 f202 	lsl.w	r2, r1, r2
 80015b4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015dc:	2300      	movs	r3, #0
 80015de:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d005      	beq.n	80015f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2204      	movs	r2, #4
 80015f0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	73fb      	strb	r3, [r7, #15]
 80015f6:	e029      	b.n	800164c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 020e 	bic.w	r2, r2, #14
 8001606:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 0201 	bic.w	r2, r2, #1
 8001616:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161c:	f003 021c 	and.w	r2, r3, #28
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001624:	2101      	movs	r1, #1
 8001626:	fa01 f202 	lsl.w	r2, r1, r2
 800162a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	4798      	blx	r3
    }
  }
  return status;
 800164c:	7bfb      	ldrb	r3, [r7, #15]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001658:	b480      	push	{r7}
 800165a:	b087      	sub	sp, #28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001666:	e17f      	b.n	8001968 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	2101      	movs	r1, #1
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	fa01 f303 	lsl.w	r3, r1, r3
 8001674:	4013      	ands	r3, r2
 8001676:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 8171 	beq.w	8001962 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 0303 	and.w	r3, r3, #3
 8001688:	2b01      	cmp	r3, #1
 800168a:	d005      	beq.n	8001698 <HAL_GPIO_Init+0x40>
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d130      	bne.n	80016fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	2203      	movs	r2, #3
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	68da      	ldr	r2, [r3, #12]
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4313      	orrs	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016ce:	2201      	movs	r2, #1
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43db      	mvns	r3, r3
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4013      	ands	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	091b      	lsrs	r3, r3, #4
 80016e4:	f003 0201 	and.w	r2, r3, #1
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f003 0303 	and.w	r3, r3, #3
 8001702:	2b03      	cmp	r3, #3
 8001704:	d118      	bne.n	8001738 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800170c:	2201      	movs	r2, #1
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	08db      	lsrs	r3, r3, #3
 8001722:	f003 0201 	and.w	r2, r3, #1
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	2b03      	cmp	r3, #3
 8001742:	d017      	beq.n	8001774 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	2203      	movs	r2, #3
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4013      	ands	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d123      	bne.n	80017c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	08da      	lsrs	r2, r3, #3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3208      	adds	r2, #8
 8001788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800178c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	220f      	movs	r2, #15
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4013      	ands	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	691a      	ldr	r2, [r3, #16]
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	08da      	lsrs	r2, r3, #3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3208      	adds	r2, #8
 80017c2:	6939      	ldr	r1, [r7, #16]
 80017c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	2203      	movs	r2, #3
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 0203 	and.w	r2, r3, #3
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001804:	2b00      	cmp	r3, #0
 8001806:	f000 80ac 	beq.w	8001962 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180a:	4b5f      	ldr	r3, [pc, #380]	; (8001988 <HAL_GPIO_Init+0x330>)
 800180c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180e:	4a5e      	ldr	r2, [pc, #376]	; (8001988 <HAL_GPIO_Init+0x330>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6613      	str	r3, [r2, #96]	; 0x60
 8001816:	4b5c      	ldr	r3, [pc, #368]	; (8001988 <HAL_GPIO_Init+0x330>)
 8001818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001822:	4a5a      	ldr	r2, [pc, #360]	; (800198c <HAL_GPIO_Init+0x334>)
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	089b      	lsrs	r3, r3, #2
 8001828:	3302      	adds	r3, #2
 800182a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	220f      	movs	r2, #15
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800184c:	d025      	beq.n	800189a <HAL_GPIO_Init+0x242>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a4f      	ldr	r2, [pc, #316]	; (8001990 <HAL_GPIO_Init+0x338>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d01f      	beq.n	8001896 <HAL_GPIO_Init+0x23e>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a4e      	ldr	r2, [pc, #312]	; (8001994 <HAL_GPIO_Init+0x33c>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d019      	beq.n	8001892 <HAL_GPIO_Init+0x23a>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a4d      	ldr	r2, [pc, #308]	; (8001998 <HAL_GPIO_Init+0x340>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d013      	beq.n	800188e <HAL_GPIO_Init+0x236>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a4c      	ldr	r2, [pc, #304]	; (800199c <HAL_GPIO_Init+0x344>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d00d      	beq.n	800188a <HAL_GPIO_Init+0x232>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a4b      	ldr	r2, [pc, #300]	; (80019a0 <HAL_GPIO_Init+0x348>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d007      	beq.n	8001886 <HAL_GPIO_Init+0x22e>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a4a      	ldr	r2, [pc, #296]	; (80019a4 <HAL_GPIO_Init+0x34c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d101      	bne.n	8001882 <HAL_GPIO_Init+0x22a>
 800187e:	2306      	movs	r3, #6
 8001880:	e00c      	b.n	800189c <HAL_GPIO_Init+0x244>
 8001882:	2307      	movs	r3, #7
 8001884:	e00a      	b.n	800189c <HAL_GPIO_Init+0x244>
 8001886:	2305      	movs	r3, #5
 8001888:	e008      	b.n	800189c <HAL_GPIO_Init+0x244>
 800188a:	2304      	movs	r3, #4
 800188c:	e006      	b.n	800189c <HAL_GPIO_Init+0x244>
 800188e:	2303      	movs	r3, #3
 8001890:	e004      	b.n	800189c <HAL_GPIO_Init+0x244>
 8001892:	2302      	movs	r3, #2
 8001894:	e002      	b.n	800189c <HAL_GPIO_Init+0x244>
 8001896:	2301      	movs	r3, #1
 8001898:	e000      	b.n	800189c <HAL_GPIO_Init+0x244>
 800189a:	2300      	movs	r3, #0
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	f002 0203 	and.w	r2, r2, #3
 80018a2:	0092      	lsls	r2, r2, #2
 80018a4:	4093      	lsls	r3, r2
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018ac:	4937      	ldr	r1, [pc, #220]	; (800198c <HAL_GPIO_Init+0x334>)
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	089b      	lsrs	r3, r3, #2
 80018b2:	3302      	adds	r3, #2
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018ba:	4b3b      	ldr	r3, [pc, #236]	; (80019a8 <HAL_GPIO_Init+0x350>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	43db      	mvns	r3, r3
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4013      	ands	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4313      	orrs	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018de:	4a32      	ldr	r2, [pc, #200]	; (80019a8 <HAL_GPIO_Init+0x350>)
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018e4:	4b30      	ldr	r3, [pc, #192]	; (80019a8 <HAL_GPIO_Init+0x350>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4313      	orrs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001908:	4a27      	ldr	r2, [pc, #156]	; (80019a8 <HAL_GPIO_Init+0x350>)
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800190e:	4b26      	ldr	r3, [pc, #152]	; (80019a8 <HAL_GPIO_Init+0x350>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	43db      	mvns	r3, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4313      	orrs	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001932:	4a1d      	ldr	r2, [pc, #116]	; (80019a8 <HAL_GPIO_Init+0x350>)
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001938:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <HAL_GPIO_Init+0x350>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	43db      	mvns	r3, r3
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800195c:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <HAL_GPIO_Init+0x350>)
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3301      	adds	r3, #1
 8001966:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	fa22 f303 	lsr.w	r3, r2, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	f47f ae78 	bne.w	8001668 <HAL_GPIO_Init+0x10>
  }
}
 8001978:	bf00      	nop
 800197a:	bf00      	nop
 800197c:	371c      	adds	r7, #28
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40021000 	.word	0x40021000
 800198c:	40010000 	.word	0x40010000
 8001990:	48000400 	.word	0x48000400
 8001994:	48000800 	.word	0x48000800
 8001998:	48000c00 	.word	0x48000c00
 800199c:	48001000 	.word	0x48001000
 80019a0:	48001400 	.word	0x48001400
 80019a4:	48001800 	.word	0x48001800
 80019a8:	40010400 	.word	0x40010400

080019ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	807b      	strh	r3, [r7, #2]
 80019b8:	4613      	mov	r3, r2
 80019ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019bc:	787b      	ldrb	r3, [r7, #1]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019c2:	887a      	ldrh	r2, [r7, #2]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019c8:	e002      	b.n	80019d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019ca:	887a      	ldrh	r2, [r7, #2]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019e6:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019e8:	695a      	ldr	r2, [r3, #20]
 80019ea:	88fb      	ldrh	r3, [r7, #6]
 80019ec:	4013      	ands	r3, r2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d006      	beq.n	8001a00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019f2:	4a05      	ldr	r2, [pc, #20]	; (8001a08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019f4:	88fb      	ldrh	r3, [r7, #6]
 80019f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff f96a 	bl	8000cd4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a00:	bf00      	nop
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40010400 	.word	0x40010400

08001a0c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	40007000 	.word	0x40007000

08001a28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a36:	d130      	bne.n	8001a9a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a38:	4b23      	ldr	r3, [pc, #140]	; (8001ac8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a44:	d038      	beq.n	8001ab8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a46:	4b20      	ldr	r3, [pc, #128]	; (8001ac8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a4e:	4a1e      	ldr	r2, [pc, #120]	; (8001ac8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a54:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a56:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2232      	movs	r2, #50	; 0x32
 8001a5c:	fb02 f303 	mul.w	r3, r2, r3
 8001a60:	4a1b      	ldr	r2, [pc, #108]	; (8001ad0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a62:	fba2 2303 	umull	r2, r3, r2, r3
 8001a66:	0c9b      	lsrs	r3, r3, #18
 8001a68:	3301      	adds	r3, #1
 8001a6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a6c:	e002      	b.n	8001a74 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	3b01      	subs	r3, #1
 8001a72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a74:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a76:	695b      	ldr	r3, [r3, #20]
 8001a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a80:	d102      	bne.n	8001a88 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1f2      	bne.n	8001a6e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a88:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a94:	d110      	bne.n	8001ab8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e00f      	b.n	8001aba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aa6:	d007      	beq.n	8001ab8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001aa8:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ab0:	4a05      	ldr	r2, [pc, #20]	; (8001ac8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ab2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ab6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40007000 	.word	0x40007000
 8001acc:	20000000 	.word	0x20000000
 8001ad0:	431bde83 	.word	0x431bde83

08001ad4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e3ca      	b.n	800227c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ae6:	4b97      	ldr	r3, [pc, #604]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 030c 	and.w	r3, r3, #12
 8001aee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001af0:	4b94      	ldr	r3, [pc, #592]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0310 	and.w	r3, r3, #16
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 80e4 	beq.w	8001cd0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d007      	beq.n	8001b1e <HAL_RCC_OscConfig+0x4a>
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	2b0c      	cmp	r3, #12
 8001b12:	f040 808b 	bne.w	8001c2c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	f040 8087 	bne.w	8001c2c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b1e:	4b89      	ldr	r3, [pc, #548]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d005      	beq.n	8001b36 <HAL_RCC_OscConfig+0x62>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e3a2      	b.n	800227c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a1a      	ldr	r2, [r3, #32]
 8001b3a:	4b82      	ldr	r3, [pc, #520]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d004      	beq.n	8001b50 <HAL_RCC_OscConfig+0x7c>
 8001b46:	4b7f      	ldr	r3, [pc, #508]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b4e:	e005      	b.n	8001b5c <HAL_RCC_OscConfig+0x88>
 8001b50:	4b7c      	ldr	r3, [pc, #496]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b56:	091b      	lsrs	r3, r3, #4
 8001b58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d223      	bcs.n	8001ba8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f000 fd87 	bl	8002678 <RCC_SetFlashLatencyFromMSIRange>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e383      	b.n	800227c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b74:	4b73      	ldr	r3, [pc, #460]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a72      	ldr	r2, [pc, #456]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001b7a:	f043 0308 	orr.w	r3, r3, #8
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	4b70      	ldr	r3, [pc, #448]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	496d      	ldr	r1, [pc, #436]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b92:	4b6c      	ldr	r3, [pc, #432]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	021b      	lsls	r3, r3, #8
 8001ba0:	4968      	ldr	r1, [pc, #416]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	604b      	str	r3, [r1, #4]
 8001ba6:	e025      	b.n	8001bf4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ba8:	4b66      	ldr	r3, [pc, #408]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a65      	ldr	r2, [pc, #404]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001bae:	f043 0308 	orr.w	r3, r3, #8
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	4b63      	ldr	r3, [pc, #396]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	4960      	ldr	r1, [pc, #384]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bc6:	4b5f      	ldr	r3, [pc, #380]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	021b      	lsls	r3, r3, #8
 8001bd4:	495b      	ldr	r1, [pc, #364]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d109      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f000 fd47 	bl	8002678 <RCC_SetFlashLatencyFromMSIRange>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e343      	b.n	800227c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bf4:	f000 fc4a 	bl	800248c <HAL_RCC_GetSysClockFreq>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	4b52      	ldr	r3, [pc, #328]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	091b      	lsrs	r3, r3, #4
 8001c00:	f003 030f 	and.w	r3, r3, #15
 8001c04:	4950      	ldr	r1, [pc, #320]	; (8001d48 <HAL_RCC_OscConfig+0x274>)
 8001c06:	5ccb      	ldrb	r3, [r1, r3]
 8001c08:	f003 031f 	and.w	r3, r3, #31
 8001c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c10:	4a4e      	ldr	r2, [pc, #312]	; (8001d4c <HAL_RCC_OscConfig+0x278>)
 8001c12:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c14:	4b4e      	ldr	r3, [pc, #312]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff f9f5 	bl	8001008 <HAL_InitTick>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d052      	beq.n	8001cce <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
 8001c2a:	e327      	b.n	800227c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d032      	beq.n	8001c9a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c34:	4b43      	ldr	r3, [pc, #268]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a42      	ldr	r2, [pc, #264]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c40:	f7ff fb78 	bl	8001334 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c48:	f7ff fb74 	bl	8001334 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e310      	b.n	800227c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c5a:	4b3a      	ldr	r3, [pc, #232]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0f0      	beq.n	8001c48 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c66:	4b37      	ldr	r3, [pc, #220]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a36      	ldr	r2, [pc, #216]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001c6c:	f043 0308 	orr.w	r3, r3, #8
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	4b34      	ldr	r3, [pc, #208]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	4931      	ldr	r1, [pc, #196]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c84:	4b2f      	ldr	r3, [pc, #188]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	021b      	lsls	r3, r3, #8
 8001c92:	492c      	ldr	r1, [pc, #176]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	604b      	str	r3, [r1, #4]
 8001c98:	e01a      	b.n	8001cd0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c9a:	4b2a      	ldr	r3, [pc, #168]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a29      	ldr	r2, [pc, #164]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001ca0:	f023 0301 	bic.w	r3, r3, #1
 8001ca4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ca6:	f7ff fb45 	bl	8001334 <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cae:	f7ff fb41 	bl	8001334 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e2dd      	b.n	800227c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cc0:	4b20      	ldr	r3, [pc, #128]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1f0      	bne.n	8001cae <HAL_RCC_OscConfig+0x1da>
 8001ccc:	e000      	b.n	8001cd0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d074      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	2b08      	cmp	r3, #8
 8001ce0:	d005      	beq.n	8001cee <HAL_RCC_OscConfig+0x21a>
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	2b0c      	cmp	r3, #12
 8001ce6:	d10e      	bne.n	8001d06 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	2b03      	cmp	r3, #3
 8001cec:	d10b      	bne.n	8001d06 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cee:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d064      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x2f0>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d160      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e2ba      	b.n	800227c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d0e:	d106      	bne.n	8001d1e <HAL_RCC_OscConfig+0x24a>
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0b      	ldr	r2, [pc, #44]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d1a:	6013      	str	r3, [r2, #0]
 8001d1c:	e026      	b.n	8001d6c <HAL_RCC_OscConfig+0x298>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d26:	d115      	bne.n	8001d54 <HAL_RCC_OscConfig+0x280>
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a05      	ldr	r2, [pc, #20]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001d2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d32:	6013      	str	r3, [r2, #0]
 8001d34:	4b03      	ldr	r3, [pc, #12]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a02      	ldr	r2, [pc, #8]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	e014      	b.n	8001d6c <HAL_RCC_OscConfig+0x298>
 8001d42:	bf00      	nop
 8001d44:	40021000 	.word	0x40021000
 8001d48:	08008f28 	.word	0x08008f28
 8001d4c:	20000000 	.word	0x20000000
 8001d50:	20000004 	.word	0x20000004
 8001d54:	4ba0      	ldr	r3, [pc, #640]	; (8001fd8 <HAL_RCC_OscConfig+0x504>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a9f      	ldr	r2, [pc, #636]	; (8001fd8 <HAL_RCC_OscConfig+0x504>)
 8001d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d5e:	6013      	str	r3, [r2, #0]
 8001d60:	4b9d      	ldr	r3, [pc, #628]	; (8001fd8 <HAL_RCC_OscConfig+0x504>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a9c      	ldr	r2, [pc, #624]	; (8001fd8 <HAL_RCC_OscConfig+0x504>)
 8001d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d013      	beq.n	8001d9c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d74:	f7ff fade 	bl	8001334 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d7c:	f7ff fada 	bl	8001334 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b64      	cmp	r3, #100	; 0x64
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e276      	b.n	800227c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d8e:	4b92      	ldr	r3, [pc, #584]	; (8001fd8 <HAL_RCC_OscConfig+0x504>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0f0      	beq.n	8001d7c <HAL_RCC_OscConfig+0x2a8>
 8001d9a:	e014      	b.n	8001dc6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9c:	f7ff faca 	bl	8001334 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da4:	f7ff fac6 	bl	8001334 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b64      	cmp	r3, #100	; 0x64
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e262      	b.n	800227c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001db6:	4b88      	ldr	r3, [pc, #544]	; (8001fd8 <HAL_RCC_OscConfig+0x504>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x2d0>
 8001dc2:	e000      	b.n	8001dc6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d060      	beq.n	8001e94 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	d005      	beq.n	8001de4 <HAL_RCC_OscConfig+0x310>
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	2b0c      	cmp	r3, #12
 8001ddc:	d119      	bne.n	8001e12 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d116      	bne.n	8001e12 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001de4:	4b7c      	ldr	r3, [pc, #496]	; (8001fd8 <HAL_RCC_OscConfig+0x504>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d005      	beq.n	8001dfc <HAL_RCC_OscConfig+0x328>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e23f      	b.n	800227c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfc:	4b76      	ldr	r3, [pc, #472]	; (8001fd8 <HAL_RCC_OscConfig+0x504>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	061b      	lsls	r3, r3, #24
 8001e0a:	4973      	ldr	r1, [pc, #460]	; (8001fd8 <HAL_RCC_OscConfig+0x504>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e10:	e040      	b.n	8001e94 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d023      	beq.n	8001e62 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e1a:	4b6f      	ldr	r3, [pc, #444]	; (8001fd8 <HAL_RCC_OscConfig+0x504>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a6e      	ldr	r2, [pc, #440]	; (8001fd8 <HAL_RCC_OscConfig+0x504>)
 8001e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e26:	f7ff fa85 	bl	8001334 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e2e:	f7ff fa81 	bl	8001334 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e21d      	b.n	800227c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e40:	4b65      	ldr	r3, [pc, #404]	; (8001fd8 <HAL_RCC_OscConfig+0x504>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0f0      	beq.n	8001e2e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e4c:	4b62      	ldr	r3, [pc, #392]	; (8001fd8 <HAL_RCC_OscConfig+0x504>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	061b      	lsls	r3, r3, #24
 8001e5a:	495f      	ldr	r1, [pc, #380]	; (8001fd8 <HAL_RCC_OscConfig+0x504>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	604b      	str	r3, [r1, #4]
 8001e60:	e018      	b.n	8001e94 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e62:	4b5d      	ldr	r3, [pc, #372]	; (8001fd8 <HAL_RCC_OscConfig+0x504>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a5c      	ldr	r2, [pc, #368]	; (8001fd8 <HAL_RCC_OscConfig+0x504>)
 8001e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6e:	f7ff fa61 	bl	8001334 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e76:	f7ff fa5d 	bl	8001334 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e1f9      	b.n	800227c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e88:	4b53      	ldr	r3, [pc, #332]	; (8001fd8 <HAL_RCC_OscConfig+0x504>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f0      	bne.n	8001e76 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0308 	and.w	r3, r3, #8
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d03c      	beq.n	8001f1a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d01c      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ea8:	4b4b      	ldr	r3, [pc, #300]	; (8001fd8 <HAL_RCC_OscConfig+0x504>)
 8001eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eae:	4a4a      	ldr	r2, [pc, #296]	; (8001fd8 <HAL_RCC_OscConfig+0x504>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb8:	f7ff fa3c 	bl	8001334 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec0:	f7ff fa38 	bl	8001334 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e1d4      	b.n	800227c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ed2:	4b41      	ldr	r3, [pc, #260]	; (8001fd8 <HAL_RCC_OscConfig+0x504>)
 8001ed4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0ef      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x3ec>
 8001ee0:	e01b      	b.n	8001f1a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ee2:	4b3d      	ldr	r3, [pc, #244]	; (8001fd8 <HAL_RCC_OscConfig+0x504>)
 8001ee4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ee8:	4a3b      	ldr	r2, [pc, #236]	; (8001fd8 <HAL_RCC_OscConfig+0x504>)
 8001eea:	f023 0301 	bic.w	r3, r3, #1
 8001eee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef2:	f7ff fa1f 	bl	8001334 <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001efa:	f7ff fa1b 	bl	8001334 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e1b7      	b.n	800227c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f0c:	4b32      	ldr	r3, [pc, #200]	; (8001fd8 <HAL_RCC_OscConfig+0x504>)
 8001f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1ef      	bne.n	8001efa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 80a6 	beq.w	8002074 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f2c:	4b2a      	ldr	r3, [pc, #168]	; (8001fd8 <HAL_RCC_OscConfig+0x504>)
 8001f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10d      	bne.n	8001f54 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f38:	4b27      	ldr	r3, [pc, #156]	; (8001fd8 <HAL_RCC_OscConfig+0x504>)
 8001f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3c:	4a26      	ldr	r2, [pc, #152]	; (8001fd8 <HAL_RCC_OscConfig+0x504>)
 8001f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f42:	6593      	str	r3, [r2, #88]	; 0x58
 8001f44:	4b24      	ldr	r3, [pc, #144]	; (8001fd8 <HAL_RCC_OscConfig+0x504>)
 8001f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f50:	2301      	movs	r3, #1
 8001f52:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f54:	4b21      	ldr	r3, [pc, #132]	; (8001fdc <HAL_RCC_OscConfig+0x508>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d118      	bne.n	8001f92 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f60:	4b1e      	ldr	r3, [pc, #120]	; (8001fdc <HAL_RCC_OscConfig+0x508>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a1d      	ldr	r2, [pc, #116]	; (8001fdc <HAL_RCC_OscConfig+0x508>)
 8001f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f6c:	f7ff f9e2 	bl	8001334 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f74:	f7ff f9de 	bl	8001334 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e17a      	b.n	800227c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f86:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <HAL_RCC_OscConfig+0x508>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0f0      	beq.n	8001f74 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d108      	bne.n	8001fac <HAL_RCC_OscConfig+0x4d8>
 8001f9a:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <HAL_RCC_OscConfig+0x504>)
 8001f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa0:	4a0d      	ldr	r2, [pc, #52]	; (8001fd8 <HAL_RCC_OscConfig+0x504>)
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001faa:	e029      	b.n	8002000 <HAL_RCC_OscConfig+0x52c>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b05      	cmp	r3, #5
 8001fb2:	d115      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x50c>
 8001fb4:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <HAL_RCC_OscConfig+0x504>)
 8001fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fba:	4a07      	ldr	r2, [pc, #28]	; (8001fd8 <HAL_RCC_OscConfig+0x504>)
 8001fbc:	f043 0304 	orr.w	r3, r3, #4
 8001fc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <HAL_RCC_OscConfig+0x504>)
 8001fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fca:	4a03      	ldr	r2, [pc, #12]	; (8001fd8 <HAL_RCC_OscConfig+0x504>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fd4:	e014      	b.n	8002000 <HAL_RCC_OscConfig+0x52c>
 8001fd6:	bf00      	nop
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40007000 	.word	0x40007000
 8001fe0:	4b9c      	ldr	r3, [pc, #624]	; (8002254 <HAL_RCC_OscConfig+0x780>)
 8001fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe6:	4a9b      	ldr	r2, [pc, #620]	; (8002254 <HAL_RCC_OscConfig+0x780>)
 8001fe8:	f023 0301 	bic.w	r3, r3, #1
 8001fec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ff0:	4b98      	ldr	r3, [pc, #608]	; (8002254 <HAL_RCC_OscConfig+0x780>)
 8001ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff6:	4a97      	ldr	r2, [pc, #604]	; (8002254 <HAL_RCC_OscConfig+0x780>)
 8001ff8:	f023 0304 	bic.w	r3, r3, #4
 8001ffc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d016      	beq.n	8002036 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002008:	f7ff f994 	bl	8001334 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800200e:	e00a      	b.n	8002026 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002010:	f7ff f990 	bl	8001334 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	f241 3288 	movw	r2, #5000	; 0x1388
 800201e:	4293      	cmp	r3, r2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e12a      	b.n	800227c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002026:	4b8b      	ldr	r3, [pc, #556]	; (8002254 <HAL_RCC_OscConfig+0x780>)
 8002028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0ed      	beq.n	8002010 <HAL_RCC_OscConfig+0x53c>
 8002034:	e015      	b.n	8002062 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002036:	f7ff f97d 	bl	8001334 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800203c:	e00a      	b.n	8002054 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203e:	f7ff f979 	bl	8001334 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	f241 3288 	movw	r2, #5000	; 0x1388
 800204c:	4293      	cmp	r3, r2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e113      	b.n	800227c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002054:	4b7f      	ldr	r3, [pc, #508]	; (8002254 <HAL_RCC_OscConfig+0x780>)
 8002056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1ed      	bne.n	800203e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002062:	7ffb      	ldrb	r3, [r7, #31]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d105      	bne.n	8002074 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002068:	4b7a      	ldr	r3, [pc, #488]	; (8002254 <HAL_RCC_OscConfig+0x780>)
 800206a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206c:	4a79      	ldr	r2, [pc, #484]	; (8002254 <HAL_RCC_OscConfig+0x780>)
 800206e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002072:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 80fe 	beq.w	800227a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002082:	2b02      	cmp	r3, #2
 8002084:	f040 80d0 	bne.w	8002228 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002088:	4b72      	ldr	r3, [pc, #456]	; (8002254 <HAL_RCC_OscConfig+0x780>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f003 0203 	and.w	r2, r3, #3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002098:	429a      	cmp	r2, r3
 800209a:	d130      	bne.n	80020fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	3b01      	subs	r3, #1
 80020a8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d127      	bne.n	80020fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d11f      	bne.n	80020fe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020c8:	2a07      	cmp	r2, #7
 80020ca:	bf14      	ite	ne
 80020cc:	2201      	movne	r2, #1
 80020ce:	2200      	moveq	r2, #0
 80020d0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d113      	bne.n	80020fe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e0:	085b      	lsrs	r3, r3, #1
 80020e2:	3b01      	subs	r3, #1
 80020e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d109      	bne.n	80020fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	085b      	lsrs	r3, r3, #1
 80020f6:	3b01      	subs	r3, #1
 80020f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d06e      	beq.n	80021dc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	2b0c      	cmp	r3, #12
 8002102:	d069      	beq.n	80021d8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002104:	4b53      	ldr	r3, [pc, #332]	; (8002254 <HAL_RCC_OscConfig+0x780>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d105      	bne.n	800211c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002110:	4b50      	ldr	r3, [pc, #320]	; (8002254 <HAL_RCC_OscConfig+0x780>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0ad      	b.n	800227c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002120:	4b4c      	ldr	r3, [pc, #304]	; (8002254 <HAL_RCC_OscConfig+0x780>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a4b      	ldr	r2, [pc, #300]	; (8002254 <HAL_RCC_OscConfig+0x780>)
 8002126:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800212a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800212c:	f7ff f902 	bl	8001334 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002134:	f7ff f8fe 	bl	8001334 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e09a      	b.n	800227c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002146:	4b43      	ldr	r3, [pc, #268]	; (8002254 <HAL_RCC_OscConfig+0x780>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002152:	4b40      	ldr	r3, [pc, #256]	; (8002254 <HAL_RCC_OscConfig+0x780>)
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	4b40      	ldr	r3, [pc, #256]	; (8002258 <HAL_RCC_OscConfig+0x784>)
 8002158:	4013      	ands	r3, r2
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002162:	3a01      	subs	r2, #1
 8002164:	0112      	lsls	r2, r2, #4
 8002166:	4311      	orrs	r1, r2
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800216c:	0212      	lsls	r2, r2, #8
 800216e:	4311      	orrs	r1, r2
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002174:	0852      	lsrs	r2, r2, #1
 8002176:	3a01      	subs	r2, #1
 8002178:	0552      	lsls	r2, r2, #21
 800217a:	4311      	orrs	r1, r2
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002180:	0852      	lsrs	r2, r2, #1
 8002182:	3a01      	subs	r2, #1
 8002184:	0652      	lsls	r2, r2, #25
 8002186:	4311      	orrs	r1, r2
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800218c:	0912      	lsrs	r2, r2, #4
 800218e:	0452      	lsls	r2, r2, #17
 8002190:	430a      	orrs	r2, r1
 8002192:	4930      	ldr	r1, [pc, #192]	; (8002254 <HAL_RCC_OscConfig+0x780>)
 8002194:	4313      	orrs	r3, r2
 8002196:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002198:	4b2e      	ldr	r3, [pc, #184]	; (8002254 <HAL_RCC_OscConfig+0x780>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a2d      	ldr	r2, [pc, #180]	; (8002254 <HAL_RCC_OscConfig+0x780>)
 800219e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021a4:	4b2b      	ldr	r3, [pc, #172]	; (8002254 <HAL_RCC_OscConfig+0x780>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	4a2a      	ldr	r2, [pc, #168]	; (8002254 <HAL_RCC_OscConfig+0x780>)
 80021aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021b0:	f7ff f8c0 	bl	8001334 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b8:	f7ff f8bc 	bl	8001334 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e058      	b.n	800227c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ca:	4b22      	ldr	r3, [pc, #136]	; (8002254 <HAL_RCC_OscConfig+0x780>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021d6:	e050      	b.n	800227a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e04f      	b.n	800227c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021dc:	4b1d      	ldr	r3, [pc, #116]	; (8002254 <HAL_RCC_OscConfig+0x780>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d148      	bne.n	800227a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021e8:	4b1a      	ldr	r3, [pc, #104]	; (8002254 <HAL_RCC_OscConfig+0x780>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a19      	ldr	r2, [pc, #100]	; (8002254 <HAL_RCC_OscConfig+0x780>)
 80021ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021f4:	4b17      	ldr	r3, [pc, #92]	; (8002254 <HAL_RCC_OscConfig+0x780>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	4a16      	ldr	r2, [pc, #88]	; (8002254 <HAL_RCC_OscConfig+0x780>)
 80021fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002200:	f7ff f898 	bl	8001334 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002208:	f7ff f894 	bl	8001334 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e030      	b.n	800227c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800221a:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <HAL_RCC_OscConfig+0x780>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0f0      	beq.n	8002208 <HAL_RCC_OscConfig+0x734>
 8002226:	e028      	b.n	800227a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	2b0c      	cmp	r3, #12
 800222c:	d023      	beq.n	8002276 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222e:	4b09      	ldr	r3, [pc, #36]	; (8002254 <HAL_RCC_OscConfig+0x780>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a08      	ldr	r2, [pc, #32]	; (8002254 <HAL_RCC_OscConfig+0x780>)
 8002234:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002238:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223a:	f7ff f87b 	bl	8001334 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002240:	e00c      	b.n	800225c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002242:	f7ff f877 	bl	8001334 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d905      	bls.n	800225c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e013      	b.n	800227c <HAL_RCC_OscConfig+0x7a8>
 8002254:	40021000 	.word	0x40021000
 8002258:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800225c:	4b09      	ldr	r3, [pc, #36]	; (8002284 <HAL_RCC_OscConfig+0x7b0>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1ec      	bne.n	8002242 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <HAL_RCC_OscConfig+0x7b0>)
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	4905      	ldr	r1, [pc, #20]	; (8002284 <HAL_RCC_OscConfig+0x7b0>)
 800226e:	4b06      	ldr	r3, [pc, #24]	; (8002288 <HAL_RCC_OscConfig+0x7b4>)
 8002270:	4013      	ands	r3, r2
 8002272:	60cb      	str	r3, [r1, #12]
 8002274:	e001      	b.n	800227a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3720      	adds	r7, #32
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40021000 	.word	0x40021000
 8002288:	feeefffc 	.word	0xfeeefffc

0800228c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0e7      	b.n	8002470 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022a0:	4b75      	ldr	r3, [pc, #468]	; (8002478 <HAL_RCC_ClockConfig+0x1ec>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d910      	bls.n	80022d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ae:	4b72      	ldr	r3, [pc, #456]	; (8002478 <HAL_RCC_ClockConfig+0x1ec>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 0207 	bic.w	r2, r3, #7
 80022b6:	4970      	ldr	r1, [pc, #448]	; (8002478 <HAL_RCC_ClockConfig+0x1ec>)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022be:	4b6e      	ldr	r3, [pc, #440]	; (8002478 <HAL_RCC_ClockConfig+0x1ec>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d001      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0cf      	b.n	8002470 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d010      	beq.n	80022fe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	4b66      	ldr	r3, [pc, #408]	; (800247c <HAL_RCC_ClockConfig+0x1f0>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d908      	bls.n	80022fe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ec:	4b63      	ldr	r3, [pc, #396]	; (800247c <HAL_RCC_ClockConfig+0x1f0>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	4960      	ldr	r1, [pc, #384]	; (800247c <HAL_RCC_ClockConfig+0x1f0>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d04c      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b03      	cmp	r3, #3
 8002310:	d107      	bne.n	8002322 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002312:	4b5a      	ldr	r3, [pc, #360]	; (800247c <HAL_RCC_ClockConfig+0x1f0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d121      	bne.n	8002362 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e0a6      	b.n	8002470 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b02      	cmp	r3, #2
 8002328:	d107      	bne.n	800233a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800232a:	4b54      	ldr	r3, [pc, #336]	; (800247c <HAL_RCC_ClockConfig+0x1f0>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d115      	bne.n	8002362 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e09a      	b.n	8002470 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d107      	bne.n	8002352 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002342:	4b4e      	ldr	r3, [pc, #312]	; (800247c <HAL_RCC_ClockConfig+0x1f0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d109      	bne.n	8002362 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e08e      	b.n	8002470 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002352:	4b4a      	ldr	r3, [pc, #296]	; (800247c <HAL_RCC_ClockConfig+0x1f0>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e086      	b.n	8002470 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002362:	4b46      	ldr	r3, [pc, #280]	; (800247c <HAL_RCC_ClockConfig+0x1f0>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f023 0203 	bic.w	r2, r3, #3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	4943      	ldr	r1, [pc, #268]	; (800247c <HAL_RCC_ClockConfig+0x1f0>)
 8002370:	4313      	orrs	r3, r2
 8002372:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002374:	f7fe ffde 	bl	8001334 <HAL_GetTick>
 8002378:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800237a:	e00a      	b.n	8002392 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800237c:	f7fe ffda 	bl	8001334 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	f241 3288 	movw	r2, #5000	; 0x1388
 800238a:	4293      	cmp	r3, r2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e06e      	b.n	8002470 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002392:	4b3a      	ldr	r3, [pc, #232]	; (800247c <HAL_RCC_ClockConfig+0x1f0>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 020c 	and.w	r2, r3, #12
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d1eb      	bne.n	800237c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d010      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	4b31      	ldr	r3, [pc, #196]	; (800247c <HAL_RCC_ClockConfig+0x1f0>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023bc:	429a      	cmp	r2, r3
 80023be:	d208      	bcs.n	80023d2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c0:	4b2e      	ldr	r3, [pc, #184]	; (800247c <HAL_RCC_ClockConfig+0x1f0>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	492b      	ldr	r1, [pc, #172]	; (800247c <HAL_RCC_ClockConfig+0x1f0>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023d2:	4b29      	ldr	r3, [pc, #164]	; (8002478 <HAL_RCC_ClockConfig+0x1ec>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d210      	bcs.n	8002402 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e0:	4b25      	ldr	r3, [pc, #148]	; (8002478 <HAL_RCC_ClockConfig+0x1ec>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f023 0207 	bic.w	r2, r3, #7
 80023e8:	4923      	ldr	r1, [pc, #140]	; (8002478 <HAL_RCC_ClockConfig+0x1ec>)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f0:	4b21      	ldr	r3, [pc, #132]	; (8002478 <HAL_RCC_ClockConfig+0x1ec>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d001      	beq.n	8002402 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e036      	b.n	8002470 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0304 	and.w	r3, r3, #4
 800240a:	2b00      	cmp	r3, #0
 800240c:	d008      	beq.n	8002420 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800240e:	4b1b      	ldr	r3, [pc, #108]	; (800247c <HAL_RCC_ClockConfig+0x1f0>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	4918      	ldr	r1, [pc, #96]	; (800247c <HAL_RCC_ClockConfig+0x1f0>)
 800241c:	4313      	orrs	r3, r2
 800241e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	2b00      	cmp	r3, #0
 800242a:	d009      	beq.n	8002440 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800242c:	4b13      	ldr	r3, [pc, #76]	; (800247c <HAL_RCC_ClockConfig+0x1f0>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4910      	ldr	r1, [pc, #64]	; (800247c <HAL_RCC_ClockConfig+0x1f0>)
 800243c:	4313      	orrs	r3, r2
 800243e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002440:	f000 f824 	bl	800248c <HAL_RCC_GetSysClockFreq>
 8002444:	4602      	mov	r2, r0
 8002446:	4b0d      	ldr	r3, [pc, #52]	; (800247c <HAL_RCC_ClockConfig+0x1f0>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	091b      	lsrs	r3, r3, #4
 800244c:	f003 030f 	and.w	r3, r3, #15
 8002450:	490b      	ldr	r1, [pc, #44]	; (8002480 <HAL_RCC_ClockConfig+0x1f4>)
 8002452:	5ccb      	ldrb	r3, [r1, r3]
 8002454:	f003 031f 	and.w	r3, r3, #31
 8002458:	fa22 f303 	lsr.w	r3, r2, r3
 800245c:	4a09      	ldr	r2, [pc, #36]	; (8002484 <HAL_RCC_ClockConfig+0x1f8>)
 800245e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002460:	4b09      	ldr	r3, [pc, #36]	; (8002488 <HAL_RCC_ClockConfig+0x1fc>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe fdcf 	bl	8001008 <HAL_InitTick>
 800246a:	4603      	mov	r3, r0
 800246c:	72fb      	strb	r3, [r7, #11]

  return status;
 800246e:	7afb      	ldrb	r3, [r7, #11]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40022000 	.word	0x40022000
 800247c:	40021000 	.word	0x40021000
 8002480:	08008f28 	.word	0x08008f28
 8002484:	20000000 	.word	0x20000000
 8002488:	20000004 	.word	0x20000004

0800248c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800248c:	b480      	push	{r7}
 800248e:	b089      	sub	sp, #36	; 0x24
 8002490:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002492:	2300      	movs	r3, #0
 8002494:	61fb      	str	r3, [r7, #28]
 8002496:	2300      	movs	r3, #0
 8002498:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800249a:	4b3e      	ldr	r3, [pc, #248]	; (8002594 <HAL_RCC_GetSysClockFreq+0x108>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 030c 	and.w	r3, r3, #12
 80024a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024a4:	4b3b      	ldr	r3, [pc, #236]	; (8002594 <HAL_RCC_GetSysClockFreq+0x108>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f003 0303 	and.w	r3, r3, #3
 80024ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_RCC_GetSysClockFreq+0x34>
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	2b0c      	cmp	r3, #12
 80024b8:	d121      	bne.n	80024fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d11e      	bne.n	80024fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024c0:	4b34      	ldr	r3, [pc, #208]	; (8002594 <HAL_RCC_GetSysClockFreq+0x108>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0308 	and.w	r3, r3, #8
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d107      	bne.n	80024dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024cc:	4b31      	ldr	r3, [pc, #196]	; (8002594 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024d2:	0a1b      	lsrs	r3, r3, #8
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	61fb      	str	r3, [r7, #28]
 80024da:	e005      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024dc:	4b2d      	ldr	r3, [pc, #180]	; (8002594 <HAL_RCC_GetSysClockFreq+0x108>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	091b      	lsrs	r3, r3, #4
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024e8:	4a2b      	ldr	r2, [pc, #172]	; (8002598 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10d      	bne.n	8002514 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024fc:	e00a      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	2b04      	cmp	r3, #4
 8002502:	d102      	bne.n	800250a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002504:	4b25      	ldr	r3, [pc, #148]	; (800259c <HAL_RCC_GetSysClockFreq+0x110>)
 8002506:	61bb      	str	r3, [r7, #24]
 8002508:	e004      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	2b08      	cmp	r3, #8
 800250e:	d101      	bne.n	8002514 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002510:	4b23      	ldr	r3, [pc, #140]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002512:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	2b0c      	cmp	r3, #12
 8002518:	d134      	bne.n	8002584 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800251a:	4b1e      	ldr	r3, [pc, #120]	; (8002594 <HAL_RCC_GetSysClockFreq+0x108>)
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d003      	beq.n	8002532 <HAL_RCC_GetSysClockFreq+0xa6>
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2b03      	cmp	r3, #3
 800252e:	d003      	beq.n	8002538 <HAL_RCC_GetSysClockFreq+0xac>
 8002530:	e005      	b.n	800253e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002532:	4b1a      	ldr	r3, [pc, #104]	; (800259c <HAL_RCC_GetSysClockFreq+0x110>)
 8002534:	617b      	str	r3, [r7, #20]
      break;
 8002536:	e005      	b.n	8002544 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002538:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800253a:	617b      	str	r3, [r7, #20]
      break;
 800253c:	e002      	b.n	8002544 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	617b      	str	r3, [r7, #20]
      break;
 8002542:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002544:	4b13      	ldr	r3, [pc, #76]	; (8002594 <HAL_RCC_GetSysClockFreq+0x108>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	091b      	lsrs	r3, r3, #4
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	3301      	adds	r3, #1
 8002550:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002552:	4b10      	ldr	r3, [pc, #64]	; (8002594 <HAL_RCC_GetSysClockFreq+0x108>)
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	0a1b      	lsrs	r3, r3, #8
 8002558:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	fb03 f202 	mul.w	r2, r3, r2
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	fbb2 f3f3 	udiv	r3, r2, r3
 8002568:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800256a:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <HAL_RCC_GetSysClockFreq+0x108>)
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	0e5b      	lsrs	r3, r3, #25
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	3301      	adds	r3, #1
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002582:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002584:	69bb      	ldr	r3, [r7, #24]
}
 8002586:	4618      	mov	r0, r3
 8002588:	3724      	adds	r7, #36	; 0x24
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	40021000 	.word	0x40021000
 8002598:	08008f40 	.word	0x08008f40
 800259c:	00f42400 	.word	0x00f42400
 80025a0:	007a1200 	.word	0x007a1200

080025a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025a8:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025aa:	681b      	ldr	r3, [r3, #0]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	20000000 	.word	0x20000000

080025bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025c0:	f7ff fff0 	bl	80025a4 <HAL_RCC_GetHCLKFreq>
 80025c4:	4602      	mov	r2, r0
 80025c6:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	0a1b      	lsrs	r3, r3, #8
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	4904      	ldr	r1, [pc, #16]	; (80025e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025d2:	5ccb      	ldrb	r3, [r1, r3]
 80025d4:	f003 031f 	and.w	r3, r3, #31
 80025d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025dc:	4618      	mov	r0, r3
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40021000 	.word	0x40021000
 80025e4:	08008f38 	.word	0x08008f38

080025e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025ec:	f7ff ffda 	bl	80025a4 <HAL_RCC_GetHCLKFreq>
 80025f0:	4602      	mov	r2, r0
 80025f2:	4b06      	ldr	r3, [pc, #24]	; (800260c <HAL_RCC_GetPCLK2Freq+0x24>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	0adb      	lsrs	r3, r3, #11
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	4904      	ldr	r1, [pc, #16]	; (8002610 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025fe:	5ccb      	ldrb	r3, [r1, r3]
 8002600:	f003 031f 	and.w	r3, r3, #31
 8002604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002608:	4618      	mov	r0, r3
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40021000 	.word	0x40021000
 8002610:	08008f38 	.word	0x08008f38

08002614 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	220f      	movs	r2, #15
 8002622:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002624:	4b12      	ldr	r3, [pc, #72]	; (8002670 <HAL_RCC_GetClockConfig+0x5c>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 0203 	and.w	r2, r3, #3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002630:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <HAL_RCC_GetClockConfig+0x5c>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <HAL_RCC_GetClockConfig+0x5c>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002648:	4b09      	ldr	r3, [pc, #36]	; (8002670 <HAL_RCC_GetClockConfig+0x5c>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	08db      	lsrs	r3, r3, #3
 800264e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002656:	4b07      	ldr	r3, [pc, #28]	; (8002674 <HAL_RCC_GetClockConfig+0x60>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0207 	and.w	r2, r3, #7
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	601a      	str	r2, [r3, #0]
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40021000 	.word	0x40021000
 8002674:	40022000 	.word	0x40022000

08002678 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002680:	2300      	movs	r3, #0
 8002682:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002684:	4b2a      	ldr	r3, [pc, #168]	; (8002730 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002690:	f7ff f9bc 	bl	8001a0c <HAL_PWREx_GetVoltageRange>
 8002694:	6178      	str	r0, [r7, #20]
 8002696:	e014      	b.n	80026c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002698:	4b25      	ldr	r3, [pc, #148]	; (8002730 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800269a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269c:	4a24      	ldr	r2, [pc, #144]	; (8002730 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800269e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a2:	6593      	str	r3, [r2, #88]	; 0x58
 80026a4:	4b22      	ldr	r3, [pc, #136]	; (8002730 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026b0:	f7ff f9ac 	bl	8001a0c <HAL_PWREx_GetVoltageRange>
 80026b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026b6:	4b1e      	ldr	r3, [pc, #120]	; (8002730 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ba:	4a1d      	ldr	r2, [pc, #116]	; (8002730 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026c8:	d10b      	bne.n	80026e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b80      	cmp	r3, #128	; 0x80
 80026ce:	d919      	bls.n	8002704 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2ba0      	cmp	r3, #160	; 0xa0
 80026d4:	d902      	bls.n	80026dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026d6:	2302      	movs	r3, #2
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	e013      	b.n	8002704 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026dc:	2301      	movs	r3, #1
 80026de:	613b      	str	r3, [r7, #16]
 80026e0:	e010      	b.n	8002704 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b80      	cmp	r3, #128	; 0x80
 80026e6:	d902      	bls.n	80026ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026e8:	2303      	movs	r3, #3
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	e00a      	b.n	8002704 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b80      	cmp	r3, #128	; 0x80
 80026f2:	d102      	bne.n	80026fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026f4:	2302      	movs	r3, #2
 80026f6:	613b      	str	r3, [r7, #16]
 80026f8:	e004      	b.n	8002704 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b70      	cmp	r3, #112	; 0x70
 80026fe:	d101      	bne.n	8002704 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002700:	2301      	movs	r3, #1
 8002702:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002704:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f023 0207 	bic.w	r2, r3, #7
 800270c:	4909      	ldr	r1, [pc, #36]	; (8002734 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4313      	orrs	r3, r2
 8002712:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002714:	4b07      	ldr	r3, [pc, #28]	; (8002734 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	429a      	cmp	r2, r3
 8002720:	d001      	beq.n	8002726 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40021000 	.word	0x40021000
 8002734:	40022000 	.word	0x40022000

08002738 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002740:	2300      	movs	r3, #0
 8002742:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002744:	2300      	movs	r3, #0
 8002746:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002750:	2b00      	cmp	r3, #0
 8002752:	d041      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002758:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800275c:	d02a      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800275e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002762:	d824      	bhi.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002764:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002768:	d008      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800276a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800276e:	d81e      	bhi.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00a      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002774:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002778:	d010      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800277a:	e018      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800277c:	4b86      	ldr	r3, [pc, #536]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	4a85      	ldr	r2, [pc, #532]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002786:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002788:	e015      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3304      	adds	r3, #4
 800278e:	2100      	movs	r1, #0
 8002790:	4618      	mov	r0, r3
 8002792:	f000 fabb 	bl	8002d0c <RCCEx_PLLSAI1_Config>
 8002796:	4603      	mov	r3, r0
 8002798:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800279a:	e00c      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3320      	adds	r3, #32
 80027a0:	2100      	movs	r1, #0
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 fba6 	bl	8002ef4 <RCCEx_PLLSAI2_Config>
 80027a8:	4603      	mov	r3, r0
 80027aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027ac:	e003      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	74fb      	strb	r3, [r7, #19]
      break;
 80027b2:	e000      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80027b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027b6:	7cfb      	ldrb	r3, [r7, #19]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10b      	bne.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027bc:	4b76      	ldr	r3, [pc, #472]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027ca:	4973      	ldr	r1, [pc, #460]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027d2:	e001      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027d4:	7cfb      	ldrb	r3, [r7, #19]
 80027d6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d041      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027ec:	d02a      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80027ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027f2:	d824      	bhi.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027f8:	d008      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027fe:	d81e      	bhi.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00a      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002804:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002808:	d010      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800280a:	e018      	b.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800280c:	4b62      	ldr	r3, [pc, #392]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	4a61      	ldr	r2, [pc, #388]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002816:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002818:	e015      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	3304      	adds	r3, #4
 800281e:	2100      	movs	r1, #0
 8002820:	4618      	mov	r0, r3
 8002822:	f000 fa73 	bl	8002d0c <RCCEx_PLLSAI1_Config>
 8002826:	4603      	mov	r3, r0
 8002828:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800282a:	e00c      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3320      	adds	r3, #32
 8002830:	2100      	movs	r1, #0
 8002832:	4618      	mov	r0, r3
 8002834:	f000 fb5e 	bl	8002ef4 <RCCEx_PLLSAI2_Config>
 8002838:	4603      	mov	r3, r0
 800283a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800283c:	e003      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	74fb      	strb	r3, [r7, #19]
      break;
 8002842:	e000      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002844:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002846:	7cfb      	ldrb	r3, [r7, #19]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10b      	bne.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800284c:	4b52      	ldr	r3, [pc, #328]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800284e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002852:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800285a:	494f      	ldr	r1, [pc, #316]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800285c:	4313      	orrs	r3, r2
 800285e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002862:	e001      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002864:	7cfb      	ldrb	r3, [r7, #19]
 8002866:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 80a0 	beq.w	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002876:	2300      	movs	r3, #0
 8002878:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800287a:	4b47      	ldr	r3, [pc, #284]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800287c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800288a:	2300      	movs	r3, #0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00d      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002890:	4b41      	ldr	r3, [pc, #260]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002894:	4a40      	ldr	r2, [pc, #256]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800289a:	6593      	str	r3, [r2, #88]	; 0x58
 800289c:	4b3e      	ldr	r3, [pc, #248]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800289e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028a8:	2301      	movs	r3, #1
 80028aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028ac:	4b3b      	ldr	r3, [pc, #236]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a3a      	ldr	r2, [pc, #232]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028b8:	f7fe fd3c 	bl	8001334 <HAL_GetTick>
 80028bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028be:	e009      	b.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c0:	f7fe fd38 	bl	8001334 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d902      	bls.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	74fb      	strb	r3, [r7, #19]
        break;
 80028d2:	e005      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028d4:	4b31      	ldr	r3, [pc, #196]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0ef      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80028e0:	7cfb      	ldrb	r3, [r7, #19]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d15c      	bne.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028e6:	4b2c      	ldr	r3, [pc, #176]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d01f      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	429a      	cmp	r2, r3
 8002902:	d019      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002904:	4b24      	ldr	r3, [pc, #144]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800290e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002910:	4b21      	ldr	r3, [pc, #132]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002916:	4a20      	ldr	r2, [pc, #128]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800291c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002920:	4b1d      	ldr	r3, [pc, #116]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002926:	4a1c      	ldr	r2, [pc, #112]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002928:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800292c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002930:	4a19      	ldr	r2, [pc, #100]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d016      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002942:	f7fe fcf7 	bl	8001334 <HAL_GetTick>
 8002946:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002948:	e00b      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800294a:	f7fe fcf3 	bl	8001334 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	f241 3288 	movw	r2, #5000	; 0x1388
 8002958:	4293      	cmp	r3, r2
 800295a:	d902      	bls.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	74fb      	strb	r3, [r7, #19]
            break;
 8002960:	e006      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002962:	4b0d      	ldr	r3, [pc, #52]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0ec      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002970:	7cfb      	ldrb	r3, [r7, #19]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10c      	bne.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002976:	4b08      	ldr	r3, [pc, #32]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002986:	4904      	ldr	r1, [pc, #16]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002988:	4313      	orrs	r3, r2
 800298a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800298e:	e009      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002990:	7cfb      	ldrb	r3, [r7, #19]
 8002992:	74bb      	strb	r3, [r7, #18]
 8002994:	e006      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002996:	bf00      	nop
 8002998:	40021000 	.word	0x40021000
 800299c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029a0:	7cfb      	ldrb	r3, [r7, #19]
 80029a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029a4:	7c7b      	ldrb	r3, [r7, #17]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d105      	bne.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029aa:	4b9e      	ldr	r3, [pc, #632]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ae:	4a9d      	ldr	r2, [pc, #628]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00a      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029c2:	4b98      	ldr	r3, [pc, #608]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c8:	f023 0203 	bic.w	r2, r3, #3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d0:	4994      	ldr	r1, [pc, #592]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00a      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029e4:	4b8f      	ldr	r3, [pc, #572]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ea:	f023 020c 	bic.w	r2, r3, #12
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f2:	498c      	ldr	r1, [pc, #560]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00a      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a06:	4b87      	ldr	r3, [pc, #540]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	4983      	ldr	r1, [pc, #524]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0308 	and.w	r3, r3, #8
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00a      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a28:	4b7e      	ldr	r3, [pc, #504]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	497b      	ldr	r1, [pc, #492]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0310 	and.w	r3, r3, #16
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00a      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a4a:	4b76      	ldr	r3, [pc, #472]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a58:	4972      	ldr	r1, [pc, #456]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0320 	and.w	r3, r3, #32
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00a      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a6c:	4b6d      	ldr	r3, [pc, #436]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7a:	496a      	ldr	r1, [pc, #424]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00a      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a8e:	4b65      	ldr	r3, [pc, #404]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9c:	4961      	ldr	r1, [pc, #388]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00a      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ab0:	4b5c      	ldr	r3, [pc, #368]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002abe:	4959      	ldr	r1, [pc, #356]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00a      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ad2:	4b54      	ldr	r3, [pc, #336]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae0:	4950      	ldr	r1, [pc, #320]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00a      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002af4:	4b4b      	ldr	r3, [pc, #300]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b02:	4948      	ldr	r1, [pc, #288]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b16:	4b43      	ldr	r3, [pc, #268]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b24:	493f      	ldr	r1, [pc, #252]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d028      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b38:	4b3a      	ldr	r3, [pc, #232]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b46:	4937      	ldr	r1, [pc, #220]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b56:	d106      	bne.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b58:	4b32      	ldr	r3, [pc, #200]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	4a31      	ldr	r2, [pc, #196]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b62:	60d3      	str	r3, [r2, #12]
 8002b64:	e011      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b6e:	d10c      	bne.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3304      	adds	r3, #4
 8002b74:	2101      	movs	r1, #1
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 f8c8 	bl	8002d0c <RCCEx_PLLSAI1_Config>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b80:	7cfb      	ldrb	r3, [r7, #19]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002b86:	7cfb      	ldrb	r3, [r7, #19]
 8002b88:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d028      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b96:	4b23      	ldr	r3, [pc, #140]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba4:	491f      	ldr	r1, [pc, #124]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bb4:	d106      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bb6:	4b1b      	ldr	r3, [pc, #108]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	4a1a      	ldr	r2, [pc, #104]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bc0:	60d3      	str	r3, [r2, #12]
 8002bc2:	e011      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bcc:	d10c      	bne.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 f899 	bl	8002d0c <RCCEx_PLLSAI1_Config>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bde:	7cfb      	ldrb	r3, [r7, #19]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002be4:	7cfb      	ldrb	r3, [r7, #19]
 8002be6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d02b      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c02:	4908      	ldr	r1, [pc, #32]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c12:	d109      	bne.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c14:	4b03      	ldr	r3, [pc, #12]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	4a02      	ldr	r2, [pc, #8]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c1e:	60d3      	str	r3, [r2, #12]
 8002c20:	e014      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002c22:	bf00      	nop
 8002c24:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c30:	d10c      	bne.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3304      	adds	r3, #4
 8002c36:	2101      	movs	r1, #1
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 f867 	bl	8002d0c <RCCEx_PLLSAI1_Config>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c42:	7cfb      	ldrb	r3, [r7, #19]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002c48:	7cfb      	ldrb	r3, [r7, #19]
 8002c4a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d02f      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c58:	4b2b      	ldr	r3, [pc, #172]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c66:	4928      	ldr	r1, [pc, #160]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c76:	d10d      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3304      	adds	r3, #4
 8002c7c:	2102      	movs	r1, #2
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 f844 	bl	8002d0c <RCCEx_PLLSAI1_Config>
 8002c84:	4603      	mov	r3, r0
 8002c86:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c88:	7cfb      	ldrb	r3, [r7, #19]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d014      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c8e:	7cfb      	ldrb	r3, [r7, #19]
 8002c90:	74bb      	strb	r3, [r7, #18]
 8002c92:	e011      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c9c:	d10c      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3320      	adds	r3, #32
 8002ca2:	2102      	movs	r1, #2
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 f925 	bl	8002ef4 <RCCEx_PLLSAI2_Config>
 8002caa:	4603      	mov	r3, r0
 8002cac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cae:	7cfb      	ldrb	r3, [r7, #19]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002cb4:	7cfb      	ldrb	r3, [r7, #19]
 8002cb6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00a      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002cc4:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cd2:	490d      	ldr	r1, [pc, #52]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00b      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ce6:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cf6:	4904      	ldr	r1, [pc, #16]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002cfe:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40021000 	.word	0x40021000

08002d0c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d1a:	4b75      	ldr	r3, [pc, #468]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d018      	beq.n	8002d58 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d26:	4b72      	ldr	r3, [pc, #456]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	f003 0203 	and.w	r2, r3, #3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d10d      	bne.n	8002d52 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
       ||
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d009      	beq.n	8002d52 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d3e:	4b6c      	ldr	r3, [pc, #432]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	091b      	lsrs	r3, r3, #4
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
       ||
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d047      	beq.n	8002de2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	73fb      	strb	r3, [r7, #15]
 8002d56:	e044      	b.n	8002de2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	d018      	beq.n	8002d92 <RCCEx_PLLSAI1_Config+0x86>
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d825      	bhi.n	8002db0 <RCCEx_PLLSAI1_Config+0xa4>
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d002      	beq.n	8002d6e <RCCEx_PLLSAI1_Config+0x62>
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d009      	beq.n	8002d80 <RCCEx_PLLSAI1_Config+0x74>
 8002d6c:	e020      	b.n	8002db0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d6e:	4b60      	ldr	r3, [pc, #384]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d11d      	bne.n	8002db6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d7e:	e01a      	b.n	8002db6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d80:	4b5b      	ldr	r3, [pc, #364]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d116      	bne.n	8002dba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d90:	e013      	b.n	8002dba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d92:	4b57      	ldr	r3, [pc, #348]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10f      	bne.n	8002dbe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d9e:	4b54      	ldr	r3, [pc, #336]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d109      	bne.n	8002dbe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dae:	e006      	b.n	8002dbe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	73fb      	strb	r3, [r7, #15]
      break;
 8002db4:	e004      	b.n	8002dc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002db6:	bf00      	nop
 8002db8:	e002      	b.n	8002dc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dba:	bf00      	nop
 8002dbc:	e000      	b.n	8002dc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dbe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10d      	bne.n	8002de2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002dc6:	4b4a      	ldr	r3, [pc, #296]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6819      	ldr	r1, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	430b      	orrs	r3, r1
 8002ddc:	4944      	ldr	r1, [pc, #272]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002de2:	7bfb      	ldrb	r3, [r7, #15]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d17d      	bne.n	8002ee4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002de8:	4b41      	ldr	r3, [pc, #260]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a40      	ldr	r2, [pc, #256]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002df2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002df4:	f7fe fa9e 	bl	8001334 <HAL_GetTick>
 8002df8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002dfa:	e009      	b.n	8002e10 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002dfc:	f7fe fa9a 	bl	8001334 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d902      	bls.n	8002e10 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	73fb      	strb	r3, [r7, #15]
        break;
 8002e0e:	e005      	b.n	8002e1c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e10:	4b37      	ldr	r3, [pc, #220]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1ef      	bne.n	8002dfc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d160      	bne.n	8002ee4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d111      	bne.n	8002e4c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e28:	4b31      	ldr	r3, [pc, #196]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6892      	ldr	r2, [r2, #8]
 8002e38:	0211      	lsls	r1, r2, #8
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	68d2      	ldr	r2, [r2, #12]
 8002e3e:	0912      	lsrs	r2, r2, #4
 8002e40:	0452      	lsls	r2, r2, #17
 8002e42:	430a      	orrs	r2, r1
 8002e44:	492a      	ldr	r1, [pc, #168]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	610b      	str	r3, [r1, #16]
 8002e4a:	e027      	b.n	8002e9c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d112      	bne.n	8002e78 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e52:	4b27      	ldr	r3, [pc, #156]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e5a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6892      	ldr	r2, [r2, #8]
 8002e62:	0211      	lsls	r1, r2, #8
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6912      	ldr	r2, [r2, #16]
 8002e68:	0852      	lsrs	r2, r2, #1
 8002e6a:	3a01      	subs	r2, #1
 8002e6c:	0552      	lsls	r2, r2, #21
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	491f      	ldr	r1, [pc, #124]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	610b      	str	r3, [r1, #16]
 8002e76:	e011      	b.n	8002e9c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e78:	4b1d      	ldr	r3, [pc, #116]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6892      	ldr	r2, [r2, #8]
 8002e88:	0211      	lsls	r1, r2, #8
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6952      	ldr	r2, [r2, #20]
 8002e8e:	0852      	lsrs	r2, r2, #1
 8002e90:	3a01      	subs	r2, #1
 8002e92:	0652      	lsls	r2, r2, #25
 8002e94:	430a      	orrs	r2, r1
 8002e96:	4916      	ldr	r1, [pc, #88]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e9c:	4b14      	ldr	r3, [pc, #80]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a13      	ldr	r2, [pc, #76]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ea6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea8:	f7fe fa44 	bl	8001334 <HAL_GetTick>
 8002eac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002eae:	e009      	b.n	8002ec4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002eb0:	f7fe fa40 	bl	8001334 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d902      	bls.n	8002ec4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	73fb      	strb	r3, [r7, #15]
          break;
 8002ec2:	e005      	b.n	8002ed0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ec4:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0ef      	beq.n	8002eb0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d106      	bne.n	8002ee4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ed6:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed8:	691a      	ldr	r2, [r3, #16]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	4904      	ldr	r1, [pc, #16]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40021000 	.word	0x40021000

08002ef4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002efe:	2300      	movs	r3, #0
 8002f00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f02:	4b6a      	ldr	r3, [pc, #424]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d018      	beq.n	8002f40 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f0e:	4b67      	ldr	r3, [pc, #412]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f003 0203 	and.w	r2, r3, #3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d10d      	bne.n	8002f3a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
       ||
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d009      	beq.n	8002f3a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002f26:	4b61      	ldr	r3, [pc, #388]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	091b      	lsrs	r3, r3, #4
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
       ||
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d047      	beq.n	8002fca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	73fb      	strb	r3, [r7, #15]
 8002f3e:	e044      	b.n	8002fca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b03      	cmp	r3, #3
 8002f46:	d018      	beq.n	8002f7a <RCCEx_PLLSAI2_Config+0x86>
 8002f48:	2b03      	cmp	r3, #3
 8002f4a:	d825      	bhi.n	8002f98 <RCCEx_PLLSAI2_Config+0xa4>
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d002      	beq.n	8002f56 <RCCEx_PLLSAI2_Config+0x62>
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d009      	beq.n	8002f68 <RCCEx_PLLSAI2_Config+0x74>
 8002f54:	e020      	b.n	8002f98 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f56:	4b55      	ldr	r3, [pc, #340]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d11d      	bne.n	8002f9e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f66:	e01a      	b.n	8002f9e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f68:	4b50      	ldr	r3, [pc, #320]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d116      	bne.n	8002fa2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f78:	e013      	b.n	8002fa2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f7a:	4b4c      	ldr	r3, [pc, #304]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10f      	bne.n	8002fa6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f86:	4b49      	ldr	r3, [pc, #292]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d109      	bne.n	8002fa6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f96:	e006      	b.n	8002fa6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f9c:	e004      	b.n	8002fa8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f9e:	bf00      	nop
 8002fa0:	e002      	b.n	8002fa8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fa2:	bf00      	nop
 8002fa4:	e000      	b.n	8002fa8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fa6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10d      	bne.n	8002fca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fae:	4b3f      	ldr	r3, [pc, #252]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6819      	ldr	r1, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	430b      	orrs	r3, r1
 8002fc4:	4939      	ldr	r1, [pc, #228]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d167      	bne.n	80030a0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002fd0:	4b36      	ldr	r3, [pc, #216]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a35      	ldr	r2, [pc, #212]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fdc:	f7fe f9aa 	bl	8001334 <HAL_GetTick>
 8002fe0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fe2:	e009      	b.n	8002ff8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fe4:	f7fe f9a6 	bl	8001334 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d902      	bls.n	8002ff8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	73fb      	strb	r3, [r7, #15]
        break;
 8002ff6:	e005      	b.n	8003004 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ff8:	4b2c      	ldr	r3, [pc, #176]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1ef      	bne.n	8002fe4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003004:	7bfb      	ldrb	r3, [r7, #15]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d14a      	bne.n	80030a0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d111      	bne.n	8003034 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003010:	4b26      	ldr	r3, [pc, #152]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6892      	ldr	r2, [r2, #8]
 8003020:	0211      	lsls	r1, r2, #8
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	68d2      	ldr	r2, [r2, #12]
 8003026:	0912      	lsrs	r2, r2, #4
 8003028:	0452      	lsls	r2, r2, #17
 800302a:	430a      	orrs	r2, r1
 800302c:	491f      	ldr	r1, [pc, #124]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800302e:	4313      	orrs	r3, r2
 8003030:	614b      	str	r3, [r1, #20]
 8003032:	e011      	b.n	8003058 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003034:	4b1d      	ldr	r3, [pc, #116]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800303c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6892      	ldr	r2, [r2, #8]
 8003044:	0211      	lsls	r1, r2, #8
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6912      	ldr	r2, [r2, #16]
 800304a:	0852      	lsrs	r2, r2, #1
 800304c:	3a01      	subs	r2, #1
 800304e:	0652      	lsls	r2, r2, #25
 8003050:	430a      	orrs	r2, r1
 8003052:	4916      	ldr	r1, [pc, #88]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003054:	4313      	orrs	r3, r2
 8003056:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003058:	4b14      	ldr	r3, [pc, #80]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a13      	ldr	r2, [pc, #76]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800305e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003062:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003064:	f7fe f966 	bl	8001334 <HAL_GetTick>
 8003068:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800306a:	e009      	b.n	8003080 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800306c:	f7fe f962 	bl	8001334 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d902      	bls.n	8003080 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	73fb      	strb	r3, [r7, #15]
          break;
 800307e:	e005      	b.n	800308c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003080:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0ef      	beq.n	800306c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800308c:	7bfb      	ldrb	r3, [r7, #15]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d106      	bne.n	80030a0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003092:	4b06      	ldr	r3, [pc, #24]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003094:	695a      	ldr	r2, [r3, #20]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	4904      	ldr	r1, [pc, #16]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800309c:	4313      	orrs	r3, r2
 800309e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40021000 	.word	0x40021000

080030b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e049      	b.n	8003156 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d106      	bne.n	80030dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7fd fe98 	bl	8000e0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3304      	adds	r3, #4
 80030ec:	4619      	mov	r1, r3
 80030ee:	4610      	mov	r0, r2
 80030f0:	f000 fc22 	bl	8003938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b01      	cmp	r3, #1
 8003172:	d001      	beq.n	8003178 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e04f      	b.n	8003218 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68da      	ldr	r2, [r3, #12]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a23      	ldr	r2, [pc, #140]	; (8003224 <HAL_TIM_Base_Start_IT+0xc4>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d01d      	beq.n	80031d6 <HAL_TIM_Base_Start_IT+0x76>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a2:	d018      	beq.n	80031d6 <HAL_TIM_Base_Start_IT+0x76>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a1f      	ldr	r2, [pc, #124]	; (8003228 <HAL_TIM_Base_Start_IT+0xc8>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d013      	beq.n	80031d6 <HAL_TIM_Base_Start_IT+0x76>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a1e      	ldr	r2, [pc, #120]	; (800322c <HAL_TIM_Base_Start_IT+0xcc>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d00e      	beq.n	80031d6 <HAL_TIM_Base_Start_IT+0x76>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a1c      	ldr	r2, [pc, #112]	; (8003230 <HAL_TIM_Base_Start_IT+0xd0>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d009      	beq.n	80031d6 <HAL_TIM_Base_Start_IT+0x76>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a1b      	ldr	r2, [pc, #108]	; (8003234 <HAL_TIM_Base_Start_IT+0xd4>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d004      	beq.n	80031d6 <HAL_TIM_Base_Start_IT+0x76>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a19      	ldr	r2, [pc, #100]	; (8003238 <HAL_TIM_Base_Start_IT+0xd8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d115      	bne.n	8003202 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	4b17      	ldr	r3, [pc, #92]	; (800323c <HAL_TIM_Base_Start_IT+0xdc>)
 80031de:	4013      	ands	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2b06      	cmp	r3, #6
 80031e6:	d015      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0xb4>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ee:	d011      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003200:	e008      	b.n	8003214 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f042 0201 	orr.w	r2, r2, #1
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	e000      	b.n	8003216 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003214:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	40012c00 	.word	0x40012c00
 8003228:	40000400 	.word	0x40000400
 800322c:	40000800 	.word	0x40000800
 8003230:	40000c00 	.word	0x40000c00
 8003234:	40013400 	.word	0x40013400
 8003238:	40014000 	.word	0x40014000
 800323c:	00010007 	.word	0x00010007

08003240 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e049      	b.n	80032e6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d106      	bne.n	800326c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7fd fe12 	bl	8000e90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2202      	movs	r2, #2
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3304      	adds	r3, #4
 800327c:	4619      	mov	r1, r3
 800327e:	4610      	mov	r0, r2
 8003280:	f000 fb5a 	bl	8003938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b082      	sub	sp, #8
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b02      	cmp	r3, #2
 8003302:	d122      	bne.n	800334a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b02      	cmp	r3, #2
 8003310:	d11b      	bne.n	800334a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f06f 0202 	mvn.w	r2, #2
 800331a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	f003 0303 	and.w	r3, r3, #3
 800332c:	2b00      	cmp	r3, #0
 800332e:	d003      	beq.n	8003338 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 fae2 	bl	80038fa <HAL_TIM_IC_CaptureCallback>
 8003336:	e005      	b.n	8003344 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 fad4 	bl	80038e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 fae5 	bl	800390e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b04      	cmp	r3, #4
 8003356:	d122      	bne.n	800339e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f003 0304 	and.w	r3, r3, #4
 8003362:	2b04      	cmp	r3, #4
 8003364:	d11b      	bne.n	800339e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f06f 0204 	mvn.w	r2, #4
 800336e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 fab8 	bl	80038fa <HAL_TIM_IC_CaptureCallback>
 800338a:	e005      	b.n	8003398 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 faaa 	bl	80038e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 fabb 	bl	800390e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d122      	bne.n	80033f2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d11b      	bne.n	80033f2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f06f 0208 	mvn.w	r2, #8
 80033c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2204      	movs	r2, #4
 80033c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	f003 0303 	and.w	r3, r3, #3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 fa8e 	bl	80038fa <HAL_TIM_IC_CaptureCallback>
 80033de:	e005      	b.n	80033ec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 fa80 	bl	80038e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 fa91 	bl	800390e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	f003 0310 	and.w	r3, r3, #16
 80033fc:	2b10      	cmp	r3, #16
 80033fe:	d122      	bne.n	8003446 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f003 0310 	and.w	r3, r3, #16
 800340a:	2b10      	cmp	r3, #16
 800340c:	d11b      	bne.n	8003446 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f06f 0210 	mvn.w	r2, #16
 8003416:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2208      	movs	r2, #8
 800341c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 fa64 	bl	80038fa <HAL_TIM_IC_CaptureCallback>
 8003432:	e005      	b.n	8003440 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 fa56 	bl	80038e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fa67 	bl	800390e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b01      	cmp	r3, #1
 8003452:	d10e      	bne.n	8003472 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b01      	cmp	r3, #1
 8003460:	d107      	bne.n	8003472 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f06f 0201 	mvn.w	r2, #1
 800346a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7fd fc01 	bl	8000c74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347c:	2b80      	cmp	r3, #128	; 0x80
 800347e:	d10e      	bne.n	800349e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800348a:	2b80      	cmp	r3, #128	; 0x80
 800348c:	d107      	bne.n	800349e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 fee9 	bl	8004270 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ac:	d10e      	bne.n	80034cc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b8:	2b80      	cmp	r3, #128	; 0x80
 80034ba:	d107      	bne.n	80034cc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80034c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 fedc 	bl	8004284 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d6:	2b40      	cmp	r3, #64	; 0x40
 80034d8:	d10e      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e4:	2b40      	cmp	r3, #64	; 0x40
 80034e6:	d107      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fa15 	bl	8003922 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f003 0320 	and.w	r3, r3, #32
 8003502:	2b20      	cmp	r3, #32
 8003504:	d10e      	bne.n	8003524 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f003 0320 	and.w	r3, r3, #32
 8003510:	2b20      	cmp	r3, #32
 8003512:	d107      	bne.n	8003524 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f06f 0220 	mvn.w	r2, #32
 800351c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fe9c 	bl	800425c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003524:	bf00      	nop
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003538:	2300      	movs	r3, #0
 800353a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003542:	2b01      	cmp	r3, #1
 8003544:	d101      	bne.n	800354a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003546:	2302      	movs	r3, #2
 8003548:	e0ff      	b.n	800374a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b14      	cmp	r3, #20
 8003556:	f200 80f0 	bhi.w	800373a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800355a:	a201      	add	r2, pc, #4	; (adr r2, 8003560 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800355c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003560:	080035b5 	.word	0x080035b5
 8003564:	0800373b 	.word	0x0800373b
 8003568:	0800373b 	.word	0x0800373b
 800356c:	0800373b 	.word	0x0800373b
 8003570:	080035f5 	.word	0x080035f5
 8003574:	0800373b 	.word	0x0800373b
 8003578:	0800373b 	.word	0x0800373b
 800357c:	0800373b 	.word	0x0800373b
 8003580:	08003637 	.word	0x08003637
 8003584:	0800373b 	.word	0x0800373b
 8003588:	0800373b 	.word	0x0800373b
 800358c:	0800373b 	.word	0x0800373b
 8003590:	08003677 	.word	0x08003677
 8003594:	0800373b 	.word	0x0800373b
 8003598:	0800373b 	.word	0x0800373b
 800359c:	0800373b 	.word	0x0800373b
 80035a0:	080036b9 	.word	0x080036b9
 80035a4:	0800373b 	.word	0x0800373b
 80035a8:	0800373b 	.word	0x0800373b
 80035ac:	0800373b 	.word	0x0800373b
 80035b0:	080036f9 	.word	0x080036f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68b9      	ldr	r1, [r7, #8]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 fa56 	bl	8003a6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699a      	ldr	r2, [r3, #24]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0208 	orr.w	r2, r2, #8
 80035ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699a      	ldr	r2, [r3, #24]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0204 	bic.w	r2, r2, #4
 80035de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6999      	ldr	r1, [r3, #24]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	691a      	ldr	r2, [r3, #16]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	619a      	str	r2, [r3, #24]
      break;
 80035f2:	e0a5      	b.n	8003740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68b9      	ldr	r1, [r7, #8]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 fac6 	bl	8003b8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699a      	ldr	r2, [r3, #24]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800360e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699a      	ldr	r2, [r3, #24]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800361e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6999      	ldr	r1, [r3, #24]
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	021a      	lsls	r2, r3, #8
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	619a      	str	r2, [r3, #24]
      break;
 8003634:	e084      	b.n	8003740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68b9      	ldr	r1, [r7, #8]
 800363c:	4618      	mov	r0, r3
 800363e:	f000 fb2f 	bl	8003ca0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	69da      	ldr	r2, [r3, #28]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0208 	orr.w	r2, r2, #8
 8003650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	69da      	ldr	r2, [r3, #28]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0204 	bic.w	r2, r2, #4
 8003660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	69d9      	ldr	r1, [r3, #28]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	61da      	str	r2, [r3, #28]
      break;
 8003674:	e064      	b.n	8003740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68b9      	ldr	r1, [r7, #8]
 800367c:	4618      	mov	r0, r3
 800367e:	f000 fb97 	bl	8003db0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	69da      	ldr	r2, [r3, #28]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003690:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	69da      	ldr	r2, [r3, #28]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	69d9      	ldr	r1, [r3, #28]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	021a      	lsls	r2, r3, #8
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	61da      	str	r2, [r3, #28]
      break;
 80036b6:	e043      	b.n	8003740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68b9      	ldr	r1, [r7, #8]
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 fbe0 	bl	8003e84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0208 	orr.w	r2, r2, #8
 80036d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0204 	bic.w	r2, r2, #4
 80036e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	691a      	ldr	r2, [r3, #16]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80036f6:	e023      	b.n	8003740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68b9      	ldr	r1, [r7, #8]
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fc24 	bl	8003f4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003712:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003722:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	021a      	lsls	r2, r3, #8
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003738:	e002      	b.n	8003740 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	75fb      	strb	r3, [r7, #23]
      break;
 800373e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003748:	7dfb      	ldrb	r3, [r7, #23]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop

08003754 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_TIM_ConfigClockSource+0x1c>
 800376c:	2302      	movs	r3, #2
 800376e:	e0b6      	b.n	80038de <HAL_TIM_ConfigClockSource+0x18a>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800378e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800379a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ac:	d03e      	beq.n	800382c <HAL_TIM_ConfigClockSource+0xd8>
 80037ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037b2:	f200 8087 	bhi.w	80038c4 <HAL_TIM_ConfigClockSource+0x170>
 80037b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ba:	f000 8086 	beq.w	80038ca <HAL_TIM_ConfigClockSource+0x176>
 80037be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c2:	d87f      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x170>
 80037c4:	2b70      	cmp	r3, #112	; 0x70
 80037c6:	d01a      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0xaa>
 80037c8:	2b70      	cmp	r3, #112	; 0x70
 80037ca:	d87b      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x170>
 80037cc:	2b60      	cmp	r3, #96	; 0x60
 80037ce:	d050      	beq.n	8003872 <HAL_TIM_ConfigClockSource+0x11e>
 80037d0:	2b60      	cmp	r3, #96	; 0x60
 80037d2:	d877      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x170>
 80037d4:	2b50      	cmp	r3, #80	; 0x50
 80037d6:	d03c      	beq.n	8003852 <HAL_TIM_ConfigClockSource+0xfe>
 80037d8:	2b50      	cmp	r3, #80	; 0x50
 80037da:	d873      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x170>
 80037dc:	2b40      	cmp	r3, #64	; 0x40
 80037de:	d058      	beq.n	8003892 <HAL_TIM_ConfigClockSource+0x13e>
 80037e0:	2b40      	cmp	r3, #64	; 0x40
 80037e2:	d86f      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x170>
 80037e4:	2b30      	cmp	r3, #48	; 0x30
 80037e6:	d064      	beq.n	80038b2 <HAL_TIM_ConfigClockSource+0x15e>
 80037e8:	2b30      	cmp	r3, #48	; 0x30
 80037ea:	d86b      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x170>
 80037ec:	2b20      	cmp	r3, #32
 80037ee:	d060      	beq.n	80038b2 <HAL_TIM_ConfigClockSource+0x15e>
 80037f0:	2b20      	cmp	r3, #32
 80037f2:	d867      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x170>
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d05c      	beq.n	80038b2 <HAL_TIM_ConfigClockSource+0x15e>
 80037f8:	2b10      	cmp	r3, #16
 80037fa:	d05a      	beq.n	80038b2 <HAL_TIM_ConfigClockSource+0x15e>
 80037fc:	e062      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	6899      	ldr	r1, [r3, #8]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f000 fc7d 	bl	800410c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003820:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	609a      	str	r2, [r3, #8]
      break;
 800382a:	e04f      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6818      	ldr	r0, [r3, #0]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	6899      	ldr	r1, [r3, #8]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f000 fc66 	bl	800410c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800384e:	609a      	str	r2, [r3, #8]
      break;
 8003850:	e03c      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6818      	ldr	r0, [r3, #0]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	6859      	ldr	r1, [r3, #4]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	461a      	mov	r2, r3
 8003860:	f000 fbda 	bl	8004018 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2150      	movs	r1, #80	; 0x50
 800386a:	4618      	mov	r0, r3
 800386c:	f000 fc33 	bl	80040d6 <TIM_ITRx_SetConfig>
      break;
 8003870:	e02c      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	6859      	ldr	r1, [r3, #4]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	461a      	mov	r2, r3
 8003880:	f000 fbf9 	bl	8004076 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2160      	movs	r1, #96	; 0x60
 800388a:	4618      	mov	r0, r3
 800388c:	f000 fc23 	bl	80040d6 <TIM_ITRx_SetConfig>
      break;
 8003890:	e01c      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6818      	ldr	r0, [r3, #0]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	6859      	ldr	r1, [r3, #4]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	461a      	mov	r2, r3
 80038a0:	f000 fbba 	bl	8004018 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2140      	movs	r1, #64	; 0x40
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 fc13 	bl	80040d6 <TIM_ITRx_SetConfig>
      break;
 80038b0:	e00c      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4619      	mov	r1, r3
 80038bc:	4610      	mov	r0, r2
 80038be:	f000 fc0a 	bl	80040d6 <TIM_ITRx_SetConfig>
      break;
 80038c2:	e003      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	73fb      	strb	r3, [r7, #15]
      break;
 80038c8:	e000      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80038ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
	...

08003938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a40      	ldr	r2, [pc, #256]	; (8003a4c <TIM_Base_SetConfig+0x114>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d013      	beq.n	8003978 <TIM_Base_SetConfig+0x40>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003956:	d00f      	beq.n	8003978 <TIM_Base_SetConfig+0x40>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a3d      	ldr	r2, [pc, #244]	; (8003a50 <TIM_Base_SetConfig+0x118>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d00b      	beq.n	8003978 <TIM_Base_SetConfig+0x40>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a3c      	ldr	r2, [pc, #240]	; (8003a54 <TIM_Base_SetConfig+0x11c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d007      	beq.n	8003978 <TIM_Base_SetConfig+0x40>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a3b      	ldr	r2, [pc, #236]	; (8003a58 <TIM_Base_SetConfig+0x120>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d003      	beq.n	8003978 <TIM_Base_SetConfig+0x40>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a3a      	ldr	r2, [pc, #232]	; (8003a5c <TIM_Base_SetConfig+0x124>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d108      	bne.n	800398a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800397e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	4313      	orrs	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a2f      	ldr	r2, [pc, #188]	; (8003a4c <TIM_Base_SetConfig+0x114>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d01f      	beq.n	80039d2 <TIM_Base_SetConfig+0x9a>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003998:	d01b      	beq.n	80039d2 <TIM_Base_SetConfig+0x9a>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a2c      	ldr	r2, [pc, #176]	; (8003a50 <TIM_Base_SetConfig+0x118>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d017      	beq.n	80039d2 <TIM_Base_SetConfig+0x9a>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a2b      	ldr	r2, [pc, #172]	; (8003a54 <TIM_Base_SetConfig+0x11c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d013      	beq.n	80039d2 <TIM_Base_SetConfig+0x9a>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a2a      	ldr	r2, [pc, #168]	; (8003a58 <TIM_Base_SetConfig+0x120>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d00f      	beq.n	80039d2 <TIM_Base_SetConfig+0x9a>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a29      	ldr	r2, [pc, #164]	; (8003a5c <TIM_Base_SetConfig+0x124>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d00b      	beq.n	80039d2 <TIM_Base_SetConfig+0x9a>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a28      	ldr	r2, [pc, #160]	; (8003a60 <TIM_Base_SetConfig+0x128>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d007      	beq.n	80039d2 <TIM_Base_SetConfig+0x9a>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a27      	ldr	r2, [pc, #156]	; (8003a64 <TIM_Base_SetConfig+0x12c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d003      	beq.n	80039d2 <TIM_Base_SetConfig+0x9a>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a26      	ldr	r2, [pc, #152]	; (8003a68 <TIM_Base_SetConfig+0x130>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d108      	bne.n	80039e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a10      	ldr	r2, [pc, #64]	; (8003a4c <TIM_Base_SetConfig+0x114>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d00f      	beq.n	8003a30 <TIM_Base_SetConfig+0xf8>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a12      	ldr	r2, [pc, #72]	; (8003a5c <TIM_Base_SetConfig+0x124>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d00b      	beq.n	8003a30 <TIM_Base_SetConfig+0xf8>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a11      	ldr	r2, [pc, #68]	; (8003a60 <TIM_Base_SetConfig+0x128>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d007      	beq.n	8003a30 <TIM_Base_SetConfig+0xf8>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a10      	ldr	r2, [pc, #64]	; (8003a64 <TIM_Base_SetConfig+0x12c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d003      	beq.n	8003a30 <TIM_Base_SetConfig+0xf8>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a0f      	ldr	r2, [pc, #60]	; (8003a68 <TIM_Base_SetConfig+0x130>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d103      	bne.n	8003a38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	691a      	ldr	r2, [r3, #16]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	615a      	str	r2, [r3, #20]
}
 8003a3e:	bf00      	nop
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	40012c00 	.word	0x40012c00
 8003a50:	40000400 	.word	0x40000400
 8003a54:	40000800 	.word	0x40000800
 8003a58:	40000c00 	.word	0x40000c00
 8003a5c:	40013400 	.word	0x40013400
 8003a60:	40014000 	.word	0x40014000
 8003a64:	40014400 	.word	0x40014400
 8003a68:	40014800 	.word	0x40014800

08003a6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	f023 0201 	bic.w	r2, r3, #1
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f023 0303 	bic.w	r3, r3, #3
 8003aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f023 0302 	bic.w	r3, r3, #2
 8003ab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a2c      	ldr	r2, [pc, #176]	; (8003b78 <TIM_OC1_SetConfig+0x10c>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d00f      	beq.n	8003aec <TIM_OC1_SetConfig+0x80>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a2b      	ldr	r2, [pc, #172]	; (8003b7c <TIM_OC1_SetConfig+0x110>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d00b      	beq.n	8003aec <TIM_OC1_SetConfig+0x80>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a2a      	ldr	r2, [pc, #168]	; (8003b80 <TIM_OC1_SetConfig+0x114>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d007      	beq.n	8003aec <TIM_OC1_SetConfig+0x80>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a29      	ldr	r2, [pc, #164]	; (8003b84 <TIM_OC1_SetConfig+0x118>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d003      	beq.n	8003aec <TIM_OC1_SetConfig+0x80>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a28      	ldr	r2, [pc, #160]	; (8003b88 <TIM_OC1_SetConfig+0x11c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d10c      	bne.n	8003b06 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f023 0308 	bic.w	r3, r3, #8
 8003af2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f023 0304 	bic.w	r3, r3, #4
 8003b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a1b      	ldr	r2, [pc, #108]	; (8003b78 <TIM_OC1_SetConfig+0x10c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d00f      	beq.n	8003b2e <TIM_OC1_SetConfig+0xc2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a1a      	ldr	r2, [pc, #104]	; (8003b7c <TIM_OC1_SetConfig+0x110>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00b      	beq.n	8003b2e <TIM_OC1_SetConfig+0xc2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a19      	ldr	r2, [pc, #100]	; (8003b80 <TIM_OC1_SetConfig+0x114>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d007      	beq.n	8003b2e <TIM_OC1_SetConfig+0xc2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a18      	ldr	r2, [pc, #96]	; (8003b84 <TIM_OC1_SetConfig+0x118>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d003      	beq.n	8003b2e <TIM_OC1_SetConfig+0xc2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a17      	ldr	r2, [pc, #92]	; (8003b88 <TIM_OC1_SetConfig+0x11c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d111      	bne.n	8003b52 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	621a      	str	r2, [r3, #32]
}
 8003b6c:	bf00      	nop
 8003b6e:	371c      	adds	r7, #28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	40012c00 	.word	0x40012c00
 8003b7c:	40013400 	.word	0x40013400
 8003b80:	40014000 	.word	0x40014000
 8003b84:	40014400 	.word	0x40014400
 8003b88:	40014800 	.word	0x40014800

08003b8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	f023 0210 	bic.w	r2, r3, #16
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	021b      	lsls	r3, r3, #8
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f023 0320 	bic.w	r3, r3, #32
 8003bda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a28      	ldr	r2, [pc, #160]	; (8003c8c <TIM_OC2_SetConfig+0x100>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d003      	beq.n	8003bf8 <TIM_OC2_SetConfig+0x6c>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a27      	ldr	r2, [pc, #156]	; (8003c90 <TIM_OC2_SetConfig+0x104>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d10d      	bne.n	8003c14 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a1d      	ldr	r2, [pc, #116]	; (8003c8c <TIM_OC2_SetConfig+0x100>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d00f      	beq.n	8003c3c <TIM_OC2_SetConfig+0xb0>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a1c      	ldr	r2, [pc, #112]	; (8003c90 <TIM_OC2_SetConfig+0x104>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d00b      	beq.n	8003c3c <TIM_OC2_SetConfig+0xb0>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a1b      	ldr	r2, [pc, #108]	; (8003c94 <TIM_OC2_SetConfig+0x108>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d007      	beq.n	8003c3c <TIM_OC2_SetConfig+0xb0>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a1a      	ldr	r2, [pc, #104]	; (8003c98 <TIM_OC2_SetConfig+0x10c>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d003      	beq.n	8003c3c <TIM_OC2_SetConfig+0xb0>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a19      	ldr	r2, [pc, #100]	; (8003c9c <TIM_OC2_SetConfig+0x110>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d113      	bne.n	8003c64 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	621a      	str	r2, [r3, #32]
}
 8003c7e:	bf00      	nop
 8003c80:	371c      	adds	r7, #28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	40012c00 	.word	0x40012c00
 8003c90:	40013400 	.word	0x40013400
 8003c94:	40014000 	.word	0x40014000
 8003c98:	40014400 	.word	0x40014400
 8003c9c:	40014800 	.word	0x40014800

08003ca0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b087      	sub	sp, #28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f023 0303 	bic.w	r3, r3, #3
 8003cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	021b      	lsls	r3, r3, #8
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a27      	ldr	r2, [pc, #156]	; (8003d9c <TIM_OC3_SetConfig+0xfc>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d003      	beq.n	8003d0a <TIM_OC3_SetConfig+0x6a>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a26      	ldr	r2, [pc, #152]	; (8003da0 <TIM_OC3_SetConfig+0x100>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d10d      	bne.n	8003d26 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	021b      	lsls	r3, r3, #8
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a1c      	ldr	r2, [pc, #112]	; (8003d9c <TIM_OC3_SetConfig+0xfc>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d00f      	beq.n	8003d4e <TIM_OC3_SetConfig+0xae>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a1b      	ldr	r2, [pc, #108]	; (8003da0 <TIM_OC3_SetConfig+0x100>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d00b      	beq.n	8003d4e <TIM_OC3_SetConfig+0xae>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a1a      	ldr	r2, [pc, #104]	; (8003da4 <TIM_OC3_SetConfig+0x104>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d007      	beq.n	8003d4e <TIM_OC3_SetConfig+0xae>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a19      	ldr	r2, [pc, #100]	; (8003da8 <TIM_OC3_SetConfig+0x108>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d003      	beq.n	8003d4e <TIM_OC3_SetConfig+0xae>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a18      	ldr	r2, [pc, #96]	; (8003dac <TIM_OC3_SetConfig+0x10c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d113      	bne.n	8003d76 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	621a      	str	r2, [r3, #32]
}
 8003d90:	bf00      	nop
 8003d92:	371c      	adds	r7, #28
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	40012c00 	.word	0x40012c00
 8003da0:	40013400 	.word	0x40013400
 8003da4:	40014000 	.word	0x40014000
 8003da8:	40014400 	.word	0x40014400
 8003dac:	40014800 	.word	0x40014800

08003db0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	021b      	lsls	r3, r3, #8
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	031b      	lsls	r3, r3, #12
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a18      	ldr	r2, [pc, #96]	; (8003e70 <TIM_OC4_SetConfig+0xc0>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d00f      	beq.n	8003e34 <TIM_OC4_SetConfig+0x84>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a17      	ldr	r2, [pc, #92]	; (8003e74 <TIM_OC4_SetConfig+0xc4>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d00b      	beq.n	8003e34 <TIM_OC4_SetConfig+0x84>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a16      	ldr	r2, [pc, #88]	; (8003e78 <TIM_OC4_SetConfig+0xc8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d007      	beq.n	8003e34 <TIM_OC4_SetConfig+0x84>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a15      	ldr	r2, [pc, #84]	; (8003e7c <TIM_OC4_SetConfig+0xcc>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d003      	beq.n	8003e34 <TIM_OC4_SetConfig+0x84>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a14      	ldr	r2, [pc, #80]	; (8003e80 <TIM_OC4_SetConfig+0xd0>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d109      	bne.n	8003e48 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	019b      	lsls	r3, r3, #6
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	621a      	str	r2, [r3, #32]
}
 8003e62:	bf00      	nop
 8003e64:	371c      	adds	r7, #28
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40012c00 	.word	0x40012c00
 8003e74:	40013400 	.word	0x40013400
 8003e78:	40014000 	.word	0x40014000
 8003e7c:	40014400 	.word	0x40014400
 8003e80:	40014800 	.word	0x40014800

08003e84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ec8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	041b      	lsls	r3, r3, #16
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a17      	ldr	r2, [pc, #92]	; (8003f38 <TIM_OC5_SetConfig+0xb4>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d00f      	beq.n	8003efe <TIM_OC5_SetConfig+0x7a>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a16      	ldr	r2, [pc, #88]	; (8003f3c <TIM_OC5_SetConfig+0xb8>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d00b      	beq.n	8003efe <TIM_OC5_SetConfig+0x7a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a15      	ldr	r2, [pc, #84]	; (8003f40 <TIM_OC5_SetConfig+0xbc>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d007      	beq.n	8003efe <TIM_OC5_SetConfig+0x7a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a14      	ldr	r2, [pc, #80]	; (8003f44 <TIM_OC5_SetConfig+0xc0>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d003      	beq.n	8003efe <TIM_OC5_SetConfig+0x7a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a13      	ldr	r2, [pc, #76]	; (8003f48 <TIM_OC5_SetConfig+0xc4>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d109      	bne.n	8003f12 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	021b      	lsls	r3, r3, #8
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	621a      	str	r2, [r3, #32]
}
 8003f2c:	bf00      	nop
 8003f2e:	371c      	adds	r7, #28
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	40012c00 	.word	0x40012c00
 8003f3c:	40013400 	.word	0x40013400
 8003f40:	40014000 	.word	0x40014000
 8003f44:	40014400 	.word	0x40014400
 8003f48:	40014800 	.word	0x40014800

08003f4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b087      	sub	sp, #28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	021b      	lsls	r3, r3, #8
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	051b      	lsls	r3, r3, #20
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a18      	ldr	r2, [pc, #96]	; (8004004 <TIM_OC6_SetConfig+0xb8>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d00f      	beq.n	8003fc8 <TIM_OC6_SetConfig+0x7c>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a17      	ldr	r2, [pc, #92]	; (8004008 <TIM_OC6_SetConfig+0xbc>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d00b      	beq.n	8003fc8 <TIM_OC6_SetConfig+0x7c>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a16      	ldr	r2, [pc, #88]	; (800400c <TIM_OC6_SetConfig+0xc0>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d007      	beq.n	8003fc8 <TIM_OC6_SetConfig+0x7c>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a15      	ldr	r2, [pc, #84]	; (8004010 <TIM_OC6_SetConfig+0xc4>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d003      	beq.n	8003fc8 <TIM_OC6_SetConfig+0x7c>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a14      	ldr	r2, [pc, #80]	; (8004014 <TIM_OC6_SetConfig+0xc8>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d109      	bne.n	8003fdc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	029b      	lsls	r3, r3, #10
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	621a      	str	r2, [r3, #32]
}
 8003ff6:	bf00      	nop
 8003ff8:	371c      	adds	r7, #28
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40012c00 	.word	0x40012c00
 8004008:	40013400 	.word	0x40013400
 800400c:	40014000 	.word	0x40014000
 8004010:	40014400 	.word	0x40014400
 8004014:	40014800 	.word	0x40014800

08004018 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004018:	b480      	push	{r7}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	f023 0201 	bic.w	r2, r3, #1
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004042:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	011b      	lsls	r3, r3, #4
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4313      	orrs	r3, r2
 800404c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f023 030a 	bic.w	r3, r3, #10
 8004054:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	4313      	orrs	r3, r2
 800405c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	621a      	str	r2, [r3, #32]
}
 800406a:	bf00      	nop
 800406c:	371c      	adds	r7, #28
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004076:	b480      	push	{r7}
 8004078:	b087      	sub	sp, #28
 800407a:	af00      	add	r7, sp, #0
 800407c:	60f8      	str	r0, [r7, #12]
 800407e:	60b9      	str	r1, [r7, #8]
 8004080:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	f023 0210 	bic.w	r2, r3, #16
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	031b      	lsls	r3, r3, #12
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	621a      	str	r2, [r3, #32]
}
 80040ca:	bf00      	nop
 80040cc:	371c      	adds	r7, #28
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b085      	sub	sp, #20
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
 80040de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	f043 0307 	orr.w	r3, r3, #7
 80040f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	609a      	str	r2, [r3, #8]
}
 8004100:	bf00      	nop
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
 8004118:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004126:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	021a      	lsls	r2, r3, #8
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	431a      	orrs	r2, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	4313      	orrs	r3, r2
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	4313      	orrs	r3, r2
 8004138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	609a      	str	r2, [r3, #8]
}
 8004140:	bf00      	nop
 8004142:	371c      	adds	r7, #28
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004160:	2302      	movs	r3, #2
 8004162:	e068      	b.n	8004236 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2202      	movs	r2, #2
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a2e      	ldr	r2, [pc, #184]	; (8004244 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d004      	beq.n	8004198 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a2d      	ldr	r2, [pc, #180]	; (8004248 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d108      	bne.n	80041aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800419e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a1e      	ldr	r2, [pc, #120]	; (8004244 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d01d      	beq.n	800420a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d6:	d018      	beq.n	800420a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a1b      	ldr	r2, [pc, #108]	; (800424c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d013      	beq.n	800420a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a1a      	ldr	r2, [pc, #104]	; (8004250 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d00e      	beq.n	800420a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a18      	ldr	r2, [pc, #96]	; (8004254 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d009      	beq.n	800420a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a13      	ldr	r2, [pc, #76]	; (8004248 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d004      	beq.n	800420a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a14      	ldr	r2, [pc, #80]	; (8004258 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d10c      	bne.n	8004224 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004210:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	4313      	orrs	r3, r2
 800421a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40012c00 	.word	0x40012c00
 8004248:	40013400 	.word	0x40013400
 800424c:	40000400 	.word	0x40000400
 8004250:	40000800 	.word	0x40000800
 8004254:	40000c00 	.word	0x40000c00
 8004258:	40014000 	.word	0x40014000

0800425c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e040      	b.n	800432c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d106      	bne.n	80042c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7fc fe40 	bl	8000f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2224      	movs	r2, #36	; 0x24
 80042c4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0201 	bic.w	r2, r2, #1
 80042d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fbc2 	bl	8004a60 <UART_SetConfig>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d101      	bne.n	80042e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e022      	b.n	800432c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d002      	beq.n	80042f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 fe6e 	bl	8004fd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004302:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689a      	ldr	r2, [r3, #8]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004312:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 fef5 	bl	8005114 <UART_CheckIdleState>
 800432a:	4603      	mov	r3, r0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08a      	sub	sp, #40	; 0x28
 8004338:	af02      	add	r7, sp, #8
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	603b      	str	r3, [r7, #0]
 8004340:	4613      	mov	r3, r2
 8004342:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004348:	2b20      	cmp	r3, #32
 800434a:	f040 8082 	bne.w	8004452 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d002      	beq.n	800435a <HAL_UART_Transmit+0x26>
 8004354:	88fb      	ldrh	r3, [r7, #6]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e07a      	b.n	8004454 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_UART_Transmit+0x38>
 8004368:	2302      	movs	r3, #2
 800436a:	e073      	b.n	8004454 <HAL_UART_Transmit+0x120>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2221      	movs	r2, #33	; 0x21
 8004380:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004382:	f7fc ffd7 	bl	8001334 <HAL_GetTick>
 8004386:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	88fa      	ldrh	r2, [r7, #6]
 800438c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	88fa      	ldrh	r2, [r7, #6]
 8004394:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043a0:	d108      	bne.n	80043b4 <HAL_UART_Transmit+0x80>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d104      	bne.n	80043b4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80043aa:	2300      	movs	r3, #0
 80043ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	61bb      	str	r3, [r7, #24]
 80043b2:	e003      	b.n	80043bc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043b8:	2300      	movs	r3, #0
 80043ba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80043c4:	e02d      	b.n	8004422 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	2200      	movs	r2, #0
 80043ce:	2180      	movs	r1, #128	; 0x80
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 fee8 	bl	80051a6 <UART_WaitOnFlagUntilTimeout>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e039      	b.n	8004454 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10b      	bne.n	80043fe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	881a      	ldrh	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043f2:	b292      	uxth	r2, r2
 80043f4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	3302      	adds	r3, #2
 80043fa:	61bb      	str	r3, [r7, #24]
 80043fc:	e008      	b.n	8004410 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	781a      	ldrb	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	b292      	uxth	r2, r2
 8004408:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	3301      	adds	r3, #1
 800440e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1cb      	bne.n	80043c6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2200      	movs	r2, #0
 8004436:	2140      	movs	r1, #64	; 0x40
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 feb4 	bl	80051a6 <UART_WaitOnFlagUntilTimeout>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e005      	b.n	8004454 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2220      	movs	r2, #32
 800444c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	e000      	b.n	8004454 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004452:	2302      	movs	r3, #2
  }
}
 8004454:	4618      	mov	r0, r3
 8004456:	3720      	adds	r7, #32
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b0ba      	sub	sp, #232	; 0xe8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004482:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004486:	f640 030f 	movw	r3, #2063	; 0x80f
 800448a:	4013      	ands	r3, r2
 800448c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004490:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004494:	2b00      	cmp	r3, #0
 8004496:	d115      	bne.n	80044c4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800449c:	f003 0320 	and.w	r3, r3, #32
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00f      	beq.n	80044c4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80044a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044a8:	f003 0320 	and.w	r3, r3, #32
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d009      	beq.n	80044c4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 82a6 	beq.w	8004a06 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	4798      	blx	r3
      }
      return;
 80044c2:	e2a0      	b.n	8004a06 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80044c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 8117 	beq.w	80046fc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80044ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d106      	bne.n	80044e8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80044da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80044de:	4b85      	ldr	r3, [pc, #532]	; (80046f4 <HAL_UART_IRQHandler+0x298>)
 80044e0:	4013      	ands	r3, r2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 810a 	beq.w	80046fc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80044e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d011      	beq.n	8004518 <HAL_UART_IRQHandler+0xbc>
 80044f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00b      	beq.n	8004518 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2201      	movs	r2, #1
 8004506:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800450e:	f043 0201 	orr.w	r2, r3, #1
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d011      	beq.n	8004548 <HAL_UART_IRQHandler+0xec>
 8004524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00b      	beq.n	8004548 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2202      	movs	r2, #2
 8004536:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800453e:	f043 0204 	orr.w	r2, r3, #4
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	2b00      	cmp	r3, #0
 8004552:	d011      	beq.n	8004578 <HAL_UART_IRQHandler+0x11c>
 8004554:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00b      	beq.n	8004578 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2204      	movs	r2, #4
 8004566:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800456e:	f043 0202 	orr.w	r2, r3, #2
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800457c:	f003 0308 	and.w	r3, r3, #8
 8004580:	2b00      	cmp	r3, #0
 8004582:	d017      	beq.n	80045b4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004588:	f003 0320 	and.w	r3, r3, #32
 800458c:	2b00      	cmp	r3, #0
 800458e:	d105      	bne.n	800459c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004594:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00b      	beq.n	80045b4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2208      	movs	r2, #8
 80045a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045aa:	f043 0208 	orr.w	r2, r3, #8
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80045b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d012      	beq.n	80045e6 <HAL_UART_IRQHandler+0x18a>
 80045c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00c      	beq.n	80045e6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045dc:	f043 0220 	orr.w	r2, r3, #32
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 820c 	beq.w	8004a0a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80045f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045f6:	f003 0320 	and.w	r3, r3, #32
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00d      	beq.n	800461a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80045fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004602:	f003 0320 	and.w	r3, r3, #32
 8004606:	2b00      	cmp	r3, #0
 8004608:	d007      	beq.n	800461a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004620:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462e:	2b40      	cmp	r3, #64	; 0x40
 8004630:	d005      	beq.n	800463e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004632:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004636:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800463a:	2b00      	cmp	r3, #0
 800463c:	d04f      	beq.n	80046de <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 fe75 	bl	800532e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464e:	2b40      	cmp	r3, #64	; 0x40
 8004650:	d141      	bne.n	80046d6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	3308      	adds	r3, #8
 8004658:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004660:	e853 3f00 	ldrex	r3, [r3]
 8004664:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004668:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800466c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004670:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	3308      	adds	r3, #8
 800467a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800467e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004682:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004686:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800468a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800468e:	e841 2300 	strex	r3, r2, [r1]
 8004692:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004696:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1d9      	bne.n	8004652 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d013      	beq.n	80046ce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046aa:	4a13      	ldr	r2, [pc, #76]	; (80046f8 <HAL_UART_IRQHandler+0x29c>)
 80046ac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fc ff8e 	bl	80015d4 <HAL_DMA_Abort_IT>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d017      	beq.n	80046ee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80046c8:	4610      	mov	r0, r2
 80046ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046cc:	e00f      	b.n	80046ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f9b0 	bl	8004a34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046d4:	e00b      	b.n	80046ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f9ac 	bl	8004a34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046dc:	e007      	b.n	80046ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f9a8 	bl	8004a34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80046ec:	e18d      	b.n	8004a0a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ee:	bf00      	nop
    return;
 80046f0:	e18b      	b.n	8004a0a <HAL_UART_IRQHandler+0x5ae>
 80046f2:	bf00      	nop
 80046f4:	04000120 	.word	0x04000120
 80046f8:	080053f5 	.word	0x080053f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004700:	2b01      	cmp	r3, #1
 8004702:	f040 8146 	bne.w	8004992 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800470a:	f003 0310 	and.w	r3, r3, #16
 800470e:	2b00      	cmp	r3, #0
 8004710:	f000 813f 	beq.w	8004992 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004718:	f003 0310 	and.w	r3, r3, #16
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 8138 	beq.w	8004992 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2210      	movs	r2, #16
 8004728:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004734:	2b40      	cmp	r3, #64	; 0x40
 8004736:	f040 80b4 	bne.w	80048a2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004746:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800474a:	2b00      	cmp	r3, #0
 800474c:	f000 815f 	beq.w	8004a0e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004756:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800475a:	429a      	cmp	r2, r3
 800475c:	f080 8157 	bcs.w	8004a0e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004766:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0320 	and.w	r3, r3, #32
 8004776:	2b00      	cmp	r3, #0
 8004778:	f040 8085 	bne.w	8004886 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004784:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004788:	e853 3f00 	ldrex	r3, [r3]
 800478c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004790:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004798:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	461a      	mov	r2, r3
 80047a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80047a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80047aa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80047b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80047b6:	e841 2300 	strex	r3, r2, [r1]
 80047ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80047be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1da      	bne.n	800477c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	3308      	adds	r3, #8
 80047cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047d0:	e853 3f00 	ldrex	r3, [r3]
 80047d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80047d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047d8:	f023 0301 	bic.w	r3, r3, #1
 80047dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3308      	adds	r3, #8
 80047e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80047ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80047ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80047f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80047f6:	e841 2300 	strex	r3, r2, [r1]
 80047fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80047fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1e1      	bne.n	80047c6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	3308      	adds	r3, #8
 8004808:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800480c:	e853 3f00 	ldrex	r3, [r3]
 8004810:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004818:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	3308      	adds	r3, #8
 8004822:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004826:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004828:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800482c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800482e:	e841 2300 	strex	r3, r2, [r1]
 8004832:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004834:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1e3      	bne.n	8004802 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2220      	movs	r2, #32
 800483e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800484e:	e853 3f00 	ldrex	r3, [r3]
 8004852:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004856:	f023 0310 	bic.w	r3, r3, #16
 800485a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	461a      	mov	r2, r3
 8004864:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004868:	65bb      	str	r3, [r7, #88]	; 0x58
 800486a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800486e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004870:	e841 2300 	strex	r3, r2, [r1]
 8004874:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1e4      	bne.n	8004846 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004880:	4618      	mov	r0, r3
 8004882:	f7fc fe69 	bl	8001558 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004892:	b29b      	uxth	r3, r3
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	b29b      	uxth	r3, r3
 8004898:	4619      	mov	r1, r3
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f8d4 	bl	8004a48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80048a0:	e0b5      	b.n	8004a0e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048bc:	b29b      	uxth	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 80a7 	beq.w	8004a12 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80048c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 80a2 	beq.w	8004a12 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d6:	e853 3f00 	ldrex	r3, [r3]
 80048da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	461a      	mov	r2, r3
 80048ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80048f0:	647b      	str	r3, [r7, #68]	; 0x44
 80048f2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048f8:	e841 2300 	strex	r3, r2, [r1]
 80048fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1e4      	bne.n	80048ce <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3308      	adds	r3, #8
 800490a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	e853 3f00 	ldrex	r3, [r3]
 8004912:	623b      	str	r3, [r7, #32]
   return(result);
 8004914:	6a3b      	ldr	r3, [r7, #32]
 8004916:	f023 0301 	bic.w	r3, r3, #1
 800491a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	3308      	adds	r3, #8
 8004924:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004928:	633a      	str	r2, [r7, #48]	; 0x30
 800492a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800492e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004930:	e841 2300 	strex	r3, r2, [r1]
 8004934:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1e3      	bne.n	8004904 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2220      	movs	r2, #32
 8004940:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	e853 3f00 	ldrex	r3, [r3]
 800495a:	60fb      	str	r3, [r7, #12]
   return(result);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f023 0310 	bic.w	r3, r3, #16
 8004962:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	461a      	mov	r2, r3
 800496c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004970:	61fb      	str	r3, [r7, #28]
 8004972:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004974:	69b9      	ldr	r1, [r7, #24]
 8004976:	69fa      	ldr	r2, [r7, #28]
 8004978:	e841 2300 	strex	r3, r2, [r1]
 800497c:	617b      	str	r3, [r7, #20]
   return(result);
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1e4      	bne.n	800494e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004984:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004988:	4619      	mov	r1, r3
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f85c 	bl	8004a48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004990:	e03f      	b.n	8004a12 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00e      	beq.n	80049bc <HAL_UART_IRQHandler+0x560>
 800499e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d008      	beq.n	80049bc <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80049b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 fd5d 	bl	8005474 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049ba:	e02d      	b.n	8004a18 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80049bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00e      	beq.n	80049e6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80049c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d008      	beq.n	80049e6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d01c      	beq.n	8004a16 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	4798      	blx	r3
    }
    return;
 80049e4:	e017      	b.n	8004a16 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80049e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d012      	beq.n	8004a18 <HAL_UART_IRQHandler+0x5bc>
 80049f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00c      	beq.n	8004a18 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 fd0e 	bl	8005420 <UART_EndTransmit_IT>
    return;
 8004a04:	e008      	b.n	8004a18 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004a06:	bf00      	nop
 8004a08:	e006      	b.n	8004a18 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004a0a:	bf00      	nop
 8004a0c:	e004      	b.n	8004a18 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004a0e:	bf00      	nop
 8004a10:	e002      	b.n	8004a18 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004a12:	bf00      	nop
 8004a14:	e000      	b.n	8004a18 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004a16:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004a18:	37e8      	adds	r7, #232	; 0xe8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop

08004a20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	460b      	mov	r3, r1
 8004a52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a64:	b08a      	sub	sp, #40	; 0x28
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	4ba4      	ldr	r3, [pc, #656]	; (8004d20 <UART_SetConfig+0x2c0>)
 8004a90:	4013      	ands	r3, r2
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	6812      	ldr	r2, [r2, #0]
 8004a96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a98:	430b      	orrs	r3, r1
 8004a9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a99      	ldr	r2, [pc, #612]	; (8004d24 <UART_SetConfig+0x2c4>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d004      	beq.n	8004acc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004adc:	430a      	orrs	r2, r1
 8004ade:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a90      	ldr	r2, [pc, #576]	; (8004d28 <UART_SetConfig+0x2c8>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d126      	bne.n	8004b38 <UART_SetConfig+0xd8>
 8004aea:	4b90      	ldr	r3, [pc, #576]	; (8004d2c <UART_SetConfig+0x2cc>)
 8004aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af0:	f003 0303 	and.w	r3, r3, #3
 8004af4:	2b03      	cmp	r3, #3
 8004af6:	d81b      	bhi.n	8004b30 <UART_SetConfig+0xd0>
 8004af8:	a201      	add	r2, pc, #4	; (adr r2, 8004b00 <UART_SetConfig+0xa0>)
 8004afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afe:	bf00      	nop
 8004b00:	08004b11 	.word	0x08004b11
 8004b04:	08004b21 	.word	0x08004b21
 8004b08:	08004b19 	.word	0x08004b19
 8004b0c:	08004b29 	.word	0x08004b29
 8004b10:	2301      	movs	r3, #1
 8004b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b16:	e116      	b.n	8004d46 <UART_SetConfig+0x2e6>
 8004b18:	2302      	movs	r3, #2
 8004b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b1e:	e112      	b.n	8004d46 <UART_SetConfig+0x2e6>
 8004b20:	2304      	movs	r3, #4
 8004b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b26:	e10e      	b.n	8004d46 <UART_SetConfig+0x2e6>
 8004b28:	2308      	movs	r3, #8
 8004b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b2e:	e10a      	b.n	8004d46 <UART_SetConfig+0x2e6>
 8004b30:	2310      	movs	r3, #16
 8004b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b36:	e106      	b.n	8004d46 <UART_SetConfig+0x2e6>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a7c      	ldr	r2, [pc, #496]	; (8004d30 <UART_SetConfig+0x2d0>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d138      	bne.n	8004bb4 <UART_SetConfig+0x154>
 8004b42:	4b7a      	ldr	r3, [pc, #488]	; (8004d2c <UART_SetConfig+0x2cc>)
 8004b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b48:	f003 030c 	and.w	r3, r3, #12
 8004b4c:	2b0c      	cmp	r3, #12
 8004b4e:	d82d      	bhi.n	8004bac <UART_SetConfig+0x14c>
 8004b50:	a201      	add	r2, pc, #4	; (adr r2, 8004b58 <UART_SetConfig+0xf8>)
 8004b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b56:	bf00      	nop
 8004b58:	08004b8d 	.word	0x08004b8d
 8004b5c:	08004bad 	.word	0x08004bad
 8004b60:	08004bad 	.word	0x08004bad
 8004b64:	08004bad 	.word	0x08004bad
 8004b68:	08004b9d 	.word	0x08004b9d
 8004b6c:	08004bad 	.word	0x08004bad
 8004b70:	08004bad 	.word	0x08004bad
 8004b74:	08004bad 	.word	0x08004bad
 8004b78:	08004b95 	.word	0x08004b95
 8004b7c:	08004bad 	.word	0x08004bad
 8004b80:	08004bad 	.word	0x08004bad
 8004b84:	08004bad 	.word	0x08004bad
 8004b88:	08004ba5 	.word	0x08004ba5
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b92:	e0d8      	b.n	8004d46 <UART_SetConfig+0x2e6>
 8004b94:	2302      	movs	r3, #2
 8004b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b9a:	e0d4      	b.n	8004d46 <UART_SetConfig+0x2e6>
 8004b9c:	2304      	movs	r3, #4
 8004b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ba2:	e0d0      	b.n	8004d46 <UART_SetConfig+0x2e6>
 8004ba4:	2308      	movs	r3, #8
 8004ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004baa:	e0cc      	b.n	8004d46 <UART_SetConfig+0x2e6>
 8004bac:	2310      	movs	r3, #16
 8004bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bb2:	e0c8      	b.n	8004d46 <UART_SetConfig+0x2e6>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a5e      	ldr	r2, [pc, #376]	; (8004d34 <UART_SetConfig+0x2d4>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d125      	bne.n	8004c0a <UART_SetConfig+0x1aa>
 8004bbe:	4b5b      	ldr	r3, [pc, #364]	; (8004d2c <UART_SetConfig+0x2cc>)
 8004bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004bc8:	2b30      	cmp	r3, #48	; 0x30
 8004bca:	d016      	beq.n	8004bfa <UART_SetConfig+0x19a>
 8004bcc:	2b30      	cmp	r3, #48	; 0x30
 8004bce:	d818      	bhi.n	8004c02 <UART_SetConfig+0x1a2>
 8004bd0:	2b20      	cmp	r3, #32
 8004bd2:	d00a      	beq.n	8004bea <UART_SetConfig+0x18a>
 8004bd4:	2b20      	cmp	r3, #32
 8004bd6:	d814      	bhi.n	8004c02 <UART_SetConfig+0x1a2>
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d002      	beq.n	8004be2 <UART_SetConfig+0x182>
 8004bdc:	2b10      	cmp	r3, #16
 8004bde:	d008      	beq.n	8004bf2 <UART_SetConfig+0x192>
 8004be0:	e00f      	b.n	8004c02 <UART_SetConfig+0x1a2>
 8004be2:	2300      	movs	r3, #0
 8004be4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004be8:	e0ad      	b.n	8004d46 <UART_SetConfig+0x2e6>
 8004bea:	2302      	movs	r3, #2
 8004bec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bf0:	e0a9      	b.n	8004d46 <UART_SetConfig+0x2e6>
 8004bf2:	2304      	movs	r3, #4
 8004bf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bf8:	e0a5      	b.n	8004d46 <UART_SetConfig+0x2e6>
 8004bfa:	2308      	movs	r3, #8
 8004bfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c00:	e0a1      	b.n	8004d46 <UART_SetConfig+0x2e6>
 8004c02:	2310      	movs	r3, #16
 8004c04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c08:	e09d      	b.n	8004d46 <UART_SetConfig+0x2e6>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a4a      	ldr	r2, [pc, #296]	; (8004d38 <UART_SetConfig+0x2d8>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d125      	bne.n	8004c60 <UART_SetConfig+0x200>
 8004c14:	4b45      	ldr	r3, [pc, #276]	; (8004d2c <UART_SetConfig+0x2cc>)
 8004c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c1e:	2bc0      	cmp	r3, #192	; 0xc0
 8004c20:	d016      	beq.n	8004c50 <UART_SetConfig+0x1f0>
 8004c22:	2bc0      	cmp	r3, #192	; 0xc0
 8004c24:	d818      	bhi.n	8004c58 <UART_SetConfig+0x1f8>
 8004c26:	2b80      	cmp	r3, #128	; 0x80
 8004c28:	d00a      	beq.n	8004c40 <UART_SetConfig+0x1e0>
 8004c2a:	2b80      	cmp	r3, #128	; 0x80
 8004c2c:	d814      	bhi.n	8004c58 <UART_SetConfig+0x1f8>
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d002      	beq.n	8004c38 <UART_SetConfig+0x1d8>
 8004c32:	2b40      	cmp	r3, #64	; 0x40
 8004c34:	d008      	beq.n	8004c48 <UART_SetConfig+0x1e8>
 8004c36:	e00f      	b.n	8004c58 <UART_SetConfig+0x1f8>
 8004c38:	2300      	movs	r3, #0
 8004c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c3e:	e082      	b.n	8004d46 <UART_SetConfig+0x2e6>
 8004c40:	2302      	movs	r3, #2
 8004c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c46:	e07e      	b.n	8004d46 <UART_SetConfig+0x2e6>
 8004c48:	2304      	movs	r3, #4
 8004c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c4e:	e07a      	b.n	8004d46 <UART_SetConfig+0x2e6>
 8004c50:	2308      	movs	r3, #8
 8004c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c56:	e076      	b.n	8004d46 <UART_SetConfig+0x2e6>
 8004c58:	2310      	movs	r3, #16
 8004c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c5e:	e072      	b.n	8004d46 <UART_SetConfig+0x2e6>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a35      	ldr	r2, [pc, #212]	; (8004d3c <UART_SetConfig+0x2dc>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d12a      	bne.n	8004cc0 <UART_SetConfig+0x260>
 8004c6a:	4b30      	ldr	r3, [pc, #192]	; (8004d2c <UART_SetConfig+0x2cc>)
 8004c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c78:	d01a      	beq.n	8004cb0 <UART_SetConfig+0x250>
 8004c7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c7e:	d81b      	bhi.n	8004cb8 <UART_SetConfig+0x258>
 8004c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c84:	d00c      	beq.n	8004ca0 <UART_SetConfig+0x240>
 8004c86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c8a:	d815      	bhi.n	8004cb8 <UART_SetConfig+0x258>
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d003      	beq.n	8004c98 <UART_SetConfig+0x238>
 8004c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c94:	d008      	beq.n	8004ca8 <UART_SetConfig+0x248>
 8004c96:	e00f      	b.n	8004cb8 <UART_SetConfig+0x258>
 8004c98:	2300      	movs	r3, #0
 8004c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c9e:	e052      	b.n	8004d46 <UART_SetConfig+0x2e6>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ca6:	e04e      	b.n	8004d46 <UART_SetConfig+0x2e6>
 8004ca8:	2304      	movs	r3, #4
 8004caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cae:	e04a      	b.n	8004d46 <UART_SetConfig+0x2e6>
 8004cb0:	2308      	movs	r3, #8
 8004cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cb6:	e046      	b.n	8004d46 <UART_SetConfig+0x2e6>
 8004cb8:	2310      	movs	r3, #16
 8004cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cbe:	e042      	b.n	8004d46 <UART_SetConfig+0x2e6>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a17      	ldr	r2, [pc, #92]	; (8004d24 <UART_SetConfig+0x2c4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d13a      	bne.n	8004d40 <UART_SetConfig+0x2e0>
 8004cca:	4b18      	ldr	r3, [pc, #96]	; (8004d2c <UART_SetConfig+0x2cc>)
 8004ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004cd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cd8:	d01a      	beq.n	8004d10 <UART_SetConfig+0x2b0>
 8004cda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cde:	d81b      	bhi.n	8004d18 <UART_SetConfig+0x2b8>
 8004ce0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ce4:	d00c      	beq.n	8004d00 <UART_SetConfig+0x2a0>
 8004ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cea:	d815      	bhi.n	8004d18 <UART_SetConfig+0x2b8>
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <UART_SetConfig+0x298>
 8004cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf4:	d008      	beq.n	8004d08 <UART_SetConfig+0x2a8>
 8004cf6:	e00f      	b.n	8004d18 <UART_SetConfig+0x2b8>
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cfe:	e022      	b.n	8004d46 <UART_SetConfig+0x2e6>
 8004d00:	2302      	movs	r3, #2
 8004d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d06:	e01e      	b.n	8004d46 <UART_SetConfig+0x2e6>
 8004d08:	2304      	movs	r3, #4
 8004d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d0e:	e01a      	b.n	8004d46 <UART_SetConfig+0x2e6>
 8004d10:	2308      	movs	r3, #8
 8004d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d16:	e016      	b.n	8004d46 <UART_SetConfig+0x2e6>
 8004d18:	2310      	movs	r3, #16
 8004d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d1e:	e012      	b.n	8004d46 <UART_SetConfig+0x2e6>
 8004d20:	efff69f3 	.word	0xefff69f3
 8004d24:	40008000 	.word	0x40008000
 8004d28:	40013800 	.word	0x40013800
 8004d2c:	40021000 	.word	0x40021000
 8004d30:	40004400 	.word	0x40004400
 8004d34:	40004800 	.word	0x40004800
 8004d38:	40004c00 	.word	0x40004c00
 8004d3c:	40005000 	.word	0x40005000
 8004d40:	2310      	movs	r3, #16
 8004d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a9f      	ldr	r2, [pc, #636]	; (8004fc8 <UART_SetConfig+0x568>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d17a      	bne.n	8004e46 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d824      	bhi.n	8004da2 <UART_SetConfig+0x342>
 8004d58:	a201      	add	r2, pc, #4	; (adr r2, 8004d60 <UART_SetConfig+0x300>)
 8004d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5e:	bf00      	nop
 8004d60:	08004d85 	.word	0x08004d85
 8004d64:	08004da3 	.word	0x08004da3
 8004d68:	08004d8d 	.word	0x08004d8d
 8004d6c:	08004da3 	.word	0x08004da3
 8004d70:	08004d93 	.word	0x08004d93
 8004d74:	08004da3 	.word	0x08004da3
 8004d78:	08004da3 	.word	0x08004da3
 8004d7c:	08004da3 	.word	0x08004da3
 8004d80:	08004d9b 	.word	0x08004d9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d84:	f7fd fc1a 	bl	80025bc <HAL_RCC_GetPCLK1Freq>
 8004d88:	61f8      	str	r0, [r7, #28]
        break;
 8004d8a:	e010      	b.n	8004dae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d8c:	4b8f      	ldr	r3, [pc, #572]	; (8004fcc <UART_SetConfig+0x56c>)
 8004d8e:	61fb      	str	r3, [r7, #28]
        break;
 8004d90:	e00d      	b.n	8004dae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d92:	f7fd fb7b 	bl	800248c <HAL_RCC_GetSysClockFreq>
 8004d96:	61f8      	str	r0, [r7, #28]
        break;
 8004d98:	e009      	b.n	8004dae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d9e:	61fb      	str	r3, [r7, #28]
        break;
 8004da0:	e005      	b.n	8004dae <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004dac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 80fb 	beq.w	8004fac <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	4413      	add	r3, r2
 8004dc0:	69fa      	ldr	r2, [r7, #28]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d305      	bcc.n	8004dd2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004dcc:	69fa      	ldr	r2, [r7, #28]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d903      	bls.n	8004dda <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004dd8:	e0e8      	b.n	8004fac <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	461c      	mov	r4, r3
 8004de0:	4615      	mov	r5, r2
 8004de2:	f04f 0200 	mov.w	r2, #0
 8004de6:	f04f 0300 	mov.w	r3, #0
 8004dea:	022b      	lsls	r3, r5, #8
 8004dec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004df0:	0222      	lsls	r2, r4, #8
 8004df2:	68f9      	ldr	r1, [r7, #12]
 8004df4:	6849      	ldr	r1, [r1, #4]
 8004df6:	0849      	lsrs	r1, r1, #1
 8004df8:	2000      	movs	r0, #0
 8004dfa:	4688      	mov	r8, r1
 8004dfc:	4681      	mov	r9, r0
 8004dfe:	eb12 0a08 	adds.w	sl, r2, r8
 8004e02:	eb43 0b09 	adc.w	fp, r3, r9
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	603b      	str	r3, [r7, #0]
 8004e0e:	607a      	str	r2, [r7, #4]
 8004e10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e14:	4650      	mov	r0, sl
 8004e16:	4659      	mov	r1, fp
 8004e18:	f7fb fa2a 	bl	8000270 <__aeabi_uldivmod>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	460b      	mov	r3, r1
 8004e20:	4613      	mov	r3, r2
 8004e22:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e2a:	d308      	bcc.n	8004e3e <UART_SetConfig+0x3de>
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e32:	d204      	bcs.n	8004e3e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	60da      	str	r2, [r3, #12]
 8004e3c:	e0b6      	b.n	8004fac <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e44:	e0b2      	b.n	8004fac <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e4e:	d15e      	bne.n	8004f0e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004e50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d828      	bhi.n	8004eaa <UART_SetConfig+0x44a>
 8004e58:	a201      	add	r2, pc, #4	; (adr r2, 8004e60 <UART_SetConfig+0x400>)
 8004e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5e:	bf00      	nop
 8004e60:	08004e85 	.word	0x08004e85
 8004e64:	08004e8d 	.word	0x08004e8d
 8004e68:	08004e95 	.word	0x08004e95
 8004e6c:	08004eab 	.word	0x08004eab
 8004e70:	08004e9b 	.word	0x08004e9b
 8004e74:	08004eab 	.word	0x08004eab
 8004e78:	08004eab 	.word	0x08004eab
 8004e7c:	08004eab 	.word	0x08004eab
 8004e80:	08004ea3 	.word	0x08004ea3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e84:	f7fd fb9a 	bl	80025bc <HAL_RCC_GetPCLK1Freq>
 8004e88:	61f8      	str	r0, [r7, #28]
        break;
 8004e8a:	e014      	b.n	8004eb6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e8c:	f7fd fbac 	bl	80025e8 <HAL_RCC_GetPCLK2Freq>
 8004e90:	61f8      	str	r0, [r7, #28]
        break;
 8004e92:	e010      	b.n	8004eb6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e94:	4b4d      	ldr	r3, [pc, #308]	; (8004fcc <UART_SetConfig+0x56c>)
 8004e96:	61fb      	str	r3, [r7, #28]
        break;
 8004e98:	e00d      	b.n	8004eb6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e9a:	f7fd faf7 	bl	800248c <HAL_RCC_GetSysClockFreq>
 8004e9e:	61f8      	str	r0, [r7, #28]
        break;
 8004ea0:	e009      	b.n	8004eb6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ea6:	61fb      	str	r3, [r7, #28]
        break;
 8004ea8:	e005      	b.n	8004eb6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004eb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d077      	beq.n	8004fac <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	005a      	lsls	r2, r3, #1
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	085b      	lsrs	r3, r3, #1
 8004ec6:	441a      	add	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	2b0f      	cmp	r3, #15
 8004ed6:	d916      	bls.n	8004f06 <UART_SetConfig+0x4a6>
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ede:	d212      	bcs.n	8004f06 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	f023 030f 	bic.w	r3, r3, #15
 8004ee8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	085b      	lsrs	r3, r3, #1
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	f003 0307 	and.w	r3, r3, #7
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	8afb      	ldrh	r3, [r7, #22]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	8afa      	ldrh	r2, [r7, #22]
 8004f02:	60da      	str	r2, [r3, #12]
 8004f04:	e052      	b.n	8004fac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f0c:	e04e      	b.n	8004fac <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f12:	2b08      	cmp	r3, #8
 8004f14:	d827      	bhi.n	8004f66 <UART_SetConfig+0x506>
 8004f16:	a201      	add	r2, pc, #4	; (adr r2, 8004f1c <UART_SetConfig+0x4bc>)
 8004f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1c:	08004f41 	.word	0x08004f41
 8004f20:	08004f49 	.word	0x08004f49
 8004f24:	08004f51 	.word	0x08004f51
 8004f28:	08004f67 	.word	0x08004f67
 8004f2c:	08004f57 	.word	0x08004f57
 8004f30:	08004f67 	.word	0x08004f67
 8004f34:	08004f67 	.word	0x08004f67
 8004f38:	08004f67 	.word	0x08004f67
 8004f3c:	08004f5f 	.word	0x08004f5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f40:	f7fd fb3c 	bl	80025bc <HAL_RCC_GetPCLK1Freq>
 8004f44:	61f8      	str	r0, [r7, #28]
        break;
 8004f46:	e014      	b.n	8004f72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f48:	f7fd fb4e 	bl	80025e8 <HAL_RCC_GetPCLK2Freq>
 8004f4c:	61f8      	str	r0, [r7, #28]
        break;
 8004f4e:	e010      	b.n	8004f72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f50:	4b1e      	ldr	r3, [pc, #120]	; (8004fcc <UART_SetConfig+0x56c>)
 8004f52:	61fb      	str	r3, [r7, #28]
        break;
 8004f54:	e00d      	b.n	8004f72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f56:	f7fd fa99 	bl	800248c <HAL_RCC_GetSysClockFreq>
 8004f5a:	61f8      	str	r0, [r7, #28]
        break;
 8004f5c:	e009      	b.n	8004f72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f62:	61fb      	str	r3, [r7, #28]
        break;
 8004f64:	e005      	b.n	8004f72 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f70:	bf00      	nop
    }

    if (pclk != 0U)
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d019      	beq.n	8004fac <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	085a      	lsrs	r2, r3, #1
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	441a      	add	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	2b0f      	cmp	r3, #15
 8004f90:	d909      	bls.n	8004fa6 <UART_SetConfig+0x546>
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f98:	d205      	bcs.n	8004fa6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	60da      	str	r2, [r3, #12]
 8004fa4:	e002      	b.n	8004fac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004fb8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3728      	adds	r7, #40	; 0x28
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fc6:	bf00      	nop
 8004fc8:	40008000 	.word	0x40008000
 8004fcc:	00f42400 	.word	0x00f42400

08004fd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00a      	beq.n	8004ffa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00a      	beq.n	800501c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	430a      	orrs	r2, r1
 800501a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00a      	beq.n	800503e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	430a      	orrs	r2, r1
 800503c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	f003 0308 	and.w	r3, r3, #8
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00a      	beq.n	8005060 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005064:	f003 0310 	and.w	r3, r3, #16
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00a      	beq.n	8005082 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	f003 0320 	and.w	r3, r3, #32
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00a      	beq.n	80050a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d01a      	beq.n	80050e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	430a      	orrs	r2, r1
 80050c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050ce:	d10a      	bne.n	80050e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00a      	beq.n	8005108 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	430a      	orrs	r2, r1
 8005106:	605a      	str	r2, [r3, #4]
  }
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af02      	add	r7, sp, #8
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005124:	f7fc f906 	bl	8001334 <HAL_GetTick>
 8005128:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0308 	and.w	r3, r3, #8
 8005134:	2b08      	cmp	r3, #8
 8005136:	d10e      	bne.n	8005156 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005138:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f82d 	bl	80051a6 <UART_WaitOnFlagUntilTimeout>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e023      	b.n	800519e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	2b04      	cmp	r3, #4
 8005162:	d10e      	bne.n	8005182 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005164:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f817 	bl	80051a6 <UART_WaitOnFlagUntilTimeout>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e00d      	b.n	800519e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2220      	movs	r2, #32
 8005186:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2220      	movs	r2, #32
 800518c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b09c      	sub	sp, #112	; 0x70
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	60f8      	str	r0, [r7, #12]
 80051ae:	60b9      	str	r1, [r7, #8]
 80051b0:	603b      	str	r3, [r7, #0]
 80051b2:	4613      	mov	r3, r2
 80051b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051b6:	e0a5      	b.n	8005304 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051be:	f000 80a1 	beq.w	8005304 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051c2:	f7fc f8b7 	bl	8001334 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d302      	bcc.n	80051d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80051d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d13e      	bne.n	8005256 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051e0:	e853 3f00 	ldrex	r3, [r3]
 80051e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80051e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051ec:	667b      	str	r3, [r7, #100]	; 0x64
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	461a      	mov	r2, r3
 80051f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051f8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80051fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80051fe:	e841 2300 	strex	r3, r2, [r1]
 8005202:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1e6      	bne.n	80051d8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	3308      	adds	r3, #8
 8005210:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005214:	e853 3f00 	ldrex	r3, [r3]
 8005218:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800521a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521c:	f023 0301 	bic.w	r3, r3, #1
 8005220:	663b      	str	r3, [r7, #96]	; 0x60
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	3308      	adds	r3, #8
 8005228:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800522a:	64ba      	str	r2, [r7, #72]	; 0x48
 800522c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005230:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005232:	e841 2300 	strex	r3, r2, [r1]
 8005236:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1e5      	bne.n	800520a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2220      	movs	r2, #32
 8005242:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2220      	movs	r2, #32
 8005248:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e067      	b.n	8005326 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0304 	and.w	r3, r3, #4
 8005260:	2b00      	cmp	r3, #0
 8005262:	d04f      	beq.n	8005304 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800526e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005272:	d147      	bne.n	8005304 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800527c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005286:	e853 3f00 	ldrex	r3, [r3]
 800528a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005292:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	461a      	mov	r2, r3
 800529a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800529c:	637b      	str	r3, [r7, #52]	; 0x34
 800529e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052a4:	e841 2300 	strex	r3, r2, [r1]
 80052a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1e6      	bne.n	800527e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	3308      	adds	r3, #8
 80052b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	e853 3f00 	ldrex	r3, [r3]
 80052be:	613b      	str	r3, [r7, #16]
   return(result);
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	f023 0301 	bic.w	r3, r3, #1
 80052c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3308      	adds	r3, #8
 80052ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052d0:	623a      	str	r2, [r7, #32]
 80052d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d4:	69f9      	ldr	r1, [r7, #28]
 80052d6:	6a3a      	ldr	r2, [r7, #32]
 80052d8:	e841 2300 	strex	r3, r2, [r1]
 80052dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1e5      	bne.n	80052b0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2220      	movs	r2, #32
 80052e8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2220      	movs	r2, #32
 80052ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e010      	b.n	8005326 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	69da      	ldr	r2, [r3, #28]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	4013      	ands	r3, r2
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	429a      	cmp	r2, r3
 8005312:	bf0c      	ite	eq
 8005314:	2301      	moveq	r3, #1
 8005316:	2300      	movne	r3, #0
 8005318:	b2db      	uxtb	r3, r3
 800531a:	461a      	mov	r2, r3
 800531c:	79fb      	ldrb	r3, [r7, #7]
 800531e:	429a      	cmp	r2, r3
 8005320:	f43f af4a 	beq.w	80051b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3770      	adds	r7, #112	; 0x70
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800532e:	b480      	push	{r7}
 8005330:	b095      	sub	sp, #84	; 0x54
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800533e:	e853 3f00 	ldrex	r3, [r3]
 8005342:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005346:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800534a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	461a      	mov	r2, r3
 8005352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005354:	643b      	str	r3, [r7, #64]	; 0x40
 8005356:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005358:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800535a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800535c:	e841 2300 	strex	r3, r2, [r1]
 8005360:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1e6      	bne.n	8005336 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3308      	adds	r3, #8
 800536e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	e853 3f00 	ldrex	r3, [r3]
 8005376:	61fb      	str	r3, [r7, #28]
   return(result);
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	f023 0301 	bic.w	r3, r3, #1
 800537e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	3308      	adds	r3, #8
 8005386:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005388:	62fa      	str	r2, [r7, #44]	; 0x2c
 800538a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800538e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005390:	e841 2300 	strex	r3, r2, [r1]
 8005394:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1e5      	bne.n	8005368 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d118      	bne.n	80053d6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	e853 3f00 	ldrex	r3, [r3]
 80053b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	f023 0310 	bic.w	r3, r3, #16
 80053b8:	647b      	str	r3, [r7, #68]	; 0x44
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	461a      	mov	r2, r3
 80053c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053c2:	61bb      	str	r3, [r7, #24]
 80053c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c6:	6979      	ldr	r1, [r7, #20]
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	e841 2300 	strex	r3, r2, [r1]
 80053ce:	613b      	str	r3, [r7, #16]
   return(result);
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1e6      	bne.n	80053a4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2220      	movs	r2, #32
 80053da:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80053e8:	bf00      	nop
 80053ea:	3754      	adds	r7, #84	; 0x54
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005400:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f7ff fb0e 	bl	8004a34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005418:	bf00      	nop
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b088      	sub	sp, #32
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	e853 3f00 	ldrex	r3, [r3]
 8005434:	60bb      	str	r3, [r7, #8]
   return(result);
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800543c:	61fb      	str	r3, [r7, #28]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	61bb      	str	r3, [r7, #24]
 8005448:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544a:	6979      	ldr	r1, [r7, #20]
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	e841 2300 	strex	r3, r2, [r1]
 8005452:	613b      	str	r3, [r7, #16]
   return(result);
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1e6      	bne.n	8005428 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2220      	movs	r2, #32
 800545e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7ff fada 	bl	8004a20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800546c:	bf00      	nop
 800546e:	3720      	adds	r7, #32
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <__NVIC_SetPriority>:
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	4603      	mov	r3, r0
 8005490:	6039      	str	r1, [r7, #0]
 8005492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005498:	2b00      	cmp	r3, #0
 800549a:	db0a      	blt.n	80054b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	490c      	ldr	r1, [pc, #48]	; (80054d4 <__NVIC_SetPriority+0x4c>)
 80054a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054a6:	0112      	lsls	r2, r2, #4
 80054a8:	b2d2      	uxtb	r2, r2
 80054aa:	440b      	add	r3, r1
 80054ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80054b0:	e00a      	b.n	80054c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	4908      	ldr	r1, [pc, #32]	; (80054d8 <__NVIC_SetPriority+0x50>)
 80054b8:	79fb      	ldrb	r3, [r7, #7]
 80054ba:	f003 030f 	and.w	r3, r3, #15
 80054be:	3b04      	subs	r3, #4
 80054c0:	0112      	lsls	r2, r2, #4
 80054c2:	b2d2      	uxtb	r2, r2
 80054c4:	440b      	add	r3, r1
 80054c6:	761a      	strb	r2, [r3, #24]
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	e000e100 	.word	0xe000e100
 80054d8:	e000ed00 	.word	0xe000ed00

080054dc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80054e0:	4b05      	ldr	r3, [pc, #20]	; (80054f8 <SysTick_Handler+0x1c>)
 80054e2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80054e4:	f001 fcae 	bl	8006e44 <xTaskGetSchedulerState>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d001      	beq.n	80054f2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80054ee:	f002 fa93 	bl	8007a18 <xPortSysTickHandler>
  }
}
 80054f2:	bf00      	nop
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	e000e010 	.word	0xe000e010

080054fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80054fc:	b580      	push	{r7, lr}
 80054fe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005500:	2100      	movs	r1, #0
 8005502:	f06f 0004 	mvn.w	r0, #4
 8005506:	f7ff ffbf 	bl	8005488 <__NVIC_SetPriority>
#endif
}
 800550a:	bf00      	nop
 800550c:	bd80      	pop	{r7, pc}
	...

08005510 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005516:	f3ef 8305 	mrs	r3, IPSR
 800551a:	603b      	str	r3, [r7, #0]
  return(result);
 800551c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800551e:	2b00      	cmp	r3, #0
 8005520:	d003      	beq.n	800552a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005522:	f06f 0305 	mvn.w	r3, #5
 8005526:	607b      	str	r3, [r7, #4]
 8005528:	e00c      	b.n	8005544 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800552a:	4b0a      	ldr	r3, [pc, #40]	; (8005554 <osKernelInitialize+0x44>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d105      	bne.n	800553e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005532:	4b08      	ldr	r3, [pc, #32]	; (8005554 <osKernelInitialize+0x44>)
 8005534:	2201      	movs	r2, #1
 8005536:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005538:	2300      	movs	r3, #0
 800553a:	607b      	str	r3, [r7, #4]
 800553c:	e002      	b.n	8005544 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800553e:	f04f 33ff 	mov.w	r3, #4294967295
 8005542:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005544:	687b      	ldr	r3, [r7, #4]
}
 8005546:	4618      	mov	r0, r3
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	200002c0 	.word	0x200002c0

08005558 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800555e:	f3ef 8305 	mrs	r3, IPSR
 8005562:	603b      	str	r3, [r7, #0]
  return(result);
 8005564:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <osKernelStart+0x1a>
    stat = osErrorISR;
 800556a:	f06f 0305 	mvn.w	r3, #5
 800556e:	607b      	str	r3, [r7, #4]
 8005570:	e010      	b.n	8005594 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005572:	4b0b      	ldr	r3, [pc, #44]	; (80055a0 <osKernelStart+0x48>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d109      	bne.n	800558e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800557a:	f7ff ffbf 	bl	80054fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800557e:	4b08      	ldr	r3, [pc, #32]	; (80055a0 <osKernelStart+0x48>)
 8005580:	2202      	movs	r2, #2
 8005582:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005584:	f001 f816 	bl	80065b4 <vTaskStartScheduler>
      stat = osOK;
 8005588:	2300      	movs	r3, #0
 800558a:	607b      	str	r3, [r7, #4]
 800558c:	e002      	b.n	8005594 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800558e:	f04f 33ff 	mov.w	r3, #4294967295
 8005592:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005594:	687b      	ldr	r3, [r7, #4]
}
 8005596:	4618      	mov	r0, r3
 8005598:	3708      	adds	r7, #8
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	200002c0 	.word	0x200002c0

080055a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b08e      	sub	sp, #56	; 0x38
 80055a8:	af04      	add	r7, sp, #16
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80055b0:	2300      	movs	r3, #0
 80055b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055b4:	f3ef 8305 	mrs	r3, IPSR
 80055b8:	617b      	str	r3, [r7, #20]
  return(result);
 80055ba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d17e      	bne.n	80056be <osThreadNew+0x11a>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d07b      	beq.n	80056be <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80055c6:	2380      	movs	r3, #128	; 0x80
 80055c8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80055ca:	2318      	movs	r3, #24
 80055cc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80055ce:	2300      	movs	r3, #0
 80055d0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80055d2:	f04f 33ff 	mov.w	r3, #4294967295
 80055d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d045      	beq.n	800566a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d002      	beq.n	80055ec <osThreadNew+0x48>
        name = attr->name;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d008      	beq.n	8005612 <osThreadNew+0x6e>
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	2b38      	cmp	r3, #56	; 0x38
 8005604:	d805      	bhi.n	8005612 <osThreadNew+0x6e>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <osThreadNew+0x72>
        return (NULL);
 8005612:	2300      	movs	r3, #0
 8005614:	e054      	b.n	80056c0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	089b      	lsrs	r3, r3, #2
 8005624:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00e      	beq.n	800564c <osThreadNew+0xa8>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	2b5b      	cmp	r3, #91	; 0x5b
 8005634:	d90a      	bls.n	800564c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800563a:	2b00      	cmp	r3, #0
 800563c:	d006      	beq.n	800564c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d002      	beq.n	800564c <osThreadNew+0xa8>
        mem = 1;
 8005646:	2301      	movs	r3, #1
 8005648:	61bb      	str	r3, [r7, #24]
 800564a:	e010      	b.n	800566e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10c      	bne.n	800566e <osThreadNew+0xca>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d108      	bne.n	800566e <osThreadNew+0xca>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d104      	bne.n	800566e <osThreadNew+0xca>
          mem = 0;
 8005664:	2300      	movs	r3, #0
 8005666:	61bb      	str	r3, [r7, #24]
 8005668:	e001      	b.n	800566e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800566a:	2300      	movs	r3, #0
 800566c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d110      	bne.n	8005696 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800567c:	9202      	str	r2, [sp, #8]
 800567e:	9301      	str	r3, [sp, #4]
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	6a3a      	ldr	r2, [r7, #32]
 8005688:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f000 fdf0 	bl	8006270 <xTaskCreateStatic>
 8005690:	4603      	mov	r3, r0
 8005692:	613b      	str	r3, [r7, #16]
 8005694:	e013      	b.n	80056be <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d110      	bne.n	80056be <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	b29a      	uxth	r2, r3
 80056a0:	f107 0310 	add.w	r3, r7, #16
 80056a4:	9301      	str	r3, [sp, #4]
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f000 fe3b 	bl	800632a <xTaskCreate>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d001      	beq.n	80056be <osThreadNew+0x11a>
            hTask = NULL;
 80056ba:	2300      	movs	r3, #0
 80056bc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80056be:	693b      	ldr	r3, [r7, #16]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3728      	adds	r7, #40	; 0x28
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4a07      	ldr	r2, [pc, #28]	; (80056f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80056d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	4a06      	ldr	r2, [pc, #24]	; (80056f8 <vApplicationGetIdleTaskMemory+0x30>)
 80056de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2280      	movs	r2, #128	; 0x80
 80056e4:	601a      	str	r2, [r3, #0]
}
 80056e6:	bf00      	nop
 80056e8:	3714      	adds	r7, #20
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	200002c4 	.word	0x200002c4
 80056f8:	20000320 	.word	0x20000320

080056fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	4a07      	ldr	r2, [pc, #28]	; (8005728 <vApplicationGetTimerTaskMemory+0x2c>)
 800570c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	4a06      	ldr	r2, [pc, #24]	; (800572c <vApplicationGetTimerTaskMemory+0x30>)
 8005712:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f44f 7280 	mov.w	r2, #256	; 0x100
 800571a:	601a      	str	r2, [r3, #0]
}
 800571c:	bf00      	nop
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	20000520 	.word	0x20000520
 800572c:	2000057c 	.word	0x2000057c

08005730 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f103 0208 	add.w	r2, r3, #8
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f04f 32ff 	mov.w	r2, #4294967295
 8005748:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f103 0208 	add.w	r2, r3, #8
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f103 0208 	add.w	r2, r3, #8
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800577e:	bf00      	nop
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800578a:	b480      	push	{r7}
 800578c:	b085      	sub	sp, #20
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
 8005792:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	689a      	ldr	r2, [r3, #8]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	1c5a      	adds	r2, r3, #1
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	601a      	str	r2, [r3, #0]
}
 80057c6:	bf00      	nop
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057d2:	b480      	push	{r7}
 80057d4:	b085      	sub	sp, #20
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
 80057da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e8:	d103      	bne.n	80057f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	60fb      	str	r3, [r7, #12]
 80057f0:	e00c      	b.n	800580c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	3308      	adds	r3, #8
 80057f6:	60fb      	str	r3, [r7, #12]
 80057f8:	e002      	b.n	8005800 <vListInsert+0x2e>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	60fb      	str	r3, [r7, #12]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	429a      	cmp	r2, r3
 800580a:	d2f6      	bcs.n	80057fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	601a      	str	r2, [r3, #0]
}
 8005838:	bf00      	nop
 800583a:	3714      	adds	r7, #20
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	6892      	ldr	r2, [r2, #8]
 800585a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	6852      	ldr	r2, [r2, #4]
 8005864:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	429a      	cmp	r2, r3
 800586e:	d103      	bne.n	8005878 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	1e5a      	subs	r2, r3, #1
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10a      	bne.n	80058c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80058ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80058be:	bf00      	nop
 80058c0:	e7fe      	b.n	80058c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80058c2:	f002 f817 	bl	80078f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ce:	68f9      	ldr	r1, [r7, #12]
 80058d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80058d2:	fb01 f303 	mul.w	r3, r1, r3
 80058d6:	441a      	add	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f2:	3b01      	subs	r3, #1
 80058f4:	68f9      	ldr	r1, [r7, #12]
 80058f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80058f8:	fb01 f303 	mul.w	r3, r1, r3
 80058fc:	441a      	add	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	22ff      	movs	r2, #255	; 0xff
 8005906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	22ff      	movs	r2, #255	; 0xff
 800590e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d114      	bne.n	8005942 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d01a      	beq.n	8005956 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	3310      	adds	r3, #16
 8005924:	4618      	mov	r0, r3
 8005926:	f001 f8cf 	bl	8006ac8 <xTaskRemoveFromEventList>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d012      	beq.n	8005956 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005930:	4b0c      	ldr	r3, [pc, #48]	; (8005964 <xQueueGenericReset+0xcc>)
 8005932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	e009      	b.n	8005956 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	3310      	adds	r3, #16
 8005946:	4618      	mov	r0, r3
 8005948:	f7ff fef2 	bl	8005730 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	3324      	adds	r3, #36	; 0x24
 8005950:	4618      	mov	r0, r3
 8005952:	f7ff feed 	bl	8005730 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005956:	f001 fffd 	bl	8007954 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800595a:	2301      	movs	r3, #1
}
 800595c:	4618      	mov	r0, r3
 800595e:	3710      	adds	r7, #16
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	e000ed04 	.word	0xe000ed04

08005968 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005968:	b580      	push	{r7, lr}
 800596a:	b08e      	sub	sp, #56	; 0x38
 800596c:	af02      	add	r7, sp, #8
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
 8005974:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10a      	bne.n	8005992 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800597c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005980:	f383 8811 	msr	BASEPRI, r3
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800598e:	bf00      	nop
 8005990:	e7fe      	b.n	8005990 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10a      	bne.n	80059ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599c:	f383 8811 	msr	BASEPRI, r3
 80059a0:	f3bf 8f6f 	isb	sy
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80059aa:	bf00      	nop
 80059ac:	e7fe      	b.n	80059ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d002      	beq.n	80059ba <xQueueGenericCreateStatic+0x52>
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <xQueueGenericCreateStatic+0x56>
 80059ba:	2301      	movs	r3, #1
 80059bc:	e000      	b.n	80059c0 <xQueueGenericCreateStatic+0x58>
 80059be:	2300      	movs	r3, #0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10a      	bne.n	80059da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80059c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	623b      	str	r3, [r7, #32]
}
 80059d6:	bf00      	nop
 80059d8:	e7fe      	b.n	80059d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d102      	bne.n	80059e6 <xQueueGenericCreateStatic+0x7e>
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <xQueueGenericCreateStatic+0x82>
 80059e6:	2301      	movs	r3, #1
 80059e8:	e000      	b.n	80059ec <xQueueGenericCreateStatic+0x84>
 80059ea:	2300      	movs	r3, #0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10a      	bne.n	8005a06 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80059f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	61fb      	str	r3, [r7, #28]
}
 8005a02:	bf00      	nop
 8005a04:	e7fe      	b.n	8005a04 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a06:	2350      	movs	r3, #80	; 0x50
 8005a08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	2b50      	cmp	r3, #80	; 0x50
 8005a0e:	d00a      	beq.n	8005a26 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a14:	f383 8811 	msr	BASEPRI, r3
 8005a18:	f3bf 8f6f 	isb	sy
 8005a1c:	f3bf 8f4f 	dsb	sy
 8005a20:	61bb      	str	r3, [r7, #24]
}
 8005a22:	bf00      	nop
 8005a24:	e7fe      	b.n	8005a24 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a26:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00d      	beq.n	8005a4e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	4613      	mov	r3, r2
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	68b9      	ldr	r1, [r7, #8]
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f000 f805 	bl	8005a58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3730      	adds	r7, #48	; 0x30
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
 8005a64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d103      	bne.n	8005a74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	601a      	str	r2, [r3, #0]
 8005a72:	e002      	b.n	8005a7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a86:	2101      	movs	r1, #1
 8005a88:	69b8      	ldr	r0, [r7, #24]
 8005a8a:	f7ff ff05 	bl	8005898 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	78fa      	ldrb	r2, [r7, #3]
 8005a92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a96:	bf00      	nop
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
	...

08005aa0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b08e      	sub	sp, #56	; 0x38
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
 8005aac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10a      	bne.n	8005ad2 <xQueueGenericSend+0x32>
	__asm volatile
 8005abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac0:	f383 8811 	msr	BASEPRI, r3
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ace:	bf00      	nop
 8005ad0:	e7fe      	b.n	8005ad0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d103      	bne.n	8005ae0 <xQueueGenericSend+0x40>
 8005ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <xQueueGenericSend+0x44>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e000      	b.n	8005ae6 <xQueueGenericSend+0x46>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10a      	bne.n	8005b00 <xQueueGenericSend+0x60>
	__asm volatile
 8005aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aee:	f383 8811 	msr	BASEPRI, r3
 8005af2:	f3bf 8f6f 	isb	sy
 8005af6:	f3bf 8f4f 	dsb	sy
 8005afa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005afc:	bf00      	nop
 8005afe:	e7fe      	b.n	8005afe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d103      	bne.n	8005b0e <xQueueGenericSend+0x6e>
 8005b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d101      	bne.n	8005b12 <xQueueGenericSend+0x72>
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e000      	b.n	8005b14 <xQueueGenericSend+0x74>
 8005b12:	2300      	movs	r3, #0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10a      	bne.n	8005b2e <xQueueGenericSend+0x8e>
	__asm volatile
 8005b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1c:	f383 8811 	msr	BASEPRI, r3
 8005b20:	f3bf 8f6f 	isb	sy
 8005b24:	f3bf 8f4f 	dsb	sy
 8005b28:	623b      	str	r3, [r7, #32]
}
 8005b2a:	bf00      	nop
 8005b2c:	e7fe      	b.n	8005b2c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b2e:	f001 f989 	bl	8006e44 <xTaskGetSchedulerState>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d102      	bne.n	8005b3e <xQueueGenericSend+0x9e>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <xQueueGenericSend+0xa2>
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e000      	b.n	8005b44 <xQueueGenericSend+0xa4>
 8005b42:	2300      	movs	r3, #0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10a      	bne.n	8005b5e <xQueueGenericSend+0xbe>
	__asm volatile
 8005b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4c:	f383 8811 	msr	BASEPRI, r3
 8005b50:	f3bf 8f6f 	isb	sy
 8005b54:	f3bf 8f4f 	dsb	sy
 8005b58:	61fb      	str	r3, [r7, #28]
}
 8005b5a:	bf00      	nop
 8005b5c:	e7fe      	b.n	8005b5c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b5e:	f001 fec9 	bl	80078f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d302      	bcc.n	8005b74 <xQueueGenericSend+0xd4>
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d129      	bne.n	8005bc8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	68b9      	ldr	r1, [r7, #8]
 8005b78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b7a:	f000 fa0b 	bl	8005f94 <prvCopyDataToQueue>
 8005b7e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d010      	beq.n	8005baa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8a:	3324      	adds	r3, #36	; 0x24
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f000 ff9b 	bl	8006ac8 <xTaskRemoveFromEventList>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d013      	beq.n	8005bc0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005b98:	4b3f      	ldr	r3, [pc, #252]	; (8005c98 <xQueueGenericSend+0x1f8>)
 8005b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b9e:	601a      	str	r2, [r3, #0]
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	f3bf 8f6f 	isb	sy
 8005ba8:	e00a      	b.n	8005bc0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d007      	beq.n	8005bc0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005bb0:	4b39      	ldr	r3, [pc, #228]	; (8005c98 <xQueueGenericSend+0x1f8>)
 8005bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bb6:	601a      	str	r2, [r3, #0]
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005bc0:	f001 fec8 	bl	8007954 <vPortExitCritical>
				return pdPASS;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e063      	b.n	8005c90 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d103      	bne.n	8005bd6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005bce:	f001 fec1 	bl	8007954 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	e05c      	b.n	8005c90 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d106      	bne.n	8005bea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bdc:	f107 0314 	add.w	r3, r7, #20
 8005be0:	4618      	mov	r0, r3
 8005be2:	f000 ffd5 	bl	8006b90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005be6:	2301      	movs	r3, #1
 8005be8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005bea:	f001 feb3 	bl	8007954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005bee:	f000 fd47 	bl	8006680 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bf2:	f001 fe7f 	bl	80078f4 <vPortEnterCritical>
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bfc:	b25b      	sxtb	r3, r3
 8005bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c02:	d103      	bne.n	8005c0c <xQueueGenericSend+0x16c>
 8005c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c12:	b25b      	sxtb	r3, r3
 8005c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c18:	d103      	bne.n	8005c22 <xQueueGenericSend+0x182>
 8005c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c22:	f001 fe97 	bl	8007954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c26:	1d3a      	adds	r2, r7, #4
 8005c28:	f107 0314 	add.w	r3, r7, #20
 8005c2c:	4611      	mov	r1, r2
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f000 ffc4 	bl	8006bbc <xTaskCheckForTimeOut>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d124      	bne.n	8005c84 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005c3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c3c:	f000 faa2 	bl	8006184 <prvIsQueueFull>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d018      	beq.n	8005c78 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c48:	3310      	adds	r3, #16
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	4611      	mov	r1, r2
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 feea 	bl	8006a28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005c54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c56:	f000 fa2d 	bl	80060b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005c5a:	f000 fd1f 	bl	800669c <xTaskResumeAll>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f47f af7c 	bne.w	8005b5e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005c66:	4b0c      	ldr	r3, [pc, #48]	; (8005c98 <xQueueGenericSend+0x1f8>)
 8005c68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	f3bf 8f4f 	dsb	sy
 8005c72:	f3bf 8f6f 	isb	sy
 8005c76:	e772      	b.n	8005b5e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005c78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c7a:	f000 fa1b 	bl	80060b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c7e:	f000 fd0d 	bl	800669c <xTaskResumeAll>
 8005c82:	e76c      	b.n	8005b5e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005c84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c86:	f000 fa15 	bl	80060b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c8a:	f000 fd07 	bl	800669c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005c8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3738      	adds	r7, #56	; 0x38
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	e000ed04 	.word	0xe000ed04

08005c9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b090      	sub	sp, #64	; 0x40
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
 8005ca8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d10a      	bne.n	8005cca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb8:	f383 8811 	msr	BASEPRI, r3
 8005cbc:	f3bf 8f6f 	isb	sy
 8005cc0:	f3bf 8f4f 	dsb	sy
 8005cc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005cc6:	bf00      	nop
 8005cc8:	e7fe      	b.n	8005cc8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d103      	bne.n	8005cd8 <xQueueGenericSendFromISR+0x3c>
 8005cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d101      	bne.n	8005cdc <xQueueGenericSendFromISR+0x40>
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e000      	b.n	8005cde <xQueueGenericSendFromISR+0x42>
 8005cdc:	2300      	movs	r3, #0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10a      	bne.n	8005cf8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce6:	f383 8811 	msr	BASEPRI, r3
 8005cea:	f3bf 8f6f 	isb	sy
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005cf4:	bf00      	nop
 8005cf6:	e7fe      	b.n	8005cf6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d103      	bne.n	8005d06 <xQueueGenericSendFromISR+0x6a>
 8005cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d101      	bne.n	8005d0a <xQueueGenericSendFromISR+0x6e>
 8005d06:	2301      	movs	r3, #1
 8005d08:	e000      	b.n	8005d0c <xQueueGenericSendFromISR+0x70>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10a      	bne.n	8005d26 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d14:	f383 8811 	msr	BASEPRI, r3
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	623b      	str	r3, [r7, #32]
}
 8005d22:	bf00      	nop
 8005d24:	e7fe      	b.n	8005d24 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d26:	f001 fec7 	bl	8007ab8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005d2a:	f3ef 8211 	mrs	r2, BASEPRI
 8005d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d32:	f383 8811 	msr	BASEPRI, r3
 8005d36:	f3bf 8f6f 	isb	sy
 8005d3a:	f3bf 8f4f 	dsb	sy
 8005d3e:	61fa      	str	r2, [r7, #28]
 8005d40:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005d42:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d44:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d302      	bcc.n	8005d58 <xQueueGenericSendFromISR+0xbc>
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d12f      	bne.n	8005db8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d66:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	68b9      	ldr	r1, [r7, #8]
 8005d6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005d6e:	f000 f911 	bl	8005f94 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005d72:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d7a:	d112      	bne.n	8005da2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d016      	beq.n	8005db2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d86:	3324      	adds	r3, #36	; 0x24
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f000 fe9d 	bl	8006ac8 <xTaskRemoveFromEventList>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00e      	beq.n	8005db2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00b      	beq.n	8005db2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	e007      	b.n	8005db2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005da2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005da6:	3301      	adds	r3, #1
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	b25a      	sxtb	r2, r3
 8005dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005db2:	2301      	movs	r3, #1
 8005db4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005db6:	e001      	b.n	8005dbc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005db8:	2300      	movs	r3, #0
 8005dba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dbe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005dc6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3740      	adds	r7, #64	; 0x40
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
	...

08005dd4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b08c      	sub	sp, #48	; 0x30
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005de0:	2300      	movs	r3, #0
 8005de2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10a      	bne.n	8005e04 <xQueueReceive+0x30>
	__asm volatile
 8005dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df2:	f383 8811 	msr	BASEPRI, r3
 8005df6:	f3bf 8f6f 	isb	sy
 8005dfa:	f3bf 8f4f 	dsb	sy
 8005dfe:	623b      	str	r3, [r7, #32]
}
 8005e00:	bf00      	nop
 8005e02:	e7fe      	b.n	8005e02 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d103      	bne.n	8005e12 <xQueueReceive+0x3e>
 8005e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d101      	bne.n	8005e16 <xQueueReceive+0x42>
 8005e12:	2301      	movs	r3, #1
 8005e14:	e000      	b.n	8005e18 <xQueueReceive+0x44>
 8005e16:	2300      	movs	r3, #0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d10a      	bne.n	8005e32 <xQueueReceive+0x5e>
	__asm volatile
 8005e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e20:	f383 8811 	msr	BASEPRI, r3
 8005e24:	f3bf 8f6f 	isb	sy
 8005e28:	f3bf 8f4f 	dsb	sy
 8005e2c:	61fb      	str	r3, [r7, #28]
}
 8005e2e:	bf00      	nop
 8005e30:	e7fe      	b.n	8005e30 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e32:	f001 f807 	bl	8006e44 <xTaskGetSchedulerState>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d102      	bne.n	8005e42 <xQueueReceive+0x6e>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <xQueueReceive+0x72>
 8005e42:	2301      	movs	r3, #1
 8005e44:	e000      	b.n	8005e48 <xQueueReceive+0x74>
 8005e46:	2300      	movs	r3, #0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d10a      	bne.n	8005e62 <xQueueReceive+0x8e>
	__asm volatile
 8005e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e50:	f383 8811 	msr	BASEPRI, r3
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	61bb      	str	r3, [r7, #24]
}
 8005e5e:	bf00      	nop
 8005e60:	e7fe      	b.n	8005e60 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e62:	f001 fd47 	bl	80078f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d01f      	beq.n	8005eb2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e72:	68b9      	ldr	r1, [r7, #8]
 8005e74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e76:	f000 f8f7 	bl	8006068 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7c:	1e5a      	subs	r2, r3, #1
 8005e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e80:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00f      	beq.n	8005eaa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8c:	3310      	adds	r3, #16
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 fe1a 	bl	8006ac8 <xTaskRemoveFromEventList>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d007      	beq.n	8005eaa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e9a:	4b3d      	ldr	r3, [pc, #244]	; (8005f90 <xQueueReceive+0x1bc>)
 8005e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005eaa:	f001 fd53 	bl	8007954 <vPortExitCritical>
				return pdPASS;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e069      	b.n	8005f86 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d103      	bne.n	8005ec0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005eb8:	f001 fd4c 	bl	8007954 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	e062      	b.n	8005f86 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d106      	bne.n	8005ed4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ec6:	f107 0310 	add.w	r3, r7, #16
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f000 fe60 	bl	8006b90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ed4:	f001 fd3e 	bl	8007954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ed8:	f000 fbd2 	bl	8006680 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005edc:	f001 fd0a 	bl	80078f4 <vPortEnterCritical>
 8005ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ee6:	b25b      	sxtb	r3, r3
 8005ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eec:	d103      	bne.n	8005ef6 <xQueueReceive+0x122>
 8005eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005efc:	b25b      	sxtb	r3, r3
 8005efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f02:	d103      	bne.n	8005f0c <xQueueReceive+0x138>
 8005f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f0c:	f001 fd22 	bl	8007954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f10:	1d3a      	adds	r2, r7, #4
 8005f12:	f107 0310 	add.w	r3, r7, #16
 8005f16:	4611      	mov	r1, r2
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f000 fe4f 	bl	8006bbc <xTaskCheckForTimeOut>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d123      	bne.n	8005f6c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f26:	f000 f917 	bl	8006158 <prvIsQueueEmpty>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d017      	beq.n	8005f60 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f32:	3324      	adds	r3, #36	; 0x24
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	4611      	mov	r1, r2
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f000 fd75 	bl	8006a28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f40:	f000 f8b8 	bl	80060b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f44:	f000 fbaa 	bl	800669c <xTaskResumeAll>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d189      	bne.n	8005e62 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005f4e:	4b10      	ldr	r3, [pc, #64]	; (8005f90 <xQueueReceive+0x1bc>)
 8005f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f54:	601a      	str	r2, [r3, #0]
 8005f56:	f3bf 8f4f 	dsb	sy
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	e780      	b.n	8005e62 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005f60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f62:	f000 f8a7 	bl	80060b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f66:	f000 fb99 	bl	800669c <xTaskResumeAll>
 8005f6a:	e77a      	b.n	8005e62 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005f6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f6e:	f000 f8a1 	bl	80060b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f72:	f000 fb93 	bl	800669c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f78:	f000 f8ee 	bl	8006158 <prvIsQueueEmpty>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f43f af6f 	beq.w	8005e62 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005f84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3730      	adds	r7, #48	; 0x30
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	e000ed04 	.word	0xe000ed04

08005f94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10d      	bne.n	8005fce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d14d      	bne.n	8006056 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 ff5e 	bl	8006e80 <xTaskPriorityDisinherit>
 8005fc4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	609a      	str	r2, [r3, #8]
 8005fcc:	e043      	b.n	8006056 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d119      	bne.n	8006008 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6858      	ldr	r0, [r3, #4]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fdc:	461a      	mov	r2, r3
 8005fde:	68b9      	ldr	r1, [r7, #8]
 8005fe0:	f001 ffbe 	bl	8007f60 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fec:	441a      	add	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d32b      	bcc.n	8006056 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	605a      	str	r2, [r3, #4]
 8006006:	e026      	b.n	8006056 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	68d8      	ldr	r0, [r3, #12]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006010:	461a      	mov	r2, r3
 8006012:	68b9      	ldr	r1, [r7, #8]
 8006014:	f001 ffa4 	bl	8007f60 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	68da      	ldr	r2, [r3, #12]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006020:	425b      	negs	r3, r3
 8006022:	441a      	add	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	68da      	ldr	r2, [r3, #12]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	429a      	cmp	r2, r3
 8006032:	d207      	bcs.n	8006044 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	689a      	ldr	r2, [r3, #8]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603c:	425b      	negs	r3, r3
 800603e:	441a      	add	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b02      	cmp	r3, #2
 8006048:	d105      	bne.n	8006056 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d002      	beq.n	8006056 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	3b01      	subs	r3, #1
 8006054:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	1c5a      	adds	r2, r3, #1
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800605e:	697b      	ldr	r3, [r7, #20]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3718      	adds	r7, #24
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006076:	2b00      	cmp	r3, #0
 8006078:	d018      	beq.n	80060ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68da      	ldr	r2, [r3, #12]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006082:	441a      	add	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68da      	ldr	r2, [r3, #12]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	429a      	cmp	r2, r3
 8006092:	d303      	bcc.n	800609c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68d9      	ldr	r1, [r3, #12]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a4:	461a      	mov	r2, r3
 80060a6:	6838      	ldr	r0, [r7, #0]
 80060a8:	f001 ff5a 	bl	8007f60 <memcpy>
	}
}
 80060ac:	bf00      	nop
 80060ae:	3708      	adds	r7, #8
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80060bc:	f001 fc1a 	bl	80078f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060c8:	e011      	b.n	80060ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d012      	beq.n	80060f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	3324      	adds	r3, #36	; 0x24
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 fcf6 	bl	8006ac8 <xTaskRemoveFromEventList>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80060e2:	f000 fdcd 	bl	8006c80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
 80060e8:	3b01      	subs	r3, #1
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	dce9      	bgt.n	80060ca <prvUnlockQueue+0x16>
 80060f6:	e000      	b.n	80060fa <prvUnlockQueue+0x46>
					break;
 80060f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	22ff      	movs	r2, #255	; 0xff
 80060fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006102:	f001 fc27 	bl	8007954 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006106:	f001 fbf5 	bl	80078f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006110:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006112:	e011      	b.n	8006138 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d012      	beq.n	8006142 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	3310      	adds	r3, #16
 8006120:	4618      	mov	r0, r3
 8006122:	f000 fcd1 	bl	8006ac8 <xTaskRemoveFromEventList>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d001      	beq.n	8006130 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800612c:	f000 fda8 	bl	8006c80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006130:	7bbb      	ldrb	r3, [r7, #14]
 8006132:	3b01      	subs	r3, #1
 8006134:	b2db      	uxtb	r3, r3
 8006136:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006138:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800613c:	2b00      	cmp	r3, #0
 800613e:	dce9      	bgt.n	8006114 <prvUnlockQueue+0x60>
 8006140:	e000      	b.n	8006144 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006142:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	22ff      	movs	r2, #255	; 0xff
 8006148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800614c:	f001 fc02 	bl	8007954 <vPortExitCritical>
}
 8006150:	bf00      	nop
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006160:	f001 fbc8 	bl	80078f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006168:	2b00      	cmp	r3, #0
 800616a:	d102      	bne.n	8006172 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800616c:	2301      	movs	r3, #1
 800616e:	60fb      	str	r3, [r7, #12]
 8006170:	e001      	b.n	8006176 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006172:	2300      	movs	r3, #0
 8006174:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006176:	f001 fbed 	bl	8007954 <vPortExitCritical>

	return xReturn;
 800617a:	68fb      	ldr	r3, [r7, #12]
}
 800617c:	4618      	mov	r0, r3
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800618c:	f001 fbb2 	bl	80078f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006198:	429a      	cmp	r2, r3
 800619a:	d102      	bne.n	80061a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800619c:	2301      	movs	r3, #1
 800619e:	60fb      	str	r3, [r7, #12]
 80061a0:	e001      	b.n	80061a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80061a2:	2300      	movs	r3, #0
 80061a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80061a6:	f001 fbd5 	bl	8007954 <vPortExitCritical>

	return xReturn;
 80061aa:	68fb      	ldr	r3, [r7, #12]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80061be:	2300      	movs	r3, #0
 80061c0:	60fb      	str	r3, [r7, #12]
 80061c2:	e014      	b.n	80061ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80061c4:	4a0f      	ldr	r2, [pc, #60]	; (8006204 <vQueueAddToRegistry+0x50>)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d10b      	bne.n	80061e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80061d0:	490c      	ldr	r1, [pc, #48]	; (8006204 <vQueueAddToRegistry+0x50>)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	683a      	ldr	r2, [r7, #0]
 80061d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80061da:	4a0a      	ldr	r2, [pc, #40]	; (8006204 <vQueueAddToRegistry+0x50>)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	00db      	lsls	r3, r3, #3
 80061e0:	4413      	add	r3, r2
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80061e6:	e006      	b.n	80061f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	3301      	adds	r3, #1
 80061ec:	60fb      	str	r3, [r7, #12]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2b07      	cmp	r3, #7
 80061f2:	d9e7      	bls.n	80061c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80061f4:	bf00      	nop
 80061f6:	bf00      	nop
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	2000097c 	.word	0x2000097c

08006208 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006218:	f001 fb6c 	bl	80078f4 <vPortEnterCritical>
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006222:	b25b      	sxtb	r3, r3
 8006224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006228:	d103      	bne.n	8006232 <vQueueWaitForMessageRestricted+0x2a>
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006238:	b25b      	sxtb	r3, r3
 800623a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800623e:	d103      	bne.n	8006248 <vQueueWaitForMessageRestricted+0x40>
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006248:	f001 fb84 	bl	8007954 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006250:	2b00      	cmp	r3, #0
 8006252:	d106      	bne.n	8006262 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	3324      	adds	r3, #36	; 0x24
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	68b9      	ldr	r1, [r7, #8]
 800625c:	4618      	mov	r0, r3
 800625e:	f000 fc07 	bl	8006a70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006262:	6978      	ldr	r0, [r7, #20]
 8006264:	f7ff ff26 	bl	80060b4 <prvUnlockQueue>
	}
 8006268:	bf00      	nop
 800626a:	3718      	adds	r7, #24
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006270:	b580      	push	{r7, lr}
 8006272:	b08e      	sub	sp, #56	; 0x38
 8006274:	af04      	add	r7, sp, #16
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
 800627c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800627e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10a      	bne.n	800629a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006288:	f383 8811 	msr	BASEPRI, r3
 800628c:	f3bf 8f6f 	isb	sy
 8006290:	f3bf 8f4f 	dsb	sy
 8006294:	623b      	str	r3, [r7, #32]
}
 8006296:	bf00      	nop
 8006298:	e7fe      	b.n	8006298 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800629a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10a      	bne.n	80062b6 <xTaskCreateStatic+0x46>
	__asm volatile
 80062a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	61fb      	str	r3, [r7, #28]
}
 80062b2:	bf00      	nop
 80062b4:	e7fe      	b.n	80062b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80062b6:	235c      	movs	r3, #92	; 0x5c
 80062b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	2b5c      	cmp	r3, #92	; 0x5c
 80062be:	d00a      	beq.n	80062d6 <xTaskCreateStatic+0x66>
	__asm volatile
 80062c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c4:	f383 8811 	msr	BASEPRI, r3
 80062c8:	f3bf 8f6f 	isb	sy
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	61bb      	str	r3, [r7, #24]
}
 80062d2:	bf00      	nop
 80062d4:	e7fe      	b.n	80062d4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80062d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80062d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d01e      	beq.n	800631c <xTaskCreateStatic+0xac>
 80062de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d01b      	beq.n	800631c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80062e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f0:	2202      	movs	r2, #2
 80062f2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80062f6:	2300      	movs	r3, #0
 80062f8:	9303      	str	r3, [sp, #12]
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	9302      	str	r3, [sp, #8]
 80062fe:	f107 0314 	add.w	r3, r7, #20
 8006302:	9301      	str	r3, [sp, #4]
 8006304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006306:	9300      	str	r3, [sp, #0]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	68b9      	ldr	r1, [r7, #8]
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f000 f850 	bl	80063b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006314:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006316:	f000 f8dd 	bl	80064d4 <prvAddNewTaskToReadyList>
 800631a:	e001      	b.n	8006320 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800631c:	2300      	movs	r3, #0
 800631e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006320:	697b      	ldr	r3, [r7, #20]
	}
 8006322:	4618      	mov	r0, r3
 8006324:	3728      	adds	r7, #40	; 0x28
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800632a:	b580      	push	{r7, lr}
 800632c:	b08c      	sub	sp, #48	; 0x30
 800632e:	af04      	add	r7, sp, #16
 8006330:	60f8      	str	r0, [r7, #12]
 8006332:	60b9      	str	r1, [r7, #8]
 8006334:	603b      	str	r3, [r7, #0]
 8006336:	4613      	mov	r3, r2
 8006338:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800633a:	88fb      	ldrh	r3, [r7, #6]
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	4618      	mov	r0, r3
 8006340:	f001 fbfa 	bl	8007b38 <pvPortMalloc>
 8006344:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00e      	beq.n	800636a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800634c:	205c      	movs	r0, #92	; 0x5c
 800634e:	f001 fbf3 	bl	8007b38 <pvPortMalloc>
 8006352:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d003      	beq.n	8006362 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	631a      	str	r2, [r3, #48]	; 0x30
 8006360:	e005      	b.n	800636e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006362:	6978      	ldr	r0, [r7, #20]
 8006364:	f001 fcb4 	bl	8007cd0 <vPortFree>
 8006368:	e001      	b.n	800636e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800636a:	2300      	movs	r3, #0
 800636c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d017      	beq.n	80063a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800637c:	88fa      	ldrh	r2, [r7, #6]
 800637e:	2300      	movs	r3, #0
 8006380:	9303      	str	r3, [sp, #12]
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	9302      	str	r3, [sp, #8]
 8006386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006388:	9301      	str	r3, [sp, #4]
 800638a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	68b9      	ldr	r1, [r7, #8]
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f000 f80e 	bl	80063b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006398:	69f8      	ldr	r0, [r7, #28]
 800639a:	f000 f89b 	bl	80064d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800639e:	2301      	movs	r3, #1
 80063a0:	61bb      	str	r3, [r7, #24]
 80063a2:	e002      	b.n	80063aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80063a4:	f04f 33ff 	mov.w	r3, #4294967295
 80063a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80063aa:	69bb      	ldr	r3, [r7, #24]
	}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3720      	adds	r7, #32
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b088      	sub	sp, #32
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
 80063c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80063c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	461a      	mov	r2, r3
 80063cc:	21a5      	movs	r1, #165	; 0xa5
 80063ce:	f001 fdd5 	bl	8007f7c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80063d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80063dc:	3b01      	subs	r3, #1
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	f023 0307 	bic.w	r3, r3, #7
 80063ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	f003 0307 	and.w	r3, r3, #7
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00a      	beq.n	800640c <prvInitialiseNewTask+0x58>
	__asm volatile
 80063f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	617b      	str	r3, [r7, #20]
}
 8006408:	bf00      	nop
 800640a:	e7fe      	b.n	800640a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d01f      	beq.n	8006452 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006412:	2300      	movs	r3, #0
 8006414:	61fb      	str	r3, [r7, #28]
 8006416:	e012      	b.n	800643e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	4413      	add	r3, r2
 800641e:	7819      	ldrb	r1, [r3, #0]
 8006420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	4413      	add	r3, r2
 8006426:	3334      	adds	r3, #52	; 0x34
 8006428:	460a      	mov	r2, r1
 800642a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	4413      	add	r3, r2
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d006      	beq.n	8006446 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	3301      	adds	r3, #1
 800643c:	61fb      	str	r3, [r7, #28]
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	2b0f      	cmp	r3, #15
 8006442:	d9e9      	bls.n	8006418 <prvInitialiseNewTask+0x64>
 8006444:	e000      	b.n	8006448 <prvInitialiseNewTask+0x94>
			{
				break;
 8006446:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644a:	2200      	movs	r2, #0
 800644c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006450:	e003      	b.n	800645a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006454:	2200      	movs	r2, #0
 8006456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800645a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645c:	2b37      	cmp	r3, #55	; 0x37
 800645e:	d901      	bls.n	8006464 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006460:	2337      	movs	r3, #55	; 0x37
 8006462:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006466:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006468:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800646a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800646e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006472:	2200      	movs	r2, #0
 8006474:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006478:	3304      	adds	r3, #4
 800647a:	4618      	mov	r0, r3
 800647c:	f7ff f978 	bl	8005770 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006482:	3318      	adds	r3, #24
 8006484:	4618      	mov	r0, r3
 8006486:	f7ff f973 	bl	8005770 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800648a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800648e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006492:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006498:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800649e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80064a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a2:	2200      	movs	r2, #0
 80064a4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80064a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	68f9      	ldr	r1, [r7, #12]
 80064b2:	69b8      	ldr	r0, [r7, #24]
 80064b4:	f001 f8f4 	bl	80076a0 <pxPortInitialiseStack>
 80064b8:	4602      	mov	r2, r0
 80064ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80064be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d002      	beq.n	80064ca <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80064c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064ca:	bf00      	nop
 80064cc:	3720      	adds	r7, #32
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
	...

080064d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80064dc:	f001 fa0a 	bl	80078f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80064e0:	4b2d      	ldr	r3, [pc, #180]	; (8006598 <prvAddNewTaskToReadyList+0xc4>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	3301      	adds	r3, #1
 80064e6:	4a2c      	ldr	r2, [pc, #176]	; (8006598 <prvAddNewTaskToReadyList+0xc4>)
 80064e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80064ea:	4b2c      	ldr	r3, [pc, #176]	; (800659c <prvAddNewTaskToReadyList+0xc8>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d109      	bne.n	8006506 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80064f2:	4a2a      	ldr	r2, [pc, #168]	; (800659c <prvAddNewTaskToReadyList+0xc8>)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80064f8:	4b27      	ldr	r3, [pc, #156]	; (8006598 <prvAddNewTaskToReadyList+0xc4>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d110      	bne.n	8006522 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006500:	f000 fbe2 	bl	8006cc8 <prvInitialiseTaskLists>
 8006504:	e00d      	b.n	8006522 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006506:	4b26      	ldr	r3, [pc, #152]	; (80065a0 <prvAddNewTaskToReadyList+0xcc>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d109      	bne.n	8006522 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800650e:	4b23      	ldr	r3, [pc, #140]	; (800659c <prvAddNewTaskToReadyList+0xc8>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006518:	429a      	cmp	r2, r3
 800651a:	d802      	bhi.n	8006522 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800651c:	4a1f      	ldr	r2, [pc, #124]	; (800659c <prvAddNewTaskToReadyList+0xc8>)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006522:	4b20      	ldr	r3, [pc, #128]	; (80065a4 <prvAddNewTaskToReadyList+0xd0>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	3301      	adds	r3, #1
 8006528:	4a1e      	ldr	r2, [pc, #120]	; (80065a4 <prvAddNewTaskToReadyList+0xd0>)
 800652a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800652c:	4b1d      	ldr	r3, [pc, #116]	; (80065a4 <prvAddNewTaskToReadyList+0xd0>)
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006538:	4b1b      	ldr	r3, [pc, #108]	; (80065a8 <prvAddNewTaskToReadyList+0xd4>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	429a      	cmp	r2, r3
 800653e:	d903      	bls.n	8006548 <prvAddNewTaskToReadyList+0x74>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006544:	4a18      	ldr	r2, [pc, #96]	; (80065a8 <prvAddNewTaskToReadyList+0xd4>)
 8006546:	6013      	str	r3, [r2, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800654c:	4613      	mov	r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4413      	add	r3, r2
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	4a15      	ldr	r2, [pc, #84]	; (80065ac <prvAddNewTaskToReadyList+0xd8>)
 8006556:	441a      	add	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	3304      	adds	r3, #4
 800655c:	4619      	mov	r1, r3
 800655e:	4610      	mov	r0, r2
 8006560:	f7ff f913 	bl	800578a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006564:	f001 f9f6 	bl	8007954 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006568:	4b0d      	ldr	r3, [pc, #52]	; (80065a0 <prvAddNewTaskToReadyList+0xcc>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00e      	beq.n	800658e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006570:	4b0a      	ldr	r3, [pc, #40]	; (800659c <prvAddNewTaskToReadyList+0xc8>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657a:	429a      	cmp	r2, r3
 800657c:	d207      	bcs.n	800658e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800657e:	4b0c      	ldr	r3, [pc, #48]	; (80065b0 <prvAddNewTaskToReadyList+0xdc>)
 8006580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006584:	601a      	str	r2, [r3, #0]
 8006586:	f3bf 8f4f 	dsb	sy
 800658a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800658e:	bf00      	nop
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	20000e90 	.word	0x20000e90
 800659c:	200009bc 	.word	0x200009bc
 80065a0:	20000e9c 	.word	0x20000e9c
 80065a4:	20000eac 	.word	0x20000eac
 80065a8:	20000e98 	.word	0x20000e98
 80065ac:	200009c0 	.word	0x200009c0
 80065b0:	e000ed04 	.word	0xe000ed04

080065b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b08a      	sub	sp, #40	; 0x28
 80065b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80065ba:	2300      	movs	r3, #0
 80065bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80065be:	2300      	movs	r3, #0
 80065c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80065c2:	463a      	mov	r2, r7
 80065c4:	1d39      	adds	r1, r7, #4
 80065c6:	f107 0308 	add.w	r3, r7, #8
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7ff f87c 	bl	80056c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80065d0:	6839      	ldr	r1, [r7, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	9202      	str	r2, [sp, #8]
 80065d8:	9301      	str	r3, [sp, #4]
 80065da:	2300      	movs	r3, #0
 80065dc:	9300      	str	r3, [sp, #0]
 80065de:	2300      	movs	r3, #0
 80065e0:	460a      	mov	r2, r1
 80065e2:	4921      	ldr	r1, [pc, #132]	; (8006668 <vTaskStartScheduler+0xb4>)
 80065e4:	4821      	ldr	r0, [pc, #132]	; (800666c <vTaskStartScheduler+0xb8>)
 80065e6:	f7ff fe43 	bl	8006270 <xTaskCreateStatic>
 80065ea:	4603      	mov	r3, r0
 80065ec:	4a20      	ldr	r2, [pc, #128]	; (8006670 <vTaskStartScheduler+0xbc>)
 80065ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80065f0:	4b1f      	ldr	r3, [pc, #124]	; (8006670 <vTaskStartScheduler+0xbc>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d002      	beq.n	80065fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80065f8:	2301      	movs	r3, #1
 80065fa:	617b      	str	r3, [r7, #20]
 80065fc:	e001      	b.n	8006602 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80065fe:	2300      	movs	r3, #0
 8006600:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d102      	bne.n	800660e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006608:	f000 fcfc 	bl	8007004 <xTimerCreateTimerTask>
 800660c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d116      	bne.n	8006642 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006618:	f383 8811 	msr	BASEPRI, r3
 800661c:	f3bf 8f6f 	isb	sy
 8006620:	f3bf 8f4f 	dsb	sy
 8006624:	613b      	str	r3, [r7, #16]
}
 8006626:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006628:	4b12      	ldr	r3, [pc, #72]	; (8006674 <vTaskStartScheduler+0xc0>)
 800662a:	f04f 32ff 	mov.w	r2, #4294967295
 800662e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006630:	4b11      	ldr	r3, [pc, #68]	; (8006678 <vTaskStartScheduler+0xc4>)
 8006632:	2201      	movs	r2, #1
 8006634:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006636:	4b11      	ldr	r3, [pc, #68]	; (800667c <vTaskStartScheduler+0xc8>)
 8006638:	2200      	movs	r2, #0
 800663a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800663c:	f001 f8b8 	bl	80077b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006640:	e00e      	b.n	8006660 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006648:	d10a      	bne.n	8006660 <vTaskStartScheduler+0xac>
	__asm volatile
 800664a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664e:	f383 8811 	msr	BASEPRI, r3
 8006652:	f3bf 8f6f 	isb	sy
 8006656:	f3bf 8f4f 	dsb	sy
 800665a:	60fb      	str	r3, [r7, #12]
}
 800665c:	bf00      	nop
 800665e:	e7fe      	b.n	800665e <vTaskStartScheduler+0xaa>
}
 8006660:	bf00      	nop
 8006662:	3718      	adds	r7, #24
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	08008eec 	.word	0x08008eec
 800666c:	08006c99 	.word	0x08006c99
 8006670:	20000eb4 	.word	0x20000eb4
 8006674:	20000eb0 	.word	0x20000eb0
 8006678:	20000e9c 	.word	0x20000e9c
 800667c:	20000e94 	.word	0x20000e94

08006680 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006680:	b480      	push	{r7}
 8006682:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006684:	4b04      	ldr	r3, [pc, #16]	; (8006698 <vTaskSuspendAll+0x18>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	3301      	adds	r3, #1
 800668a:	4a03      	ldr	r2, [pc, #12]	; (8006698 <vTaskSuspendAll+0x18>)
 800668c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800668e:	bf00      	nop
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	20000eb8 	.word	0x20000eb8

0800669c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80066a2:	2300      	movs	r3, #0
 80066a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80066a6:	2300      	movs	r3, #0
 80066a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80066aa:	4b42      	ldr	r3, [pc, #264]	; (80067b4 <xTaskResumeAll+0x118>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10a      	bne.n	80066c8 <xTaskResumeAll+0x2c>
	__asm volatile
 80066b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b6:	f383 8811 	msr	BASEPRI, r3
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	603b      	str	r3, [r7, #0]
}
 80066c4:	bf00      	nop
 80066c6:	e7fe      	b.n	80066c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80066c8:	f001 f914 	bl	80078f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80066cc:	4b39      	ldr	r3, [pc, #228]	; (80067b4 <xTaskResumeAll+0x118>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	3b01      	subs	r3, #1
 80066d2:	4a38      	ldr	r2, [pc, #224]	; (80067b4 <xTaskResumeAll+0x118>)
 80066d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066d6:	4b37      	ldr	r3, [pc, #220]	; (80067b4 <xTaskResumeAll+0x118>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d162      	bne.n	80067a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80066de:	4b36      	ldr	r3, [pc, #216]	; (80067b8 <xTaskResumeAll+0x11c>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d05e      	beq.n	80067a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066e6:	e02f      	b.n	8006748 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066e8:	4b34      	ldr	r3, [pc, #208]	; (80067bc <xTaskResumeAll+0x120>)
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	3318      	adds	r3, #24
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7ff f8a5 	bl	8005844 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	3304      	adds	r3, #4
 80066fe:	4618      	mov	r0, r3
 8006700:	f7ff f8a0 	bl	8005844 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006708:	4b2d      	ldr	r3, [pc, #180]	; (80067c0 <xTaskResumeAll+0x124>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	429a      	cmp	r2, r3
 800670e:	d903      	bls.n	8006718 <xTaskResumeAll+0x7c>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006714:	4a2a      	ldr	r2, [pc, #168]	; (80067c0 <xTaskResumeAll+0x124>)
 8006716:	6013      	str	r3, [r2, #0]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800671c:	4613      	mov	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4a27      	ldr	r2, [pc, #156]	; (80067c4 <xTaskResumeAll+0x128>)
 8006726:	441a      	add	r2, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	3304      	adds	r3, #4
 800672c:	4619      	mov	r1, r3
 800672e:	4610      	mov	r0, r2
 8006730:	f7ff f82b 	bl	800578a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006738:	4b23      	ldr	r3, [pc, #140]	; (80067c8 <xTaskResumeAll+0x12c>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673e:	429a      	cmp	r2, r3
 8006740:	d302      	bcc.n	8006748 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006742:	4b22      	ldr	r3, [pc, #136]	; (80067cc <xTaskResumeAll+0x130>)
 8006744:	2201      	movs	r2, #1
 8006746:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006748:	4b1c      	ldr	r3, [pc, #112]	; (80067bc <xTaskResumeAll+0x120>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1cb      	bne.n	80066e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006756:	f000 fb55 	bl	8006e04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800675a:	4b1d      	ldr	r3, [pc, #116]	; (80067d0 <xTaskResumeAll+0x134>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d010      	beq.n	8006788 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006766:	f000 f847 	bl	80067f8 <xTaskIncrementTick>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006770:	4b16      	ldr	r3, [pc, #88]	; (80067cc <xTaskResumeAll+0x130>)
 8006772:	2201      	movs	r2, #1
 8006774:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	3b01      	subs	r3, #1
 800677a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1f1      	bne.n	8006766 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006782:	4b13      	ldr	r3, [pc, #76]	; (80067d0 <xTaskResumeAll+0x134>)
 8006784:	2200      	movs	r2, #0
 8006786:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006788:	4b10      	ldr	r3, [pc, #64]	; (80067cc <xTaskResumeAll+0x130>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d009      	beq.n	80067a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006790:	2301      	movs	r3, #1
 8006792:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006794:	4b0f      	ldr	r3, [pc, #60]	; (80067d4 <xTaskResumeAll+0x138>)
 8006796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800679a:	601a      	str	r2, [r3, #0]
 800679c:	f3bf 8f4f 	dsb	sy
 80067a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067a4:	f001 f8d6 	bl	8007954 <vPortExitCritical>

	return xAlreadyYielded;
 80067a8:	68bb      	ldr	r3, [r7, #8]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	20000eb8 	.word	0x20000eb8
 80067b8:	20000e90 	.word	0x20000e90
 80067bc:	20000e50 	.word	0x20000e50
 80067c0:	20000e98 	.word	0x20000e98
 80067c4:	200009c0 	.word	0x200009c0
 80067c8:	200009bc 	.word	0x200009bc
 80067cc:	20000ea4 	.word	0x20000ea4
 80067d0:	20000ea0 	.word	0x20000ea0
 80067d4:	e000ed04 	.word	0xe000ed04

080067d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80067de:	4b05      	ldr	r3, [pc, #20]	; (80067f4 <xTaskGetTickCount+0x1c>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80067e4:	687b      	ldr	r3, [r7, #4]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	370c      	adds	r7, #12
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	20000e94 	.word	0x20000e94

080067f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80067fe:	2300      	movs	r3, #0
 8006800:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006802:	4b4f      	ldr	r3, [pc, #316]	; (8006940 <xTaskIncrementTick+0x148>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	f040 808f 	bne.w	800692a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800680c:	4b4d      	ldr	r3, [pc, #308]	; (8006944 <xTaskIncrementTick+0x14c>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3301      	adds	r3, #1
 8006812:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006814:	4a4b      	ldr	r2, [pc, #300]	; (8006944 <xTaskIncrementTick+0x14c>)
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d120      	bne.n	8006862 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006820:	4b49      	ldr	r3, [pc, #292]	; (8006948 <xTaskIncrementTick+0x150>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00a      	beq.n	8006840 <xTaskIncrementTick+0x48>
	__asm volatile
 800682a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682e:	f383 8811 	msr	BASEPRI, r3
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	f3bf 8f4f 	dsb	sy
 800683a:	603b      	str	r3, [r7, #0]
}
 800683c:	bf00      	nop
 800683e:	e7fe      	b.n	800683e <xTaskIncrementTick+0x46>
 8006840:	4b41      	ldr	r3, [pc, #260]	; (8006948 <xTaskIncrementTick+0x150>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	60fb      	str	r3, [r7, #12]
 8006846:	4b41      	ldr	r3, [pc, #260]	; (800694c <xTaskIncrementTick+0x154>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a3f      	ldr	r2, [pc, #252]	; (8006948 <xTaskIncrementTick+0x150>)
 800684c:	6013      	str	r3, [r2, #0]
 800684e:	4a3f      	ldr	r2, [pc, #252]	; (800694c <xTaskIncrementTick+0x154>)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6013      	str	r3, [r2, #0]
 8006854:	4b3e      	ldr	r3, [pc, #248]	; (8006950 <xTaskIncrementTick+0x158>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	3301      	adds	r3, #1
 800685a:	4a3d      	ldr	r2, [pc, #244]	; (8006950 <xTaskIncrementTick+0x158>)
 800685c:	6013      	str	r3, [r2, #0]
 800685e:	f000 fad1 	bl	8006e04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006862:	4b3c      	ldr	r3, [pc, #240]	; (8006954 <xTaskIncrementTick+0x15c>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	429a      	cmp	r2, r3
 800686a:	d349      	bcc.n	8006900 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800686c:	4b36      	ldr	r3, [pc, #216]	; (8006948 <xTaskIncrementTick+0x150>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d104      	bne.n	8006880 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006876:	4b37      	ldr	r3, [pc, #220]	; (8006954 <xTaskIncrementTick+0x15c>)
 8006878:	f04f 32ff 	mov.w	r2, #4294967295
 800687c:	601a      	str	r2, [r3, #0]
					break;
 800687e:	e03f      	b.n	8006900 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006880:	4b31      	ldr	r3, [pc, #196]	; (8006948 <xTaskIncrementTick+0x150>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	429a      	cmp	r2, r3
 8006896:	d203      	bcs.n	80068a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006898:	4a2e      	ldr	r2, [pc, #184]	; (8006954 <xTaskIncrementTick+0x15c>)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800689e:	e02f      	b.n	8006900 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	3304      	adds	r3, #4
 80068a4:	4618      	mov	r0, r3
 80068a6:	f7fe ffcd 	bl	8005844 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d004      	beq.n	80068bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	3318      	adds	r3, #24
 80068b6:	4618      	mov	r0, r3
 80068b8:	f7fe ffc4 	bl	8005844 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c0:	4b25      	ldr	r3, [pc, #148]	; (8006958 <xTaskIncrementTick+0x160>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d903      	bls.n	80068d0 <xTaskIncrementTick+0xd8>
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068cc:	4a22      	ldr	r2, [pc, #136]	; (8006958 <xTaskIncrementTick+0x160>)
 80068ce:	6013      	str	r3, [r2, #0]
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d4:	4613      	mov	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4a1f      	ldr	r2, [pc, #124]	; (800695c <xTaskIncrementTick+0x164>)
 80068de:	441a      	add	r2, r3
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	3304      	adds	r3, #4
 80068e4:	4619      	mov	r1, r3
 80068e6:	4610      	mov	r0, r2
 80068e8:	f7fe ff4f 	bl	800578a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f0:	4b1b      	ldr	r3, [pc, #108]	; (8006960 <xTaskIncrementTick+0x168>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d3b8      	bcc.n	800686c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80068fa:	2301      	movs	r3, #1
 80068fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068fe:	e7b5      	b.n	800686c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006900:	4b17      	ldr	r3, [pc, #92]	; (8006960 <xTaskIncrementTick+0x168>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006906:	4915      	ldr	r1, [pc, #84]	; (800695c <xTaskIncrementTick+0x164>)
 8006908:	4613      	mov	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	440b      	add	r3, r1
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d901      	bls.n	800691c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006918:	2301      	movs	r3, #1
 800691a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800691c:	4b11      	ldr	r3, [pc, #68]	; (8006964 <xTaskIncrementTick+0x16c>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d007      	beq.n	8006934 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006924:	2301      	movs	r3, #1
 8006926:	617b      	str	r3, [r7, #20]
 8006928:	e004      	b.n	8006934 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800692a:	4b0f      	ldr	r3, [pc, #60]	; (8006968 <xTaskIncrementTick+0x170>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	3301      	adds	r3, #1
 8006930:	4a0d      	ldr	r2, [pc, #52]	; (8006968 <xTaskIncrementTick+0x170>)
 8006932:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006934:	697b      	ldr	r3, [r7, #20]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3718      	adds	r7, #24
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	20000eb8 	.word	0x20000eb8
 8006944:	20000e94 	.word	0x20000e94
 8006948:	20000e48 	.word	0x20000e48
 800694c:	20000e4c 	.word	0x20000e4c
 8006950:	20000ea8 	.word	0x20000ea8
 8006954:	20000eb0 	.word	0x20000eb0
 8006958:	20000e98 	.word	0x20000e98
 800695c:	200009c0 	.word	0x200009c0
 8006960:	200009bc 	.word	0x200009bc
 8006964:	20000ea4 	.word	0x20000ea4
 8006968:	20000ea0 	.word	0x20000ea0

0800696c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006972:	4b28      	ldr	r3, [pc, #160]	; (8006a14 <vTaskSwitchContext+0xa8>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d003      	beq.n	8006982 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800697a:	4b27      	ldr	r3, [pc, #156]	; (8006a18 <vTaskSwitchContext+0xac>)
 800697c:	2201      	movs	r2, #1
 800697e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006980:	e041      	b.n	8006a06 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006982:	4b25      	ldr	r3, [pc, #148]	; (8006a18 <vTaskSwitchContext+0xac>)
 8006984:	2200      	movs	r2, #0
 8006986:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006988:	4b24      	ldr	r3, [pc, #144]	; (8006a1c <vTaskSwitchContext+0xb0>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	60fb      	str	r3, [r7, #12]
 800698e:	e010      	b.n	80069b2 <vTaskSwitchContext+0x46>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d10a      	bne.n	80069ac <vTaskSwitchContext+0x40>
	__asm volatile
 8006996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699a:	f383 8811 	msr	BASEPRI, r3
 800699e:	f3bf 8f6f 	isb	sy
 80069a2:	f3bf 8f4f 	dsb	sy
 80069a6:	607b      	str	r3, [r7, #4]
}
 80069a8:	bf00      	nop
 80069aa:	e7fe      	b.n	80069aa <vTaskSwitchContext+0x3e>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	3b01      	subs	r3, #1
 80069b0:	60fb      	str	r3, [r7, #12]
 80069b2:	491b      	ldr	r1, [pc, #108]	; (8006a20 <vTaskSwitchContext+0xb4>)
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	4613      	mov	r3, r2
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	440b      	add	r3, r1
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d0e4      	beq.n	8006990 <vTaskSwitchContext+0x24>
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	4613      	mov	r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	4413      	add	r3, r2
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4a13      	ldr	r2, [pc, #76]	; (8006a20 <vTaskSwitchContext+0xb4>)
 80069d2:	4413      	add	r3, r2
 80069d4:	60bb      	str	r3, [r7, #8]
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	605a      	str	r2, [r3, #4]
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	3308      	adds	r3, #8
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d104      	bne.n	80069f6 <vTaskSwitchContext+0x8a>
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	685a      	ldr	r2, [r3, #4]
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	605a      	str	r2, [r3, #4]
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	4a09      	ldr	r2, [pc, #36]	; (8006a24 <vTaskSwitchContext+0xb8>)
 80069fe:	6013      	str	r3, [r2, #0]
 8006a00:	4a06      	ldr	r2, [pc, #24]	; (8006a1c <vTaskSwitchContext+0xb0>)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6013      	str	r3, [r2, #0]
}
 8006a06:	bf00      	nop
 8006a08:	3714      	adds	r7, #20
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	20000eb8 	.word	0x20000eb8
 8006a18:	20000ea4 	.word	0x20000ea4
 8006a1c:	20000e98 	.word	0x20000e98
 8006a20:	200009c0 	.word	0x200009c0
 8006a24:	200009bc 	.word	0x200009bc

08006a28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10a      	bne.n	8006a4e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3c:	f383 8811 	msr	BASEPRI, r3
 8006a40:	f3bf 8f6f 	isb	sy
 8006a44:	f3bf 8f4f 	dsb	sy
 8006a48:	60fb      	str	r3, [r7, #12]
}
 8006a4a:	bf00      	nop
 8006a4c:	e7fe      	b.n	8006a4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a4e:	4b07      	ldr	r3, [pc, #28]	; (8006a6c <vTaskPlaceOnEventList+0x44>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	3318      	adds	r3, #24
 8006a54:	4619      	mov	r1, r3
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f7fe febb 	bl	80057d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a5c:	2101      	movs	r1, #1
 8006a5e:	6838      	ldr	r0, [r7, #0]
 8006a60:	f000 fa7c 	bl	8006f5c <prvAddCurrentTaskToDelayedList>
}
 8006a64:	bf00      	nop
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	200009bc 	.word	0x200009bc

08006a70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10a      	bne.n	8006a98 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a86:	f383 8811 	msr	BASEPRI, r3
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	617b      	str	r3, [r7, #20]
}
 8006a94:	bf00      	nop
 8006a96:	e7fe      	b.n	8006a96 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a98:	4b0a      	ldr	r3, [pc, #40]	; (8006ac4 <vTaskPlaceOnEventListRestricted+0x54>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	3318      	adds	r3, #24
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	f7fe fe72 	bl	800578a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d002      	beq.n	8006ab2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006aac:	f04f 33ff 	mov.w	r3, #4294967295
 8006ab0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006ab2:	6879      	ldr	r1, [r7, #4]
 8006ab4:	68b8      	ldr	r0, [r7, #8]
 8006ab6:	f000 fa51 	bl	8006f5c <prvAddCurrentTaskToDelayedList>
	}
 8006aba:	bf00      	nop
 8006abc:	3718      	adds	r7, #24
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	200009bc 	.word	0x200009bc

08006ac8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d10a      	bne.n	8006af4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	60fb      	str	r3, [r7, #12]
}
 8006af0:	bf00      	nop
 8006af2:	e7fe      	b.n	8006af2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	3318      	adds	r3, #24
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7fe fea3 	bl	8005844 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006afe:	4b1e      	ldr	r3, [pc, #120]	; (8006b78 <xTaskRemoveFromEventList+0xb0>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d11d      	bne.n	8006b42 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	3304      	adds	r3, #4
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7fe fe9a 	bl	8005844 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b14:	4b19      	ldr	r3, [pc, #100]	; (8006b7c <xTaskRemoveFromEventList+0xb4>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d903      	bls.n	8006b24 <xTaskRemoveFromEventList+0x5c>
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b20:	4a16      	ldr	r2, [pc, #88]	; (8006b7c <xTaskRemoveFromEventList+0xb4>)
 8006b22:	6013      	str	r3, [r2, #0]
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b28:	4613      	mov	r3, r2
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4413      	add	r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4a13      	ldr	r2, [pc, #76]	; (8006b80 <xTaskRemoveFromEventList+0xb8>)
 8006b32:	441a      	add	r2, r3
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	3304      	adds	r3, #4
 8006b38:	4619      	mov	r1, r3
 8006b3a:	4610      	mov	r0, r2
 8006b3c:	f7fe fe25 	bl	800578a <vListInsertEnd>
 8006b40:	e005      	b.n	8006b4e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	3318      	adds	r3, #24
 8006b46:	4619      	mov	r1, r3
 8006b48:	480e      	ldr	r0, [pc, #56]	; (8006b84 <xTaskRemoveFromEventList+0xbc>)
 8006b4a:	f7fe fe1e 	bl	800578a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b52:	4b0d      	ldr	r3, [pc, #52]	; (8006b88 <xTaskRemoveFromEventList+0xc0>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d905      	bls.n	8006b68 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b60:	4b0a      	ldr	r3, [pc, #40]	; (8006b8c <xTaskRemoveFromEventList+0xc4>)
 8006b62:	2201      	movs	r2, #1
 8006b64:	601a      	str	r2, [r3, #0]
 8006b66:	e001      	b.n	8006b6c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006b6c:	697b      	ldr	r3, [r7, #20]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3718      	adds	r7, #24
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	20000eb8 	.word	0x20000eb8
 8006b7c:	20000e98 	.word	0x20000e98
 8006b80:	200009c0 	.word	0x200009c0
 8006b84:	20000e50 	.word	0x20000e50
 8006b88:	200009bc 	.word	0x200009bc
 8006b8c:	20000ea4 	.word	0x20000ea4

08006b90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b98:	4b06      	ldr	r3, [pc, #24]	; (8006bb4 <vTaskInternalSetTimeOutState+0x24>)
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ba0:	4b05      	ldr	r3, [pc, #20]	; (8006bb8 <vTaskInternalSetTimeOutState+0x28>)
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	605a      	str	r2, [r3, #4]
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	20000ea8 	.word	0x20000ea8
 8006bb8:	20000e94 	.word	0x20000e94

08006bbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b088      	sub	sp, #32
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10a      	bne.n	8006be2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd0:	f383 8811 	msr	BASEPRI, r3
 8006bd4:	f3bf 8f6f 	isb	sy
 8006bd8:	f3bf 8f4f 	dsb	sy
 8006bdc:	613b      	str	r3, [r7, #16]
}
 8006bde:	bf00      	nop
 8006be0:	e7fe      	b.n	8006be0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d10a      	bne.n	8006bfe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bec:	f383 8811 	msr	BASEPRI, r3
 8006bf0:	f3bf 8f6f 	isb	sy
 8006bf4:	f3bf 8f4f 	dsb	sy
 8006bf8:	60fb      	str	r3, [r7, #12]
}
 8006bfa:	bf00      	nop
 8006bfc:	e7fe      	b.n	8006bfc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006bfe:	f000 fe79 	bl	80078f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c02:	4b1d      	ldr	r3, [pc, #116]	; (8006c78 <xTaskCheckForTimeOut+0xbc>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	69ba      	ldr	r2, [r7, #24]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c1a:	d102      	bne.n	8006c22 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	61fb      	str	r3, [r7, #28]
 8006c20:	e023      	b.n	8006c6a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	4b15      	ldr	r3, [pc, #84]	; (8006c7c <xTaskCheckForTimeOut+0xc0>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d007      	beq.n	8006c3e <xTaskCheckForTimeOut+0x82>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	69ba      	ldr	r2, [r7, #24]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d302      	bcc.n	8006c3e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	61fb      	str	r3, [r7, #28]
 8006c3c:	e015      	b.n	8006c6a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d20b      	bcs.n	8006c60 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	1ad2      	subs	r2, r2, r3
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7ff ff9b 	bl	8006b90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	61fb      	str	r3, [r7, #28]
 8006c5e:	e004      	b.n	8006c6a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	2200      	movs	r2, #0
 8006c64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006c66:	2301      	movs	r3, #1
 8006c68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c6a:	f000 fe73 	bl	8007954 <vPortExitCritical>

	return xReturn;
 8006c6e:	69fb      	ldr	r3, [r7, #28]
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3720      	adds	r7, #32
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	20000e94 	.word	0x20000e94
 8006c7c:	20000ea8 	.word	0x20000ea8

08006c80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c80:	b480      	push	{r7}
 8006c82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c84:	4b03      	ldr	r3, [pc, #12]	; (8006c94 <vTaskMissedYield+0x14>)
 8006c86:	2201      	movs	r2, #1
 8006c88:	601a      	str	r2, [r3, #0]
}
 8006c8a:	bf00      	nop
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr
 8006c94:	20000ea4 	.word	0x20000ea4

08006c98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ca0:	f000 f852 	bl	8006d48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ca4:	4b06      	ldr	r3, [pc, #24]	; (8006cc0 <prvIdleTask+0x28>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d9f9      	bls.n	8006ca0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006cac:	4b05      	ldr	r3, [pc, #20]	; (8006cc4 <prvIdleTask+0x2c>)
 8006cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006cbc:	e7f0      	b.n	8006ca0 <prvIdleTask+0x8>
 8006cbe:	bf00      	nop
 8006cc0:	200009c0 	.word	0x200009c0
 8006cc4:	e000ed04 	.word	0xe000ed04

08006cc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006cce:	2300      	movs	r3, #0
 8006cd0:	607b      	str	r3, [r7, #4]
 8006cd2:	e00c      	b.n	8006cee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	4a12      	ldr	r2, [pc, #72]	; (8006d28 <prvInitialiseTaskLists+0x60>)
 8006ce0:	4413      	add	r3, r2
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7fe fd24 	bl	8005730 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	3301      	adds	r3, #1
 8006cec:	607b      	str	r3, [r7, #4]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2b37      	cmp	r3, #55	; 0x37
 8006cf2:	d9ef      	bls.n	8006cd4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006cf4:	480d      	ldr	r0, [pc, #52]	; (8006d2c <prvInitialiseTaskLists+0x64>)
 8006cf6:	f7fe fd1b 	bl	8005730 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006cfa:	480d      	ldr	r0, [pc, #52]	; (8006d30 <prvInitialiseTaskLists+0x68>)
 8006cfc:	f7fe fd18 	bl	8005730 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d00:	480c      	ldr	r0, [pc, #48]	; (8006d34 <prvInitialiseTaskLists+0x6c>)
 8006d02:	f7fe fd15 	bl	8005730 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d06:	480c      	ldr	r0, [pc, #48]	; (8006d38 <prvInitialiseTaskLists+0x70>)
 8006d08:	f7fe fd12 	bl	8005730 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d0c:	480b      	ldr	r0, [pc, #44]	; (8006d3c <prvInitialiseTaskLists+0x74>)
 8006d0e:	f7fe fd0f 	bl	8005730 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d12:	4b0b      	ldr	r3, [pc, #44]	; (8006d40 <prvInitialiseTaskLists+0x78>)
 8006d14:	4a05      	ldr	r2, [pc, #20]	; (8006d2c <prvInitialiseTaskLists+0x64>)
 8006d16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d18:	4b0a      	ldr	r3, [pc, #40]	; (8006d44 <prvInitialiseTaskLists+0x7c>)
 8006d1a:	4a05      	ldr	r2, [pc, #20]	; (8006d30 <prvInitialiseTaskLists+0x68>)
 8006d1c:	601a      	str	r2, [r3, #0]
}
 8006d1e:	bf00      	nop
 8006d20:	3708      	adds	r7, #8
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	200009c0 	.word	0x200009c0
 8006d2c:	20000e20 	.word	0x20000e20
 8006d30:	20000e34 	.word	0x20000e34
 8006d34:	20000e50 	.word	0x20000e50
 8006d38:	20000e64 	.word	0x20000e64
 8006d3c:	20000e7c 	.word	0x20000e7c
 8006d40:	20000e48 	.word	0x20000e48
 8006d44:	20000e4c 	.word	0x20000e4c

08006d48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d4e:	e019      	b.n	8006d84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d50:	f000 fdd0 	bl	80078f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d54:	4b10      	ldr	r3, [pc, #64]	; (8006d98 <prvCheckTasksWaitingTermination+0x50>)
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	3304      	adds	r3, #4
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7fe fd6f 	bl	8005844 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d66:	4b0d      	ldr	r3, [pc, #52]	; (8006d9c <prvCheckTasksWaitingTermination+0x54>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	4a0b      	ldr	r2, [pc, #44]	; (8006d9c <prvCheckTasksWaitingTermination+0x54>)
 8006d6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d70:	4b0b      	ldr	r3, [pc, #44]	; (8006da0 <prvCheckTasksWaitingTermination+0x58>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	3b01      	subs	r3, #1
 8006d76:	4a0a      	ldr	r2, [pc, #40]	; (8006da0 <prvCheckTasksWaitingTermination+0x58>)
 8006d78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d7a:	f000 fdeb 	bl	8007954 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f810 	bl	8006da4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d84:	4b06      	ldr	r3, [pc, #24]	; (8006da0 <prvCheckTasksWaitingTermination+0x58>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1e1      	bne.n	8006d50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d8c:	bf00      	nop
 8006d8e:	bf00      	nop
 8006d90:	3708      	adds	r7, #8
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	20000e64 	.word	0x20000e64
 8006d9c:	20000e90 	.word	0x20000e90
 8006da0:	20000e78 	.word	0x20000e78

08006da4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d108      	bne.n	8006dc8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 ff88 	bl	8007cd0 <vPortFree>
				vPortFree( pxTCB );
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 ff85 	bl	8007cd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006dc6:	e018      	b.n	8006dfa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d103      	bne.n	8006dda <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 ff7c 	bl	8007cd0 <vPortFree>
	}
 8006dd8:	e00f      	b.n	8006dfa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	d00a      	beq.n	8006dfa <prvDeleteTCB+0x56>
	__asm volatile
 8006de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de8:	f383 8811 	msr	BASEPRI, r3
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	60fb      	str	r3, [r7, #12]
}
 8006df6:	bf00      	nop
 8006df8:	e7fe      	b.n	8006df8 <prvDeleteTCB+0x54>
	}
 8006dfa:	bf00      	nop
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
	...

08006e04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e0a:	4b0c      	ldr	r3, [pc, #48]	; (8006e3c <prvResetNextTaskUnblockTime+0x38>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d104      	bne.n	8006e1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006e14:	4b0a      	ldr	r3, [pc, #40]	; (8006e40 <prvResetNextTaskUnblockTime+0x3c>)
 8006e16:	f04f 32ff 	mov.w	r2, #4294967295
 8006e1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006e1c:	e008      	b.n	8006e30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e1e:	4b07      	ldr	r3, [pc, #28]	; (8006e3c <prvResetNextTaskUnblockTime+0x38>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	4a04      	ldr	r2, [pc, #16]	; (8006e40 <prvResetNextTaskUnblockTime+0x3c>)
 8006e2e:	6013      	str	r3, [r2, #0]
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr
 8006e3c:	20000e48 	.word	0x20000e48
 8006e40:	20000eb0 	.word	0x20000eb0

08006e44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006e4a:	4b0b      	ldr	r3, [pc, #44]	; (8006e78 <xTaskGetSchedulerState+0x34>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d102      	bne.n	8006e58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e52:	2301      	movs	r3, #1
 8006e54:	607b      	str	r3, [r7, #4]
 8006e56:	e008      	b.n	8006e6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e58:	4b08      	ldr	r3, [pc, #32]	; (8006e7c <xTaskGetSchedulerState+0x38>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d102      	bne.n	8006e66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006e60:	2302      	movs	r3, #2
 8006e62:	607b      	str	r3, [r7, #4]
 8006e64:	e001      	b.n	8006e6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e66:	2300      	movs	r3, #0
 8006e68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e6a:	687b      	ldr	r3, [r7, #4]
	}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr
 8006e78:	20000e9c 	.word	0x20000e9c
 8006e7c:	20000eb8 	.word	0x20000eb8

08006e80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d056      	beq.n	8006f44 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e96:	4b2e      	ldr	r3, [pc, #184]	; (8006f50 <xTaskPriorityDisinherit+0xd0>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d00a      	beq.n	8006eb6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	60fb      	str	r3, [r7, #12]
}
 8006eb2:	bf00      	nop
 8006eb4:	e7fe      	b.n	8006eb4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10a      	bne.n	8006ed4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	60bb      	str	r3, [r7, #8]
}
 8006ed0:	bf00      	nop
 8006ed2:	e7fe      	b.n	8006ed2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ed8:	1e5a      	subs	r2, r3, #1
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d02c      	beq.n	8006f44 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d128      	bne.n	8006f44 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	3304      	adds	r3, #4
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7fe fca4 	bl	8005844 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f14:	4b0f      	ldr	r3, [pc, #60]	; (8006f54 <xTaskPriorityDisinherit+0xd4>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d903      	bls.n	8006f24 <xTaskPriorityDisinherit+0xa4>
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f20:	4a0c      	ldr	r2, [pc, #48]	; (8006f54 <xTaskPriorityDisinherit+0xd4>)
 8006f22:	6013      	str	r3, [r2, #0]
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f28:	4613      	mov	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4413      	add	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4a09      	ldr	r2, [pc, #36]	; (8006f58 <xTaskPriorityDisinherit+0xd8>)
 8006f32:	441a      	add	r2, r3
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	3304      	adds	r3, #4
 8006f38:	4619      	mov	r1, r3
 8006f3a:	4610      	mov	r0, r2
 8006f3c:	f7fe fc25 	bl	800578a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f40:	2301      	movs	r3, #1
 8006f42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f44:	697b      	ldr	r3, [r7, #20]
	}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3718      	adds	r7, #24
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	200009bc 	.word	0x200009bc
 8006f54:	20000e98 	.word	0x20000e98
 8006f58:	200009c0 	.word	0x200009c0

08006f5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f66:	4b21      	ldr	r3, [pc, #132]	; (8006fec <prvAddCurrentTaskToDelayedList+0x90>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f6c:	4b20      	ldr	r3, [pc, #128]	; (8006ff0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	3304      	adds	r3, #4
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fe fc66 	bl	8005844 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7e:	d10a      	bne.n	8006f96 <prvAddCurrentTaskToDelayedList+0x3a>
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d007      	beq.n	8006f96 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f86:	4b1a      	ldr	r3, [pc, #104]	; (8006ff0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	3304      	adds	r3, #4
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	4819      	ldr	r0, [pc, #100]	; (8006ff4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006f90:	f7fe fbfb 	bl	800578a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f94:	e026      	b.n	8006fe4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f9e:	4b14      	ldr	r3, [pc, #80]	; (8006ff0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68ba      	ldr	r2, [r7, #8]
 8006fa4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d209      	bcs.n	8006fc2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fae:	4b12      	ldr	r3, [pc, #72]	; (8006ff8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	4b0f      	ldr	r3, [pc, #60]	; (8006ff0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	3304      	adds	r3, #4
 8006fb8:	4619      	mov	r1, r3
 8006fba:	4610      	mov	r0, r2
 8006fbc:	f7fe fc09 	bl	80057d2 <vListInsert>
}
 8006fc0:	e010      	b.n	8006fe4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fc2:	4b0e      	ldr	r3, [pc, #56]	; (8006ffc <prvAddCurrentTaskToDelayedList+0xa0>)
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	4b0a      	ldr	r3, [pc, #40]	; (8006ff0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	3304      	adds	r3, #4
 8006fcc:	4619      	mov	r1, r3
 8006fce:	4610      	mov	r0, r2
 8006fd0:	f7fe fbff 	bl	80057d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006fd4:	4b0a      	ldr	r3, [pc, #40]	; (8007000 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d202      	bcs.n	8006fe4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006fde:	4a08      	ldr	r2, [pc, #32]	; (8007000 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	6013      	str	r3, [r2, #0]
}
 8006fe4:	bf00      	nop
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	20000e94 	.word	0x20000e94
 8006ff0:	200009bc 	.word	0x200009bc
 8006ff4:	20000e7c 	.word	0x20000e7c
 8006ff8:	20000e4c 	.word	0x20000e4c
 8006ffc:	20000e48 	.word	0x20000e48
 8007000:	20000eb0 	.word	0x20000eb0

08007004 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b08a      	sub	sp, #40	; 0x28
 8007008:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800700a:	2300      	movs	r3, #0
 800700c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800700e:	f000 fb07 	bl	8007620 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007012:	4b1c      	ldr	r3, [pc, #112]	; (8007084 <xTimerCreateTimerTask+0x80>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d021      	beq.n	800705e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800701a:	2300      	movs	r3, #0
 800701c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800701e:	2300      	movs	r3, #0
 8007020:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007022:	1d3a      	adds	r2, r7, #4
 8007024:	f107 0108 	add.w	r1, r7, #8
 8007028:	f107 030c 	add.w	r3, r7, #12
 800702c:	4618      	mov	r0, r3
 800702e:	f7fe fb65 	bl	80056fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007032:	6879      	ldr	r1, [r7, #4]
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	9202      	str	r2, [sp, #8]
 800703a:	9301      	str	r3, [sp, #4]
 800703c:	2302      	movs	r3, #2
 800703e:	9300      	str	r3, [sp, #0]
 8007040:	2300      	movs	r3, #0
 8007042:	460a      	mov	r2, r1
 8007044:	4910      	ldr	r1, [pc, #64]	; (8007088 <xTimerCreateTimerTask+0x84>)
 8007046:	4811      	ldr	r0, [pc, #68]	; (800708c <xTimerCreateTimerTask+0x88>)
 8007048:	f7ff f912 	bl	8006270 <xTaskCreateStatic>
 800704c:	4603      	mov	r3, r0
 800704e:	4a10      	ldr	r2, [pc, #64]	; (8007090 <xTimerCreateTimerTask+0x8c>)
 8007050:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007052:	4b0f      	ldr	r3, [pc, #60]	; (8007090 <xTimerCreateTimerTask+0x8c>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800705a:	2301      	movs	r3, #1
 800705c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d10a      	bne.n	800707a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007068:	f383 8811 	msr	BASEPRI, r3
 800706c:	f3bf 8f6f 	isb	sy
 8007070:	f3bf 8f4f 	dsb	sy
 8007074:	613b      	str	r3, [r7, #16]
}
 8007076:	bf00      	nop
 8007078:	e7fe      	b.n	8007078 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800707a:	697b      	ldr	r3, [r7, #20]
}
 800707c:	4618      	mov	r0, r3
 800707e:	3718      	adds	r7, #24
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	20000eec 	.word	0x20000eec
 8007088:	08008ef4 	.word	0x08008ef4
 800708c:	080071c9 	.word	0x080071c9
 8007090:	20000ef0 	.word	0x20000ef0

08007094 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b08a      	sub	sp, #40	; 0x28
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]
 80070a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80070a2:	2300      	movs	r3, #0
 80070a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10a      	bne.n	80070c2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80070ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b0:	f383 8811 	msr	BASEPRI, r3
 80070b4:	f3bf 8f6f 	isb	sy
 80070b8:	f3bf 8f4f 	dsb	sy
 80070bc:	623b      	str	r3, [r7, #32]
}
 80070be:	bf00      	nop
 80070c0:	e7fe      	b.n	80070c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80070c2:	4b1a      	ldr	r3, [pc, #104]	; (800712c <xTimerGenericCommand+0x98>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d02a      	beq.n	8007120 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	2b05      	cmp	r3, #5
 80070da:	dc18      	bgt.n	800710e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80070dc:	f7ff feb2 	bl	8006e44 <xTaskGetSchedulerState>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	d109      	bne.n	80070fa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80070e6:	4b11      	ldr	r3, [pc, #68]	; (800712c <xTimerGenericCommand+0x98>)
 80070e8:	6818      	ldr	r0, [r3, #0]
 80070ea:	f107 0110 	add.w	r1, r7, #16
 80070ee:	2300      	movs	r3, #0
 80070f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070f2:	f7fe fcd5 	bl	8005aa0 <xQueueGenericSend>
 80070f6:	6278      	str	r0, [r7, #36]	; 0x24
 80070f8:	e012      	b.n	8007120 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80070fa:	4b0c      	ldr	r3, [pc, #48]	; (800712c <xTimerGenericCommand+0x98>)
 80070fc:	6818      	ldr	r0, [r3, #0]
 80070fe:	f107 0110 	add.w	r1, r7, #16
 8007102:	2300      	movs	r3, #0
 8007104:	2200      	movs	r2, #0
 8007106:	f7fe fccb 	bl	8005aa0 <xQueueGenericSend>
 800710a:	6278      	str	r0, [r7, #36]	; 0x24
 800710c:	e008      	b.n	8007120 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800710e:	4b07      	ldr	r3, [pc, #28]	; (800712c <xTimerGenericCommand+0x98>)
 8007110:	6818      	ldr	r0, [r3, #0]
 8007112:	f107 0110 	add.w	r1, r7, #16
 8007116:	2300      	movs	r3, #0
 8007118:	683a      	ldr	r2, [r7, #0]
 800711a:	f7fe fdbf 	bl	8005c9c <xQueueGenericSendFromISR>
 800711e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007122:	4618      	mov	r0, r3
 8007124:	3728      	adds	r7, #40	; 0x28
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	20000eec 	.word	0x20000eec

08007130 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b088      	sub	sp, #32
 8007134:	af02      	add	r7, sp, #8
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800713a:	4b22      	ldr	r3, [pc, #136]	; (80071c4 <prvProcessExpiredTimer+0x94>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	3304      	adds	r3, #4
 8007148:	4618      	mov	r0, r3
 800714a:	f7fe fb7b 	bl	8005844 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007154:	f003 0304 	and.w	r3, r3, #4
 8007158:	2b00      	cmp	r3, #0
 800715a:	d022      	beq.n	80071a2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	699a      	ldr	r2, [r3, #24]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	18d1      	adds	r1, r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	6978      	ldr	r0, [r7, #20]
 800716a:	f000 f8d1 	bl	8007310 <prvInsertTimerInActiveList>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d01f      	beq.n	80071b4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007174:	2300      	movs	r3, #0
 8007176:	9300      	str	r3, [sp, #0]
 8007178:	2300      	movs	r3, #0
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	2100      	movs	r1, #0
 800717e:	6978      	ldr	r0, [r7, #20]
 8007180:	f7ff ff88 	bl	8007094 <xTimerGenericCommand>
 8007184:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d113      	bne.n	80071b4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800718c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007190:	f383 8811 	msr	BASEPRI, r3
 8007194:	f3bf 8f6f 	isb	sy
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	60fb      	str	r3, [r7, #12]
}
 800719e:	bf00      	nop
 80071a0:	e7fe      	b.n	80071a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071a8:	f023 0301 	bic.w	r3, r3, #1
 80071ac:	b2da      	uxtb	r2, r3
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	6a1b      	ldr	r3, [r3, #32]
 80071b8:	6978      	ldr	r0, [r7, #20]
 80071ba:	4798      	blx	r3
}
 80071bc:	bf00      	nop
 80071be:	3718      	adds	r7, #24
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	20000ee4 	.word	0x20000ee4

080071c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071d0:	f107 0308 	add.w	r3, r7, #8
 80071d4:	4618      	mov	r0, r3
 80071d6:	f000 f857 	bl	8007288 <prvGetNextExpireTime>
 80071da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	4619      	mov	r1, r3
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f000 f803 	bl	80071ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80071e6:	f000 f8d5 	bl	8007394 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071ea:	e7f1      	b.n	80071d0 <prvTimerTask+0x8>

080071ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80071f6:	f7ff fa43 	bl	8006680 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80071fa:	f107 0308 	add.w	r3, r7, #8
 80071fe:	4618      	mov	r0, r3
 8007200:	f000 f866 	bl	80072d0 <prvSampleTimeNow>
 8007204:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d130      	bne.n	800726e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d10a      	bne.n	8007228 <prvProcessTimerOrBlockTask+0x3c>
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	429a      	cmp	r2, r3
 8007218:	d806      	bhi.n	8007228 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800721a:	f7ff fa3f 	bl	800669c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800721e:	68f9      	ldr	r1, [r7, #12]
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f7ff ff85 	bl	8007130 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007226:	e024      	b.n	8007272 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d008      	beq.n	8007240 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800722e:	4b13      	ldr	r3, [pc, #76]	; (800727c <prvProcessTimerOrBlockTask+0x90>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d101      	bne.n	800723c <prvProcessTimerOrBlockTask+0x50>
 8007238:	2301      	movs	r3, #1
 800723a:	e000      	b.n	800723e <prvProcessTimerOrBlockTask+0x52>
 800723c:	2300      	movs	r3, #0
 800723e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007240:	4b0f      	ldr	r3, [pc, #60]	; (8007280 <prvProcessTimerOrBlockTask+0x94>)
 8007242:	6818      	ldr	r0, [r3, #0]
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	683a      	ldr	r2, [r7, #0]
 800724c:	4619      	mov	r1, r3
 800724e:	f7fe ffdb 	bl	8006208 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007252:	f7ff fa23 	bl	800669c <xTaskResumeAll>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d10a      	bne.n	8007272 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800725c:	4b09      	ldr	r3, [pc, #36]	; (8007284 <prvProcessTimerOrBlockTask+0x98>)
 800725e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007262:	601a      	str	r2, [r3, #0]
 8007264:	f3bf 8f4f 	dsb	sy
 8007268:	f3bf 8f6f 	isb	sy
}
 800726c:	e001      	b.n	8007272 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800726e:	f7ff fa15 	bl	800669c <xTaskResumeAll>
}
 8007272:	bf00      	nop
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	20000ee8 	.word	0x20000ee8
 8007280:	20000eec 	.word	0x20000eec
 8007284:	e000ed04 	.word	0xe000ed04

08007288 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007290:	4b0e      	ldr	r3, [pc, #56]	; (80072cc <prvGetNextExpireTime+0x44>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d101      	bne.n	800729e <prvGetNextExpireTime+0x16>
 800729a:	2201      	movs	r2, #1
 800729c:	e000      	b.n	80072a0 <prvGetNextExpireTime+0x18>
 800729e:	2200      	movs	r2, #0
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d105      	bne.n	80072b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072ac:	4b07      	ldr	r3, [pc, #28]	; (80072cc <prvGetNextExpireTime+0x44>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	60fb      	str	r3, [r7, #12]
 80072b6:	e001      	b.n	80072bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80072bc:	68fb      	ldr	r3, [r7, #12]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	20000ee4 	.word	0x20000ee4

080072d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80072d8:	f7ff fa7e 	bl	80067d8 <xTaskGetTickCount>
 80072dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80072de:	4b0b      	ldr	r3, [pc, #44]	; (800730c <prvSampleTimeNow+0x3c>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d205      	bcs.n	80072f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80072e8:	f000 f936 	bl	8007558 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	601a      	str	r2, [r3, #0]
 80072f2:	e002      	b.n	80072fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80072fa:	4a04      	ldr	r2, [pc, #16]	; (800730c <prvSampleTimeNow+0x3c>)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007300:	68fb      	ldr	r3, [r7, #12]
}
 8007302:	4618      	mov	r0, r3
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	20000ef4 	.word	0x20000ef4

08007310 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
 800731c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800731e:	2300      	movs	r3, #0
 8007320:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	68ba      	ldr	r2, [r7, #8]
 8007326:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800732e:	68ba      	ldr	r2, [r7, #8]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	429a      	cmp	r2, r3
 8007334:	d812      	bhi.n	800735c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	1ad2      	subs	r2, r2, r3
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	429a      	cmp	r2, r3
 8007342:	d302      	bcc.n	800734a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007344:	2301      	movs	r3, #1
 8007346:	617b      	str	r3, [r7, #20]
 8007348:	e01b      	b.n	8007382 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800734a:	4b10      	ldr	r3, [pc, #64]	; (800738c <prvInsertTimerInActiveList+0x7c>)
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	3304      	adds	r3, #4
 8007352:	4619      	mov	r1, r3
 8007354:	4610      	mov	r0, r2
 8007356:	f7fe fa3c 	bl	80057d2 <vListInsert>
 800735a:	e012      	b.n	8007382 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	429a      	cmp	r2, r3
 8007362:	d206      	bcs.n	8007372 <prvInsertTimerInActiveList+0x62>
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	429a      	cmp	r2, r3
 800736a:	d302      	bcc.n	8007372 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800736c:	2301      	movs	r3, #1
 800736e:	617b      	str	r3, [r7, #20]
 8007370:	e007      	b.n	8007382 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007372:	4b07      	ldr	r3, [pc, #28]	; (8007390 <prvInsertTimerInActiveList+0x80>)
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	3304      	adds	r3, #4
 800737a:	4619      	mov	r1, r3
 800737c:	4610      	mov	r0, r2
 800737e:	f7fe fa28 	bl	80057d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007382:	697b      	ldr	r3, [r7, #20]
}
 8007384:	4618      	mov	r0, r3
 8007386:	3718      	adds	r7, #24
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	20000ee8 	.word	0x20000ee8
 8007390:	20000ee4 	.word	0x20000ee4

08007394 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b08e      	sub	sp, #56	; 0x38
 8007398:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800739a:	e0ca      	b.n	8007532 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	da18      	bge.n	80073d4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80073a2:	1d3b      	adds	r3, r7, #4
 80073a4:	3304      	adds	r3, #4
 80073a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80073a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10a      	bne.n	80073c4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80073ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b2:	f383 8811 	msr	BASEPRI, r3
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	61fb      	str	r3, [r7, #28]
}
 80073c0:	bf00      	nop
 80073c2:	e7fe      	b.n	80073c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80073c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073ca:	6850      	ldr	r0, [r2, #4]
 80073cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073ce:	6892      	ldr	r2, [r2, #8]
 80073d0:	4611      	mov	r1, r2
 80073d2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f2c0 80aa 	blt.w	8007530 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80073e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e2:	695b      	ldr	r3, [r3, #20]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d004      	beq.n	80073f2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ea:	3304      	adds	r3, #4
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7fe fa29 	bl	8005844 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80073f2:	463b      	mov	r3, r7
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7ff ff6b 	bl	80072d0 <prvSampleTimeNow>
 80073fa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b09      	cmp	r3, #9
 8007400:	f200 8097 	bhi.w	8007532 <prvProcessReceivedCommands+0x19e>
 8007404:	a201      	add	r2, pc, #4	; (adr r2, 800740c <prvProcessReceivedCommands+0x78>)
 8007406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740a:	bf00      	nop
 800740c:	08007435 	.word	0x08007435
 8007410:	08007435 	.word	0x08007435
 8007414:	08007435 	.word	0x08007435
 8007418:	080074a9 	.word	0x080074a9
 800741c:	080074bd 	.word	0x080074bd
 8007420:	08007507 	.word	0x08007507
 8007424:	08007435 	.word	0x08007435
 8007428:	08007435 	.word	0x08007435
 800742c:	080074a9 	.word	0x080074a9
 8007430:	080074bd 	.word	0x080074bd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007436:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800743a:	f043 0301 	orr.w	r3, r3, #1
 800743e:	b2da      	uxtb	r2, r3
 8007440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007442:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744a:	699b      	ldr	r3, [r3, #24]
 800744c:	18d1      	adds	r1, r2, r3
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007454:	f7ff ff5c 	bl	8007310 <prvInsertTimerInActiveList>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d069      	beq.n	8007532 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800745e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007460:	6a1b      	ldr	r3, [r3, #32]
 8007462:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007464:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007468:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800746c:	f003 0304 	and.w	r3, r3, #4
 8007470:	2b00      	cmp	r3, #0
 8007472:	d05e      	beq.n	8007532 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	441a      	add	r2, r3
 800747c:	2300      	movs	r3, #0
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	2300      	movs	r3, #0
 8007482:	2100      	movs	r1, #0
 8007484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007486:	f7ff fe05 	bl	8007094 <xTimerGenericCommand>
 800748a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800748c:	6a3b      	ldr	r3, [r7, #32]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d14f      	bne.n	8007532 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007496:	f383 8811 	msr	BASEPRI, r3
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	61bb      	str	r3, [r7, #24]
}
 80074a4:	bf00      	nop
 80074a6:	e7fe      	b.n	80074a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074ae:	f023 0301 	bic.w	r3, r3, #1
 80074b2:	b2da      	uxtb	r2, r3
 80074b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80074ba:	e03a      	b.n	8007532 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074c2:	f043 0301 	orr.w	r3, r3, #1
 80074c6:	b2da      	uxtb	r2, r3
 80074c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80074ce:	68ba      	ldr	r2, [r7, #8]
 80074d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80074d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d6:	699b      	ldr	r3, [r3, #24]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d10a      	bne.n	80074f2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80074dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e0:	f383 8811 	msr	BASEPRI, r3
 80074e4:	f3bf 8f6f 	isb	sy
 80074e8:	f3bf 8f4f 	dsb	sy
 80074ec:	617b      	str	r3, [r7, #20]
}
 80074ee:	bf00      	nop
 80074f0:	e7fe      	b.n	80074f0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80074f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f4:	699a      	ldr	r2, [r3, #24]
 80074f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f8:	18d1      	adds	r1, r2, r3
 80074fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007500:	f7ff ff06 	bl	8007310 <prvInsertTimerInActiveList>
					break;
 8007504:	e015      	b.n	8007532 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007508:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800750c:	f003 0302 	and.w	r3, r3, #2
 8007510:	2b00      	cmp	r3, #0
 8007512:	d103      	bne.n	800751c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007514:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007516:	f000 fbdb 	bl	8007cd0 <vPortFree>
 800751a:	e00a      	b.n	8007532 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800751c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007522:	f023 0301 	bic.w	r3, r3, #1
 8007526:	b2da      	uxtb	r2, r3
 8007528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800752e:	e000      	b.n	8007532 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007530:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007532:	4b08      	ldr	r3, [pc, #32]	; (8007554 <prvProcessReceivedCommands+0x1c0>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	1d39      	adds	r1, r7, #4
 8007538:	2200      	movs	r2, #0
 800753a:	4618      	mov	r0, r3
 800753c:	f7fe fc4a 	bl	8005dd4 <xQueueReceive>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	f47f af2a 	bne.w	800739c <prvProcessReceivedCommands+0x8>
	}
}
 8007548:	bf00      	nop
 800754a:	bf00      	nop
 800754c:	3730      	adds	r7, #48	; 0x30
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	20000eec 	.word	0x20000eec

08007558 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b088      	sub	sp, #32
 800755c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800755e:	e048      	b.n	80075f2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007560:	4b2d      	ldr	r3, [pc, #180]	; (8007618 <prvSwitchTimerLists+0xc0>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800756a:	4b2b      	ldr	r3, [pc, #172]	; (8007618 <prvSwitchTimerLists+0xc0>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	3304      	adds	r3, #4
 8007578:	4618      	mov	r0, r3
 800757a:	f7fe f963 	bl	8005844 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6a1b      	ldr	r3, [r3, #32]
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800758c:	f003 0304 	and.w	r3, r3, #4
 8007590:	2b00      	cmp	r3, #0
 8007592:	d02e      	beq.n	80075f2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	699b      	ldr	r3, [r3, #24]
 8007598:	693a      	ldr	r2, [r7, #16]
 800759a:	4413      	add	r3, r2
 800759c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800759e:	68ba      	ldr	r2, [r7, #8]
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d90e      	bls.n	80075c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	68ba      	ldr	r2, [r7, #8]
 80075aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80075b2:	4b19      	ldr	r3, [pc, #100]	; (8007618 <prvSwitchTimerLists+0xc0>)
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	3304      	adds	r3, #4
 80075ba:	4619      	mov	r1, r3
 80075bc:	4610      	mov	r0, r2
 80075be:	f7fe f908 	bl	80057d2 <vListInsert>
 80075c2:	e016      	b.n	80075f2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075c4:	2300      	movs	r3, #0
 80075c6:	9300      	str	r3, [sp, #0]
 80075c8:	2300      	movs	r3, #0
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	2100      	movs	r1, #0
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f7ff fd60 	bl	8007094 <xTimerGenericCommand>
 80075d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10a      	bne.n	80075f2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80075dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e0:	f383 8811 	msr	BASEPRI, r3
 80075e4:	f3bf 8f6f 	isb	sy
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	603b      	str	r3, [r7, #0]
}
 80075ee:	bf00      	nop
 80075f0:	e7fe      	b.n	80075f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075f2:	4b09      	ldr	r3, [pc, #36]	; (8007618 <prvSwitchTimerLists+0xc0>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1b1      	bne.n	8007560 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80075fc:	4b06      	ldr	r3, [pc, #24]	; (8007618 <prvSwitchTimerLists+0xc0>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007602:	4b06      	ldr	r3, [pc, #24]	; (800761c <prvSwitchTimerLists+0xc4>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a04      	ldr	r2, [pc, #16]	; (8007618 <prvSwitchTimerLists+0xc0>)
 8007608:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800760a:	4a04      	ldr	r2, [pc, #16]	; (800761c <prvSwitchTimerLists+0xc4>)
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	6013      	str	r3, [r2, #0]
}
 8007610:	bf00      	nop
 8007612:	3718      	adds	r7, #24
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	20000ee4 	.word	0x20000ee4
 800761c:	20000ee8 	.word	0x20000ee8

08007620 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007626:	f000 f965 	bl	80078f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800762a:	4b15      	ldr	r3, [pc, #84]	; (8007680 <prvCheckForValidListAndQueue+0x60>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d120      	bne.n	8007674 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007632:	4814      	ldr	r0, [pc, #80]	; (8007684 <prvCheckForValidListAndQueue+0x64>)
 8007634:	f7fe f87c 	bl	8005730 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007638:	4813      	ldr	r0, [pc, #76]	; (8007688 <prvCheckForValidListAndQueue+0x68>)
 800763a:	f7fe f879 	bl	8005730 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800763e:	4b13      	ldr	r3, [pc, #76]	; (800768c <prvCheckForValidListAndQueue+0x6c>)
 8007640:	4a10      	ldr	r2, [pc, #64]	; (8007684 <prvCheckForValidListAndQueue+0x64>)
 8007642:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007644:	4b12      	ldr	r3, [pc, #72]	; (8007690 <prvCheckForValidListAndQueue+0x70>)
 8007646:	4a10      	ldr	r2, [pc, #64]	; (8007688 <prvCheckForValidListAndQueue+0x68>)
 8007648:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800764a:	2300      	movs	r3, #0
 800764c:	9300      	str	r3, [sp, #0]
 800764e:	4b11      	ldr	r3, [pc, #68]	; (8007694 <prvCheckForValidListAndQueue+0x74>)
 8007650:	4a11      	ldr	r2, [pc, #68]	; (8007698 <prvCheckForValidListAndQueue+0x78>)
 8007652:	2110      	movs	r1, #16
 8007654:	200a      	movs	r0, #10
 8007656:	f7fe f987 	bl	8005968 <xQueueGenericCreateStatic>
 800765a:	4603      	mov	r3, r0
 800765c:	4a08      	ldr	r2, [pc, #32]	; (8007680 <prvCheckForValidListAndQueue+0x60>)
 800765e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007660:	4b07      	ldr	r3, [pc, #28]	; (8007680 <prvCheckForValidListAndQueue+0x60>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d005      	beq.n	8007674 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007668:	4b05      	ldr	r3, [pc, #20]	; (8007680 <prvCheckForValidListAndQueue+0x60>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	490b      	ldr	r1, [pc, #44]	; (800769c <prvCheckForValidListAndQueue+0x7c>)
 800766e:	4618      	mov	r0, r3
 8007670:	f7fe fda0 	bl	80061b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007674:	f000 f96e 	bl	8007954 <vPortExitCritical>
}
 8007678:	bf00      	nop
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	20000eec 	.word	0x20000eec
 8007684:	20000ebc 	.word	0x20000ebc
 8007688:	20000ed0 	.word	0x20000ed0
 800768c:	20000ee4 	.word	0x20000ee4
 8007690:	20000ee8 	.word	0x20000ee8
 8007694:	20000f98 	.word	0x20000f98
 8007698:	20000ef8 	.word	0x20000ef8
 800769c:	08008efc 	.word	0x08008efc

080076a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80076a0:	b480      	push	{r7}
 80076a2:	b085      	sub	sp, #20
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	3b04      	subs	r3, #4
 80076b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80076b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	3b04      	subs	r3, #4
 80076be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	f023 0201 	bic.w	r2, r3, #1
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	3b04      	subs	r3, #4
 80076ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80076d0:	4a0c      	ldr	r2, [pc, #48]	; (8007704 <pxPortInitialiseStack+0x64>)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	3b14      	subs	r3, #20
 80076da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	3b04      	subs	r3, #4
 80076e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f06f 0202 	mvn.w	r2, #2
 80076ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	3b20      	subs	r3, #32
 80076f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80076f6:	68fb      	ldr	r3, [r7, #12]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3714      	adds	r7, #20
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr
 8007704:	08007709 	.word	0x08007709

08007708 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800770e:	2300      	movs	r3, #0
 8007710:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007712:	4b12      	ldr	r3, [pc, #72]	; (800775c <prvTaskExitError+0x54>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800771a:	d00a      	beq.n	8007732 <prvTaskExitError+0x2a>
	__asm volatile
 800771c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007720:	f383 8811 	msr	BASEPRI, r3
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	60fb      	str	r3, [r7, #12]
}
 800772e:	bf00      	nop
 8007730:	e7fe      	b.n	8007730 <prvTaskExitError+0x28>
	__asm volatile
 8007732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007736:	f383 8811 	msr	BASEPRI, r3
 800773a:	f3bf 8f6f 	isb	sy
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	60bb      	str	r3, [r7, #8]
}
 8007744:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007746:	bf00      	nop
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d0fc      	beq.n	8007748 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800774e:	bf00      	nop
 8007750:	bf00      	nop
 8007752:	3714      	adds	r7, #20
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr
 800775c:	2000000c 	.word	0x2000000c

08007760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007760:	4b07      	ldr	r3, [pc, #28]	; (8007780 <pxCurrentTCBConst2>)
 8007762:	6819      	ldr	r1, [r3, #0]
 8007764:	6808      	ldr	r0, [r1, #0]
 8007766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800776a:	f380 8809 	msr	PSP, r0
 800776e:	f3bf 8f6f 	isb	sy
 8007772:	f04f 0000 	mov.w	r0, #0
 8007776:	f380 8811 	msr	BASEPRI, r0
 800777a:	4770      	bx	lr
 800777c:	f3af 8000 	nop.w

08007780 <pxCurrentTCBConst2>:
 8007780:	200009bc 	.word	0x200009bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007784:	bf00      	nop
 8007786:	bf00      	nop

08007788 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007788:	4808      	ldr	r0, [pc, #32]	; (80077ac <prvPortStartFirstTask+0x24>)
 800778a:	6800      	ldr	r0, [r0, #0]
 800778c:	6800      	ldr	r0, [r0, #0]
 800778e:	f380 8808 	msr	MSP, r0
 8007792:	f04f 0000 	mov.w	r0, #0
 8007796:	f380 8814 	msr	CONTROL, r0
 800779a:	b662      	cpsie	i
 800779c:	b661      	cpsie	f
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	f3bf 8f6f 	isb	sy
 80077a6:	df00      	svc	0
 80077a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80077aa:	bf00      	nop
 80077ac:	e000ed08 	.word	0xe000ed08

080077b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80077b6:	4b46      	ldr	r3, [pc, #280]	; (80078d0 <xPortStartScheduler+0x120>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a46      	ldr	r2, [pc, #280]	; (80078d4 <xPortStartScheduler+0x124>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d10a      	bne.n	80077d6 <xPortStartScheduler+0x26>
	__asm volatile
 80077c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c4:	f383 8811 	msr	BASEPRI, r3
 80077c8:	f3bf 8f6f 	isb	sy
 80077cc:	f3bf 8f4f 	dsb	sy
 80077d0:	613b      	str	r3, [r7, #16]
}
 80077d2:	bf00      	nop
 80077d4:	e7fe      	b.n	80077d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80077d6:	4b3e      	ldr	r3, [pc, #248]	; (80078d0 <xPortStartScheduler+0x120>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a3f      	ldr	r2, [pc, #252]	; (80078d8 <xPortStartScheduler+0x128>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d10a      	bne.n	80077f6 <xPortStartScheduler+0x46>
	__asm volatile
 80077e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e4:	f383 8811 	msr	BASEPRI, r3
 80077e8:	f3bf 8f6f 	isb	sy
 80077ec:	f3bf 8f4f 	dsb	sy
 80077f0:	60fb      	str	r3, [r7, #12]
}
 80077f2:	bf00      	nop
 80077f4:	e7fe      	b.n	80077f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80077f6:	4b39      	ldr	r3, [pc, #228]	; (80078dc <xPortStartScheduler+0x12c>)
 80077f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	22ff      	movs	r2, #255	; 0xff
 8007806:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	b2db      	uxtb	r3, r3
 800780e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007810:	78fb      	ldrb	r3, [r7, #3]
 8007812:	b2db      	uxtb	r3, r3
 8007814:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007818:	b2da      	uxtb	r2, r3
 800781a:	4b31      	ldr	r3, [pc, #196]	; (80078e0 <xPortStartScheduler+0x130>)
 800781c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800781e:	4b31      	ldr	r3, [pc, #196]	; (80078e4 <xPortStartScheduler+0x134>)
 8007820:	2207      	movs	r2, #7
 8007822:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007824:	e009      	b.n	800783a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007826:	4b2f      	ldr	r3, [pc, #188]	; (80078e4 <xPortStartScheduler+0x134>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	3b01      	subs	r3, #1
 800782c:	4a2d      	ldr	r2, [pc, #180]	; (80078e4 <xPortStartScheduler+0x134>)
 800782e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007830:	78fb      	ldrb	r3, [r7, #3]
 8007832:	b2db      	uxtb	r3, r3
 8007834:	005b      	lsls	r3, r3, #1
 8007836:	b2db      	uxtb	r3, r3
 8007838:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800783a:	78fb      	ldrb	r3, [r7, #3]
 800783c:	b2db      	uxtb	r3, r3
 800783e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007842:	2b80      	cmp	r3, #128	; 0x80
 8007844:	d0ef      	beq.n	8007826 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007846:	4b27      	ldr	r3, [pc, #156]	; (80078e4 <xPortStartScheduler+0x134>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f1c3 0307 	rsb	r3, r3, #7
 800784e:	2b04      	cmp	r3, #4
 8007850:	d00a      	beq.n	8007868 <xPortStartScheduler+0xb8>
	__asm volatile
 8007852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007856:	f383 8811 	msr	BASEPRI, r3
 800785a:	f3bf 8f6f 	isb	sy
 800785e:	f3bf 8f4f 	dsb	sy
 8007862:	60bb      	str	r3, [r7, #8]
}
 8007864:	bf00      	nop
 8007866:	e7fe      	b.n	8007866 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007868:	4b1e      	ldr	r3, [pc, #120]	; (80078e4 <xPortStartScheduler+0x134>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	021b      	lsls	r3, r3, #8
 800786e:	4a1d      	ldr	r2, [pc, #116]	; (80078e4 <xPortStartScheduler+0x134>)
 8007870:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007872:	4b1c      	ldr	r3, [pc, #112]	; (80078e4 <xPortStartScheduler+0x134>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800787a:	4a1a      	ldr	r2, [pc, #104]	; (80078e4 <xPortStartScheduler+0x134>)
 800787c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	b2da      	uxtb	r2, r3
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007886:	4b18      	ldr	r3, [pc, #96]	; (80078e8 <xPortStartScheduler+0x138>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a17      	ldr	r2, [pc, #92]	; (80078e8 <xPortStartScheduler+0x138>)
 800788c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007890:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007892:	4b15      	ldr	r3, [pc, #84]	; (80078e8 <xPortStartScheduler+0x138>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a14      	ldr	r2, [pc, #80]	; (80078e8 <xPortStartScheduler+0x138>)
 8007898:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800789c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800789e:	f000 f8dd 	bl	8007a5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80078a2:	4b12      	ldr	r3, [pc, #72]	; (80078ec <xPortStartScheduler+0x13c>)
 80078a4:	2200      	movs	r2, #0
 80078a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80078a8:	f000 f8fc 	bl	8007aa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80078ac:	4b10      	ldr	r3, [pc, #64]	; (80078f0 <xPortStartScheduler+0x140>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a0f      	ldr	r2, [pc, #60]	; (80078f0 <xPortStartScheduler+0x140>)
 80078b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80078b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80078b8:	f7ff ff66 	bl	8007788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80078bc:	f7ff f856 	bl	800696c <vTaskSwitchContext>
	prvTaskExitError();
 80078c0:	f7ff ff22 	bl	8007708 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3718      	adds	r7, #24
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	e000ed00 	.word	0xe000ed00
 80078d4:	410fc271 	.word	0x410fc271
 80078d8:	410fc270 	.word	0x410fc270
 80078dc:	e000e400 	.word	0xe000e400
 80078e0:	20000fe8 	.word	0x20000fe8
 80078e4:	20000fec 	.word	0x20000fec
 80078e8:	e000ed20 	.word	0xe000ed20
 80078ec:	2000000c 	.word	0x2000000c
 80078f0:	e000ef34 	.word	0xe000ef34

080078f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
	__asm volatile
 80078fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fe:	f383 8811 	msr	BASEPRI, r3
 8007902:	f3bf 8f6f 	isb	sy
 8007906:	f3bf 8f4f 	dsb	sy
 800790a:	607b      	str	r3, [r7, #4]
}
 800790c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800790e:	4b0f      	ldr	r3, [pc, #60]	; (800794c <vPortEnterCritical+0x58>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	3301      	adds	r3, #1
 8007914:	4a0d      	ldr	r2, [pc, #52]	; (800794c <vPortEnterCritical+0x58>)
 8007916:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007918:	4b0c      	ldr	r3, [pc, #48]	; (800794c <vPortEnterCritical+0x58>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b01      	cmp	r3, #1
 800791e:	d10f      	bne.n	8007940 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007920:	4b0b      	ldr	r3, [pc, #44]	; (8007950 <vPortEnterCritical+0x5c>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d00a      	beq.n	8007940 <vPortEnterCritical+0x4c>
	__asm volatile
 800792a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792e:	f383 8811 	msr	BASEPRI, r3
 8007932:	f3bf 8f6f 	isb	sy
 8007936:	f3bf 8f4f 	dsb	sy
 800793a:	603b      	str	r3, [r7, #0]
}
 800793c:	bf00      	nop
 800793e:	e7fe      	b.n	800793e <vPortEnterCritical+0x4a>
	}
}
 8007940:	bf00      	nop
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr
 800794c:	2000000c 	.word	0x2000000c
 8007950:	e000ed04 	.word	0xe000ed04

08007954 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800795a:	4b12      	ldr	r3, [pc, #72]	; (80079a4 <vPortExitCritical+0x50>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10a      	bne.n	8007978 <vPortExitCritical+0x24>
	__asm volatile
 8007962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007966:	f383 8811 	msr	BASEPRI, r3
 800796a:	f3bf 8f6f 	isb	sy
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	607b      	str	r3, [r7, #4]
}
 8007974:	bf00      	nop
 8007976:	e7fe      	b.n	8007976 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007978:	4b0a      	ldr	r3, [pc, #40]	; (80079a4 <vPortExitCritical+0x50>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	3b01      	subs	r3, #1
 800797e:	4a09      	ldr	r2, [pc, #36]	; (80079a4 <vPortExitCritical+0x50>)
 8007980:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007982:	4b08      	ldr	r3, [pc, #32]	; (80079a4 <vPortExitCritical+0x50>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d105      	bne.n	8007996 <vPortExitCritical+0x42>
 800798a:	2300      	movs	r3, #0
 800798c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	f383 8811 	msr	BASEPRI, r3
}
 8007994:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007996:	bf00      	nop
 8007998:	370c      	adds	r7, #12
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop
 80079a4:	2000000c 	.word	0x2000000c
	...

080079b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80079b0:	f3ef 8009 	mrs	r0, PSP
 80079b4:	f3bf 8f6f 	isb	sy
 80079b8:	4b15      	ldr	r3, [pc, #84]	; (8007a10 <pxCurrentTCBConst>)
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	f01e 0f10 	tst.w	lr, #16
 80079c0:	bf08      	it	eq
 80079c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80079c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ca:	6010      	str	r0, [r2, #0]
 80079cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80079d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80079d4:	f380 8811 	msr	BASEPRI, r0
 80079d8:	f3bf 8f4f 	dsb	sy
 80079dc:	f3bf 8f6f 	isb	sy
 80079e0:	f7fe ffc4 	bl	800696c <vTaskSwitchContext>
 80079e4:	f04f 0000 	mov.w	r0, #0
 80079e8:	f380 8811 	msr	BASEPRI, r0
 80079ec:	bc09      	pop	{r0, r3}
 80079ee:	6819      	ldr	r1, [r3, #0]
 80079f0:	6808      	ldr	r0, [r1, #0]
 80079f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f6:	f01e 0f10 	tst.w	lr, #16
 80079fa:	bf08      	it	eq
 80079fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a00:	f380 8809 	msr	PSP, r0
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	f3af 8000 	nop.w

08007a10 <pxCurrentTCBConst>:
 8007a10:	200009bc 	.word	0x200009bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a14:	bf00      	nop
 8007a16:	bf00      	nop

08007a18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a22:	f383 8811 	msr	BASEPRI, r3
 8007a26:	f3bf 8f6f 	isb	sy
 8007a2a:	f3bf 8f4f 	dsb	sy
 8007a2e:	607b      	str	r3, [r7, #4]
}
 8007a30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a32:	f7fe fee1 	bl	80067f8 <xTaskIncrementTick>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d003      	beq.n	8007a44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a3c:	4b06      	ldr	r3, [pc, #24]	; (8007a58 <xPortSysTickHandler+0x40>)
 8007a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a42:	601a      	str	r2, [r3, #0]
 8007a44:	2300      	movs	r3, #0
 8007a46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	f383 8811 	msr	BASEPRI, r3
}
 8007a4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a50:	bf00      	nop
 8007a52:	3708      	adds	r7, #8
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	e000ed04 	.word	0xe000ed04

08007a5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a60:	4b0b      	ldr	r3, [pc, #44]	; (8007a90 <vPortSetupTimerInterrupt+0x34>)
 8007a62:	2200      	movs	r2, #0
 8007a64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a66:	4b0b      	ldr	r3, [pc, #44]	; (8007a94 <vPortSetupTimerInterrupt+0x38>)
 8007a68:	2200      	movs	r2, #0
 8007a6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a6c:	4b0a      	ldr	r3, [pc, #40]	; (8007a98 <vPortSetupTimerInterrupt+0x3c>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a0a      	ldr	r2, [pc, #40]	; (8007a9c <vPortSetupTimerInterrupt+0x40>)
 8007a72:	fba2 2303 	umull	r2, r3, r2, r3
 8007a76:	099b      	lsrs	r3, r3, #6
 8007a78:	4a09      	ldr	r2, [pc, #36]	; (8007aa0 <vPortSetupTimerInterrupt+0x44>)
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a7e:	4b04      	ldr	r3, [pc, #16]	; (8007a90 <vPortSetupTimerInterrupt+0x34>)
 8007a80:	2207      	movs	r2, #7
 8007a82:	601a      	str	r2, [r3, #0]
}
 8007a84:	bf00      	nop
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	e000e010 	.word	0xe000e010
 8007a94:	e000e018 	.word	0xe000e018
 8007a98:	20000000 	.word	0x20000000
 8007a9c:	10624dd3 	.word	0x10624dd3
 8007aa0:	e000e014 	.word	0xe000e014

08007aa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007aa4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ab4 <vPortEnableVFP+0x10>
 8007aa8:	6801      	ldr	r1, [r0, #0]
 8007aaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007aae:	6001      	str	r1, [r0, #0]
 8007ab0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ab2:	bf00      	nop
 8007ab4:	e000ed88 	.word	0xe000ed88

08007ab8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007abe:	f3ef 8305 	mrs	r3, IPSR
 8007ac2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2b0f      	cmp	r3, #15
 8007ac8:	d914      	bls.n	8007af4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007aca:	4a17      	ldr	r2, [pc, #92]	; (8007b28 <vPortValidateInterruptPriority+0x70>)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	4413      	add	r3, r2
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ad4:	4b15      	ldr	r3, [pc, #84]	; (8007b2c <vPortValidateInterruptPriority+0x74>)
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	7afa      	ldrb	r2, [r7, #11]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d20a      	bcs.n	8007af4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae2:	f383 8811 	msr	BASEPRI, r3
 8007ae6:	f3bf 8f6f 	isb	sy
 8007aea:	f3bf 8f4f 	dsb	sy
 8007aee:	607b      	str	r3, [r7, #4]
}
 8007af0:	bf00      	nop
 8007af2:	e7fe      	b.n	8007af2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007af4:	4b0e      	ldr	r3, [pc, #56]	; (8007b30 <vPortValidateInterruptPriority+0x78>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007afc:	4b0d      	ldr	r3, [pc, #52]	; (8007b34 <vPortValidateInterruptPriority+0x7c>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d90a      	bls.n	8007b1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b08:	f383 8811 	msr	BASEPRI, r3
 8007b0c:	f3bf 8f6f 	isb	sy
 8007b10:	f3bf 8f4f 	dsb	sy
 8007b14:	603b      	str	r3, [r7, #0]
}
 8007b16:	bf00      	nop
 8007b18:	e7fe      	b.n	8007b18 <vPortValidateInterruptPriority+0x60>
	}
 8007b1a:	bf00      	nop
 8007b1c:	3714      	adds	r7, #20
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	e000e3f0 	.word	0xe000e3f0
 8007b2c:	20000fe8 	.word	0x20000fe8
 8007b30:	e000ed0c 	.word	0xe000ed0c
 8007b34:	20000fec 	.word	0x20000fec

08007b38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b08a      	sub	sp, #40	; 0x28
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b40:	2300      	movs	r3, #0
 8007b42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b44:	f7fe fd9c 	bl	8006680 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b48:	4b5b      	ldr	r3, [pc, #364]	; (8007cb8 <pvPortMalloc+0x180>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d101      	bne.n	8007b54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b50:	f000 f920 	bl	8007d94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b54:	4b59      	ldr	r3, [pc, #356]	; (8007cbc <pvPortMalloc+0x184>)
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f040 8093 	bne.w	8007c88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d01d      	beq.n	8007ba4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007b68:	2208      	movs	r2, #8
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f003 0307 	and.w	r3, r3, #7
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d014      	beq.n	8007ba4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f023 0307 	bic.w	r3, r3, #7
 8007b80:	3308      	adds	r3, #8
 8007b82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f003 0307 	and.w	r3, r3, #7
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00a      	beq.n	8007ba4 <pvPortMalloc+0x6c>
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	617b      	str	r3, [r7, #20]
}
 8007ba0:	bf00      	nop
 8007ba2:	e7fe      	b.n	8007ba2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d06e      	beq.n	8007c88 <pvPortMalloc+0x150>
 8007baa:	4b45      	ldr	r3, [pc, #276]	; (8007cc0 <pvPortMalloc+0x188>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d869      	bhi.n	8007c88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007bb4:	4b43      	ldr	r3, [pc, #268]	; (8007cc4 <pvPortMalloc+0x18c>)
 8007bb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007bb8:	4b42      	ldr	r3, [pc, #264]	; (8007cc4 <pvPortMalloc+0x18c>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bbe:	e004      	b.n	8007bca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d903      	bls.n	8007bdc <pvPortMalloc+0xa4>
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d1f1      	bne.n	8007bc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007bdc:	4b36      	ldr	r3, [pc, #216]	; (8007cb8 <pvPortMalloc+0x180>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d050      	beq.n	8007c88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007be6:	6a3b      	ldr	r3, [r7, #32]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2208      	movs	r2, #8
 8007bec:	4413      	add	r3, r2
 8007bee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	6a3b      	ldr	r3, [r7, #32]
 8007bf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	1ad2      	subs	r2, r2, r3
 8007c00:	2308      	movs	r3, #8
 8007c02:	005b      	lsls	r3, r3, #1
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d91f      	bls.n	8007c48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	f003 0307 	and.w	r3, r3, #7
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00a      	beq.n	8007c30 <pvPortMalloc+0xf8>
	__asm volatile
 8007c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1e:	f383 8811 	msr	BASEPRI, r3
 8007c22:	f3bf 8f6f 	isb	sy
 8007c26:	f3bf 8f4f 	dsb	sy
 8007c2a:	613b      	str	r3, [r7, #16]
}
 8007c2c:	bf00      	nop
 8007c2e:	e7fe      	b.n	8007c2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c32:	685a      	ldr	r2, [r3, #4]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	1ad2      	subs	r2, r2, r3
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c42:	69b8      	ldr	r0, [r7, #24]
 8007c44:	f000 f908 	bl	8007e58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c48:	4b1d      	ldr	r3, [pc, #116]	; (8007cc0 <pvPortMalloc+0x188>)
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	1ad3      	subs	r3, r2, r3
 8007c52:	4a1b      	ldr	r2, [pc, #108]	; (8007cc0 <pvPortMalloc+0x188>)
 8007c54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c56:	4b1a      	ldr	r3, [pc, #104]	; (8007cc0 <pvPortMalloc+0x188>)
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	4b1b      	ldr	r3, [pc, #108]	; (8007cc8 <pvPortMalloc+0x190>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d203      	bcs.n	8007c6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c62:	4b17      	ldr	r3, [pc, #92]	; (8007cc0 <pvPortMalloc+0x188>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a18      	ldr	r2, [pc, #96]	; (8007cc8 <pvPortMalloc+0x190>)
 8007c68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6c:	685a      	ldr	r2, [r3, #4]
 8007c6e:	4b13      	ldr	r3, [pc, #76]	; (8007cbc <pvPortMalloc+0x184>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	431a      	orrs	r2, r3
 8007c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007c7e:	4b13      	ldr	r3, [pc, #76]	; (8007ccc <pvPortMalloc+0x194>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	3301      	adds	r3, #1
 8007c84:	4a11      	ldr	r2, [pc, #68]	; (8007ccc <pvPortMalloc+0x194>)
 8007c86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c88:	f7fe fd08 	bl	800669c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	f003 0307 	and.w	r3, r3, #7
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00a      	beq.n	8007cac <pvPortMalloc+0x174>
	__asm volatile
 8007c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9a:	f383 8811 	msr	BASEPRI, r3
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f3bf 8f4f 	dsb	sy
 8007ca6:	60fb      	str	r3, [r7, #12]
}
 8007ca8:	bf00      	nop
 8007caa:	e7fe      	b.n	8007caa <pvPortMalloc+0x172>
	return pvReturn;
 8007cac:	69fb      	ldr	r3, [r7, #28]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3728      	adds	r7, #40	; 0x28
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	20003320 	.word	0x20003320
 8007cbc:	20003334 	.word	0x20003334
 8007cc0:	20003324 	.word	0x20003324
 8007cc4:	20003318 	.word	0x20003318
 8007cc8:	20003328 	.word	0x20003328
 8007ccc:	2000332c 	.word	0x2000332c

08007cd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d04d      	beq.n	8007d7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ce2:	2308      	movs	r3, #8
 8007ce4:	425b      	negs	r3, r3
 8007ce6:	697a      	ldr	r2, [r7, #20]
 8007ce8:	4413      	add	r3, r2
 8007cea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	685a      	ldr	r2, [r3, #4]
 8007cf4:	4b24      	ldr	r3, [pc, #144]	; (8007d88 <vPortFree+0xb8>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d10a      	bne.n	8007d14 <vPortFree+0x44>
	__asm volatile
 8007cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d02:	f383 8811 	msr	BASEPRI, r3
 8007d06:	f3bf 8f6f 	isb	sy
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	60fb      	str	r3, [r7, #12]
}
 8007d10:	bf00      	nop
 8007d12:	e7fe      	b.n	8007d12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00a      	beq.n	8007d32 <vPortFree+0x62>
	__asm volatile
 8007d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d20:	f383 8811 	msr	BASEPRI, r3
 8007d24:	f3bf 8f6f 	isb	sy
 8007d28:	f3bf 8f4f 	dsb	sy
 8007d2c:	60bb      	str	r3, [r7, #8]
}
 8007d2e:	bf00      	nop
 8007d30:	e7fe      	b.n	8007d30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	685a      	ldr	r2, [r3, #4]
 8007d36:	4b14      	ldr	r3, [pc, #80]	; (8007d88 <vPortFree+0xb8>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d01e      	beq.n	8007d7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d11a      	bne.n	8007d7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	685a      	ldr	r2, [r3, #4]
 8007d4c:	4b0e      	ldr	r3, [pc, #56]	; (8007d88 <vPortFree+0xb8>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	43db      	mvns	r3, r3
 8007d52:	401a      	ands	r2, r3
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d58:	f7fe fc92 	bl	8006680 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	685a      	ldr	r2, [r3, #4]
 8007d60:	4b0a      	ldr	r3, [pc, #40]	; (8007d8c <vPortFree+0xbc>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4413      	add	r3, r2
 8007d66:	4a09      	ldr	r2, [pc, #36]	; (8007d8c <vPortFree+0xbc>)
 8007d68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d6a:	6938      	ldr	r0, [r7, #16]
 8007d6c:	f000 f874 	bl	8007e58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007d70:	4b07      	ldr	r3, [pc, #28]	; (8007d90 <vPortFree+0xc0>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	3301      	adds	r3, #1
 8007d76:	4a06      	ldr	r2, [pc, #24]	; (8007d90 <vPortFree+0xc0>)
 8007d78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007d7a:	f7fe fc8f 	bl	800669c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d7e:	bf00      	nop
 8007d80:	3718      	adds	r7, #24
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	20003334 	.word	0x20003334
 8007d8c:	20003324 	.word	0x20003324
 8007d90:	20003330 	.word	0x20003330

08007d94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d94:	b480      	push	{r7}
 8007d96:	b085      	sub	sp, #20
 8007d98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d9a:	f242 3328 	movw	r3, #9000	; 0x2328
 8007d9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007da0:	4b27      	ldr	r3, [pc, #156]	; (8007e40 <prvHeapInit+0xac>)
 8007da2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f003 0307 	and.w	r3, r3, #7
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00c      	beq.n	8007dc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	3307      	adds	r3, #7
 8007db2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f023 0307 	bic.w	r3, r3, #7
 8007dba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007dbc:	68ba      	ldr	r2, [r7, #8]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	4a1f      	ldr	r2, [pc, #124]	; (8007e40 <prvHeapInit+0xac>)
 8007dc4:	4413      	add	r3, r2
 8007dc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007dcc:	4a1d      	ldr	r2, [pc, #116]	; (8007e44 <prvHeapInit+0xb0>)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007dd2:	4b1c      	ldr	r3, [pc, #112]	; (8007e44 <prvHeapInit+0xb0>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	68ba      	ldr	r2, [r7, #8]
 8007ddc:	4413      	add	r3, r2
 8007dde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007de0:	2208      	movs	r2, #8
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	1a9b      	subs	r3, r3, r2
 8007de6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f023 0307 	bic.w	r3, r3, #7
 8007dee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	4a15      	ldr	r2, [pc, #84]	; (8007e48 <prvHeapInit+0xb4>)
 8007df4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007df6:	4b14      	ldr	r3, [pc, #80]	; (8007e48 <prvHeapInit+0xb4>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007dfe:	4b12      	ldr	r3, [pc, #72]	; (8007e48 <prvHeapInit+0xb4>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2200      	movs	r2, #0
 8007e04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	1ad2      	subs	r2, r2, r3
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e14:	4b0c      	ldr	r3, [pc, #48]	; (8007e48 <prvHeapInit+0xb4>)
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	4a0a      	ldr	r2, [pc, #40]	; (8007e4c <prvHeapInit+0xb8>)
 8007e22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	4a09      	ldr	r2, [pc, #36]	; (8007e50 <prvHeapInit+0xbc>)
 8007e2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e2c:	4b09      	ldr	r3, [pc, #36]	; (8007e54 <prvHeapInit+0xc0>)
 8007e2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007e32:	601a      	str	r2, [r3, #0]
}
 8007e34:	bf00      	nop
 8007e36:	3714      	adds	r7, #20
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	20000ff0 	.word	0x20000ff0
 8007e44:	20003318 	.word	0x20003318
 8007e48:	20003320 	.word	0x20003320
 8007e4c:	20003328 	.word	0x20003328
 8007e50:	20003324 	.word	0x20003324
 8007e54:	20003334 	.word	0x20003334

08007e58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e60:	4b28      	ldr	r3, [pc, #160]	; (8007f04 <prvInsertBlockIntoFreeList+0xac>)
 8007e62:	60fb      	str	r3, [r7, #12]
 8007e64:	e002      	b.n	8007e6c <prvInsertBlockIntoFreeList+0x14>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	60fb      	str	r3, [r7, #12]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d8f7      	bhi.n	8007e66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	4413      	add	r3, r2
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d108      	bne.n	8007e9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	685a      	ldr	r2, [r3, #4]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	441a      	add	r2, r3
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	441a      	add	r2, r3
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d118      	bne.n	8007ee0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	4b15      	ldr	r3, [pc, #84]	; (8007f08 <prvInsertBlockIntoFreeList+0xb0>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d00d      	beq.n	8007ed6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685a      	ldr	r2, [r3, #4]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	441a      	add	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	601a      	str	r2, [r3, #0]
 8007ed4:	e008      	b.n	8007ee8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ed6:	4b0c      	ldr	r3, [pc, #48]	; (8007f08 <prvInsertBlockIntoFreeList+0xb0>)
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	e003      	b.n	8007ee8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d002      	beq.n	8007ef6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ef6:	bf00      	nop
 8007ef8:	3714      	adds	r7, #20
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	20003318 	.word	0x20003318
 8007f08:	20003320 	.word	0x20003320

08007f0c <__errno>:
 8007f0c:	4b01      	ldr	r3, [pc, #4]	; (8007f14 <__errno+0x8>)
 8007f0e:	6818      	ldr	r0, [r3, #0]
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	20000010 	.word	0x20000010

08007f18 <__libc_init_array>:
 8007f18:	b570      	push	{r4, r5, r6, lr}
 8007f1a:	4d0d      	ldr	r5, [pc, #52]	; (8007f50 <__libc_init_array+0x38>)
 8007f1c:	4c0d      	ldr	r4, [pc, #52]	; (8007f54 <__libc_init_array+0x3c>)
 8007f1e:	1b64      	subs	r4, r4, r5
 8007f20:	10a4      	asrs	r4, r4, #2
 8007f22:	2600      	movs	r6, #0
 8007f24:	42a6      	cmp	r6, r4
 8007f26:	d109      	bne.n	8007f3c <__libc_init_array+0x24>
 8007f28:	4d0b      	ldr	r5, [pc, #44]	; (8007f58 <__libc_init_array+0x40>)
 8007f2a:	4c0c      	ldr	r4, [pc, #48]	; (8007f5c <__libc_init_array+0x44>)
 8007f2c:	f000 ffbc 	bl	8008ea8 <_init>
 8007f30:	1b64      	subs	r4, r4, r5
 8007f32:	10a4      	asrs	r4, r4, #2
 8007f34:	2600      	movs	r6, #0
 8007f36:	42a6      	cmp	r6, r4
 8007f38:	d105      	bne.n	8007f46 <__libc_init_array+0x2e>
 8007f3a:	bd70      	pop	{r4, r5, r6, pc}
 8007f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f40:	4798      	blx	r3
 8007f42:	3601      	adds	r6, #1
 8007f44:	e7ee      	b.n	8007f24 <__libc_init_array+0xc>
 8007f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f4a:	4798      	blx	r3
 8007f4c:	3601      	adds	r6, #1
 8007f4e:	e7f2      	b.n	8007f36 <__libc_init_array+0x1e>
 8007f50:	08009010 	.word	0x08009010
 8007f54:	08009010 	.word	0x08009010
 8007f58:	08009010 	.word	0x08009010
 8007f5c:	0800901c 	.word	0x0800901c

08007f60 <memcpy>:
 8007f60:	440a      	add	r2, r1
 8007f62:	4291      	cmp	r1, r2
 8007f64:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f68:	d100      	bne.n	8007f6c <memcpy+0xc>
 8007f6a:	4770      	bx	lr
 8007f6c:	b510      	push	{r4, lr}
 8007f6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f76:	4291      	cmp	r1, r2
 8007f78:	d1f9      	bne.n	8007f6e <memcpy+0xe>
 8007f7a:	bd10      	pop	{r4, pc}

08007f7c <memset>:
 8007f7c:	4402      	add	r2, r0
 8007f7e:	4603      	mov	r3, r0
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d100      	bne.n	8007f86 <memset+0xa>
 8007f84:	4770      	bx	lr
 8007f86:	f803 1b01 	strb.w	r1, [r3], #1
 8007f8a:	e7f9      	b.n	8007f80 <memset+0x4>

08007f8c <iprintf>:
 8007f8c:	b40f      	push	{r0, r1, r2, r3}
 8007f8e:	4b0a      	ldr	r3, [pc, #40]	; (8007fb8 <iprintf+0x2c>)
 8007f90:	b513      	push	{r0, r1, r4, lr}
 8007f92:	681c      	ldr	r4, [r3, #0]
 8007f94:	b124      	cbz	r4, 8007fa0 <iprintf+0x14>
 8007f96:	69a3      	ldr	r3, [r4, #24]
 8007f98:	b913      	cbnz	r3, 8007fa0 <iprintf+0x14>
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f000 f9e8 	bl	8008370 <__sinit>
 8007fa0:	ab05      	add	r3, sp, #20
 8007fa2:	9a04      	ldr	r2, [sp, #16]
 8007fa4:	68a1      	ldr	r1, [r4, #8]
 8007fa6:	9301      	str	r3, [sp, #4]
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f000 fbf1 	bl	8008790 <_vfiprintf_r>
 8007fae:	b002      	add	sp, #8
 8007fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fb4:	b004      	add	sp, #16
 8007fb6:	4770      	bx	lr
 8007fb8:	20000010 	.word	0x20000010

08007fbc <__swbuf_r>:
 8007fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fbe:	460e      	mov	r6, r1
 8007fc0:	4614      	mov	r4, r2
 8007fc2:	4605      	mov	r5, r0
 8007fc4:	b118      	cbz	r0, 8007fce <__swbuf_r+0x12>
 8007fc6:	6983      	ldr	r3, [r0, #24]
 8007fc8:	b90b      	cbnz	r3, 8007fce <__swbuf_r+0x12>
 8007fca:	f000 f9d1 	bl	8008370 <__sinit>
 8007fce:	4b21      	ldr	r3, [pc, #132]	; (8008054 <__swbuf_r+0x98>)
 8007fd0:	429c      	cmp	r4, r3
 8007fd2:	d12b      	bne.n	800802c <__swbuf_r+0x70>
 8007fd4:	686c      	ldr	r4, [r5, #4]
 8007fd6:	69a3      	ldr	r3, [r4, #24]
 8007fd8:	60a3      	str	r3, [r4, #8]
 8007fda:	89a3      	ldrh	r3, [r4, #12]
 8007fdc:	071a      	lsls	r2, r3, #28
 8007fde:	d52f      	bpl.n	8008040 <__swbuf_r+0x84>
 8007fe0:	6923      	ldr	r3, [r4, #16]
 8007fe2:	b36b      	cbz	r3, 8008040 <__swbuf_r+0x84>
 8007fe4:	6923      	ldr	r3, [r4, #16]
 8007fe6:	6820      	ldr	r0, [r4, #0]
 8007fe8:	1ac0      	subs	r0, r0, r3
 8007fea:	6963      	ldr	r3, [r4, #20]
 8007fec:	b2f6      	uxtb	r6, r6
 8007fee:	4283      	cmp	r3, r0
 8007ff0:	4637      	mov	r7, r6
 8007ff2:	dc04      	bgt.n	8007ffe <__swbuf_r+0x42>
 8007ff4:	4621      	mov	r1, r4
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	f000 f926 	bl	8008248 <_fflush_r>
 8007ffc:	bb30      	cbnz	r0, 800804c <__swbuf_r+0x90>
 8007ffe:	68a3      	ldr	r3, [r4, #8]
 8008000:	3b01      	subs	r3, #1
 8008002:	60a3      	str	r3, [r4, #8]
 8008004:	6823      	ldr	r3, [r4, #0]
 8008006:	1c5a      	adds	r2, r3, #1
 8008008:	6022      	str	r2, [r4, #0]
 800800a:	701e      	strb	r6, [r3, #0]
 800800c:	6963      	ldr	r3, [r4, #20]
 800800e:	3001      	adds	r0, #1
 8008010:	4283      	cmp	r3, r0
 8008012:	d004      	beq.n	800801e <__swbuf_r+0x62>
 8008014:	89a3      	ldrh	r3, [r4, #12]
 8008016:	07db      	lsls	r3, r3, #31
 8008018:	d506      	bpl.n	8008028 <__swbuf_r+0x6c>
 800801a:	2e0a      	cmp	r6, #10
 800801c:	d104      	bne.n	8008028 <__swbuf_r+0x6c>
 800801e:	4621      	mov	r1, r4
 8008020:	4628      	mov	r0, r5
 8008022:	f000 f911 	bl	8008248 <_fflush_r>
 8008026:	b988      	cbnz	r0, 800804c <__swbuf_r+0x90>
 8008028:	4638      	mov	r0, r7
 800802a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800802c:	4b0a      	ldr	r3, [pc, #40]	; (8008058 <__swbuf_r+0x9c>)
 800802e:	429c      	cmp	r4, r3
 8008030:	d101      	bne.n	8008036 <__swbuf_r+0x7a>
 8008032:	68ac      	ldr	r4, [r5, #8]
 8008034:	e7cf      	b.n	8007fd6 <__swbuf_r+0x1a>
 8008036:	4b09      	ldr	r3, [pc, #36]	; (800805c <__swbuf_r+0xa0>)
 8008038:	429c      	cmp	r4, r3
 800803a:	bf08      	it	eq
 800803c:	68ec      	ldreq	r4, [r5, #12]
 800803e:	e7ca      	b.n	8007fd6 <__swbuf_r+0x1a>
 8008040:	4621      	mov	r1, r4
 8008042:	4628      	mov	r0, r5
 8008044:	f000 f80c 	bl	8008060 <__swsetup_r>
 8008048:	2800      	cmp	r0, #0
 800804a:	d0cb      	beq.n	8007fe4 <__swbuf_r+0x28>
 800804c:	f04f 37ff 	mov.w	r7, #4294967295
 8008050:	e7ea      	b.n	8008028 <__swbuf_r+0x6c>
 8008052:	bf00      	nop
 8008054:	08008f94 	.word	0x08008f94
 8008058:	08008fb4 	.word	0x08008fb4
 800805c:	08008f74 	.word	0x08008f74

08008060 <__swsetup_r>:
 8008060:	4b32      	ldr	r3, [pc, #200]	; (800812c <__swsetup_r+0xcc>)
 8008062:	b570      	push	{r4, r5, r6, lr}
 8008064:	681d      	ldr	r5, [r3, #0]
 8008066:	4606      	mov	r6, r0
 8008068:	460c      	mov	r4, r1
 800806a:	b125      	cbz	r5, 8008076 <__swsetup_r+0x16>
 800806c:	69ab      	ldr	r3, [r5, #24]
 800806e:	b913      	cbnz	r3, 8008076 <__swsetup_r+0x16>
 8008070:	4628      	mov	r0, r5
 8008072:	f000 f97d 	bl	8008370 <__sinit>
 8008076:	4b2e      	ldr	r3, [pc, #184]	; (8008130 <__swsetup_r+0xd0>)
 8008078:	429c      	cmp	r4, r3
 800807a:	d10f      	bne.n	800809c <__swsetup_r+0x3c>
 800807c:	686c      	ldr	r4, [r5, #4]
 800807e:	89a3      	ldrh	r3, [r4, #12]
 8008080:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008084:	0719      	lsls	r1, r3, #28
 8008086:	d42c      	bmi.n	80080e2 <__swsetup_r+0x82>
 8008088:	06dd      	lsls	r5, r3, #27
 800808a:	d411      	bmi.n	80080b0 <__swsetup_r+0x50>
 800808c:	2309      	movs	r3, #9
 800808e:	6033      	str	r3, [r6, #0]
 8008090:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008094:	81a3      	strh	r3, [r4, #12]
 8008096:	f04f 30ff 	mov.w	r0, #4294967295
 800809a:	e03e      	b.n	800811a <__swsetup_r+0xba>
 800809c:	4b25      	ldr	r3, [pc, #148]	; (8008134 <__swsetup_r+0xd4>)
 800809e:	429c      	cmp	r4, r3
 80080a0:	d101      	bne.n	80080a6 <__swsetup_r+0x46>
 80080a2:	68ac      	ldr	r4, [r5, #8]
 80080a4:	e7eb      	b.n	800807e <__swsetup_r+0x1e>
 80080a6:	4b24      	ldr	r3, [pc, #144]	; (8008138 <__swsetup_r+0xd8>)
 80080a8:	429c      	cmp	r4, r3
 80080aa:	bf08      	it	eq
 80080ac:	68ec      	ldreq	r4, [r5, #12]
 80080ae:	e7e6      	b.n	800807e <__swsetup_r+0x1e>
 80080b0:	0758      	lsls	r0, r3, #29
 80080b2:	d512      	bpl.n	80080da <__swsetup_r+0x7a>
 80080b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080b6:	b141      	cbz	r1, 80080ca <__swsetup_r+0x6a>
 80080b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080bc:	4299      	cmp	r1, r3
 80080be:	d002      	beq.n	80080c6 <__swsetup_r+0x66>
 80080c0:	4630      	mov	r0, r6
 80080c2:	f000 fa5b 	bl	800857c <_free_r>
 80080c6:	2300      	movs	r3, #0
 80080c8:	6363      	str	r3, [r4, #52]	; 0x34
 80080ca:	89a3      	ldrh	r3, [r4, #12]
 80080cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80080d0:	81a3      	strh	r3, [r4, #12]
 80080d2:	2300      	movs	r3, #0
 80080d4:	6063      	str	r3, [r4, #4]
 80080d6:	6923      	ldr	r3, [r4, #16]
 80080d8:	6023      	str	r3, [r4, #0]
 80080da:	89a3      	ldrh	r3, [r4, #12]
 80080dc:	f043 0308 	orr.w	r3, r3, #8
 80080e0:	81a3      	strh	r3, [r4, #12]
 80080e2:	6923      	ldr	r3, [r4, #16]
 80080e4:	b94b      	cbnz	r3, 80080fa <__swsetup_r+0x9a>
 80080e6:	89a3      	ldrh	r3, [r4, #12]
 80080e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080f0:	d003      	beq.n	80080fa <__swsetup_r+0x9a>
 80080f2:	4621      	mov	r1, r4
 80080f4:	4630      	mov	r0, r6
 80080f6:	f000 fa01 	bl	80084fc <__smakebuf_r>
 80080fa:	89a0      	ldrh	r0, [r4, #12]
 80080fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008100:	f010 0301 	ands.w	r3, r0, #1
 8008104:	d00a      	beq.n	800811c <__swsetup_r+0xbc>
 8008106:	2300      	movs	r3, #0
 8008108:	60a3      	str	r3, [r4, #8]
 800810a:	6963      	ldr	r3, [r4, #20]
 800810c:	425b      	negs	r3, r3
 800810e:	61a3      	str	r3, [r4, #24]
 8008110:	6923      	ldr	r3, [r4, #16]
 8008112:	b943      	cbnz	r3, 8008126 <__swsetup_r+0xc6>
 8008114:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008118:	d1ba      	bne.n	8008090 <__swsetup_r+0x30>
 800811a:	bd70      	pop	{r4, r5, r6, pc}
 800811c:	0781      	lsls	r1, r0, #30
 800811e:	bf58      	it	pl
 8008120:	6963      	ldrpl	r3, [r4, #20]
 8008122:	60a3      	str	r3, [r4, #8]
 8008124:	e7f4      	b.n	8008110 <__swsetup_r+0xb0>
 8008126:	2000      	movs	r0, #0
 8008128:	e7f7      	b.n	800811a <__swsetup_r+0xba>
 800812a:	bf00      	nop
 800812c:	20000010 	.word	0x20000010
 8008130:	08008f94 	.word	0x08008f94
 8008134:	08008fb4 	.word	0x08008fb4
 8008138:	08008f74 	.word	0x08008f74

0800813c <__sflush_r>:
 800813c:	898a      	ldrh	r2, [r1, #12]
 800813e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008142:	4605      	mov	r5, r0
 8008144:	0710      	lsls	r0, r2, #28
 8008146:	460c      	mov	r4, r1
 8008148:	d458      	bmi.n	80081fc <__sflush_r+0xc0>
 800814a:	684b      	ldr	r3, [r1, #4]
 800814c:	2b00      	cmp	r3, #0
 800814e:	dc05      	bgt.n	800815c <__sflush_r+0x20>
 8008150:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008152:	2b00      	cmp	r3, #0
 8008154:	dc02      	bgt.n	800815c <__sflush_r+0x20>
 8008156:	2000      	movs	r0, #0
 8008158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800815c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800815e:	2e00      	cmp	r6, #0
 8008160:	d0f9      	beq.n	8008156 <__sflush_r+0x1a>
 8008162:	2300      	movs	r3, #0
 8008164:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008168:	682f      	ldr	r7, [r5, #0]
 800816a:	602b      	str	r3, [r5, #0]
 800816c:	d032      	beq.n	80081d4 <__sflush_r+0x98>
 800816e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008170:	89a3      	ldrh	r3, [r4, #12]
 8008172:	075a      	lsls	r2, r3, #29
 8008174:	d505      	bpl.n	8008182 <__sflush_r+0x46>
 8008176:	6863      	ldr	r3, [r4, #4]
 8008178:	1ac0      	subs	r0, r0, r3
 800817a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800817c:	b10b      	cbz	r3, 8008182 <__sflush_r+0x46>
 800817e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008180:	1ac0      	subs	r0, r0, r3
 8008182:	2300      	movs	r3, #0
 8008184:	4602      	mov	r2, r0
 8008186:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008188:	6a21      	ldr	r1, [r4, #32]
 800818a:	4628      	mov	r0, r5
 800818c:	47b0      	blx	r6
 800818e:	1c43      	adds	r3, r0, #1
 8008190:	89a3      	ldrh	r3, [r4, #12]
 8008192:	d106      	bne.n	80081a2 <__sflush_r+0x66>
 8008194:	6829      	ldr	r1, [r5, #0]
 8008196:	291d      	cmp	r1, #29
 8008198:	d82c      	bhi.n	80081f4 <__sflush_r+0xb8>
 800819a:	4a2a      	ldr	r2, [pc, #168]	; (8008244 <__sflush_r+0x108>)
 800819c:	40ca      	lsrs	r2, r1
 800819e:	07d6      	lsls	r6, r2, #31
 80081a0:	d528      	bpl.n	80081f4 <__sflush_r+0xb8>
 80081a2:	2200      	movs	r2, #0
 80081a4:	6062      	str	r2, [r4, #4]
 80081a6:	04d9      	lsls	r1, r3, #19
 80081a8:	6922      	ldr	r2, [r4, #16]
 80081aa:	6022      	str	r2, [r4, #0]
 80081ac:	d504      	bpl.n	80081b8 <__sflush_r+0x7c>
 80081ae:	1c42      	adds	r2, r0, #1
 80081b0:	d101      	bne.n	80081b6 <__sflush_r+0x7a>
 80081b2:	682b      	ldr	r3, [r5, #0]
 80081b4:	b903      	cbnz	r3, 80081b8 <__sflush_r+0x7c>
 80081b6:	6560      	str	r0, [r4, #84]	; 0x54
 80081b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081ba:	602f      	str	r7, [r5, #0]
 80081bc:	2900      	cmp	r1, #0
 80081be:	d0ca      	beq.n	8008156 <__sflush_r+0x1a>
 80081c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081c4:	4299      	cmp	r1, r3
 80081c6:	d002      	beq.n	80081ce <__sflush_r+0x92>
 80081c8:	4628      	mov	r0, r5
 80081ca:	f000 f9d7 	bl	800857c <_free_r>
 80081ce:	2000      	movs	r0, #0
 80081d0:	6360      	str	r0, [r4, #52]	; 0x34
 80081d2:	e7c1      	b.n	8008158 <__sflush_r+0x1c>
 80081d4:	6a21      	ldr	r1, [r4, #32]
 80081d6:	2301      	movs	r3, #1
 80081d8:	4628      	mov	r0, r5
 80081da:	47b0      	blx	r6
 80081dc:	1c41      	adds	r1, r0, #1
 80081de:	d1c7      	bne.n	8008170 <__sflush_r+0x34>
 80081e0:	682b      	ldr	r3, [r5, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d0c4      	beq.n	8008170 <__sflush_r+0x34>
 80081e6:	2b1d      	cmp	r3, #29
 80081e8:	d001      	beq.n	80081ee <__sflush_r+0xb2>
 80081ea:	2b16      	cmp	r3, #22
 80081ec:	d101      	bne.n	80081f2 <__sflush_r+0xb6>
 80081ee:	602f      	str	r7, [r5, #0]
 80081f0:	e7b1      	b.n	8008156 <__sflush_r+0x1a>
 80081f2:	89a3      	ldrh	r3, [r4, #12]
 80081f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081f8:	81a3      	strh	r3, [r4, #12]
 80081fa:	e7ad      	b.n	8008158 <__sflush_r+0x1c>
 80081fc:	690f      	ldr	r7, [r1, #16]
 80081fe:	2f00      	cmp	r7, #0
 8008200:	d0a9      	beq.n	8008156 <__sflush_r+0x1a>
 8008202:	0793      	lsls	r3, r2, #30
 8008204:	680e      	ldr	r6, [r1, #0]
 8008206:	bf08      	it	eq
 8008208:	694b      	ldreq	r3, [r1, #20]
 800820a:	600f      	str	r7, [r1, #0]
 800820c:	bf18      	it	ne
 800820e:	2300      	movne	r3, #0
 8008210:	eba6 0807 	sub.w	r8, r6, r7
 8008214:	608b      	str	r3, [r1, #8]
 8008216:	f1b8 0f00 	cmp.w	r8, #0
 800821a:	dd9c      	ble.n	8008156 <__sflush_r+0x1a>
 800821c:	6a21      	ldr	r1, [r4, #32]
 800821e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008220:	4643      	mov	r3, r8
 8008222:	463a      	mov	r2, r7
 8008224:	4628      	mov	r0, r5
 8008226:	47b0      	blx	r6
 8008228:	2800      	cmp	r0, #0
 800822a:	dc06      	bgt.n	800823a <__sflush_r+0xfe>
 800822c:	89a3      	ldrh	r3, [r4, #12]
 800822e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008232:	81a3      	strh	r3, [r4, #12]
 8008234:	f04f 30ff 	mov.w	r0, #4294967295
 8008238:	e78e      	b.n	8008158 <__sflush_r+0x1c>
 800823a:	4407      	add	r7, r0
 800823c:	eba8 0800 	sub.w	r8, r8, r0
 8008240:	e7e9      	b.n	8008216 <__sflush_r+0xda>
 8008242:	bf00      	nop
 8008244:	20400001 	.word	0x20400001

08008248 <_fflush_r>:
 8008248:	b538      	push	{r3, r4, r5, lr}
 800824a:	690b      	ldr	r3, [r1, #16]
 800824c:	4605      	mov	r5, r0
 800824e:	460c      	mov	r4, r1
 8008250:	b913      	cbnz	r3, 8008258 <_fflush_r+0x10>
 8008252:	2500      	movs	r5, #0
 8008254:	4628      	mov	r0, r5
 8008256:	bd38      	pop	{r3, r4, r5, pc}
 8008258:	b118      	cbz	r0, 8008262 <_fflush_r+0x1a>
 800825a:	6983      	ldr	r3, [r0, #24]
 800825c:	b90b      	cbnz	r3, 8008262 <_fflush_r+0x1a>
 800825e:	f000 f887 	bl	8008370 <__sinit>
 8008262:	4b14      	ldr	r3, [pc, #80]	; (80082b4 <_fflush_r+0x6c>)
 8008264:	429c      	cmp	r4, r3
 8008266:	d11b      	bne.n	80082a0 <_fflush_r+0x58>
 8008268:	686c      	ldr	r4, [r5, #4]
 800826a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d0ef      	beq.n	8008252 <_fflush_r+0xa>
 8008272:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008274:	07d0      	lsls	r0, r2, #31
 8008276:	d404      	bmi.n	8008282 <_fflush_r+0x3a>
 8008278:	0599      	lsls	r1, r3, #22
 800827a:	d402      	bmi.n	8008282 <_fflush_r+0x3a>
 800827c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800827e:	f000 f915 	bl	80084ac <__retarget_lock_acquire_recursive>
 8008282:	4628      	mov	r0, r5
 8008284:	4621      	mov	r1, r4
 8008286:	f7ff ff59 	bl	800813c <__sflush_r>
 800828a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800828c:	07da      	lsls	r2, r3, #31
 800828e:	4605      	mov	r5, r0
 8008290:	d4e0      	bmi.n	8008254 <_fflush_r+0xc>
 8008292:	89a3      	ldrh	r3, [r4, #12]
 8008294:	059b      	lsls	r3, r3, #22
 8008296:	d4dd      	bmi.n	8008254 <_fflush_r+0xc>
 8008298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800829a:	f000 f908 	bl	80084ae <__retarget_lock_release_recursive>
 800829e:	e7d9      	b.n	8008254 <_fflush_r+0xc>
 80082a0:	4b05      	ldr	r3, [pc, #20]	; (80082b8 <_fflush_r+0x70>)
 80082a2:	429c      	cmp	r4, r3
 80082a4:	d101      	bne.n	80082aa <_fflush_r+0x62>
 80082a6:	68ac      	ldr	r4, [r5, #8]
 80082a8:	e7df      	b.n	800826a <_fflush_r+0x22>
 80082aa:	4b04      	ldr	r3, [pc, #16]	; (80082bc <_fflush_r+0x74>)
 80082ac:	429c      	cmp	r4, r3
 80082ae:	bf08      	it	eq
 80082b0:	68ec      	ldreq	r4, [r5, #12]
 80082b2:	e7da      	b.n	800826a <_fflush_r+0x22>
 80082b4:	08008f94 	.word	0x08008f94
 80082b8:	08008fb4 	.word	0x08008fb4
 80082bc:	08008f74 	.word	0x08008f74

080082c0 <std>:
 80082c0:	2300      	movs	r3, #0
 80082c2:	b510      	push	{r4, lr}
 80082c4:	4604      	mov	r4, r0
 80082c6:	e9c0 3300 	strd	r3, r3, [r0]
 80082ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082ce:	6083      	str	r3, [r0, #8]
 80082d0:	8181      	strh	r1, [r0, #12]
 80082d2:	6643      	str	r3, [r0, #100]	; 0x64
 80082d4:	81c2      	strh	r2, [r0, #14]
 80082d6:	6183      	str	r3, [r0, #24]
 80082d8:	4619      	mov	r1, r3
 80082da:	2208      	movs	r2, #8
 80082dc:	305c      	adds	r0, #92	; 0x5c
 80082de:	f7ff fe4d 	bl	8007f7c <memset>
 80082e2:	4b05      	ldr	r3, [pc, #20]	; (80082f8 <std+0x38>)
 80082e4:	6263      	str	r3, [r4, #36]	; 0x24
 80082e6:	4b05      	ldr	r3, [pc, #20]	; (80082fc <std+0x3c>)
 80082e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80082ea:	4b05      	ldr	r3, [pc, #20]	; (8008300 <std+0x40>)
 80082ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80082ee:	4b05      	ldr	r3, [pc, #20]	; (8008304 <std+0x44>)
 80082f0:	6224      	str	r4, [r4, #32]
 80082f2:	6323      	str	r3, [r4, #48]	; 0x30
 80082f4:	bd10      	pop	{r4, pc}
 80082f6:	bf00      	nop
 80082f8:	08008d39 	.word	0x08008d39
 80082fc:	08008d5b 	.word	0x08008d5b
 8008300:	08008d93 	.word	0x08008d93
 8008304:	08008db7 	.word	0x08008db7

08008308 <_cleanup_r>:
 8008308:	4901      	ldr	r1, [pc, #4]	; (8008310 <_cleanup_r+0x8>)
 800830a:	f000 b8af 	b.w	800846c <_fwalk_reent>
 800830e:	bf00      	nop
 8008310:	08008249 	.word	0x08008249

08008314 <__sfmoreglue>:
 8008314:	b570      	push	{r4, r5, r6, lr}
 8008316:	2268      	movs	r2, #104	; 0x68
 8008318:	1e4d      	subs	r5, r1, #1
 800831a:	4355      	muls	r5, r2
 800831c:	460e      	mov	r6, r1
 800831e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008322:	f000 f997 	bl	8008654 <_malloc_r>
 8008326:	4604      	mov	r4, r0
 8008328:	b140      	cbz	r0, 800833c <__sfmoreglue+0x28>
 800832a:	2100      	movs	r1, #0
 800832c:	e9c0 1600 	strd	r1, r6, [r0]
 8008330:	300c      	adds	r0, #12
 8008332:	60a0      	str	r0, [r4, #8]
 8008334:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008338:	f7ff fe20 	bl	8007f7c <memset>
 800833c:	4620      	mov	r0, r4
 800833e:	bd70      	pop	{r4, r5, r6, pc}

08008340 <__sfp_lock_acquire>:
 8008340:	4801      	ldr	r0, [pc, #4]	; (8008348 <__sfp_lock_acquire+0x8>)
 8008342:	f000 b8b3 	b.w	80084ac <__retarget_lock_acquire_recursive>
 8008346:	bf00      	nop
 8008348:	20003339 	.word	0x20003339

0800834c <__sfp_lock_release>:
 800834c:	4801      	ldr	r0, [pc, #4]	; (8008354 <__sfp_lock_release+0x8>)
 800834e:	f000 b8ae 	b.w	80084ae <__retarget_lock_release_recursive>
 8008352:	bf00      	nop
 8008354:	20003339 	.word	0x20003339

08008358 <__sinit_lock_acquire>:
 8008358:	4801      	ldr	r0, [pc, #4]	; (8008360 <__sinit_lock_acquire+0x8>)
 800835a:	f000 b8a7 	b.w	80084ac <__retarget_lock_acquire_recursive>
 800835e:	bf00      	nop
 8008360:	2000333a 	.word	0x2000333a

08008364 <__sinit_lock_release>:
 8008364:	4801      	ldr	r0, [pc, #4]	; (800836c <__sinit_lock_release+0x8>)
 8008366:	f000 b8a2 	b.w	80084ae <__retarget_lock_release_recursive>
 800836a:	bf00      	nop
 800836c:	2000333a 	.word	0x2000333a

08008370 <__sinit>:
 8008370:	b510      	push	{r4, lr}
 8008372:	4604      	mov	r4, r0
 8008374:	f7ff fff0 	bl	8008358 <__sinit_lock_acquire>
 8008378:	69a3      	ldr	r3, [r4, #24]
 800837a:	b11b      	cbz	r3, 8008384 <__sinit+0x14>
 800837c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008380:	f7ff bff0 	b.w	8008364 <__sinit_lock_release>
 8008384:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008388:	6523      	str	r3, [r4, #80]	; 0x50
 800838a:	4b13      	ldr	r3, [pc, #76]	; (80083d8 <__sinit+0x68>)
 800838c:	4a13      	ldr	r2, [pc, #76]	; (80083dc <__sinit+0x6c>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	62a2      	str	r2, [r4, #40]	; 0x28
 8008392:	42a3      	cmp	r3, r4
 8008394:	bf04      	itt	eq
 8008396:	2301      	moveq	r3, #1
 8008398:	61a3      	streq	r3, [r4, #24]
 800839a:	4620      	mov	r0, r4
 800839c:	f000 f820 	bl	80083e0 <__sfp>
 80083a0:	6060      	str	r0, [r4, #4]
 80083a2:	4620      	mov	r0, r4
 80083a4:	f000 f81c 	bl	80083e0 <__sfp>
 80083a8:	60a0      	str	r0, [r4, #8]
 80083aa:	4620      	mov	r0, r4
 80083ac:	f000 f818 	bl	80083e0 <__sfp>
 80083b0:	2200      	movs	r2, #0
 80083b2:	60e0      	str	r0, [r4, #12]
 80083b4:	2104      	movs	r1, #4
 80083b6:	6860      	ldr	r0, [r4, #4]
 80083b8:	f7ff ff82 	bl	80082c0 <std>
 80083bc:	68a0      	ldr	r0, [r4, #8]
 80083be:	2201      	movs	r2, #1
 80083c0:	2109      	movs	r1, #9
 80083c2:	f7ff ff7d 	bl	80082c0 <std>
 80083c6:	68e0      	ldr	r0, [r4, #12]
 80083c8:	2202      	movs	r2, #2
 80083ca:	2112      	movs	r1, #18
 80083cc:	f7ff ff78 	bl	80082c0 <std>
 80083d0:	2301      	movs	r3, #1
 80083d2:	61a3      	str	r3, [r4, #24]
 80083d4:	e7d2      	b.n	800837c <__sinit+0xc>
 80083d6:	bf00      	nop
 80083d8:	08008f70 	.word	0x08008f70
 80083dc:	08008309 	.word	0x08008309

080083e0 <__sfp>:
 80083e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083e2:	4607      	mov	r7, r0
 80083e4:	f7ff ffac 	bl	8008340 <__sfp_lock_acquire>
 80083e8:	4b1e      	ldr	r3, [pc, #120]	; (8008464 <__sfp+0x84>)
 80083ea:	681e      	ldr	r6, [r3, #0]
 80083ec:	69b3      	ldr	r3, [r6, #24]
 80083ee:	b913      	cbnz	r3, 80083f6 <__sfp+0x16>
 80083f0:	4630      	mov	r0, r6
 80083f2:	f7ff ffbd 	bl	8008370 <__sinit>
 80083f6:	3648      	adds	r6, #72	; 0x48
 80083f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80083fc:	3b01      	subs	r3, #1
 80083fe:	d503      	bpl.n	8008408 <__sfp+0x28>
 8008400:	6833      	ldr	r3, [r6, #0]
 8008402:	b30b      	cbz	r3, 8008448 <__sfp+0x68>
 8008404:	6836      	ldr	r6, [r6, #0]
 8008406:	e7f7      	b.n	80083f8 <__sfp+0x18>
 8008408:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800840c:	b9d5      	cbnz	r5, 8008444 <__sfp+0x64>
 800840e:	4b16      	ldr	r3, [pc, #88]	; (8008468 <__sfp+0x88>)
 8008410:	60e3      	str	r3, [r4, #12]
 8008412:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008416:	6665      	str	r5, [r4, #100]	; 0x64
 8008418:	f000 f847 	bl	80084aa <__retarget_lock_init_recursive>
 800841c:	f7ff ff96 	bl	800834c <__sfp_lock_release>
 8008420:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008424:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008428:	6025      	str	r5, [r4, #0]
 800842a:	61a5      	str	r5, [r4, #24]
 800842c:	2208      	movs	r2, #8
 800842e:	4629      	mov	r1, r5
 8008430:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008434:	f7ff fda2 	bl	8007f7c <memset>
 8008438:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800843c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008440:	4620      	mov	r0, r4
 8008442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008444:	3468      	adds	r4, #104	; 0x68
 8008446:	e7d9      	b.n	80083fc <__sfp+0x1c>
 8008448:	2104      	movs	r1, #4
 800844a:	4638      	mov	r0, r7
 800844c:	f7ff ff62 	bl	8008314 <__sfmoreglue>
 8008450:	4604      	mov	r4, r0
 8008452:	6030      	str	r0, [r6, #0]
 8008454:	2800      	cmp	r0, #0
 8008456:	d1d5      	bne.n	8008404 <__sfp+0x24>
 8008458:	f7ff ff78 	bl	800834c <__sfp_lock_release>
 800845c:	230c      	movs	r3, #12
 800845e:	603b      	str	r3, [r7, #0]
 8008460:	e7ee      	b.n	8008440 <__sfp+0x60>
 8008462:	bf00      	nop
 8008464:	08008f70 	.word	0x08008f70
 8008468:	ffff0001 	.word	0xffff0001

0800846c <_fwalk_reent>:
 800846c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008470:	4606      	mov	r6, r0
 8008472:	4688      	mov	r8, r1
 8008474:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008478:	2700      	movs	r7, #0
 800847a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800847e:	f1b9 0901 	subs.w	r9, r9, #1
 8008482:	d505      	bpl.n	8008490 <_fwalk_reent+0x24>
 8008484:	6824      	ldr	r4, [r4, #0]
 8008486:	2c00      	cmp	r4, #0
 8008488:	d1f7      	bne.n	800847a <_fwalk_reent+0xe>
 800848a:	4638      	mov	r0, r7
 800848c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008490:	89ab      	ldrh	r3, [r5, #12]
 8008492:	2b01      	cmp	r3, #1
 8008494:	d907      	bls.n	80084a6 <_fwalk_reent+0x3a>
 8008496:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800849a:	3301      	adds	r3, #1
 800849c:	d003      	beq.n	80084a6 <_fwalk_reent+0x3a>
 800849e:	4629      	mov	r1, r5
 80084a0:	4630      	mov	r0, r6
 80084a2:	47c0      	blx	r8
 80084a4:	4307      	orrs	r7, r0
 80084a6:	3568      	adds	r5, #104	; 0x68
 80084a8:	e7e9      	b.n	800847e <_fwalk_reent+0x12>

080084aa <__retarget_lock_init_recursive>:
 80084aa:	4770      	bx	lr

080084ac <__retarget_lock_acquire_recursive>:
 80084ac:	4770      	bx	lr

080084ae <__retarget_lock_release_recursive>:
 80084ae:	4770      	bx	lr

080084b0 <__swhatbuf_r>:
 80084b0:	b570      	push	{r4, r5, r6, lr}
 80084b2:	460e      	mov	r6, r1
 80084b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084b8:	2900      	cmp	r1, #0
 80084ba:	b096      	sub	sp, #88	; 0x58
 80084bc:	4614      	mov	r4, r2
 80084be:	461d      	mov	r5, r3
 80084c0:	da08      	bge.n	80084d4 <__swhatbuf_r+0x24>
 80084c2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80084c6:	2200      	movs	r2, #0
 80084c8:	602a      	str	r2, [r5, #0]
 80084ca:	061a      	lsls	r2, r3, #24
 80084cc:	d410      	bmi.n	80084f0 <__swhatbuf_r+0x40>
 80084ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084d2:	e00e      	b.n	80084f2 <__swhatbuf_r+0x42>
 80084d4:	466a      	mov	r2, sp
 80084d6:	f000 fc95 	bl	8008e04 <_fstat_r>
 80084da:	2800      	cmp	r0, #0
 80084dc:	dbf1      	blt.n	80084c2 <__swhatbuf_r+0x12>
 80084de:	9a01      	ldr	r2, [sp, #4]
 80084e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80084e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80084e8:	425a      	negs	r2, r3
 80084ea:	415a      	adcs	r2, r3
 80084ec:	602a      	str	r2, [r5, #0]
 80084ee:	e7ee      	b.n	80084ce <__swhatbuf_r+0x1e>
 80084f0:	2340      	movs	r3, #64	; 0x40
 80084f2:	2000      	movs	r0, #0
 80084f4:	6023      	str	r3, [r4, #0]
 80084f6:	b016      	add	sp, #88	; 0x58
 80084f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080084fc <__smakebuf_r>:
 80084fc:	898b      	ldrh	r3, [r1, #12]
 80084fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008500:	079d      	lsls	r5, r3, #30
 8008502:	4606      	mov	r6, r0
 8008504:	460c      	mov	r4, r1
 8008506:	d507      	bpl.n	8008518 <__smakebuf_r+0x1c>
 8008508:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800850c:	6023      	str	r3, [r4, #0]
 800850e:	6123      	str	r3, [r4, #16]
 8008510:	2301      	movs	r3, #1
 8008512:	6163      	str	r3, [r4, #20]
 8008514:	b002      	add	sp, #8
 8008516:	bd70      	pop	{r4, r5, r6, pc}
 8008518:	ab01      	add	r3, sp, #4
 800851a:	466a      	mov	r2, sp
 800851c:	f7ff ffc8 	bl	80084b0 <__swhatbuf_r>
 8008520:	9900      	ldr	r1, [sp, #0]
 8008522:	4605      	mov	r5, r0
 8008524:	4630      	mov	r0, r6
 8008526:	f000 f895 	bl	8008654 <_malloc_r>
 800852a:	b948      	cbnz	r0, 8008540 <__smakebuf_r+0x44>
 800852c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008530:	059a      	lsls	r2, r3, #22
 8008532:	d4ef      	bmi.n	8008514 <__smakebuf_r+0x18>
 8008534:	f023 0303 	bic.w	r3, r3, #3
 8008538:	f043 0302 	orr.w	r3, r3, #2
 800853c:	81a3      	strh	r3, [r4, #12]
 800853e:	e7e3      	b.n	8008508 <__smakebuf_r+0xc>
 8008540:	4b0d      	ldr	r3, [pc, #52]	; (8008578 <__smakebuf_r+0x7c>)
 8008542:	62b3      	str	r3, [r6, #40]	; 0x28
 8008544:	89a3      	ldrh	r3, [r4, #12]
 8008546:	6020      	str	r0, [r4, #0]
 8008548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800854c:	81a3      	strh	r3, [r4, #12]
 800854e:	9b00      	ldr	r3, [sp, #0]
 8008550:	6163      	str	r3, [r4, #20]
 8008552:	9b01      	ldr	r3, [sp, #4]
 8008554:	6120      	str	r0, [r4, #16]
 8008556:	b15b      	cbz	r3, 8008570 <__smakebuf_r+0x74>
 8008558:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800855c:	4630      	mov	r0, r6
 800855e:	f000 fc63 	bl	8008e28 <_isatty_r>
 8008562:	b128      	cbz	r0, 8008570 <__smakebuf_r+0x74>
 8008564:	89a3      	ldrh	r3, [r4, #12]
 8008566:	f023 0303 	bic.w	r3, r3, #3
 800856a:	f043 0301 	orr.w	r3, r3, #1
 800856e:	81a3      	strh	r3, [r4, #12]
 8008570:	89a0      	ldrh	r0, [r4, #12]
 8008572:	4305      	orrs	r5, r0
 8008574:	81a5      	strh	r5, [r4, #12]
 8008576:	e7cd      	b.n	8008514 <__smakebuf_r+0x18>
 8008578:	08008309 	.word	0x08008309

0800857c <_free_r>:
 800857c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800857e:	2900      	cmp	r1, #0
 8008580:	d044      	beq.n	800860c <_free_r+0x90>
 8008582:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008586:	9001      	str	r0, [sp, #4]
 8008588:	2b00      	cmp	r3, #0
 800858a:	f1a1 0404 	sub.w	r4, r1, #4
 800858e:	bfb8      	it	lt
 8008590:	18e4      	addlt	r4, r4, r3
 8008592:	f000 fc6b 	bl	8008e6c <__malloc_lock>
 8008596:	4a1e      	ldr	r2, [pc, #120]	; (8008610 <_free_r+0x94>)
 8008598:	9801      	ldr	r0, [sp, #4]
 800859a:	6813      	ldr	r3, [r2, #0]
 800859c:	b933      	cbnz	r3, 80085ac <_free_r+0x30>
 800859e:	6063      	str	r3, [r4, #4]
 80085a0:	6014      	str	r4, [r2, #0]
 80085a2:	b003      	add	sp, #12
 80085a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085a8:	f000 bc66 	b.w	8008e78 <__malloc_unlock>
 80085ac:	42a3      	cmp	r3, r4
 80085ae:	d908      	bls.n	80085c2 <_free_r+0x46>
 80085b0:	6825      	ldr	r5, [r4, #0]
 80085b2:	1961      	adds	r1, r4, r5
 80085b4:	428b      	cmp	r3, r1
 80085b6:	bf01      	itttt	eq
 80085b8:	6819      	ldreq	r1, [r3, #0]
 80085ba:	685b      	ldreq	r3, [r3, #4]
 80085bc:	1949      	addeq	r1, r1, r5
 80085be:	6021      	streq	r1, [r4, #0]
 80085c0:	e7ed      	b.n	800859e <_free_r+0x22>
 80085c2:	461a      	mov	r2, r3
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	b10b      	cbz	r3, 80085cc <_free_r+0x50>
 80085c8:	42a3      	cmp	r3, r4
 80085ca:	d9fa      	bls.n	80085c2 <_free_r+0x46>
 80085cc:	6811      	ldr	r1, [r2, #0]
 80085ce:	1855      	adds	r5, r2, r1
 80085d0:	42a5      	cmp	r5, r4
 80085d2:	d10b      	bne.n	80085ec <_free_r+0x70>
 80085d4:	6824      	ldr	r4, [r4, #0]
 80085d6:	4421      	add	r1, r4
 80085d8:	1854      	adds	r4, r2, r1
 80085da:	42a3      	cmp	r3, r4
 80085dc:	6011      	str	r1, [r2, #0]
 80085de:	d1e0      	bne.n	80085a2 <_free_r+0x26>
 80085e0:	681c      	ldr	r4, [r3, #0]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	6053      	str	r3, [r2, #4]
 80085e6:	4421      	add	r1, r4
 80085e8:	6011      	str	r1, [r2, #0]
 80085ea:	e7da      	b.n	80085a2 <_free_r+0x26>
 80085ec:	d902      	bls.n	80085f4 <_free_r+0x78>
 80085ee:	230c      	movs	r3, #12
 80085f0:	6003      	str	r3, [r0, #0]
 80085f2:	e7d6      	b.n	80085a2 <_free_r+0x26>
 80085f4:	6825      	ldr	r5, [r4, #0]
 80085f6:	1961      	adds	r1, r4, r5
 80085f8:	428b      	cmp	r3, r1
 80085fa:	bf04      	itt	eq
 80085fc:	6819      	ldreq	r1, [r3, #0]
 80085fe:	685b      	ldreq	r3, [r3, #4]
 8008600:	6063      	str	r3, [r4, #4]
 8008602:	bf04      	itt	eq
 8008604:	1949      	addeq	r1, r1, r5
 8008606:	6021      	streq	r1, [r4, #0]
 8008608:	6054      	str	r4, [r2, #4]
 800860a:	e7ca      	b.n	80085a2 <_free_r+0x26>
 800860c:	b003      	add	sp, #12
 800860e:	bd30      	pop	{r4, r5, pc}
 8008610:	2000333c 	.word	0x2000333c

08008614 <sbrk_aligned>:
 8008614:	b570      	push	{r4, r5, r6, lr}
 8008616:	4e0e      	ldr	r6, [pc, #56]	; (8008650 <sbrk_aligned+0x3c>)
 8008618:	460c      	mov	r4, r1
 800861a:	6831      	ldr	r1, [r6, #0]
 800861c:	4605      	mov	r5, r0
 800861e:	b911      	cbnz	r1, 8008626 <sbrk_aligned+0x12>
 8008620:	f000 fb7a 	bl	8008d18 <_sbrk_r>
 8008624:	6030      	str	r0, [r6, #0]
 8008626:	4621      	mov	r1, r4
 8008628:	4628      	mov	r0, r5
 800862a:	f000 fb75 	bl	8008d18 <_sbrk_r>
 800862e:	1c43      	adds	r3, r0, #1
 8008630:	d00a      	beq.n	8008648 <sbrk_aligned+0x34>
 8008632:	1cc4      	adds	r4, r0, #3
 8008634:	f024 0403 	bic.w	r4, r4, #3
 8008638:	42a0      	cmp	r0, r4
 800863a:	d007      	beq.n	800864c <sbrk_aligned+0x38>
 800863c:	1a21      	subs	r1, r4, r0
 800863e:	4628      	mov	r0, r5
 8008640:	f000 fb6a 	bl	8008d18 <_sbrk_r>
 8008644:	3001      	adds	r0, #1
 8008646:	d101      	bne.n	800864c <sbrk_aligned+0x38>
 8008648:	f04f 34ff 	mov.w	r4, #4294967295
 800864c:	4620      	mov	r0, r4
 800864e:	bd70      	pop	{r4, r5, r6, pc}
 8008650:	20003340 	.word	0x20003340

08008654 <_malloc_r>:
 8008654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008658:	1ccd      	adds	r5, r1, #3
 800865a:	f025 0503 	bic.w	r5, r5, #3
 800865e:	3508      	adds	r5, #8
 8008660:	2d0c      	cmp	r5, #12
 8008662:	bf38      	it	cc
 8008664:	250c      	movcc	r5, #12
 8008666:	2d00      	cmp	r5, #0
 8008668:	4607      	mov	r7, r0
 800866a:	db01      	blt.n	8008670 <_malloc_r+0x1c>
 800866c:	42a9      	cmp	r1, r5
 800866e:	d905      	bls.n	800867c <_malloc_r+0x28>
 8008670:	230c      	movs	r3, #12
 8008672:	603b      	str	r3, [r7, #0]
 8008674:	2600      	movs	r6, #0
 8008676:	4630      	mov	r0, r6
 8008678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800867c:	4e2e      	ldr	r6, [pc, #184]	; (8008738 <_malloc_r+0xe4>)
 800867e:	f000 fbf5 	bl	8008e6c <__malloc_lock>
 8008682:	6833      	ldr	r3, [r6, #0]
 8008684:	461c      	mov	r4, r3
 8008686:	bb34      	cbnz	r4, 80086d6 <_malloc_r+0x82>
 8008688:	4629      	mov	r1, r5
 800868a:	4638      	mov	r0, r7
 800868c:	f7ff ffc2 	bl	8008614 <sbrk_aligned>
 8008690:	1c43      	adds	r3, r0, #1
 8008692:	4604      	mov	r4, r0
 8008694:	d14d      	bne.n	8008732 <_malloc_r+0xde>
 8008696:	6834      	ldr	r4, [r6, #0]
 8008698:	4626      	mov	r6, r4
 800869a:	2e00      	cmp	r6, #0
 800869c:	d140      	bne.n	8008720 <_malloc_r+0xcc>
 800869e:	6823      	ldr	r3, [r4, #0]
 80086a0:	4631      	mov	r1, r6
 80086a2:	4638      	mov	r0, r7
 80086a4:	eb04 0803 	add.w	r8, r4, r3
 80086a8:	f000 fb36 	bl	8008d18 <_sbrk_r>
 80086ac:	4580      	cmp	r8, r0
 80086ae:	d13a      	bne.n	8008726 <_malloc_r+0xd2>
 80086b0:	6821      	ldr	r1, [r4, #0]
 80086b2:	3503      	adds	r5, #3
 80086b4:	1a6d      	subs	r5, r5, r1
 80086b6:	f025 0503 	bic.w	r5, r5, #3
 80086ba:	3508      	adds	r5, #8
 80086bc:	2d0c      	cmp	r5, #12
 80086be:	bf38      	it	cc
 80086c0:	250c      	movcc	r5, #12
 80086c2:	4629      	mov	r1, r5
 80086c4:	4638      	mov	r0, r7
 80086c6:	f7ff ffa5 	bl	8008614 <sbrk_aligned>
 80086ca:	3001      	adds	r0, #1
 80086cc:	d02b      	beq.n	8008726 <_malloc_r+0xd2>
 80086ce:	6823      	ldr	r3, [r4, #0]
 80086d0:	442b      	add	r3, r5
 80086d2:	6023      	str	r3, [r4, #0]
 80086d4:	e00e      	b.n	80086f4 <_malloc_r+0xa0>
 80086d6:	6822      	ldr	r2, [r4, #0]
 80086d8:	1b52      	subs	r2, r2, r5
 80086da:	d41e      	bmi.n	800871a <_malloc_r+0xc6>
 80086dc:	2a0b      	cmp	r2, #11
 80086de:	d916      	bls.n	800870e <_malloc_r+0xba>
 80086e0:	1961      	adds	r1, r4, r5
 80086e2:	42a3      	cmp	r3, r4
 80086e4:	6025      	str	r5, [r4, #0]
 80086e6:	bf18      	it	ne
 80086e8:	6059      	strne	r1, [r3, #4]
 80086ea:	6863      	ldr	r3, [r4, #4]
 80086ec:	bf08      	it	eq
 80086ee:	6031      	streq	r1, [r6, #0]
 80086f0:	5162      	str	r2, [r4, r5]
 80086f2:	604b      	str	r3, [r1, #4]
 80086f4:	4638      	mov	r0, r7
 80086f6:	f104 060b 	add.w	r6, r4, #11
 80086fa:	f000 fbbd 	bl	8008e78 <__malloc_unlock>
 80086fe:	f026 0607 	bic.w	r6, r6, #7
 8008702:	1d23      	adds	r3, r4, #4
 8008704:	1af2      	subs	r2, r6, r3
 8008706:	d0b6      	beq.n	8008676 <_malloc_r+0x22>
 8008708:	1b9b      	subs	r3, r3, r6
 800870a:	50a3      	str	r3, [r4, r2]
 800870c:	e7b3      	b.n	8008676 <_malloc_r+0x22>
 800870e:	6862      	ldr	r2, [r4, #4]
 8008710:	42a3      	cmp	r3, r4
 8008712:	bf0c      	ite	eq
 8008714:	6032      	streq	r2, [r6, #0]
 8008716:	605a      	strne	r2, [r3, #4]
 8008718:	e7ec      	b.n	80086f4 <_malloc_r+0xa0>
 800871a:	4623      	mov	r3, r4
 800871c:	6864      	ldr	r4, [r4, #4]
 800871e:	e7b2      	b.n	8008686 <_malloc_r+0x32>
 8008720:	4634      	mov	r4, r6
 8008722:	6876      	ldr	r6, [r6, #4]
 8008724:	e7b9      	b.n	800869a <_malloc_r+0x46>
 8008726:	230c      	movs	r3, #12
 8008728:	603b      	str	r3, [r7, #0]
 800872a:	4638      	mov	r0, r7
 800872c:	f000 fba4 	bl	8008e78 <__malloc_unlock>
 8008730:	e7a1      	b.n	8008676 <_malloc_r+0x22>
 8008732:	6025      	str	r5, [r4, #0]
 8008734:	e7de      	b.n	80086f4 <_malloc_r+0xa0>
 8008736:	bf00      	nop
 8008738:	2000333c 	.word	0x2000333c

0800873c <__sfputc_r>:
 800873c:	6893      	ldr	r3, [r2, #8]
 800873e:	3b01      	subs	r3, #1
 8008740:	2b00      	cmp	r3, #0
 8008742:	b410      	push	{r4}
 8008744:	6093      	str	r3, [r2, #8]
 8008746:	da08      	bge.n	800875a <__sfputc_r+0x1e>
 8008748:	6994      	ldr	r4, [r2, #24]
 800874a:	42a3      	cmp	r3, r4
 800874c:	db01      	blt.n	8008752 <__sfputc_r+0x16>
 800874e:	290a      	cmp	r1, #10
 8008750:	d103      	bne.n	800875a <__sfputc_r+0x1e>
 8008752:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008756:	f7ff bc31 	b.w	8007fbc <__swbuf_r>
 800875a:	6813      	ldr	r3, [r2, #0]
 800875c:	1c58      	adds	r0, r3, #1
 800875e:	6010      	str	r0, [r2, #0]
 8008760:	7019      	strb	r1, [r3, #0]
 8008762:	4608      	mov	r0, r1
 8008764:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008768:	4770      	bx	lr

0800876a <__sfputs_r>:
 800876a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800876c:	4606      	mov	r6, r0
 800876e:	460f      	mov	r7, r1
 8008770:	4614      	mov	r4, r2
 8008772:	18d5      	adds	r5, r2, r3
 8008774:	42ac      	cmp	r4, r5
 8008776:	d101      	bne.n	800877c <__sfputs_r+0x12>
 8008778:	2000      	movs	r0, #0
 800877a:	e007      	b.n	800878c <__sfputs_r+0x22>
 800877c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008780:	463a      	mov	r2, r7
 8008782:	4630      	mov	r0, r6
 8008784:	f7ff ffda 	bl	800873c <__sfputc_r>
 8008788:	1c43      	adds	r3, r0, #1
 800878a:	d1f3      	bne.n	8008774 <__sfputs_r+0xa>
 800878c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008790 <_vfiprintf_r>:
 8008790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008794:	460d      	mov	r5, r1
 8008796:	b09d      	sub	sp, #116	; 0x74
 8008798:	4614      	mov	r4, r2
 800879a:	4698      	mov	r8, r3
 800879c:	4606      	mov	r6, r0
 800879e:	b118      	cbz	r0, 80087a8 <_vfiprintf_r+0x18>
 80087a0:	6983      	ldr	r3, [r0, #24]
 80087a2:	b90b      	cbnz	r3, 80087a8 <_vfiprintf_r+0x18>
 80087a4:	f7ff fde4 	bl	8008370 <__sinit>
 80087a8:	4b89      	ldr	r3, [pc, #548]	; (80089d0 <_vfiprintf_r+0x240>)
 80087aa:	429d      	cmp	r5, r3
 80087ac:	d11b      	bne.n	80087e6 <_vfiprintf_r+0x56>
 80087ae:	6875      	ldr	r5, [r6, #4]
 80087b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087b2:	07d9      	lsls	r1, r3, #31
 80087b4:	d405      	bmi.n	80087c2 <_vfiprintf_r+0x32>
 80087b6:	89ab      	ldrh	r3, [r5, #12]
 80087b8:	059a      	lsls	r2, r3, #22
 80087ba:	d402      	bmi.n	80087c2 <_vfiprintf_r+0x32>
 80087bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087be:	f7ff fe75 	bl	80084ac <__retarget_lock_acquire_recursive>
 80087c2:	89ab      	ldrh	r3, [r5, #12]
 80087c4:	071b      	lsls	r3, r3, #28
 80087c6:	d501      	bpl.n	80087cc <_vfiprintf_r+0x3c>
 80087c8:	692b      	ldr	r3, [r5, #16]
 80087ca:	b9eb      	cbnz	r3, 8008808 <_vfiprintf_r+0x78>
 80087cc:	4629      	mov	r1, r5
 80087ce:	4630      	mov	r0, r6
 80087d0:	f7ff fc46 	bl	8008060 <__swsetup_r>
 80087d4:	b1c0      	cbz	r0, 8008808 <_vfiprintf_r+0x78>
 80087d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087d8:	07dc      	lsls	r4, r3, #31
 80087da:	d50e      	bpl.n	80087fa <_vfiprintf_r+0x6a>
 80087dc:	f04f 30ff 	mov.w	r0, #4294967295
 80087e0:	b01d      	add	sp, #116	; 0x74
 80087e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087e6:	4b7b      	ldr	r3, [pc, #492]	; (80089d4 <_vfiprintf_r+0x244>)
 80087e8:	429d      	cmp	r5, r3
 80087ea:	d101      	bne.n	80087f0 <_vfiprintf_r+0x60>
 80087ec:	68b5      	ldr	r5, [r6, #8]
 80087ee:	e7df      	b.n	80087b0 <_vfiprintf_r+0x20>
 80087f0:	4b79      	ldr	r3, [pc, #484]	; (80089d8 <_vfiprintf_r+0x248>)
 80087f2:	429d      	cmp	r5, r3
 80087f4:	bf08      	it	eq
 80087f6:	68f5      	ldreq	r5, [r6, #12]
 80087f8:	e7da      	b.n	80087b0 <_vfiprintf_r+0x20>
 80087fa:	89ab      	ldrh	r3, [r5, #12]
 80087fc:	0598      	lsls	r0, r3, #22
 80087fe:	d4ed      	bmi.n	80087dc <_vfiprintf_r+0x4c>
 8008800:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008802:	f7ff fe54 	bl	80084ae <__retarget_lock_release_recursive>
 8008806:	e7e9      	b.n	80087dc <_vfiprintf_r+0x4c>
 8008808:	2300      	movs	r3, #0
 800880a:	9309      	str	r3, [sp, #36]	; 0x24
 800880c:	2320      	movs	r3, #32
 800880e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008812:	f8cd 800c 	str.w	r8, [sp, #12]
 8008816:	2330      	movs	r3, #48	; 0x30
 8008818:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80089dc <_vfiprintf_r+0x24c>
 800881c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008820:	f04f 0901 	mov.w	r9, #1
 8008824:	4623      	mov	r3, r4
 8008826:	469a      	mov	sl, r3
 8008828:	f813 2b01 	ldrb.w	r2, [r3], #1
 800882c:	b10a      	cbz	r2, 8008832 <_vfiprintf_r+0xa2>
 800882e:	2a25      	cmp	r2, #37	; 0x25
 8008830:	d1f9      	bne.n	8008826 <_vfiprintf_r+0x96>
 8008832:	ebba 0b04 	subs.w	fp, sl, r4
 8008836:	d00b      	beq.n	8008850 <_vfiprintf_r+0xc0>
 8008838:	465b      	mov	r3, fp
 800883a:	4622      	mov	r2, r4
 800883c:	4629      	mov	r1, r5
 800883e:	4630      	mov	r0, r6
 8008840:	f7ff ff93 	bl	800876a <__sfputs_r>
 8008844:	3001      	adds	r0, #1
 8008846:	f000 80aa 	beq.w	800899e <_vfiprintf_r+0x20e>
 800884a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800884c:	445a      	add	r2, fp
 800884e:	9209      	str	r2, [sp, #36]	; 0x24
 8008850:	f89a 3000 	ldrb.w	r3, [sl]
 8008854:	2b00      	cmp	r3, #0
 8008856:	f000 80a2 	beq.w	800899e <_vfiprintf_r+0x20e>
 800885a:	2300      	movs	r3, #0
 800885c:	f04f 32ff 	mov.w	r2, #4294967295
 8008860:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008864:	f10a 0a01 	add.w	sl, sl, #1
 8008868:	9304      	str	r3, [sp, #16]
 800886a:	9307      	str	r3, [sp, #28]
 800886c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008870:	931a      	str	r3, [sp, #104]	; 0x68
 8008872:	4654      	mov	r4, sl
 8008874:	2205      	movs	r2, #5
 8008876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800887a:	4858      	ldr	r0, [pc, #352]	; (80089dc <_vfiprintf_r+0x24c>)
 800887c:	f7f7 fca8 	bl	80001d0 <memchr>
 8008880:	9a04      	ldr	r2, [sp, #16]
 8008882:	b9d8      	cbnz	r0, 80088bc <_vfiprintf_r+0x12c>
 8008884:	06d1      	lsls	r1, r2, #27
 8008886:	bf44      	itt	mi
 8008888:	2320      	movmi	r3, #32
 800888a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800888e:	0713      	lsls	r3, r2, #28
 8008890:	bf44      	itt	mi
 8008892:	232b      	movmi	r3, #43	; 0x2b
 8008894:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008898:	f89a 3000 	ldrb.w	r3, [sl]
 800889c:	2b2a      	cmp	r3, #42	; 0x2a
 800889e:	d015      	beq.n	80088cc <_vfiprintf_r+0x13c>
 80088a0:	9a07      	ldr	r2, [sp, #28]
 80088a2:	4654      	mov	r4, sl
 80088a4:	2000      	movs	r0, #0
 80088a6:	f04f 0c0a 	mov.w	ip, #10
 80088aa:	4621      	mov	r1, r4
 80088ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088b0:	3b30      	subs	r3, #48	; 0x30
 80088b2:	2b09      	cmp	r3, #9
 80088b4:	d94e      	bls.n	8008954 <_vfiprintf_r+0x1c4>
 80088b6:	b1b0      	cbz	r0, 80088e6 <_vfiprintf_r+0x156>
 80088b8:	9207      	str	r2, [sp, #28]
 80088ba:	e014      	b.n	80088e6 <_vfiprintf_r+0x156>
 80088bc:	eba0 0308 	sub.w	r3, r0, r8
 80088c0:	fa09 f303 	lsl.w	r3, r9, r3
 80088c4:	4313      	orrs	r3, r2
 80088c6:	9304      	str	r3, [sp, #16]
 80088c8:	46a2      	mov	sl, r4
 80088ca:	e7d2      	b.n	8008872 <_vfiprintf_r+0xe2>
 80088cc:	9b03      	ldr	r3, [sp, #12]
 80088ce:	1d19      	adds	r1, r3, #4
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	9103      	str	r1, [sp, #12]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	bfbb      	ittet	lt
 80088d8:	425b      	neglt	r3, r3
 80088da:	f042 0202 	orrlt.w	r2, r2, #2
 80088de:	9307      	strge	r3, [sp, #28]
 80088e0:	9307      	strlt	r3, [sp, #28]
 80088e2:	bfb8      	it	lt
 80088e4:	9204      	strlt	r2, [sp, #16]
 80088e6:	7823      	ldrb	r3, [r4, #0]
 80088e8:	2b2e      	cmp	r3, #46	; 0x2e
 80088ea:	d10c      	bne.n	8008906 <_vfiprintf_r+0x176>
 80088ec:	7863      	ldrb	r3, [r4, #1]
 80088ee:	2b2a      	cmp	r3, #42	; 0x2a
 80088f0:	d135      	bne.n	800895e <_vfiprintf_r+0x1ce>
 80088f2:	9b03      	ldr	r3, [sp, #12]
 80088f4:	1d1a      	adds	r2, r3, #4
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	9203      	str	r2, [sp, #12]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	bfb8      	it	lt
 80088fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8008902:	3402      	adds	r4, #2
 8008904:	9305      	str	r3, [sp, #20]
 8008906:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80089ec <_vfiprintf_r+0x25c>
 800890a:	7821      	ldrb	r1, [r4, #0]
 800890c:	2203      	movs	r2, #3
 800890e:	4650      	mov	r0, sl
 8008910:	f7f7 fc5e 	bl	80001d0 <memchr>
 8008914:	b140      	cbz	r0, 8008928 <_vfiprintf_r+0x198>
 8008916:	2340      	movs	r3, #64	; 0x40
 8008918:	eba0 000a 	sub.w	r0, r0, sl
 800891c:	fa03 f000 	lsl.w	r0, r3, r0
 8008920:	9b04      	ldr	r3, [sp, #16]
 8008922:	4303      	orrs	r3, r0
 8008924:	3401      	adds	r4, #1
 8008926:	9304      	str	r3, [sp, #16]
 8008928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800892c:	482c      	ldr	r0, [pc, #176]	; (80089e0 <_vfiprintf_r+0x250>)
 800892e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008932:	2206      	movs	r2, #6
 8008934:	f7f7 fc4c 	bl	80001d0 <memchr>
 8008938:	2800      	cmp	r0, #0
 800893a:	d03f      	beq.n	80089bc <_vfiprintf_r+0x22c>
 800893c:	4b29      	ldr	r3, [pc, #164]	; (80089e4 <_vfiprintf_r+0x254>)
 800893e:	bb1b      	cbnz	r3, 8008988 <_vfiprintf_r+0x1f8>
 8008940:	9b03      	ldr	r3, [sp, #12]
 8008942:	3307      	adds	r3, #7
 8008944:	f023 0307 	bic.w	r3, r3, #7
 8008948:	3308      	adds	r3, #8
 800894a:	9303      	str	r3, [sp, #12]
 800894c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800894e:	443b      	add	r3, r7
 8008950:	9309      	str	r3, [sp, #36]	; 0x24
 8008952:	e767      	b.n	8008824 <_vfiprintf_r+0x94>
 8008954:	fb0c 3202 	mla	r2, ip, r2, r3
 8008958:	460c      	mov	r4, r1
 800895a:	2001      	movs	r0, #1
 800895c:	e7a5      	b.n	80088aa <_vfiprintf_r+0x11a>
 800895e:	2300      	movs	r3, #0
 8008960:	3401      	adds	r4, #1
 8008962:	9305      	str	r3, [sp, #20]
 8008964:	4619      	mov	r1, r3
 8008966:	f04f 0c0a 	mov.w	ip, #10
 800896a:	4620      	mov	r0, r4
 800896c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008970:	3a30      	subs	r2, #48	; 0x30
 8008972:	2a09      	cmp	r2, #9
 8008974:	d903      	bls.n	800897e <_vfiprintf_r+0x1ee>
 8008976:	2b00      	cmp	r3, #0
 8008978:	d0c5      	beq.n	8008906 <_vfiprintf_r+0x176>
 800897a:	9105      	str	r1, [sp, #20]
 800897c:	e7c3      	b.n	8008906 <_vfiprintf_r+0x176>
 800897e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008982:	4604      	mov	r4, r0
 8008984:	2301      	movs	r3, #1
 8008986:	e7f0      	b.n	800896a <_vfiprintf_r+0x1da>
 8008988:	ab03      	add	r3, sp, #12
 800898a:	9300      	str	r3, [sp, #0]
 800898c:	462a      	mov	r2, r5
 800898e:	4b16      	ldr	r3, [pc, #88]	; (80089e8 <_vfiprintf_r+0x258>)
 8008990:	a904      	add	r1, sp, #16
 8008992:	4630      	mov	r0, r6
 8008994:	f3af 8000 	nop.w
 8008998:	4607      	mov	r7, r0
 800899a:	1c78      	adds	r0, r7, #1
 800899c:	d1d6      	bne.n	800894c <_vfiprintf_r+0x1bc>
 800899e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089a0:	07d9      	lsls	r1, r3, #31
 80089a2:	d405      	bmi.n	80089b0 <_vfiprintf_r+0x220>
 80089a4:	89ab      	ldrh	r3, [r5, #12]
 80089a6:	059a      	lsls	r2, r3, #22
 80089a8:	d402      	bmi.n	80089b0 <_vfiprintf_r+0x220>
 80089aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089ac:	f7ff fd7f 	bl	80084ae <__retarget_lock_release_recursive>
 80089b0:	89ab      	ldrh	r3, [r5, #12]
 80089b2:	065b      	lsls	r3, r3, #25
 80089b4:	f53f af12 	bmi.w	80087dc <_vfiprintf_r+0x4c>
 80089b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089ba:	e711      	b.n	80087e0 <_vfiprintf_r+0x50>
 80089bc:	ab03      	add	r3, sp, #12
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	462a      	mov	r2, r5
 80089c2:	4b09      	ldr	r3, [pc, #36]	; (80089e8 <_vfiprintf_r+0x258>)
 80089c4:	a904      	add	r1, sp, #16
 80089c6:	4630      	mov	r0, r6
 80089c8:	f000 f880 	bl	8008acc <_printf_i>
 80089cc:	e7e4      	b.n	8008998 <_vfiprintf_r+0x208>
 80089ce:	bf00      	nop
 80089d0:	08008f94 	.word	0x08008f94
 80089d4:	08008fb4 	.word	0x08008fb4
 80089d8:	08008f74 	.word	0x08008f74
 80089dc:	08008fd4 	.word	0x08008fd4
 80089e0:	08008fde 	.word	0x08008fde
 80089e4:	00000000 	.word	0x00000000
 80089e8:	0800876b 	.word	0x0800876b
 80089ec:	08008fda 	.word	0x08008fda

080089f0 <_printf_common>:
 80089f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089f4:	4616      	mov	r6, r2
 80089f6:	4699      	mov	r9, r3
 80089f8:	688a      	ldr	r2, [r1, #8]
 80089fa:	690b      	ldr	r3, [r1, #16]
 80089fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a00:	4293      	cmp	r3, r2
 8008a02:	bfb8      	it	lt
 8008a04:	4613      	movlt	r3, r2
 8008a06:	6033      	str	r3, [r6, #0]
 8008a08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a0c:	4607      	mov	r7, r0
 8008a0e:	460c      	mov	r4, r1
 8008a10:	b10a      	cbz	r2, 8008a16 <_printf_common+0x26>
 8008a12:	3301      	adds	r3, #1
 8008a14:	6033      	str	r3, [r6, #0]
 8008a16:	6823      	ldr	r3, [r4, #0]
 8008a18:	0699      	lsls	r1, r3, #26
 8008a1a:	bf42      	ittt	mi
 8008a1c:	6833      	ldrmi	r3, [r6, #0]
 8008a1e:	3302      	addmi	r3, #2
 8008a20:	6033      	strmi	r3, [r6, #0]
 8008a22:	6825      	ldr	r5, [r4, #0]
 8008a24:	f015 0506 	ands.w	r5, r5, #6
 8008a28:	d106      	bne.n	8008a38 <_printf_common+0x48>
 8008a2a:	f104 0a19 	add.w	sl, r4, #25
 8008a2e:	68e3      	ldr	r3, [r4, #12]
 8008a30:	6832      	ldr	r2, [r6, #0]
 8008a32:	1a9b      	subs	r3, r3, r2
 8008a34:	42ab      	cmp	r3, r5
 8008a36:	dc26      	bgt.n	8008a86 <_printf_common+0x96>
 8008a38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a3c:	1e13      	subs	r3, r2, #0
 8008a3e:	6822      	ldr	r2, [r4, #0]
 8008a40:	bf18      	it	ne
 8008a42:	2301      	movne	r3, #1
 8008a44:	0692      	lsls	r2, r2, #26
 8008a46:	d42b      	bmi.n	8008aa0 <_printf_common+0xb0>
 8008a48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a4c:	4649      	mov	r1, r9
 8008a4e:	4638      	mov	r0, r7
 8008a50:	47c0      	blx	r8
 8008a52:	3001      	adds	r0, #1
 8008a54:	d01e      	beq.n	8008a94 <_printf_common+0xa4>
 8008a56:	6823      	ldr	r3, [r4, #0]
 8008a58:	68e5      	ldr	r5, [r4, #12]
 8008a5a:	6832      	ldr	r2, [r6, #0]
 8008a5c:	f003 0306 	and.w	r3, r3, #6
 8008a60:	2b04      	cmp	r3, #4
 8008a62:	bf08      	it	eq
 8008a64:	1aad      	subeq	r5, r5, r2
 8008a66:	68a3      	ldr	r3, [r4, #8]
 8008a68:	6922      	ldr	r2, [r4, #16]
 8008a6a:	bf0c      	ite	eq
 8008a6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a70:	2500      	movne	r5, #0
 8008a72:	4293      	cmp	r3, r2
 8008a74:	bfc4      	itt	gt
 8008a76:	1a9b      	subgt	r3, r3, r2
 8008a78:	18ed      	addgt	r5, r5, r3
 8008a7a:	2600      	movs	r6, #0
 8008a7c:	341a      	adds	r4, #26
 8008a7e:	42b5      	cmp	r5, r6
 8008a80:	d11a      	bne.n	8008ab8 <_printf_common+0xc8>
 8008a82:	2000      	movs	r0, #0
 8008a84:	e008      	b.n	8008a98 <_printf_common+0xa8>
 8008a86:	2301      	movs	r3, #1
 8008a88:	4652      	mov	r2, sl
 8008a8a:	4649      	mov	r1, r9
 8008a8c:	4638      	mov	r0, r7
 8008a8e:	47c0      	blx	r8
 8008a90:	3001      	adds	r0, #1
 8008a92:	d103      	bne.n	8008a9c <_printf_common+0xac>
 8008a94:	f04f 30ff 	mov.w	r0, #4294967295
 8008a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a9c:	3501      	adds	r5, #1
 8008a9e:	e7c6      	b.n	8008a2e <_printf_common+0x3e>
 8008aa0:	18e1      	adds	r1, r4, r3
 8008aa2:	1c5a      	adds	r2, r3, #1
 8008aa4:	2030      	movs	r0, #48	; 0x30
 8008aa6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008aaa:	4422      	add	r2, r4
 8008aac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ab0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ab4:	3302      	adds	r3, #2
 8008ab6:	e7c7      	b.n	8008a48 <_printf_common+0x58>
 8008ab8:	2301      	movs	r3, #1
 8008aba:	4622      	mov	r2, r4
 8008abc:	4649      	mov	r1, r9
 8008abe:	4638      	mov	r0, r7
 8008ac0:	47c0      	blx	r8
 8008ac2:	3001      	adds	r0, #1
 8008ac4:	d0e6      	beq.n	8008a94 <_printf_common+0xa4>
 8008ac6:	3601      	adds	r6, #1
 8008ac8:	e7d9      	b.n	8008a7e <_printf_common+0x8e>
	...

08008acc <_printf_i>:
 8008acc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ad0:	7e0f      	ldrb	r7, [r1, #24]
 8008ad2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ad4:	2f78      	cmp	r7, #120	; 0x78
 8008ad6:	4691      	mov	r9, r2
 8008ad8:	4680      	mov	r8, r0
 8008ada:	460c      	mov	r4, r1
 8008adc:	469a      	mov	sl, r3
 8008ade:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008ae2:	d807      	bhi.n	8008af4 <_printf_i+0x28>
 8008ae4:	2f62      	cmp	r7, #98	; 0x62
 8008ae6:	d80a      	bhi.n	8008afe <_printf_i+0x32>
 8008ae8:	2f00      	cmp	r7, #0
 8008aea:	f000 80d8 	beq.w	8008c9e <_printf_i+0x1d2>
 8008aee:	2f58      	cmp	r7, #88	; 0x58
 8008af0:	f000 80a3 	beq.w	8008c3a <_printf_i+0x16e>
 8008af4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008af8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008afc:	e03a      	b.n	8008b74 <_printf_i+0xa8>
 8008afe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b02:	2b15      	cmp	r3, #21
 8008b04:	d8f6      	bhi.n	8008af4 <_printf_i+0x28>
 8008b06:	a101      	add	r1, pc, #4	; (adr r1, 8008b0c <_printf_i+0x40>)
 8008b08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b0c:	08008b65 	.word	0x08008b65
 8008b10:	08008b79 	.word	0x08008b79
 8008b14:	08008af5 	.word	0x08008af5
 8008b18:	08008af5 	.word	0x08008af5
 8008b1c:	08008af5 	.word	0x08008af5
 8008b20:	08008af5 	.word	0x08008af5
 8008b24:	08008b79 	.word	0x08008b79
 8008b28:	08008af5 	.word	0x08008af5
 8008b2c:	08008af5 	.word	0x08008af5
 8008b30:	08008af5 	.word	0x08008af5
 8008b34:	08008af5 	.word	0x08008af5
 8008b38:	08008c85 	.word	0x08008c85
 8008b3c:	08008ba9 	.word	0x08008ba9
 8008b40:	08008c67 	.word	0x08008c67
 8008b44:	08008af5 	.word	0x08008af5
 8008b48:	08008af5 	.word	0x08008af5
 8008b4c:	08008ca7 	.word	0x08008ca7
 8008b50:	08008af5 	.word	0x08008af5
 8008b54:	08008ba9 	.word	0x08008ba9
 8008b58:	08008af5 	.word	0x08008af5
 8008b5c:	08008af5 	.word	0x08008af5
 8008b60:	08008c6f 	.word	0x08008c6f
 8008b64:	682b      	ldr	r3, [r5, #0]
 8008b66:	1d1a      	adds	r2, r3, #4
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	602a      	str	r2, [r5, #0]
 8008b6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b74:	2301      	movs	r3, #1
 8008b76:	e0a3      	b.n	8008cc0 <_printf_i+0x1f4>
 8008b78:	6820      	ldr	r0, [r4, #0]
 8008b7a:	6829      	ldr	r1, [r5, #0]
 8008b7c:	0606      	lsls	r6, r0, #24
 8008b7e:	f101 0304 	add.w	r3, r1, #4
 8008b82:	d50a      	bpl.n	8008b9a <_printf_i+0xce>
 8008b84:	680e      	ldr	r6, [r1, #0]
 8008b86:	602b      	str	r3, [r5, #0]
 8008b88:	2e00      	cmp	r6, #0
 8008b8a:	da03      	bge.n	8008b94 <_printf_i+0xc8>
 8008b8c:	232d      	movs	r3, #45	; 0x2d
 8008b8e:	4276      	negs	r6, r6
 8008b90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b94:	485e      	ldr	r0, [pc, #376]	; (8008d10 <_printf_i+0x244>)
 8008b96:	230a      	movs	r3, #10
 8008b98:	e019      	b.n	8008bce <_printf_i+0x102>
 8008b9a:	680e      	ldr	r6, [r1, #0]
 8008b9c:	602b      	str	r3, [r5, #0]
 8008b9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ba2:	bf18      	it	ne
 8008ba4:	b236      	sxthne	r6, r6
 8008ba6:	e7ef      	b.n	8008b88 <_printf_i+0xbc>
 8008ba8:	682b      	ldr	r3, [r5, #0]
 8008baa:	6820      	ldr	r0, [r4, #0]
 8008bac:	1d19      	adds	r1, r3, #4
 8008bae:	6029      	str	r1, [r5, #0]
 8008bb0:	0601      	lsls	r1, r0, #24
 8008bb2:	d501      	bpl.n	8008bb8 <_printf_i+0xec>
 8008bb4:	681e      	ldr	r6, [r3, #0]
 8008bb6:	e002      	b.n	8008bbe <_printf_i+0xf2>
 8008bb8:	0646      	lsls	r6, r0, #25
 8008bba:	d5fb      	bpl.n	8008bb4 <_printf_i+0xe8>
 8008bbc:	881e      	ldrh	r6, [r3, #0]
 8008bbe:	4854      	ldr	r0, [pc, #336]	; (8008d10 <_printf_i+0x244>)
 8008bc0:	2f6f      	cmp	r7, #111	; 0x6f
 8008bc2:	bf0c      	ite	eq
 8008bc4:	2308      	moveq	r3, #8
 8008bc6:	230a      	movne	r3, #10
 8008bc8:	2100      	movs	r1, #0
 8008bca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008bce:	6865      	ldr	r5, [r4, #4]
 8008bd0:	60a5      	str	r5, [r4, #8]
 8008bd2:	2d00      	cmp	r5, #0
 8008bd4:	bfa2      	ittt	ge
 8008bd6:	6821      	ldrge	r1, [r4, #0]
 8008bd8:	f021 0104 	bicge.w	r1, r1, #4
 8008bdc:	6021      	strge	r1, [r4, #0]
 8008bde:	b90e      	cbnz	r6, 8008be4 <_printf_i+0x118>
 8008be0:	2d00      	cmp	r5, #0
 8008be2:	d04d      	beq.n	8008c80 <_printf_i+0x1b4>
 8008be4:	4615      	mov	r5, r2
 8008be6:	fbb6 f1f3 	udiv	r1, r6, r3
 8008bea:	fb03 6711 	mls	r7, r3, r1, r6
 8008bee:	5dc7      	ldrb	r7, [r0, r7]
 8008bf0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008bf4:	4637      	mov	r7, r6
 8008bf6:	42bb      	cmp	r3, r7
 8008bf8:	460e      	mov	r6, r1
 8008bfa:	d9f4      	bls.n	8008be6 <_printf_i+0x11a>
 8008bfc:	2b08      	cmp	r3, #8
 8008bfe:	d10b      	bne.n	8008c18 <_printf_i+0x14c>
 8008c00:	6823      	ldr	r3, [r4, #0]
 8008c02:	07de      	lsls	r6, r3, #31
 8008c04:	d508      	bpl.n	8008c18 <_printf_i+0x14c>
 8008c06:	6923      	ldr	r3, [r4, #16]
 8008c08:	6861      	ldr	r1, [r4, #4]
 8008c0a:	4299      	cmp	r1, r3
 8008c0c:	bfde      	ittt	le
 8008c0e:	2330      	movle	r3, #48	; 0x30
 8008c10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c14:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c18:	1b52      	subs	r2, r2, r5
 8008c1a:	6122      	str	r2, [r4, #16]
 8008c1c:	f8cd a000 	str.w	sl, [sp]
 8008c20:	464b      	mov	r3, r9
 8008c22:	aa03      	add	r2, sp, #12
 8008c24:	4621      	mov	r1, r4
 8008c26:	4640      	mov	r0, r8
 8008c28:	f7ff fee2 	bl	80089f0 <_printf_common>
 8008c2c:	3001      	adds	r0, #1
 8008c2e:	d14c      	bne.n	8008cca <_printf_i+0x1fe>
 8008c30:	f04f 30ff 	mov.w	r0, #4294967295
 8008c34:	b004      	add	sp, #16
 8008c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c3a:	4835      	ldr	r0, [pc, #212]	; (8008d10 <_printf_i+0x244>)
 8008c3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008c40:	6829      	ldr	r1, [r5, #0]
 8008c42:	6823      	ldr	r3, [r4, #0]
 8008c44:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c48:	6029      	str	r1, [r5, #0]
 8008c4a:	061d      	lsls	r5, r3, #24
 8008c4c:	d514      	bpl.n	8008c78 <_printf_i+0x1ac>
 8008c4e:	07df      	lsls	r7, r3, #31
 8008c50:	bf44      	itt	mi
 8008c52:	f043 0320 	orrmi.w	r3, r3, #32
 8008c56:	6023      	strmi	r3, [r4, #0]
 8008c58:	b91e      	cbnz	r6, 8008c62 <_printf_i+0x196>
 8008c5a:	6823      	ldr	r3, [r4, #0]
 8008c5c:	f023 0320 	bic.w	r3, r3, #32
 8008c60:	6023      	str	r3, [r4, #0]
 8008c62:	2310      	movs	r3, #16
 8008c64:	e7b0      	b.n	8008bc8 <_printf_i+0xfc>
 8008c66:	6823      	ldr	r3, [r4, #0]
 8008c68:	f043 0320 	orr.w	r3, r3, #32
 8008c6c:	6023      	str	r3, [r4, #0]
 8008c6e:	2378      	movs	r3, #120	; 0x78
 8008c70:	4828      	ldr	r0, [pc, #160]	; (8008d14 <_printf_i+0x248>)
 8008c72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c76:	e7e3      	b.n	8008c40 <_printf_i+0x174>
 8008c78:	0659      	lsls	r1, r3, #25
 8008c7a:	bf48      	it	mi
 8008c7c:	b2b6      	uxthmi	r6, r6
 8008c7e:	e7e6      	b.n	8008c4e <_printf_i+0x182>
 8008c80:	4615      	mov	r5, r2
 8008c82:	e7bb      	b.n	8008bfc <_printf_i+0x130>
 8008c84:	682b      	ldr	r3, [r5, #0]
 8008c86:	6826      	ldr	r6, [r4, #0]
 8008c88:	6961      	ldr	r1, [r4, #20]
 8008c8a:	1d18      	adds	r0, r3, #4
 8008c8c:	6028      	str	r0, [r5, #0]
 8008c8e:	0635      	lsls	r5, r6, #24
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	d501      	bpl.n	8008c98 <_printf_i+0x1cc>
 8008c94:	6019      	str	r1, [r3, #0]
 8008c96:	e002      	b.n	8008c9e <_printf_i+0x1d2>
 8008c98:	0670      	lsls	r0, r6, #25
 8008c9a:	d5fb      	bpl.n	8008c94 <_printf_i+0x1c8>
 8008c9c:	8019      	strh	r1, [r3, #0]
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	6123      	str	r3, [r4, #16]
 8008ca2:	4615      	mov	r5, r2
 8008ca4:	e7ba      	b.n	8008c1c <_printf_i+0x150>
 8008ca6:	682b      	ldr	r3, [r5, #0]
 8008ca8:	1d1a      	adds	r2, r3, #4
 8008caa:	602a      	str	r2, [r5, #0]
 8008cac:	681d      	ldr	r5, [r3, #0]
 8008cae:	6862      	ldr	r2, [r4, #4]
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	f7f7 fa8c 	bl	80001d0 <memchr>
 8008cb8:	b108      	cbz	r0, 8008cbe <_printf_i+0x1f2>
 8008cba:	1b40      	subs	r0, r0, r5
 8008cbc:	6060      	str	r0, [r4, #4]
 8008cbe:	6863      	ldr	r3, [r4, #4]
 8008cc0:	6123      	str	r3, [r4, #16]
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cc8:	e7a8      	b.n	8008c1c <_printf_i+0x150>
 8008cca:	6923      	ldr	r3, [r4, #16]
 8008ccc:	462a      	mov	r2, r5
 8008cce:	4649      	mov	r1, r9
 8008cd0:	4640      	mov	r0, r8
 8008cd2:	47d0      	blx	sl
 8008cd4:	3001      	adds	r0, #1
 8008cd6:	d0ab      	beq.n	8008c30 <_printf_i+0x164>
 8008cd8:	6823      	ldr	r3, [r4, #0]
 8008cda:	079b      	lsls	r3, r3, #30
 8008cdc:	d413      	bmi.n	8008d06 <_printf_i+0x23a>
 8008cde:	68e0      	ldr	r0, [r4, #12]
 8008ce0:	9b03      	ldr	r3, [sp, #12]
 8008ce2:	4298      	cmp	r0, r3
 8008ce4:	bfb8      	it	lt
 8008ce6:	4618      	movlt	r0, r3
 8008ce8:	e7a4      	b.n	8008c34 <_printf_i+0x168>
 8008cea:	2301      	movs	r3, #1
 8008cec:	4632      	mov	r2, r6
 8008cee:	4649      	mov	r1, r9
 8008cf0:	4640      	mov	r0, r8
 8008cf2:	47d0      	blx	sl
 8008cf4:	3001      	adds	r0, #1
 8008cf6:	d09b      	beq.n	8008c30 <_printf_i+0x164>
 8008cf8:	3501      	adds	r5, #1
 8008cfa:	68e3      	ldr	r3, [r4, #12]
 8008cfc:	9903      	ldr	r1, [sp, #12]
 8008cfe:	1a5b      	subs	r3, r3, r1
 8008d00:	42ab      	cmp	r3, r5
 8008d02:	dcf2      	bgt.n	8008cea <_printf_i+0x21e>
 8008d04:	e7eb      	b.n	8008cde <_printf_i+0x212>
 8008d06:	2500      	movs	r5, #0
 8008d08:	f104 0619 	add.w	r6, r4, #25
 8008d0c:	e7f5      	b.n	8008cfa <_printf_i+0x22e>
 8008d0e:	bf00      	nop
 8008d10:	08008fe5 	.word	0x08008fe5
 8008d14:	08008ff6 	.word	0x08008ff6

08008d18 <_sbrk_r>:
 8008d18:	b538      	push	{r3, r4, r5, lr}
 8008d1a:	4d06      	ldr	r5, [pc, #24]	; (8008d34 <_sbrk_r+0x1c>)
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	4604      	mov	r4, r0
 8008d20:	4608      	mov	r0, r1
 8008d22:	602b      	str	r3, [r5, #0]
 8008d24:	f7f8 fa60 	bl	80011e8 <_sbrk>
 8008d28:	1c43      	adds	r3, r0, #1
 8008d2a:	d102      	bne.n	8008d32 <_sbrk_r+0x1a>
 8008d2c:	682b      	ldr	r3, [r5, #0]
 8008d2e:	b103      	cbz	r3, 8008d32 <_sbrk_r+0x1a>
 8008d30:	6023      	str	r3, [r4, #0]
 8008d32:	bd38      	pop	{r3, r4, r5, pc}
 8008d34:	20003344 	.word	0x20003344

08008d38 <__sread>:
 8008d38:	b510      	push	{r4, lr}
 8008d3a:	460c      	mov	r4, r1
 8008d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d40:	f000 f8a0 	bl	8008e84 <_read_r>
 8008d44:	2800      	cmp	r0, #0
 8008d46:	bfab      	itete	ge
 8008d48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d4a:	89a3      	ldrhlt	r3, [r4, #12]
 8008d4c:	181b      	addge	r3, r3, r0
 8008d4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d52:	bfac      	ite	ge
 8008d54:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d56:	81a3      	strhlt	r3, [r4, #12]
 8008d58:	bd10      	pop	{r4, pc}

08008d5a <__swrite>:
 8008d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d5e:	461f      	mov	r7, r3
 8008d60:	898b      	ldrh	r3, [r1, #12]
 8008d62:	05db      	lsls	r3, r3, #23
 8008d64:	4605      	mov	r5, r0
 8008d66:	460c      	mov	r4, r1
 8008d68:	4616      	mov	r6, r2
 8008d6a:	d505      	bpl.n	8008d78 <__swrite+0x1e>
 8008d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d70:	2302      	movs	r3, #2
 8008d72:	2200      	movs	r2, #0
 8008d74:	f000 f868 	bl	8008e48 <_lseek_r>
 8008d78:	89a3      	ldrh	r3, [r4, #12]
 8008d7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d82:	81a3      	strh	r3, [r4, #12]
 8008d84:	4632      	mov	r2, r6
 8008d86:	463b      	mov	r3, r7
 8008d88:	4628      	mov	r0, r5
 8008d8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d8e:	f000 b817 	b.w	8008dc0 <_write_r>

08008d92 <__sseek>:
 8008d92:	b510      	push	{r4, lr}
 8008d94:	460c      	mov	r4, r1
 8008d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d9a:	f000 f855 	bl	8008e48 <_lseek_r>
 8008d9e:	1c43      	adds	r3, r0, #1
 8008da0:	89a3      	ldrh	r3, [r4, #12]
 8008da2:	bf15      	itete	ne
 8008da4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008da6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008daa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008dae:	81a3      	strheq	r3, [r4, #12]
 8008db0:	bf18      	it	ne
 8008db2:	81a3      	strhne	r3, [r4, #12]
 8008db4:	bd10      	pop	{r4, pc}

08008db6 <__sclose>:
 8008db6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dba:	f000 b813 	b.w	8008de4 <_close_r>
	...

08008dc0 <_write_r>:
 8008dc0:	b538      	push	{r3, r4, r5, lr}
 8008dc2:	4d07      	ldr	r5, [pc, #28]	; (8008de0 <_write_r+0x20>)
 8008dc4:	4604      	mov	r4, r0
 8008dc6:	4608      	mov	r0, r1
 8008dc8:	4611      	mov	r1, r2
 8008dca:	2200      	movs	r2, #0
 8008dcc:	602a      	str	r2, [r5, #0]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	f7f7 ff6a 	bl	8000ca8 <_write>
 8008dd4:	1c43      	adds	r3, r0, #1
 8008dd6:	d102      	bne.n	8008dde <_write_r+0x1e>
 8008dd8:	682b      	ldr	r3, [r5, #0]
 8008dda:	b103      	cbz	r3, 8008dde <_write_r+0x1e>
 8008ddc:	6023      	str	r3, [r4, #0]
 8008dde:	bd38      	pop	{r3, r4, r5, pc}
 8008de0:	20003344 	.word	0x20003344

08008de4 <_close_r>:
 8008de4:	b538      	push	{r3, r4, r5, lr}
 8008de6:	4d06      	ldr	r5, [pc, #24]	; (8008e00 <_close_r+0x1c>)
 8008de8:	2300      	movs	r3, #0
 8008dea:	4604      	mov	r4, r0
 8008dec:	4608      	mov	r0, r1
 8008dee:	602b      	str	r3, [r5, #0]
 8008df0:	f7f8 f9c5 	bl	800117e <_close>
 8008df4:	1c43      	adds	r3, r0, #1
 8008df6:	d102      	bne.n	8008dfe <_close_r+0x1a>
 8008df8:	682b      	ldr	r3, [r5, #0]
 8008dfa:	b103      	cbz	r3, 8008dfe <_close_r+0x1a>
 8008dfc:	6023      	str	r3, [r4, #0]
 8008dfe:	bd38      	pop	{r3, r4, r5, pc}
 8008e00:	20003344 	.word	0x20003344

08008e04 <_fstat_r>:
 8008e04:	b538      	push	{r3, r4, r5, lr}
 8008e06:	4d07      	ldr	r5, [pc, #28]	; (8008e24 <_fstat_r+0x20>)
 8008e08:	2300      	movs	r3, #0
 8008e0a:	4604      	mov	r4, r0
 8008e0c:	4608      	mov	r0, r1
 8008e0e:	4611      	mov	r1, r2
 8008e10:	602b      	str	r3, [r5, #0]
 8008e12:	f7f8 f9c0 	bl	8001196 <_fstat>
 8008e16:	1c43      	adds	r3, r0, #1
 8008e18:	d102      	bne.n	8008e20 <_fstat_r+0x1c>
 8008e1a:	682b      	ldr	r3, [r5, #0]
 8008e1c:	b103      	cbz	r3, 8008e20 <_fstat_r+0x1c>
 8008e1e:	6023      	str	r3, [r4, #0]
 8008e20:	bd38      	pop	{r3, r4, r5, pc}
 8008e22:	bf00      	nop
 8008e24:	20003344 	.word	0x20003344

08008e28 <_isatty_r>:
 8008e28:	b538      	push	{r3, r4, r5, lr}
 8008e2a:	4d06      	ldr	r5, [pc, #24]	; (8008e44 <_isatty_r+0x1c>)
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	4604      	mov	r4, r0
 8008e30:	4608      	mov	r0, r1
 8008e32:	602b      	str	r3, [r5, #0]
 8008e34:	f7f8 f9bf 	bl	80011b6 <_isatty>
 8008e38:	1c43      	adds	r3, r0, #1
 8008e3a:	d102      	bne.n	8008e42 <_isatty_r+0x1a>
 8008e3c:	682b      	ldr	r3, [r5, #0]
 8008e3e:	b103      	cbz	r3, 8008e42 <_isatty_r+0x1a>
 8008e40:	6023      	str	r3, [r4, #0]
 8008e42:	bd38      	pop	{r3, r4, r5, pc}
 8008e44:	20003344 	.word	0x20003344

08008e48 <_lseek_r>:
 8008e48:	b538      	push	{r3, r4, r5, lr}
 8008e4a:	4d07      	ldr	r5, [pc, #28]	; (8008e68 <_lseek_r+0x20>)
 8008e4c:	4604      	mov	r4, r0
 8008e4e:	4608      	mov	r0, r1
 8008e50:	4611      	mov	r1, r2
 8008e52:	2200      	movs	r2, #0
 8008e54:	602a      	str	r2, [r5, #0]
 8008e56:	461a      	mov	r2, r3
 8008e58:	f7f8 f9b8 	bl	80011cc <_lseek>
 8008e5c:	1c43      	adds	r3, r0, #1
 8008e5e:	d102      	bne.n	8008e66 <_lseek_r+0x1e>
 8008e60:	682b      	ldr	r3, [r5, #0]
 8008e62:	b103      	cbz	r3, 8008e66 <_lseek_r+0x1e>
 8008e64:	6023      	str	r3, [r4, #0]
 8008e66:	bd38      	pop	{r3, r4, r5, pc}
 8008e68:	20003344 	.word	0x20003344

08008e6c <__malloc_lock>:
 8008e6c:	4801      	ldr	r0, [pc, #4]	; (8008e74 <__malloc_lock+0x8>)
 8008e6e:	f7ff bb1d 	b.w	80084ac <__retarget_lock_acquire_recursive>
 8008e72:	bf00      	nop
 8008e74:	20003338 	.word	0x20003338

08008e78 <__malloc_unlock>:
 8008e78:	4801      	ldr	r0, [pc, #4]	; (8008e80 <__malloc_unlock+0x8>)
 8008e7a:	f7ff bb18 	b.w	80084ae <__retarget_lock_release_recursive>
 8008e7e:	bf00      	nop
 8008e80:	20003338 	.word	0x20003338

08008e84 <_read_r>:
 8008e84:	b538      	push	{r3, r4, r5, lr}
 8008e86:	4d07      	ldr	r5, [pc, #28]	; (8008ea4 <_read_r+0x20>)
 8008e88:	4604      	mov	r4, r0
 8008e8a:	4608      	mov	r0, r1
 8008e8c:	4611      	mov	r1, r2
 8008e8e:	2200      	movs	r2, #0
 8008e90:	602a      	str	r2, [r5, #0]
 8008e92:	461a      	mov	r2, r3
 8008e94:	f7f8 f956 	bl	8001144 <_read>
 8008e98:	1c43      	adds	r3, r0, #1
 8008e9a:	d102      	bne.n	8008ea2 <_read_r+0x1e>
 8008e9c:	682b      	ldr	r3, [r5, #0]
 8008e9e:	b103      	cbz	r3, 8008ea2 <_read_r+0x1e>
 8008ea0:	6023      	str	r3, [r4, #0]
 8008ea2:	bd38      	pop	{r3, r4, r5, pc}
 8008ea4:	20003344 	.word	0x20003344

08008ea8 <_init>:
 8008ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eaa:	bf00      	nop
 8008eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eae:	bc08      	pop	{r3}
 8008eb0:	469e      	mov	lr, r3
 8008eb2:	4770      	bx	lr

08008eb4 <_fini>:
 8008eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eb6:	bf00      	nop
 8008eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eba:	bc08      	pop	{r3}
 8008ebc:	469e      	mov	lr, r3
 8008ebe:	4770      	bx	lr
