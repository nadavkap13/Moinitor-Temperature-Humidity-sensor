
Temperture_Monitoring_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001430c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b6c  080144a0  080144a0  000244a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801500c  0801500c  00030220  2**0
                  CONTENTS
  4 .ARM          00000008  0801500c  0801500c  0002500c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015014  08015014  00030220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08015014  08015014  00025014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0801501c  0801501c  0002501c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08015024  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005c14  20000220  08015244  00030220  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005e34  08015244  00035e34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032044  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006fdf  00000000  00000000  00062294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002670  00000000  00000000  00069278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023c8  00000000  00000000  0006b8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00009dd0  00000000  00000000  0006dcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030d61  00000000  00000000  00077a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001094b5  00000000  00000000  000a87e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b1c96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b81c  00000000  00000000  001b1ce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000220 	.word	0x20000220
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014484 	.word	0x08014484

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000224 	.word	0x20000224
 80001cc:	08014484 	.word	0x08014484

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <_ZN3CliD1Ev>:

class Cli{
public:
	virtual void doCommand(const char * param) = 0;

	virtual ~Cli(){}
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <_ZN3CliD1Ev+0x1c>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4618      	mov	r0, r3
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	08014a44 	.word	0x08014a44

08000eec <_ZN3CliD0Ev>:
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff ffe9 	bl	8000ecc <_ZN3CliD1Ev>
 8000efa:	2104      	movs	r1, #4
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f00f fdb5 	bl	8010a6c <_ZdlPvj>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <_ZN12CliContainer15registerCommandEPKcP3Cli>:
	CliCommandEntry commands[20];
	int funcounter = 0;
public:
	CliContainer(){}
	~CliContainer(){}
	void registerCommand(const  char* CommandName, Cli * clicommand) {
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
		commands[funcounter].CommandName = CommandName;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	68b9      	ldr	r1, [r7, #8]
 8000f22:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
		commands[funcounter].command = clicommand;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000f2c:	68fa      	ldr	r2, [r7, #12]
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	4413      	add	r3, r2
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	605a      	str	r2, [r3, #4]
		funcounter++;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000f3c:	1c5a      	adds	r2, r3, #1
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	}
 8000f44:	bf00      	nop
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <_ZN7Monitor15setWarningValueEd>:
private:
	thresHolds _values;
	MointorState _state;
public:
	Monitor(){}
	void setWarningValue(double num)
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	ed87 0b00 	vstr	d0, [r7]
	{
		_values._warning = num;
 8000f5c:	68f9      	ldr	r1, [r7, #12]
 8000f5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f62:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
 8000f66:	bf00      	nop
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <_ZN7Monitor16setCriticalValueEd>:
	void setCriticalValue(double num)
 8000f72:	b480      	push	{r7}
 8000f74:	b085      	sub	sp, #20
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	60f8      	str	r0, [r7, #12]
 8000f7a:	ed87 0b00 	vstr	d0, [r7]
	{
		_values._critical = num;
 8000f7e:	68f9      	ldr	r1, [r7, #12]
 8000f80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f84:	e9c1 2304 	strd	r2, r3, [r1, #16]
	}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <_ZN7Monitor13getThresHoldsEv>:
	}
	void setState(MointorState State)
	{
		_state = State;
	}
	thresHolds * getThresHolds()
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	{
		return  &_values;
 8000f9c:	687b      	ldr	r3, [r7, #4]
	}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <_ZN4File4readEv>:
		this->_file = file;
		this->_FatFs = FatFs;
		this->_fres = fres;
		strcpy(_filename,name);
	}
	void read()
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b0b6      	sub	sp, #216	; 0xd8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	{
	  //Now let's try to open file "test.txt"
	  _fres = f_open(&_file, _filename , FA_READ);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f00b fa70 	bl	800c4a4 <f_open>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f883 2478 	strb.w	r2, [r3, #1144]	; 0x478
	  if (_fres != FR_OK) {
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f893 3478 	ldrb.w	r3, [r3, #1144]	; 0x478
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d007      	beq.n	8000fe8 <_ZN4File4readEv+0x3c>
		printf("f_open error (%i)\r\n", _fres);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f893 3478 	ldrb.w	r3, [r3, #1144]	; 0x478
 8000fde:	4619      	mov	r1, r3
 8000fe0:	481b      	ldr	r0, [pc, #108]	; (8001050 <_ZN4File4readEv+0xa4>)
 8000fe2:	f010 fb1b 	bl	801161c <iprintf>
		while(1);
 8000fe6:	e7fe      	b.n	8000fe6 <_ZN4File4readEv+0x3a>
	  }
	  printf("I was able to open 'log_file.txt' for reading!\r\n");
 8000fe8:	481a      	ldr	r0, [pc, #104]	; (8001054 <_ZN4File4readEv+0xa8>)
 8000fea:	f010 fb9d 	bl	8011728 <puts>
	  //Read 30 bytes from "test.txt" on the SD card
	  BYTE readBuf[200];

	  //We can either use f_read OR f_gets to get data out of files
	  //f_gets is a wrapper on f_read that does some string formatting for us
	  while(!f_eof(&_file)){
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d01d      	beq.n	800103a <_ZN4File4readEv+0x8e>
		  TCHAR* rres = f_gets((TCHAR*)readBuf, 200, &_file);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f503 7212 	add.w	r2, r3, #584	; 0x248
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	21c8      	movs	r1, #200	; 0xc8
 800100a:	4618      	mov	r0, r3
 800100c:	f00c f88b 	bl	800d126 <f_gets>
 8001010:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		  if(rres != 0) {
 8001014:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001018:	2b00      	cmp	r3, #0
 800101a:	d006      	beq.n	800102a <_ZN4File4readEv+0x7e>
			printf("Read string from 'log_file.txt' contents: %s\r\n", readBuf);
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	4619      	mov	r1, r3
 8001022:	480d      	ldr	r0, [pc, #52]	; (8001058 <_ZN4File4readEv+0xac>)
 8001024:	f010 fafa 	bl	801161c <iprintf>
 8001028:	e7e1      	b.n	8000fee <_ZN4File4readEv+0x42>
		  } else {
			printf("f_gets error (%i)\r\n", _fres);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f893 3478 	ldrb.w	r3, [r3, #1144]	; 0x478
 8001030:	4619      	mov	r1, r3
 8001032:	480a      	ldr	r0, [pc, #40]	; (800105c <_ZN4File4readEv+0xb0>)
 8001034:	f010 faf2 	bl	801161c <iprintf>
	  while(!f_eof(&_file)){
 8001038:	e7d9      	b.n	8000fee <_ZN4File4readEv+0x42>
		  }
	  }
	  //Be a tidy kiwi - don't forget to close your file!
	  f_close(&_file);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001040:	4618      	mov	r0, r3
 8001042:	f00b ff8f 	bl	800cf64 <f_close>
	}
 8001046:	bf00      	nop
 8001048:	37d8      	adds	r7, #216	; 0xd8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	080144a0 	.word	0x080144a0
 8001054:	080144b4 	.word	0x080144b4
 8001058:	080144e4 	.word	0x080144e4
 800105c:	08014514 	.word	0x08014514

08001060 <_ZN4File10deleteFileEv>:
	  f_close(&_file);

	  //We're done, so de-mount the drive

	}
	void deleteFile()
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	{
		f_unlink(_filename);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4618      	mov	r0, r3
 800106c:	f00b ffa9 	bl	800cfc2 <f_unlink>
	}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <_ZN3CliC1Ev>:
class Cli{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	4a04      	ldr	r2, [pc, #16]	; (8001094 <_ZN3CliC1Ev+0x1c>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4618      	mov	r0, r3
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	08014a44 	.word	0x08014a44

08001098 <_ZN5LedOnC1EP3Led>:

class LedOn : public Cli{
private:
	Led * _led;
public:
	LedOn(Led * led){
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ffe7 	bl	8001078 <_ZN3CliC1Ev>
 80010aa:	4a05      	ldr	r2, [pc, #20]	; (80010c0 <_ZN5LedOnC1EP3Led+0x28>)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	601a      	str	r2, [r3, #0]
		_led = led;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	683a      	ldr	r2, [r7, #0]
 80010b4:	605a      	str	r2, [r3, #4]
	}
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	08014a30 	.word	0x08014a30

080010c4 <_ZN5LedOn9doCommandEPKc>:
	void doCommand(const char * param) override{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
		_led->ledOn();
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 fd6a 	bl	8001bac <_ZN3Led5ledOnEv>
	}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <_ZN6LedOffC1EP3Led>:
};
class LedOff : public Cli{
private:
	Led * _led;
public:
	LedOff(Led * led){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ffc3 	bl	8001078 <_ZN3CliC1Ev>
 80010f2:	4a05      	ldr	r2, [pc, #20]	; (8001108 <_ZN6LedOffC1EP3Led+0x28>)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	601a      	str	r2, [r3, #0]
		_led = led;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	605a      	str	r2, [r3, #4]
	}
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	08014a1c 	.word	0x08014a1c

0800110c <_ZN6LedOff9doCommandEPKc>:
	void doCommand(const char * param) override{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
		_led->ledOff();
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	4618      	mov	r0, r3
 800111c:	f000 fd59 	bl	8001bd2 <_ZN3Led6ledOffEv>
	}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <_ZN10RtcGetTimeC1EP3Rtc>:
};
class RtcGetTime : public Cli{
private:
	Rtc * _rtc;
public:
	RtcGetTime(Rtc * rtc){
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff9f 	bl	8001078 <_ZN3CliC1Ev>
 800113a:	4a05      	ldr	r2, [pc, #20]	; (8001150 <_ZN10RtcGetTimeC1EP3Rtc+0x28>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	601a      	str	r2, [r3, #0]
		_rtc = rtc;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	605a      	str	r2, [r3, #4]
	}
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	08014a08 	.word	0x08014a08

08001154 <_ZN10RtcGetTime9doCommandEPKc>:
	void doCommand(const char * param) override{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]

		_rtc->rtcGetTime();
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	4618      	mov	r0, r3
 8001164:	f000 fdd4 	bl	8001d10 <_ZN3Rtc10rtcGetTimeEv>

	}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <_ZN10RtcSetTimeC1EP3Rtc>:
};
class RtcSetTime : public Cli{
private:
	Rtc * _rtc;
public:
	RtcSetTime(Rtc * rtc){
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff7b 	bl	8001078 <_ZN3CliC1Ev>
 8001182:	4a05      	ldr	r2, [pc, #20]	; (8001198 <_ZN10RtcSetTimeC1EP3Rtc+0x28>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	601a      	str	r2, [r3, #0]
		_rtc = rtc;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	605a      	str	r2, [r3, #4]
	}
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	080149f4 	.word	0x080149f4

0800119c <_ZN10RtcSetTime9doCommandEPKc>:
	void doCommand(const char * param) override{
 800119c:	b580      	push	{r7, lr}
 800119e:	b098      	sub	sp, #96	; 0x60
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]

		char * token;
		char s[3] = ":";
 80011a6:	4b3b      	ldr	r3, [pc, #236]	; (8001294 <_ZN10RtcSetTime9doCommandEPKc+0xf8>)
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80011ae:	2300      	movs	r3, #0
 80011b0:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
		char temp[50];
		strcpy(temp,param);
 80011b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b8:	6839      	ldr	r1, [r7, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f010 fba1 	bl	8011902 <strcpy>
		DateTime tempdate;

		token = strtok(temp, s);
 80011c0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80011c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c8:	4611      	mov	r1, r2
 80011ca:	4618      	mov	r0, r3
 80011cc:	f010 fba2 	bl	8011914 <strtok>
 80011d0:	65f8      	str	r0, [r7, #92]	; 0x5c
		tempdate.hours = atoi(token);
 80011d2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80011d4:	f00f fc83 	bl	8010ade <atoi>
 80011d8:	4603      	mov	r3, r0
 80011da:	613b      	str	r3, [r7, #16]
		token = strtok(NULL, s);
 80011dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011e0:	4619      	mov	r1, r3
 80011e2:	2000      	movs	r0, #0
 80011e4:	f010 fb96 	bl	8011914 <strtok>
 80011e8:	65f8      	str	r0, [r7, #92]	; 0x5c

		tempdate.min = atoi(token);
 80011ea:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80011ec:	f00f fc77 	bl	8010ade <atoi>
 80011f0:	4603      	mov	r3, r0
 80011f2:	60fb      	str	r3, [r7, #12]
		token = strtok(NULL, s);
 80011f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011f8:	4619      	mov	r1, r3
 80011fa:	2000      	movs	r0, #0
 80011fc:	f010 fb8a 	bl	8011914 <strtok>
 8001200:	65f8      	str	r0, [r7, #92]	; 0x5c

		tempdate.sec = atoi(token);
 8001202:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001204:	f00f fc6b 	bl	8010ade <atoi>
 8001208:	4603      	mov	r3, r0
 800120a:	60bb      	str	r3, [r7, #8]
		token = strtok(NULL, s);
 800120c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001210:	4619      	mov	r1, r3
 8001212:	2000      	movs	r0, #0
 8001214:	f010 fb7e 	bl	8011914 <strtok>
 8001218:	65f8      	str	r0, [r7, #92]	; 0x5c

		tempdate.weekDay = atoi(token);
 800121a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800121c:	f00f fc5f 	bl	8010ade <atoi>
 8001220:	4603      	mov	r3, r0
 8001222:	617b      	str	r3, [r7, #20]
		token = strtok(NULL, s);
 8001224:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001228:	4619      	mov	r1, r3
 800122a:	2000      	movs	r0, #0
 800122c:	f010 fb72 	bl	8011914 <strtok>
 8001230:	65f8      	str	r0, [r7, #92]	; 0x5c

		tempdate.day = atoi(token);
 8001232:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001234:	f00f fc53 	bl	8010ade <atoi>
 8001238:	4603      	mov	r3, r0
 800123a:	61bb      	str	r3, [r7, #24]
		token = strtok(NULL, s);
 800123c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001240:	4619      	mov	r1, r3
 8001242:	2000      	movs	r0, #0
 8001244:	f010 fb66 	bl	8011914 <strtok>
 8001248:	65f8      	str	r0, [r7, #92]	; 0x5c

		tempdate.month = atoi(token);
 800124a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800124c:	f00f fc47 	bl	8010ade <atoi>
 8001250:	4603      	mov	r3, r0
 8001252:	61fb      	str	r3, [r7, #28]
		token = strtok(NULL, s);
 8001254:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001258:	4619      	mov	r1, r3
 800125a:	2000      	movs	r0, #0
 800125c:	f010 fb5a 	bl	8011914 <strtok>
 8001260:	65f8      	str	r0, [r7, #92]	; 0x5c

		tempdate.year = atoi(token);
 8001262:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001264:	f00f fc3b 	bl	8010ade <atoi>
 8001268:	4603      	mov	r3, r0
 800126a:	623b      	str	r3, [r7, #32]
		token = strtok(NULL, s);
 800126c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001270:	4619      	mov	r1, r3
 8001272:	2000      	movs	r0, #0
 8001274:	f010 fb4e 	bl	8011914 <strtok>
 8001278:	65f8      	str	r0, [r7, #92]	; 0x5c

		_rtc->rtcSetTime(&tempdate);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f107 0208 	add.w	r2, r7, #8
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f000 fe13 	bl	8001eb0 <_ZN3Rtc10rtcSetTimeEP8DateTime>
	}
 800128a:	bf00      	nop
 800128c:	3760      	adds	r7, #96	; 0x60
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	08014528 	.word	0x08014528

08001298 <_ZN8BuzzerOnC1EP6Buzzer>:
};
class BuzzerOn : public Cli{
private:
	Buzzer * _buzzer;
public:
	BuzzerOn(Buzzer * buzzer){
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fee7 	bl	8001078 <_ZN3CliC1Ev>
 80012aa:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <_ZN8BuzzerOnC1EP6Buzzer+0x28>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	601a      	str	r2, [r3, #0]
		_buzzer = buzzer;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	605a      	str	r2, [r3, #4]
	}
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	080149e0 	.word	0x080149e0

080012c4 <_ZN8BuzzerOn9doCommandEPKc>:
	void doCommand(const char * param) override{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
		_buzzer->buzzerStartPlay();
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f001 fae2 	bl	800289c <_ZN6Buzzer15buzzerStartPlayEv>
	}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <_ZN9BuzzerOffC1EP6Buzzer>:
};
class BuzzerOff : public Cli{
private:
	Buzzer * _buzzer;
public:
	BuzzerOff(Buzzer * buzzer){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fec3 	bl	8001078 <_ZN3CliC1Ev>
 80012f2:	4a05      	ldr	r2, [pc, #20]	; (8001308 <_ZN9BuzzerOffC1EP6Buzzer+0x28>)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	601a      	str	r2, [r3, #0]
		_buzzer = buzzer;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	605a      	str	r2, [r3, #4]
	}
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	080149cc 	.word	0x080149cc

0800130c <_ZN9BuzzerOff9doCommandEPKc>:
	void doCommand(const char * param) override{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
		_buzzer->buzzerStopPlay();
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	4618      	mov	r0, r3
 800131c:	f001 fad6 	bl	80028cc <_ZN6Buzzer14buzzerStopPlayEv>
	}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <_ZN10SetWarningC1EP7Monitor>:
};
class SetWarning : public Cli{
private:
	Monitor * _monitor;
public:
	SetWarning(Monitor * monitor){
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fe9f 	bl	8001078 <_ZN3CliC1Ev>
 800133a:	4a05      	ldr	r2, [pc, #20]	; (8001350 <_ZN10SetWarningC1EP7Monitor+0x28>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	601a      	str	r2, [r3, #0]
		_monitor = monitor;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	605a      	str	r2, [r3, #4]
	}
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	080149b8 	.word	0x080149b8

08001354 <_ZN10SetWarning9doCommandEPKc>:
	void doCommand(const char * param) override{
 8001354:	b590      	push	{r4, r7, lr}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
		int _param = atoi(param);
 800135e:	6838      	ldr	r0, [r7, #0]
 8001360:	f00f fbbd 	bl	8010ade <atoi>
 8001364:	60f8      	str	r0, [r7, #12]
		_monitor->setWarningValue(_param);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685c      	ldr	r4, [r3, #4]
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f7ff f8ea 	bl	8000544 <__aeabi_i2d>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	ec43 2b10 	vmov	d0, r2, r3
 8001378:	4620      	mov	r0, r4
 800137a:	f7ff fde9 	bl	8000f50 <_ZN7Monitor15setWarningValueEd>
		flash.erase();
 800137e:	4808      	ldr	r0, [pc, #32]	; (80013a0 <_ZN10SetWarning9doCommandEPKc+0x4c>)
 8001380:	f001 fa2a 	bl	80027d8 <_ZN5Flash5eraseEv>
		flash.program(_monitor->getThresHolds());
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fe03 	bl	8000f94 <_ZN7Monitor13getThresHoldsEv>
 800138e:	4603      	mov	r3, r0
 8001390:	4619      	mov	r1, r3
 8001392:	4803      	ldr	r0, [pc, #12]	; (80013a0 <_ZN10SetWarning9doCommandEPKc+0x4c>)
 8001394:	f001 fa40 	bl	8002818 <_ZN5Flash7programEPv>
	}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	bd90      	pop	{r4, r7, pc}
 80013a0:	20001590 	.word	0x20001590

080013a4 <_ZN11SetCriticalC1EP7Monitor>:
};
class SetCritical : public Cli{
private:
	Monitor * _monitor;
public:
	SetCritical(Monitor * monitor){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fe61 	bl	8001078 <_ZN3CliC1Ev>
 80013b6:	4a05      	ldr	r2, [pc, #20]	; (80013cc <_ZN11SetCriticalC1EP7Monitor+0x28>)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	601a      	str	r2, [r3, #0]
		_monitor = monitor;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	605a      	str	r2, [r3, #4]
	}
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	080149a4 	.word	0x080149a4

080013d0 <_ZN11SetCritical9doCommandEPKc>:
	void doCommand(const char * param) override{
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
		int _param = atoi(param);
 80013da:	6838      	ldr	r0, [r7, #0]
 80013dc:	f00f fb7f 	bl	8010ade <atoi>
 80013e0:	60f8      	str	r0, [r7, #12]
		_monitor->setCriticalValue(_param);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685c      	ldr	r4, [r3, #4]
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	f7ff f8ac 	bl	8000544 <__aeabi_i2d>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	ec43 2b10 	vmov	d0, r2, r3
 80013f4:	4620      	mov	r0, r4
 80013f6:	f7ff fdbc 	bl	8000f72 <_ZN7Monitor16setCriticalValueEd>
		flash.erase();
 80013fa:	4808      	ldr	r0, [pc, #32]	; (800141c <_ZN11SetCritical9doCommandEPKc+0x4c>)
 80013fc:	f001 f9ec 	bl	80027d8 <_ZN5Flash5eraseEv>
		flash.program(_monitor->getThresHolds());
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fdc5 	bl	8000f94 <_ZN7Monitor13getThresHoldsEv>
 800140a:	4603      	mov	r3, r0
 800140c:	4619      	mov	r1, r3
 800140e:	4803      	ldr	r0, [pc, #12]	; (800141c <_ZN11SetCritical9doCommandEPKc+0x4c>)
 8001410:	f001 fa02 	bl	8002818 <_ZN5Flash7programEPv>
	}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	bd90      	pop	{r4, r7, pc}
 800141c:	20001590 	.word	0x20001590

08001420 <_ZN9PrintFileC1EP4File>:
};
class PrintFile : public Cli{
private:
	File * _file;
public:
	PrintFile(File * file){
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fe23 	bl	8001078 <_ZN3CliC1Ev>
 8001432:	4a05      	ldr	r2, [pc, #20]	; (8001448 <_ZN9PrintFileC1EP4File+0x28>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	601a      	str	r2, [r3, #0]
		_file = file;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	605a      	str	r2, [r3, #4]
	}
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4618      	mov	r0, r3
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	08014990 	.word	0x08014990

0800144c <_ZN9PrintFile9doCommandEPKc>:
	void doCommand(const char * param) override{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
		_file->read();
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fda6 	bl	8000fac <_ZN4File4readEv>
	}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <_ZN10DeleteFileC1EP4File>:
};
class DeleteFile : public Cli{
private:
	File * _file;
public:
	DeleteFile(File * file){
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fdff 	bl	8001078 <_ZN3CliC1Ev>
 800147a:	4a05      	ldr	r2, [pc, #20]	; (8001490 <_ZN10DeleteFileC1EP4File+0x28>)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	601a      	str	r2, [r3, #0]
		_file = file;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	605a      	str	r2, [r3, #4]
	}
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	0801497c 	.word	0x0801497c

08001494 <_ZN10DeleteFile9doCommandEPKc>:
	void doCommand(const char * param) override{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
		_file->deleteFile();
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fddc 	bl	8001060 <_ZN4File10deleteFileEv>
	}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <_ZN12CliContainer16initCliContainerEv>:
};

void CliContainer::initCliContainer(){
 80014b0:	b590      	push	{r4, r7, lr}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	container.registerCommand("ledon",new LedOn(&ledblue));
 80014b8:	2008      	movs	r0, #8
 80014ba:	f00f fad9 	bl	8010a70 <_Znwj>
 80014be:	4603      	mov	r3, r0
 80014c0:	461c      	mov	r4, r3
 80014c2:	4953      	ldr	r1, [pc, #332]	; (8001610 <_ZN12CliContainer16initCliContainerEv+0x160>)
 80014c4:	4620      	mov	r0, r4
 80014c6:	f7ff fde7 	bl	8001098 <_ZN5LedOnC1EP3Led>
 80014ca:	4622      	mov	r2, r4
 80014cc:	4951      	ldr	r1, [pc, #324]	; (8001614 <_ZN12CliContainer16initCliContainerEv+0x164>)
 80014ce:	4852      	ldr	r0, [pc, #328]	; (8001618 <_ZN12CliContainer16initCliContainerEv+0x168>)
 80014d0:	f7ff fd1c 	bl	8000f0c <_ZN12CliContainer15registerCommandEPKcP3Cli>
	container.registerCommand("ledoff",new LedOff(&ledblue));
 80014d4:	2008      	movs	r0, #8
 80014d6:	f00f facb 	bl	8010a70 <_Znwj>
 80014da:	4603      	mov	r3, r0
 80014dc:	461c      	mov	r4, r3
 80014de:	494c      	ldr	r1, [pc, #304]	; (8001610 <_ZN12CliContainer16initCliContainerEv+0x160>)
 80014e0:	4620      	mov	r0, r4
 80014e2:	f7ff fdfd 	bl	80010e0 <_ZN6LedOffC1EP3Led>
 80014e6:	4622      	mov	r2, r4
 80014e8:	494c      	ldr	r1, [pc, #304]	; (800161c <_ZN12CliContainer16initCliContainerEv+0x16c>)
 80014ea:	484b      	ldr	r0, [pc, #300]	; (8001618 <_ZN12CliContainer16initCliContainerEv+0x168>)
 80014ec:	f7ff fd0e 	bl	8000f0c <_ZN12CliContainer15registerCommandEPKcP3Cli>
	container.registerCommand("settime",new RtcSetTime(&rtc));
 80014f0:	2008      	movs	r0, #8
 80014f2:	f00f fabd 	bl	8010a70 <_Znwj>
 80014f6:	4603      	mov	r3, r0
 80014f8:	461c      	mov	r4, r3
 80014fa:	4949      	ldr	r1, [pc, #292]	; (8001620 <_ZN12CliContainer16initCliContainerEv+0x170>)
 80014fc:	4620      	mov	r0, r4
 80014fe:	f7ff fe37 	bl	8001170 <_ZN10RtcSetTimeC1EP3Rtc>
 8001502:	4622      	mov	r2, r4
 8001504:	4947      	ldr	r1, [pc, #284]	; (8001624 <_ZN12CliContainer16initCliContainerEv+0x174>)
 8001506:	4844      	ldr	r0, [pc, #272]	; (8001618 <_ZN12CliContainer16initCliContainerEv+0x168>)
 8001508:	f7ff fd00 	bl	8000f0c <_ZN12CliContainer15registerCommandEPKcP3Cli>
	container.registerCommand("gettime",new RtcGetTime(&rtc));
 800150c:	2008      	movs	r0, #8
 800150e:	f00f faaf 	bl	8010a70 <_Znwj>
 8001512:	4603      	mov	r3, r0
 8001514:	461c      	mov	r4, r3
 8001516:	4942      	ldr	r1, [pc, #264]	; (8001620 <_ZN12CliContainer16initCliContainerEv+0x170>)
 8001518:	4620      	mov	r0, r4
 800151a:	f7ff fe05 	bl	8001128 <_ZN10RtcGetTimeC1EP3Rtc>
 800151e:	4622      	mov	r2, r4
 8001520:	4941      	ldr	r1, [pc, #260]	; (8001628 <_ZN12CliContainer16initCliContainerEv+0x178>)
 8001522:	483d      	ldr	r0, [pc, #244]	; (8001618 <_ZN12CliContainer16initCliContainerEv+0x168>)
 8001524:	f7ff fcf2 	bl	8000f0c <_ZN12CliContainer15registerCommandEPKcP3Cli>
	container.registerCommand("play",new BuzzerOn(&buzzer));
 8001528:	2008      	movs	r0, #8
 800152a:	f00f faa1 	bl	8010a70 <_Znwj>
 800152e:	4603      	mov	r3, r0
 8001530:	461c      	mov	r4, r3
 8001532:	493e      	ldr	r1, [pc, #248]	; (800162c <_ZN12CliContainer16initCliContainerEv+0x17c>)
 8001534:	4620      	mov	r0, r4
 8001536:	f7ff feaf 	bl	8001298 <_ZN8BuzzerOnC1EP6Buzzer>
 800153a:	4622      	mov	r2, r4
 800153c:	493c      	ldr	r1, [pc, #240]	; (8001630 <_ZN12CliContainer16initCliContainerEv+0x180>)
 800153e:	4836      	ldr	r0, [pc, #216]	; (8001618 <_ZN12CliContainer16initCliContainerEv+0x168>)
 8001540:	f7ff fce4 	bl	8000f0c <_ZN12CliContainer15registerCommandEPKcP3Cli>
	container.registerCommand("stop",new BuzzerOff(&buzzer));
 8001544:	2008      	movs	r0, #8
 8001546:	f00f fa93 	bl	8010a70 <_Znwj>
 800154a:	4603      	mov	r3, r0
 800154c:	461c      	mov	r4, r3
 800154e:	4937      	ldr	r1, [pc, #220]	; (800162c <_ZN12CliContainer16initCliContainerEv+0x17c>)
 8001550:	4620      	mov	r0, r4
 8001552:	f7ff fec5 	bl	80012e0 <_ZN9BuzzerOffC1EP6Buzzer>
 8001556:	4622      	mov	r2, r4
 8001558:	4936      	ldr	r1, [pc, #216]	; (8001634 <_ZN12CliContainer16initCliContainerEv+0x184>)
 800155a:	482f      	ldr	r0, [pc, #188]	; (8001618 <_ZN12CliContainer16initCliContainerEv+0x168>)
 800155c:	f7ff fcd6 	bl	8000f0c <_ZN12CliContainer15registerCommandEPKcP3Cli>
	container.registerCommand("printtemp",new PrintFile(&temperature_file));
 8001560:	2008      	movs	r0, #8
 8001562:	f00f fa85 	bl	8010a70 <_Znwj>
 8001566:	4603      	mov	r3, r0
 8001568:	461c      	mov	r4, r3
 800156a:	4933      	ldr	r1, [pc, #204]	; (8001638 <_ZN12CliContainer16initCliContainerEv+0x188>)
 800156c:	4620      	mov	r0, r4
 800156e:	f7ff ff57 	bl	8001420 <_ZN9PrintFileC1EP4File>
 8001572:	4622      	mov	r2, r4
 8001574:	4931      	ldr	r1, [pc, #196]	; (800163c <_ZN12CliContainer16initCliContainerEv+0x18c>)
 8001576:	4828      	ldr	r0, [pc, #160]	; (8001618 <_ZN12CliContainer16initCliContainerEv+0x168>)
 8001578:	f7ff fcc8 	bl	8000f0c <_ZN12CliContainer15registerCommandEPKcP3Cli>
	container.registerCommand("printlog",new PrintFile(&event_file));
 800157c:	2008      	movs	r0, #8
 800157e:	f00f fa77 	bl	8010a70 <_Znwj>
 8001582:	4603      	mov	r3, r0
 8001584:	461c      	mov	r4, r3
 8001586:	492e      	ldr	r1, [pc, #184]	; (8001640 <_ZN12CliContainer16initCliContainerEv+0x190>)
 8001588:	4620      	mov	r0, r4
 800158a:	f7ff ff49 	bl	8001420 <_ZN9PrintFileC1EP4File>
 800158e:	4622      	mov	r2, r4
 8001590:	492c      	ldr	r1, [pc, #176]	; (8001644 <_ZN12CliContainer16initCliContainerEv+0x194>)
 8001592:	4821      	ldr	r0, [pc, #132]	; (8001618 <_ZN12CliContainer16initCliContainerEv+0x168>)
 8001594:	f7ff fcba 	bl	8000f0c <_ZN12CliContainer15registerCommandEPKcP3Cli>
	container.registerCommand("deletetemp",new DeleteFile(&temperature_file));
 8001598:	2008      	movs	r0, #8
 800159a:	f00f fa69 	bl	8010a70 <_Znwj>
 800159e:	4603      	mov	r3, r0
 80015a0:	461c      	mov	r4, r3
 80015a2:	4925      	ldr	r1, [pc, #148]	; (8001638 <_ZN12CliContainer16initCliContainerEv+0x188>)
 80015a4:	4620      	mov	r0, r4
 80015a6:	f7ff ff5f 	bl	8001468 <_ZN10DeleteFileC1EP4File>
 80015aa:	4622      	mov	r2, r4
 80015ac:	4926      	ldr	r1, [pc, #152]	; (8001648 <_ZN12CliContainer16initCliContainerEv+0x198>)
 80015ae:	481a      	ldr	r0, [pc, #104]	; (8001618 <_ZN12CliContainer16initCliContainerEv+0x168>)
 80015b0:	f7ff fcac 	bl	8000f0c <_ZN12CliContainer15registerCommandEPKcP3Cli>
	container.registerCommand("deletelog",new DeleteFile(&event_file));
 80015b4:	2008      	movs	r0, #8
 80015b6:	f00f fa5b 	bl	8010a70 <_Znwj>
 80015ba:	4603      	mov	r3, r0
 80015bc:	461c      	mov	r4, r3
 80015be:	4920      	ldr	r1, [pc, #128]	; (8001640 <_ZN12CliContainer16initCliContainerEv+0x190>)
 80015c0:	4620      	mov	r0, r4
 80015c2:	f7ff ff51 	bl	8001468 <_ZN10DeleteFileC1EP4File>
 80015c6:	4622      	mov	r2, r4
 80015c8:	4920      	ldr	r1, [pc, #128]	; (800164c <_ZN12CliContainer16initCliContainerEv+0x19c>)
 80015ca:	4813      	ldr	r0, [pc, #76]	; (8001618 <_ZN12CliContainer16initCliContainerEv+0x168>)
 80015cc:	f7ff fc9e 	bl	8000f0c <_ZN12CliContainer15registerCommandEPKcP3Cli>
	container.registerCommand("setwarrning",new SetWarning(&monitor));
 80015d0:	2008      	movs	r0, #8
 80015d2:	f00f fa4d 	bl	8010a70 <_Znwj>
 80015d6:	4603      	mov	r3, r0
 80015d8:	461c      	mov	r4, r3
 80015da:	491d      	ldr	r1, [pc, #116]	; (8001650 <_ZN12CliContainer16initCliContainerEv+0x1a0>)
 80015dc:	4620      	mov	r0, r4
 80015de:	f7ff fea3 	bl	8001328 <_ZN10SetWarningC1EP7Monitor>
 80015e2:	4622      	mov	r2, r4
 80015e4:	491b      	ldr	r1, [pc, #108]	; (8001654 <_ZN12CliContainer16initCliContainerEv+0x1a4>)
 80015e6:	480c      	ldr	r0, [pc, #48]	; (8001618 <_ZN12CliContainer16initCliContainerEv+0x168>)
 80015e8:	f7ff fc90 	bl	8000f0c <_ZN12CliContainer15registerCommandEPKcP3Cli>
	container.registerCommand("setcritical",new SetCritical(&monitor));
 80015ec:	2008      	movs	r0, #8
 80015ee:	f00f fa3f 	bl	8010a70 <_Znwj>
 80015f2:	4603      	mov	r3, r0
 80015f4:	461c      	mov	r4, r3
 80015f6:	4916      	ldr	r1, [pc, #88]	; (8001650 <_ZN12CliContainer16initCliContainerEv+0x1a0>)
 80015f8:	4620      	mov	r0, r4
 80015fa:	f7ff fed3 	bl	80013a4 <_ZN11SetCriticalC1EP7Monitor>
 80015fe:	4622      	mov	r2, r4
 8001600:	4915      	ldr	r1, [pc, #84]	; (8001658 <_ZN12CliContainer16initCliContainerEv+0x1a8>)
 8001602:	4805      	ldr	r0, [pc, #20]	; (8001618 <_ZN12CliContainer16initCliContainerEv+0x168>)
 8001604:	f7ff fc82 	bl	8000f0c <_ZN12CliContainer15registerCommandEPKcP3Cli>

}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	bd90      	pop	{r4, r7, pc}
 8001610:	200005c8 	.word	0x200005c8
 8001614:	0801452c 	.word	0x0801452c
 8001618:	20000524 	.word	0x20000524
 800161c:	08014534 	.word	0x08014534
 8001620:	20000500 	.word	0x20000500
 8001624:	0801453c 	.word	0x0801453c
 8001628:	08014544 	.word	0x08014544
 800162c:	200005dc 	.word	0x200005dc
 8001630:	0801454c 	.word	0x0801454c
 8001634:	08014554 	.word	0x08014554
 8001638:	20001114 	.word	0x20001114
 800163c:	0801455c 	.word	0x0801455c
 8001640:	20000c98 	.word	0x20000c98
 8001644:	08014568 	.word	0x08014568
 8001648:	08014574 	.word	0x08014574
 800164c:	08014580 	.word	0x08014580
 8001650:	200005e0 	.word	0x200005e0
 8001654:	0801458c 	.word	0x0801458c
 8001658:	08014598 	.word	0x08014598

0800165c <_ZN10DeleteFileD1Ev>:
class DeleteFile : public Cli{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	4a05      	ldr	r2, [pc, #20]	; (800167c <_ZN10DeleteFileD1Ev+0x20>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fc2d 	bl	8000ecc <_ZN3CliD1Ev>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4618      	mov	r0, r3
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	0801497c 	.word	0x0801497c

08001680 <_ZN10DeleteFileD0Ev>:
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff ffe7 	bl	800165c <_ZN10DeleteFileD1Ev>
 800168e:	2108      	movs	r1, #8
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f00f f9eb 	bl	8010a6c <_ZdlPvj>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4618      	mov	r0, r3
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <_ZN9PrintFileD1Ev>:
class PrintFile : public Cli{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <_ZN9PrintFileD1Ev+0x20>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff fc0b 	bl	8000ecc <_ZN3CliD1Ev>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4618      	mov	r0, r3
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	08014990 	.word	0x08014990

080016c4 <_ZN9PrintFileD0Ev>:
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff ffe7 	bl	80016a0 <_ZN9PrintFileD1Ev>
 80016d2:	2108      	movs	r1, #8
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f00f f9c9 	bl	8010a6c <_ZdlPvj>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <_ZN11SetCriticalD1Ev>:
class SetCritical : public Cli{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	4a05      	ldr	r2, [pc, #20]	; (8001704 <_ZN11SetCriticalD1Ev+0x20>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fbe9 	bl	8000ecc <_ZN3CliD1Ev>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	080149a4 	.word	0x080149a4

08001708 <_ZN11SetCriticalD0Ev>:
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff ffe7 	bl	80016e4 <_ZN11SetCriticalD1Ev>
 8001716:	2108      	movs	r1, #8
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f00f f9a7 	bl	8010a6c <_ZdlPvj>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4618      	mov	r0, r3
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <_ZN10SetWarningD1Ev>:
class SetWarning : public Cli{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	4a05      	ldr	r2, [pc, #20]	; (8001748 <_ZN10SetWarningD1Ev+0x20>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fbc7 	bl	8000ecc <_ZN3CliD1Ev>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	080149b8 	.word	0x080149b8

0800174c <_ZN10SetWarningD0Ev>:
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff ffe7 	bl	8001728 <_ZN10SetWarningD1Ev>
 800175a:	2108      	movs	r1, #8
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f00f f985 	bl	8010a6c <_ZdlPvj>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <_ZN9BuzzerOffD1Ev>:
class BuzzerOff : public Cli{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	4a05      	ldr	r2, [pc, #20]	; (800178c <_ZN9BuzzerOffD1Ev+0x20>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fba5 	bl	8000ecc <_ZN3CliD1Ev>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4618      	mov	r0, r3
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	080149cc 	.word	0x080149cc

08001790 <_ZN9BuzzerOffD0Ev>:
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff ffe7 	bl	800176c <_ZN9BuzzerOffD1Ev>
 800179e:	2108      	movs	r1, #8
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f00f f963 	bl	8010a6c <_ZdlPvj>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <_ZN8BuzzerOnD1Ev>:
class BuzzerOn : public Cli{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	4a05      	ldr	r2, [pc, #20]	; (80017d0 <_ZN8BuzzerOnD1Ev+0x20>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fb83 	bl	8000ecc <_ZN3CliD1Ev>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	080149e0 	.word	0x080149e0

080017d4 <_ZN8BuzzerOnD0Ev>:
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff ffe7 	bl	80017b0 <_ZN8BuzzerOnD1Ev>
 80017e2:	2108      	movs	r1, #8
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f00f f941 	bl	8010a6c <_ZdlPvj>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4618      	mov	r0, r3
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <_ZN10RtcSetTimeD1Ev>:
class RtcSetTime : public Cli{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	4a05      	ldr	r2, [pc, #20]	; (8001814 <_ZN10RtcSetTimeD1Ev+0x20>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fb61 	bl	8000ecc <_ZN3CliD1Ev>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	080149f4 	.word	0x080149f4

08001818 <_ZN10RtcSetTimeD0Ev>:
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff ffe7 	bl	80017f4 <_ZN10RtcSetTimeD1Ev>
 8001826:	2108      	movs	r1, #8
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f00f f91f 	bl	8010a6c <_ZdlPvj>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4618      	mov	r0, r3
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <_ZN10RtcGetTimeD1Ev>:
class RtcGetTime : public Cli{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	4a05      	ldr	r2, [pc, #20]	; (8001858 <_ZN10RtcGetTimeD1Ev+0x20>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fb3f 	bl	8000ecc <_ZN3CliD1Ev>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	08014a08 	.word	0x08014a08

0800185c <_ZN10RtcGetTimeD0Ev>:
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff ffe7 	bl	8001838 <_ZN10RtcGetTimeD1Ev>
 800186a:	2108      	movs	r1, #8
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f00f f8fd 	bl	8010a6c <_ZdlPvj>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4618      	mov	r0, r3
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <_ZN6LedOffD1Ev>:
class LedOff : public Cli{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	4a05      	ldr	r2, [pc, #20]	; (800189c <_ZN6LedOffD1Ev+0x20>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fb1d 	bl	8000ecc <_ZN3CliD1Ev>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	08014a1c 	.word	0x08014a1c

080018a0 <_ZN6LedOffD0Ev>:
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff ffe7 	bl	800187c <_ZN6LedOffD1Ev>
 80018ae:	2108      	movs	r1, #8
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f00f f8db 	bl	8010a6c <_ZdlPvj>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4618      	mov	r0, r3
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <_ZN5LedOnD1Ev>:
class LedOn : public Cli{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	4a05      	ldr	r2, [pc, #20]	; (80018e0 <_ZN5LedOnD1Ev+0x20>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fafb 	bl	8000ecc <_ZN3CliD1Ev>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	08014a30 	.word	0x08014a30

080018e4 <_ZN5LedOnD0Ev>:
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ffe7 	bl	80018c0 <_ZN5LedOnD1Ev>
 80018f2:	2108      	movs	r1, #8
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f00f f8b9 	bl	8010a6c <_ZdlPvj>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <_ZN3DhtC1EP12GPIO_TypeDeft>:
static uint8_t dht_byte= 0;
static	uint8_t m= 0;
static	uint8_t p= 0;
extern TIM_HandleTypeDef htim1;

Dht::Dht(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	4613      	mov	r3, r2
 8001910:	80fb      	strh	r3, [r7, #6]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2200      	movs	r2, #0
 8001916:	615a      	str	r2, [r3, #20]
	_GPIOx = GPIOx;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	601a      	str	r2, [r3, #0]
	_GPIO_Pin = GPIO_Pin;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	88fa      	ldrh	r2, [r7, #6]
 8001922:	809a      	strh	r2, [r3, #4]
	_dhtPin = WAKING;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	719a      	strb	r2, [r3, #6]
	_bitcount=0;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2200      	movs	r2, #0
 800192e:	611a      	str	r2, [r3, #16]
}
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4618      	mov	r0, r3
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <_ZN3Dht11setGpioExtiEv>:

 void Dht::setGpioExti()
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b088      	sub	sp, #32
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpioStruct = {0};
 8001946:	f107 030c 	add.w	r3, r7, #12
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	60da      	str	r2, [r3, #12]
 8001954:	611a      	str	r2, [r3, #16]
	gpioStruct.Pin = _GPIO_Pin;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	889b      	ldrh	r3, [r3, #4]
 800195a:	60fb      	str	r3, [r7, #12]
	gpioStruct.Mode = GPIO_MODE_IT_FALLING;
 800195c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001960:	613b      	str	r3, [r7, #16]
	gpioStruct.Pull = GPIO_PULLUP;
 8001962:	2301      	movs	r3, #1
 8001964:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(_GPIOx, &gpioStruct);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f107 020c 	add.w	r2, r7, #12
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f002 fc25 	bl	80041c0 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001976:	2017      	movs	r0, #23
 8001978:	f002 f900 	bl	8003b7c <HAL_NVIC_EnableIRQ>
}
 800197c:	bf00      	nop
 800197e:	3720      	adds	r7, #32
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <_ZN3Dht12dhtReadAsyncEv>:

void Dht::dhtReadAsync()
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpioStruct;
	gpioStruct.Pin = pin_4_Pin;
 800198c:	2320      	movs	r3, #32
 800198e:	60fb      	str	r3, [r7, #12]
	gpioStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001990:	2301      	movs	r3, #1
 8001992:	613b      	str	r3, [r7, #16]
	gpioStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
	gpioStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2300      	movs	r3, #0
 800199a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(pin_4_GPIO_Port, &gpioStruct);
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	4619      	mov	r1, r3
 80019a2:	480b      	ldr	r0, [pc, #44]	; (80019d0 <_ZN3Dht12dhtReadAsyncEv+0x4c>)
 80019a4:	f002 fc0c 	bl	80041c0 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(pin_4_GPIO_Port, pin_4_Pin,GPIO_PIN_RESET);
 80019a8:	2200      	movs	r2, #0
 80019aa:	2120      	movs	r1, #32
 80019ac:	4808      	ldr	r0, [pc, #32]	; (80019d0 <_ZN3Dht12dhtReadAsyncEv+0x4c>)
 80019ae:	f002 fdc9 	bl	8004544 <HAL_GPIO_WritePin>
	HAL_Delay(18);
 80019b2:	2012      	movs	r0, #18
 80019b4:	f001 ffea 	bl	800398c <HAL_Delay>
	HAL_GPIO_WritePin(pin_4_GPIO_Port, pin_4_Pin,GPIO_PIN_SET);
 80019b8:	2201      	movs	r2, #1
 80019ba:	2120      	movs	r1, #32
 80019bc:	4804      	ldr	r0, [pc, #16]	; (80019d0 <_ZN3Dht12dhtReadAsyncEv+0x4c>)
 80019be:	f002 fdc1 	bl	8004544 <HAL_GPIO_WritePin>
	setGpioExti();
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ffbb 	bl	800193e <_ZN3Dht11setGpioExtiEv>

}
 80019c8:	bf00      	nop
 80019ca:	3720      	adds	r7, #32
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	48000400 	.word	0x48000400

080019d4 <_ZN3Dht18dhtOnGpioInterruptEt>:

void Dht::dhtOnGpioInterrupt(uint16_t pin)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	460b      	mov	r3, r1
 80019de:	807b      	strh	r3, [r7, #2]
	uint32_t counter;
	if(_GPIO_Pin==pin){
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	889b      	ldrh	r3, [r3, #4]
 80019e4:	887a      	ldrh	r2, [r7, #2]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	f040 8086 	bne.w	8001af8 <_ZN3Dht18dhtOnGpioInterruptEt+0x124>
		switch (_dhtPin){
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	799b      	ldrb	r3, [r3, #6]
 80019f0:	2b04      	cmp	r3, #4
 80019f2:	d87d      	bhi.n	8001af0 <_ZN3Dht18dhtOnGpioInterruptEt+0x11c>
 80019f4:	a201      	add	r2, pc, #4	; (adr r2, 80019fc <_ZN3Dht18dhtOnGpioInterruptEt+0x28>)
 80019f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019fa:	bf00      	nop
 80019fc:	08001a11 	.word	0x08001a11
 8001a00:	08001a19 	.word	0x08001a19
 8001a04:	08001a21 	.word	0x08001a21
 8001a08:	08001a31 	.word	0x08001a31
 8001a0c:	08001ae9 	.word	0x08001ae9
			case WAKING:
				_dhtPin=WAIT_RESPONSE_START;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	719a      	strb	r2, [r3, #6]
				break;
 8001a16:	e06b      	b.n	8001af0 <_ZN3Dht18dhtOnGpioInterruptEt+0x11c>
			case WAIT_RESPONSE_START:
				_dhtPin=WAIT_RESPONSE_STOP;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	719a      	strb	r2, [r3, #6]
				break;
 8001a1e:	e067      	b.n	8001af0 <_ZN3Dht18dhtOnGpioInterruptEt+0x11c>
			case WAIT_RESPONSE_STOP:
				counter = __HAL_TIM_GET_COUNTER(&htim1);
 8001a20:	4b38      	ldr	r3, [pc, #224]	; (8001b04 <_ZN3Dht18dhtOnGpioInterruptEt+0x130>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	60fb      	str	r3, [r7, #12]
				_dhtPin=RECEIVING_BITS;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	719a      	strb	r2, [r3, #6]
				break;
 8001a2e:	e05f      	b.n	8001af0 <_ZN3Dht18dhtOnGpioInterruptEt+0x11c>
			case RECEIVING_BITS:
				counter = __HAL_TIM_GET_COUNTER(&htim1);
 8001a30:	4b34      	ldr	r3, [pc, #208]	; (8001b04 <_ZN3Dht18dhtOnGpioInterruptEt+0x130>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	60fb      	str	r3, [r7, #12]
				if(counter<=100)  {
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2b64      	cmp	r3, #100	; 0x64
 8001a3c:	d812      	bhi.n	8001a64 <_ZN3Dht18dhtOnGpioInterruptEt+0x90>
					dht_byte&= ~(1<<(7-p));
 8001a3e:	4b32      	ldr	r3, [pc, #200]	; (8001b08 <_ZN3Dht18dhtOnGpioInterruptEt+0x134>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	f1c3 0307 	rsb	r3, r3, #7
 8001a46:	2201      	movs	r2, #1
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	b25b      	sxtb	r3, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	b25a      	sxtb	r2, r3
 8001a52:	4b2e      	ldr	r3, [pc, #184]	; (8001b0c <_ZN3Dht18dhtOnGpioInterruptEt+0x138>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	b25b      	sxtb	r3, r3
 8001a58:	4013      	ands	r3, r2
 8001a5a:	b25b      	sxtb	r3, r3
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	4b2b      	ldr	r3, [pc, #172]	; (8001b0c <_ZN3Dht18dhtOnGpioInterruptEt+0x138>)
 8001a60:	701a      	strb	r2, [r3, #0]
 8001a62:	e00f      	b.n	8001a84 <_ZN3Dht18dhtOnGpioInterruptEt+0xb0>
				}
				else {
					dht_byte|= (1<<(7-p));
 8001a64:	4b28      	ldr	r3, [pc, #160]	; (8001b08 <_ZN3Dht18dhtOnGpioInterruptEt+0x134>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	f1c3 0307 	rsb	r3, r3, #7
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	b25a      	sxtb	r2, r3
 8001a74:	4b25      	ldr	r3, [pc, #148]	; (8001b0c <_ZN3Dht18dhtOnGpioInterruptEt+0x138>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	b25b      	sxtb	r3, r3
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	b25b      	sxtb	r3, r3
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <_ZN3Dht18dhtOnGpioInterruptEt+0x138>)
 8001a82:	701a      	strb	r2, [r3, #0]
				}
				p++;
 8001a84:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <_ZN3Dht18dhtOnGpioInterruptEt+0x134>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <_ZN3Dht18dhtOnGpioInterruptEt+0x134>)
 8001a8e:	701a      	strb	r2, [r3, #0]
				_bitcount++;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	1c5a      	adds	r2, r3, #1
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	611a      	str	r2, [r3, #16]
				if(_bitcount%8==0){
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d112      	bne.n	8001acc <_ZN3Dht18dhtOnGpioInterruptEt+0xf8>
					DHT_data[m]=dht_byte;
 8001aa6:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <_ZN3Dht18dhtOnGpioInterruptEt+0x13c>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <_ZN3Dht18dhtOnGpioInterruptEt+0x138>)
 8001aae:	7819      	ldrb	r1, [r3, #0]
 8001ab0:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <_ZN3Dht18dhtOnGpioInterruptEt+0x140>)
 8001ab2:	5499      	strb	r1, [r3, r2]
					dht_byte=0;
 8001ab4:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <_ZN3Dht18dhtOnGpioInterruptEt+0x138>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
					m++;
 8001aba:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <_ZN3Dht18dhtOnGpioInterruptEt+0x13c>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <_ZN3Dht18dhtOnGpioInterruptEt+0x13c>)
 8001ac4:	701a      	strb	r2, [r3, #0]
					p=0;
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <_ZN3Dht18dhtOnGpioInterruptEt+0x134>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
				}

				if(_bitcount>=40){
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	2b27      	cmp	r3, #39	; 0x27
 8001ad2:	dd0c      	ble.n	8001aee <_ZN3Dht18dhtOnGpioInterruptEt+0x11a>
					_bitcount=0;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	611a      	str	r2, [r3, #16]
					m=0;
 8001ada:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <_ZN3Dht18dhtOnGpioInterruptEt+0x13c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]
				_dhtPin=DATA_RECEIVED;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2204      	movs	r2, #4
 8001ae4:	719a      	strb	r2, [r3, #6]
				}
				break;
 8001ae6:	e002      	b.n	8001aee <_ZN3Dht18dhtOnGpioInterruptEt+0x11a>
			case DATA_RECEIVED:
				counter = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
				break;
 8001aec:	e000      	b.n	8001af0 <_ZN3Dht18dhtOnGpioInterruptEt+0x11c>
				break;
 8001aee:	bf00      	nop
		}
				__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001af0:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <_ZN3Dht18dhtOnGpioInterruptEt+0x130>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2200      	movs	r2, #0
 8001af6:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	20000368 	.word	0x20000368
 8001b08:	20000243 	.word	0x20000243
 8001b0c:	20000241 	.word	0x20000241
 8001b10:	20000242 	.word	0x20000242
 8001b14:	2000023c 	.word	0x2000023c

08001b18 <_ZN3Dht10dhtHasDataEv>:

int Dht::dhtHasData(){
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
	if (_dhtPin==DATA_RECEIVED){
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	799b      	ldrb	r3, [r3, #6]
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d10e      	bne.n	8001b46 <_ZN3Dht10dhtHasDataEv+0x2e>
		_Temperature = (double)DHT_data[2];
 8001b28:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <_ZN3Dht10dhtHasDataEv+0x38>)
 8001b2a:	789b      	ldrb	r3, [r3, #2]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fcf9 	bl	8000524 <__aeabi_ui2d>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	e9c1 2302 	strd	r2, r3, [r1, #8]
		_dhtPin=WAKING;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	719a      	strb	r2, [r3, #6]
		return 1;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e000      	b.n	8001b48 <_ZN3Dht10dhtHasDataEv+0x30>
	}
	return 0;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	2000023c 	.word	0x2000023c

08001b54 <_ZN3Dht14getTemperatureEv>:
double Dht::getTemperature()
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	return _Temperature;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b62:	ec43 2b17 	vmov	d7, r2, r3
}
 8001b66:	eeb0 0a47 	vmov.f32	s0, s14
 8001b6a:	eef0 0a67 	vmov.f32	s1, s15
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <_ZN3LedC1EP12GPIO_TypeDeft>:
#include <stdio.h>
#include "mymain.h"
#include "main.h"
#include "LED.h"

Led::Led(GPIO_TypeDef* GPIOx,uint16_t GPIO_Pin):
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	4613      	mov	r3, r2
 8001b84:	80fb      	strh	r3, [r7, #6]
		_GPIOx(GPIOx),_GPIO_Pin(GPIO_Pin)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	68ba      	ldr	r2, [r7, #8]
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	88fa      	ldrh	r2, [r7, #6]
 8001b90:	809a      	strh	r2, [r3, #4]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2232      	movs	r2, #50	; 0x32
 8001b9c:	60da      	str	r2, [r3, #12]
{
}
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <_ZN3Led5ledOnEv>:

void Led::ledOn()
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
	_STATE = LED_STATE_ON;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	741a      	strb	r2, [r3, #16]
	HAL_GPIO_WritePin(_GPIOx, _GPIO_Pin, GPIO_PIN_SET);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6818      	ldr	r0, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	889b      	ldrh	r3, [r3, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f002 fcbd 	bl	8004544 <HAL_GPIO_WritePin>

}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <_ZN3Led6ledOffEv>:
void Led::ledOff()
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
	_STATE = LED_STATE_OFF;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	741a      	strb	r2, [r3, #16]
	HAL_GPIO_WritePin(_GPIOx, _GPIO_Pin, GPIO_PIN_RESET);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6818      	ldr	r0, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	889b      	ldrh	r3, [r3, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	4619      	mov	r1, r3
 8001bec:	f002 fcaa 	bl	8004544 <HAL_GPIO_WritePin>

}
 8001bf0:	bf00      	nop
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <_ZN3Led8ledBlinkEv>:
void Led::ledDelay(int num){
	_delay = num;
}
void Led::ledBlink()
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(_GPIOx, _GPIO_Pin);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	889b      	ldrh	r3, [r3, #4]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	f002 fcb2 	bl	8004574 <HAL_GPIO_TogglePin>
	osDelay(_delay);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f00b fca5 	bl	800d564 <osDelay>

}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <_ZN3Led7isBlinkEv>:
void Led::isBlink()
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
	_STATE = LED_STATE_BLINK;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	741a      	strb	r2, [r3, #16]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <_ZN3Led8getStateEv>:
LedState Led::getState()
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
	return _STATE;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	7c1b      	ldrb	r3, [r3, #16]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <_ZN3RtcC1EP19__I2C_HandleTypeDefm>:
		304,
		334,
		365
};

Rtc::Rtc(I2C_HandleTypeDef * hi2c, uint32_t devAddr)
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
{
  _hi2c = hi2c;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	601a      	str	r2, [r3, #0]
  _devAddr = devAddr;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	711a      	strb	r2, [r3, #4]
}
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	4618      	mov	r0, r3
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <_ZL8bcdToInth>:
	HAL_I2C_Mem_Read(_hi2c, _devAddr, 0, 1, &sec, 1, 0xFF);
	return (sec & RTC_START_STOP) == 0;
}

static int bcdToInt(uint8_t bcd)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
	return (bcd >> 4) * 10 + (bcd & 0x0F);
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	091b      	lsrs	r3, r3, #4
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	461a      	mov	r2, r3
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	4413      	add	r3, r2
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <_ZL8intToBcdiii>:

static uint8_t intToBcd(int value, int minVal, int maxVal)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
	if (value < minVal || value > maxVal) {
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	db03      	blt.n	8001cc8 <_ZL8intToBcdiii+0x1c>
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	dd01      	ble.n	8001ccc <_ZL8intToBcdiii+0x20>
		return 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	e018      	b.n	8001cfe <_ZL8intToBcdiii+0x52>
	}

	return ((value / 10) << 4) | (value % 10);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4a0f      	ldr	r2, [pc, #60]	; (8001d0c <_ZL8intToBcdiii+0x60>)
 8001cd0:	fb82 1203 	smull	r1, r2, r2, r3
 8001cd4:	1092      	asrs	r2, r2, #2
 8001cd6:	17db      	asrs	r3, r3, #31
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	011b      	lsls	r3, r3, #4
 8001cdc:	b258      	sxtb	r0, r3
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <_ZL8intToBcdiii+0x60>)
 8001ce2:	fb83 1302 	smull	r1, r3, r3, r2
 8001ce6:	1099      	asrs	r1, r3, #2
 8001ce8:	17d3      	asrs	r3, r2, #31
 8001cea:	1ac9      	subs	r1, r1, r3
 8001cec:	460b      	mov	r3, r1
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	1ad1      	subs	r1, r2, r3
 8001cf6:	b24b      	sxtb	r3, r1
 8001cf8:	4303      	orrs	r3, r0
 8001cfa:	b25b      	sxtb	r3, r3
 8001cfc:	b2db      	uxtb	r3, r3
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	66666667 	.word	0x66666667

08001d10 <_ZN3Rtc10rtcGetTimeEv>:

void Rtc::rtcGetTime()
{
 8001d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d12:	b089      	sub	sp, #36	; 0x24
 8001d14:	af04      	add	r7, sp, #16
 8001d16:	6078      	str	r0, [r7, #4]
	uint8_t buffer[RTC_DATE_TIME_SIZE];

	if(HAL_I2C_Mem_Read(_hi2c, _devAddr, 0, 1, buffer, RTC_DATE_TIME_SIZE, 0xFF) == HAL_OK){
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6818      	ldr	r0, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	791b      	ldrb	r3, [r3, #4]
 8001d20:	b299      	uxth	r1, r3
 8001d22:	23ff      	movs	r3, #255	; 0xff
 8001d24:	9302      	str	r3, [sp, #8]
 8001d26:	2307      	movs	r3, #7
 8001d28:	9301      	str	r3, [sp, #4]
 8001d2a:	f107 0308 	add.w	r3, r7, #8
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	2301      	movs	r3, #1
 8001d32:	2200      	movs	r2, #0
 8001d34:	f002 fdf4 	bl	8004920 <HAL_I2C_Mem_Read>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	bf0c      	ite	eq
 8001d3e:	2301      	moveq	r3, #1
 8001d40:	2300      	movne	r3, #0
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d102      	bne.n	8001d4e <_ZN3Rtc10rtcGetTimeEv+0x3e>
		//printf("read is good\r\n");
	}
	else{
		printf("write is bad\r\n");
 8001d48:	4829      	ldr	r0, [pc, #164]	; (8001df0 <_ZN3Rtc10rtcGetTimeEv+0xe0>)
 8001d4a:	f00f fced 	bl	8011728 <puts>
	}

	// remove stop bit if set
	buffer[0] &= ~RTC_START_STOP;
 8001d4e:	7a3b      	ldrb	r3, [r7, #8]
 8001d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	723b      	strb	r3, [r7, #8]
	_dateTime.sec = bcdToInt(buffer[0]);
 8001d58:	7a3b      	ldrb	r3, [r7, #8]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff ff8e 	bl	8001c7c <_ZL8bcdToInth>
 8001d60:	4602      	mov	r2, r0
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	609a      	str	r2, [r3, #8]
	_dateTime.min = bcdToInt(buffer[1]);
 8001d66:	7a7b      	ldrb	r3, [r7, #9]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff87 	bl	8001c7c <_ZL8bcdToInth>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	60da      	str	r2, [r3, #12]
	_dateTime.hours = bcdToInt(buffer[2]);
 8001d74:	7abb      	ldrb	r3, [r7, #10]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff ff80 	bl	8001c7c <_ZL8bcdToInth>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	611a      	str	r2, [r3, #16]
	_dateTime.weekDay = buffer[3] & 0x07;
 8001d82:	7afb      	ldrb	r3, [r7, #11]
 8001d84:	f003 0207 	and.w	r2, r3, #7
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	615a      	str	r2, [r3, #20]
	_dateTime.day = bcdToInt(buffer[4]);
 8001d8c:	7b3b      	ldrb	r3, [r7, #12]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff ff74 	bl	8001c7c <_ZL8bcdToInth>
 8001d94:	4602      	mov	r2, r0
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	619a      	str	r2, [r3, #24]
	_dateTime.month = bcdToInt(buffer[5]);
 8001d9a:	7b7b      	ldrb	r3, [r7, #13]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff6d 	bl	8001c7c <_ZL8bcdToInth>
 8001da2:	4602      	mov	r2, r0
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	61da      	str	r2, [r3, #28]
	_dateTime.year = bcdToInt(buffer[6]);
 8001da8:	7bbb      	ldrb	r3, [r7, #14]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff ff66 	bl	8001c7c <_ZL8bcdToInth>
 8001db0:	4602      	mov	r2, r0
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	621a      	str	r2, [r3, #32]
	printf("date is %02d:%02d:%02d  %02d %02d/%02d/%02d \r\n ",_dateTime.hours,_dateTime.min,_dateTime.sec,_dateTime.weekDay,_dateTime.day,_dateTime.month,_dateTime.year);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691c      	ldr	r4, [r3, #16]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68dd      	ldr	r5, [r3, #12]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689e      	ldr	r6, [r3, #8]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	6992      	ldr	r2, [r2, #24]
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	69c9      	ldr	r1, [r1, #28]
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	6a00      	ldr	r0, [r0, #32]
 8001dd2:	9003      	str	r0, [sp, #12]
 8001dd4:	9102      	str	r1, [sp, #8]
 8001dd6:	9201      	str	r2, [sp, #4]
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	4633      	mov	r3, r6
 8001ddc:	462a      	mov	r2, r5
 8001dde:	4621      	mov	r1, r4
 8001de0:	4804      	ldr	r0, [pc, #16]	; (8001df4 <_ZN3Rtc10rtcGetTimeEv+0xe4>)
 8001de2:	f00f fc1b 	bl	801161c <iprintf>
}
 8001de6:	bf00      	nop
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dee:	bf00      	nop
 8001df0:	080145a4 	.word	0x080145a4
 8001df4:	080145b4 	.word	0x080145b4

08001df8 <_ZN3Rtc15rtcTimeToStringEv>:


DateTime * Rtc::rtcTimeToString(){
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b088      	sub	sp, #32
 8001dfc:	af04      	add	r7, sp, #16
 8001dfe:	6078      	str	r0, [r7, #4]
	uint8_t buffer[RTC_DATE_TIME_SIZE];

		if(HAL_I2C_Mem_Read(_hi2c, _devAddr, 0, 1, buffer, RTC_DATE_TIME_SIZE, 0xFF) == HAL_OK){
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6818      	ldr	r0, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	791b      	ldrb	r3, [r3, #4]
 8001e08:	b299      	uxth	r1, r3
 8001e0a:	23ff      	movs	r3, #255	; 0xff
 8001e0c:	9302      	str	r3, [sp, #8]
 8001e0e:	2307      	movs	r3, #7
 8001e10:	9301      	str	r3, [sp, #4]
 8001e12:	f107 0308 	add.w	r3, r7, #8
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	2301      	movs	r3, #1
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f002 fd80 	bl	8004920 <HAL_I2C_Mem_Read>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	bf0c      	ite	eq
 8001e26:	2301      	moveq	r3, #1
 8001e28:	2300      	movne	r3, #0
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d102      	bne.n	8001e36 <_ZN3Rtc15rtcTimeToStringEv+0x3e>
			//printf("read is good\r\n");
		}
		else{
			printf("write is bad\r\n");
 8001e30:	481e      	ldr	r0, [pc, #120]	; (8001eac <_ZN3Rtc15rtcTimeToStringEv+0xb4>)
 8001e32:	f00f fc79 	bl	8011728 <puts>
		}

		// remove stop bit if set
		buffer[0] &= ~RTC_START_STOP;
 8001e36:	7a3b      	ldrb	r3, [r7, #8]
 8001e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	723b      	strb	r3, [r7, #8]
		_dateTime.sec = bcdToInt(buffer[0]);
 8001e40:	7a3b      	ldrb	r3, [r7, #8]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff ff1a 	bl	8001c7c <_ZL8bcdToInth>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	609a      	str	r2, [r3, #8]
		_dateTime.min = bcdToInt(buffer[1]);
 8001e4e:	7a7b      	ldrb	r3, [r7, #9]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff ff13 	bl	8001c7c <_ZL8bcdToInth>
 8001e56:	4602      	mov	r2, r0
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	60da      	str	r2, [r3, #12]
		_dateTime.hours = bcdToInt(buffer[2]);
 8001e5c:	7abb      	ldrb	r3, [r7, #10]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff ff0c 	bl	8001c7c <_ZL8bcdToInth>
 8001e64:	4602      	mov	r2, r0
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	611a      	str	r2, [r3, #16]
		_dateTime.weekDay = buffer[3] & 0x07;
 8001e6a:	7afb      	ldrb	r3, [r7, #11]
 8001e6c:	f003 0207 	and.w	r2, r3, #7
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	615a      	str	r2, [r3, #20]
		_dateTime.day = bcdToInt(buffer[4]);
 8001e74:	7b3b      	ldrb	r3, [r7, #12]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff ff00 	bl	8001c7c <_ZL8bcdToInth>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	619a      	str	r2, [r3, #24]
		_dateTime.month = bcdToInt(buffer[5]);
 8001e82:	7b7b      	ldrb	r3, [r7, #13]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fef9 	bl	8001c7c <_ZL8bcdToInth>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	61da      	str	r2, [r3, #28]
		_dateTime.year = bcdToInt(buffer[6]);
 8001e90:	7bbb      	ldrb	r3, [r7, #14]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fef2 	bl	8001c7c <_ZL8bcdToInth>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	621a      	str	r2, [r3, #32]
		return &_dateTime;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3308      	adds	r3, #8
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	080145a4 	.word	0x080145a4

08001eb0 <_ZN3Rtc10rtcSetTimeEP8DateTime>:
void Rtc::rtcSetTime(DateTime * _dateTime)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af04      	add	r7, sp, #16
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]

	uint8_t buffer[RTC_DATE_TIME_SIZE];

	buffer[0] = intToBcd(_dateTime->sec, 0, 59);
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	223b      	movs	r2, #59	; 0x3b
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fef2 	bl	8001cac <_ZL8intToBcdiii>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	723b      	strb	r3, [r7, #8]
	buffer[1] = intToBcd(_dateTime->min, 0, 59);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	223b      	movs	r2, #59	; 0x3b
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fee9 	bl	8001cac <_ZL8intToBcdiii>
 8001eda:	4603      	mov	r3, r0
 8001edc:	727b      	strb	r3, [r7, #9]
	buffer[2] = intToBcd(_dateTime->hours, 0, 59);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	223b      	movs	r2, #59	; 0x3b
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fee0 	bl	8001cac <_ZL8intToBcdiii>
 8001eec:	4603      	mov	r3, r0
 8001eee:	72bb      	strb	r3, [r7, #10]
	buffer[3] = _dateTime->weekDay < 1 || _dateTime->weekDay > 7 ? 0 : _dateTime->weekDay;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	dd07      	ble.n	8001f08 <_ZN3Rtc10rtcSetTimeEP8DateTime+0x58>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	2b07      	cmp	r3, #7
 8001efe:	dc03      	bgt.n	8001f08 <_ZN3Rtc10rtcSetTimeEP8DateTime+0x58>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	e000      	b.n	8001f0a <_ZN3Rtc10rtcSetTimeEP8DateTime+0x5a>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	72fb      	strb	r3, [r7, #11]
	buffer[4] = intToBcd(_dateTime->day, 1, 31);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	221f      	movs	r2, #31
 8001f12:	2101      	movs	r1, #1
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff fec9 	bl	8001cac <_ZL8intToBcdiii>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	733b      	strb	r3, [r7, #12]
	buffer[5] = intToBcd(_dateTime->month, 1, 12);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	220c      	movs	r2, #12
 8001f24:	2101      	movs	r1, #1
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fec0 	bl	8001cac <_ZL8intToBcdiii>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	737b      	strb	r3, [r7, #13]
	buffer[6] = intToBcd(_dateTime->year, 1, 99);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	2263      	movs	r2, #99	; 0x63
 8001f36:	2101      	movs	r1, #1
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff feb7 	bl	8001cac <_ZL8intToBcdiii>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	73bb      	strb	r3, [r7, #14]

	if(HAL_I2C_Mem_Write(_hi2c, _devAddr, 0, 1, buffer, RTC_DATE_TIME_SIZE, 0xFF) == HAL_OK){
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6818      	ldr	r0, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	791b      	ldrb	r3, [r3, #4]
 8001f4a:	b299      	uxth	r1, r3
 8001f4c:	23ff      	movs	r3, #255	; 0xff
 8001f4e:	9302      	str	r3, [sp, #8]
 8001f50:	2307      	movs	r3, #7
 8001f52:	9301      	str	r3, [sp, #4]
 8001f54:	f107 0308 	add.w	r3, r7, #8
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f002 fbcb 	bl	80046f8 <HAL_I2C_Mem_Write>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	bf0c      	ite	eq
 8001f68:	2301      	moveq	r3, #1
 8001f6a:	2300      	movne	r3, #0
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <_ZN3Rtc10rtcSetTimeEP8DateTime+0xca>
		printf("write is good\r\n");
 8001f72:	4805      	ldr	r0, [pc, #20]	; (8001f88 <_ZN3Rtc10rtcSetTimeEP8DateTime+0xd8>)
 8001f74:	f00f fbd8 	bl	8011728 <puts>
	}
	else{
		printf("write is bad\r\n");
	}
}
 8001f78:	e002      	b.n	8001f80 <_ZN3Rtc10rtcSetTimeEP8DateTime+0xd0>
		printf("write is bad\r\n");
 8001f7a:	4804      	ldr	r0, [pc, #16]	; (8001f8c <_ZN3Rtc10rtcSetTimeEP8DateTime+0xdc>)
 8001f7c:	f00f fbd4 	bl	8011728 <puts>
}
 8001f80:	bf00      	nop
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	080145e4 	.word	0x080145e4
 8001f8c:	080145a4 	.word	0x080145a4

08001f90 <_ZN12CliContainer9doCommandEPcS0_>:

	void doCommand( char * cmd,  char * param){
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
		for (int j = 0; j <funcounter; j++) {
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	da1d      	bge.n	8001fe8 <_ZN12CliContainer9doCommandEPcS0_+0x58>
			if (strcmp(cmd,commands[j].CommandName) == 0) {
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	68b8      	ldr	r0, [r7, #8]
 8001fb8:	f7fe f90a 	bl	80001d0 <strcmp>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10e      	bne.n	8001fe0 <_ZN12CliContainer9doCommandEPcS0_+0x50>
				commands[j].command->doCommand(param);
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4413      	add	r3, r2
 8001fca:	6858      	ldr	r0, [r3, #4]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	4798      	blx	r3
				return;
 8001fde:	e006      	b.n	8001fee <_ZN12CliContainer9doCommandEPcS0_+0x5e>
		for (int j = 0; j <funcounter; j++) {
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	e7db      	b.n	8001fa0 <_ZN12CliContainer9doCommandEPcS0_+0x10>
			}

		}
		printf("Invalid command\r\n");
 8001fe8:	4802      	ldr	r0, [pc, #8]	; (8001ff4 <_ZN12CliContainer9doCommandEPcS0_+0x64>)
 8001fea:	f00f fb9d 	bl	8011728 <puts>
	}
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	080145f4 	.word	0x080145f4

08001ff8 <_ZN7ComTask8commTaskEv>:
int cmdcount = 0;
int cmdprint = 0;
extern CliContainer container;


int ComTask::commTask() {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 8002000:	f107 010e 	add.w	r1, r7, #14
 8002004:	230a      	movs	r3, #10
 8002006:	2201      	movs	r2, #1
 8002008:	4839      	ldr	r0, [pc, #228]	; (80020f0 <_ZN7ComTask8commTaskEv+0xf8>)
 800200a:	f006 fda1 	bl	8008b50 <HAL_UART_Receive>
 800200e:	4603      	mov	r3, r0
 8002010:	73fb      	strb	r3, [r7, #15]
	if (Status != HAL_OK) {
 8002012:	7bfb      	ldrb	r3, [r7, #15]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d025      	beq.n	8002064 <_ZN7ComTask8commTaskEv+0x6c>
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0) {
 8002018:	4b35      	ldr	r3, [pc, #212]	; (80020f0 <_ZN7ComTask8commTaskEv+0xf8>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	bf14      	ite	ne
 8002026:	2301      	movne	r3, #1
 8002028:	2300      	moveq	r3, #0
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <_ZN7ComTask8commTaskEv+0x40>
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 8002030:	4b2f      	ldr	r3, [pc, #188]	; (80020f0 <_ZN7ComTask8commTaskEv+0xf8>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2208      	movs	r2, #8
 8002036:	621a      	str	r2, [r3, #32]
		}

		// here we have a time to print the command
		while (cmdprint < cmdcount) {
 8002038:	4b2e      	ldr	r3, [pc, #184]	; (80020f4 <_ZN7ComTask8commTaskEv+0xfc>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4b2e      	ldr	r3, [pc, #184]	; (80020f8 <_ZN7ComTask8commTaskEv+0x100>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	da0d      	bge.n	8002060 <_ZN7ComTask8commTaskEv+0x68>
			HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8002044:	4b2b      	ldr	r3, [pc, #172]	; (80020f4 <_ZN7ComTask8commTaskEv+0xfc>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	1c5a      	adds	r2, r3, #1
 800204a:	492a      	ldr	r1, [pc, #168]	; (80020f4 <_ZN7ComTask8commTaskEv+0xfc>)
 800204c:	600a      	str	r2, [r1, #0]
 800204e:	4a2b      	ldr	r2, [pc, #172]	; (80020fc <_ZN7ComTask8commTaskEv+0x104>)
 8002050:	1899      	adds	r1, r3, r2
 8002052:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002056:	2201      	movs	r2, #1
 8002058:	4825      	ldr	r0, [pc, #148]	; (80020f0 <_ZN7ComTask8commTaskEv+0xf8>)
 800205a:	f006 fce5 	bl	8008a28 <HAL_UART_Transmit>
		while (cmdprint < cmdcount) {
 800205e:	e7eb      	b.n	8002038 <_ZN7ComTask8commTaskEv+0x40>
		}

		return 0;
 8002060:	2300      	movs	r3, #0
 8002062:	e040      	b.n	80020e6 <_ZN7ComTask8commTaskEv+0xee>
	}

	if (ch != '\r' && ch != '\n') {
 8002064:	7bbb      	ldrb	r3, [r7, #14]
 8002066:	2b0d      	cmp	r3, #13
 8002068:	d016      	beq.n	8002098 <_ZN7ComTask8commTaskEv+0xa0>
 800206a:	7bbb      	ldrb	r3, [r7, #14]
 800206c:	2b0a      	cmp	r3, #10
 800206e:	d013      	beq.n	8002098 <_ZN7ComTask8commTaskEv+0xa0>
		//HAL_UART_Transmit(&huart2, &ch, 1, 0xFFFF);

		if (cmdcount >= MAX_BUFFER_LENGTH) {
 8002070:	4b21      	ldr	r3, [pc, #132]	; (80020f8 <_ZN7ComTask8commTaskEv+0x100>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b63      	cmp	r3, #99	; 0x63
 8002076:	dd05      	ble.n	8002084 <_ZN7ComTask8commTaskEv+0x8c>
			cmdcount = 0;
 8002078:	4b1f      	ldr	r3, [pc, #124]	; (80020f8 <_ZN7ComTask8commTaskEv+0x100>)
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
			cmdprint = 0;
 800207e:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <_ZN7ComTask8commTaskEv+0xfc>)
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 8002084:	4b1c      	ldr	r3, [pc, #112]	; (80020f8 <_ZN7ComTask8commTaskEv+0x100>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	1c5a      	adds	r2, r3, #1
 800208a:	491b      	ldr	r1, [pc, #108]	; (80020f8 <_ZN7ComTask8commTaskEv+0x100>)
 800208c:	600a      	str	r2, [r1, #0]
 800208e:	7bb9      	ldrb	r1, [r7, #14]
 8002090:	4a1a      	ldr	r2, [pc, #104]	; (80020fc <_ZN7ComTask8commTaskEv+0x104>)
 8002092:	54d1      	strb	r1, [r2, r3]
		return 0;
 8002094:	2300      	movs	r3, #0
 8002096:	e026      	b.n	80020e6 <_ZN7ComTask8commTaskEv+0xee>
	}

	// here we have a time to print the command
	while (cmdprint < cmdcount) {
 8002098:	4b16      	ldr	r3, [pc, #88]	; (80020f4 <_ZN7ComTask8commTaskEv+0xfc>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <_ZN7ComTask8commTaskEv+0x100>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	da0d      	bge.n	80020c0 <_ZN7ComTask8commTaskEv+0xc8>
		HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <_ZN7ComTask8commTaskEv+0xfc>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	4912      	ldr	r1, [pc, #72]	; (80020f4 <_ZN7ComTask8commTaskEv+0xfc>)
 80020ac:	600a      	str	r2, [r1, #0]
 80020ae:	4a13      	ldr	r2, [pc, #76]	; (80020fc <_ZN7ComTask8commTaskEv+0x104>)
 80020b0:	1899      	adds	r1, r3, r2
 80020b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020b6:	2201      	movs	r2, #1
 80020b8:	480d      	ldr	r0, [pc, #52]	; (80020f0 <_ZN7ComTask8commTaskEv+0xf8>)
 80020ba:	f006 fcb5 	bl	8008a28 <HAL_UART_Transmit>
	while (cmdprint < cmdcount) {
 80020be:	e7eb      	b.n	8002098 <_ZN7ComTask8commTaskEv+0xa0>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n", 2, 0xFFFF);
 80020c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020c4:	2202      	movs	r2, #2
 80020c6:	490e      	ldr	r1, [pc, #56]	; (8002100 <_ZN7ComTask8commTaskEv+0x108>)
 80020c8:	4809      	ldr	r0, [pc, #36]	; (80020f0 <_ZN7ComTask8commTaskEv+0xf8>)
 80020ca:	f006 fcad 	bl	8008a28 <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 80020ce:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <_ZN7ComTask8commTaskEv+0x100>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a0a      	ldr	r2, [pc, #40]	; (80020fc <_ZN7ComTask8commTaskEv+0x104>)
 80020d4:	2100      	movs	r1, #0
 80020d6:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 80020d8:	4b07      	ldr	r3, [pc, #28]	; (80020f8 <_ZN7ComTask8commTaskEv+0x100>)
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
	cmdprint = 0;
 80020de:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <_ZN7ComTask8commTaskEv+0xfc>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
	return 1;
 80020e4:	2301      	movs	r3, #1
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	2000044c 	.word	0x2000044c
 80020f4:	200002ac 	.word	0x200002ac
 80020f8:	200002a8 	.word	0x200002a8
 80020fc:	20000244 	.word	0x20000244
 8002100:	08014608 	.word	0x08014608

08002104 <_ZN7ComTask13handleCommandEv>:

void ComTask::handleCommand() {
 8002104:	b580      	push	{r7, lr}
 8002106:	b094      	sub	sp, #80	; 0x50
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
	char cmd[20];
	char param[50];
	sscanf((const char*) cmdbuffer, "%s %s", cmd, param);
 800210c:	f107 0308 	add.w	r3, r7, #8
 8002110:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002114:	4907      	ldr	r1, [pc, #28]	; (8002134 <_ZN7ComTask13handleCommandEv+0x30>)
 8002116:	4808      	ldr	r0, [pc, #32]	; (8002138 <_ZN7ComTask13handleCommandEv+0x34>)
 8002118:	f00f fb82 	bl	8011820 <siscanf>

	container.doCommand(cmd,param);
 800211c:	f107 0208 	add.w	r2, r7, #8
 8002120:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002124:	4619      	mov	r1, r3
 8002126:	4805      	ldr	r0, [pc, #20]	; (800213c <_ZN7ComTask13handleCommandEv+0x38>)
 8002128:	f7ff ff32 	bl	8001f90 <_ZN12CliContainer9doCommandEPcS0_>
}
 800212c:	bf00      	nop
 800212e:	3750      	adds	r7, #80	; 0x50
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	0801460c 	.word	0x0801460c
 8002138:	20000244 	.word	0x20000244
 800213c:	20000524 	.word	0x20000524

08002140 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002144:	f001 fbe2 	bl	800390c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002148:	f000 f85c 	bl	8002204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800214c:	f000 fa5c 	bl	8002608 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002150:	f000 fa2a 	bl	80025a8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8002154:	f000 f97a 	bl	800244c <MX_TIM3_Init>
  MX_TIM6_Init();
 8002158:	f000 f9f0 	bl	800253c <MX_TIM6_Init>
  MX_TIM1_Init();
 800215c:	f000 f922 	bl	80023a4 <MX_TIM1_Init>
  MX_I2C1_Init();
 8002160:	f000 f8a2 	bl	80022a8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002164:	f000 f8e0 	bl	8002328 <MX_SPI1_Init>
  MX_FATFS_Init();
 8002168:	f007 fdda 	bl	8009d20 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  myMainInit();
 800216c:	f000 fd30 	bl	8002bd0 <myMainInit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002170:	f00b f8fc 	bl	800d36c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of DHT_MONITOR */
  DHT_MONITORHandle = osSemaphoreNew(1, 1, &DHT_MONITOR_attributes);
 8002174:	4a15      	ldr	r2, [pc, #84]	; (80021cc <main+0x8c>)
 8002176:	2101      	movs	r1, #1
 8002178:	2001      	movs	r0, #1
 800217a:	f00b fa3b 	bl	800d5f4 <osSemaphoreNew>
 800217e:	4603      	mov	r3, r0
 8002180:	4a13      	ldr	r2, [pc, #76]	; (80021d0 <main+0x90>)
 8002182:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of READ_TEMP */
  READ_TEMPHandle = osThreadNew(readTempFunc, NULL, &READ_TEMP_attributes);
 8002184:	4a13      	ldr	r2, [pc, #76]	; (80021d4 <main+0x94>)
 8002186:	2100      	movs	r1, #0
 8002188:	4813      	ldr	r0, [pc, #76]	; (80021d8 <main+0x98>)
 800218a:	f00b f939 	bl	800d400 <osThreadNew>
 800218e:	4603      	mov	r3, r0
 8002190:	4a12      	ldr	r2, [pc, #72]	; (80021dc <main+0x9c>)
 8002192:	6013      	str	r3, [r2, #0]

  /* creation of COMTASK */
  COMTASKHandle = osThreadNew(comtaskFunc, NULL, &COMTASK_attributes);
 8002194:	4a12      	ldr	r2, [pc, #72]	; (80021e0 <main+0xa0>)
 8002196:	2100      	movs	r1, #0
 8002198:	4812      	ldr	r0, [pc, #72]	; (80021e4 <main+0xa4>)
 800219a:	f00b f931 	bl	800d400 <osThreadNew>
 800219e:	4603      	mov	r3, r0
 80021a0:	4a11      	ldr	r2, [pc, #68]	; (80021e8 <main+0xa8>)
 80021a2:	6013      	str	r3, [r2, #0]

  /* creation of MONITOR_TEMP */
  MONITOR_TEMPHandle = osThreadNew(monitorFunc, NULL, &MONITOR_TEMP_attributes);
 80021a4:	4a11      	ldr	r2, [pc, #68]	; (80021ec <main+0xac>)
 80021a6:	2100      	movs	r1, #0
 80021a8:	4811      	ldr	r0, [pc, #68]	; (80021f0 <main+0xb0>)
 80021aa:	f00b f929 	bl	800d400 <osThreadNew>
 80021ae:	4603      	mov	r3, r0
 80021b0:	4a10      	ldr	r2, [pc, #64]	; (80021f4 <main+0xb4>)
 80021b2:	6013      	str	r3, [r2, #0]

  /* creation of BLINK_TASK */
  BLINK_TASKHandle = osThreadNew(blinkFunc, NULL, &BLINK_TASK_attributes);
 80021b4:	4a10      	ldr	r2, [pc, #64]	; (80021f8 <main+0xb8>)
 80021b6:	2100      	movs	r1, #0
 80021b8:	4810      	ldr	r0, [pc, #64]	; (80021fc <main+0xbc>)
 80021ba:	f00b f921 	bl	800d400 <osThreadNew>
 80021be:	4603      	mov	r3, r0
 80021c0:	4a0f      	ldr	r2, [pc, #60]	; (8002200 <main+0xc0>)
 80021c2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80021c4:	f00b f8f6 	bl	800d3b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80021c8:	e7fe      	b.n	80021c8 <main+0x88>
 80021ca:	bf00      	nop
 80021cc:	08014ae0 	.word	0x08014ae0
 80021d0:	200004e0 	.word	0x200004e0
 80021d4:	08014a50 	.word	0x08014a50
 80021d8:	08003035 	.word	0x08003035
 80021dc:	200004d0 	.word	0x200004d0
 80021e0:	08014a74 	.word	0x08014a74
 80021e4:	08003009 	.word	0x08003009
 80021e8:	200004d4 	.word	0x200004d4
 80021ec:	08014a98 	.word	0x08014a98
 80021f0:	08002c0d 	.word	0x08002c0d
 80021f4:	200004d8 	.word	0x200004d8
 80021f8:	08014abc 	.word	0x08014abc
 80021fc:	08003081 	.word	0x08003081
 8002200:	200004dc 	.word	0x200004dc

08002204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b096      	sub	sp, #88	; 0x58
 8002208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800220a:	f107 0314 	add.w	r3, r7, #20
 800220e:	2244      	movs	r2, #68	; 0x44
 8002210:	2100      	movs	r1, #0
 8002212:	4618      	mov	r0, r3
 8002214:	f00e fcb0 	bl	8010b78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002218:	463b      	mov	r3, r7
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	605a      	str	r2, [r3, #4]
 8002220:	609a      	str	r2, [r3, #8]
 8002222:	60da      	str	r2, [r3, #12]
 8002224:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002226:	f44f 7000 	mov.w	r0, #512	; 0x200
 800222a:	f002 ffdf 	bl	80051ec <HAL_PWREx_ControlVoltageScaling>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002234:	f000 faa2 	bl	800277c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002238:	2302      	movs	r3, #2
 800223a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800223c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002240:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002242:	2310      	movs	r3, #16
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002246:	2302      	movs	r3, #2
 8002248:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800224a:	2302      	movs	r3, #2
 800224c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800224e:	2301      	movs	r3, #1
 8002250:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002252:	230a      	movs	r3, #10
 8002254:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002256:	2307      	movs	r3, #7
 8002258:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800225a:	2302      	movs	r3, #2
 800225c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800225e:	2302      	movs	r3, #2
 8002260:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002262:	f107 0314 	add.w	r3, r7, #20
 8002266:	4618      	mov	r0, r3
 8002268:	f003 f816 	bl	8005298 <HAL_RCC_OscConfig>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002272:	f000 fa83 	bl	800277c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002276:	230f      	movs	r3, #15
 8002278:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800227a:	2303      	movs	r3, #3
 800227c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800227e:	2300      	movs	r3, #0
 8002280:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002286:	2300      	movs	r3, #0
 8002288:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800228a:	463b      	mov	r3, r7
 800228c:	2104      	movs	r1, #4
 800228e:	4618      	mov	r0, r3
 8002290:	f003 fbde 	bl	8005a50 <HAL_RCC_ClockConfig>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800229a:	f000 fa6f 	bl	800277c <Error_Handler>
  }
}
 800229e:	bf00      	nop
 80022a0:	3758      	adds	r7, #88	; 0x58
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022ac:	4b1b      	ldr	r3, [pc, #108]	; (800231c <MX_I2C1_Init+0x74>)
 80022ae:	4a1c      	ldr	r2, [pc, #112]	; (8002320 <MX_I2C1_Init+0x78>)
 80022b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80022b2:	4b1a      	ldr	r3, [pc, #104]	; (800231c <MX_I2C1_Init+0x74>)
 80022b4:	4a1b      	ldr	r2, [pc, #108]	; (8002324 <MX_I2C1_Init+0x7c>)
 80022b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80022b8:	4b18      	ldr	r3, [pc, #96]	; (800231c <MX_I2C1_Init+0x74>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022be:	4b17      	ldr	r3, [pc, #92]	; (800231c <MX_I2C1_Init+0x74>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022c4:	4b15      	ldr	r3, [pc, #84]	; (800231c <MX_I2C1_Init+0x74>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80022ca:	4b14      	ldr	r3, [pc, #80]	; (800231c <MX_I2C1_Init+0x74>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80022d0:	4b12      	ldr	r3, [pc, #72]	; (800231c <MX_I2C1_Init+0x74>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022d6:	4b11      	ldr	r3, [pc, #68]	; (800231c <MX_I2C1_Init+0x74>)
 80022d8:	2200      	movs	r2, #0
 80022da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022dc:	4b0f      	ldr	r3, [pc, #60]	; (800231c <MX_I2C1_Init+0x74>)
 80022de:	2200      	movs	r2, #0
 80022e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022e2:	480e      	ldr	r0, [pc, #56]	; (800231c <MX_I2C1_Init+0x74>)
 80022e4:	f002 f978 	bl	80045d8 <HAL_I2C_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80022ee:	f000 fa45 	bl	800277c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80022f2:	2100      	movs	r1, #0
 80022f4:	4809      	ldr	r0, [pc, #36]	; (800231c <MX_I2C1_Init+0x74>)
 80022f6:	f002 fed3 	bl	80050a0 <HAL_I2CEx_ConfigAnalogFilter>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002300:	f000 fa3c 	bl	800277c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002304:	2100      	movs	r1, #0
 8002306:	4805      	ldr	r0, [pc, #20]	; (800231c <MX_I2C1_Init+0x74>)
 8002308:	f002 ff15 	bl	8005136 <HAL_I2CEx_ConfigDigitalFilter>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002312:	f000 fa33 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	200002b0 	.word	0x200002b0
 8002320:	40005400 	.word	0x40005400
 8002324:	10909cec 	.word	0x10909cec

08002328 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800232c:	4b1b      	ldr	r3, [pc, #108]	; (800239c <MX_SPI1_Init+0x74>)
 800232e:	4a1c      	ldr	r2, [pc, #112]	; (80023a0 <MX_SPI1_Init+0x78>)
 8002330:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002332:	4b1a      	ldr	r3, [pc, #104]	; (800239c <MX_SPI1_Init+0x74>)
 8002334:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002338:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800233a:	4b18      	ldr	r3, [pc, #96]	; (800239c <MX_SPI1_Init+0x74>)
 800233c:	2200      	movs	r2, #0
 800233e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002340:	4b16      	ldr	r3, [pc, #88]	; (800239c <MX_SPI1_Init+0x74>)
 8002342:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002346:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002348:	4b14      	ldr	r3, [pc, #80]	; (800239c <MX_SPI1_Init+0x74>)
 800234a:	2200      	movs	r2, #0
 800234c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800234e:	4b13      	ldr	r3, [pc, #76]	; (800239c <MX_SPI1_Init+0x74>)
 8002350:	2200      	movs	r2, #0
 8002352:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <MX_SPI1_Init+0x74>)
 8002356:	f44f 7200 	mov.w	r2, #512	; 0x200
 800235a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800235c:	4b0f      	ldr	r3, [pc, #60]	; (800239c <MX_SPI1_Init+0x74>)
 800235e:	2230      	movs	r2, #48	; 0x30
 8002360:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002362:	4b0e      	ldr	r3, [pc, #56]	; (800239c <MX_SPI1_Init+0x74>)
 8002364:	2200      	movs	r2, #0
 8002366:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <MX_SPI1_Init+0x74>)
 800236a:	2200      	movs	r2, #0
 800236c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800236e:	4b0b      	ldr	r3, [pc, #44]	; (800239c <MX_SPI1_Init+0x74>)
 8002370:	2200      	movs	r2, #0
 8002372:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002374:	4b09      	ldr	r3, [pc, #36]	; (800239c <MX_SPI1_Init+0x74>)
 8002376:	2207      	movs	r2, #7
 8002378:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800237a:	4b08      	ldr	r3, [pc, #32]	; (800239c <MX_SPI1_Init+0x74>)
 800237c:	2200      	movs	r2, #0
 800237e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002380:	4b06      	ldr	r3, [pc, #24]	; (800239c <MX_SPI1_Init+0x74>)
 8002382:	2208      	movs	r2, #8
 8002384:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002386:	4805      	ldr	r0, [pc, #20]	; (800239c <MX_SPI1_Init+0x74>)
 8002388:	f004 fa74 	bl	8006874 <HAL_SPI_Init>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002392:	f000 f9f3 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000304 	.word	0x20000304
 80023a0:	40013000 	.word	0x40013000

080023a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b088      	sub	sp, #32
 80023a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023aa:	f107 0310 	add.w	r3, r7, #16
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	605a      	str	r2, [r3, #4]
 80023b4:	609a      	str	r2, [r3, #8]
 80023b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023b8:	1d3b      	adds	r3, r7, #4
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	605a      	str	r2, [r3, #4]
 80023c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023c2:	4b20      	ldr	r3, [pc, #128]	; (8002444 <MX_TIM1_Init+0xa0>)
 80023c4:	4a20      	ldr	r2, [pc, #128]	; (8002448 <MX_TIM1_Init+0xa4>)
 80023c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 80023c8:	4b1e      	ldr	r3, [pc, #120]	; (8002444 <MX_TIM1_Init+0xa0>)
 80023ca:	224f      	movs	r2, #79	; 0x4f
 80023cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ce:	4b1d      	ldr	r3, [pc, #116]	; (8002444 <MX_TIM1_Init+0xa0>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80023d4:	4b1b      	ldr	r3, [pc, #108]	; (8002444 <MX_TIM1_Init+0xa0>)
 80023d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023dc:	4b19      	ldr	r3, [pc, #100]	; (8002444 <MX_TIM1_Init+0xa0>)
 80023de:	2200      	movs	r2, #0
 80023e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023e2:	4b18      	ldr	r3, [pc, #96]	; (8002444 <MX_TIM1_Init+0xa0>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e8:	4b16      	ldr	r3, [pc, #88]	; (8002444 <MX_TIM1_Init+0xa0>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023ee:	4815      	ldr	r0, [pc, #84]	; (8002444 <MX_TIM1_Init+0xa0>)
 80023f0:	f004 ff7a 	bl	80072e8 <HAL_TIM_Base_Init>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80023fa:	f000 f9bf 	bl	800277c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002402:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002404:	f107 0310 	add.w	r3, r7, #16
 8002408:	4619      	mov	r1, r3
 800240a:	480e      	ldr	r0, [pc, #56]	; (8002444 <MX_TIM1_Init+0xa0>)
 800240c:	f005 fcf6 	bl	8007dfc <HAL_TIM_ConfigClockSource>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002416:	f000 f9b1 	bl	800277c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800241a:	2300      	movs	r3, #0
 800241c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002426:	1d3b      	adds	r3, r7, #4
 8002428:	4619      	mov	r1, r3
 800242a:	4806      	ldr	r0, [pc, #24]	; (8002444 <MX_TIM1_Init+0xa0>)
 800242c:	f006 fa08 	bl	8008840 <HAL_TIMEx_MasterConfigSynchronization>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002436:	f000 f9a1 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800243a:	bf00      	nop
 800243c:	3720      	adds	r7, #32
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000368 	.word	0x20000368
 8002448:	40012c00 	.word	0x40012c00

0800244c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08e      	sub	sp, #56	; 0x38
 8002450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002452:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	605a      	str	r2, [r3, #4]
 800245c:	609a      	str	r2, [r3, #8]
 800245e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002460:	f107 031c 	add.w	r3, r7, #28
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800246c:	463b      	mov	r3, r7
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	605a      	str	r2, [r3, #4]
 8002474:	609a      	str	r2, [r3, #8]
 8002476:	60da      	str	r2, [r3, #12]
 8002478:	611a      	str	r2, [r3, #16]
 800247a:	615a      	str	r2, [r3, #20]
 800247c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800247e:	4b2d      	ldr	r3, [pc, #180]	; (8002534 <MX_TIM3_Init+0xe8>)
 8002480:	4a2d      	ldr	r2, [pc, #180]	; (8002538 <MX_TIM3_Init+0xec>)
 8002482:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 8002484:	4b2b      	ldr	r3, [pc, #172]	; (8002534 <MX_TIM3_Init+0xe8>)
 8002486:	f240 321f 	movw	r2, #799	; 0x31f
 800248a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800248c:	4b29      	ldr	r3, [pc, #164]	; (8002534 <MX_TIM3_Init+0xe8>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8002492:	4b28      	ldr	r3, [pc, #160]	; (8002534 <MX_TIM3_Init+0xe8>)
 8002494:	2264      	movs	r2, #100	; 0x64
 8002496:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002498:	4b26      	ldr	r3, [pc, #152]	; (8002534 <MX_TIM3_Init+0xe8>)
 800249a:	2200      	movs	r2, #0
 800249c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800249e:	4b25      	ldr	r3, [pc, #148]	; (8002534 <MX_TIM3_Init+0xe8>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80024a4:	4823      	ldr	r0, [pc, #140]	; (8002534 <MX_TIM3_Init+0xe8>)
 80024a6:	f004 ff1f 	bl	80072e8 <HAL_TIM_Base_Init>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80024b0:	f000 f964 	bl	800277c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80024ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024be:	4619      	mov	r1, r3
 80024c0:	481c      	ldr	r0, [pc, #112]	; (8002534 <MX_TIM3_Init+0xe8>)
 80024c2:	f005 fc9b 	bl	8007dfc <HAL_TIM_ConfigClockSource>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80024cc:	f000 f956 	bl	800277c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80024d0:	4818      	ldr	r0, [pc, #96]	; (8002534 <MX_TIM3_Init+0xe8>)
 80024d2:	f005 f861 	bl	8007598 <HAL_TIM_PWM_Init>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80024dc:	f000 f94e 	bl	800277c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024e0:	2300      	movs	r3, #0
 80024e2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024e4:	2300      	movs	r3, #0
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024e8:	f107 031c 	add.w	r3, r7, #28
 80024ec:	4619      	mov	r1, r3
 80024ee:	4811      	ldr	r0, [pc, #68]	; (8002534 <MX_TIM3_Init+0xe8>)
 80024f0:	f006 f9a6 	bl	8008840 <HAL_TIMEx_MasterConfigSynchronization>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80024fa:	f000 f93f 	bl	800277c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024fe:	2360      	movs	r3, #96	; 0x60
 8002500:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8002502:	2332      	movs	r3, #50	; 0x32
 8002504:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002506:	2300      	movs	r3, #0
 8002508:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800250a:	2300      	movs	r3, #0
 800250c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800250e:	463b      	mov	r3, r7
 8002510:	2200      	movs	r2, #0
 8002512:	4619      	mov	r1, r3
 8002514:	4807      	ldr	r0, [pc, #28]	; (8002534 <MX_TIM3_Init+0xe8>)
 8002516:	f005 fb5d 	bl	8007bd4 <HAL_TIM_PWM_ConfigChannel>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002520:	f000 f92c 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002524:	4803      	ldr	r0, [pc, #12]	; (8002534 <MX_TIM3_Init+0xe8>)
 8002526:	f000 ffa1 	bl	800346c <HAL_TIM_MspPostInit>

}
 800252a:	bf00      	nop
 800252c:	3738      	adds	r7, #56	; 0x38
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	200003b4 	.word	0x200003b4
 8002538:	40000400 	.word	0x40000400

0800253c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800254c:	4b14      	ldr	r3, [pc, #80]	; (80025a0 <MX_TIM6_Init+0x64>)
 800254e:	4a15      	ldr	r2, [pc, #84]	; (80025a4 <MX_TIM6_Init+0x68>)
 8002550:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8002552:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <MX_TIM6_Init+0x64>)
 8002554:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002558:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800255a:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <MX_TIM6_Init+0x64>)
 800255c:	2200      	movs	r2, #0
 800255e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 8002560:	4b0f      	ldr	r3, [pc, #60]	; (80025a0 <MX_TIM6_Init+0x64>)
 8002562:	220a      	movs	r2, #10
 8002564:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002566:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <MX_TIM6_Init+0x64>)
 8002568:	2200      	movs	r2, #0
 800256a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800256c:	480c      	ldr	r0, [pc, #48]	; (80025a0 <MX_TIM6_Init+0x64>)
 800256e:	f004 febb 	bl	80072e8 <HAL_TIM_Base_Init>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002578:	f000 f900 	bl	800277c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800257c:	2300      	movs	r3, #0
 800257e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002580:	2300      	movs	r3, #0
 8002582:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002584:	1d3b      	adds	r3, r7, #4
 8002586:	4619      	mov	r1, r3
 8002588:	4805      	ldr	r0, [pc, #20]	; (80025a0 <MX_TIM6_Init+0x64>)
 800258a:	f006 f959 	bl	8008840 <HAL_TIMEx_MasterConfigSynchronization>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002594:	f000 f8f2 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002598:	bf00      	nop
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	20000400 	.word	0x20000400
 80025a4:	40001000 	.word	0x40001000

080025a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025ac:	4b14      	ldr	r3, [pc, #80]	; (8002600 <MX_USART2_UART_Init+0x58>)
 80025ae:	4a15      	ldr	r2, [pc, #84]	; (8002604 <MX_USART2_UART_Init+0x5c>)
 80025b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80025b2:	4b13      	ldr	r3, [pc, #76]	; (8002600 <MX_USART2_UART_Init+0x58>)
 80025b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025ba:	4b11      	ldr	r3, [pc, #68]	; (8002600 <MX_USART2_UART_Init+0x58>)
 80025bc:	2200      	movs	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025c0:	4b0f      	ldr	r3, [pc, #60]	; (8002600 <MX_USART2_UART_Init+0x58>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025c6:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <MX_USART2_UART_Init+0x58>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025cc:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <MX_USART2_UART_Init+0x58>)
 80025ce:	220c      	movs	r2, #12
 80025d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025d2:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <MX_USART2_UART_Init+0x58>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025d8:	4b09      	ldr	r3, [pc, #36]	; (8002600 <MX_USART2_UART_Init+0x58>)
 80025da:	2200      	movs	r2, #0
 80025dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025de:	4b08      	ldr	r3, [pc, #32]	; (8002600 <MX_USART2_UART_Init+0x58>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025e4:	4b06      	ldr	r3, [pc, #24]	; (8002600 <MX_USART2_UART_Init+0x58>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025ea:	4805      	ldr	r0, [pc, #20]	; (8002600 <MX_USART2_UART_Init+0x58>)
 80025ec:	f006 f9ce 	bl	800898c <HAL_UART_Init>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80025f6:	f000 f8c1 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	2000044c 	.word	0x2000044c
 8002604:	40004400 	.word	0x40004400

08002608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08a      	sub	sp, #40	; 0x28
 800260c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800260e:	f107 0314 	add.w	r3, r7, #20
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	605a      	str	r2, [r3, #4]
 8002618:	609a      	str	r2, [r3, #8]
 800261a:	60da      	str	r2, [r3, #12]
 800261c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800261e:	4b4b      	ldr	r3, [pc, #300]	; (800274c <MX_GPIO_Init+0x144>)
 8002620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002622:	4a4a      	ldr	r2, [pc, #296]	; (800274c <MX_GPIO_Init+0x144>)
 8002624:	f043 0304 	orr.w	r3, r3, #4
 8002628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800262a:	4b48      	ldr	r3, [pc, #288]	; (800274c <MX_GPIO_Init+0x144>)
 800262c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262e:	f003 0304 	and.w	r3, r3, #4
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002636:	4b45      	ldr	r3, [pc, #276]	; (800274c <MX_GPIO_Init+0x144>)
 8002638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263a:	4a44      	ldr	r2, [pc, #272]	; (800274c <MX_GPIO_Init+0x144>)
 800263c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002642:	4b42      	ldr	r3, [pc, #264]	; (800274c <MX_GPIO_Init+0x144>)
 8002644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800264e:	4b3f      	ldr	r3, [pc, #252]	; (800274c <MX_GPIO_Init+0x144>)
 8002650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002652:	4a3e      	ldr	r2, [pc, #248]	; (800274c <MX_GPIO_Init+0x144>)
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800265a:	4b3c      	ldr	r3, [pc, #240]	; (800274c <MX_GPIO_Init+0x144>)
 800265c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002666:	4b39      	ldr	r3, [pc, #228]	; (800274c <MX_GPIO_Init+0x144>)
 8002668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266a:	4a38      	ldr	r2, [pc, #224]	; (800274c <MX_GPIO_Init+0x144>)
 800266c:	f043 0302 	orr.w	r3, r3, #2
 8002670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002672:	4b36      	ldr	r3, [pc, #216]	; (800274c <MX_GPIO_Init+0x144>)
 8002674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	607b      	str	r3, [r7, #4]
 800267c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800267e:	2200      	movs	r2, #0
 8002680:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002688:	f001 ff5c 	bl	8004544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800268c:	2200      	movs	r2, #0
 800268e:	2140      	movs	r1, #64	; 0x40
 8002690:	482f      	ldr	r0, [pc, #188]	; (8002750 <MX_GPIO_Init+0x148>)
 8002692:	f001 ff57 	bl	8004544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002696:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800269a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800269c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80026a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80026a6:	f107 0314 	add.w	r3, r7, #20
 80026aa:	4619      	mov	r1, r3
 80026ac:	4829      	ldr	r0, [pc, #164]	; (8002754 <MX_GPIO_Init+0x14c>)
 80026ae:	f001 fd87 	bl	80041c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80026b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026b8:	2301      	movs	r3, #1
 80026ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c0:	2300      	movs	r3, #0
 80026c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80026c4:	f107 0314 	add.w	r3, r7, #20
 80026c8:	4619      	mov	r1, r3
 80026ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026ce:	f001 fd77 	bl	80041c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 80026d2:	2308      	movs	r3, #8
 80026d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80026d6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80026da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 80026e0:	f107 0314 	add.w	r3, r7, #20
 80026e4:	4619      	mov	r1, r3
 80026e6:	481a      	ldr	r0, [pc, #104]	; (8002750 <MX_GPIO_Init+0x148>)
 80026e8:	f001 fd6a 	bl	80041c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : pin_4_Pin */
  GPIO_InitStruct.Pin = pin_4_Pin;
 80026ec:	2320      	movs	r3, #32
 80026ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80026f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(pin_4_GPIO_Port, &GPIO_InitStruct);
 80026fa:	f107 0314 	add.w	r3, r7, #20
 80026fe:	4619      	mov	r1, r3
 8002700:	4813      	ldr	r0, [pc, #76]	; (8002750 <MX_GPIO_Init+0x148>)
 8002702:	f001 fd5d 	bl	80041c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8002706:	2340      	movs	r3, #64	; 0x40
 8002708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800270a:	2301      	movs	r3, #1
 800270c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002712:	2300      	movs	r3, #0
 8002714:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002716:	f107 0314 	add.w	r3, r7, #20
 800271a:	4619      	mov	r1, r3
 800271c:	480c      	ldr	r0, [pc, #48]	; (8002750 <MX_GPIO_Init+0x148>)
 800271e:	f001 fd4f 	bl	80041c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002722:	2200      	movs	r2, #0
 8002724:	2105      	movs	r1, #5
 8002726:	2017      	movs	r0, #23
 8002728:	f001 fa0c 	bl	8003b44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800272c:	2017      	movs	r0, #23
 800272e:	f001 fa25 	bl	8003b7c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002732:	2200      	movs	r2, #0
 8002734:	2105      	movs	r1, #5
 8002736:	2028      	movs	r0, #40	; 0x28
 8002738:	f001 fa04 	bl	8003b44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800273c:	2028      	movs	r0, #40	; 0x28
 800273e:	f001 fa1d 	bl	8003b7c <HAL_NVIC_EnableIRQ>

}
 8002742:	bf00      	nop
 8002744:	3728      	adds	r7, #40	; 0x28
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40021000 	.word	0x40021000
 8002750:	48000400 	.word	0x48000400
 8002754:	48000800 	.word	0x48000800

08002758 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a04      	ldr	r2, [pc, #16]	; (8002778 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d101      	bne.n	800276e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800276a:	f001 f8ef 	bl	800394c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */


  /* USER CODE END Callback 1 */
}
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40014400 	.word	0x40014400

0800277c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002780:	b672      	cpsid	i
}
 8002782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002784:	e7fe      	b.n	8002784 <Error_Handler+0x8>

08002786 <_ZL10pageSelectP22FLASH_EraseInitTypeDef>:
		 _Instance = new Flash;
	 }
	 return _Instance;
 }
static void pageSelect (FLASH_EraseInitTypeDef * page)
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
	page->TypeErase = FLASH_TYPEERASE_PAGES;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
	page->Banks = FLASH_BANK_2;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2202      	movs	r2, #2
 8002798:	605a      	str	r2, [r3, #4]
	page->Page = 256;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027a0:	609a      	str	r2, [r3, #8]
	page->NbPages = 1;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	60da      	str	r2, [r3, #12]
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <_ZN5FlashC1Ev>:
Flash::Flash()
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
{
	pageSelect(_page);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff ffdd 	bl	8002786 <_ZL10pageSelectP22FLASH_EraseInitTypeDef>
}
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <_ZN5Flash5eraseEv>:
		printf("Erase failed\r\n");
	}
}

void Flash::erase()
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 80027e0:	f001 fac6 	bl	8003d70 <HAL_FLASH_Unlock>
	static uint32_t pageerror = 0;
		if (HAL_FLASHEx_Erase(_page, &pageerror) != HAL_OK) {
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4909      	ldr	r1, [pc, #36]	; (8002810 <_ZN5Flash5eraseEv+0x38>)
 80027ea:	4618      	mov	r0, r3
 80027ec:	f001 fba4 	bl	8003f38 <HAL_FLASHEx_Erase>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	bf14      	ite	ne
 80027f6:	2301      	movne	r3, #1
 80027f8:	2300      	moveq	r3, #0
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d002      	beq.n	8002806 <_ZN5Flash5eraseEv+0x2e>
			printf("Erase failed\r\n");
 8002800:	4804      	ldr	r0, [pc, #16]	; (8002814 <_ZN5Flash5eraseEv+0x3c>)
 8002802:	f00e ff91 	bl	8011728 <puts>
		}
}
 8002806:	bf00      	nop
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	200004e4 	.word	0x200004e4
 8002814:	08014650 	.word	0x08014650

08002818 <_ZN5Flash7programEPv>:

void Flash::program(void * obj)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
	uint32_t flashindex = 0;
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]
	uint8_t* ptr = (uint8_t*)(obj);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	60fb      	str	r3, [r7, #12]
	for (size_t i = 0 ; i < sizeof(thresHolds) ; i+=sizeof(uint64_t))
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	2b17      	cmp	r3, #23
 8002832:	d81f      	bhi.n	8002874 <_ZN5Flash7programEPv+0x5c>
	{
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ADRESS+flashindex, *(uint64_t*)(ptr+flashindex)) != HAL_OK) {
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 800283a:	f501 2100 	add.w	r1, r1, #524288	; 0x80000
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	4413      	add	r3, r2
 8002844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002848:	2000      	movs	r0, #0
 800284a:	f001 fa25 	bl	8003c98 <HAL_FLASH_Program>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	bf14      	ite	ne
 8002854:	2301      	movne	r3, #1
 8002856:	2300      	moveq	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <_ZN5Flash7programEPv+0x4e>
			printf("Program failed\r\n");
 800285e:	4808      	ldr	r0, [pc, #32]	; (8002880 <_ZN5Flash7programEPv+0x68>)
 8002860:	f00e ff62 	bl	8011728 <puts>
			break;
 8002864:	e006      	b.n	8002874 <_ZN5Flash7programEPv+0x5c>
		}
		flashindex+=sizeof(uint64_t);
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	3308      	adds	r3, #8
 800286a:	617b      	str	r3, [r7, #20]
	for (size_t i = 0 ; i < sizeof(thresHolds) ; i+=sizeof(uint64_t))
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	3308      	adds	r3, #8
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	e7dc      	b.n	800282e <_ZN5Flash7programEPv+0x16>
	}
	HAL_FLASH_Lock();
 8002874:	f001 fa9e 	bl	8003db4 <HAL_FLASH_Lock>
}
 8002878:	bf00      	nop
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	08014660 	.word	0x08014660

08002884 <_ZN6BuzzerC1EP17TIM_HandleTypeDef>:

extern TIM_HandleTypeDef htim3;
int count = 0;
int frame = 0;

Buzzer::Buzzer(TIM_HandleTypeDef *htim)
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
{
	htim = htim;

}
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4618      	mov	r0, r3
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <_ZN6Buzzer15buzzerStartPlayEv>:
void Buzzer::buzzerStartPlay()
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(&htim3);
 80028a4:	4808      	ldr	r0, [pc, #32]	; (80028c8 <_ZN6Buzzer15buzzerStartPlayEv+0x2c>)
 80028a6:	f004 fd77 	bl	8007398 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80028aa:	2100      	movs	r1, #0
 80028ac:	4806      	ldr	r0, [pc, #24]	; (80028c8 <_ZN6Buzzer15buzzerStartPlayEv+0x2c>)
 80028ae:	f004 fed5 	bl	800765c <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_AUTORELOAD(&htim3,150);
 80028b2:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <_ZN6Buzzer15buzzerStartPlayEv+0x2c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2296      	movs	r2, #150	; 0x96
 80028b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80028ba:	4b03      	ldr	r3, [pc, #12]	; (80028c8 <_ZN6Buzzer15buzzerStartPlayEv+0x2c>)
 80028bc:	2296      	movs	r2, #150	; 0x96
 80028be:	60da      	str	r2, [r3, #12]
}
 80028c0:	bf00      	nop
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	200003b4 	.word	0x200003b4

080028cc <_ZN6Buzzer14buzzerStopPlayEv>:
void Buzzer::buzzerStopPlay()
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop(&htim3);
 80028d4:	4805      	ldr	r0, [pc, #20]	; (80028ec <_ZN6Buzzer14buzzerStopPlayEv+0x20>)
 80028d6:	f004 fdc7 	bl	8007468 <HAL_TIM_Base_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80028da:	2100      	movs	r1, #0
 80028dc:	4803      	ldr	r0, [pc, #12]	; (80028ec <_ZN6Buzzer14buzzerStopPlayEv+0x20>)
 80028de:	f004 ffc3 	bl	8007868 <HAL_TIM_PWM_Stop>
}
 80028e2:	bf00      	nop
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	200003b4 	.word	0x200003b4

080028f0 <_ZN12CliContainerC1Ev>:
	CliContainer(){}
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4618      	mov	r0, r3
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <_ZN12CliContainerD1Ev>:
	~CliContainer(){}
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4618      	mov	r0, r3
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <_ZN7ComTaskC1Ev>:
#include "stdio.h"

class ComTask
{
public:
	ComTask(){}
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4618      	mov	r0, r3
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
	...

0800293c <_ZN10thresHoldsC1Ev>:
struct thresHolds{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a0a      	ldr	r2, [pc, #40]	; (8002970 <_ZN10thresHoldsC1Ev+0x34>)
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	4b08      	ldr	r3, [pc, #32]	; (8002974 <_ZN10thresHoldsC1Ev+0x38>)
 8002952:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	4b05      	ldr	r3, [pc, #20]	; (8002974 <_ZN10thresHoldsC1Ev+0x38>)
 800295e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4618      	mov	r0, r3
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	0001e240 	.word	0x0001e240
 8002974:	40590000 	.word	0x40590000

08002978 <_ZN7MonitorC1Ev>:
	Monitor(){}
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff ffda 	bl	800293c <_ZN10thresHoldsC1Ev>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <_ZN7Monitor10getWarningEv>:
	double getWarning()
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
		return _values._warning;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80029a0:	ec43 2b17 	vmov	d7, r2, r3
	}
 80029a4:	eeb0 0a47 	vmov.f32	s0, s14
 80029a8:	eef0 0a67 	vmov.f32	s1, s15
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <_ZN7Monitor11getCriticalEv>:
	double getCritical()
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
		return _values._critical;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80029c4:	ec43 2b17 	vmov	d7, r2, r3
	}
 80029c8:	eeb0 0a47 	vmov.f32	s0, s14
 80029cc:	eef0 0a67 	vmov.f32	s1, s15
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <_ZN7Monitor8getStateEv>:
	MointorState getState()
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
		return _state;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	7e1b      	ldrb	r3, [r3, #24]
	}
 80029e6:	4618      	mov	r0, r3
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <_ZN7Monitor8setStateE12MointorState>:
	void setState(MointorState State)
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
 80029fa:	460b      	mov	r3, r1
 80029fc:	70fb      	strb	r3, [r7, #3]
		_state = State;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	78fa      	ldrb	r2, [r7, #3]
 8002a02:	761a      	strb	r2, [r3, #24]
	}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <_ZN4FileC1E3FIL5FATFS7FRESULTPKc>:
	File(FIL  file,FATFS  FatFs,FRESULT  fres, const char * name)
 8002a10:	b084      	sub	sp, #16
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b082      	sub	sp, #8
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	f107 0014 	add.w	r0, r7, #20
 8002a1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		this->_file = file;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8002a28:	f107 0114 	add.w	r1, r7, #20
 8002a2c:	f44f 720c 	mov.w	r2, #560	; 0x230
 8002a30:	4618      	mov	r0, r3
 8002a32:	f00e f893 	bl	8010b5c <memcpy>
		this->_FatFs = FatFs;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3314      	adds	r3, #20
 8002a3a:	f507 7111 	add.w	r1, r7, #580	; 0x244
 8002a3e:	f44f 720d 	mov.w	r2, #564	; 0x234
 8002a42:	4618      	mov	r0, r3
 8002a44:	f00e f88a 	bl	8010b5c <memcpy>
		this->_fres = fres;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f897 2478 	ldrb.w	r2, [r7, #1144]	; 0x478
 8002a4e:	f883 2478 	strb.w	r2, [r3, #1144]	; 0x478
		strcpy(_filename,name);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f8d7 147c 	ldr.w	r1, [r7, #1148]	; 0x47c
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f00e ff52 	bl	8011902 <strcpy>
	}
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a6a:	b004      	add	sp, #16
 8002a6c:	4770      	bx	lr
	...

08002a70 <_ZN4File5writeEPc>:
	void write(char * writeBuf){
 8002a70:	b590      	push	{r4, r7, lr}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
	  _fres = f_open(&_file, _filename, FA_WRITE | FA_OPEN_APPEND );
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	2232      	movs	r2, #50	; 0x32
 8002a84:	4618      	mov	r0, r3
 8002a86:	f009 fd0d 	bl	800c4a4 <f_open>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f883 2478 	strb.w	r2, [r3, #1144]	; 0x478
	  if(_fres == FR_OK) {
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 3478 	ldrb.w	r3, [r3, #1144]	; 0x478
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d103      	bne.n	8002aa6 <_ZN4File5writeEPc+0x36>
		printf("I was able to open 'file.txt' for writing\r\n");
 8002a9e:	481c      	ldr	r0, [pc, #112]	; (8002b10 <_ZN4File5writeEPc+0xa0>)
 8002aa0:	f00e fe42 	bl	8011728 <puts>
 8002aa4:	e006      	b.n	8002ab4 <_ZN4File5writeEPc+0x44>
		printf("f_open error (%i)\r\n", _fres);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 3478 	ldrb.w	r3, [r3, #1144]	; 0x478
 8002aac:	4619      	mov	r1, r3
 8002aae:	4819      	ldr	r0, [pc, #100]	; (8002b14 <_ZN4File5writeEPc+0xa4>)
 8002ab0:	f00e fdb4 	bl	801161c <iprintf>
	  _fres = f_write(&_file, writeBuf, strlen(writeBuf), &bytesWrote);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f503 7412 	add.w	r4, r3, #584	; 0x248
 8002aba:	6838      	ldr	r0, [r7, #0]
 8002abc:	f7fd fb92 	bl	80001e4 <strlen>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	f107 030c 	add.w	r3, r7, #12
 8002ac6:	6839      	ldr	r1, [r7, #0]
 8002ac8:	4620      	mov	r0, r4
 8002aca:	f00a f81e 	bl	800cb0a <f_write>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f883 2478 	strb.w	r2, [r3, #1144]	; 0x478
	  if(_fres == FR_OK) {
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3478 	ldrb.w	r3, [r3, #1144]	; 0x478
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d105      	bne.n	8002aee <_ZN4File5writeEPc+0x7e>
		printf("Wrote %i bytes to 'log_file.txt'!\r\n", bytesWrote);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	480c      	ldr	r0, [pc, #48]	; (8002b18 <_ZN4File5writeEPc+0xa8>)
 8002ae8:	f00e fd98 	bl	801161c <iprintf>
 8002aec:	e006      	b.n	8002afc <_ZN4File5writeEPc+0x8c>
		printf("f_write error (%i)\r\n", _fres);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 3478 	ldrb.w	r3, [r3, #1144]	; 0x478
 8002af4:	4619      	mov	r1, r3
 8002af6:	4809      	ldr	r0, [pc, #36]	; (8002b1c <_ZN4File5writeEPc+0xac>)
 8002af8:	f00e fd90 	bl	801161c <iprintf>
	  f_close(&_file);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8002b02:	4618      	mov	r0, r3
 8002b04:	f00a fa2e 	bl	800cf64 <f_close>
	}
 8002b08:	bf00      	nop
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd90      	pop	{r4, r7, pc}
 8002b10:	08014670 	.word	0x08014670
 8002b14:	0801469c 	.word	0x0801469c
 8002b18:	080146b0 	.word	0x080146b0
 8002b1c:	080146d4 	.word	0x080146d4

08002b20 <mySDInit>:
ComTask comtask = ComTask();
int buzz_off = 0;
int write_count = 0;


void mySDInit(){
 8002b20:	b580      	push	{r7, lr}
 8002b22:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8002b26:	af00      	add	r7, sp, #0
		printf("\r\n~ SD card demo by nadav ~\r\n\r\n");
 8002b28:	4811      	ldr	r0, [pc, #68]	; (8002b70 <mySDInit+0x50>)
 8002b2a:	f00e fdfd 	bl	8011728 <puts>
		HAL_Delay(1000); //a short delay is important to let the SD card settle
 8002b2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b32:	f000 ff2b 	bl	800398c <HAL_Delay>
		//some variables for FatFs
		      FATFS _FatFs; 	//Fatfs handle
		      FRESULT _fres; //Result after operations

		//Open the file system
		_fres = f_mount(&_FatFs, "", 1); //1=mount now
 8002b36:	463b      	mov	r3, r7
 8002b38:	2201      	movs	r2, #1
 8002b3a:	490e      	ldr	r1, [pc, #56]	; (8002b74 <mySDInit+0x54>)
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f009 fc4d 	bl	800c3dc <f_mount>
 8002b42:	4603      	mov	r3, r0
 8002b44:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
		if (_fres != FR_OK) {
 8002b48:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d006      	beq.n	8002b5e <mySDInit+0x3e>
		printf("f_mount error (%i)\r\n", _fres);
 8002b50:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8002b54:	4619      	mov	r1, r3
 8002b56:	4808      	ldr	r0, [pc, #32]	; (8002b78 <mySDInit+0x58>)
 8002b58:	f00e fd60 	bl	801161c <iprintf>
		while(1);
 8002b5c:	e7fe      	b.n	8002b5c <mySDInit+0x3c>
		}
		printf("mount is good\r\n");
 8002b5e:	4807      	ldr	r0, [pc, #28]	; (8002b7c <mySDInit+0x5c>)
 8002b60:	f00e fde2 	bl	8011728 <puts>
	}
 8002b64:	bf00      	nop
 8002b66:	f507 770e 	add.w	r7, r7, #568	; 0x238
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	080146ec 	.word	0x080146ec
 8002b74:	0801470c 	.word	0x0801470c
 8002b78:	08014710 	.word	0x08014710
 8002b7c:	08014728 	.word	0x08014728

08002b80 <HAL_GPIO_EXTI_Callback>:
int _write(int fd, char *ptr, int len) {
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
	return len;
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	80fb      	strh	r3, [r7, #6]
	dht.dhtOnGpioInterrupt(pin_4_Pin);
 8002b8a:	2120      	movs	r1, #32
 8002b8c:	480c      	ldr	r0, [pc, #48]	; (8002bc0 <HAL_GPIO_EXTI_Callback+0x40>)
 8002b8e:	f7fe ff21 	bl	80019d4 <_ZN3Dht18dhtOnGpioInterruptEt>
	if(HAL_GPIO_ReadPin(button_GPIO_Port, button_Pin) == 0){
 8002b92:	2108      	movs	r1, #8
 8002b94:	480b      	ldr	r0, [pc, #44]	; (8002bc4 <HAL_GPIO_EXTI_Callback+0x44>)
 8002b96:	f001 fcbd 	bl	8004514 <HAL_GPIO_ReadPin>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	bf0c      	ite	eq
 8002ba0:	2301      	moveq	r3, #1
 8002ba2:	2300      	movne	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d006      	beq.n	8002bb8 <HAL_GPIO_EXTI_Callback+0x38>
		monitor.setState(CRITICAL_STATE_NO_BUZZER);
 8002baa:	2103      	movs	r1, #3
 8002bac:	4806      	ldr	r0, [pc, #24]	; (8002bc8 <HAL_GPIO_EXTI_Callback+0x48>)
 8002bae:	f7ff ff20 	bl	80029f2 <_ZN7Monitor8setStateE12MointorState>
		buzzer.buzzerStopPlay();
 8002bb2:	4806      	ldr	r0, [pc, #24]	; (8002bcc <HAL_GPIO_EXTI_Callback+0x4c>)
 8002bb4:	f7ff fe8a 	bl	80028cc <_ZN6Buzzer14buzzerStopPlayEv>
	}

}
 8002bb8:	bf00      	nop
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	200004e8 	.word	0x200004e8
 8002bc4:	48000400 	.word	0x48000400
 8002bc8:	200005e0 	.word	0x200005e0
 8002bcc:	200005dc 	.word	0x200005dc

08002bd0 <myMainInit>:

void myMainInit()
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002bd4:	2036      	movs	r0, #54	; 0x36
 8002bd6:	f000 ffd1 	bl	8003b7c <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim6);
 8002bda:	4808      	ldr	r0, [pc, #32]	; (8002bfc <myMainInit+0x2c>)
 8002bdc:	f004 fc6c 	bl	80074b8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim3);
 8002be0:	4807      	ldr	r0, [pc, #28]	; (8002c00 <myMainInit+0x30>)
 8002be2:	f004 fbd9 	bl	8007398 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim1);
 8002be6:	4807      	ldr	r0, [pc, #28]	; (8002c04 <myMainInit+0x34>)
 8002be8:	f004 fc66 	bl	80074b8 <HAL_TIM_Base_Start_IT>
	container.initCliContainer();
 8002bec:	4806      	ldr	r0, [pc, #24]	; (8002c08 <myMainInit+0x38>)
 8002bee:	f7fe fc5f 	bl	80014b0 <_ZN12CliContainer16initCliContainerEv>
	mySDInit();
 8002bf2:	f7ff ff95 	bl	8002b20 <mySDInit>

}
 8002bf6:	bf00      	nop
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	20000400 	.word	0x20000400
 8002c00:	200003b4 	.word	0x200003b4
 8002c04:	20000368 	.word	0x20000368
 8002c08:	20000524 	.word	0x20000524

08002c0c <monitorFunc>:
{

}

void monitorFunc(void *argument)
{
 8002c0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c10:	ed2d 8b04 	vpush	{d8-d9}
 8002c14:	b0f9      	sub	sp, #484	; 0x1e4
 8002c16:	af0c      	add	r7, sp, #48	; 0x30
 8002c18:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002c1c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002c20:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	 MointorState currentState;
	  /* Infinite loop */
  for(;;)
  {
  osSemaphoreAcquire(DHT_MONITORHandle, 0xFF);
 8002c22:	4ba8      	ldr	r3, [pc, #672]	; (8002ec4 <monitorFunc+0x2b8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	21ff      	movs	r1, #255	; 0xff
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f00a fd6d 	bl	800d708 <osSemaphoreAcquire>
  char data[200];
  char temperature_data[200];
  DateTime * currtime = rtc.rtcTimeToString();
 8002c2e:	48a6      	ldr	r0, [pc, #664]	; (8002ec8 <monitorFunc+0x2bc>)
 8002c30:	f7ff f8e2 	bl	8001df8 <_ZN3Rtc15rtcTimeToStringEv>
 8002c34:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8

	  if(dht.dhtHasData()){
 8002c38:	48a4      	ldr	r0, [pc, #656]	; (8002ecc <monitorFunc+0x2c0>)
 8002c3a:	f7fe ff6d 	bl	8001b18 <_ZN3Dht10dhtHasDataEv>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	bf14      	ite	ne
 8002c44:	2301      	movne	r3, #1
 8002c46:	2300      	moveq	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 818f 	beq.w	8002f6e <monitorFunc+0x362>
		 if(monitor.getState() == CRITICAL_STATE_NO_BUZZER && dht.getTemperature()>= monitor.getCritical() && currentState != CRITICAL_STATE_NO_BUZZER ){
 8002c50:	489f      	ldr	r0, [pc, #636]	; (8002ed0 <monitorFunc+0x2c4>)
 8002c52:	f7ff fec2 	bl	80029da <_ZN7Monitor8getStateEv>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	d116      	bne.n	8002c8a <monitorFunc+0x7e>
 8002c5c:	489b      	ldr	r0, [pc, #620]	; (8002ecc <monitorFunc+0x2c0>)
 8002c5e:	f7fe ff79 	bl	8001b54 <_ZN3Dht14getTemperatureEv>
 8002c62:	ec55 4b10 	vmov	r4, r5, d0
 8002c66:	489a      	ldr	r0, [pc, #616]	; (8002ed0 <monitorFunc+0x2c4>)
 8002c68:	f7ff fea5 	bl	80029b6 <_ZN7Monitor11getCriticalEv>
 8002c6c:	ec53 2b10 	vmov	r2, r3, d0
 8002c70:	4620      	mov	r0, r4
 8002c72:	4629      	mov	r1, r5
 8002c74:	f7fd ff56 	bl	8000b24 <__aeabi_dcmpge>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d005      	beq.n	8002c8a <monitorFunc+0x7e>
 8002c7e:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8002c82:	2b03      	cmp	r3, #3
 8002c84:	d001      	beq.n	8002c8a <monitorFunc+0x7e>
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <monitorFunc+0x80>
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <monitorFunc+0x8c>
			 ledblue.isBlink();
 8002c90:	4890      	ldr	r0, [pc, #576]	; (8002ed4 <monitorFunc+0x2c8>)
 8002c92:	f7fe ffc6 	bl	8001c22 <_ZN3Led7isBlinkEv>
 8002c96:	e164      	b.n	8002f62 <monitorFunc+0x356>
			 		 }
		 else if(dht.getTemperature()>= monitor.getCritical() && currentState != CRITICAL_STATE && currentState != CRITICAL_STATE_NO_BUZZER){
 8002c98:	488c      	ldr	r0, [pc, #560]	; (8002ecc <monitorFunc+0x2c0>)
 8002c9a:	f7fe ff5b 	bl	8001b54 <_ZN3Dht14getTemperatureEv>
 8002c9e:	ec55 4b10 	vmov	r4, r5, d0
 8002ca2:	488b      	ldr	r0, [pc, #556]	; (8002ed0 <monitorFunc+0x2c4>)
 8002ca4:	f7ff fe87 	bl	80029b6 <_ZN7Monitor11getCriticalEv>
 8002ca8:	ec53 2b10 	vmov	r2, r3, d0
 8002cac:	4620      	mov	r0, r4
 8002cae:	4629      	mov	r1, r5
 8002cb0:	f7fd ff38 	bl	8000b24 <__aeabi_dcmpge>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d009      	beq.n	8002cce <monitorFunc+0xc2>
 8002cba:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d005      	beq.n	8002cce <monitorFunc+0xc2>
 8002cc2:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8002cc6:	2b03      	cmp	r3, #3
 8002cc8:	d001      	beq.n	8002cce <monitorFunc+0xc2>
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <monitorFunc+0xc4>
 8002cce:	2300      	movs	r3, #0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d05b      	beq.n	8002d8c <monitorFunc+0x180>
			 monitor.setState(CRITICAL_STATE);
 8002cd4:	2102      	movs	r1, #2
 8002cd6:	487e      	ldr	r0, [pc, #504]	; (8002ed0 <monitorFunc+0x2c4>)
 8002cd8:	f7ff fe8b 	bl	80029f2 <_ZN7Monitor8setStateE12MointorState>
			 sprintf(data,"date is %02d:%02d:%02d  %02d %02d/%02d/%02d the log severity is CRICTICAL- %f the current temp is %f, the temp is %f above the threshold\r\n",currtime->hours,currtime->min,currtime->sec,currtime->weekDay,currtime->day,currtime->month,currtime->year,monitor.getCritical(),dht.getTemperature(),(dht.getTemperature() - monitor.getCritical()) );
 8002cdc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	613b      	str	r3, [r7, #16]
 8002ce4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002ce8:	6859      	ldr	r1, [r3, #4]
 8002cea:	60f9      	str	r1, [r7, #12]
 8002cec:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002cf0:	681c      	ldr	r4, [r3, #0]
 8002cf2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002cf6:	68dd      	ldr	r5, [r3, #12]
 8002cf8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002cfc:	691e      	ldr	r6, [r3, #16]
 8002cfe:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002d02:	6958      	ldr	r0, [r3, #20]
 8002d04:	60b8      	str	r0, [r7, #8]
 8002d06:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002d0a:	6999      	ldr	r1, [r3, #24]
 8002d0c:	6079      	str	r1, [r7, #4]
 8002d0e:	4870      	ldr	r0, [pc, #448]	; (8002ed0 <monitorFunc+0x2c4>)
 8002d10:	f7ff fe51 	bl	80029b6 <_ZN7Monitor11getCriticalEv>
 8002d14:	eeb0 8a40 	vmov.f32	s16, s0
 8002d18:	eef0 8a60 	vmov.f32	s17, s1
 8002d1c:	486b      	ldr	r0, [pc, #428]	; (8002ecc <monitorFunc+0x2c0>)
 8002d1e:	f7fe ff19 	bl	8001b54 <_ZN3Dht14getTemperatureEv>
 8002d22:	eeb0 9a40 	vmov.f32	s18, s0
 8002d26:	eef0 9a60 	vmov.f32	s19, s1
 8002d2a:	4868      	ldr	r0, [pc, #416]	; (8002ecc <monitorFunc+0x2c0>)
 8002d2c:	f7fe ff12 	bl	8001b54 <_ZN3Dht14getTemperatureEv>
 8002d30:	ec59 8b10 	vmov	r8, r9, d0
 8002d34:	4866      	ldr	r0, [pc, #408]	; (8002ed0 <monitorFunc+0x2c4>)
 8002d36:	f7ff fe3e 	bl	80029b6 <_ZN7Monitor11getCriticalEv>
 8002d3a:	ec53 2b10 	vmov	r2, r3, d0
 8002d3e:	4640      	mov	r0, r8
 8002d40:	4649      	mov	r1, r9
 8002d42:	f7fd fab1 	bl	80002a8 <__aeabi_dsub>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	f107 0018 	add.w	r0, r7, #24
 8002d4e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002d52:	ed8d 9b08 	vstr	d9, [sp, #32]
 8002d56:	ed8d 8b06 	vstr	d8, [sp, #24]
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	9104      	str	r1, [sp, #16]
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	9203      	str	r2, [sp, #12]
 8002d62:	9602      	str	r6, [sp, #8]
 8002d64:	9501      	str	r5, [sp, #4]
 8002d66:	9400      	str	r4, [sp, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	495a      	ldr	r1, [pc, #360]	; (8002ed8 <monitorFunc+0x2cc>)
 8002d6e:	f00e fd37 	bl	80117e0 <siprintf>
			 event_file.write(data);
 8002d72:	f107 0318 	add.w	r3, r7, #24
 8002d76:	4619      	mov	r1, r3
 8002d78:	4858      	ldr	r0, [pc, #352]	; (8002edc <monitorFunc+0x2d0>)
 8002d7a:	f7ff fe79 	bl	8002a70 <_ZN4File5writeEPc>
			 ledblue.isBlink();
 8002d7e:	4855      	ldr	r0, [pc, #340]	; (8002ed4 <monitorFunc+0x2c8>)
 8002d80:	f7fe ff4f 	bl	8001c22 <_ZN3Led7isBlinkEv>
			 buzzer.buzzerStartPlay();
 8002d84:	4856      	ldr	r0, [pc, #344]	; (8002ee0 <monitorFunc+0x2d4>)
 8002d86:	f7ff fd89 	bl	800289c <_ZN6Buzzer15buzzerStartPlayEv>
 8002d8a:	e0ea      	b.n	8002f62 <monitorFunc+0x356>

		 }
		 else if(dht.getTemperature()>= monitor.getWarning() && dht.getTemperature()< monitor.getCritical() && currentState != WARRNING_STATE){
 8002d8c:	484f      	ldr	r0, [pc, #316]	; (8002ecc <monitorFunc+0x2c0>)
 8002d8e:	f7fe fee1 	bl	8001b54 <_ZN3Dht14getTemperatureEv>
 8002d92:	ec55 4b10 	vmov	r4, r5, d0
 8002d96:	484e      	ldr	r0, [pc, #312]	; (8002ed0 <monitorFunc+0x2c4>)
 8002d98:	f7ff fdfb 	bl	8002992 <_ZN7Monitor10getWarningEv>
 8002d9c:	ec53 2b10 	vmov	r2, r3, d0
 8002da0:	4620      	mov	r0, r4
 8002da2:	4629      	mov	r1, r5
 8002da4:	f7fd febe 	bl	8000b24 <__aeabi_dcmpge>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d016      	beq.n	8002ddc <monitorFunc+0x1d0>
 8002dae:	4847      	ldr	r0, [pc, #284]	; (8002ecc <monitorFunc+0x2c0>)
 8002db0:	f7fe fed0 	bl	8001b54 <_ZN3Dht14getTemperatureEv>
 8002db4:	ec55 4b10 	vmov	r4, r5, d0
 8002db8:	4845      	ldr	r0, [pc, #276]	; (8002ed0 <monitorFunc+0x2c4>)
 8002dba:	f7ff fdfc 	bl	80029b6 <_ZN7Monitor11getCriticalEv>
 8002dbe:	ec53 2b10 	vmov	r2, r3, d0
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	4629      	mov	r1, r5
 8002dc6:	f7fd fe99 	bl	8000afc <__aeabi_dcmplt>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <monitorFunc+0x1d0>
 8002dd0:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d001      	beq.n	8002ddc <monitorFunc+0x1d0>
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e000      	b.n	8002dde <monitorFunc+0x1d2>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d058      	beq.n	8002e94 <monitorFunc+0x288>
			 sprintf(data,"date is %02d:%02d:%02d  %02d %02d/%02d/%02d the log severity is WARNING- %f the current temp is %f, the temp is %f above the threshold\r\n",currtime->hours,currtime->min,currtime->sec,currtime->weekDay,currtime->day,currtime->month,currtime->year,monitor.getWarning(),dht.getTemperature(),(dht.getTemperature() - monitor.getWarning()) );
 8002de2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	613b      	str	r3, [r7, #16]
 8002dea:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002dee:	6859      	ldr	r1, [r3, #4]
 8002df0:	60f9      	str	r1, [r7, #12]
 8002df2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002df6:	681c      	ldr	r4, [r3, #0]
 8002df8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002dfc:	68dd      	ldr	r5, [r3, #12]
 8002dfe:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002e02:	691e      	ldr	r6, [r3, #16]
 8002e04:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002e08:	6958      	ldr	r0, [r3, #20]
 8002e0a:	60b8      	str	r0, [r7, #8]
 8002e0c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002e10:	6999      	ldr	r1, [r3, #24]
 8002e12:	6079      	str	r1, [r7, #4]
 8002e14:	482e      	ldr	r0, [pc, #184]	; (8002ed0 <monitorFunc+0x2c4>)
 8002e16:	f7ff fdbc 	bl	8002992 <_ZN7Monitor10getWarningEv>
 8002e1a:	eeb0 8a40 	vmov.f32	s16, s0
 8002e1e:	eef0 8a60 	vmov.f32	s17, s1
 8002e22:	482a      	ldr	r0, [pc, #168]	; (8002ecc <monitorFunc+0x2c0>)
 8002e24:	f7fe fe96 	bl	8001b54 <_ZN3Dht14getTemperatureEv>
 8002e28:	eeb0 9a40 	vmov.f32	s18, s0
 8002e2c:	eef0 9a60 	vmov.f32	s19, s1
 8002e30:	4826      	ldr	r0, [pc, #152]	; (8002ecc <monitorFunc+0x2c0>)
 8002e32:	f7fe fe8f 	bl	8001b54 <_ZN3Dht14getTemperatureEv>
 8002e36:	ec59 8b10 	vmov	r8, r9, d0
 8002e3a:	4825      	ldr	r0, [pc, #148]	; (8002ed0 <monitorFunc+0x2c4>)
 8002e3c:	f7ff fda9 	bl	8002992 <_ZN7Monitor10getWarningEv>
 8002e40:	ec53 2b10 	vmov	r2, r3, d0
 8002e44:	4640      	mov	r0, r8
 8002e46:	4649      	mov	r1, r9
 8002e48:	f7fd fa2e 	bl	80002a8 <__aeabi_dsub>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	f107 0018 	add.w	r0, r7, #24
 8002e54:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002e58:	ed8d 9b08 	vstr	d9, [sp, #32]
 8002e5c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	9104      	str	r1, [sp, #16]
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	9203      	str	r2, [sp, #12]
 8002e68:	9602      	str	r6, [sp, #8]
 8002e6a:	9501      	str	r5, [sp, #4]
 8002e6c:	9400      	str	r4, [sp, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	491c      	ldr	r1, [pc, #112]	; (8002ee4 <monitorFunc+0x2d8>)
 8002e74:	f00e fcb4 	bl	80117e0 <siprintf>
			 event_file.write(data);
 8002e78:	f107 0318 	add.w	r3, r7, #24
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4817      	ldr	r0, [pc, #92]	; (8002edc <monitorFunc+0x2d0>)
 8002e80:	f7ff fdf6 	bl	8002a70 <_ZN4File5writeEPc>
			 monitor.setState(WARRNING_STATE);
 8002e84:	2101      	movs	r1, #1
 8002e86:	4812      	ldr	r0, [pc, #72]	; (8002ed0 <monitorFunc+0x2c4>)
 8002e88:	f7ff fdb3 	bl	80029f2 <_ZN7Monitor8setStateE12MointorState>
			 ledblue.ledOn();
 8002e8c:	4811      	ldr	r0, [pc, #68]	; (8002ed4 <monitorFunc+0x2c8>)
 8002e8e:	f7fe fe8d 	bl	8001bac <_ZN3Led5ledOnEv>
 8002e92:	e066      	b.n	8002f62 <monitorFunc+0x356>
		 }
		 else if (dht.getTemperature()< monitor.getWarning() && currentState != NORMAL_STATE){
 8002e94:	480d      	ldr	r0, [pc, #52]	; (8002ecc <monitorFunc+0x2c0>)
 8002e96:	f7fe fe5d 	bl	8001b54 <_ZN3Dht14getTemperatureEv>
 8002e9a:	ec55 4b10 	vmov	r4, r5, d0
 8002e9e:	480c      	ldr	r0, [pc, #48]	; (8002ed0 <monitorFunc+0x2c4>)
 8002ea0:	f7ff fd77 	bl	8002992 <_ZN7Monitor10getWarningEv>
 8002ea4:	ec53 2b10 	vmov	r2, r3, d0
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	4629      	mov	r1, r5
 8002eac:	f7fd fe26 	bl	8000afc <__aeabi_dcmplt>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d018      	beq.n	8002ee8 <monitorFunc+0x2dc>
 8002eb6:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d014      	beq.n	8002ee8 <monitorFunc+0x2dc>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e013      	b.n	8002eea <monitorFunc+0x2de>
 8002ec2:	bf00      	nop
 8002ec4:	200004e0 	.word	0x200004e0
 8002ec8:	20000500 	.word	0x20000500
 8002ecc:	200004e8 	.word	0x200004e8
 8002ed0:	200005e0 	.word	0x200005e0
 8002ed4:	200005c8 	.word	0x200005c8
 8002ed8:	08014738 	.word	0x08014738
 8002edc:	20000c98 	.word	0x20000c98
 8002ee0:	200005dc 	.word	0x200005dc
 8002ee4:	080147c4 	.word	0x080147c4
 8002ee8:	2300      	movs	r3, #0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d039      	beq.n	8002f62 <monitorFunc+0x356>
			 monitor.setState(NORMAL_STATE);
 8002eee:	2100      	movs	r1, #0
 8002ef0:	483e      	ldr	r0, [pc, #248]	; (8002fec <monitorFunc+0x3e0>)
 8002ef2:	f7ff fd7e 	bl	80029f2 <_ZN7Monitor8setStateE12MointorState>
			 sprintf(data,"date is %02d:%02d:%02d  %02d %02d/%02d/%02d the log severity is NORMAL current temp is %f \r\n",currtime->hours,currtime->min,currtime->sec,currtime->weekDay,currtime->day,currtime->month,currtime->year,dht.getTemperature());
 8002ef6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002f02:	6859      	ldr	r1, [r3, #4]
 8002f04:	60f9      	str	r1, [r7, #12]
 8002f06:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002f0a:	681c      	ldr	r4, [r3, #0]
 8002f0c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002f10:	68dd      	ldr	r5, [r3, #12]
 8002f12:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002f16:	691e      	ldr	r6, [r3, #16]
 8002f18:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002f1c:	6958      	ldr	r0, [r3, #20]
 8002f1e:	60b8      	str	r0, [r7, #8]
 8002f20:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002f24:	6999      	ldr	r1, [r3, #24]
 8002f26:	6079      	str	r1, [r7, #4]
 8002f28:	4831      	ldr	r0, [pc, #196]	; (8002ff0 <monitorFunc+0x3e4>)
 8002f2a:	f7fe fe13 	bl	8001b54 <_ZN3Dht14getTemperatureEv>
 8002f2e:	eeb0 7a40 	vmov.f32	s14, s0
 8002f32:	eef0 7a60 	vmov.f32	s15, s1
 8002f36:	f107 0018 	add.w	r0, r7, #24
 8002f3a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	9104      	str	r1, [sp, #16]
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	9203      	str	r2, [sp, #12]
 8002f46:	9602      	str	r6, [sp, #8]
 8002f48:	9501      	str	r5, [sp, #4]
 8002f4a:	9400      	str	r4, [sp, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	4928      	ldr	r1, [pc, #160]	; (8002ff4 <monitorFunc+0x3e8>)
 8002f52:	f00e fc45 	bl	80117e0 <siprintf>
			 event_file.write(data);
 8002f56:	f107 0318 	add.w	r3, r7, #24
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4826      	ldr	r0, [pc, #152]	; (8002ff8 <monitorFunc+0x3ec>)
 8002f5e:	f7ff fd87 	bl	8002a70 <_ZN4File5writeEPc>
		 }
		 currentState = monitor.getState();
 8002f62:	4822      	ldr	r0, [pc, #136]	; (8002fec <monitorFunc+0x3e0>)
 8002f64:	f7ff fd39 	bl	80029da <_ZN7Monitor8getStateEv>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
	   }

	  if(write_count == 59){
 8002f6e:	4b23      	ldr	r3, [pc, #140]	; (8002ffc <monitorFunc+0x3f0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b3b      	cmp	r3, #59	; 0x3b
 8002f74:	f47f ae55 	bne.w	8002c22 <monitorFunc+0x16>
			 sprintf(temperature_data,"date is %02d:%02d:%02d  %02d %02d/%02d/%02d current temp is %f \r\n",currtime->hours,currtime->min,currtime->sec,currtime->weekDay,currtime->day,currtime->month,currtime->year,dht.getTemperature());
 8002f78:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	613b      	str	r3, [r7, #16]
 8002f80:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002f84:	6859      	ldr	r1, [r3, #4]
 8002f86:	60f9      	str	r1, [r7, #12]
 8002f88:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002f8c:	681c      	ldr	r4, [r3, #0]
 8002f8e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002f92:	68dd      	ldr	r5, [r3, #12]
 8002f94:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002f98:	691e      	ldr	r6, [r3, #16]
 8002f9a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002f9e:	6958      	ldr	r0, [r3, #20]
 8002fa0:	60b8      	str	r0, [r7, #8]
 8002fa2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002fa6:	6999      	ldr	r1, [r3, #24]
 8002fa8:	6079      	str	r1, [r7, #4]
 8002faa:	4811      	ldr	r0, [pc, #68]	; (8002ff0 <monitorFunc+0x3e4>)
 8002fac:	f7fe fdd2 	bl	8001b54 <_ZN3Dht14getTemperatureEv>
 8002fb0:	eeb0 7a40 	vmov.f32	s14, s0
 8002fb4:	eef0 7a60 	vmov.f32	s15, s1
 8002fb8:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 8002fbc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	9104      	str	r1, [sp, #16]
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	9203      	str	r2, [sp, #12]
 8002fc8:	9602      	str	r6, [sp, #8]
 8002fca:	9501      	str	r5, [sp, #4]
 8002fcc:	9400      	str	r4, [sp, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	490b      	ldr	r1, [pc, #44]	; (8003000 <monitorFunc+0x3f4>)
 8002fd4:	f00e fc04 	bl	80117e0 <siprintf>
			 temperature_file.write(temperature_data);
 8002fd8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4809      	ldr	r0, [pc, #36]	; (8003004 <monitorFunc+0x3f8>)
 8002fe0:	f7ff fd46 	bl	8002a70 <_ZN4File5writeEPc>
			 write_count = 0;
 8002fe4:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <monitorFunc+0x3f0>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]

	  }

  }
 8002fea:	e61a      	b.n	8002c22 <monitorFunc+0x16>
 8002fec:	200005e0 	.word	0x200005e0
 8002ff0:	200004e8 	.word	0x200004e8
 8002ff4:	08014850 	.word	0x08014850
 8002ff8:	20000c98 	.word	0x20000c98
 8002ffc:	20001598 	.word	0x20001598
 8003000:	080148b0 	.word	0x080148b0
 8003004:	20001114 	.word	0x20001114

08003008 <comtaskFunc>:
  /* USER CODE END 5 */
}

void comtaskFunc(void *argument)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN comtask_func */

	/* Infinite loop */
	for (;;) {

		if (comtask.commTask()) {
 8003010:	4807      	ldr	r0, [pc, #28]	; (8003030 <comtaskFunc+0x28>)
 8003012:	f7fe fff1 	bl	8001ff8 <_ZN7ComTask8commTaskEv>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	bf14      	ite	ne
 800301c:	2301      	movne	r3, #1
 800301e:	2300      	moveq	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0f4      	beq.n	8003010 <comtaskFunc+0x8>
			comtask.handleCommand();
 8003026:	4802      	ldr	r0, [pc, #8]	; (8003030 <comtaskFunc+0x28>)
 8003028:	f7ff f86c 	bl	8002104 <_ZN7ComTask13handleCommandEv>
		if (comtask.commTask()) {
 800302c:	e7f0      	b.n	8003010 <comtaskFunc+0x8>
 800302e:	bf00      	nop
 8003030:	20001594 	.word	0x20001594

08003034 <readTempFunc>:
		}
	}
	/* USER CODE END comtask_func */
}
void readTempFunc(void *argument)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 /* USER CODE BEGIN monitor_func */
	int ticks = 0;
 800303c:	2300      	movs	r3, #0
 800303e:	60fb      	str	r3, [r7, #12]
 /* Infinite loop */
 for(;;)
 {
	 ticks = xTaskGetTickCount();
 8003040:	f00c f878 	bl	800f134 <xTaskGetTickCount>
 8003044:	4603      	mov	r3, r0
 8003046:	60fb      	str	r3, [r7, #12]
	 ticks += 1000;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800304e:	60fb      	str	r3, [r7, #12]
	 dht.dhtReadAsync();
 8003050:	4808      	ldr	r0, [pc, #32]	; (8003074 <readTempFunc+0x40>)
 8003052:	f7fe fc97 	bl	8001984 <_ZN3Dht12dhtReadAsyncEv>
	 write_count++;
 8003056:	4b08      	ldr	r3, [pc, #32]	; (8003078 <readTempFunc+0x44>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	3301      	adds	r3, #1
 800305c:	4a06      	ldr	r2, [pc, #24]	; (8003078 <readTempFunc+0x44>)
 800305e:	6013      	str	r3, [r2, #0]
	 osDelayUntil(ticks);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4618      	mov	r0, r3
 8003064:	f00a fa99 	bl	800d59a <osDelayUntil>
	 osSemaphoreRelease(DHT_MONITORHandle);
 8003068:	4b04      	ldr	r3, [pc, #16]	; (800307c <readTempFunc+0x48>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f00a fb9d 	bl	800d7ac <osSemaphoreRelease>
	 ticks = xTaskGetTickCount();
 8003072:	e7e5      	b.n	8003040 <readTempFunc+0xc>
 8003074:	200004e8 	.word	0x200004e8
 8003078:	20001598 	.word	0x20001598
 800307c:	200004e0 	.word	0x200004e0

08003080 <blinkFunc>:
 }

 /* USER CODE END monitor_func */
}
void blinkFunc(void *argument)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 /* USER CODE BEGIN blink_func */
 /* Infinite loop */
 for(;;)
 {
	 if(ledblue.getState() == LED_STATE_BLINK){
 8003088:	4808      	ldr	r0, [pc, #32]	; (80030ac <blinkFunc+0x2c>)
 800308a:	f7fe fdd7 	bl	8001c3c <_ZN3Led8getStateEv>
 800308e:	4603      	mov	r3, r0
 8003090:	2b02      	cmp	r3, #2
 8003092:	bf0c      	ite	eq
 8003094:	2301      	moveq	r3, #1
 8003096:	2300      	movne	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <blinkFunc+0x26>
		 ledblue.ledBlink();
 800309e:	4803      	ldr	r0, [pc, #12]	; (80030ac <blinkFunc+0x2c>)
 80030a0:	f7fe fdaa 	bl	8001bf8 <_ZN3Led8ledBlinkEv>
 80030a4:	e7f0      	b.n	8003088 <blinkFunc+0x8>
	 }
	 else {
		 osThreadYield();
 80030a6:	f00a fa3d 	bl	800d524 <osThreadYield>
	 if(ledblue.getState() == LED_STATE_BLINK){
 80030aa:	e7ed      	b.n	8003088 <blinkFunc+0x8>
 80030ac:	200005c8 	.word	0x200005c8

080030b0 <_Z41__static_initialization_and_destruction_0ii>:
		FRAME_0,FRAME_1,
		FRAME_0,FRAME_1,
		FRAME_2,FRAME_2,FRAME_0,
		0

};
 80030b0:	b590      	push	{r4, r7, lr}
 80030b2:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 80030b6:	f44f 678c 	mov.w	r7, #1120	; 0x460
 80030ba:	446f      	add	r7, sp
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	6039      	str	r1, [r7, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d15f      	bne.n	8003186 <_Z41__static_initialization_and_destruction_0ii+0xd6>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d15a      	bne.n	8003186 <_Z41__static_initialization_and_destruction_0ii+0xd6>
Dht dht = Dht(GPIOB,pin_4_Pin);
 80030d0:	2220      	movs	r2, #32
 80030d2:	4934      	ldr	r1, [pc, #208]	; (80031a4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 80030d4:	4834      	ldr	r0, [pc, #208]	; (80031a8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 80030d6:	f7fe fc15 	bl	8001904 <_ZN3DhtC1EP12GPIO_TypeDeft>
Rtc rtc = Rtc(&hi2c1,0xD0);
 80030da:	22d0      	movs	r2, #208	; 0xd0
 80030dc:	4933      	ldr	r1, [pc, #204]	; (80031ac <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 80030de:	4834      	ldr	r0, [pc, #208]	; (80031b0 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 80030e0:	f7fe fdb8 	bl	8001c54 <_ZN3RtcC1EP19__I2C_HandleTypeDefm>
CliContainer container = CliContainer();
 80030e4:	4833      	ldr	r0, [pc, #204]	; (80031b4 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 80030e6:	f7ff fc03 	bl	80028f0 <_ZN12CliContainerC1Ev>
Led ledblue = Led(LD2_GPIO_Port, LD2_Pin);
 80030ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030ee:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80030f2:	4831      	ldr	r0, [pc, #196]	; (80031b8 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 80030f4:	f7fe fd40 	bl	8001b78 <_ZN3LedC1EP12GPIO_TypeDeft>
Buzzer buzzer = Buzzer(&htim3);
 80030f8:	4930      	ldr	r1, [pc, #192]	; (80031bc <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 80030fa:	4831      	ldr	r0, [pc, #196]	; (80031c0 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 80030fc:	f7ff fbc2 	bl	8002884 <_ZN6BuzzerC1EP17TIM_HandleTypeDef>
Monitor monitor = Monitor();
 8003100:	4830      	ldr	r0, [pc, #192]	; (80031c4 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 8003102:	f7ff fc39 	bl	8002978 <_ZN7MonitorC1Ev>
File event_file = File(event_fil, FatFs, fres,"event.txt");
 8003106:	4b30      	ldr	r3, [pc, #192]	; (80031c8 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	4c30      	ldr	r4, [pc, #192]	; (80031cc <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 800310c:	4a30      	ldr	r2, [pc, #192]	; (80031d0 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 800310e:	f8cd 245c 	str.w	r2, [sp, #1116]	; 0x45c
 8003112:	f8cd 3458 	str.w	r3, [sp, #1112]	; 0x458
 8003116:	4a2f      	ldr	r2, [pc, #188]	; (80031d4 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8003118:	ab89      	add	r3, sp, #548	; 0x224
 800311a:	4611      	mov	r1, r2
 800311c:	f44f 720d 	mov.w	r2, #564	; 0x234
 8003120:	4618      	mov	r0, r3
 8003122:	f00d fd1b 	bl	8010b5c <memcpy>
 8003126:	4668      	mov	r0, sp
 8003128:	f104 030c 	add.w	r3, r4, #12
 800312c:	f44f 7209 	mov.w	r2, #548	; 0x224
 8003130:	4619      	mov	r1, r3
 8003132:	f00d fd13 	bl	8010b5c <memcpy>
 8003136:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800313a:	4827      	ldr	r0, [pc, #156]	; (80031d8 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 800313c:	f7ff fc68 	bl	8002a10 <_ZN4FileC1E3FIL5FATFS7FRESULTPKc>
File temperature_file = File(temp_fil, FatFs, fres,"temp.txt");
 8003140:	4b21      	ldr	r3, [pc, #132]	; (80031c8 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	4c25      	ldr	r4, [pc, #148]	; (80031dc <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8003146:	4a26      	ldr	r2, [pc, #152]	; (80031e0 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8003148:	f8cd 245c 	str.w	r2, [sp, #1116]	; 0x45c
 800314c:	f8cd 3458 	str.w	r3, [sp, #1112]	; 0x458
 8003150:	4a20      	ldr	r2, [pc, #128]	; (80031d4 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8003152:	ab89      	add	r3, sp, #548	; 0x224
 8003154:	4611      	mov	r1, r2
 8003156:	f44f 720d 	mov.w	r2, #564	; 0x234
 800315a:	4618      	mov	r0, r3
 800315c:	f00d fcfe 	bl	8010b5c <memcpy>
 8003160:	4668      	mov	r0, sp
 8003162:	f104 030c 	add.w	r3, r4, #12
 8003166:	f44f 7209 	mov.w	r2, #548	; 0x224
 800316a:	4619      	mov	r1, r3
 800316c:	f00d fcf6 	bl	8010b5c <memcpy>
 8003170:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003174:	481b      	ldr	r0, [pc, #108]	; (80031e4 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8003176:	f7ff fc4b 	bl	8002a10 <_ZN4FileC1E3FIL5FATFS7FRESULTPKc>
Flash flash = Flash();
 800317a:	481b      	ldr	r0, [pc, #108]	; (80031e8 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 800317c:	f7ff fb1a 	bl	80027b4 <_ZN5FlashC1Ev>
ComTask comtask = ComTask();
 8003180:	481a      	ldr	r0, [pc, #104]	; (80031ec <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8003182:	f7ff fbcf 	bl	8002924 <_ZN7ComTaskC1Ev>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d107      	bne.n	800319c <_Z41__static_initialization_and_destruction_0ii+0xec>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003192:	4293      	cmp	r3, r2
 8003194:	d102      	bne.n	800319c <_Z41__static_initialization_and_destruction_0ii+0xec>
CliContainer container = CliContainer();
 8003196:	4807      	ldr	r0, [pc, #28]	; (80031b4 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8003198:	f7ff fbb9 	bl	800290e <_ZN12CliContainerD1Ev>
};
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd90      	pop	{r4, r7, pc}
 80031a4:	48000400 	.word	0x48000400
 80031a8:	200004e8 	.word	0x200004e8
 80031ac:	200002b0 	.word	0x200002b0
 80031b0:	20000500 	.word	0x20000500
 80031b4:	20000524 	.word	0x20000524
 80031b8:	200005c8 	.word	0x200005c8
 80031bc:	200003b4 	.word	0x200003b4
 80031c0:	200005dc 	.word	0x200005dc
 80031c4:	200005e0 	.word	0x200005e0
 80031c8:	20000c94 	.word	0x20000c94
 80031cc:	20000834 	.word	0x20000834
 80031d0:	080148f4 	.word	0x080148f4
 80031d4:	20000600 	.word	0x20000600
 80031d8:	20000c98 	.word	0x20000c98
 80031dc:	20000a64 	.word	0x20000a64
 80031e0:	08014900 	.word	0x08014900
 80031e4:	20001114 	.word	0x20001114
 80031e8:	20001590 	.word	0x20001590
 80031ec:	20001594 	.word	0x20001594

080031f0 <_GLOBAL__sub_I_dht>:
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80031f8:	2001      	movs	r0, #1
 80031fa:	f7ff ff59 	bl	80030b0 <_Z41__static_initialization_and_destruction_0ii>
 80031fe:	bd80      	pop	{r7, pc}

08003200 <_GLOBAL__sub_D_dht>:
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
 8003204:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003208:	2000      	movs	r0, #0
 800320a:	f7ff ff51 	bl	80030b0 <_Z41__static_initialization_and_destruction_0ii>
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003216:	4b11      	ldr	r3, [pc, #68]	; (800325c <HAL_MspInit+0x4c>)
 8003218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800321a:	4a10      	ldr	r2, [pc, #64]	; (800325c <HAL_MspInit+0x4c>)
 800321c:	f043 0301 	orr.w	r3, r3, #1
 8003220:	6613      	str	r3, [r2, #96]	; 0x60
 8003222:	4b0e      	ldr	r3, [pc, #56]	; (800325c <HAL_MspInit+0x4c>)
 8003224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	607b      	str	r3, [r7, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800322e:	4b0b      	ldr	r3, [pc, #44]	; (800325c <HAL_MspInit+0x4c>)
 8003230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003232:	4a0a      	ldr	r2, [pc, #40]	; (800325c <HAL_MspInit+0x4c>)
 8003234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003238:	6593      	str	r3, [r2, #88]	; 0x58
 800323a:	4b08      	ldr	r3, [pc, #32]	; (800325c <HAL_MspInit+0x4c>)
 800323c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003242:	603b      	str	r3, [r7, #0]
 8003244:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003246:	2200      	movs	r2, #0
 8003248:	210f      	movs	r1, #15
 800324a:	f06f 0001 	mvn.w	r0, #1
 800324e:	f000 fc79 	bl	8003b44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003252:	bf00      	nop
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40021000 	.word	0x40021000

08003260 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b0ac      	sub	sp, #176	; 0xb0
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003268:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	605a      	str	r2, [r3, #4]
 8003272:	609a      	str	r2, [r3, #8]
 8003274:	60da      	str	r2, [r3, #12]
 8003276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003278:	f107 0314 	add.w	r3, r7, #20
 800327c:	2288      	movs	r2, #136	; 0x88
 800327e:	2100      	movs	r1, #0
 8003280:	4618      	mov	r0, r3
 8003282:	f00d fc79 	bl	8010b78 <memset>
  if(hi2c->Instance==I2C1)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a21      	ldr	r2, [pc, #132]	; (8003310 <HAL_I2C_MspInit+0xb0>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d13b      	bne.n	8003308 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003290:	2340      	movs	r3, #64	; 0x40
 8003292:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003294:	2300      	movs	r3, #0
 8003296:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003298:	f107 0314 	add.w	r3, r7, #20
 800329c:	4618      	mov	r0, r3
 800329e:	f002 fe2d 	bl	8005efc <HAL_RCCEx_PeriphCLKConfig>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80032a8:	f7ff fa68 	bl	800277c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ac:	4b19      	ldr	r3, [pc, #100]	; (8003314 <HAL_I2C_MspInit+0xb4>)
 80032ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b0:	4a18      	ldr	r2, [pc, #96]	; (8003314 <HAL_I2C_MspInit+0xb4>)
 80032b2:	f043 0302 	orr.w	r3, r3, #2
 80032b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032b8:	4b16      	ldr	r3, [pc, #88]	; (8003314 <HAL_I2C_MspInit+0xb4>)
 80032ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80032c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80032c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032cc:	2312      	movs	r3, #18
 80032ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d2:	2300      	movs	r3, #0
 80032d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d8:	2303      	movs	r3, #3
 80032da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80032de:	2304      	movs	r3, #4
 80032e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80032e8:	4619      	mov	r1, r3
 80032ea:	480b      	ldr	r0, [pc, #44]	; (8003318 <HAL_I2C_MspInit+0xb8>)
 80032ec:	f000 ff68 	bl	80041c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032f0:	4b08      	ldr	r3, [pc, #32]	; (8003314 <HAL_I2C_MspInit+0xb4>)
 80032f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f4:	4a07      	ldr	r2, [pc, #28]	; (8003314 <HAL_I2C_MspInit+0xb4>)
 80032f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032fa:	6593      	str	r3, [r2, #88]	; 0x58
 80032fc:	4b05      	ldr	r3, [pc, #20]	; (8003314 <HAL_I2C_MspInit+0xb4>)
 80032fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003308:	bf00      	nop
 800330a:	37b0      	adds	r7, #176	; 0xb0
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40005400 	.word	0x40005400
 8003314:	40021000 	.word	0x40021000
 8003318:	48000400 	.word	0x48000400

0800331c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b08a      	sub	sp, #40	; 0x28
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003324:	f107 0314 	add.w	r3, r7, #20
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	605a      	str	r2, [r3, #4]
 800332e:	609a      	str	r2, [r3, #8]
 8003330:	60da      	str	r2, [r3, #12]
 8003332:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a1b      	ldr	r2, [pc, #108]	; (80033a8 <HAL_SPI_MspInit+0x8c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d130      	bne.n	80033a0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800333e:	4b1b      	ldr	r3, [pc, #108]	; (80033ac <HAL_SPI_MspInit+0x90>)
 8003340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003342:	4a1a      	ldr	r2, [pc, #104]	; (80033ac <HAL_SPI_MspInit+0x90>)
 8003344:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003348:	6613      	str	r3, [r2, #96]	; 0x60
 800334a:	4b18      	ldr	r3, [pc, #96]	; (80033ac <HAL_SPI_MspInit+0x90>)
 800334c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003352:	613b      	str	r3, [r7, #16]
 8003354:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003356:	4b15      	ldr	r3, [pc, #84]	; (80033ac <HAL_SPI_MspInit+0x90>)
 8003358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335a:	4a14      	ldr	r2, [pc, #80]	; (80033ac <HAL_SPI_MspInit+0x90>)
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003362:	4b12      	ldr	r3, [pc, #72]	; (80033ac <HAL_SPI_MspInit+0x90>)
 8003364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800336e:	23e0      	movs	r3, #224	; 0xe0
 8003370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003372:	2302      	movs	r3, #2
 8003374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003376:	2300      	movs	r3, #0
 8003378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800337a:	2303      	movs	r3, #3
 800337c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800337e:	2305      	movs	r3, #5
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003382:	f107 0314 	add.w	r3, r7, #20
 8003386:	4619      	mov	r1, r3
 8003388:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800338c:	f000 ff18 	bl	80041c0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8003390:	2200      	movs	r2, #0
 8003392:	2105      	movs	r1, #5
 8003394:	2023      	movs	r0, #35	; 0x23
 8003396:	f000 fbd5 	bl	8003b44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800339a:	2023      	movs	r0, #35	; 0x23
 800339c:	f000 fbee 	bl	8003b7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80033a0:	bf00      	nop
 80033a2:	3728      	adds	r7, #40	; 0x28
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40013000 	.word	0x40013000
 80033ac:	40021000 	.word	0x40021000

080033b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a27      	ldr	r2, [pc, #156]	; (800345c <HAL_TIM_Base_MspInit+0xac>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d114      	bne.n	80033ec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033c2:	4b27      	ldr	r3, [pc, #156]	; (8003460 <HAL_TIM_Base_MspInit+0xb0>)
 80033c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033c6:	4a26      	ldr	r2, [pc, #152]	; (8003460 <HAL_TIM_Base_MspInit+0xb0>)
 80033c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033cc:	6613      	str	r3, [r2, #96]	; 0x60
 80033ce:	4b24      	ldr	r3, [pc, #144]	; (8003460 <HAL_TIM_Base_MspInit+0xb0>)
 80033d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 80033da:	2200      	movs	r2, #0
 80033dc:	210f      	movs	r1, #15
 80033de:	2019      	movs	r0, #25
 80033e0:	f000 fbb0 	bl	8003b44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80033e4:	2019      	movs	r0, #25
 80033e6:	f000 fbc9 	bl	8003b7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80033ea:	e032      	b.n	8003452 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a1c      	ldr	r2, [pc, #112]	; (8003464 <HAL_TIM_Base_MspInit+0xb4>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d114      	bne.n	8003420 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033f6:	4b1a      	ldr	r3, [pc, #104]	; (8003460 <HAL_TIM_Base_MspInit+0xb0>)
 80033f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fa:	4a19      	ldr	r2, [pc, #100]	; (8003460 <HAL_TIM_Base_MspInit+0xb0>)
 80033fc:	f043 0302 	orr.w	r3, r3, #2
 8003400:	6593      	str	r3, [r2, #88]	; 0x58
 8003402:	4b17      	ldr	r3, [pc, #92]	; (8003460 <HAL_TIM_Base_MspInit+0xb0>)
 8003404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	613b      	str	r3, [r7, #16]
 800340c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800340e:	2200      	movs	r2, #0
 8003410:	2105      	movs	r1, #5
 8003412:	201d      	movs	r0, #29
 8003414:	f000 fb96 	bl	8003b44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003418:	201d      	movs	r0, #29
 800341a:	f000 fbaf 	bl	8003b7c <HAL_NVIC_EnableIRQ>
}
 800341e:	e018      	b.n	8003452 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM6)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a10      	ldr	r2, [pc, #64]	; (8003468 <HAL_TIM_Base_MspInit+0xb8>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d113      	bne.n	8003452 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800342a:	4b0d      	ldr	r3, [pc, #52]	; (8003460 <HAL_TIM_Base_MspInit+0xb0>)
 800342c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342e:	4a0c      	ldr	r2, [pc, #48]	; (8003460 <HAL_TIM_Base_MspInit+0xb0>)
 8003430:	f043 0310 	orr.w	r3, r3, #16
 8003434:	6593      	str	r3, [r2, #88]	; 0x58
 8003436:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <HAL_TIM_Base_MspInit+0xb0>)
 8003438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343a:	f003 0310 	and.w	r3, r3, #16
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8003442:	2200      	movs	r2, #0
 8003444:	2105      	movs	r1, #5
 8003446:	2036      	movs	r0, #54	; 0x36
 8003448:	f000 fb7c 	bl	8003b44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800344c:	2036      	movs	r0, #54	; 0x36
 800344e:	f000 fb95 	bl	8003b7c <HAL_NVIC_EnableIRQ>
}
 8003452:	bf00      	nop
 8003454:	3718      	adds	r7, #24
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	40012c00 	.word	0x40012c00
 8003460:	40021000 	.word	0x40021000
 8003464:	40000400 	.word	0x40000400
 8003468:	40001000 	.word	0x40001000

0800346c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b088      	sub	sp, #32
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003474:	f107 030c 	add.w	r3, r7, #12
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	60da      	str	r2, [r3, #12]
 8003482:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a11      	ldr	r2, [pc, #68]	; (80034d0 <HAL_TIM_MspPostInit+0x64>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d11b      	bne.n	80034c6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800348e:	4b11      	ldr	r3, [pc, #68]	; (80034d4 <HAL_TIM_MspPostInit+0x68>)
 8003490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003492:	4a10      	ldr	r2, [pc, #64]	; (80034d4 <HAL_TIM_MspPostInit+0x68>)
 8003494:	f043 0302 	orr.w	r3, r3, #2
 8003498:	64d3      	str	r3, [r2, #76]	; 0x4c
 800349a:	4b0e      	ldr	r3, [pc, #56]	; (80034d4 <HAL_TIM_MspPostInit+0x68>)
 800349c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	60bb      	str	r3, [r7, #8]
 80034a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80034a6:	2310      	movs	r3, #16
 80034a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034aa:	2302      	movs	r3, #2
 80034ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034b6:	2302      	movs	r3, #2
 80034b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ba:	f107 030c 	add.w	r3, r7, #12
 80034be:	4619      	mov	r1, r3
 80034c0:	4805      	ldr	r0, [pc, #20]	; (80034d8 <HAL_TIM_MspPostInit+0x6c>)
 80034c2:	f000 fe7d 	bl	80041c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80034c6:	bf00      	nop
 80034c8:	3720      	adds	r7, #32
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40000400 	.word	0x40000400
 80034d4:	40021000 	.word	0x40021000
 80034d8:	48000400 	.word	0x48000400

080034dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b0ac      	sub	sp, #176	; 0xb0
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	605a      	str	r2, [r3, #4]
 80034ee:	609a      	str	r2, [r3, #8]
 80034f0:	60da      	str	r2, [r3, #12]
 80034f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034f4:	f107 0314 	add.w	r3, r7, #20
 80034f8:	2288      	movs	r2, #136	; 0x88
 80034fa:	2100      	movs	r1, #0
 80034fc:	4618      	mov	r0, r3
 80034fe:	f00d fb3b 	bl	8010b78 <memset>
  if(huart->Instance==USART2)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a25      	ldr	r2, [pc, #148]	; (800359c <HAL_UART_MspInit+0xc0>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d143      	bne.n	8003594 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800350c:	2302      	movs	r3, #2
 800350e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003510:	2300      	movs	r3, #0
 8003512:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003514:	f107 0314 	add.w	r3, r7, #20
 8003518:	4618      	mov	r0, r3
 800351a:	f002 fcef 	bl	8005efc <HAL_RCCEx_PeriphCLKConfig>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003524:	f7ff f92a 	bl	800277c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003528:	4b1d      	ldr	r3, [pc, #116]	; (80035a0 <HAL_UART_MspInit+0xc4>)
 800352a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352c:	4a1c      	ldr	r2, [pc, #112]	; (80035a0 <HAL_UART_MspInit+0xc4>)
 800352e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003532:	6593      	str	r3, [r2, #88]	; 0x58
 8003534:	4b1a      	ldr	r3, [pc, #104]	; (80035a0 <HAL_UART_MspInit+0xc4>)
 8003536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353c:	613b      	str	r3, [r7, #16]
 800353e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003540:	4b17      	ldr	r3, [pc, #92]	; (80035a0 <HAL_UART_MspInit+0xc4>)
 8003542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003544:	4a16      	ldr	r2, [pc, #88]	; (80035a0 <HAL_UART_MspInit+0xc4>)
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800354c:	4b14      	ldr	r3, [pc, #80]	; (80035a0 <HAL_UART_MspInit+0xc4>)
 800354e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003558:	230c      	movs	r3, #12
 800355a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355e:	2302      	movs	r3, #2
 8003560:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003564:	2300      	movs	r3, #0
 8003566:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800356a:	2303      	movs	r3, #3
 800356c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003570:	2307      	movs	r3, #7
 8003572:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003576:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800357a:	4619      	mov	r1, r3
 800357c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003580:	f000 fe1e 	bl	80041c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003584:	2200      	movs	r2, #0
 8003586:	2105      	movs	r1, #5
 8003588:	2026      	movs	r0, #38	; 0x26
 800358a:	f000 fadb 	bl	8003b44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800358e:	2026      	movs	r0, #38	; 0x26
 8003590:	f000 faf4 	bl	8003b7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003594:	bf00      	nop
 8003596:	37b0      	adds	r7, #176	; 0xb0
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40004400 	.word	0x40004400
 80035a0:	40021000 	.word	0x40021000

080035a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b08c      	sub	sp, #48	; 0x30
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80035b0:	2300      	movs	r3, #0
 80035b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80035b4:	2200      	movs	r2, #0
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	2019      	movs	r0, #25
 80035ba:	f000 fac3 	bl	8003b44 <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80035be:	2019      	movs	r0, #25
 80035c0:	f000 fadc 	bl	8003b7c <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 80035c4:	4b1e      	ldr	r3, [pc, #120]	; (8003640 <HAL_InitTick+0x9c>)
 80035c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c8:	4a1d      	ldr	r2, [pc, #116]	; (8003640 <HAL_InitTick+0x9c>)
 80035ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ce:	6613      	str	r3, [r2, #96]	; 0x60
 80035d0:	4b1b      	ldr	r3, [pc, #108]	; (8003640 <HAL_InitTick+0x9c>)
 80035d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80035dc:	f107 0210 	add.w	r2, r7, #16
 80035e0:	f107 0314 	add.w	r3, r7, #20
 80035e4:	4611      	mov	r1, r2
 80035e6:	4618      	mov	r0, r3
 80035e8:	f002 fbf6 	bl	8005dd8 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80035ec:	f002 fbde 	bl	8005dac <HAL_RCC_GetPCLK2Freq>
 80035f0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80035f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f4:	4a13      	ldr	r2, [pc, #76]	; (8003644 <HAL_InitTick+0xa0>)
 80035f6:	fba2 2303 	umull	r2, r3, r2, r3
 80035fa:	0c9b      	lsrs	r3, r3, #18
 80035fc:	3b01      	subs	r3, #1
 80035fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8003600:	4b11      	ldr	r3, [pc, #68]	; (8003648 <HAL_InitTick+0xa4>)
 8003602:	4a12      	ldr	r2, [pc, #72]	; (800364c <HAL_InitTick+0xa8>)
 8003604:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8003606:	4b10      	ldr	r3, [pc, #64]	; (8003648 <HAL_InitTick+0xa4>)
 8003608:	f240 32e7 	movw	r2, #999	; 0x3e7
 800360c:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 800360e:	4a0e      	ldr	r2, [pc, #56]	; (8003648 <HAL_InitTick+0xa4>)
 8003610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003612:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8003614:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <HAL_InitTick+0xa4>)
 8003616:	2200      	movs	r2, #0
 8003618:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800361a:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <HAL_InitTick+0xa4>)
 800361c:	2200      	movs	r2, #0
 800361e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8003620:	4809      	ldr	r0, [pc, #36]	; (8003648 <HAL_InitTick+0xa4>)
 8003622:	f003 fe61 	bl	80072e8 <HAL_TIM_Base_Init>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d104      	bne.n	8003636 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 800362c:	4806      	ldr	r0, [pc, #24]	; (8003648 <HAL_InitTick+0xa4>)
 800362e:	f003 ff43 	bl	80074b8 <HAL_TIM_Base_Start_IT>
 8003632:	4603      	mov	r3, r0
 8003634:	e000      	b.n	8003638 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
}
 8003638:	4618      	mov	r0, r3
 800363a:	3730      	adds	r7, #48	; 0x30
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40021000 	.word	0x40021000
 8003644:	431bde83 	.word	0x431bde83
 8003648:	2000159c 	.word	0x2000159c
 800364c:	40014400 	.word	0x40014400

08003650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003654:	e7fe      	b.n	8003654 <NMI_Handler+0x4>

08003656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003656:	b480      	push	{r7}
 8003658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800365a:	e7fe      	b.n	800365a <HardFault_Handler+0x4>

0800365c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003660:	e7fe      	b.n	8003660 <MemManage_Handler+0x4>

08003662 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003662:	b480      	push	{r7}
 8003664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003666:	e7fe      	b.n	8003666 <BusFault_Handler+0x4>

08003668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800366c:	e7fe      	b.n	800366c <UsageFault_Handler+0x4>

0800366e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800366e:	b480      	push	{r7}
 8003670:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003672:	bf00      	nop
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(pin_4_Pin);
 8003680:	2020      	movs	r0, #32
 8003682:	f000 ff91 	bl	80045a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003686:	bf00      	nop
 8003688:	bd80      	pop	{r7, pc}
	...

0800368c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003690:	4803      	ldr	r0, [pc, #12]	; (80036a0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003692:	f004 f97f 	bl	8007994 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8003696:	4803      	ldr	r0, [pc, #12]	; (80036a4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8003698:	f004 f97c 	bl	8007994 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800369c:	bf00      	nop
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	20000368 	.word	0x20000368
 80036a4:	2000159c 	.word	0x2000159c

080036a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80036ac:	4802      	ldr	r0, [pc, #8]	; (80036b8 <TIM3_IRQHandler+0x10>)
 80036ae:	f004 f971 	bl	8007994 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80036b2:	bf00      	nop
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	200003b4 	.word	0x200003b4

080036bc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80036c0:	4802      	ldr	r0, [pc, #8]	; (80036cc <SPI1_IRQHandler+0x10>)
 80036c2:	f003 fb8d 	bl	8006de0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80036c6:	bf00      	nop
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	20000304 	.word	0x20000304

080036d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80036d4:	4802      	ldr	r0, [pc, #8]	; (80036e0 <USART2_IRQHandler+0x10>)
 80036d6:	f005 fb0d 	bl	8008cf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80036da:	bf00      	nop
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	2000044c 	.word	0x2000044c

080036e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80036e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80036ec:	f000 ff5c 	bl	80045a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80036f0:	bf00      	nop
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80036f8:	4802      	ldr	r0, [pc, #8]	; (8003704 <TIM6_DAC_IRQHandler+0x10>)
 80036fa:	f004 f94b 	bl	8007994 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80036fe:	bf00      	nop
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20000400 	.word	0x20000400

08003708 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
	return 1;
 800370c:	2301      	movs	r3, #1
}
 800370e:	4618      	mov	r0, r3
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <_kill>:

int _kill(int pid, int sig)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003722:	f00d f9e1 	bl	8010ae8 <__errno>
 8003726:	4603      	mov	r3, r0
 8003728:	2216      	movs	r2, #22
 800372a:	601a      	str	r2, [r3, #0]
	return -1;
 800372c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <_exit>:

void _exit (int status)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003740:	f04f 31ff 	mov.w	r1, #4294967295
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7ff ffe7 	bl	8003718 <_kill>
	while (1) {}		/* Make sure we hang here */
 800374a:	e7fe      	b.n	800374a <_exit+0x12>

0800374c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	e00a      	b.n	8003774 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800375e:	f3af 8000 	nop.w
 8003762:	4601      	mov	r1, r0
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	60ba      	str	r2, [r7, #8]
 800376a:	b2ca      	uxtb	r2, r1
 800376c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	3301      	adds	r3, #1
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	429a      	cmp	r2, r3
 800377a:	dbf0      	blt.n	800375e <_read+0x12>
	}

return len;
 800377c:	687b      	ldr	r3, [r7, #4]
}
 800377e:	4618      	mov	r0, r3
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b086      	sub	sp, #24
 800378a:	af00      	add	r7, sp, #0
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003792:	2300      	movs	r3, #0
 8003794:	617b      	str	r3, [r7, #20]
 8003796:	e009      	b.n	80037ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	60ba      	str	r2, [r7, #8]
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	3301      	adds	r3, #1
 80037aa:	617b      	str	r3, [r7, #20]
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	dbf1      	blt.n	8003798 <_write+0x12>
	}
	return len;
 80037b4:	687b      	ldr	r3, [r7, #4]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <_close>:

int _close(int file)
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
	return -1;
 80037c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
 80037de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037e6:	605a      	str	r2, [r3, #4]
	return 0;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <_isatty>:

int _isatty(int file)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
	return 1;
 80037fe:	2301      	movs	r3, #1
}
 8003800:	4618      	mov	r0, r3
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
	return 0;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
	...

08003828 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003830:	4a14      	ldr	r2, [pc, #80]	; (8003884 <_sbrk+0x5c>)
 8003832:	4b15      	ldr	r3, [pc, #84]	; (8003888 <_sbrk+0x60>)
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800383c:	4b13      	ldr	r3, [pc, #76]	; (800388c <_sbrk+0x64>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d102      	bne.n	800384a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003844:	4b11      	ldr	r3, [pc, #68]	; (800388c <_sbrk+0x64>)
 8003846:	4a12      	ldr	r2, [pc, #72]	; (8003890 <_sbrk+0x68>)
 8003848:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800384a:	4b10      	ldr	r3, [pc, #64]	; (800388c <_sbrk+0x64>)
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4413      	add	r3, r2
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	429a      	cmp	r2, r3
 8003856:	d207      	bcs.n	8003868 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003858:	f00d f946 	bl	8010ae8 <__errno>
 800385c:	4603      	mov	r3, r0
 800385e:	220c      	movs	r2, #12
 8003860:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003862:	f04f 33ff 	mov.w	r3, #4294967295
 8003866:	e009      	b.n	800387c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003868:	4b08      	ldr	r3, [pc, #32]	; (800388c <_sbrk+0x64>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800386e:	4b07      	ldr	r3, [pc, #28]	; (800388c <_sbrk+0x64>)
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4413      	add	r3, r2
 8003876:	4a05      	ldr	r2, [pc, #20]	; (800388c <_sbrk+0x64>)
 8003878:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800387a:	68fb      	ldr	r3, [r7, #12]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3718      	adds	r7, #24
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	20018000 	.word	0x20018000
 8003888:	00000400 	.word	0x00000400
 800388c:	200015e8 	.word	0x200015e8
 8003890:	20005e38 	.word	0x20005e38

08003894 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003898:	4b06      	ldr	r3, [pc, #24]	; (80038b4 <SystemInit+0x20>)
 800389a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389e:	4a05      	ldr	r2, [pc, #20]	; (80038b4 <SystemInit+0x20>)
 80038a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80038a8:	bf00      	nop
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	e000ed00 	.word	0xe000ed00

080038b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80038b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80038bc:	f7ff ffea 	bl	8003894 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038c0:	480c      	ldr	r0, [pc, #48]	; (80038f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80038c2:	490d      	ldr	r1, [pc, #52]	; (80038f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80038c4:	4a0d      	ldr	r2, [pc, #52]	; (80038fc <LoopForever+0xe>)
  movs r3, #0
 80038c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038c8:	e002      	b.n	80038d0 <LoopCopyDataInit>

080038ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038ce:	3304      	adds	r3, #4

080038d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038d4:	d3f9      	bcc.n	80038ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038d6:	4a0a      	ldr	r2, [pc, #40]	; (8003900 <LoopForever+0x12>)
  ldr r4, =_ebss
 80038d8:	4c0a      	ldr	r4, [pc, #40]	; (8003904 <LoopForever+0x16>)
  movs r3, #0
 80038da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038dc:	e001      	b.n	80038e2 <LoopFillZerobss>

080038de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038e0:	3204      	adds	r2, #4

080038e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038e4:	d3fb      	bcc.n	80038de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80038e6:	f00d f905 	bl	8010af4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80038ea:	f7fe fc29 	bl	8002140 <main>

080038ee <LoopForever>:

LoopForever:
    b LoopForever
 80038ee:	e7fe      	b.n	80038ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80038f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80038f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038f8:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 80038fc:	08015024 	.word	0x08015024
  ldr r2, =_sbss
 8003900:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8003904:	20005e34 	.word	0x20005e34

08003908 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003908:	e7fe      	b.n	8003908 <ADC1_2_IRQHandler>
	...

0800390c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003916:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <HAL_Init+0x3c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a0b      	ldr	r2, [pc, #44]	; (8003948 <HAL_Init+0x3c>)
 800391c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003920:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003922:	2003      	movs	r0, #3
 8003924:	f000 f903 	bl	8003b2e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003928:	200f      	movs	r0, #15
 800392a:	f7ff fe3b 	bl	80035a4 <HAL_InitTick>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	71fb      	strb	r3, [r7, #7]
 8003938:	e001      	b.n	800393e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800393a:	f7ff fc69 	bl	8003210 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800393e:	79fb      	ldrb	r3, [r7, #7]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40022000 	.word	0x40022000

0800394c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003950:	4b06      	ldr	r3, [pc, #24]	; (800396c <HAL_IncTick+0x20>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	461a      	mov	r2, r3
 8003956:	4b06      	ldr	r3, [pc, #24]	; (8003970 <HAL_IncTick+0x24>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4413      	add	r3, r2
 800395c:	4a04      	ldr	r2, [pc, #16]	; (8003970 <HAL_IncTick+0x24>)
 800395e:	6013      	str	r3, [r2, #0]
}
 8003960:	bf00      	nop
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	20000008 	.word	0x20000008
 8003970:	200015ec 	.word	0x200015ec

08003974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
  return uwTick;
 8003978:	4b03      	ldr	r3, [pc, #12]	; (8003988 <HAL_GetTick+0x14>)
 800397a:	681b      	ldr	r3, [r3, #0]
}
 800397c:	4618      	mov	r0, r3
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	200015ec 	.word	0x200015ec

0800398c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003994:	f7ff ffee 	bl	8003974 <HAL_GetTick>
 8003998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a4:	d005      	beq.n	80039b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80039a6:	4b0a      	ldr	r3, [pc, #40]	; (80039d0 <HAL_Delay+0x44>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4413      	add	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039b2:	bf00      	nop
 80039b4:	f7ff ffde 	bl	8003974 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d8f7      	bhi.n	80039b4 <HAL_Delay+0x28>
  {
  }
}
 80039c4:	bf00      	nop
 80039c6:	bf00      	nop
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20000008 	.word	0x20000008

080039d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039e4:	4b0c      	ldr	r3, [pc, #48]	; (8003a18 <__NVIC_SetPriorityGrouping+0x44>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039f0:	4013      	ands	r3, r2
 80039f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a06:	4a04      	ldr	r2, [pc, #16]	; (8003a18 <__NVIC_SetPriorityGrouping+0x44>)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	60d3      	str	r3, [r2, #12]
}
 8003a0c:	bf00      	nop
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	e000ed00 	.word	0xe000ed00

08003a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a20:	4b04      	ldr	r3, [pc, #16]	; (8003a34 <__NVIC_GetPriorityGrouping+0x18>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	0a1b      	lsrs	r3, r3, #8
 8003a26:	f003 0307 	and.w	r3, r3, #7
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	e000ed00 	.word	0xe000ed00

08003a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	4603      	mov	r3, r0
 8003a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	db0b      	blt.n	8003a62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a4a:	79fb      	ldrb	r3, [r7, #7]
 8003a4c:	f003 021f 	and.w	r2, r3, #31
 8003a50:	4907      	ldr	r1, [pc, #28]	; (8003a70 <__NVIC_EnableIRQ+0x38>)
 8003a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a56:	095b      	lsrs	r3, r3, #5
 8003a58:	2001      	movs	r0, #1
 8003a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	e000e100 	.word	0xe000e100

08003a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	6039      	str	r1, [r7, #0]
 8003a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	db0a      	blt.n	8003a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	490c      	ldr	r1, [pc, #48]	; (8003ac0 <__NVIC_SetPriority+0x4c>)
 8003a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a92:	0112      	lsls	r2, r2, #4
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	440b      	add	r3, r1
 8003a98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a9c:	e00a      	b.n	8003ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	4908      	ldr	r1, [pc, #32]	; (8003ac4 <__NVIC_SetPriority+0x50>)
 8003aa4:	79fb      	ldrb	r3, [r7, #7]
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	3b04      	subs	r3, #4
 8003aac:	0112      	lsls	r2, r2, #4
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	761a      	strb	r2, [r3, #24]
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	e000e100 	.word	0xe000e100
 8003ac4:	e000ed00 	.word	0xe000ed00

08003ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b089      	sub	sp, #36	; 0x24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	f1c3 0307 	rsb	r3, r3, #7
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	bf28      	it	cs
 8003ae6:	2304      	movcs	r3, #4
 8003ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	3304      	adds	r3, #4
 8003aee:	2b06      	cmp	r3, #6
 8003af0:	d902      	bls.n	8003af8 <NVIC_EncodePriority+0x30>
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	3b03      	subs	r3, #3
 8003af6:	e000      	b.n	8003afa <NVIC_EncodePriority+0x32>
 8003af8:	2300      	movs	r3, #0
 8003afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003afc:	f04f 32ff 	mov.w	r2, #4294967295
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	43da      	mvns	r2, r3
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	401a      	ands	r2, r3
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b10:	f04f 31ff 	mov.w	r1, #4294967295
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	fa01 f303 	lsl.w	r3, r1, r3
 8003b1a:	43d9      	mvns	r1, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b20:	4313      	orrs	r3, r2
         );
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3724      	adds	r7, #36	; 0x24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b082      	sub	sp, #8
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7ff ff4c 	bl	80039d4 <__NVIC_SetPriorityGrouping>
}
 8003b3c:	bf00      	nop
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b52:	2300      	movs	r3, #0
 8003b54:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b56:	f7ff ff61 	bl	8003a1c <__NVIC_GetPriorityGrouping>
 8003b5a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	68b9      	ldr	r1, [r7, #8]
 8003b60:	6978      	ldr	r0, [r7, #20]
 8003b62:	f7ff ffb1 	bl	8003ac8 <NVIC_EncodePriority>
 8003b66:	4602      	mov	r2, r0
 8003b68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b6c:	4611      	mov	r1, r2
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff ff80 	bl	8003a74 <__NVIC_SetPriority>
}
 8003b74:	bf00      	nop
 8003b76:	3718      	adds	r7, #24
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	4603      	mov	r3, r0
 8003b84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff ff54 	bl	8003a38 <__NVIC_EnableIRQ>
}
 8003b90:	bf00      	nop
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d008      	beq.n	8003bc2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2204      	movs	r2, #4
 8003bb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e022      	b.n	8003c08 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 020e 	bic.w	r2, r2, #14
 8003bd0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0201 	bic.w	r2, r2, #1
 8003be0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be6:	f003 021c 	and.w	r2, r3, #28
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	2101      	movs	r1, #1
 8003bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8003bf4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003c06:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d005      	beq.n	8003c38 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2204      	movs	r2, #4
 8003c30:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	73fb      	strb	r3, [r7, #15]
 8003c36:	e029      	b.n	8003c8c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 020e 	bic.w	r2, r2, #14
 8003c46:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0201 	bic.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5c:	f003 021c 	and.w	r2, r3, #28
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c64:	2101      	movs	r1, #1
 8003c66:	fa01 f202 	lsl.w	r2, r1, r2
 8003c6a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d003      	beq.n	8003c8c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	4798      	blx	r3
    }
  }
  return status;
 8003c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
	...

08003c98 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003caa:	4b2f      	ldr	r3, [pc, #188]	; (8003d68 <HAL_FLASH_Program+0xd0>)
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d101      	bne.n	8003cb6 <HAL_FLASH_Program+0x1e>
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	e053      	b.n	8003d5e <HAL_FLASH_Program+0xc6>
 8003cb6:	4b2c      	ldr	r3, [pc, #176]	; (8003d68 <HAL_FLASH_Program+0xd0>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003cbc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003cc0:	f000 f888 	bl	8003dd4 <FLASH_WaitForLastOperation>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8003cc8:	7dfb      	ldrb	r3, [r7, #23]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d143      	bne.n	8003d56 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003cce:	4b26      	ldr	r3, [pc, #152]	; (8003d68 <HAL_FLASH_Program+0xd0>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003cd4:	4b25      	ldr	r3, [pc, #148]	; (8003d6c <HAL_FLASH_Program+0xd4>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d009      	beq.n	8003cf4 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003ce0:	4b22      	ldr	r3, [pc, #136]	; (8003d6c <HAL_FLASH_Program+0xd4>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a21      	ldr	r2, [pc, #132]	; (8003d6c <HAL_FLASH_Program+0xd4>)
 8003ce6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cea:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003cec:	4b1e      	ldr	r3, [pc, #120]	; (8003d68 <HAL_FLASH_Program+0xd0>)
 8003cee:	2202      	movs	r2, #2
 8003cf0:	771a      	strb	r2, [r3, #28]
 8003cf2:	e002      	b.n	8003cfa <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003cf4:	4b1c      	ldr	r3, [pc, #112]	; (8003d68 <HAL_FLASH_Program+0xd0>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d107      	bne.n	8003d10 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8003d00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d04:	68b8      	ldr	r0, [r7, #8]
 8003d06:	f000 f8bb 	bl	8003e80 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	613b      	str	r3, [r7, #16]
 8003d0e:	e010      	b.n	8003d32 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d002      	beq.n	8003d1c <HAL_FLASH_Program+0x84>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d10a      	bne.n	8003d32 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	4619      	mov	r1, r3
 8003d20:	68b8      	ldr	r0, [r7, #8]
 8003d22:	f000 f8d3 	bl	8003ecc <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d102      	bne.n	8003d32 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8003d2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003d30:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003d32:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003d36:	f000 f84d 	bl	8003dd4 <FLASH_WaitForLastOperation>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d006      	beq.n	8003d52 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8003d44:	4b09      	ldr	r3, [pc, #36]	; (8003d6c <HAL_FLASH_Program+0xd4>)
 8003d46:	695a      	ldr	r2, [r3, #20]
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	4907      	ldr	r1, [pc, #28]	; (8003d6c <HAL_FLASH_Program+0xd4>)
 8003d4e:	4013      	ands	r3, r2
 8003d50:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003d52:	f000 f9eb 	bl	800412c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003d56:	4b04      	ldr	r3, [pc, #16]	; (8003d68 <HAL_FLASH_Program+0xd0>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	701a      	strb	r2, [r3, #0]

  return status;
 8003d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3718      	adds	r7, #24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	2000000c 	.word	0x2000000c
 8003d6c:	40022000 	.word	0x40022000

08003d70 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003d76:	2300      	movs	r3, #0
 8003d78:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003d7a:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <HAL_FLASH_Unlock+0x38>)
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	da0b      	bge.n	8003d9a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003d82:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <HAL_FLASH_Unlock+0x38>)
 8003d84:	4a09      	ldr	r2, [pc, #36]	; (8003dac <HAL_FLASH_Unlock+0x3c>)
 8003d86:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003d88:	4b07      	ldr	r3, [pc, #28]	; (8003da8 <HAL_FLASH_Unlock+0x38>)
 8003d8a:	4a09      	ldr	r2, [pc, #36]	; (8003db0 <HAL_FLASH_Unlock+0x40>)
 8003d8c:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003d8e:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <HAL_FLASH_Unlock+0x38>)
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	da01      	bge.n	8003d9a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003d9a:	79fb      	ldrb	r3, [r7, #7]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	40022000 	.word	0x40022000
 8003dac:	45670123 	.word	0x45670123
 8003db0:	cdef89ab 	.word	0xcdef89ab

08003db4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003db8:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <HAL_FLASH_Lock+0x1c>)
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	4a04      	ldr	r2, [pc, #16]	; (8003dd0 <HAL_FLASH_Lock+0x1c>)
 8003dbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003dc2:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	40022000 	.word	0x40022000

08003dd4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8003ddc:	f7ff fdca 	bl	8003974 <HAL_GetTick>
 8003de0:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003de2:	e00d      	b.n	8003e00 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dea:	d009      	beq.n	8003e00 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8003dec:	f7ff fdc2 	bl	8003974 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d801      	bhi.n	8003e00 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e037      	b.n	8003e70 <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003e00:	4b1d      	ldr	r3, [pc, #116]	; (8003e78 <FLASH_WaitForLastOperation+0xa4>)
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1eb      	bne.n	8003de4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8003e0c:	4b1a      	ldr	r3, [pc, #104]	; (8003e78 <FLASH_WaitForLastOperation+0xa4>)
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8003e14:	4013      	ands	r3, r2
 8003e16:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d01e      	beq.n	8003e5c <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8003e1e:	4b17      	ldr	r3, [pc, #92]	; (8003e7c <FLASH_WaitForLastOperation+0xa8>)
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	4a15      	ldr	r2, [pc, #84]	; (8003e7c <FLASH_WaitForLastOperation+0xa8>)
 8003e28:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d007      	beq.n	8003e44 <FLASH_WaitForLastOperation+0x70>
 8003e34:	4b10      	ldr	r3, [pc, #64]	; (8003e78 <FLASH_WaitForLastOperation+0xa4>)
 8003e36:	699a      	ldr	r2, [r3, #24]
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003e3e:	490e      	ldr	r1, [pc, #56]	; (8003e78 <FLASH_WaitForLastOperation+0xa4>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	618b      	str	r3, [r1, #24]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d004      	beq.n	8003e58 <FLASH_WaitForLastOperation+0x84>
 8003e4e:	4a0a      	ldr	r2, [pc, #40]	; (8003e78 <FLASH_WaitForLastOperation+0xa4>)
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003e56:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e009      	b.n	8003e70 <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003e5c:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <FLASH_WaitForLastOperation+0xa4>)
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003e68:	4b03      	ldr	r3, [pc, #12]	; (8003e78 <FLASH_WaitForLastOperation+0xa4>)
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40022000 	.word	0x40022000
 8003e7c:	2000000c 	.word	0x2000000c

08003e80 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003e8c:	4b0e      	ldr	r3, [pc, #56]	; (8003ec8 <FLASH_Program_DoubleWord+0x48>)
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	4a0d      	ldr	r2, [pc, #52]	; (8003ec8 <FLASH_Program_DoubleWord+0x48>)
 8003e92:	f043 0301 	orr.w	r3, r3, #1
 8003e96:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003e9e:	f3bf 8f6f 	isb	sy
}
 8003ea2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8003ea4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ea8:	f04f 0200 	mov.w	r2, #0
 8003eac:	f04f 0300 	mov.w	r3, #0
 8003eb0:	000a      	movs	r2, r1
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	68f9      	ldr	r1, [r7, #12]
 8003eb6:	3104      	adds	r1, #4
 8003eb8:	4613      	mov	r3, r2
 8003eba:	600b      	str	r3, [r1, #0]
}
 8003ebc:	bf00      	nop
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	40022000 	.word	0x40022000

08003ecc <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b089      	sub	sp, #36	; 0x24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8003ed6:	2340      	movs	r3, #64	; 0x40
 8003ed8:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003ee2:	4b14      	ldr	r3, [pc, #80]	; (8003f34 <FLASH_Program_Fast+0x68>)
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	4a13      	ldr	r2, [pc, #76]	; (8003f34 <FLASH_Program_Fast+0x68>)
 8003ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eec:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eee:	f3ef 8310 	mrs	r3, PRIMASK
 8003ef2:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ef4:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8003ef6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ef8:	b672      	cpsid	i
}
 8003efa:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	3304      	adds	r3, #4
 8003f08:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	617b      	str	r3, [r7, #20]
    row_index--;
 8003f10:	7ffb      	ldrb	r3, [r7, #31]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8003f16:	7ffb      	ldrb	r3, [r7, #31]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1ef      	bne.n	8003efc <FLASH_Program_Fast+0x30>
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	f383 8810 	msr	PRIMASK, r3
}
 8003f26:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8003f28:	bf00      	nop
 8003f2a:	3724      	adds	r7, #36	; 0x24
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	40022000 	.word	0x40022000

08003f38 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003f42:	4b49      	ldr	r3, [pc, #292]	; (8004068 <HAL_FLASHEx_Erase+0x130>)
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d101      	bne.n	8003f4e <HAL_FLASHEx_Erase+0x16>
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	e087      	b.n	800405e <HAL_FLASHEx_Erase+0x126>
 8003f4e:	4b46      	ldr	r3, [pc, #280]	; (8004068 <HAL_FLASHEx_Erase+0x130>)
 8003f50:	2201      	movs	r2, #1
 8003f52:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003f58:	f7ff ff3c 	bl	8003dd4 <FLASH_WaitForLastOperation>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d177      	bne.n	8004056 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003f66:	4b40      	ldr	r3, [pc, #256]	; (8004068 <HAL_FLASHEx_Erase+0x130>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8003f6c:	4b3f      	ldr	r3, [pc, #252]	; (800406c <HAL_FLASHEx_Erase+0x134>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d013      	beq.n	8003fa0 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003f78:	4b3c      	ldr	r3, [pc, #240]	; (800406c <HAL_FLASHEx_Erase+0x134>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d009      	beq.n	8003f98 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8003f84:	4b39      	ldr	r3, [pc, #228]	; (800406c <HAL_FLASHEx_Erase+0x134>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a38      	ldr	r2, [pc, #224]	; (800406c <HAL_FLASHEx_Erase+0x134>)
 8003f8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f8e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8003f90:	4b35      	ldr	r3, [pc, #212]	; (8004068 <HAL_FLASHEx_Erase+0x130>)
 8003f92:	2203      	movs	r2, #3
 8003f94:	771a      	strb	r2, [r3, #28]
 8003f96:	e016      	b.n	8003fc6 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8003f98:	4b33      	ldr	r3, [pc, #204]	; (8004068 <HAL_FLASHEx_Erase+0x130>)
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	771a      	strb	r2, [r3, #28]
 8003f9e:	e012      	b.n	8003fc6 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003fa0:	4b32      	ldr	r3, [pc, #200]	; (800406c <HAL_FLASHEx_Erase+0x134>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d009      	beq.n	8003fc0 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003fac:	4b2f      	ldr	r3, [pc, #188]	; (800406c <HAL_FLASHEx_Erase+0x134>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a2e      	ldr	r2, [pc, #184]	; (800406c <HAL_FLASHEx_Erase+0x134>)
 8003fb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fb6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003fb8:	4b2b      	ldr	r3, [pc, #172]	; (8004068 <HAL_FLASHEx_Erase+0x130>)
 8003fba:	2202      	movs	r2, #2
 8003fbc:	771a      	strb	r2, [r3, #28]
 8003fbe:	e002      	b.n	8003fc6 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003fc0:	4b29      	ldr	r3, [pc, #164]	; (8004068 <HAL_FLASHEx_Erase+0x130>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d113      	bne.n	8003ff6 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 f84c 	bl	8004070 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003fd8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003fdc:	f7ff fefa 	bl	8003dd4 <FLASH_WaitForLastOperation>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8003fe4:	4b21      	ldr	r3, [pc, #132]	; (800406c <HAL_FLASHEx_Erase+0x134>)
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	4a20      	ldr	r2, [pc, #128]	; (800406c <HAL_FLASHEx_Erase+0x134>)
 8003fea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003fee:	f023 0304 	bic.w	r3, r3, #4
 8003ff2:	6153      	str	r3, [r2, #20]
 8003ff4:	e02d      	b.n	8004052 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ffc:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	60bb      	str	r3, [r7, #8]
 8004004:	e01d      	b.n	8004042 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	4619      	mov	r1, r3
 800400c:	68b8      	ldr	r0, [r7, #8]
 800400e:	f000 f857 	bl	80040c0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004012:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004016:	f7ff fedd 	bl	8003dd4 <FLASH_WaitForLastOperation>
 800401a:	4603      	mov	r3, r0
 800401c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800401e:	4b13      	ldr	r3, [pc, #76]	; (800406c <HAL_FLASHEx_Erase+0x134>)
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	4a12      	ldr	r2, [pc, #72]	; (800406c <HAL_FLASHEx_Erase+0x134>)
 8004024:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004028:	f023 0302 	bic.w	r3, r3, #2
 800402c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800402e:	7bfb      	ldrb	r3, [r7, #15]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	601a      	str	r2, [r3, #0]
          break;
 800403a:	e00a      	b.n	8004052 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	3301      	adds	r3, #1
 8004040:	60bb      	str	r3, [r7, #8]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	4413      	add	r3, r2
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	429a      	cmp	r2, r3
 8004050:	d3d9      	bcc.n	8004006 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004052:	f000 f86b 	bl	800412c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004056:	4b04      	ldr	r3, [pc, #16]	; (8004068 <HAL_FLASHEx_Erase+0x130>)
 8004058:	2200      	movs	r2, #0
 800405a:	701a      	strb	r2, [r3, #0]

  return status;
 800405c:	7bfb      	ldrb	r3, [r7, #15]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	2000000c 	.word	0x2000000c
 800406c:	40022000 	.word	0x40022000

08004070 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d005      	beq.n	800408e <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8004082:	4b0e      	ldr	r3, [pc, #56]	; (80040bc <FLASH_MassErase+0x4c>)
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	4a0d      	ldr	r2, [pc, #52]	; (80040bc <FLASH_MassErase+0x4c>)
 8004088:	f043 0304 	orr.w	r3, r3, #4
 800408c:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d005      	beq.n	80040a4 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8004098:	4b08      	ldr	r3, [pc, #32]	; (80040bc <FLASH_MassErase+0x4c>)
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	4a07      	ldr	r2, [pc, #28]	; (80040bc <FLASH_MassErase+0x4c>)
 800409e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040a2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80040a4:	4b05      	ldr	r3, [pc, #20]	; (80040bc <FLASH_MassErase+0x4c>)
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	4a04      	ldr	r2, [pc, #16]	; (80040bc <FLASH_MassErase+0x4c>)
 80040aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ae:	6153      	str	r3, [r2, #20]
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	40022000 	.word	0x40022000

080040c0 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d006      	beq.n	80040e2 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 80040d4:	4b14      	ldr	r3, [pc, #80]	; (8004128 <FLASH_PageErase+0x68>)
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	4a13      	ldr	r2, [pc, #76]	; (8004128 <FLASH_PageErase+0x68>)
 80040da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040de:	6153      	str	r3, [r2, #20]
 80040e0:	e005      	b.n	80040ee <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 80040e2:	4b11      	ldr	r3, [pc, #68]	; (8004128 <FLASH_PageErase+0x68>)
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	4a10      	ldr	r2, [pc, #64]	; (8004128 <FLASH_PageErase+0x68>)
 80040e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040ec:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80040ee:	4b0e      	ldr	r3, [pc, #56]	; (8004128 <FLASH_PageErase+0x68>)
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80040fe:	490a      	ldr	r1, [pc, #40]	; (8004128 <FLASH_PageErase+0x68>)
 8004100:	4313      	orrs	r3, r2
 8004102:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004104:	4b08      	ldr	r3, [pc, #32]	; (8004128 <FLASH_PageErase+0x68>)
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	4a07      	ldr	r2, [pc, #28]	; (8004128 <FLASH_PageErase+0x68>)
 800410a:	f043 0302 	orr.w	r3, r3, #2
 800410e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004110:	4b05      	ldr	r3, [pc, #20]	; (8004128 <FLASH_PageErase+0x68>)
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	4a04      	ldr	r2, [pc, #16]	; (8004128 <FLASH_PageErase+0x68>)
 8004116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800411a:	6153      	str	r3, [r2, #20]
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	40022000 	.word	0x40022000

0800412c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8004132:	4b21      	ldr	r3, [pc, #132]	; (80041b8 <FLASH_FlushCaches+0x8c>)
 8004134:	7f1b      	ldrb	r3, [r3, #28]
 8004136:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8004138:	79fb      	ldrb	r3, [r7, #7]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d002      	beq.n	8004144 <FLASH_FlushCaches+0x18>
 800413e:	79fb      	ldrb	r3, [r7, #7]
 8004140:	2b03      	cmp	r3, #3
 8004142:	d117      	bne.n	8004174 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004144:	4b1d      	ldr	r3, [pc, #116]	; (80041bc <FLASH_FlushCaches+0x90>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a1c      	ldr	r2, [pc, #112]	; (80041bc <FLASH_FlushCaches+0x90>)
 800414a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800414e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004150:	4b1a      	ldr	r3, [pc, #104]	; (80041bc <FLASH_FlushCaches+0x90>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a19      	ldr	r2, [pc, #100]	; (80041bc <FLASH_FlushCaches+0x90>)
 8004156:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800415a:	6013      	str	r3, [r2, #0]
 800415c:	4b17      	ldr	r3, [pc, #92]	; (80041bc <FLASH_FlushCaches+0x90>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a16      	ldr	r2, [pc, #88]	; (80041bc <FLASH_FlushCaches+0x90>)
 8004162:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004166:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004168:	4b14      	ldr	r3, [pc, #80]	; (80041bc <FLASH_FlushCaches+0x90>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a13      	ldr	r2, [pc, #76]	; (80041bc <FLASH_FlushCaches+0x90>)
 800416e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004172:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8004174:	79fb      	ldrb	r3, [r7, #7]
 8004176:	2b02      	cmp	r3, #2
 8004178:	d002      	beq.n	8004180 <FLASH_FlushCaches+0x54>
 800417a:	79fb      	ldrb	r3, [r7, #7]
 800417c:	2b03      	cmp	r3, #3
 800417e:	d111      	bne.n	80041a4 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004180:	4b0e      	ldr	r3, [pc, #56]	; (80041bc <FLASH_FlushCaches+0x90>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a0d      	ldr	r2, [pc, #52]	; (80041bc <FLASH_FlushCaches+0x90>)
 8004186:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800418a:	6013      	str	r3, [r2, #0]
 800418c:	4b0b      	ldr	r3, [pc, #44]	; (80041bc <FLASH_FlushCaches+0x90>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a0a      	ldr	r2, [pc, #40]	; (80041bc <FLASH_FlushCaches+0x90>)
 8004192:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004196:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004198:	4b08      	ldr	r3, [pc, #32]	; (80041bc <FLASH_FlushCaches+0x90>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a07      	ldr	r2, [pc, #28]	; (80041bc <FLASH_FlushCaches+0x90>)
 800419e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041a2:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80041a4:	4b04      	ldr	r3, [pc, #16]	; (80041b8 <FLASH_FlushCaches+0x8c>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	771a      	strb	r2, [r3, #28]
}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	2000000c 	.word	0x2000000c
 80041bc:	40022000 	.word	0x40022000

080041c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041ca:	2300      	movs	r3, #0
 80041cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041ce:	e17f      	b.n	80044d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	2101      	movs	r1, #1
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	fa01 f303 	lsl.w	r3, r1, r3
 80041dc:	4013      	ands	r3, r2
 80041de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f000 8171 	beq.w	80044ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f003 0303 	and.w	r3, r3, #3
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d005      	beq.n	8004200 <HAL_GPIO_Init+0x40>
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f003 0303 	and.w	r3, r3, #3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d130      	bne.n	8004262 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	2203      	movs	r2, #3
 800420c:	fa02 f303 	lsl.w	r3, r2, r3
 8004210:	43db      	mvns	r3, r3
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	4013      	ands	r3, r2
 8004216:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	68da      	ldr	r2, [r3, #12]
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004236:	2201      	movs	r2, #1
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	fa02 f303 	lsl.w	r3, r2, r3
 800423e:	43db      	mvns	r3, r3
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	4013      	ands	r3, r2
 8004244:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	091b      	lsrs	r3, r3, #4
 800424c:	f003 0201 	and.w	r2, r3, #1
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	4313      	orrs	r3, r2
 800425a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f003 0303 	and.w	r3, r3, #3
 800426a:	2b03      	cmp	r3, #3
 800426c:	d118      	bne.n	80042a0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004272:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004274:	2201      	movs	r2, #1
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	43db      	mvns	r3, r3
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	4013      	ands	r3, r2
 8004282:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	08db      	lsrs	r3, r3, #3
 800428a:	f003 0201 	and.w	r2, r3, #1
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	4313      	orrs	r3, r2
 8004298:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f003 0303 	and.w	r3, r3, #3
 80042a8:	2b03      	cmp	r3, #3
 80042aa:	d017      	beq.n	80042dc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	2203      	movs	r2, #3
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	43db      	mvns	r3, r3
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	4013      	ands	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	fa02 f303 	lsl.w	r3, r2, r3
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f003 0303 	and.w	r3, r3, #3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d123      	bne.n	8004330 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	08da      	lsrs	r2, r3, #3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3208      	adds	r2, #8
 80042f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	220f      	movs	r2, #15
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	43db      	mvns	r3, r3
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	4013      	ands	r3, r2
 800430a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	691a      	ldr	r2, [r3, #16]
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	4313      	orrs	r3, r2
 8004320:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	08da      	lsrs	r2, r3, #3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	3208      	adds	r2, #8
 800432a:	6939      	ldr	r1, [r7, #16]
 800432c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	2203      	movs	r2, #3
 800433c:	fa02 f303 	lsl.w	r3, r2, r3
 8004340:	43db      	mvns	r3, r3
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	4013      	ands	r3, r2
 8004346:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f003 0203 	and.w	r2, r3, #3
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	4313      	orrs	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 80ac 	beq.w	80044ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004372:	4b5f      	ldr	r3, [pc, #380]	; (80044f0 <HAL_GPIO_Init+0x330>)
 8004374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004376:	4a5e      	ldr	r2, [pc, #376]	; (80044f0 <HAL_GPIO_Init+0x330>)
 8004378:	f043 0301 	orr.w	r3, r3, #1
 800437c:	6613      	str	r3, [r2, #96]	; 0x60
 800437e:	4b5c      	ldr	r3, [pc, #368]	; (80044f0 <HAL_GPIO_Init+0x330>)
 8004380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	60bb      	str	r3, [r7, #8]
 8004388:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800438a:	4a5a      	ldr	r2, [pc, #360]	; (80044f4 <HAL_GPIO_Init+0x334>)
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	089b      	lsrs	r3, r3, #2
 8004390:	3302      	adds	r3, #2
 8004392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004396:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	220f      	movs	r2, #15
 80043a2:	fa02 f303 	lsl.w	r3, r2, r3
 80043a6:	43db      	mvns	r3, r3
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	4013      	ands	r3, r2
 80043ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80043b4:	d025      	beq.n	8004402 <HAL_GPIO_Init+0x242>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a4f      	ldr	r2, [pc, #316]	; (80044f8 <HAL_GPIO_Init+0x338>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d01f      	beq.n	80043fe <HAL_GPIO_Init+0x23e>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a4e      	ldr	r2, [pc, #312]	; (80044fc <HAL_GPIO_Init+0x33c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d019      	beq.n	80043fa <HAL_GPIO_Init+0x23a>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a4d      	ldr	r2, [pc, #308]	; (8004500 <HAL_GPIO_Init+0x340>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d013      	beq.n	80043f6 <HAL_GPIO_Init+0x236>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a4c      	ldr	r2, [pc, #304]	; (8004504 <HAL_GPIO_Init+0x344>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d00d      	beq.n	80043f2 <HAL_GPIO_Init+0x232>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a4b      	ldr	r2, [pc, #300]	; (8004508 <HAL_GPIO_Init+0x348>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d007      	beq.n	80043ee <HAL_GPIO_Init+0x22e>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a4a      	ldr	r2, [pc, #296]	; (800450c <HAL_GPIO_Init+0x34c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d101      	bne.n	80043ea <HAL_GPIO_Init+0x22a>
 80043e6:	2306      	movs	r3, #6
 80043e8:	e00c      	b.n	8004404 <HAL_GPIO_Init+0x244>
 80043ea:	2307      	movs	r3, #7
 80043ec:	e00a      	b.n	8004404 <HAL_GPIO_Init+0x244>
 80043ee:	2305      	movs	r3, #5
 80043f0:	e008      	b.n	8004404 <HAL_GPIO_Init+0x244>
 80043f2:	2304      	movs	r3, #4
 80043f4:	e006      	b.n	8004404 <HAL_GPIO_Init+0x244>
 80043f6:	2303      	movs	r3, #3
 80043f8:	e004      	b.n	8004404 <HAL_GPIO_Init+0x244>
 80043fa:	2302      	movs	r3, #2
 80043fc:	e002      	b.n	8004404 <HAL_GPIO_Init+0x244>
 80043fe:	2301      	movs	r3, #1
 8004400:	e000      	b.n	8004404 <HAL_GPIO_Init+0x244>
 8004402:	2300      	movs	r3, #0
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	f002 0203 	and.w	r2, r2, #3
 800440a:	0092      	lsls	r2, r2, #2
 800440c:	4093      	lsls	r3, r2
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	4313      	orrs	r3, r2
 8004412:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004414:	4937      	ldr	r1, [pc, #220]	; (80044f4 <HAL_GPIO_Init+0x334>)
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	089b      	lsrs	r3, r3, #2
 800441a:	3302      	adds	r3, #2
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004422:	4b3b      	ldr	r3, [pc, #236]	; (8004510 <HAL_GPIO_Init+0x350>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	43db      	mvns	r3, r3
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	4013      	ands	r3, r2
 8004430:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4313      	orrs	r3, r2
 8004444:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004446:	4a32      	ldr	r2, [pc, #200]	; (8004510 <HAL_GPIO_Init+0x350>)
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800444c:	4b30      	ldr	r3, [pc, #192]	; (8004510 <HAL_GPIO_Init+0x350>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	43db      	mvns	r3, r3
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4013      	ands	r3, r2
 800445a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d003      	beq.n	8004470 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	4313      	orrs	r3, r2
 800446e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004470:	4a27      	ldr	r2, [pc, #156]	; (8004510 <HAL_GPIO_Init+0x350>)
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004476:	4b26      	ldr	r3, [pc, #152]	; (8004510 <HAL_GPIO_Init+0x350>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	43db      	mvns	r3, r3
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	4013      	ands	r3, r2
 8004484:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4313      	orrs	r3, r2
 8004498:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800449a:	4a1d      	ldr	r2, [pc, #116]	; (8004510 <HAL_GPIO_Init+0x350>)
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80044a0:	4b1b      	ldr	r3, [pc, #108]	; (8004510 <HAL_GPIO_Init+0x350>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	43db      	mvns	r3, r3
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	4013      	ands	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80044c4:	4a12      	ldr	r2, [pc, #72]	; (8004510 <HAL_GPIO_Init+0x350>)
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	3301      	adds	r3, #1
 80044ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	fa22 f303 	lsr.w	r3, r2, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f47f ae78 	bne.w	80041d0 <HAL_GPIO_Init+0x10>
  }
}
 80044e0:	bf00      	nop
 80044e2:	bf00      	nop
 80044e4:	371c      	adds	r7, #28
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	40021000 	.word	0x40021000
 80044f4:	40010000 	.word	0x40010000
 80044f8:	48000400 	.word	0x48000400
 80044fc:	48000800 	.word	0x48000800
 8004500:	48000c00 	.word	0x48000c00
 8004504:	48001000 	.word	0x48001000
 8004508:	48001400 	.word	0x48001400
 800450c:	48001800 	.word	0x48001800
 8004510:	40010400 	.word	0x40010400

08004514 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	460b      	mov	r3, r1
 800451e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	691a      	ldr	r2, [r3, #16]
 8004524:	887b      	ldrh	r3, [r7, #2]
 8004526:	4013      	ands	r3, r2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d002      	beq.n	8004532 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800452c:	2301      	movs	r3, #1
 800452e:	73fb      	strb	r3, [r7, #15]
 8004530:	e001      	b.n	8004536 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004532:	2300      	movs	r3, #0
 8004534:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004536:	7bfb      	ldrb	r3, [r7, #15]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	460b      	mov	r3, r1
 800454e:	807b      	strh	r3, [r7, #2]
 8004550:	4613      	mov	r3, r2
 8004552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004554:	787b      	ldrb	r3, [r7, #1]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800455a:	887a      	ldrh	r2, [r7, #2]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004560:	e002      	b.n	8004568 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004562:	887a      	ldrh	r2, [r7, #2]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	460b      	mov	r3, r1
 800457e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004586:	887a      	ldrh	r2, [r7, #2]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4013      	ands	r3, r2
 800458c:	041a      	lsls	r2, r3, #16
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	43d9      	mvns	r1, r3
 8004592:	887b      	ldrh	r3, [r7, #2]
 8004594:	400b      	ands	r3, r1
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	619a      	str	r2, [r3, #24]
}
 800459c:	bf00      	nop
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	4603      	mov	r3, r0
 80045b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80045b2:	4b08      	ldr	r3, [pc, #32]	; (80045d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045b4:	695a      	ldr	r2, [r3, #20]
 80045b6:	88fb      	ldrh	r3, [r7, #6]
 80045b8:	4013      	ands	r3, r2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d006      	beq.n	80045cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045be:	4a05      	ldr	r2, [pc, #20]	; (80045d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045c0:	88fb      	ldrh	r3, [r7, #6]
 80045c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045c4:	88fb      	ldrh	r3, [r7, #6]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fe fada 	bl	8002b80 <HAL_GPIO_EXTI_Callback>
  }
}
 80045cc:	bf00      	nop
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40010400 	.word	0x40010400

080045d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e081      	b.n	80046ee <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d106      	bne.n	8004604 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7fe fe2e 	bl	8003260 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2224      	movs	r2, #36	; 0x24
 8004608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 0201 	bic.w	r2, r2, #1
 800461a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004628:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004638:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d107      	bne.n	8004652 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800464e:	609a      	str	r2, [r3, #8]
 8004650:	e006      	b.n	8004660 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689a      	ldr	r2, [r3, #8]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800465e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	2b02      	cmp	r3, #2
 8004666:	d104      	bne.n	8004672 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004670:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6812      	ldr	r2, [r2, #0]
 800467c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004680:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004684:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68da      	ldr	r2, [r3, #12]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004694:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691a      	ldr	r2, [r3, #16]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69d9      	ldr	r1, [r3, #28]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a1a      	ldr	r2, [r3, #32]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	430a      	orrs	r2, r1
 80046be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0201 	orr.w	r2, r2, #1
 80046ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2220      	movs	r2, #32
 80046da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b088      	sub	sp, #32
 80046fc:	af02      	add	r7, sp, #8
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	4608      	mov	r0, r1
 8004702:	4611      	mov	r1, r2
 8004704:	461a      	mov	r2, r3
 8004706:	4603      	mov	r3, r0
 8004708:	817b      	strh	r3, [r7, #10]
 800470a:	460b      	mov	r3, r1
 800470c:	813b      	strh	r3, [r7, #8]
 800470e:	4613      	mov	r3, r2
 8004710:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b20      	cmp	r3, #32
 800471c:	f040 80f9 	bne.w	8004912 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004720:	6a3b      	ldr	r3, [r7, #32]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d002      	beq.n	800472c <HAL_I2C_Mem_Write+0x34>
 8004726:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004728:	2b00      	cmp	r3, #0
 800472a:	d105      	bne.n	8004738 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004732:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e0ed      	b.n	8004914 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800473e:	2b01      	cmp	r3, #1
 8004740:	d101      	bne.n	8004746 <HAL_I2C_Mem_Write+0x4e>
 8004742:	2302      	movs	r3, #2
 8004744:	e0e6      	b.n	8004914 <HAL_I2C_Mem_Write+0x21c>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800474e:	f7ff f911 	bl	8003974 <HAL_GetTick>
 8004752:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	2319      	movs	r3, #25
 800475a:	2201      	movs	r2, #1
 800475c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 fac3 	bl	8004cec <I2C_WaitOnFlagUntilTimeout>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e0d1      	b.n	8004914 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2221      	movs	r2, #33	; 0x21
 8004774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2240      	movs	r2, #64	; 0x40
 800477c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6a3a      	ldr	r2, [r7, #32]
 800478a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004790:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004798:	88f8      	ldrh	r0, [r7, #6]
 800479a:	893a      	ldrh	r2, [r7, #8]
 800479c:	8979      	ldrh	r1, [r7, #10]
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	9301      	str	r3, [sp, #4]
 80047a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a4:	9300      	str	r3, [sp, #0]
 80047a6:	4603      	mov	r3, r0
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 f9d3 	bl	8004b54 <I2C_RequestMemoryWrite>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d005      	beq.n	80047c0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e0a9      	b.n	8004914 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2bff      	cmp	r3, #255	; 0xff
 80047c8:	d90e      	bls.n	80047e8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	22ff      	movs	r2, #255	; 0xff
 80047ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d4:	b2da      	uxtb	r2, r3
 80047d6:	8979      	ldrh	r1, [r7, #10]
 80047d8:	2300      	movs	r3, #0
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 fc2b 	bl	800503c <I2C_TransferConfig>
 80047e6:	e00f      	b.n	8004808 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f6:	b2da      	uxtb	r2, r3
 80047f8:	8979      	ldrh	r1, [r7, #10]
 80047fa:	2300      	movs	r3, #0
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f000 fc1a 	bl	800503c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f000 faad 	bl	8004d6c <I2C_WaitOnTXISFlagUntilTimeout>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e07b      	b.n	8004914 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	781a      	ldrb	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004836:	b29b      	uxth	r3, r3
 8004838:	3b01      	subs	r3, #1
 800483a:	b29a      	uxth	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004844:	3b01      	subs	r3, #1
 8004846:	b29a      	uxth	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004850:	b29b      	uxth	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d034      	beq.n	80048c0 <HAL_I2C_Mem_Write+0x1c8>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485a:	2b00      	cmp	r3, #0
 800485c:	d130      	bne.n	80048c0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004864:	2200      	movs	r2, #0
 8004866:	2180      	movs	r1, #128	; 0x80
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f000 fa3f 	bl	8004cec <I2C_WaitOnFlagUntilTimeout>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d001      	beq.n	8004878 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e04d      	b.n	8004914 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487c:	b29b      	uxth	r3, r3
 800487e:	2bff      	cmp	r3, #255	; 0xff
 8004880:	d90e      	bls.n	80048a0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	22ff      	movs	r2, #255	; 0xff
 8004886:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800488c:	b2da      	uxtb	r2, r3
 800488e:	8979      	ldrh	r1, [r7, #10]
 8004890:	2300      	movs	r3, #0
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f000 fbcf 	bl	800503c <I2C_TransferConfig>
 800489e:	e00f      	b.n	80048c0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	8979      	ldrh	r1, [r7, #10]
 80048b2:	2300      	movs	r3, #0
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 fbbe 	bl	800503c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d19e      	bne.n	8004808 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f000 fa8c 	bl	8004dec <I2C_WaitOnSTOPFlagUntilTimeout>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e01a      	b.n	8004914 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2220      	movs	r2, #32
 80048e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	6859      	ldr	r1, [r3, #4]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	4b0a      	ldr	r3, [pc, #40]	; (800491c <HAL_I2C_Mem_Write+0x224>)
 80048f2:	400b      	ands	r3, r1
 80048f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800490e:	2300      	movs	r3, #0
 8004910:	e000      	b.n	8004914 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004912:	2302      	movs	r3, #2
  }
}
 8004914:	4618      	mov	r0, r3
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	fe00e800 	.word	0xfe00e800

08004920 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b088      	sub	sp, #32
 8004924:	af02      	add	r7, sp, #8
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	4608      	mov	r0, r1
 800492a:	4611      	mov	r1, r2
 800492c:	461a      	mov	r2, r3
 800492e:	4603      	mov	r3, r0
 8004930:	817b      	strh	r3, [r7, #10]
 8004932:	460b      	mov	r3, r1
 8004934:	813b      	strh	r3, [r7, #8]
 8004936:	4613      	mov	r3, r2
 8004938:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b20      	cmp	r3, #32
 8004944:	f040 80fd 	bne.w	8004b42 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d002      	beq.n	8004954 <HAL_I2C_Mem_Read+0x34>
 800494e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004950:	2b00      	cmp	r3, #0
 8004952:	d105      	bne.n	8004960 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800495a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e0f1      	b.n	8004b44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004966:	2b01      	cmp	r3, #1
 8004968:	d101      	bne.n	800496e <HAL_I2C_Mem_Read+0x4e>
 800496a:	2302      	movs	r3, #2
 800496c:	e0ea      	b.n	8004b44 <HAL_I2C_Mem_Read+0x224>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004976:	f7fe fffd 	bl	8003974 <HAL_GetTick>
 800497a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	2319      	movs	r3, #25
 8004982:	2201      	movs	r2, #1
 8004984:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f000 f9af 	bl	8004cec <I2C_WaitOnFlagUntilTimeout>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e0d5      	b.n	8004b44 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2222      	movs	r2, #34	; 0x22
 800499c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2240      	movs	r2, #64	; 0x40
 80049a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6a3a      	ldr	r2, [r7, #32]
 80049b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80049b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049c0:	88f8      	ldrh	r0, [r7, #6]
 80049c2:	893a      	ldrh	r2, [r7, #8]
 80049c4:	8979      	ldrh	r1, [r7, #10]
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	9301      	str	r3, [sp, #4]
 80049ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	4603      	mov	r3, r0
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f000 f913 	bl	8004bfc <I2C_RequestMemoryRead>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d005      	beq.n	80049e8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e0ad      	b.n	8004b44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	2bff      	cmp	r3, #255	; 0xff
 80049f0:	d90e      	bls.n	8004a10 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	22ff      	movs	r2, #255	; 0xff
 80049f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	8979      	ldrh	r1, [r7, #10]
 8004a00:	4b52      	ldr	r3, [pc, #328]	; (8004b4c <HAL_I2C_Mem_Read+0x22c>)
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f000 fb17 	bl	800503c <I2C_TransferConfig>
 8004a0e:	e00f      	b.n	8004a30 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	8979      	ldrh	r1, [r7, #10]
 8004a22:	4b4a      	ldr	r3, [pc, #296]	; (8004b4c <HAL_I2C_Mem_Read+0x22c>)
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 fb06 	bl	800503c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a36:	2200      	movs	r2, #0
 8004a38:	2104      	movs	r1, #4
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f000 f956 	bl	8004cec <I2C_WaitOnFlagUntilTimeout>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e07c      	b.n	8004b44 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	b2d2      	uxtb	r2, r2
 8004a56:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	1c5a      	adds	r2, r3, #1
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a66:	3b01      	subs	r3, #1
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	3b01      	subs	r3, #1
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d034      	beq.n	8004af0 <HAL_I2C_Mem_Read+0x1d0>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d130      	bne.n	8004af0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a94:	2200      	movs	r2, #0
 8004a96:	2180      	movs	r1, #128	; 0x80
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 f927 	bl	8004cec <I2C_WaitOnFlagUntilTimeout>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e04d      	b.n	8004b44 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2bff      	cmp	r3, #255	; 0xff
 8004ab0:	d90e      	bls.n	8004ad0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	22ff      	movs	r2, #255	; 0xff
 8004ab6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	8979      	ldrh	r1, [r7, #10]
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 fab7 	bl	800503c <I2C_TransferConfig>
 8004ace:	e00f      	b.n	8004af0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	8979      	ldrh	r1, [r7, #10]
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 faa6 	bl	800503c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d19a      	bne.n	8004a30 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f000 f974 	bl	8004dec <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e01a      	b.n	8004b44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2220      	movs	r2, #32
 8004b14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	6859      	ldr	r1, [r3, #4]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <HAL_I2C_Mem_Read+0x230>)
 8004b22:	400b      	ands	r3, r1
 8004b24:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	e000      	b.n	8004b44 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004b42:	2302      	movs	r3, #2
  }
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3718      	adds	r7, #24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	80002400 	.word	0x80002400
 8004b50:	fe00e800 	.word	0xfe00e800

08004b54 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af02      	add	r7, sp, #8
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	4608      	mov	r0, r1
 8004b5e:	4611      	mov	r1, r2
 8004b60:	461a      	mov	r2, r3
 8004b62:	4603      	mov	r3, r0
 8004b64:	817b      	strh	r3, [r7, #10]
 8004b66:	460b      	mov	r3, r1
 8004b68:	813b      	strh	r3, [r7, #8]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004b6e:	88fb      	ldrh	r3, [r7, #6]
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	8979      	ldrh	r1, [r7, #10]
 8004b74:	4b20      	ldr	r3, [pc, #128]	; (8004bf8 <I2C_RequestMemoryWrite+0xa4>)
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f000 fa5d 	bl	800503c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b82:	69fa      	ldr	r2, [r7, #28]
 8004b84:	69b9      	ldr	r1, [r7, #24]
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 f8f0 	bl	8004d6c <I2C_WaitOnTXISFlagUntilTimeout>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e02c      	b.n	8004bf0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b96:	88fb      	ldrh	r3, [r7, #6]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d105      	bne.n	8004ba8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b9c:	893b      	ldrh	r3, [r7, #8]
 8004b9e:	b2da      	uxtb	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	629a      	str	r2, [r3, #40]	; 0x28
 8004ba6:	e015      	b.n	8004bd4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004ba8:	893b      	ldrh	r3, [r7, #8]
 8004baa:	0a1b      	lsrs	r3, r3, #8
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bb6:	69fa      	ldr	r2, [r7, #28]
 8004bb8:	69b9      	ldr	r1, [r7, #24]
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f000 f8d6 	bl	8004d6c <I2C_WaitOnTXISFlagUntilTimeout>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e012      	b.n	8004bf0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004bca:	893b      	ldrh	r3, [r7, #8]
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	2180      	movs	r1, #128	; 0x80
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f000 f884 	bl	8004cec <I2C_WaitOnFlagUntilTimeout>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e000      	b.n	8004bf0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	80002000 	.word	0x80002000

08004bfc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af02      	add	r7, sp, #8
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	4608      	mov	r0, r1
 8004c06:	4611      	mov	r1, r2
 8004c08:	461a      	mov	r2, r3
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	817b      	strh	r3, [r7, #10]
 8004c0e:	460b      	mov	r3, r1
 8004c10:	813b      	strh	r3, [r7, #8]
 8004c12:	4613      	mov	r3, r2
 8004c14:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004c16:	88fb      	ldrh	r3, [r7, #6]
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	8979      	ldrh	r1, [r7, #10]
 8004c1c:	4b20      	ldr	r3, [pc, #128]	; (8004ca0 <I2C_RequestMemoryRead+0xa4>)
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	2300      	movs	r3, #0
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f000 fa0a 	bl	800503c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c28:	69fa      	ldr	r2, [r7, #28]
 8004c2a:	69b9      	ldr	r1, [r7, #24]
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 f89d 	bl	8004d6c <I2C_WaitOnTXISFlagUntilTimeout>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d001      	beq.n	8004c3c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e02c      	b.n	8004c96 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c3c:	88fb      	ldrh	r3, [r7, #6]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d105      	bne.n	8004c4e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c42:	893b      	ldrh	r3, [r7, #8]
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	629a      	str	r2, [r3, #40]	; 0x28
 8004c4c:	e015      	b.n	8004c7a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004c4e:	893b      	ldrh	r3, [r7, #8]
 8004c50:	0a1b      	lsrs	r3, r3, #8
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	b2da      	uxtb	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c5c:	69fa      	ldr	r2, [r7, #28]
 8004c5e:	69b9      	ldr	r1, [r7, #24]
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 f883 	bl	8004d6c <I2C_WaitOnTXISFlagUntilTimeout>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e012      	b.n	8004c96 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c70:	893b      	ldrh	r3, [r7, #8]
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	2200      	movs	r2, #0
 8004c82:	2140      	movs	r1, #64	; 0x40
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 f831 	bl	8004cec <I2C_WaitOnFlagUntilTimeout>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e000      	b.n	8004c96 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	80002000 	.word	0x80002000

08004ca4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d103      	bne.n	8004cc2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d007      	beq.n	8004ce0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	699a      	ldr	r2, [r3, #24]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f042 0201 	orr.w	r2, r2, #1
 8004cde:	619a      	str	r2, [r3, #24]
  }
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	603b      	str	r3, [r7, #0]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cfc:	e022      	b.n	8004d44 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d04:	d01e      	beq.n	8004d44 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d06:	f7fe fe35 	bl	8003974 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	683a      	ldr	r2, [r7, #0]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d302      	bcc.n	8004d1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d113      	bne.n	8004d44 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d20:	f043 0220 	orr.w	r2, r3, #32
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e00f      	b.n	8004d64 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699a      	ldr	r2, [r3, #24]
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	bf0c      	ite	eq
 8004d54:	2301      	moveq	r3, #1
 8004d56:	2300      	movne	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	79fb      	ldrb	r3, [r7, #7]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d0cd      	beq.n	8004cfe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d78:	e02c      	b.n	8004dd4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	68b9      	ldr	r1, [r7, #8]
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f000 f870 	bl	8004e64 <I2C_IsErrorOccurred>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e02a      	b.n	8004de4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d94:	d01e      	beq.n	8004dd4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d96:	f7fe fded 	bl	8003974 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d302      	bcc.n	8004dac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d113      	bne.n	8004dd4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db0:	f043 0220 	orr.w	r2, r3, #32
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e007      	b.n	8004de4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d1cb      	bne.n	8004d7a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004df8:	e028      	b.n	8004e4c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	68b9      	ldr	r1, [r7, #8]
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 f830 	bl	8004e64 <I2C_IsErrorOccurred>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e026      	b.n	8004e5c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e0e:	f7fe fdb1 	bl	8003974 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d302      	bcc.n	8004e24 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d113      	bne.n	8004e4c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e28:	f043 0220 	orr.w	r2, r3, #32
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2220      	movs	r2, #32
 8004e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e007      	b.n	8004e5c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	f003 0320 	and.w	r3, r3, #32
 8004e56:	2b20      	cmp	r3, #32
 8004e58:	d1cf      	bne.n	8004dfa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b08a      	sub	sp, #40	; 0x28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	f003 0310 	and.w	r3, r3, #16
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d075      	beq.n	8004f7c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2210      	movs	r2, #16
 8004e96:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e98:	e056      	b.n	8004f48 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea0:	d052      	beq.n	8004f48 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ea2:	f7fe fd67 	bl	8003974 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d302      	bcc.n	8004eb8 <I2C_IsErrorOccurred+0x54>
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d147      	bne.n	8004f48 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ec2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004eca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eda:	d12e      	bne.n	8004f3a <I2C_IsErrorOccurred+0xd6>
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ee2:	d02a      	beq.n	8004f3a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004ee4:	7cfb      	ldrb	r3, [r7, #19]
 8004ee6:	2b20      	cmp	r3, #32
 8004ee8:	d027      	beq.n	8004f3a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ef8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004efa:	f7fe fd3b 	bl	8003974 <HAL_GetTick>
 8004efe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f00:	e01b      	b.n	8004f3a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004f02:	f7fe fd37 	bl	8003974 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b19      	cmp	r3, #25
 8004f0e:	d914      	bls.n	8004f3a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f14:	f043 0220 	orr.w	r2, r3, #32
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	f003 0320 	and.w	r3, r3, #32
 8004f44:	2b20      	cmp	r3, #32
 8004f46:	d1dc      	bne.n	8004f02 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	f003 0320 	and.w	r3, r3, #32
 8004f52:	2b20      	cmp	r3, #32
 8004f54:	d003      	beq.n	8004f5e <I2C_IsErrorOccurred+0xfa>
 8004f56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d09d      	beq.n	8004e9a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004f5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d103      	bne.n	8004f6e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004f6e:	6a3b      	ldr	r3, [r7, #32]
 8004f70:	f043 0304 	orr.w	r3, r3, #4
 8004f74:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00b      	beq.n	8004fa6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	f043 0301 	orr.w	r3, r3, #1
 8004f94:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f9e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00b      	beq.n	8004fc8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	f043 0308 	orr.w	r3, r3, #8
 8004fb6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fc0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00b      	beq.n	8004fea <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004fd2:	6a3b      	ldr	r3, [r7, #32]
 8004fd4:	f043 0302 	orr.w	r3, r3, #2
 8004fd8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fe2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004fea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d01c      	beq.n	800502c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f7ff fe56 	bl	8004ca4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6859      	ldr	r1, [r3, #4]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	4b0d      	ldr	r3, [pc, #52]	; (8005038 <I2C_IsErrorOccurred+0x1d4>)
 8005004:	400b      	ands	r3, r1
 8005006:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	431a      	orrs	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2220      	movs	r2, #32
 8005018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800502c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005030:	4618      	mov	r0, r3
 8005032:	3728      	adds	r7, #40	; 0x28
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	fe00e800 	.word	0xfe00e800

0800503c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800503c:	b480      	push	{r7}
 800503e:	b087      	sub	sp, #28
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	607b      	str	r3, [r7, #4]
 8005046:	460b      	mov	r3, r1
 8005048:	817b      	strh	r3, [r7, #10]
 800504a:	4613      	mov	r3, r2
 800504c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800504e:	897b      	ldrh	r3, [r7, #10]
 8005050:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005054:	7a7b      	ldrb	r3, [r7, #9]
 8005056:	041b      	lsls	r3, r3, #16
 8005058:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800505c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005062:	6a3b      	ldr	r3, [r7, #32]
 8005064:	4313      	orrs	r3, r2
 8005066:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800506a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	6a3b      	ldr	r3, [r7, #32]
 8005074:	0d5b      	lsrs	r3, r3, #21
 8005076:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800507a:	4b08      	ldr	r3, [pc, #32]	; (800509c <I2C_TransferConfig+0x60>)
 800507c:	430b      	orrs	r3, r1
 800507e:	43db      	mvns	r3, r3
 8005080:	ea02 0103 	and.w	r1, r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	430a      	orrs	r2, r1
 800508c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800508e:	bf00      	nop
 8005090:	371c      	adds	r7, #28
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	03ff63ff 	.word	0x03ff63ff

080050a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b20      	cmp	r3, #32
 80050b4:	d138      	bne.n	8005128 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d101      	bne.n	80050c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80050c0:	2302      	movs	r3, #2
 80050c2:	e032      	b.n	800512a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2224      	movs	r2, #36	; 0x24
 80050d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 0201 	bic.w	r2, r2, #1
 80050e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6819      	ldr	r1, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	430a      	orrs	r2, r1
 8005102:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f042 0201 	orr.w	r2, r2, #1
 8005112:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2220      	movs	r2, #32
 8005118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005124:	2300      	movs	r3, #0
 8005126:	e000      	b.n	800512a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005128:	2302      	movs	r3, #2
  }
}
 800512a:	4618      	mov	r0, r3
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005136:	b480      	push	{r7}
 8005138:	b085      	sub	sp, #20
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
 800513e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b20      	cmp	r3, #32
 800514a:	d139      	bne.n	80051c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005152:	2b01      	cmp	r3, #1
 8005154:	d101      	bne.n	800515a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005156:	2302      	movs	r3, #2
 8005158:	e033      	b.n	80051c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2224      	movs	r2, #36	; 0x24
 8005166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0201 	bic.w	r2, r2, #1
 8005178:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005188:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	021b      	lsls	r3, r3, #8
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	4313      	orrs	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f042 0201 	orr.w	r2, r2, #1
 80051aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051bc:	2300      	movs	r3, #0
 80051be:	e000      	b.n	80051c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80051c0:	2302      	movs	r3, #2
  }
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
	...

080051d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80051d0:	b480      	push	{r7}
 80051d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80051d4:	4b04      	ldr	r3, [pc, #16]	; (80051e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80051dc:	4618      	mov	r0, r3
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	40007000 	.word	0x40007000

080051ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051fa:	d130      	bne.n	800525e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80051fc:	4b23      	ldr	r3, [pc, #140]	; (800528c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005208:	d038      	beq.n	800527c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800520a:	4b20      	ldr	r3, [pc, #128]	; (800528c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005212:	4a1e      	ldr	r2, [pc, #120]	; (800528c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005214:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005218:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800521a:	4b1d      	ldr	r3, [pc, #116]	; (8005290 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2232      	movs	r2, #50	; 0x32
 8005220:	fb02 f303 	mul.w	r3, r2, r3
 8005224:	4a1b      	ldr	r2, [pc, #108]	; (8005294 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005226:	fba2 2303 	umull	r2, r3, r2, r3
 800522a:	0c9b      	lsrs	r3, r3, #18
 800522c:	3301      	adds	r3, #1
 800522e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005230:	e002      	b.n	8005238 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	3b01      	subs	r3, #1
 8005236:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005238:	4b14      	ldr	r3, [pc, #80]	; (800528c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005244:	d102      	bne.n	800524c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1f2      	bne.n	8005232 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800524c:	4b0f      	ldr	r3, [pc, #60]	; (800528c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005258:	d110      	bne.n	800527c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e00f      	b.n	800527e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800525e:	4b0b      	ldr	r3, [pc, #44]	; (800528c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800526a:	d007      	beq.n	800527c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800526c:	4b07      	ldr	r3, [pc, #28]	; (800528c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005274:	4a05      	ldr	r2, [pc, #20]	; (800528c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005276:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800527a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	40007000 	.word	0x40007000
 8005290:	20000000 	.word	0x20000000
 8005294:	431bde83 	.word	0x431bde83

08005298 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b088      	sub	sp, #32
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e3ca      	b.n	8005a40 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052aa:	4b97      	ldr	r3, [pc, #604]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f003 030c 	and.w	r3, r3, #12
 80052b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052b4:	4b94      	ldr	r3, [pc, #592]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f003 0303 	and.w	r3, r3, #3
 80052bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0310 	and.w	r3, r3, #16
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	f000 80e4 	beq.w	8005494 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d007      	beq.n	80052e2 <HAL_RCC_OscConfig+0x4a>
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	2b0c      	cmp	r3, #12
 80052d6:	f040 808b 	bne.w	80053f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	f040 8087 	bne.w	80053f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80052e2:	4b89      	ldr	r3, [pc, #548]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d005      	beq.n	80052fa <HAL_RCC_OscConfig+0x62>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e3a2      	b.n	8005a40 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1a      	ldr	r2, [r3, #32]
 80052fe:	4b82      	ldr	r3, [pc, #520]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0308 	and.w	r3, r3, #8
 8005306:	2b00      	cmp	r3, #0
 8005308:	d004      	beq.n	8005314 <HAL_RCC_OscConfig+0x7c>
 800530a:	4b7f      	ldr	r3, [pc, #508]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005312:	e005      	b.n	8005320 <HAL_RCC_OscConfig+0x88>
 8005314:	4b7c      	ldr	r3, [pc, #496]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 8005316:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800531a:	091b      	lsrs	r3, r3, #4
 800531c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005320:	4293      	cmp	r3, r2
 8005322:	d223      	bcs.n	800536c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	4618      	mov	r0, r3
 800532a:	f000 fd87 	bl	8005e3c <RCC_SetFlashLatencyFromMSIRange>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d001      	beq.n	8005338 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e383      	b.n	8005a40 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005338:	4b73      	ldr	r3, [pc, #460]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a72      	ldr	r2, [pc, #456]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 800533e:	f043 0308 	orr.w	r3, r3, #8
 8005342:	6013      	str	r3, [r2, #0]
 8005344:	4b70      	ldr	r3, [pc, #448]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	496d      	ldr	r1, [pc, #436]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 8005352:	4313      	orrs	r3, r2
 8005354:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005356:	4b6c      	ldr	r3, [pc, #432]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	69db      	ldr	r3, [r3, #28]
 8005362:	021b      	lsls	r3, r3, #8
 8005364:	4968      	ldr	r1, [pc, #416]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 8005366:	4313      	orrs	r3, r2
 8005368:	604b      	str	r3, [r1, #4]
 800536a:	e025      	b.n	80053b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800536c:	4b66      	ldr	r3, [pc, #408]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a65      	ldr	r2, [pc, #404]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 8005372:	f043 0308 	orr.w	r3, r3, #8
 8005376:	6013      	str	r3, [r2, #0]
 8005378:	4b63      	ldr	r3, [pc, #396]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	4960      	ldr	r1, [pc, #384]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 8005386:	4313      	orrs	r3, r2
 8005388:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800538a:	4b5f      	ldr	r3, [pc, #380]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	021b      	lsls	r3, r3, #8
 8005398:	495b      	ldr	r1, [pc, #364]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 800539a:	4313      	orrs	r3, r2
 800539c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d109      	bne.n	80053b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a1b      	ldr	r3, [r3, #32]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f000 fd47 	bl	8005e3c <RCC_SetFlashLatencyFromMSIRange>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d001      	beq.n	80053b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e343      	b.n	8005a40 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053b8:	f000 fc4a 	bl	8005c50 <HAL_RCC_GetSysClockFreq>
 80053bc:	4602      	mov	r2, r0
 80053be:	4b52      	ldr	r3, [pc, #328]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	091b      	lsrs	r3, r3, #4
 80053c4:	f003 030f 	and.w	r3, r3, #15
 80053c8:	4950      	ldr	r1, [pc, #320]	; (800550c <HAL_RCC_OscConfig+0x274>)
 80053ca:	5ccb      	ldrb	r3, [r1, r3]
 80053cc:	f003 031f 	and.w	r3, r3, #31
 80053d0:	fa22 f303 	lsr.w	r3, r2, r3
 80053d4:	4a4e      	ldr	r2, [pc, #312]	; (8005510 <HAL_RCC_OscConfig+0x278>)
 80053d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80053d8:	4b4e      	ldr	r3, [pc, #312]	; (8005514 <HAL_RCC_OscConfig+0x27c>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4618      	mov	r0, r3
 80053de:	f7fe f8e1 	bl	80035a4 <HAL_InitTick>
 80053e2:	4603      	mov	r3, r0
 80053e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80053e6:	7bfb      	ldrb	r3, [r7, #15]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d052      	beq.n	8005492 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80053ec:	7bfb      	ldrb	r3, [r7, #15]
 80053ee:	e327      	b.n	8005a40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d032      	beq.n	800545e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80053f8:	4b43      	ldr	r3, [pc, #268]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a42      	ldr	r2, [pc, #264]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 80053fe:	f043 0301 	orr.w	r3, r3, #1
 8005402:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005404:	f7fe fab6 	bl	8003974 <HAL_GetTick>
 8005408:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800540a:	e008      	b.n	800541e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800540c:	f7fe fab2 	bl	8003974 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b02      	cmp	r3, #2
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e310      	b.n	8005a40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800541e:	4b3a      	ldr	r3, [pc, #232]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d0f0      	beq.n	800540c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800542a:	4b37      	ldr	r3, [pc, #220]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a36      	ldr	r2, [pc, #216]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 8005430:	f043 0308 	orr.w	r3, r3, #8
 8005434:	6013      	str	r3, [r2, #0]
 8005436:	4b34      	ldr	r3, [pc, #208]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	4931      	ldr	r1, [pc, #196]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 8005444:	4313      	orrs	r3, r2
 8005446:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005448:	4b2f      	ldr	r3, [pc, #188]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	69db      	ldr	r3, [r3, #28]
 8005454:	021b      	lsls	r3, r3, #8
 8005456:	492c      	ldr	r1, [pc, #176]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 8005458:	4313      	orrs	r3, r2
 800545a:	604b      	str	r3, [r1, #4]
 800545c:	e01a      	b.n	8005494 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800545e:	4b2a      	ldr	r3, [pc, #168]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a29      	ldr	r2, [pc, #164]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 8005464:	f023 0301 	bic.w	r3, r3, #1
 8005468:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800546a:	f7fe fa83 	bl	8003974 <HAL_GetTick>
 800546e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005470:	e008      	b.n	8005484 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005472:	f7fe fa7f 	bl	8003974 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	2b02      	cmp	r3, #2
 800547e:	d901      	bls.n	8005484 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e2dd      	b.n	8005a40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005484:	4b20      	ldr	r3, [pc, #128]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1f0      	bne.n	8005472 <HAL_RCC_OscConfig+0x1da>
 8005490:	e000      	b.n	8005494 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005492:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b00      	cmp	r3, #0
 800549e:	d074      	beq.n	800558a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	2b08      	cmp	r3, #8
 80054a4:	d005      	beq.n	80054b2 <HAL_RCC_OscConfig+0x21a>
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	2b0c      	cmp	r3, #12
 80054aa:	d10e      	bne.n	80054ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	2b03      	cmp	r3, #3
 80054b0:	d10b      	bne.n	80054ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054b2:	4b15      	ldr	r3, [pc, #84]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d064      	beq.n	8005588 <HAL_RCC_OscConfig+0x2f0>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d160      	bne.n	8005588 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e2ba      	b.n	8005a40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054d2:	d106      	bne.n	80054e2 <HAL_RCC_OscConfig+0x24a>
 80054d4:	4b0c      	ldr	r3, [pc, #48]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a0b      	ldr	r2, [pc, #44]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 80054da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054de:	6013      	str	r3, [r2, #0]
 80054e0:	e026      	b.n	8005530 <HAL_RCC_OscConfig+0x298>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054ea:	d115      	bne.n	8005518 <HAL_RCC_OscConfig+0x280>
 80054ec:	4b06      	ldr	r3, [pc, #24]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a05      	ldr	r2, [pc, #20]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 80054f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054f6:	6013      	str	r3, [r2, #0]
 80054f8:	4b03      	ldr	r3, [pc, #12]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a02      	ldr	r2, [pc, #8]	; (8005508 <HAL_RCC_OscConfig+0x270>)
 80054fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005502:	6013      	str	r3, [r2, #0]
 8005504:	e014      	b.n	8005530 <HAL_RCC_OscConfig+0x298>
 8005506:	bf00      	nop
 8005508:	40021000 	.word	0x40021000
 800550c:	08014af0 	.word	0x08014af0
 8005510:	20000000 	.word	0x20000000
 8005514:	20000004 	.word	0x20000004
 8005518:	4ba0      	ldr	r3, [pc, #640]	; (800579c <HAL_RCC_OscConfig+0x504>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a9f      	ldr	r2, [pc, #636]	; (800579c <HAL_RCC_OscConfig+0x504>)
 800551e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005522:	6013      	str	r3, [r2, #0]
 8005524:	4b9d      	ldr	r3, [pc, #628]	; (800579c <HAL_RCC_OscConfig+0x504>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a9c      	ldr	r2, [pc, #624]	; (800579c <HAL_RCC_OscConfig+0x504>)
 800552a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800552e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d013      	beq.n	8005560 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005538:	f7fe fa1c 	bl	8003974 <HAL_GetTick>
 800553c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800553e:	e008      	b.n	8005552 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005540:	f7fe fa18 	bl	8003974 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b64      	cmp	r3, #100	; 0x64
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e276      	b.n	8005a40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005552:	4b92      	ldr	r3, [pc, #584]	; (800579c <HAL_RCC_OscConfig+0x504>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d0f0      	beq.n	8005540 <HAL_RCC_OscConfig+0x2a8>
 800555e:	e014      	b.n	800558a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005560:	f7fe fa08 	bl	8003974 <HAL_GetTick>
 8005564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005566:	e008      	b.n	800557a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005568:	f7fe fa04 	bl	8003974 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	2b64      	cmp	r3, #100	; 0x64
 8005574:	d901      	bls.n	800557a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e262      	b.n	8005a40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800557a:	4b88      	ldr	r3, [pc, #544]	; (800579c <HAL_RCC_OscConfig+0x504>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1f0      	bne.n	8005568 <HAL_RCC_OscConfig+0x2d0>
 8005586:	e000      	b.n	800558a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d060      	beq.n	8005658 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	2b04      	cmp	r3, #4
 800559a:	d005      	beq.n	80055a8 <HAL_RCC_OscConfig+0x310>
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	2b0c      	cmp	r3, #12
 80055a0:	d119      	bne.n	80055d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d116      	bne.n	80055d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055a8:	4b7c      	ldr	r3, [pc, #496]	; (800579c <HAL_RCC_OscConfig+0x504>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d005      	beq.n	80055c0 <HAL_RCC_OscConfig+0x328>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d101      	bne.n	80055c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e23f      	b.n	8005a40 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055c0:	4b76      	ldr	r3, [pc, #472]	; (800579c <HAL_RCC_OscConfig+0x504>)
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	061b      	lsls	r3, r3, #24
 80055ce:	4973      	ldr	r1, [pc, #460]	; (800579c <HAL_RCC_OscConfig+0x504>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055d4:	e040      	b.n	8005658 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d023      	beq.n	8005626 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055de:	4b6f      	ldr	r3, [pc, #444]	; (800579c <HAL_RCC_OscConfig+0x504>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a6e      	ldr	r2, [pc, #440]	; (800579c <HAL_RCC_OscConfig+0x504>)
 80055e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ea:	f7fe f9c3 	bl	8003974 <HAL_GetTick>
 80055ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055f0:	e008      	b.n	8005604 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055f2:	f7fe f9bf 	bl	8003974 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d901      	bls.n	8005604 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e21d      	b.n	8005a40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005604:	4b65      	ldr	r3, [pc, #404]	; (800579c <HAL_RCC_OscConfig+0x504>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800560c:	2b00      	cmp	r3, #0
 800560e:	d0f0      	beq.n	80055f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005610:	4b62      	ldr	r3, [pc, #392]	; (800579c <HAL_RCC_OscConfig+0x504>)
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	061b      	lsls	r3, r3, #24
 800561e:	495f      	ldr	r1, [pc, #380]	; (800579c <HAL_RCC_OscConfig+0x504>)
 8005620:	4313      	orrs	r3, r2
 8005622:	604b      	str	r3, [r1, #4]
 8005624:	e018      	b.n	8005658 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005626:	4b5d      	ldr	r3, [pc, #372]	; (800579c <HAL_RCC_OscConfig+0x504>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a5c      	ldr	r2, [pc, #368]	; (800579c <HAL_RCC_OscConfig+0x504>)
 800562c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005632:	f7fe f99f 	bl	8003974 <HAL_GetTick>
 8005636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005638:	e008      	b.n	800564c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800563a:	f7fe f99b 	bl	8003974 <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	2b02      	cmp	r3, #2
 8005646:	d901      	bls.n	800564c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e1f9      	b.n	8005a40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800564c:	4b53      	ldr	r3, [pc, #332]	; (800579c <HAL_RCC_OscConfig+0x504>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1f0      	bne.n	800563a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0308 	and.w	r3, r3, #8
 8005660:	2b00      	cmp	r3, #0
 8005662:	d03c      	beq.n	80056de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d01c      	beq.n	80056a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800566c:	4b4b      	ldr	r3, [pc, #300]	; (800579c <HAL_RCC_OscConfig+0x504>)
 800566e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005672:	4a4a      	ldr	r2, [pc, #296]	; (800579c <HAL_RCC_OscConfig+0x504>)
 8005674:	f043 0301 	orr.w	r3, r3, #1
 8005678:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800567c:	f7fe f97a 	bl	8003974 <HAL_GetTick>
 8005680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005682:	e008      	b.n	8005696 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005684:	f7fe f976 	bl	8003974 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b02      	cmp	r3, #2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e1d4      	b.n	8005a40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005696:	4b41      	ldr	r3, [pc, #260]	; (800579c <HAL_RCC_OscConfig+0x504>)
 8005698:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0ef      	beq.n	8005684 <HAL_RCC_OscConfig+0x3ec>
 80056a4:	e01b      	b.n	80056de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056a6:	4b3d      	ldr	r3, [pc, #244]	; (800579c <HAL_RCC_OscConfig+0x504>)
 80056a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056ac:	4a3b      	ldr	r2, [pc, #236]	; (800579c <HAL_RCC_OscConfig+0x504>)
 80056ae:	f023 0301 	bic.w	r3, r3, #1
 80056b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b6:	f7fe f95d 	bl	8003974 <HAL_GetTick>
 80056ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80056bc:	e008      	b.n	80056d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056be:	f7fe f959 	bl	8003974 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d901      	bls.n	80056d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e1b7      	b.n	8005a40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80056d0:	4b32      	ldr	r3, [pc, #200]	; (800579c <HAL_RCC_OscConfig+0x504>)
 80056d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1ef      	bne.n	80056be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0304 	and.w	r3, r3, #4
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f000 80a6 	beq.w	8005838 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056ec:	2300      	movs	r3, #0
 80056ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80056f0:	4b2a      	ldr	r3, [pc, #168]	; (800579c <HAL_RCC_OscConfig+0x504>)
 80056f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10d      	bne.n	8005718 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056fc:	4b27      	ldr	r3, [pc, #156]	; (800579c <HAL_RCC_OscConfig+0x504>)
 80056fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005700:	4a26      	ldr	r2, [pc, #152]	; (800579c <HAL_RCC_OscConfig+0x504>)
 8005702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005706:	6593      	str	r3, [r2, #88]	; 0x58
 8005708:	4b24      	ldr	r3, [pc, #144]	; (800579c <HAL_RCC_OscConfig+0x504>)
 800570a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800570c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005710:	60bb      	str	r3, [r7, #8]
 8005712:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005714:	2301      	movs	r3, #1
 8005716:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005718:	4b21      	ldr	r3, [pc, #132]	; (80057a0 <HAL_RCC_OscConfig+0x508>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005720:	2b00      	cmp	r3, #0
 8005722:	d118      	bne.n	8005756 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005724:	4b1e      	ldr	r3, [pc, #120]	; (80057a0 <HAL_RCC_OscConfig+0x508>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a1d      	ldr	r2, [pc, #116]	; (80057a0 <HAL_RCC_OscConfig+0x508>)
 800572a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800572e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005730:	f7fe f920 	bl	8003974 <HAL_GetTick>
 8005734:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005736:	e008      	b.n	800574a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005738:	f7fe f91c 	bl	8003974 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	2b02      	cmp	r3, #2
 8005744:	d901      	bls.n	800574a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e17a      	b.n	8005a40 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800574a:	4b15      	ldr	r3, [pc, #84]	; (80057a0 <HAL_RCC_OscConfig+0x508>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005752:	2b00      	cmp	r3, #0
 8005754:	d0f0      	beq.n	8005738 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d108      	bne.n	8005770 <HAL_RCC_OscConfig+0x4d8>
 800575e:	4b0f      	ldr	r3, [pc, #60]	; (800579c <HAL_RCC_OscConfig+0x504>)
 8005760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005764:	4a0d      	ldr	r2, [pc, #52]	; (800579c <HAL_RCC_OscConfig+0x504>)
 8005766:	f043 0301 	orr.w	r3, r3, #1
 800576a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800576e:	e029      	b.n	80057c4 <HAL_RCC_OscConfig+0x52c>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	2b05      	cmp	r3, #5
 8005776:	d115      	bne.n	80057a4 <HAL_RCC_OscConfig+0x50c>
 8005778:	4b08      	ldr	r3, [pc, #32]	; (800579c <HAL_RCC_OscConfig+0x504>)
 800577a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800577e:	4a07      	ldr	r2, [pc, #28]	; (800579c <HAL_RCC_OscConfig+0x504>)
 8005780:	f043 0304 	orr.w	r3, r3, #4
 8005784:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005788:	4b04      	ldr	r3, [pc, #16]	; (800579c <HAL_RCC_OscConfig+0x504>)
 800578a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578e:	4a03      	ldr	r2, [pc, #12]	; (800579c <HAL_RCC_OscConfig+0x504>)
 8005790:	f043 0301 	orr.w	r3, r3, #1
 8005794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005798:	e014      	b.n	80057c4 <HAL_RCC_OscConfig+0x52c>
 800579a:	bf00      	nop
 800579c:	40021000 	.word	0x40021000
 80057a0:	40007000 	.word	0x40007000
 80057a4:	4b9c      	ldr	r3, [pc, #624]	; (8005a18 <HAL_RCC_OscConfig+0x780>)
 80057a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057aa:	4a9b      	ldr	r2, [pc, #620]	; (8005a18 <HAL_RCC_OscConfig+0x780>)
 80057ac:	f023 0301 	bic.w	r3, r3, #1
 80057b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057b4:	4b98      	ldr	r3, [pc, #608]	; (8005a18 <HAL_RCC_OscConfig+0x780>)
 80057b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ba:	4a97      	ldr	r2, [pc, #604]	; (8005a18 <HAL_RCC_OscConfig+0x780>)
 80057bc:	f023 0304 	bic.w	r3, r3, #4
 80057c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d016      	beq.n	80057fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057cc:	f7fe f8d2 	bl	8003974 <HAL_GetTick>
 80057d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057d2:	e00a      	b.n	80057ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057d4:	f7fe f8ce 	bl	8003974 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	f241 3288 	movw	r2, #5000	; 0x1388
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d901      	bls.n	80057ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e12a      	b.n	8005a40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057ea:	4b8b      	ldr	r3, [pc, #556]	; (8005a18 <HAL_RCC_OscConfig+0x780>)
 80057ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f0:	f003 0302 	and.w	r3, r3, #2
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d0ed      	beq.n	80057d4 <HAL_RCC_OscConfig+0x53c>
 80057f8:	e015      	b.n	8005826 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057fa:	f7fe f8bb 	bl	8003974 <HAL_GetTick>
 80057fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005800:	e00a      	b.n	8005818 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005802:	f7fe f8b7 	bl	8003974 <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005810:	4293      	cmp	r3, r2
 8005812:	d901      	bls.n	8005818 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e113      	b.n	8005a40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005818:	4b7f      	ldr	r3, [pc, #508]	; (8005a18 <HAL_RCC_OscConfig+0x780>)
 800581a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1ed      	bne.n	8005802 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005826:	7ffb      	ldrb	r3, [r7, #31]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d105      	bne.n	8005838 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800582c:	4b7a      	ldr	r3, [pc, #488]	; (8005a18 <HAL_RCC_OscConfig+0x780>)
 800582e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005830:	4a79      	ldr	r2, [pc, #484]	; (8005a18 <HAL_RCC_OscConfig+0x780>)
 8005832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005836:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583c:	2b00      	cmp	r3, #0
 800583e:	f000 80fe 	beq.w	8005a3e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005846:	2b02      	cmp	r3, #2
 8005848:	f040 80d0 	bne.w	80059ec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800584c:	4b72      	ldr	r3, [pc, #456]	; (8005a18 <HAL_RCC_OscConfig+0x780>)
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f003 0203 	and.w	r2, r3, #3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585c:	429a      	cmp	r2, r3
 800585e:	d130      	bne.n	80058c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586a:	3b01      	subs	r3, #1
 800586c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800586e:	429a      	cmp	r2, r3
 8005870:	d127      	bne.n	80058c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800587c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800587e:	429a      	cmp	r2, r3
 8005880:	d11f      	bne.n	80058c2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800588c:	2a07      	cmp	r2, #7
 800588e:	bf14      	ite	ne
 8005890:	2201      	movne	r2, #1
 8005892:	2200      	moveq	r2, #0
 8005894:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005896:	4293      	cmp	r3, r2
 8005898:	d113      	bne.n	80058c2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a4:	085b      	lsrs	r3, r3, #1
 80058a6:	3b01      	subs	r3, #1
 80058a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d109      	bne.n	80058c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b8:	085b      	lsrs	r3, r3, #1
 80058ba:	3b01      	subs	r3, #1
 80058bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058be:	429a      	cmp	r2, r3
 80058c0:	d06e      	beq.n	80059a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	2b0c      	cmp	r3, #12
 80058c6:	d069      	beq.n	800599c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80058c8:	4b53      	ldr	r3, [pc, #332]	; (8005a18 <HAL_RCC_OscConfig+0x780>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d105      	bne.n	80058e0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80058d4:	4b50      	ldr	r3, [pc, #320]	; (8005a18 <HAL_RCC_OscConfig+0x780>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d001      	beq.n	80058e4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e0ad      	b.n	8005a40 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80058e4:	4b4c      	ldr	r3, [pc, #304]	; (8005a18 <HAL_RCC_OscConfig+0x780>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a4b      	ldr	r2, [pc, #300]	; (8005a18 <HAL_RCC_OscConfig+0x780>)
 80058ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80058f0:	f7fe f840 	bl	8003974 <HAL_GetTick>
 80058f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058f6:	e008      	b.n	800590a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058f8:	f7fe f83c 	bl	8003974 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b02      	cmp	r3, #2
 8005904:	d901      	bls.n	800590a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e09a      	b.n	8005a40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800590a:	4b43      	ldr	r3, [pc, #268]	; (8005a18 <HAL_RCC_OscConfig+0x780>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1f0      	bne.n	80058f8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005916:	4b40      	ldr	r3, [pc, #256]	; (8005a18 <HAL_RCC_OscConfig+0x780>)
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	4b40      	ldr	r3, [pc, #256]	; (8005a1c <HAL_RCC_OscConfig+0x784>)
 800591c:	4013      	ands	r3, r2
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005926:	3a01      	subs	r2, #1
 8005928:	0112      	lsls	r2, r2, #4
 800592a:	4311      	orrs	r1, r2
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005930:	0212      	lsls	r2, r2, #8
 8005932:	4311      	orrs	r1, r2
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005938:	0852      	lsrs	r2, r2, #1
 800593a:	3a01      	subs	r2, #1
 800593c:	0552      	lsls	r2, r2, #21
 800593e:	4311      	orrs	r1, r2
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005944:	0852      	lsrs	r2, r2, #1
 8005946:	3a01      	subs	r2, #1
 8005948:	0652      	lsls	r2, r2, #25
 800594a:	4311      	orrs	r1, r2
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005950:	0912      	lsrs	r2, r2, #4
 8005952:	0452      	lsls	r2, r2, #17
 8005954:	430a      	orrs	r2, r1
 8005956:	4930      	ldr	r1, [pc, #192]	; (8005a18 <HAL_RCC_OscConfig+0x780>)
 8005958:	4313      	orrs	r3, r2
 800595a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800595c:	4b2e      	ldr	r3, [pc, #184]	; (8005a18 <HAL_RCC_OscConfig+0x780>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a2d      	ldr	r2, [pc, #180]	; (8005a18 <HAL_RCC_OscConfig+0x780>)
 8005962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005966:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005968:	4b2b      	ldr	r3, [pc, #172]	; (8005a18 <HAL_RCC_OscConfig+0x780>)
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	4a2a      	ldr	r2, [pc, #168]	; (8005a18 <HAL_RCC_OscConfig+0x780>)
 800596e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005972:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005974:	f7fd fffe 	bl	8003974 <HAL_GetTick>
 8005978:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800597a:	e008      	b.n	800598e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800597c:	f7fd fffa 	bl	8003974 <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	2b02      	cmp	r3, #2
 8005988:	d901      	bls.n	800598e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e058      	b.n	8005a40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800598e:	4b22      	ldr	r3, [pc, #136]	; (8005a18 <HAL_RCC_OscConfig+0x780>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d0f0      	beq.n	800597c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800599a:	e050      	b.n	8005a3e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e04f      	b.n	8005a40 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059a0:	4b1d      	ldr	r3, [pc, #116]	; (8005a18 <HAL_RCC_OscConfig+0x780>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d148      	bne.n	8005a3e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80059ac:	4b1a      	ldr	r3, [pc, #104]	; (8005a18 <HAL_RCC_OscConfig+0x780>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a19      	ldr	r2, [pc, #100]	; (8005a18 <HAL_RCC_OscConfig+0x780>)
 80059b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80059b8:	4b17      	ldr	r3, [pc, #92]	; (8005a18 <HAL_RCC_OscConfig+0x780>)
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	4a16      	ldr	r2, [pc, #88]	; (8005a18 <HAL_RCC_OscConfig+0x780>)
 80059be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80059c4:	f7fd ffd6 	bl	8003974 <HAL_GetTick>
 80059c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059ca:	e008      	b.n	80059de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059cc:	f7fd ffd2 	bl	8003974 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d901      	bls.n	80059de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e030      	b.n	8005a40 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059de:	4b0e      	ldr	r3, [pc, #56]	; (8005a18 <HAL_RCC_OscConfig+0x780>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d0f0      	beq.n	80059cc <HAL_RCC_OscConfig+0x734>
 80059ea:	e028      	b.n	8005a3e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	2b0c      	cmp	r3, #12
 80059f0:	d023      	beq.n	8005a3a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059f2:	4b09      	ldr	r3, [pc, #36]	; (8005a18 <HAL_RCC_OscConfig+0x780>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a08      	ldr	r2, [pc, #32]	; (8005a18 <HAL_RCC_OscConfig+0x780>)
 80059f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059fe:	f7fd ffb9 	bl	8003974 <HAL_GetTick>
 8005a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a04:	e00c      	b.n	8005a20 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a06:	f7fd ffb5 	bl	8003974 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d905      	bls.n	8005a20 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e013      	b.n	8005a40 <HAL_RCC_OscConfig+0x7a8>
 8005a18:	40021000 	.word	0x40021000
 8005a1c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a20:	4b09      	ldr	r3, [pc, #36]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1ec      	bne.n	8005a06 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005a2c:	4b06      	ldr	r3, [pc, #24]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 8005a2e:	68da      	ldr	r2, [r3, #12]
 8005a30:	4905      	ldr	r1, [pc, #20]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 8005a32:	4b06      	ldr	r3, [pc, #24]	; (8005a4c <HAL_RCC_OscConfig+0x7b4>)
 8005a34:	4013      	ands	r3, r2
 8005a36:	60cb      	str	r3, [r1, #12]
 8005a38:	e001      	b.n	8005a3e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e000      	b.n	8005a40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3720      	adds	r7, #32
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	40021000 	.word	0x40021000
 8005a4c:	feeefffc 	.word	0xfeeefffc

08005a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e0e7      	b.n	8005c34 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a64:	4b75      	ldr	r3, [pc, #468]	; (8005c3c <HAL_RCC_ClockConfig+0x1ec>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0307 	and.w	r3, r3, #7
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d910      	bls.n	8005a94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a72:	4b72      	ldr	r3, [pc, #456]	; (8005c3c <HAL_RCC_ClockConfig+0x1ec>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f023 0207 	bic.w	r2, r3, #7
 8005a7a:	4970      	ldr	r1, [pc, #448]	; (8005c3c <HAL_RCC_ClockConfig+0x1ec>)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a82:	4b6e      	ldr	r3, [pc, #440]	; (8005c3c <HAL_RCC_ClockConfig+0x1ec>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0307 	and.w	r3, r3, #7
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d001      	beq.n	8005a94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e0cf      	b.n	8005c34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d010      	beq.n	8005ac2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689a      	ldr	r2, [r3, #8]
 8005aa4:	4b66      	ldr	r3, [pc, #408]	; (8005c40 <HAL_RCC_ClockConfig+0x1f0>)
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d908      	bls.n	8005ac2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ab0:	4b63      	ldr	r3, [pc, #396]	; (8005c40 <HAL_RCC_ClockConfig+0x1f0>)
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	4960      	ldr	r1, [pc, #384]	; (8005c40 <HAL_RCC_ClockConfig+0x1f0>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d04c      	beq.n	8005b68 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	2b03      	cmp	r3, #3
 8005ad4:	d107      	bne.n	8005ae6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ad6:	4b5a      	ldr	r3, [pc, #360]	; (8005c40 <HAL_RCC_ClockConfig+0x1f0>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d121      	bne.n	8005b26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e0a6      	b.n	8005c34 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d107      	bne.n	8005afe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005aee:	4b54      	ldr	r3, [pc, #336]	; (8005c40 <HAL_RCC_ClockConfig+0x1f0>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d115      	bne.n	8005b26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e09a      	b.n	8005c34 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d107      	bne.n	8005b16 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b06:	4b4e      	ldr	r3, [pc, #312]	; (8005c40 <HAL_RCC_ClockConfig+0x1f0>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d109      	bne.n	8005b26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e08e      	b.n	8005c34 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b16:	4b4a      	ldr	r3, [pc, #296]	; (8005c40 <HAL_RCC_ClockConfig+0x1f0>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e086      	b.n	8005c34 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b26:	4b46      	ldr	r3, [pc, #280]	; (8005c40 <HAL_RCC_ClockConfig+0x1f0>)
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f023 0203 	bic.w	r2, r3, #3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	4943      	ldr	r1, [pc, #268]	; (8005c40 <HAL_RCC_ClockConfig+0x1f0>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b38:	f7fd ff1c 	bl	8003974 <HAL_GetTick>
 8005b3c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b3e:	e00a      	b.n	8005b56 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b40:	f7fd ff18 	bl	8003974 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e06e      	b.n	8005c34 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b56:	4b3a      	ldr	r3, [pc, #232]	; (8005c40 <HAL_RCC_ClockConfig+0x1f0>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f003 020c 	and.w	r2, r3, #12
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d1eb      	bne.n	8005b40 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0302 	and.w	r3, r3, #2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d010      	beq.n	8005b96 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689a      	ldr	r2, [r3, #8]
 8005b78:	4b31      	ldr	r3, [pc, #196]	; (8005c40 <HAL_RCC_ClockConfig+0x1f0>)
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d208      	bcs.n	8005b96 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b84:	4b2e      	ldr	r3, [pc, #184]	; (8005c40 <HAL_RCC_ClockConfig+0x1f0>)
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	492b      	ldr	r1, [pc, #172]	; (8005c40 <HAL_RCC_ClockConfig+0x1f0>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b96:	4b29      	ldr	r3, [pc, #164]	; (8005c3c <HAL_RCC_ClockConfig+0x1ec>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0307 	and.w	r3, r3, #7
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d210      	bcs.n	8005bc6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ba4:	4b25      	ldr	r3, [pc, #148]	; (8005c3c <HAL_RCC_ClockConfig+0x1ec>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f023 0207 	bic.w	r2, r3, #7
 8005bac:	4923      	ldr	r1, [pc, #140]	; (8005c3c <HAL_RCC_ClockConfig+0x1ec>)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bb4:	4b21      	ldr	r3, [pc, #132]	; (8005c3c <HAL_RCC_ClockConfig+0x1ec>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0307 	and.w	r3, r3, #7
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d001      	beq.n	8005bc6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e036      	b.n	8005c34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0304 	and.w	r3, r3, #4
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d008      	beq.n	8005be4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bd2:	4b1b      	ldr	r3, [pc, #108]	; (8005c40 <HAL_RCC_ClockConfig+0x1f0>)
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	4918      	ldr	r1, [pc, #96]	; (8005c40 <HAL_RCC_ClockConfig+0x1f0>)
 8005be0:	4313      	orrs	r3, r2
 8005be2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0308 	and.w	r3, r3, #8
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d009      	beq.n	8005c04 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bf0:	4b13      	ldr	r3, [pc, #76]	; (8005c40 <HAL_RCC_ClockConfig+0x1f0>)
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	00db      	lsls	r3, r3, #3
 8005bfe:	4910      	ldr	r1, [pc, #64]	; (8005c40 <HAL_RCC_ClockConfig+0x1f0>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c04:	f000 f824 	bl	8005c50 <HAL_RCC_GetSysClockFreq>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	4b0d      	ldr	r3, [pc, #52]	; (8005c40 <HAL_RCC_ClockConfig+0x1f0>)
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	091b      	lsrs	r3, r3, #4
 8005c10:	f003 030f 	and.w	r3, r3, #15
 8005c14:	490b      	ldr	r1, [pc, #44]	; (8005c44 <HAL_RCC_ClockConfig+0x1f4>)
 8005c16:	5ccb      	ldrb	r3, [r1, r3]
 8005c18:	f003 031f 	and.w	r3, r3, #31
 8005c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c20:	4a09      	ldr	r2, [pc, #36]	; (8005c48 <HAL_RCC_ClockConfig+0x1f8>)
 8005c22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005c24:	4b09      	ldr	r3, [pc, #36]	; (8005c4c <HAL_RCC_ClockConfig+0x1fc>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7fd fcbb 	bl	80035a4 <HAL_InitTick>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	72fb      	strb	r3, [r7, #11]

  return status;
 8005c32:	7afb      	ldrb	r3, [r7, #11]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	40022000 	.word	0x40022000
 8005c40:	40021000 	.word	0x40021000
 8005c44:	08014af0 	.word	0x08014af0
 8005c48:	20000000 	.word	0x20000000
 8005c4c:	20000004 	.word	0x20000004

08005c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b089      	sub	sp, #36	; 0x24
 8005c54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005c56:	2300      	movs	r3, #0
 8005c58:	61fb      	str	r3, [r7, #28]
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c5e:	4b3e      	ldr	r3, [pc, #248]	; (8005d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f003 030c 	and.w	r3, r3, #12
 8005c66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c68:	4b3b      	ldr	r3, [pc, #236]	; (8005d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	f003 0303 	and.w	r3, r3, #3
 8005c70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d005      	beq.n	8005c84 <HAL_RCC_GetSysClockFreq+0x34>
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	2b0c      	cmp	r3, #12
 8005c7c:	d121      	bne.n	8005cc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d11e      	bne.n	8005cc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005c84:	4b34      	ldr	r3, [pc, #208]	; (8005d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0308 	and.w	r3, r3, #8
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d107      	bne.n	8005ca0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005c90:	4b31      	ldr	r3, [pc, #196]	; (8005d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c96:	0a1b      	lsrs	r3, r3, #8
 8005c98:	f003 030f 	and.w	r3, r3, #15
 8005c9c:	61fb      	str	r3, [r7, #28]
 8005c9e:	e005      	b.n	8005cac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ca0:	4b2d      	ldr	r3, [pc, #180]	; (8005d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	091b      	lsrs	r3, r3, #4
 8005ca6:	f003 030f 	and.w	r3, r3, #15
 8005caa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005cac:	4a2b      	ldr	r2, [pc, #172]	; (8005d5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cb4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10d      	bne.n	8005cd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005cc0:	e00a      	b.n	8005cd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	2b04      	cmp	r3, #4
 8005cc6:	d102      	bne.n	8005cce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005cc8:	4b25      	ldr	r3, [pc, #148]	; (8005d60 <HAL_RCC_GetSysClockFreq+0x110>)
 8005cca:	61bb      	str	r3, [r7, #24]
 8005ccc:	e004      	b.n	8005cd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	2b08      	cmp	r3, #8
 8005cd2:	d101      	bne.n	8005cd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005cd4:	4b23      	ldr	r3, [pc, #140]	; (8005d64 <HAL_RCC_GetSysClockFreq+0x114>)
 8005cd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	2b0c      	cmp	r3, #12
 8005cdc:	d134      	bne.n	8005d48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005cde:	4b1e      	ldr	r3, [pc, #120]	; (8005d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	f003 0303 	and.w	r3, r3, #3
 8005ce6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d003      	beq.n	8005cf6 <HAL_RCC_GetSysClockFreq+0xa6>
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	2b03      	cmp	r3, #3
 8005cf2:	d003      	beq.n	8005cfc <HAL_RCC_GetSysClockFreq+0xac>
 8005cf4:	e005      	b.n	8005d02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005cf6:	4b1a      	ldr	r3, [pc, #104]	; (8005d60 <HAL_RCC_GetSysClockFreq+0x110>)
 8005cf8:	617b      	str	r3, [r7, #20]
      break;
 8005cfa:	e005      	b.n	8005d08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005cfc:	4b19      	ldr	r3, [pc, #100]	; (8005d64 <HAL_RCC_GetSysClockFreq+0x114>)
 8005cfe:	617b      	str	r3, [r7, #20]
      break;
 8005d00:	e002      	b.n	8005d08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	617b      	str	r3, [r7, #20]
      break;
 8005d06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d08:	4b13      	ldr	r3, [pc, #76]	; (8005d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	091b      	lsrs	r3, r3, #4
 8005d0e:	f003 0307 	and.w	r3, r3, #7
 8005d12:	3301      	adds	r3, #1
 8005d14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005d16:	4b10      	ldr	r3, [pc, #64]	; (8005d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	0a1b      	lsrs	r3, r3, #8
 8005d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	fb03 f202 	mul.w	r2, r3, r2
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d2e:	4b0a      	ldr	r3, [pc, #40]	; (8005d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	0e5b      	lsrs	r3, r3, #25
 8005d34:	f003 0303 	and.w	r3, r3, #3
 8005d38:	3301      	adds	r3, #1
 8005d3a:	005b      	lsls	r3, r3, #1
 8005d3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005d48:	69bb      	ldr	r3, [r7, #24]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3724      	adds	r7, #36	; 0x24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	40021000 	.word	0x40021000
 8005d5c:	08014b08 	.word	0x08014b08
 8005d60:	00f42400 	.word	0x00f42400
 8005d64:	007a1200 	.word	0x007a1200

08005d68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d6c:	4b03      	ldr	r3, [pc, #12]	; (8005d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	20000000 	.word	0x20000000

08005d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005d84:	f7ff fff0 	bl	8005d68 <HAL_RCC_GetHCLKFreq>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	4b06      	ldr	r3, [pc, #24]	; (8005da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	0a1b      	lsrs	r3, r3, #8
 8005d90:	f003 0307 	and.w	r3, r3, #7
 8005d94:	4904      	ldr	r1, [pc, #16]	; (8005da8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d96:	5ccb      	ldrb	r3, [r1, r3]
 8005d98:	f003 031f 	and.w	r3, r3, #31
 8005d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	40021000 	.word	0x40021000
 8005da8:	08014b00 	.word	0x08014b00

08005dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005db0:	f7ff ffda 	bl	8005d68 <HAL_RCC_GetHCLKFreq>
 8005db4:	4602      	mov	r2, r0
 8005db6:	4b06      	ldr	r3, [pc, #24]	; (8005dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	0adb      	lsrs	r3, r3, #11
 8005dbc:	f003 0307 	and.w	r3, r3, #7
 8005dc0:	4904      	ldr	r1, [pc, #16]	; (8005dd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005dc2:	5ccb      	ldrb	r3, [r1, r3]
 8005dc4:	f003 031f 	and.w	r3, r3, #31
 8005dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	40021000 	.word	0x40021000
 8005dd4:	08014b00 	.word	0x08014b00

08005dd8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	220f      	movs	r2, #15
 8005de6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005de8:	4b12      	ldr	r3, [pc, #72]	; (8005e34 <HAL_RCC_GetClockConfig+0x5c>)
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f003 0203 	and.w	r2, r3, #3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005df4:	4b0f      	ldr	r3, [pc, #60]	; (8005e34 <HAL_RCC_GetClockConfig+0x5c>)
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005e00:	4b0c      	ldr	r3, [pc, #48]	; (8005e34 <HAL_RCC_GetClockConfig+0x5c>)
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005e0c:	4b09      	ldr	r3, [pc, #36]	; (8005e34 <HAL_RCC_GetClockConfig+0x5c>)
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	08db      	lsrs	r3, r3, #3
 8005e12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005e1a:	4b07      	ldr	r3, [pc, #28]	; (8005e38 <HAL_RCC_GetClockConfig+0x60>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0207 	and.w	r2, r3, #7
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	601a      	str	r2, [r3, #0]
}
 8005e26:	bf00      	nop
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	40021000 	.word	0x40021000
 8005e38:	40022000 	.word	0x40022000

08005e3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005e44:	2300      	movs	r3, #0
 8005e46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005e48:	4b2a      	ldr	r3, [pc, #168]	; (8005ef4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d003      	beq.n	8005e5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005e54:	f7ff f9bc 	bl	80051d0 <HAL_PWREx_GetVoltageRange>
 8005e58:	6178      	str	r0, [r7, #20]
 8005e5a:	e014      	b.n	8005e86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e5c:	4b25      	ldr	r3, [pc, #148]	; (8005ef4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e60:	4a24      	ldr	r2, [pc, #144]	; (8005ef4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e66:	6593      	str	r3, [r2, #88]	; 0x58
 8005e68:	4b22      	ldr	r3, [pc, #136]	; (8005ef4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005e74:	f7ff f9ac 	bl	80051d0 <HAL_PWREx_GetVoltageRange>
 8005e78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005e7a:	4b1e      	ldr	r3, [pc, #120]	; (8005ef4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e7e:	4a1d      	ldr	r2, [pc, #116]	; (8005ef4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e84:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e8c:	d10b      	bne.n	8005ea6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b80      	cmp	r3, #128	; 0x80
 8005e92:	d919      	bls.n	8005ec8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2ba0      	cmp	r3, #160	; 0xa0
 8005e98:	d902      	bls.n	8005ea0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	613b      	str	r3, [r7, #16]
 8005e9e:	e013      	b.n	8005ec8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	613b      	str	r3, [r7, #16]
 8005ea4:	e010      	b.n	8005ec8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2b80      	cmp	r3, #128	; 0x80
 8005eaa:	d902      	bls.n	8005eb2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005eac:	2303      	movs	r3, #3
 8005eae:	613b      	str	r3, [r7, #16]
 8005eb0:	e00a      	b.n	8005ec8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b80      	cmp	r3, #128	; 0x80
 8005eb6:	d102      	bne.n	8005ebe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005eb8:	2302      	movs	r3, #2
 8005eba:	613b      	str	r3, [r7, #16]
 8005ebc:	e004      	b.n	8005ec8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b70      	cmp	r3, #112	; 0x70
 8005ec2:	d101      	bne.n	8005ec8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005ec8:	4b0b      	ldr	r3, [pc, #44]	; (8005ef8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f023 0207 	bic.w	r2, r3, #7
 8005ed0:	4909      	ldr	r1, [pc, #36]	; (8005ef8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005ed8:	4b07      	ldr	r3, [pc, #28]	; (8005ef8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0307 	and.w	r3, r3, #7
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d001      	beq.n	8005eea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e000      	b.n	8005eec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3718      	adds	r7, #24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	40021000 	.word	0x40021000
 8005ef8:	40022000 	.word	0x40022000

08005efc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f04:	2300      	movs	r3, #0
 8005f06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f08:	2300      	movs	r3, #0
 8005f0a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d041      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f1c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005f20:	d02a      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005f22:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005f26:	d824      	bhi.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005f28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f2c:	d008      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005f2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f32:	d81e      	bhi.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00a      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005f38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f3c:	d010      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005f3e:	e018      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005f40:	4b86      	ldr	r3, [pc, #536]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	4a85      	ldr	r2, [pc, #532]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f4a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f4c:	e015      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	3304      	adds	r3, #4
 8005f52:	2100      	movs	r1, #0
 8005f54:	4618      	mov	r0, r3
 8005f56:	f000 fabb 	bl	80064d0 <RCCEx_PLLSAI1_Config>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f5e:	e00c      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	3320      	adds	r3, #32
 8005f64:	2100      	movs	r1, #0
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 fba6 	bl	80066b8 <RCCEx_PLLSAI2_Config>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f70:	e003      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	74fb      	strb	r3, [r7, #19]
      break;
 8005f76:	e000      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005f78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f7a:	7cfb      	ldrb	r3, [r7, #19]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10b      	bne.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f80:	4b76      	ldr	r3, [pc, #472]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f8e:	4973      	ldr	r1, [pc, #460]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005f96:	e001      	b.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f98:	7cfb      	ldrb	r3, [r7, #19]
 8005f9a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d041      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005fb0:	d02a      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005fb2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005fb6:	d824      	bhi.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005fb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fbc:	d008      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005fbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fc2:	d81e      	bhi.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00a      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005fc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005fcc:	d010      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005fce:	e018      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005fd0:	4b62      	ldr	r3, [pc, #392]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	4a61      	ldr	r2, [pc, #388]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fda:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005fdc:	e015      	b.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	3304      	adds	r3, #4
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f000 fa73 	bl	80064d0 <RCCEx_PLLSAI1_Config>
 8005fea:	4603      	mov	r3, r0
 8005fec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005fee:	e00c      	b.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	3320      	adds	r3, #32
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f000 fb5e 	bl	80066b8 <RCCEx_PLLSAI2_Config>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006000:	e003      	b.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	74fb      	strb	r3, [r7, #19]
      break;
 8006006:	e000      	b.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006008:	bf00      	nop
    }

    if(ret == HAL_OK)
 800600a:	7cfb      	ldrb	r3, [r7, #19]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10b      	bne.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006010:	4b52      	ldr	r3, [pc, #328]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006016:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800601e:	494f      	ldr	r1, [pc, #316]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006020:	4313      	orrs	r3, r2
 8006022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006026:	e001      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006028:	7cfb      	ldrb	r3, [r7, #19]
 800602a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 80a0 	beq.w	800617a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800603a:	2300      	movs	r3, #0
 800603c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800603e:	4b47      	ldr	r3, [pc, #284]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800604a:	2301      	movs	r3, #1
 800604c:	e000      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800604e:	2300      	movs	r3, #0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00d      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006054:	4b41      	ldr	r3, [pc, #260]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006058:	4a40      	ldr	r2, [pc, #256]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800605a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800605e:	6593      	str	r3, [r2, #88]	; 0x58
 8006060:	4b3e      	ldr	r3, [pc, #248]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006068:	60bb      	str	r3, [r7, #8]
 800606a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800606c:	2301      	movs	r3, #1
 800606e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006070:	4b3b      	ldr	r3, [pc, #236]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a3a      	ldr	r2, [pc, #232]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800607a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800607c:	f7fd fc7a 	bl	8003974 <HAL_GetTick>
 8006080:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006082:	e009      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006084:	f7fd fc76 	bl	8003974 <HAL_GetTick>
 8006088:	4602      	mov	r2, r0
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	2b02      	cmp	r3, #2
 8006090:	d902      	bls.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	74fb      	strb	r3, [r7, #19]
        break;
 8006096:	e005      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006098:	4b31      	ldr	r3, [pc, #196]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d0ef      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80060a4:	7cfb      	ldrb	r3, [r7, #19]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d15c      	bne.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80060aa:	4b2c      	ldr	r3, [pc, #176]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d01f      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x200>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d019      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060c8:	4b24      	ldr	r3, [pc, #144]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060d4:	4b21      	ldr	r3, [pc, #132]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060da:	4a20      	ldr	r2, [pc, #128]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060e4:	4b1d      	ldr	r3, [pc, #116]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ea:	4a1c      	ldr	r2, [pc, #112]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060f4:	4a19      	ldr	r2, [pc, #100]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b00      	cmp	r3, #0
 8006104:	d016      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006106:	f7fd fc35 	bl	8003974 <HAL_GetTick>
 800610a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800610c:	e00b      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800610e:	f7fd fc31 	bl	8003974 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	f241 3288 	movw	r2, #5000	; 0x1388
 800611c:	4293      	cmp	r3, r2
 800611e:	d902      	bls.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	74fb      	strb	r3, [r7, #19]
            break;
 8006124:	e006      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006126:	4b0d      	ldr	r3, [pc, #52]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800612c:	f003 0302 	and.w	r3, r3, #2
 8006130:	2b00      	cmp	r3, #0
 8006132:	d0ec      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006134:	7cfb      	ldrb	r3, [r7, #19]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10c      	bne.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800613a:	4b08      	ldr	r3, [pc, #32]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800613c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006140:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800614a:	4904      	ldr	r1, [pc, #16]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800614c:	4313      	orrs	r3, r2
 800614e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006152:	e009      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006154:	7cfb      	ldrb	r3, [r7, #19]
 8006156:	74bb      	strb	r3, [r7, #18]
 8006158:	e006      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800615a:	bf00      	nop
 800615c:	40021000 	.word	0x40021000
 8006160:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006164:	7cfb      	ldrb	r3, [r7, #19]
 8006166:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006168:	7c7b      	ldrb	r3, [r7, #17]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d105      	bne.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800616e:	4b9e      	ldr	r3, [pc, #632]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006172:	4a9d      	ldr	r2, [pc, #628]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006178:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0301 	and.w	r3, r3, #1
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00a      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006186:	4b98      	ldr	r3, [pc, #608]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800618c:	f023 0203 	bic.w	r2, r3, #3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006194:	4994      	ldr	r1, [pc, #592]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006196:	4313      	orrs	r3, r2
 8006198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0302 	and.w	r3, r3, #2
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00a      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061a8:	4b8f      	ldr	r3, [pc, #572]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ae:	f023 020c 	bic.w	r2, r3, #12
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b6:	498c      	ldr	r1, [pc, #560]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061b8:	4313      	orrs	r3, r2
 80061ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0304 	and.w	r3, r3, #4
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00a      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80061ca:	4b87      	ldr	r3, [pc, #540]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d8:	4983      	ldr	r1, [pc, #524]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0308 	and.w	r3, r3, #8
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00a      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80061ec:	4b7e      	ldr	r3, [pc, #504]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061fa:	497b      	ldr	r1, [pc, #492]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0310 	and.w	r3, r3, #16
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00a      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800620e:	4b76      	ldr	r3, [pc, #472]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006214:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800621c:	4972      	ldr	r1, [pc, #456]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800621e:	4313      	orrs	r3, r2
 8006220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0320 	and.w	r3, r3, #32
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00a      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006230:	4b6d      	ldr	r3, [pc, #436]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006236:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800623e:	496a      	ldr	r1, [pc, #424]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006240:	4313      	orrs	r3, r2
 8006242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00a      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006252:	4b65      	ldr	r3, [pc, #404]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006258:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006260:	4961      	ldr	r1, [pc, #388]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006262:	4313      	orrs	r3, r2
 8006264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00a      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006274:	4b5c      	ldr	r3, [pc, #368]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800627a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006282:	4959      	ldr	r1, [pc, #356]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006284:	4313      	orrs	r3, r2
 8006286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00a      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006296:	4b54      	ldr	r3, [pc, #336]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800629c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a4:	4950      	ldr	r1, [pc, #320]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00a      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80062b8:	4b4b      	ldr	r3, [pc, #300]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c6:	4948      	ldr	r1, [pc, #288]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00a      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80062da:	4b43      	ldr	r3, [pc, #268]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062e8:	493f      	ldr	r1, [pc, #252]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d028      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062fc:	4b3a      	ldr	r3, [pc, #232]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006302:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800630a:	4937      	ldr	r1, [pc, #220]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800630c:	4313      	orrs	r3, r2
 800630e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006316:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800631a:	d106      	bne.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800631c:	4b32      	ldr	r3, [pc, #200]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	4a31      	ldr	r2, [pc, #196]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006322:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006326:	60d3      	str	r3, [r2, #12]
 8006328:	e011      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800632e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006332:	d10c      	bne.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	3304      	adds	r3, #4
 8006338:	2101      	movs	r1, #1
 800633a:	4618      	mov	r0, r3
 800633c:	f000 f8c8 	bl	80064d0 <RCCEx_PLLSAI1_Config>
 8006340:	4603      	mov	r3, r0
 8006342:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006344:	7cfb      	ldrb	r3, [r7, #19]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800634a:	7cfb      	ldrb	r3, [r7, #19]
 800634c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d028      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800635a:	4b23      	ldr	r3, [pc, #140]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800635c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006360:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006368:	491f      	ldr	r1, [pc, #124]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800636a:	4313      	orrs	r3, r2
 800636c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006374:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006378:	d106      	bne.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800637a:	4b1b      	ldr	r3, [pc, #108]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	4a1a      	ldr	r2, [pc, #104]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006380:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006384:	60d3      	str	r3, [r2, #12]
 8006386:	e011      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800638c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006390:	d10c      	bne.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	3304      	adds	r3, #4
 8006396:	2101      	movs	r1, #1
 8006398:	4618      	mov	r0, r3
 800639a:	f000 f899 	bl	80064d0 <RCCEx_PLLSAI1_Config>
 800639e:	4603      	mov	r3, r0
 80063a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80063a2:	7cfb      	ldrb	r3, [r7, #19]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d001      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80063a8:	7cfb      	ldrb	r3, [r7, #19]
 80063aa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d02b      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80063b8:	4b0b      	ldr	r3, [pc, #44]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063c6:	4908      	ldr	r1, [pc, #32]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063c8:	4313      	orrs	r3, r2
 80063ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063d6:	d109      	bne.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063d8:	4b03      	ldr	r3, [pc, #12]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	4a02      	ldr	r2, [pc, #8]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063e2:	60d3      	str	r3, [r2, #12]
 80063e4:	e014      	b.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80063e6:	bf00      	nop
 80063e8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063f4:	d10c      	bne.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	3304      	adds	r3, #4
 80063fa:	2101      	movs	r1, #1
 80063fc:	4618      	mov	r0, r3
 80063fe:	f000 f867 	bl	80064d0 <RCCEx_PLLSAI1_Config>
 8006402:	4603      	mov	r3, r0
 8006404:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006406:	7cfb      	ldrb	r3, [r7, #19]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d001      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800640c:	7cfb      	ldrb	r3, [r7, #19]
 800640e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d02f      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800641c:	4b2b      	ldr	r3, [pc, #172]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800641e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006422:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800642a:	4928      	ldr	r1, [pc, #160]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800642c:	4313      	orrs	r3, r2
 800642e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006436:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800643a:	d10d      	bne.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	3304      	adds	r3, #4
 8006440:	2102      	movs	r1, #2
 8006442:	4618      	mov	r0, r3
 8006444:	f000 f844 	bl	80064d0 <RCCEx_PLLSAI1_Config>
 8006448:	4603      	mov	r3, r0
 800644a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800644c:	7cfb      	ldrb	r3, [r7, #19]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d014      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006452:	7cfb      	ldrb	r3, [r7, #19]
 8006454:	74bb      	strb	r3, [r7, #18]
 8006456:	e011      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800645c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006460:	d10c      	bne.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	3320      	adds	r3, #32
 8006466:	2102      	movs	r1, #2
 8006468:	4618      	mov	r0, r3
 800646a:	f000 f925 	bl	80066b8 <RCCEx_PLLSAI2_Config>
 800646e:	4603      	mov	r3, r0
 8006470:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006472:	7cfb      	ldrb	r3, [r7, #19]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006478:	7cfb      	ldrb	r3, [r7, #19]
 800647a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00a      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006488:	4b10      	ldr	r3, [pc, #64]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800648a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800648e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006496:	490d      	ldr	r1, [pc, #52]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006498:	4313      	orrs	r3, r2
 800649a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00b      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80064aa:	4b08      	ldr	r3, [pc, #32]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80064ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064ba:	4904      	ldr	r1, [pc, #16]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80064c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3718      	adds	r7, #24
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	40021000 	.word	0x40021000

080064d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064da:	2300      	movs	r3, #0
 80064dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80064de:	4b75      	ldr	r3, [pc, #468]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	f003 0303 	and.w	r3, r3, #3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d018      	beq.n	800651c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80064ea:	4b72      	ldr	r3, [pc, #456]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	f003 0203 	and.w	r2, r3, #3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d10d      	bne.n	8006516 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
       ||
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d009      	beq.n	8006516 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006502:	4b6c      	ldr	r3, [pc, #432]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	091b      	lsrs	r3, r3, #4
 8006508:	f003 0307 	and.w	r3, r3, #7
 800650c:	1c5a      	adds	r2, r3, #1
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
       ||
 8006512:	429a      	cmp	r2, r3
 8006514:	d047      	beq.n	80065a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	73fb      	strb	r3, [r7, #15]
 800651a:	e044      	b.n	80065a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b03      	cmp	r3, #3
 8006522:	d018      	beq.n	8006556 <RCCEx_PLLSAI1_Config+0x86>
 8006524:	2b03      	cmp	r3, #3
 8006526:	d825      	bhi.n	8006574 <RCCEx_PLLSAI1_Config+0xa4>
 8006528:	2b01      	cmp	r3, #1
 800652a:	d002      	beq.n	8006532 <RCCEx_PLLSAI1_Config+0x62>
 800652c:	2b02      	cmp	r3, #2
 800652e:	d009      	beq.n	8006544 <RCCEx_PLLSAI1_Config+0x74>
 8006530:	e020      	b.n	8006574 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006532:	4b60      	ldr	r3, [pc, #384]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0302 	and.w	r3, r3, #2
 800653a:	2b00      	cmp	r3, #0
 800653c:	d11d      	bne.n	800657a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006542:	e01a      	b.n	800657a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006544:	4b5b      	ldr	r3, [pc, #364]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800654c:	2b00      	cmp	r3, #0
 800654e:	d116      	bne.n	800657e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006554:	e013      	b.n	800657e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006556:	4b57      	ldr	r3, [pc, #348]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10f      	bne.n	8006582 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006562:	4b54      	ldr	r3, [pc, #336]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d109      	bne.n	8006582 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006572:	e006      	b.n	8006582 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	73fb      	strb	r3, [r7, #15]
      break;
 8006578:	e004      	b.n	8006584 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800657a:	bf00      	nop
 800657c:	e002      	b.n	8006584 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800657e:	bf00      	nop
 8006580:	e000      	b.n	8006584 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006582:	bf00      	nop
    }

    if(status == HAL_OK)
 8006584:	7bfb      	ldrb	r3, [r7, #15]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10d      	bne.n	80065a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800658a:	4b4a      	ldr	r3, [pc, #296]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6819      	ldr	r1, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	3b01      	subs	r3, #1
 800659c:	011b      	lsls	r3, r3, #4
 800659e:	430b      	orrs	r3, r1
 80065a0:	4944      	ldr	r1, [pc, #272]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80065a6:	7bfb      	ldrb	r3, [r7, #15]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d17d      	bne.n	80066a8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80065ac:	4b41      	ldr	r3, [pc, #260]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a40      	ldr	r2, [pc, #256]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80065b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065b8:	f7fd f9dc 	bl	8003974 <HAL_GetTick>
 80065bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80065be:	e009      	b.n	80065d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065c0:	f7fd f9d8 	bl	8003974 <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d902      	bls.n	80065d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	73fb      	strb	r3, [r7, #15]
        break;
 80065d2:	e005      	b.n	80065e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80065d4:	4b37      	ldr	r3, [pc, #220]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1ef      	bne.n	80065c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80065e0:	7bfb      	ldrb	r3, [r7, #15]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d160      	bne.n	80066a8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d111      	bne.n	8006610 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80065ec:	4b31      	ldr	r3, [pc, #196]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80065f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	6892      	ldr	r2, [r2, #8]
 80065fc:	0211      	lsls	r1, r2, #8
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	68d2      	ldr	r2, [r2, #12]
 8006602:	0912      	lsrs	r2, r2, #4
 8006604:	0452      	lsls	r2, r2, #17
 8006606:	430a      	orrs	r2, r1
 8006608:	492a      	ldr	r1, [pc, #168]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800660a:	4313      	orrs	r3, r2
 800660c:	610b      	str	r3, [r1, #16]
 800660e:	e027      	b.n	8006660 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d112      	bne.n	800663c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006616:	4b27      	ldr	r3, [pc, #156]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800661e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	6892      	ldr	r2, [r2, #8]
 8006626:	0211      	lsls	r1, r2, #8
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	6912      	ldr	r2, [r2, #16]
 800662c:	0852      	lsrs	r2, r2, #1
 800662e:	3a01      	subs	r2, #1
 8006630:	0552      	lsls	r2, r2, #21
 8006632:	430a      	orrs	r2, r1
 8006634:	491f      	ldr	r1, [pc, #124]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006636:	4313      	orrs	r3, r2
 8006638:	610b      	str	r3, [r1, #16]
 800663a:	e011      	b.n	8006660 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800663c:	4b1d      	ldr	r3, [pc, #116]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006644:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	6892      	ldr	r2, [r2, #8]
 800664c:	0211      	lsls	r1, r2, #8
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	6952      	ldr	r2, [r2, #20]
 8006652:	0852      	lsrs	r2, r2, #1
 8006654:	3a01      	subs	r2, #1
 8006656:	0652      	lsls	r2, r2, #25
 8006658:	430a      	orrs	r2, r1
 800665a:	4916      	ldr	r1, [pc, #88]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800665c:	4313      	orrs	r3, r2
 800665e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006660:	4b14      	ldr	r3, [pc, #80]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a13      	ldr	r2, [pc, #76]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006666:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800666a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800666c:	f7fd f982 	bl	8003974 <HAL_GetTick>
 8006670:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006672:	e009      	b.n	8006688 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006674:	f7fd f97e 	bl	8003974 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	2b02      	cmp	r3, #2
 8006680:	d902      	bls.n	8006688 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	73fb      	strb	r3, [r7, #15]
          break;
 8006686:	e005      	b.n	8006694 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006688:	4b0a      	ldr	r3, [pc, #40]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d0ef      	beq.n	8006674 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006694:	7bfb      	ldrb	r3, [r7, #15]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d106      	bne.n	80066a8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800669a:	4b06      	ldr	r3, [pc, #24]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800669c:	691a      	ldr	r2, [r3, #16]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	4904      	ldr	r1, [pc, #16]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066a4:	4313      	orrs	r3, r2
 80066a6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80066a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	40021000 	.word	0x40021000

080066b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066c2:	2300      	movs	r3, #0
 80066c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80066c6:	4b6a      	ldr	r3, [pc, #424]	; (8006870 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	f003 0303 	and.w	r3, r3, #3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d018      	beq.n	8006704 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80066d2:	4b67      	ldr	r3, [pc, #412]	; (8006870 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	f003 0203 	and.w	r2, r3, #3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d10d      	bne.n	80066fe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
       ||
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d009      	beq.n	80066fe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80066ea:	4b61      	ldr	r3, [pc, #388]	; (8006870 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	091b      	lsrs	r3, r3, #4
 80066f0:	f003 0307 	and.w	r3, r3, #7
 80066f4:	1c5a      	adds	r2, r3, #1
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685b      	ldr	r3, [r3, #4]
       ||
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d047      	beq.n	800678e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	73fb      	strb	r3, [r7, #15]
 8006702:	e044      	b.n	800678e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2b03      	cmp	r3, #3
 800670a:	d018      	beq.n	800673e <RCCEx_PLLSAI2_Config+0x86>
 800670c:	2b03      	cmp	r3, #3
 800670e:	d825      	bhi.n	800675c <RCCEx_PLLSAI2_Config+0xa4>
 8006710:	2b01      	cmp	r3, #1
 8006712:	d002      	beq.n	800671a <RCCEx_PLLSAI2_Config+0x62>
 8006714:	2b02      	cmp	r3, #2
 8006716:	d009      	beq.n	800672c <RCCEx_PLLSAI2_Config+0x74>
 8006718:	e020      	b.n	800675c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800671a:	4b55      	ldr	r3, [pc, #340]	; (8006870 <RCCEx_PLLSAI2_Config+0x1b8>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b00      	cmp	r3, #0
 8006724:	d11d      	bne.n	8006762 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800672a:	e01a      	b.n	8006762 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800672c:	4b50      	ldr	r3, [pc, #320]	; (8006870 <RCCEx_PLLSAI2_Config+0x1b8>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006734:	2b00      	cmp	r3, #0
 8006736:	d116      	bne.n	8006766 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800673c:	e013      	b.n	8006766 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800673e:	4b4c      	ldr	r3, [pc, #304]	; (8006870 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10f      	bne.n	800676a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800674a:	4b49      	ldr	r3, [pc, #292]	; (8006870 <RCCEx_PLLSAI2_Config+0x1b8>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d109      	bne.n	800676a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800675a:	e006      	b.n	800676a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	73fb      	strb	r3, [r7, #15]
      break;
 8006760:	e004      	b.n	800676c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006762:	bf00      	nop
 8006764:	e002      	b.n	800676c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006766:	bf00      	nop
 8006768:	e000      	b.n	800676c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800676a:	bf00      	nop
    }

    if(status == HAL_OK)
 800676c:	7bfb      	ldrb	r3, [r7, #15]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10d      	bne.n	800678e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006772:	4b3f      	ldr	r3, [pc, #252]	; (8006870 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6819      	ldr	r1, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	3b01      	subs	r3, #1
 8006784:	011b      	lsls	r3, r3, #4
 8006786:	430b      	orrs	r3, r1
 8006788:	4939      	ldr	r1, [pc, #228]	; (8006870 <RCCEx_PLLSAI2_Config+0x1b8>)
 800678a:	4313      	orrs	r3, r2
 800678c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800678e:	7bfb      	ldrb	r3, [r7, #15]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d167      	bne.n	8006864 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006794:	4b36      	ldr	r3, [pc, #216]	; (8006870 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a35      	ldr	r2, [pc, #212]	; (8006870 <RCCEx_PLLSAI2_Config+0x1b8>)
 800679a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800679e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067a0:	f7fd f8e8 	bl	8003974 <HAL_GetTick>
 80067a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80067a6:	e009      	b.n	80067bc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80067a8:	f7fd f8e4 	bl	8003974 <HAL_GetTick>
 80067ac:	4602      	mov	r2, r0
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d902      	bls.n	80067bc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	73fb      	strb	r3, [r7, #15]
        break;
 80067ba:	e005      	b.n	80067c8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80067bc:	4b2c      	ldr	r3, [pc, #176]	; (8006870 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1ef      	bne.n	80067a8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80067c8:	7bfb      	ldrb	r3, [r7, #15]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d14a      	bne.n	8006864 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d111      	bne.n	80067f8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80067d4:	4b26      	ldr	r3, [pc, #152]	; (8006870 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80067dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	6892      	ldr	r2, [r2, #8]
 80067e4:	0211      	lsls	r1, r2, #8
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	68d2      	ldr	r2, [r2, #12]
 80067ea:	0912      	lsrs	r2, r2, #4
 80067ec:	0452      	lsls	r2, r2, #17
 80067ee:	430a      	orrs	r2, r1
 80067f0:	491f      	ldr	r1, [pc, #124]	; (8006870 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	614b      	str	r3, [r1, #20]
 80067f6:	e011      	b.n	800681c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80067f8:	4b1d      	ldr	r3, [pc, #116]	; (8006870 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067fa:	695b      	ldr	r3, [r3, #20]
 80067fc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006800:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	6892      	ldr	r2, [r2, #8]
 8006808:	0211      	lsls	r1, r2, #8
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	6912      	ldr	r2, [r2, #16]
 800680e:	0852      	lsrs	r2, r2, #1
 8006810:	3a01      	subs	r2, #1
 8006812:	0652      	lsls	r2, r2, #25
 8006814:	430a      	orrs	r2, r1
 8006816:	4916      	ldr	r1, [pc, #88]	; (8006870 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006818:	4313      	orrs	r3, r2
 800681a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800681c:	4b14      	ldr	r3, [pc, #80]	; (8006870 <RCCEx_PLLSAI2_Config+0x1b8>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a13      	ldr	r2, [pc, #76]	; (8006870 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006826:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006828:	f7fd f8a4 	bl	8003974 <HAL_GetTick>
 800682c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800682e:	e009      	b.n	8006844 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006830:	f7fd f8a0 	bl	8003974 <HAL_GetTick>
 8006834:	4602      	mov	r2, r0
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	2b02      	cmp	r3, #2
 800683c:	d902      	bls.n	8006844 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	73fb      	strb	r3, [r7, #15]
          break;
 8006842:	e005      	b.n	8006850 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006844:	4b0a      	ldr	r3, [pc, #40]	; (8006870 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d0ef      	beq.n	8006830 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006850:	7bfb      	ldrb	r3, [r7, #15]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d106      	bne.n	8006864 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006856:	4b06      	ldr	r3, [pc, #24]	; (8006870 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006858:	695a      	ldr	r2, [r3, #20]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	4904      	ldr	r1, [pc, #16]	; (8006870 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006860:	4313      	orrs	r3, r2
 8006862:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006864:	7bfb      	ldrb	r3, [r7, #15]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	40021000 	.word	0x40021000

08006874 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e095      	b.n	80069b2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688a:	2b00      	cmp	r3, #0
 800688c:	d108      	bne.n	80068a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006896:	d009      	beq.n	80068ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	61da      	str	r2, [r3, #28]
 800689e:	e005      	b.n	80068ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d106      	bne.n	80068cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f7fc fd28 	bl	800331c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2202      	movs	r2, #2
 80068d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068ec:	d902      	bls.n	80068f4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80068ee:	2300      	movs	r3, #0
 80068f0:	60fb      	str	r3, [r7, #12]
 80068f2:	e002      	b.n	80068fa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80068f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068f8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006902:	d007      	beq.n	8006914 <HAL_SPI_Init+0xa0>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800690c:	d002      	beq.n	8006914 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006924:	431a      	orrs	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	f003 0302 	and.w	r3, r3, #2
 800692e:	431a      	orrs	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	695b      	ldr	r3, [r3, #20]
 8006934:	f003 0301 	and.w	r3, r3, #1
 8006938:	431a      	orrs	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006942:	431a      	orrs	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	69db      	ldr	r3, [r3, #28]
 8006948:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800694c:	431a      	orrs	r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006956:	ea42 0103 	orr.w	r1, r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	430a      	orrs	r2, r1
 8006968:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	0c1b      	lsrs	r3, r3, #16
 8006970:	f003 0204 	and.w	r2, r3, #4
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006978:	f003 0310 	and.w	r3, r3, #16
 800697c:	431a      	orrs	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006982:	f003 0308 	and.w	r3, r3, #8
 8006986:	431a      	orrs	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006990:	ea42 0103 	orr.w	r1, r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	430a      	orrs	r2, r1
 80069a0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b08a      	sub	sp, #40	; 0x28
 80069be:	af00      	add	r7, sp, #0
 80069c0:	60f8      	str	r0, [r7, #12]
 80069c2:	60b9      	str	r1, [r7, #8]
 80069c4:	607a      	str	r2, [r7, #4]
 80069c6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80069c8:	2301      	movs	r3, #1
 80069ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80069cc:	2300      	movs	r3, #0
 80069ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d101      	bne.n	80069e0 <HAL_SPI_TransmitReceive+0x26>
 80069dc:	2302      	movs	r3, #2
 80069de:	e1fb      	b.n	8006dd8 <HAL_SPI_TransmitReceive+0x41e>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069e8:	f7fc ffc4 	bl	8003974 <HAL_GetTick>
 80069ec:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80069f4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80069fc:	887b      	ldrh	r3, [r7, #2]
 80069fe:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006a00:	887b      	ldrh	r3, [r7, #2]
 8006a02:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006a04:	7efb      	ldrb	r3, [r7, #27]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d00e      	beq.n	8006a28 <HAL_SPI_TransmitReceive+0x6e>
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a10:	d106      	bne.n	8006a20 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d102      	bne.n	8006a20 <HAL_SPI_TransmitReceive+0x66>
 8006a1a:	7efb      	ldrb	r3, [r7, #27]
 8006a1c:	2b04      	cmp	r3, #4
 8006a1e:	d003      	beq.n	8006a28 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006a20:	2302      	movs	r3, #2
 8006a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006a26:	e1cd      	b.n	8006dc4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d005      	beq.n	8006a3a <HAL_SPI_TransmitReceive+0x80>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d002      	beq.n	8006a3a <HAL_SPI_TransmitReceive+0x80>
 8006a34:	887b      	ldrh	r3, [r7, #2]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d103      	bne.n	8006a42 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006a40:	e1c0      	b.n	8006dc4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b04      	cmp	r3, #4
 8006a4c:	d003      	beq.n	8006a56 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2205      	movs	r2, #5
 8006a52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	887a      	ldrh	r2, [r7, #2]
 8006a66:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	887a      	ldrh	r2, [r7, #2]
 8006a6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	68ba      	ldr	r2, [r7, #8]
 8006a76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	887a      	ldrh	r2, [r7, #2]
 8006a7c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	887a      	ldrh	r2, [r7, #2]
 8006a82:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a98:	d802      	bhi.n	8006aa0 <HAL_SPI_TransmitReceive+0xe6>
 8006a9a:	8a3b      	ldrh	r3, [r7, #16]
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d908      	bls.n	8006ab2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006aae:	605a      	str	r2, [r3, #4]
 8006ab0:	e007      	b.n	8006ac2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	685a      	ldr	r2, [r3, #4]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ac0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006acc:	2b40      	cmp	r3, #64	; 0x40
 8006ace:	d007      	beq.n	8006ae0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ade:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ae8:	d97c      	bls.n	8006be4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d002      	beq.n	8006af8 <HAL_SPI_TransmitReceive+0x13e>
 8006af2:	8a7b      	ldrh	r3, [r7, #18]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d169      	bne.n	8006bcc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afc:	881a      	ldrh	r2, [r3, #0]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b08:	1c9a      	adds	r2, r3, #2
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	3b01      	subs	r3, #1
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b1c:	e056      	b.n	8006bcc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f003 0302 	and.w	r3, r3, #2
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d11b      	bne.n	8006b64 <HAL_SPI_TransmitReceive+0x1aa>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d016      	beq.n	8006b64 <HAL_SPI_TransmitReceive+0x1aa>
 8006b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d113      	bne.n	8006b64 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b40:	881a      	ldrh	r2, [r3, #0]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4c:	1c9a      	adds	r2, r3, #2
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b60:	2300      	movs	r3, #0
 8006b62:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d11c      	bne.n	8006bac <HAL_SPI_TransmitReceive+0x1f2>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d016      	beq.n	8006bac <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68da      	ldr	r2, [r3, #12]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b88:	b292      	uxth	r2, r2
 8006b8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b90:	1c9a      	adds	r2, r3, #2
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006bac:	f7fc fee2 	bl	8003974 <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d807      	bhi.n	8006bcc <HAL_SPI_TransmitReceive+0x212>
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc2:	d003      	beq.n	8006bcc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006bca:	e0fb      	b.n	8006dc4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1a3      	bne.n	8006b1e <HAL_SPI_TransmitReceive+0x164>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d19d      	bne.n	8006b1e <HAL_SPI_TransmitReceive+0x164>
 8006be2:	e0df      	b.n	8006da4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d003      	beq.n	8006bf4 <HAL_SPI_TransmitReceive+0x23a>
 8006bec:	8a7b      	ldrh	r3, [r7, #18]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	f040 80cb 	bne.w	8006d8a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d912      	bls.n	8006c24 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c02:	881a      	ldrh	r2, [r3, #0]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0e:	1c9a      	adds	r2, r3, #2
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	3b02      	subs	r3, #2
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c22:	e0b2      	b.n	8006d8a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	330c      	adds	r3, #12
 8006c2e:	7812      	ldrb	r2, [r2, #0]
 8006c30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c36:	1c5a      	adds	r2, r3, #1
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	3b01      	subs	r3, #1
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c4a:	e09e      	b.n	8006d8a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d134      	bne.n	8006cc4 <HAL_SPI_TransmitReceive+0x30a>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d02f      	beq.n	8006cc4 <HAL_SPI_TransmitReceive+0x30a>
 8006c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d12c      	bne.n	8006cc4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d912      	bls.n	8006c9a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c78:	881a      	ldrh	r2, [r3, #0]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c84:	1c9a      	adds	r2, r3, #2
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	3b02      	subs	r3, #2
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c98:	e012      	b.n	8006cc0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	330c      	adds	r3, #12
 8006ca4:	7812      	ldrb	r2, [r2, #0]
 8006ca6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cac:	1c5a      	adds	r2, r3, #1
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f003 0301 	and.w	r3, r3, #1
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d148      	bne.n	8006d64 <HAL_SPI_TransmitReceive+0x3aa>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d042      	beq.n	8006d64 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d923      	bls.n	8006d32 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68da      	ldr	r2, [r3, #12]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf4:	b292      	uxth	r2, r2
 8006cf6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfc:	1c9a      	adds	r2, r3, #2
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	3b02      	subs	r3, #2
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d81f      	bhi.n	8006d60 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	685a      	ldr	r2, [r3, #4]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d2e:	605a      	str	r2, [r3, #4]
 8006d30:	e016      	b.n	8006d60 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f103 020c 	add.w	r2, r3, #12
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3e:	7812      	ldrb	r2, [r2, #0]
 8006d40:	b2d2      	uxtb	r2, r2
 8006d42:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d48:	1c5a      	adds	r2, r3, #1
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	3b01      	subs	r3, #1
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d60:	2301      	movs	r3, #1
 8006d62:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006d64:	f7fc fe06 	bl	8003974 <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d803      	bhi.n	8006d7c <HAL_SPI_TransmitReceive+0x3c2>
 8006d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7a:	d102      	bne.n	8006d82 <HAL_SPI_TransmitReceive+0x3c8>
 8006d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d103      	bne.n	8006d8a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006d88:	e01c      	b.n	8006dc4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f47f af5b 	bne.w	8006c4c <HAL_SPI_TransmitReceive+0x292>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f47f af54 	bne.w	8006c4c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006da4:	69fa      	ldr	r2, [r7, #28]
 8006da6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f000 fa57 	bl	800725c <SPI_EndRxTxTransaction>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d006      	beq.n	8006dc2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2220      	movs	r2, #32
 8006dbe:	661a      	str	r2, [r3, #96]	; 0x60
 8006dc0:	e000      	b.n	8006dc4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006dc2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006dd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3728      	adds	r7, #40	; 0x28
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b088      	sub	sp, #32
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	099b      	lsrs	r3, r3, #6
 8006dfc:	f003 0301 	and.w	r3, r3, #1
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d10f      	bne.n	8006e24 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00a      	beq.n	8006e24 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	099b      	lsrs	r3, r3, #6
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d004      	beq.n	8006e24 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	4798      	blx	r3
    return;
 8006e22:	e0d7      	b.n	8006fd4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	085b      	lsrs	r3, r3, #1
 8006e28:	f003 0301 	and.w	r3, r3, #1
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00a      	beq.n	8006e46 <HAL_SPI_IRQHandler+0x66>
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	09db      	lsrs	r3, r3, #7
 8006e34:	f003 0301 	and.w	r3, r3, #1
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d004      	beq.n	8006e46 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	4798      	blx	r3
    return;
 8006e44:	e0c6      	b.n	8006fd4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	095b      	lsrs	r3, r3, #5
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d10c      	bne.n	8006e6c <HAL_SPI_IRQHandler+0x8c>
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	099b      	lsrs	r3, r3, #6
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d106      	bne.n	8006e6c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	0a1b      	lsrs	r3, r3, #8
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f000 80b4 	beq.w	8006fd4 <HAL_SPI_IRQHandler+0x1f4>
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	095b      	lsrs	r3, r3, #5
 8006e70:	f003 0301 	and.w	r3, r3, #1
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f000 80ad 	beq.w	8006fd4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	099b      	lsrs	r3, r3, #6
 8006e7e:	f003 0301 	and.w	r3, r3, #1
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d023      	beq.n	8006ece <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b03      	cmp	r3, #3
 8006e90:	d011      	beq.n	8006eb6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e96:	f043 0204 	orr.w	r2, r3, #4
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	617b      	str	r3, [r7, #20]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	617b      	str	r3, [r7, #20]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	617b      	str	r3, [r7, #20]
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	e00b      	b.n	8006ece <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	613b      	str	r3, [r7, #16]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	613b      	str	r3, [r7, #16]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	613b      	str	r3, [r7, #16]
 8006eca:	693b      	ldr	r3, [r7, #16]
        return;
 8006ecc:	e082      	b.n	8006fd4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	095b      	lsrs	r3, r3, #5
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d014      	beq.n	8006f04 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ede:	f043 0201 	orr.w	r2, r3, #1
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	60fb      	str	r3, [r7, #12]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	60fb      	str	r3, [r7, #12]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f00:	601a      	str	r2, [r3, #0]
 8006f02:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	0a1b      	lsrs	r3, r3, #8
 8006f08:	f003 0301 	and.w	r3, r3, #1
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00c      	beq.n	8006f2a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f14:	f043 0208 	orr.w	r2, r3, #8
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	60bb      	str	r3, [r7, #8]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	60bb      	str	r3, [r7, #8]
 8006f28:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d04f      	beq.n	8006fd2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006f40:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	f003 0302 	and.w	r3, r3, #2
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d104      	bne.n	8006f5e <HAL_SPI_IRQHandler+0x17e>
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	f003 0301 	and.w	r3, r3, #1
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d034      	beq.n	8006fc8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685a      	ldr	r2, [r3, #4]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f022 0203 	bic.w	r2, r2, #3
 8006f6c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d011      	beq.n	8006f9a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f7a:	4a18      	ldr	r2, [pc, #96]	; (8006fdc <HAL_SPI_IRQHandler+0x1fc>)
 8006f7c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7fc fe46 	bl	8003c14 <HAL_DMA_Abort_IT>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d005      	beq.n	8006f9a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d016      	beq.n	8006fd0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa6:	4a0d      	ldr	r2, [pc, #52]	; (8006fdc <HAL_SPI_IRQHandler+0x1fc>)
 8006fa8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7fc fe30 	bl	8003c14 <HAL_DMA_Abort_IT>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00a      	beq.n	8006fd0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006fc6:	e003      	b.n	8006fd0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 f809 	bl	8006fe0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006fce:	e000      	b.n	8006fd2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006fd0:	bf00      	nop
    return;
 8006fd2:	bf00      	nop
  }
}
 8006fd4:	3720      	adds	r7, #32
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	08006ff5 	.word	0x08006ff5

08006fe0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006fe8:	bf00      	nop
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007000:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f7ff ffe5 	bl	8006fe0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007016:	bf00      	nop
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
	...

08007020 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b088      	sub	sp, #32
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	603b      	str	r3, [r7, #0]
 800702c:	4613      	mov	r3, r2
 800702e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007030:	f7fc fca0 	bl	8003974 <HAL_GetTick>
 8007034:	4602      	mov	r2, r0
 8007036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007038:	1a9b      	subs	r3, r3, r2
 800703a:	683a      	ldr	r2, [r7, #0]
 800703c:	4413      	add	r3, r2
 800703e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007040:	f7fc fc98 	bl	8003974 <HAL_GetTick>
 8007044:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007046:	4b39      	ldr	r3, [pc, #228]	; (800712c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	015b      	lsls	r3, r3, #5
 800704c:	0d1b      	lsrs	r3, r3, #20
 800704e:	69fa      	ldr	r2, [r7, #28]
 8007050:	fb02 f303 	mul.w	r3, r2, r3
 8007054:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007056:	e054      	b.n	8007102 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800705e:	d050      	beq.n	8007102 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007060:	f7fc fc88 	bl	8003974 <HAL_GetTick>
 8007064:	4602      	mov	r2, r0
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	69fa      	ldr	r2, [r7, #28]
 800706c:	429a      	cmp	r2, r3
 800706e:	d902      	bls.n	8007076 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d13d      	bne.n	80070f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007084:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800708e:	d111      	bne.n	80070b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007098:	d004      	beq.n	80070a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070a2:	d107      	bne.n	80070b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070bc:	d10f      	bne.n	80070de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070cc:	601a      	str	r2, [r3, #0]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2201      	movs	r2, #1
 80070e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e017      	b.n	8007122 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d101      	bne.n	80070fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80070f8:	2300      	movs	r3, #0
 80070fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	3b01      	subs	r3, #1
 8007100:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	689a      	ldr	r2, [r3, #8]
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	4013      	ands	r3, r2
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	429a      	cmp	r2, r3
 8007110:	bf0c      	ite	eq
 8007112:	2301      	moveq	r3, #1
 8007114:	2300      	movne	r3, #0
 8007116:	b2db      	uxtb	r3, r3
 8007118:	461a      	mov	r2, r3
 800711a:	79fb      	ldrb	r3, [r7, #7]
 800711c:	429a      	cmp	r2, r3
 800711e:	d19b      	bne.n	8007058 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3720      	adds	r7, #32
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	20000000 	.word	0x20000000

08007130 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b08a      	sub	sp, #40	; 0x28
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
 800713c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800713e:	2300      	movs	r3, #0
 8007140:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007142:	f7fc fc17 	bl	8003974 <HAL_GetTick>
 8007146:	4602      	mov	r2, r0
 8007148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714a:	1a9b      	subs	r3, r3, r2
 800714c:	683a      	ldr	r2, [r7, #0]
 800714e:	4413      	add	r3, r2
 8007150:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007152:	f7fc fc0f 	bl	8003974 <HAL_GetTick>
 8007156:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	330c      	adds	r3, #12
 800715e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007160:	4b3d      	ldr	r3, [pc, #244]	; (8007258 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	4613      	mov	r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	4413      	add	r3, r2
 800716a:	00da      	lsls	r2, r3, #3
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	0d1b      	lsrs	r3, r3, #20
 8007170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007172:	fb02 f303 	mul.w	r3, r2, r3
 8007176:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007178:	e060      	b.n	800723c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007180:	d107      	bne.n	8007192 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d104      	bne.n	8007192 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	b2db      	uxtb	r3, r3
 800718e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007190:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007198:	d050      	beq.n	800723c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800719a:	f7fc fbeb 	bl	8003974 <HAL_GetTick>
 800719e:	4602      	mov	r2, r0
 80071a0:	6a3b      	ldr	r3, [r7, #32]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d902      	bls.n	80071b0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80071aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d13d      	bne.n	800722c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	685a      	ldr	r2, [r3, #4]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80071be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071c8:	d111      	bne.n	80071ee <SPI_WaitFifoStateUntilTimeout+0xbe>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071d2:	d004      	beq.n	80071de <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071dc:	d107      	bne.n	80071ee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071f6:	d10f      	bne.n	8007218 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007206:	601a      	str	r2, [r3, #0]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007216:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	e010      	b.n	800724e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007232:	2300      	movs	r3, #0
 8007234:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	3b01      	subs	r3, #1
 800723a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	689a      	ldr	r2, [r3, #8]
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	4013      	ands	r3, r2
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	429a      	cmp	r2, r3
 800724a:	d196      	bne.n	800717a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3728      	adds	r7, #40	; 0x28
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	20000000 	.word	0x20000000

0800725c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b086      	sub	sp, #24
 8007260:	af02      	add	r7, sp, #8
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	9300      	str	r3, [sp, #0]
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	2200      	movs	r2, #0
 8007270:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f7ff ff5b 	bl	8007130 <SPI_WaitFifoStateUntilTimeout>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d007      	beq.n	8007290 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007284:	f043 0220 	orr.w	r2, r3, #32
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	e027      	b.n	80072e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	2200      	movs	r2, #0
 8007298:	2180      	movs	r1, #128	; 0x80
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f7ff fec0 	bl	8007020 <SPI_WaitFlagStateUntilTimeout>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d007      	beq.n	80072b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072aa:	f043 0220 	orr.w	r2, r3, #32
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e014      	b.n	80072e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	9300      	str	r3, [sp, #0]
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	2200      	movs	r2, #0
 80072be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f7ff ff34 	bl	8007130 <SPI_WaitFifoStateUntilTimeout>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d007      	beq.n	80072de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072d2:	f043 0220 	orr.w	r2, r3, #32
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80072da:	2303      	movs	r3, #3
 80072dc:	e000      	b.n	80072e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d101      	bne.n	80072fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e049      	b.n	800738e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b00      	cmp	r3, #0
 8007304:	d106      	bne.n	8007314 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7fc f84e 	bl	80033b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2202      	movs	r2, #2
 8007318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	3304      	adds	r3, #4
 8007324:	4619      	mov	r1, r3
 8007326:	4610      	mov	r0, r2
 8007328:	f000 fe5a 	bl	8007fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3708      	adds	r7, #8
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
	...

08007398 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d001      	beq.n	80073b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e047      	b.n	8007440 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2202      	movs	r2, #2
 80073b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a23      	ldr	r2, [pc, #140]	; (800744c <HAL_TIM_Base_Start+0xb4>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d01d      	beq.n	80073fe <HAL_TIM_Base_Start+0x66>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073ca:	d018      	beq.n	80073fe <HAL_TIM_Base_Start+0x66>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a1f      	ldr	r2, [pc, #124]	; (8007450 <HAL_TIM_Base_Start+0xb8>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d013      	beq.n	80073fe <HAL_TIM_Base_Start+0x66>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a1e      	ldr	r2, [pc, #120]	; (8007454 <HAL_TIM_Base_Start+0xbc>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d00e      	beq.n	80073fe <HAL_TIM_Base_Start+0x66>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a1c      	ldr	r2, [pc, #112]	; (8007458 <HAL_TIM_Base_Start+0xc0>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d009      	beq.n	80073fe <HAL_TIM_Base_Start+0x66>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a1b      	ldr	r2, [pc, #108]	; (800745c <HAL_TIM_Base_Start+0xc4>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d004      	beq.n	80073fe <HAL_TIM_Base_Start+0x66>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a19      	ldr	r2, [pc, #100]	; (8007460 <HAL_TIM_Base_Start+0xc8>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d115      	bne.n	800742a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	689a      	ldr	r2, [r3, #8]
 8007404:	4b17      	ldr	r3, [pc, #92]	; (8007464 <HAL_TIM_Base_Start+0xcc>)
 8007406:	4013      	ands	r3, r2
 8007408:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2b06      	cmp	r3, #6
 800740e:	d015      	beq.n	800743c <HAL_TIM_Base_Start+0xa4>
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007416:	d011      	beq.n	800743c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f042 0201 	orr.w	r2, r2, #1
 8007426:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007428:	e008      	b.n	800743c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f042 0201 	orr.w	r2, r2, #1
 8007438:	601a      	str	r2, [r3, #0]
 800743a:	e000      	b.n	800743e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800743c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3714      	adds	r7, #20
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr
 800744c:	40012c00 	.word	0x40012c00
 8007450:	40000400 	.word	0x40000400
 8007454:	40000800 	.word	0x40000800
 8007458:	40000c00 	.word	0x40000c00
 800745c:	40013400 	.word	0x40013400
 8007460:	40014000 	.word	0x40014000
 8007464:	00010007 	.word	0x00010007

08007468 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	6a1a      	ldr	r2, [r3, #32]
 8007476:	f241 1311 	movw	r3, #4369	; 0x1111
 800747a:	4013      	ands	r3, r2
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10f      	bne.n	80074a0 <HAL_TIM_Base_Stop+0x38>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	6a1a      	ldr	r2, [r3, #32]
 8007486:	f240 4344 	movw	r3, #1092	; 0x444
 800748a:	4013      	ands	r3, r2
 800748c:	2b00      	cmp	r3, #0
 800748e:	d107      	bne.n	80074a0 <HAL_TIM_Base_Stop+0x38>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f022 0201 	bic.w	r2, r2, #1
 800749e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	370c      	adds	r7, #12
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
	...

080074b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d001      	beq.n	80074d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	e04f      	b.n	8007570 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2202      	movs	r2, #2
 80074d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68da      	ldr	r2, [r3, #12]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f042 0201 	orr.w	r2, r2, #1
 80074e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a23      	ldr	r2, [pc, #140]	; (800757c <HAL_TIM_Base_Start_IT+0xc4>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d01d      	beq.n	800752e <HAL_TIM_Base_Start_IT+0x76>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074fa:	d018      	beq.n	800752e <HAL_TIM_Base_Start_IT+0x76>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a1f      	ldr	r2, [pc, #124]	; (8007580 <HAL_TIM_Base_Start_IT+0xc8>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d013      	beq.n	800752e <HAL_TIM_Base_Start_IT+0x76>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a1e      	ldr	r2, [pc, #120]	; (8007584 <HAL_TIM_Base_Start_IT+0xcc>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d00e      	beq.n	800752e <HAL_TIM_Base_Start_IT+0x76>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a1c      	ldr	r2, [pc, #112]	; (8007588 <HAL_TIM_Base_Start_IT+0xd0>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d009      	beq.n	800752e <HAL_TIM_Base_Start_IT+0x76>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a1b      	ldr	r2, [pc, #108]	; (800758c <HAL_TIM_Base_Start_IT+0xd4>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d004      	beq.n	800752e <HAL_TIM_Base_Start_IT+0x76>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a19      	ldr	r2, [pc, #100]	; (8007590 <HAL_TIM_Base_Start_IT+0xd8>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d115      	bne.n	800755a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	689a      	ldr	r2, [r3, #8]
 8007534:	4b17      	ldr	r3, [pc, #92]	; (8007594 <HAL_TIM_Base_Start_IT+0xdc>)
 8007536:	4013      	ands	r3, r2
 8007538:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2b06      	cmp	r3, #6
 800753e:	d015      	beq.n	800756c <HAL_TIM_Base_Start_IT+0xb4>
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007546:	d011      	beq.n	800756c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f042 0201 	orr.w	r2, r2, #1
 8007556:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007558:	e008      	b.n	800756c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f042 0201 	orr.w	r2, r2, #1
 8007568:	601a      	str	r2, [r3, #0]
 800756a:	e000      	b.n	800756e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800756c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3714      	adds	r7, #20
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr
 800757c:	40012c00 	.word	0x40012c00
 8007580:	40000400 	.word	0x40000400
 8007584:	40000800 	.word	0x40000800
 8007588:	40000c00 	.word	0x40000c00
 800758c:	40013400 	.word	0x40013400
 8007590:	40014000 	.word	0x40014000
 8007594:	00010007 	.word	0x00010007

08007598 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d101      	bne.n	80075aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e049      	b.n	800763e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d106      	bne.n	80075c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f841 	bl	8007646 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2202      	movs	r2, #2
 80075c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	3304      	adds	r3, #4
 80075d4:	4619      	mov	r1, r3
 80075d6:	4610      	mov	r0, r2
 80075d8:	f000 fd02 	bl	8007fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007646:	b480      	push	{r7}
 8007648:	b083      	sub	sp, #12
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800764e:	bf00      	nop
 8007650:	370c      	adds	r7, #12
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
	...

0800765c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d109      	bne.n	8007680 <HAL_TIM_PWM_Start+0x24>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007672:	b2db      	uxtb	r3, r3
 8007674:	2b01      	cmp	r3, #1
 8007676:	bf14      	ite	ne
 8007678:	2301      	movne	r3, #1
 800767a:	2300      	moveq	r3, #0
 800767c:	b2db      	uxtb	r3, r3
 800767e:	e03c      	b.n	80076fa <HAL_TIM_PWM_Start+0x9e>
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	2b04      	cmp	r3, #4
 8007684:	d109      	bne.n	800769a <HAL_TIM_PWM_Start+0x3e>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800768c:	b2db      	uxtb	r3, r3
 800768e:	2b01      	cmp	r3, #1
 8007690:	bf14      	ite	ne
 8007692:	2301      	movne	r3, #1
 8007694:	2300      	moveq	r3, #0
 8007696:	b2db      	uxtb	r3, r3
 8007698:	e02f      	b.n	80076fa <HAL_TIM_PWM_Start+0x9e>
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	2b08      	cmp	r3, #8
 800769e:	d109      	bne.n	80076b4 <HAL_TIM_PWM_Start+0x58>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	bf14      	ite	ne
 80076ac:	2301      	movne	r3, #1
 80076ae:	2300      	moveq	r3, #0
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	e022      	b.n	80076fa <HAL_TIM_PWM_Start+0x9e>
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	2b0c      	cmp	r3, #12
 80076b8:	d109      	bne.n	80076ce <HAL_TIM_PWM_Start+0x72>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	bf14      	ite	ne
 80076c6:	2301      	movne	r3, #1
 80076c8:	2300      	moveq	r3, #0
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	e015      	b.n	80076fa <HAL_TIM_PWM_Start+0x9e>
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	2b10      	cmp	r3, #16
 80076d2:	d109      	bne.n	80076e8 <HAL_TIM_PWM_Start+0x8c>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	2b01      	cmp	r3, #1
 80076de:	bf14      	ite	ne
 80076e0:	2301      	movne	r3, #1
 80076e2:	2300      	moveq	r3, #0
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	e008      	b.n	80076fa <HAL_TIM_PWM_Start+0x9e>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	bf14      	ite	ne
 80076f4:	2301      	movne	r3, #1
 80076f6:	2300      	moveq	r3, #0
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d001      	beq.n	8007702 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e09c      	b.n	800783c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d104      	bne.n	8007712 <HAL_TIM_PWM_Start+0xb6>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2202      	movs	r2, #2
 800770c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007710:	e023      	b.n	800775a <HAL_TIM_PWM_Start+0xfe>
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	2b04      	cmp	r3, #4
 8007716:	d104      	bne.n	8007722 <HAL_TIM_PWM_Start+0xc6>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2202      	movs	r2, #2
 800771c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007720:	e01b      	b.n	800775a <HAL_TIM_PWM_Start+0xfe>
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	2b08      	cmp	r3, #8
 8007726:	d104      	bne.n	8007732 <HAL_TIM_PWM_Start+0xd6>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2202      	movs	r2, #2
 800772c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007730:	e013      	b.n	800775a <HAL_TIM_PWM_Start+0xfe>
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	2b0c      	cmp	r3, #12
 8007736:	d104      	bne.n	8007742 <HAL_TIM_PWM_Start+0xe6>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2202      	movs	r2, #2
 800773c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007740:	e00b      	b.n	800775a <HAL_TIM_PWM_Start+0xfe>
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	2b10      	cmp	r3, #16
 8007746:	d104      	bne.n	8007752 <HAL_TIM_PWM_Start+0xf6>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2202      	movs	r2, #2
 800774c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007750:	e003      	b.n	800775a <HAL_TIM_PWM_Start+0xfe>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2202      	movs	r2, #2
 8007756:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2201      	movs	r2, #1
 8007760:	6839      	ldr	r1, [r7, #0]
 8007762:	4618      	mov	r0, r3
 8007764:	f001 f846 	bl	80087f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a35      	ldr	r2, [pc, #212]	; (8007844 <HAL_TIM_PWM_Start+0x1e8>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d013      	beq.n	800779a <HAL_TIM_PWM_Start+0x13e>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a34      	ldr	r2, [pc, #208]	; (8007848 <HAL_TIM_PWM_Start+0x1ec>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d00e      	beq.n	800779a <HAL_TIM_PWM_Start+0x13e>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a32      	ldr	r2, [pc, #200]	; (800784c <HAL_TIM_PWM_Start+0x1f0>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d009      	beq.n	800779a <HAL_TIM_PWM_Start+0x13e>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a31      	ldr	r2, [pc, #196]	; (8007850 <HAL_TIM_PWM_Start+0x1f4>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d004      	beq.n	800779a <HAL_TIM_PWM_Start+0x13e>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a2f      	ldr	r2, [pc, #188]	; (8007854 <HAL_TIM_PWM_Start+0x1f8>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d101      	bne.n	800779e <HAL_TIM_PWM_Start+0x142>
 800779a:	2301      	movs	r3, #1
 800779c:	e000      	b.n	80077a0 <HAL_TIM_PWM_Start+0x144>
 800779e:	2300      	movs	r3, #0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d007      	beq.n	80077b4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80077b2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a22      	ldr	r2, [pc, #136]	; (8007844 <HAL_TIM_PWM_Start+0x1e8>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d01d      	beq.n	80077fa <HAL_TIM_PWM_Start+0x19e>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077c6:	d018      	beq.n	80077fa <HAL_TIM_PWM_Start+0x19e>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a22      	ldr	r2, [pc, #136]	; (8007858 <HAL_TIM_PWM_Start+0x1fc>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d013      	beq.n	80077fa <HAL_TIM_PWM_Start+0x19e>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a21      	ldr	r2, [pc, #132]	; (800785c <HAL_TIM_PWM_Start+0x200>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d00e      	beq.n	80077fa <HAL_TIM_PWM_Start+0x19e>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a1f      	ldr	r2, [pc, #124]	; (8007860 <HAL_TIM_PWM_Start+0x204>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d009      	beq.n	80077fa <HAL_TIM_PWM_Start+0x19e>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a17      	ldr	r2, [pc, #92]	; (8007848 <HAL_TIM_PWM_Start+0x1ec>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d004      	beq.n	80077fa <HAL_TIM_PWM_Start+0x19e>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a15      	ldr	r2, [pc, #84]	; (800784c <HAL_TIM_PWM_Start+0x1f0>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d115      	bne.n	8007826 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	689a      	ldr	r2, [r3, #8]
 8007800:	4b18      	ldr	r3, [pc, #96]	; (8007864 <HAL_TIM_PWM_Start+0x208>)
 8007802:	4013      	ands	r3, r2
 8007804:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2b06      	cmp	r3, #6
 800780a:	d015      	beq.n	8007838 <HAL_TIM_PWM_Start+0x1dc>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007812:	d011      	beq.n	8007838 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f042 0201 	orr.w	r2, r2, #1
 8007822:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007824:	e008      	b.n	8007838 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f042 0201 	orr.w	r2, r2, #1
 8007834:	601a      	str	r2, [r3, #0]
 8007836:	e000      	b.n	800783a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007838:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	40012c00 	.word	0x40012c00
 8007848:	40013400 	.word	0x40013400
 800784c:	40014000 	.word	0x40014000
 8007850:	40014400 	.word	0x40014400
 8007854:	40014800 	.word	0x40014800
 8007858:	40000400 	.word	0x40000400
 800785c:	40000800 	.word	0x40000800
 8007860:	40000c00 	.word	0x40000c00
 8007864:	00010007 	.word	0x00010007

08007868 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2200      	movs	r2, #0
 8007878:	6839      	ldr	r1, [r7, #0]
 800787a:	4618      	mov	r0, r3
 800787c:	f000 ffba 	bl	80087f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a3e      	ldr	r2, [pc, #248]	; (8007980 <HAL_TIM_PWM_Stop+0x118>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d013      	beq.n	80078b2 <HAL_TIM_PWM_Stop+0x4a>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a3d      	ldr	r2, [pc, #244]	; (8007984 <HAL_TIM_PWM_Stop+0x11c>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d00e      	beq.n	80078b2 <HAL_TIM_PWM_Stop+0x4a>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a3b      	ldr	r2, [pc, #236]	; (8007988 <HAL_TIM_PWM_Stop+0x120>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d009      	beq.n	80078b2 <HAL_TIM_PWM_Stop+0x4a>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a3a      	ldr	r2, [pc, #232]	; (800798c <HAL_TIM_PWM_Stop+0x124>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d004      	beq.n	80078b2 <HAL_TIM_PWM_Stop+0x4a>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a38      	ldr	r2, [pc, #224]	; (8007990 <HAL_TIM_PWM_Stop+0x128>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d101      	bne.n	80078b6 <HAL_TIM_PWM_Stop+0x4e>
 80078b2:	2301      	movs	r3, #1
 80078b4:	e000      	b.n	80078b8 <HAL_TIM_PWM_Stop+0x50>
 80078b6:	2300      	movs	r3, #0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d017      	beq.n	80078ec <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	6a1a      	ldr	r2, [r3, #32]
 80078c2:	f241 1311 	movw	r3, #4369	; 0x1111
 80078c6:	4013      	ands	r3, r2
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10f      	bne.n	80078ec <HAL_TIM_PWM_Stop+0x84>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	6a1a      	ldr	r2, [r3, #32]
 80078d2:	f240 4344 	movw	r3, #1092	; 0x444
 80078d6:	4013      	ands	r3, r2
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d107      	bne.n	80078ec <HAL_TIM_PWM_Stop+0x84>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80078ea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	6a1a      	ldr	r2, [r3, #32]
 80078f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80078f6:	4013      	ands	r3, r2
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d10f      	bne.n	800791c <HAL_TIM_PWM_Stop+0xb4>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	6a1a      	ldr	r2, [r3, #32]
 8007902:	f240 4344 	movw	r3, #1092	; 0x444
 8007906:	4013      	ands	r3, r2
 8007908:	2b00      	cmp	r3, #0
 800790a:	d107      	bne.n	800791c <HAL_TIM_PWM_Stop+0xb4>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f022 0201 	bic.w	r2, r2, #1
 800791a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d104      	bne.n	800792c <HAL_TIM_PWM_Stop+0xc4>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2201      	movs	r2, #1
 8007926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800792a:	e023      	b.n	8007974 <HAL_TIM_PWM_Stop+0x10c>
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	2b04      	cmp	r3, #4
 8007930:	d104      	bne.n	800793c <HAL_TIM_PWM_Stop+0xd4>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2201      	movs	r2, #1
 8007936:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800793a:	e01b      	b.n	8007974 <HAL_TIM_PWM_Stop+0x10c>
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	2b08      	cmp	r3, #8
 8007940:	d104      	bne.n	800794c <HAL_TIM_PWM_Stop+0xe4>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800794a:	e013      	b.n	8007974 <HAL_TIM_PWM_Stop+0x10c>
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	2b0c      	cmp	r3, #12
 8007950:	d104      	bne.n	800795c <HAL_TIM_PWM_Stop+0xf4>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2201      	movs	r2, #1
 8007956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800795a:	e00b      	b.n	8007974 <HAL_TIM_PWM_Stop+0x10c>
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	2b10      	cmp	r3, #16
 8007960:	d104      	bne.n	800796c <HAL_TIM_PWM_Stop+0x104>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2201      	movs	r2, #1
 8007966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800796a:	e003      	b.n	8007974 <HAL_TIM_PWM_Stop+0x10c>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3708      	adds	r7, #8
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	40012c00 	.word	0x40012c00
 8007984:	40013400 	.word	0x40013400
 8007988:	40014000 	.word	0x40014000
 800798c:	40014400 	.word	0x40014400
 8007990:	40014800 	.word	0x40014800

08007994 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	f003 0302 	and.w	r3, r3, #2
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	d122      	bne.n	80079f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	f003 0302 	and.w	r3, r3, #2
 80079b4:	2b02      	cmp	r3, #2
 80079b6:	d11b      	bne.n	80079f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f06f 0202 	mvn.w	r2, #2
 80079c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2201      	movs	r2, #1
 80079c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	699b      	ldr	r3, [r3, #24]
 80079ce:	f003 0303 	and.w	r3, r3, #3
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d003      	beq.n	80079de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fae3 	bl	8007fa2 <HAL_TIM_IC_CaptureCallback>
 80079dc:	e005      	b.n	80079ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 fad5 	bl	8007f8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 fae6 	bl	8007fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	f003 0304 	and.w	r3, r3, #4
 80079fa:	2b04      	cmp	r3, #4
 80079fc:	d122      	bne.n	8007a44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	f003 0304 	and.w	r3, r3, #4
 8007a08:	2b04      	cmp	r3, #4
 8007a0a:	d11b      	bne.n	8007a44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f06f 0204 	mvn.w	r2, #4
 8007a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2202      	movs	r2, #2
 8007a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d003      	beq.n	8007a32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 fab9 	bl	8007fa2 <HAL_TIM_IC_CaptureCallback>
 8007a30:	e005      	b.n	8007a3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 faab 	bl	8007f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 fabc 	bl	8007fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	f003 0308 	and.w	r3, r3, #8
 8007a4e:	2b08      	cmp	r3, #8
 8007a50:	d122      	bne.n	8007a98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	f003 0308 	and.w	r3, r3, #8
 8007a5c:	2b08      	cmp	r3, #8
 8007a5e:	d11b      	bne.n	8007a98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f06f 0208 	mvn.w	r2, #8
 8007a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2204      	movs	r2, #4
 8007a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	69db      	ldr	r3, [r3, #28]
 8007a76:	f003 0303 	and.w	r3, r3, #3
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d003      	beq.n	8007a86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 fa8f 	bl	8007fa2 <HAL_TIM_IC_CaptureCallback>
 8007a84:	e005      	b.n	8007a92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 fa81 	bl	8007f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 fa92 	bl	8007fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	f003 0310 	and.w	r3, r3, #16
 8007aa2:	2b10      	cmp	r3, #16
 8007aa4:	d122      	bne.n	8007aec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	f003 0310 	and.w	r3, r3, #16
 8007ab0:	2b10      	cmp	r3, #16
 8007ab2:	d11b      	bne.n	8007aec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f06f 0210 	mvn.w	r2, #16
 8007abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2208      	movs	r2, #8
 8007ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	69db      	ldr	r3, [r3, #28]
 8007aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d003      	beq.n	8007ada <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 fa65 	bl	8007fa2 <HAL_TIM_IC_CaptureCallback>
 8007ad8:	e005      	b.n	8007ae6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 fa57 	bl	8007f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fa68 	bl	8007fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	f003 0301 	and.w	r3, r3, #1
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d10e      	bne.n	8007b18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	f003 0301 	and.w	r3, r3, #1
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d107      	bne.n	8007b18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f06f 0201 	mvn.w	r2, #1
 8007b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f7fa fe20 	bl	8002758 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b22:	2b80      	cmp	r3, #128	; 0x80
 8007b24:	d10e      	bne.n	8007b44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b30:	2b80      	cmp	r3, #128	; 0x80
 8007b32:	d107      	bne.n	8007b44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 ff10 	bl	8008964 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b52:	d10e      	bne.n	8007b72 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b5e:	2b80      	cmp	r3, #128	; 0x80
 8007b60:	d107      	bne.n	8007b72 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 ff03 	bl	8008978 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b7c:	2b40      	cmp	r3, #64	; 0x40
 8007b7e:	d10e      	bne.n	8007b9e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b8a:	2b40      	cmp	r3, #64	; 0x40
 8007b8c:	d107      	bne.n	8007b9e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 fa16 	bl	8007fca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	f003 0320 	and.w	r3, r3, #32
 8007ba8:	2b20      	cmp	r3, #32
 8007baa:	d10e      	bne.n	8007bca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	f003 0320 	and.w	r3, r3, #32
 8007bb6:	2b20      	cmp	r3, #32
 8007bb8:	d107      	bne.n	8007bca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f06f 0220 	mvn.w	r2, #32
 8007bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 fec3 	bl	8008950 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007bca:	bf00      	nop
 8007bcc:	3708      	adds	r7, #8
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
	...

08007bd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b086      	sub	sp, #24
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007be0:	2300      	movs	r3, #0
 8007be2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d101      	bne.n	8007bf2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007bee:	2302      	movs	r3, #2
 8007bf0:	e0ff      	b.n	8007df2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2b14      	cmp	r3, #20
 8007bfe:	f200 80f0 	bhi.w	8007de2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007c02:	a201      	add	r2, pc, #4	; (adr r2, 8007c08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c08:	08007c5d 	.word	0x08007c5d
 8007c0c:	08007de3 	.word	0x08007de3
 8007c10:	08007de3 	.word	0x08007de3
 8007c14:	08007de3 	.word	0x08007de3
 8007c18:	08007c9d 	.word	0x08007c9d
 8007c1c:	08007de3 	.word	0x08007de3
 8007c20:	08007de3 	.word	0x08007de3
 8007c24:	08007de3 	.word	0x08007de3
 8007c28:	08007cdf 	.word	0x08007cdf
 8007c2c:	08007de3 	.word	0x08007de3
 8007c30:	08007de3 	.word	0x08007de3
 8007c34:	08007de3 	.word	0x08007de3
 8007c38:	08007d1f 	.word	0x08007d1f
 8007c3c:	08007de3 	.word	0x08007de3
 8007c40:	08007de3 	.word	0x08007de3
 8007c44:	08007de3 	.word	0x08007de3
 8007c48:	08007d61 	.word	0x08007d61
 8007c4c:	08007de3 	.word	0x08007de3
 8007c50:	08007de3 	.word	0x08007de3
 8007c54:	08007de3 	.word	0x08007de3
 8007c58:	08007da1 	.word	0x08007da1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	68b9      	ldr	r1, [r7, #8]
 8007c62:	4618      	mov	r0, r3
 8007c64:	f000 fa56 	bl	8008114 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	699a      	ldr	r2, [r3, #24]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f042 0208 	orr.w	r2, r2, #8
 8007c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	699a      	ldr	r2, [r3, #24]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f022 0204 	bic.w	r2, r2, #4
 8007c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	6999      	ldr	r1, [r3, #24]
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	691a      	ldr	r2, [r3, #16]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	430a      	orrs	r2, r1
 8007c98:	619a      	str	r2, [r3, #24]
      break;
 8007c9a:	e0a5      	b.n	8007de8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68b9      	ldr	r1, [r7, #8]
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f000 fac6 	bl	8008234 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	699a      	ldr	r2, [r3, #24]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	699a      	ldr	r2, [r3, #24]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	6999      	ldr	r1, [r3, #24]
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	021a      	lsls	r2, r3, #8
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	430a      	orrs	r2, r1
 8007cda:	619a      	str	r2, [r3, #24]
      break;
 8007cdc:	e084      	b.n	8007de8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	68b9      	ldr	r1, [r7, #8]
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f000 fb2f 	bl	8008348 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	69da      	ldr	r2, [r3, #28]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f042 0208 	orr.w	r2, r2, #8
 8007cf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	69da      	ldr	r2, [r3, #28]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f022 0204 	bic.w	r2, r2, #4
 8007d08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	69d9      	ldr	r1, [r3, #28]
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	691a      	ldr	r2, [r3, #16]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	430a      	orrs	r2, r1
 8007d1a:	61da      	str	r2, [r3, #28]
      break;
 8007d1c:	e064      	b.n	8007de8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	68b9      	ldr	r1, [r7, #8]
 8007d24:	4618      	mov	r0, r3
 8007d26:	f000 fb97 	bl	8008458 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	69da      	ldr	r2, [r3, #28]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	69da      	ldr	r2, [r3, #28]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	69d9      	ldr	r1, [r3, #28]
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	021a      	lsls	r2, r3, #8
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	430a      	orrs	r2, r1
 8007d5c:	61da      	str	r2, [r3, #28]
      break;
 8007d5e:	e043      	b.n	8007de8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68b9      	ldr	r1, [r7, #8]
 8007d66:	4618      	mov	r0, r3
 8007d68:	f000 fbe0 	bl	800852c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f042 0208 	orr.w	r2, r2, #8
 8007d7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f022 0204 	bic.w	r2, r2, #4
 8007d8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	691a      	ldr	r2, [r3, #16]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	430a      	orrs	r2, r1
 8007d9c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007d9e:	e023      	b.n	8007de8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	68b9      	ldr	r1, [r7, #8]
 8007da6:	4618      	mov	r0, r3
 8007da8:	f000 fc24 	bl	80085f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007dba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	021a      	lsls	r2, r3, #8
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	430a      	orrs	r2, r1
 8007dde:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007de0:	e002      	b.n	8007de8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	75fb      	strb	r3, [r7, #23]
      break;
 8007de6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3718      	adds	r7, #24
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop

08007dfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e06:	2300      	movs	r3, #0
 8007e08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d101      	bne.n	8007e18 <HAL_TIM_ConfigClockSource+0x1c>
 8007e14:	2302      	movs	r3, #2
 8007e16:	e0b6      	b.n	8007f86 <HAL_TIM_ConfigClockSource+0x18a>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2202      	movs	r2, #2
 8007e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007e3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	68ba      	ldr	r2, [r7, #8]
 8007e4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e54:	d03e      	beq.n	8007ed4 <HAL_TIM_ConfigClockSource+0xd8>
 8007e56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e5a:	f200 8087 	bhi.w	8007f6c <HAL_TIM_ConfigClockSource+0x170>
 8007e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e62:	f000 8086 	beq.w	8007f72 <HAL_TIM_ConfigClockSource+0x176>
 8007e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e6a:	d87f      	bhi.n	8007f6c <HAL_TIM_ConfigClockSource+0x170>
 8007e6c:	2b70      	cmp	r3, #112	; 0x70
 8007e6e:	d01a      	beq.n	8007ea6 <HAL_TIM_ConfigClockSource+0xaa>
 8007e70:	2b70      	cmp	r3, #112	; 0x70
 8007e72:	d87b      	bhi.n	8007f6c <HAL_TIM_ConfigClockSource+0x170>
 8007e74:	2b60      	cmp	r3, #96	; 0x60
 8007e76:	d050      	beq.n	8007f1a <HAL_TIM_ConfigClockSource+0x11e>
 8007e78:	2b60      	cmp	r3, #96	; 0x60
 8007e7a:	d877      	bhi.n	8007f6c <HAL_TIM_ConfigClockSource+0x170>
 8007e7c:	2b50      	cmp	r3, #80	; 0x50
 8007e7e:	d03c      	beq.n	8007efa <HAL_TIM_ConfigClockSource+0xfe>
 8007e80:	2b50      	cmp	r3, #80	; 0x50
 8007e82:	d873      	bhi.n	8007f6c <HAL_TIM_ConfigClockSource+0x170>
 8007e84:	2b40      	cmp	r3, #64	; 0x40
 8007e86:	d058      	beq.n	8007f3a <HAL_TIM_ConfigClockSource+0x13e>
 8007e88:	2b40      	cmp	r3, #64	; 0x40
 8007e8a:	d86f      	bhi.n	8007f6c <HAL_TIM_ConfigClockSource+0x170>
 8007e8c:	2b30      	cmp	r3, #48	; 0x30
 8007e8e:	d064      	beq.n	8007f5a <HAL_TIM_ConfigClockSource+0x15e>
 8007e90:	2b30      	cmp	r3, #48	; 0x30
 8007e92:	d86b      	bhi.n	8007f6c <HAL_TIM_ConfigClockSource+0x170>
 8007e94:	2b20      	cmp	r3, #32
 8007e96:	d060      	beq.n	8007f5a <HAL_TIM_ConfigClockSource+0x15e>
 8007e98:	2b20      	cmp	r3, #32
 8007e9a:	d867      	bhi.n	8007f6c <HAL_TIM_ConfigClockSource+0x170>
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d05c      	beq.n	8007f5a <HAL_TIM_ConfigClockSource+0x15e>
 8007ea0:	2b10      	cmp	r3, #16
 8007ea2:	d05a      	beq.n	8007f5a <HAL_TIM_ConfigClockSource+0x15e>
 8007ea4:	e062      	b.n	8007f6c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6818      	ldr	r0, [r3, #0]
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	6899      	ldr	r1, [r3, #8]
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	685a      	ldr	r2, [r3, #4]
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	f000 fc7d 	bl	80087b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ec8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	609a      	str	r2, [r3, #8]
      break;
 8007ed2:	e04f      	b.n	8007f74 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6818      	ldr	r0, [r3, #0]
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	6899      	ldr	r1, [r3, #8]
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	685a      	ldr	r2, [r3, #4]
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	f000 fc66 	bl	80087b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	689a      	ldr	r2, [r3, #8]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ef6:	609a      	str	r2, [r3, #8]
      break;
 8007ef8:	e03c      	b.n	8007f74 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6818      	ldr	r0, [r3, #0]
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	6859      	ldr	r1, [r3, #4]
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	461a      	mov	r2, r3
 8007f08:	f000 fbda 	bl	80086c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2150      	movs	r1, #80	; 0x50
 8007f12:	4618      	mov	r0, r3
 8007f14:	f000 fc33 	bl	800877e <TIM_ITRx_SetConfig>
      break;
 8007f18:	e02c      	b.n	8007f74 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6818      	ldr	r0, [r3, #0]
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	6859      	ldr	r1, [r3, #4]
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	461a      	mov	r2, r3
 8007f28:	f000 fbf9 	bl	800871e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2160      	movs	r1, #96	; 0x60
 8007f32:	4618      	mov	r0, r3
 8007f34:	f000 fc23 	bl	800877e <TIM_ITRx_SetConfig>
      break;
 8007f38:	e01c      	b.n	8007f74 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6818      	ldr	r0, [r3, #0]
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	6859      	ldr	r1, [r3, #4]
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	461a      	mov	r2, r3
 8007f48:	f000 fbba 	bl	80086c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2140      	movs	r1, #64	; 0x40
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 fc13 	bl	800877e <TIM_ITRx_SetConfig>
      break;
 8007f58:	e00c      	b.n	8007f74 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4619      	mov	r1, r3
 8007f64:	4610      	mov	r0, r2
 8007f66:	f000 fc0a 	bl	800877e <TIM_ITRx_SetConfig>
      break;
 8007f6a:	e003      	b.n	8007f74 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f70:	e000      	b.n	8007f74 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007f72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f8e:	b480      	push	{r7}
 8007f90:	b083      	sub	sp, #12
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f96:	bf00      	nop
 8007f98:	370c      	adds	r7, #12
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr

08007fa2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007fa2:	b480      	push	{r7}
 8007fa4:	b083      	sub	sp, #12
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007faa:	bf00      	nop
 8007fac:	370c      	adds	r7, #12
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr

08007fb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007fb6:	b480      	push	{r7}
 8007fb8:	b083      	sub	sp, #12
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007fbe:	bf00      	nop
 8007fc0:	370c      	adds	r7, #12
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr

08007fca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007fca:	b480      	push	{r7}
 8007fcc:	b083      	sub	sp, #12
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007fd2:	bf00      	nop
 8007fd4:	370c      	adds	r7, #12
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
	...

08007fe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4a40      	ldr	r2, [pc, #256]	; (80080f4 <TIM_Base_SetConfig+0x114>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d013      	beq.n	8008020 <TIM_Base_SetConfig+0x40>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ffe:	d00f      	beq.n	8008020 <TIM_Base_SetConfig+0x40>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4a3d      	ldr	r2, [pc, #244]	; (80080f8 <TIM_Base_SetConfig+0x118>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d00b      	beq.n	8008020 <TIM_Base_SetConfig+0x40>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a3c      	ldr	r2, [pc, #240]	; (80080fc <TIM_Base_SetConfig+0x11c>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d007      	beq.n	8008020 <TIM_Base_SetConfig+0x40>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4a3b      	ldr	r2, [pc, #236]	; (8008100 <TIM_Base_SetConfig+0x120>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d003      	beq.n	8008020 <TIM_Base_SetConfig+0x40>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4a3a      	ldr	r2, [pc, #232]	; (8008104 <TIM_Base_SetConfig+0x124>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d108      	bne.n	8008032 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	4313      	orrs	r3, r2
 8008030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4a2f      	ldr	r2, [pc, #188]	; (80080f4 <TIM_Base_SetConfig+0x114>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d01f      	beq.n	800807a <TIM_Base_SetConfig+0x9a>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008040:	d01b      	beq.n	800807a <TIM_Base_SetConfig+0x9a>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4a2c      	ldr	r2, [pc, #176]	; (80080f8 <TIM_Base_SetConfig+0x118>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d017      	beq.n	800807a <TIM_Base_SetConfig+0x9a>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4a2b      	ldr	r2, [pc, #172]	; (80080fc <TIM_Base_SetConfig+0x11c>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d013      	beq.n	800807a <TIM_Base_SetConfig+0x9a>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4a2a      	ldr	r2, [pc, #168]	; (8008100 <TIM_Base_SetConfig+0x120>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d00f      	beq.n	800807a <TIM_Base_SetConfig+0x9a>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4a29      	ldr	r2, [pc, #164]	; (8008104 <TIM_Base_SetConfig+0x124>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d00b      	beq.n	800807a <TIM_Base_SetConfig+0x9a>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	4a28      	ldr	r2, [pc, #160]	; (8008108 <TIM_Base_SetConfig+0x128>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d007      	beq.n	800807a <TIM_Base_SetConfig+0x9a>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a27      	ldr	r2, [pc, #156]	; (800810c <TIM_Base_SetConfig+0x12c>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d003      	beq.n	800807a <TIM_Base_SetConfig+0x9a>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a26      	ldr	r2, [pc, #152]	; (8008110 <TIM_Base_SetConfig+0x130>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d108      	bne.n	800808c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	4313      	orrs	r3, r2
 800808a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	695b      	ldr	r3, [r3, #20]
 8008096:	4313      	orrs	r3, r2
 8008098:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	689a      	ldr	r2, [r3, #8]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4a10      	ldr	r2, [pc, #64]	; (80080f4 <TIM_Base_SetConfig+0x114>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d00f      	beq.n	80080d8 <TIM_Base_SetConfig+0xf8>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	4a12      	ldr	r2, [pc, #72]	; (8008104 <TIM_Base_SetConfig+0x124>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d00b      	beq.n	80080d8 <TIM_Base_SetConfig+0xf8>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4a11      	ldr	r2, [pc, #68]	; (8008108 <TIM_Base_SetConfig+0x128>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d007      	beq.n	80080d8 <TIM_Base_SetConfig+0xf8>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	4a10      	ldr	r2, [pc, #64]	; (800810c <TIM_Base_SetConfig+0x12c>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d003      	beq.n	80080d8 <TIM_Base_SetConfig+0xf8>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4a0f      	ldr	r2, [pc, #60]	; (8008110 <TIM_Base_SetConfig+0x130>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d103      	bne.n	80080e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	691a      	ldr	r2, [r3, #16]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	615a      	str	r2, [r3, #20]
}
 80080e6:	bf00      	nop
 80080e8:	3714      	adds	r7, #20
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	40012c00 	.word	0x40012c00
 80080f8:	40000400 	.word	0x40000400
 80080fc:	40000800 	.word	0x40000800
 8008100:	40000c00 	.word	0x40000c00
 8008104:	40013400 	.word	0x40013400
 8008108:	40014000 	.word	0x40014000
 800810c:	40014400 	.word	0x40014400
 8008110:	40014800 	.word	0x40014800

08008114 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008114:	b480      	push	{r7}
 8008116:	b087      	sub	sp, #28
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a1b      	ldr	r3, [r3, #32]
 8008122:	f023 0201 	bic.w	r2, r3, #1
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6a1b      	ldr	r3, [r3, #32]
 800812e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	699b      	ldr	r3, [r3, #24]
 800813a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f023 0303 	bic.w	r3, r3, #3
 800814e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	4313      	orrs	r3, r2
 8008158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	f023 0302 	bic.w	r3, r3, #2
 8008160:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	697a      	ldr	r2, [r7, #20]
 8008168:	4313      	orrs	r3, r2
 800816a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	4a2c      	ldr	r2, [pc, #176]	; (8008220 <TIM_OC1_SetConfig+0x10c>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d00f      	beq.n	8008194 <TIM_OC1_SetConfig+0x80>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4a2b      	ldr	r2, [pc, #172]	; (8008224 <TIM_OC1_SetConfig+0x110>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d00b      	beq.n	8008194 <TIM_OC1_SetConfig+0x80>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a2a      	ldr	r2, [pc, #168]	; (8008228 <TIM_OC1_SetConfig+0x114>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d007      	beq.n	8008194 <TIM_OC1_SetConfig+0x80>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a29      	ldr	r2, [pc, #164]	; (800822c <TIM_OC1_SetConfig+0x118>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d003      	beq.n	8008194 <TIM_OC1_SetConfig+0x80>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4a28      	ldr	r2, [pc, #160]	; (8008230 <TIM_OC1_SetConfig+0x11c>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d10c      	bne.n	80081ae <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	f023 0308 	bic.w	r3, r3, #8
 800819a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	697a      	ldr	r2, [r7, #20]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	f023 0304 	bic.w	r3, r3, #4
 80081ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a1b      	ldr	r2, [pc, #108]	; (8008220 <TIM_OC1_SetConfig+0x10c>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d00f      	beq.n	80081d6 <TIM_OC1_SetConfig+0xc2>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4a1a      	ldr	r2, [pc, #104]	; (8008224 <TIM_OC1_SetConfig+0x110>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d00b      	beq.n	80081d6 <TIM_OC1_SetConfig+0xc2>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a19      	ldr	r2, [pc, #100]	; (8008228 <TIM_OC1_SetConfig+0x114>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d007      	beq.n	80081d6 <TIM_OC1_SetConfig+0xc2>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a18      	ldr	r2, [pc, #96]	; (800822c <TIM_OC1_SetConfig+0x118>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d003      	beq.n	80081d6 <TIM_OC1_SetConfig+0xc2>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a17      	ldr	r2, [pc, #92]	; (8008230 <TIM_OC1_SetConfig+0x11c>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d111      	bne.n	80081fa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80081e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	695b      	ldr	r3, [r3, #20]
 80081ea:	693a      	ldr	r2, [r7, #16]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	693a      	ldr	r2, [r7, #16]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	693a      	ldr	r2, [r7, #16]
 80081fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	685a      	ldr	r2, [r3, #4]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	697a      	ldr	r2, [r7, #20]
 8008212:	621a      	str	r2, [r3, #32]
}
 8008214:	bf00      	nop
 8008216:	371c      	adds	r7, #28
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr
 8008220:	40012c00 	.word	0x40012c00
 8008224:	40013400 	.word	0x40013400
 8008228:	40014000 	.word	0x40014000
 800822c:	40014400 	.word	0x40014400
 8008230:	40014800 	.word	0x40014800

08008234 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008234:	b480      	push	{r7}
 8008236:	b087      	sub	sp, #28
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a1b      	ldr	r3, [r3, #32]
 8008242:	f023 0210 	bic.w	r2, r3, #16
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a1b      	ldr	r3, [r3, #32]
 800824e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	699b      	ldr	r3, [r3, #24]
 800825a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800826e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	021b      	lsls	r3, r3, #8
 8008276:	68fa      	ldr	r2, [r7, #12]
 8008278:	4313      	orrs	r3, r2
 800827a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	f023 0320 	bic.w	r3, r3, #32
 8008282:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	011b      	lsls	r3, r3, #4
 800828a:	697a      	ldr	r2, [r7, #20]
 800828c:	4313      	orrs	r3, r2
 800828e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	4a28      	ldr	r2, [pc, #160]	; (8008334 <TIM_OC2_SetConfig+0x100>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d003      	beq.n	80082a0 <TIM_OC2_SetConfig+0x6c>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4a27      	ldr	r2, [pc, #156]	; (8008338 <TIM_OC2_SetConfig+0x104>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d10d      	bne.n	80082bc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	011b      	lsls	r3, r3, #4
 80082ae:	697a      	ldr	r2, [r7, #20]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a1d      	ldr	r2, [pc, #116]	; (8008334 <TIM_OC2_SetConfig+0x100>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d00f      	beq.n	80082e4 <TIM_OC2_SetConfig+0xb0>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4a1c      	ldr	r2, [pc, #112]	; (8008338 <TIM_OC2_SetConfig+0x104>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d00b      	beq.n	80082e4 <TIM_OC2_SetConfig+0xb0>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4a1b      	ldr	r2, [pc, #108]	; (800833c <TIM_OC2_SetConfig+0x108>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d007      	beq.n	80082e4 <TIM_OC2_SetConfig+0xb0>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	4a1a      	ldr	r2, [pc, #104]	; (8008340 <TIM_OC2_SetConfig+0x10c>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d003      	beq.n	80082e4 <TIM_OC2_SetConfig+0xb0>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4a19      	ldr	r2, [pc, #100]	; (8008344 <TIM_OC2_SetConfig+0x110>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d113      	bne.n	800830c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	695b      	ldr	r3, [r3, #20]
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	693a      	ldr	r2, [r7, #16]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	699b      	ldr	r3, [r3, #24]
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	693a      	ldr	r2, [r7, #16]
 8008308:	4313      	orrs	r3, r2
 800830a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	693a      	ldr	r2, [r7, #16]
 8008310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	68fa      	ldr	r2, [r7, #12]
 8008316:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	685a      	ldr	r2, [r3, #4]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	697a      	ldr	r2, [r7, #20]
 8008324:	621a      	str	r2, [r3, #32]
}
 8008326:	bf00      	nop
 8008328:	371c      	adds	r7, #28
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop
 8008334:	40012c00 	.word	0x40012c00
 8008338:	40013400 	.word	0x40013400
 800833c:	40014000 	.word	0x40014000
 8008340:	40014400 	.word	0x40014400
 8008344:	40014800 	.word	0x40014800

08008348 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008348:	b480      	push	{r7}
 800834a:	b087      	sub	sp, #28
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a1b      	ldr	r3, [r3, #32]
 8008356:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a1b      	ldr	r3, [r3, #32]
 8008362:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	69db      	ldr	r3, [r3, #28]
 800836e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800837a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f023 0303 	bic.w	r3, r3, #3
 8008382:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	4313      	orrs	r3, r2
 800838c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008394:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	021b      	lsls	r3, r3, #8
 800839c:	697a      	ldr	r2, [r7, #20]
 800839e:	4313      	orrs	r3, r2
 80083a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4a27      	ldr	r2, [pc, #156]	; (8008444 <TIM_OC3_SetConfig+0xfc>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d003      	beq.n	80083b2 <TIM_OC3_SetConfig+0x6a>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a26      	ldr	r2, [pc, #152]	; (8008448 <TIM_OC3_SetConfig+0x100>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d10d      	bne.n	80083ce <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	021b      	lsls	r3, r3, #8
 80083c0:	697a      	ldr	r2, [r7, #20]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a1c      	ldr	r2, [pc, #112]	; (8008444 <TIM_OC3_SetConfig+0xfc>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d00f      	beq.n	80083f6 <TIM_OC3_SetConfig+0xae>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4a1b      	ldr	r2, [pc, #108]	; (8008448 <TIM_OC3_SetConfig+0x100>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d00b      	beq.n	80083f6 <TIM_OC3_SetConfig+0xae>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a1a      	ldr	r2, [pc, #104]	; (800844c <TIM_OC3_SetConfig+0x104>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d007      	beq.n	80083f6 <TIM_OC3_SetConfig+0xae>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4a19      	ldr	r2, [pc, #100]	; (8008450 <TIM_OC3_SetConfig+0x108>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d003      	beq.n	80083f6 <TIM_OC3_SetConfig+0xae>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4a18      	ldr	r2, [pc, #96]	; (8008454 <TIM_OC3_SetConfig+0x10c>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d113      	bne.n	800841e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008404:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	695b      	ldr	r3, [r3, #20]
 800840a:	011b      	lsls	r3, r3, #4
 800840c:	693a      	ldr	r2, [r7, #16]
 800840e:	4313      	orrs	r3, r2
 8008410:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	011b      	lsls	r3, r3, #4
 8008418:	693a      	ldr	r2, [r7, #16]
 800841a:	4313      	orrs	r3, r2
 800841c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	693a      	ldr	r2, [r7, #16]
 8008422:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	685a      	ldr	r2, [r3, #4]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	697a      	ldr	r2, [r7, #20]
 8008436:	621a      	str	r2, [r3, #32]
}
 8008438:	bf00      	nop
 800843a:	371c      	adds	r7, #28
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr
 8008444:	40012c00 	.word	0x40012c00
 8008448:	40013400 	.word	0x40013400
 800844c:	40014000 	.word	0x40014000
 8008450:	40014400 	.word	0x40014400
 8008454:	40014800 	.word	0x40014800

08008458 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008458:	b480      	push	{r7}
 800845a:	b087      	sub	sp, #28
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a1b      	ldr	r3, [r3, #32]
 8008466:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6a1b      	ldr	r3, [r3, #32]
 8008472:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	69db      	ldr	r3, [r3, #28]
 800847e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800848a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008492:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	021b      	lsls	r3, r3, #8
 800849a:	68fa      	ldr	r2, [r7, #12]
 800849c:	4313      	orrs	r3, r2
 800849e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	031b      	lsls	r3, r3, #12
 80084ae:	693a      	ldr	r2, [r7, #16]
 80084b0:	4313      	orrs	r3, r2
 80084b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a18      	ldr	r2, [pc, #96]	; (8008518 <TIM_OC4_SetConfig+0xc0>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d00f      	beq.n	80084dc <TIM_OC4_SetConfig+0x84>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4a17      	ldr	r2, [pc, #92]	; (800851c <TIM_OC4_SetConfig+0xc4>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d00b      	beq.n	80084dc <TIM_OC4_SetConfig+0x84>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4a16      	ldr	r2, [pc, #88]	; (8008520 <TIM_OC4_SetConfig+0xc8>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d007      	beq.n	80084dc <TIM_OC4_SetConfig+0x84>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4a15      	ldr	r2, [pc, #84]	; (8008524 <TIM_OC4_SetConfig+0xcc>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d003      	beq.n	80084dc <TIM_OC4_SetConfig+0x84>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4a14      	ldr	r2, [pc, #80]	; (8008528 <TIM_OC4_SetConfig+0xd0>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d109      	bne.n	80084f0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	695b      	ldr	r3, [r3, #20]
 80084e8:	019b      	lsls	r3, r3, #6
 80084ea:	697a      	ldr	r2, [r7, #20]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	697a      	ldr	r2, [r7, #20]
 80084f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	685a      	ldr	r2, [r3, #4]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	693a      	ldr	r2, [r7, #16]
 8008508:	621a      	str	r2, [r3, #32]
}
 800850a:	bf00      	nop
 800850c:	371c      	adds	r7, #28
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr
 8008516:	bf00      	nop
 8008518:	40012c00 	.word	0x40012c00
 800851c:	40013400 	.word	0x40013400
 8008520:	40014000 	.word	0x40014000
 8008524:	40014400 	.word	0x40014400
 8008528:	40014800 	.word	0x40014800

0800852c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800852c:	b480      	push	{r7}
 800852e:	b087      	sub	sp, #28
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6a1b      	ldr	r3, [r3, #32]
 800853a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a1b      	ldr	r3, [r3, #32]
 8008546:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800855a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800855e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	4313      	orrs	r3, r2
 8008568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008570:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	041b      	lsls	r3, r3, #16
 8008578:	693a      	ldr	r2, [r7, #16]
 800857a:	4313      	orrs	r3, r2
 800857c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a17      	ldr	r2, [pc, #92]	; (80085e0 <TIM_OC5_SetConfig+0xb4>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d00f      	beq.n	80085a6 <TIM_OC5_SetConfig+0x7a>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a16      	ldr	r2, [pc, #88]	; (80085e4 <TIM_OC5_SetConfig+0xb8>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d00b      	beq.n	80085a6 <TIM_OC5_SetConfig+0x7a>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a15      	ldr	r2, [pc, #84]	; (80085e8 <TIM_OC5_SetConfig+0xbc>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d007      	beq.n	80085a6 <TIM_OC5_SetConfig+0x7a>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a14      	ldr	r2, [pc, #80]	; (80085ec <TIM_OC5_SetConfig+0xc0>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d003      	beq.n	80085a6 <TIM_OC5_SetConfig+0x7a>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4a13      	ldr	r2, [pc, #76]	; (80085f0 <TIM_OC5_SetConfig+0xc4>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d109      	bne.n	80085ba <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	695b      	ldr	r3, [r3, #20]
 80085b2:	021b      	lsls	r3, r3, #8
 80085b4:	697a      	ldr	r2, [r7, #20]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	697a      	ldr	r2, [r7, #20]
 80085be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	685a      	ldr	r2, [r3, #4]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	693a      	ldr	r2, [r7, #16]
 80085d2:	621a      	str	r2, [r3, #32]
}
 80085d4:	bf00      	nop
 80085d6:	371c      	adds	r7, #28
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr
 80085e0:	40012c00 	.word	0x40012c00
 80085e4:	40013400 	.word	0x40013400
 80085e8:	40014000 	.word	0x40014000
 80085ec:	40014400 	.word	0x40014400
 80085f0:	40014800 	.word	0x40014800

080085f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b087      	sub	sp, #28
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a1b      	ldr	r3, [r3, #32]
 8008602:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a1b      	ldr	r3, [r3, #32]
 800860e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800861a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	021b      	lsls	r3, r3, #8
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	4313      	orrs	r3, r2
 8008632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800863a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	051b      	lsls	r3, r3, #20
 8008642:	693a      	ldr	r2, [r7, #16]
 8008644:	4313      	orrs	r3, r2
 8008646:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a18      	ldr	r2, [pc, #96]	; (80086ac <TIM_OC6_SetConfig+0xb8>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d00f      	beq.n	8008670 <TIM_OC6_SetConfig+0x7c>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a17      	ldr	r2, [pc, #92]	; (80086b0 <TIM_OC6_SetConfig+0xbc>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d00b      	beq.n	8008670 <TIM_OC6_SetConfig+0x7c>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a16      	ldr	r2, [pc, #88]	; (80086b4 <TIM_OC6_SetConfig+0xc0>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d007      	beq.n	8008670 <TIM_OC6_SetConfig+0x7c>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a15      	ldr	r2, [pc, #84]	; (80086b8 <TIM_OC6_SetConfig+0xc4>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d003      	beq.n	8008670 <TIM_OC6_SetConfig+0x7c>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4a14      	ldr	r2, [pc, #80]	; (80086bc <TIM_OC6_SetConfig+0xc8>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d109      	bne.n	8008684 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008676:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	029b      	lsls	r3, r3, #10
 800867e:	697a      	ldr	r2, [r7, #20]
 8008680:	4313      	orrs	r3, r2
 8008682:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	697a      	ldr	r2, [r7, #20]
 8008688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	685a      	ldr	r2, [r3, #4]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	693a      	ldr	r2, [r7, #16]
 800869c:	621a      	str	r2, [r3, #32]
}
 800869e:	bf00      	nop
 80086a0:	371c      	adds	r7, #28
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop
 80086ac:	40012c00 	.word	0x40012c00
 80086b0:	40013400 	.word	0x40013400
 80086b4:	40014000 	.word	0x40014000
 80086b8:	40014400 	.word	0x40014400
 80086bc:	40014800 	.word	0x40014800

080086c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b087      	sub	sp, #28
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6a1b      	ldr	r3, [r3, #32]
 80086d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6a1b      	ldr	r3, [r3, #32]
 80086d6:	f023 0201 	bic.w	r2, r3, #1
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	699b      	ldr	r3, [r3, #24]
 80086e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	011b      	lsls	r3, r3, #4
 80086f0:	693a      	ldr	r2, [r7, #16]
 80086f2:	4313      	orrs	r3, r2
 80086f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	f023 030a 	bic.w	r3, r3, #10
 80086fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80086fe:	697a      	ldr	r2, [r7, #20]
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	4313      	orrs	r3, r2
 8008704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	693a      	ldr	r2, [r7, #16]
 800870a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	697a      	ldr	r2, [r7, #20]
 8008710:	621a      	str	r2, [r3, #32]
}
 8008712:	bf00      	nop
 8008714:	371c      	adds	r7, #28
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr

0800871e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800871e:	b480      	push	{r7}
 8008720:	b087      	sub	sp, #28
 8008722:	af00      	add	r7, sp, #0
 8008724:	60f8      	str	r0, [r7, #12]
 8008726:	60b9      	str	r1, [r7, #8]
 8008728:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6a1b      	ldr	r3, [r3, #32]
 800872e:	f023 0210 	bic.w	r2, r3, #16
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6a1b      	ldr	r3, [r3, #32]
 8008740:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008748:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	031b      	lsls	r3, r3, #12
 800874e:	697a      	ldr	r2, [r7, #20]
 8008750:	4313      	orrs	r3, r2
 8008752:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800875a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	011b      	lsls	r3, r3, #4
 8008760:	693a      	ldr	r2, [r7, #16]
 8008762:	4313      	orrs	r3, r2
 8008764:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	697a      	ldr	r2, [r7, #20]
 800876a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	693a      	ldr	r2, [r7, #16]
 8008770:	621a      	str	r2, [r3, #32]
}
 8008772:	bf00      	nop
 8008774:	371c      	adds	r7, #28
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr

0800877e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800877e:	b480      	push	{r7}
 8008780:	b085      	sub	sp, #20
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
 8008786:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008794:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008796:	683a      	ldr	r2, [r7, #0]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	4313      	orrs	r3, r2
 800879c:	f043 0307 	orr.w	r3, r3, #7
 80087a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	609a      	str	r2, [r3, #8]
}
 80087a8:	bf00      	nop
 80087aa:	3714      	adds	r7, #20
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b087      	sub	sp, #28
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
 80087c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80087ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	021a      	lsls	r2, r3, #8
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	431a      	orrs	r2, r3
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	4313      	orrs	r3, r2
 80087dc:	697a      	ldr	r2, [r7, #20]
 80087de:	4313      	orrs	r3, r2
 80087e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	697a      	ldr	r2, [r7, #20]
 80087e6:	609a      	str	r2, [r3, #8]
}
 80087e8:	bf00      	nop
 80087ea:	371c      	adds	r7, #28
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b087      	sub	sp, #28
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	f003 031f 	and.w	r3, r3, #31
 8008806:	2201      	movs	r2, #1
 8008808:	fa02 f303 	lsl.w	r3, r2, r3
 800880c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	6a1a      	ldr	r2, [r3, #32]
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	43db      	mvns	r3, r3
 8008816:	401a      	ands	r2, r3
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6a1a      	ldr	r2, [r3, #32]
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	f003 031f 	and.w	r3, r3, #31
 8008826:	6879      	ldr	r1, [r7, #4]
 8008828:	fa01 f303 	lsl.w	r3, r1, r3
 800882c:	431a      	orrs	r2, r3
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	621a      	str	r2, [r3, #32]
}
 8008832:	bf00      	nop
 8008834:	371c      	adds	r7, #28
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr
	...

08008840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008840:	b480      	push	{r7}
 8008842:	b085      	sub	sp, #20
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008850:	2b01      	cmp	r3, #1
 8008852:	d101      	bne.n	8008858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008854:	2302      	movs	r3, #2
 8008856:	e068      	b.n	800892a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2202      	movs	r2, #2
 8008864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a2e      	ldr	r2, [pc, #184]	; (8008938 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d004      	beq.n	800888c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a2d      	ldr	r2, [pc, #180]	; (800893c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d108      	bne.n	800889e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008892:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	4313      	orrs	r3, r2
 800889c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	68fa      	ldr	r2, [r7, #12]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	68fa      	ldr	r2, [r7, #12]
 80088b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a1e      	ldr	r2, [pc, #120]	; (8008938 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d01d      	beq.n	80088fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088ca:	d018      	beq.n	80088fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a1b      	ldr	r2, [pc, #108]	; (8008940 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d013      	beq.n	80088fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a1a      	ldr	r2, [pc, #104]	; (8008944 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d00e      	beq.n	80088fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a18      	ldr	r2, [pc, #96]	; (8008948 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d009      	beq.n	80088fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a13      	ldr	r2, [pc, #76]	; (800893c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d004      	beq.n	80088fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a14      	ldr	r2, [pc, #80]	; (800894c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d10c      	bne.n	8008918 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008904:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	68ba      	ldr	r2, [r7, #8]
 800890c:	4313      	orrs	r3, r2
 800890e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	68ba      	ldr	r2, [r7, #8]
 8008916:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2201      	movs	r2, #1
 800891c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	3714      	adds	r7, #20
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	40012c00 	.word	0x40012c00
 800893c:	40013400 	.word	0x40013400
 8008940:	40000400 	.word	0x40000400
 8008944:	40000800 	.word	0x40000800
 8008948:	40000c00 	.word	0x40000c00
 800894c:	40014000 	.word	0x40014000

08008950 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008958:	bf00      	nop
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800896c:	bf00      	nop
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008980:	bf00      	nop
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d101      	bne.n	800899e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800899a:	2301      	movs	r3, #1
 800899c:	e040      	b.n	8008a20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d106      	bne.n	80089b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f7fa fd94 	bl	80034dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2224      	movs	r2, #36	; 0x24
 80089b8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f022 0201 	bic.w	r2, r2, #1
 80089c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fc94 	bl	80092f8 <UART_SetConfig>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d101      	bne.n	80089da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80089d6:	2301      	movs	r3, #1
 80089d8:	e022      	b.n	8008a20 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d002      	beq.n	80089e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 ff40 	bl	8009868 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	685a      	ldr	r2, [r3, #4]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80089f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	689a      	ldr	r2, [r3, #8]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f042 0201 	orr.w	r2, r2, #1
 8008a16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 ffc7 	bl	80099ac <UART_CheckIdleState>
 8008a1e:	4603      	mov	r3, r0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b08a      	sub	sp, #40	; 0x28
 8008a2c:	af02      	add	r7, sp, #8
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	60b9      	str	r1, [r7, #8]
 8008a32:	603b      	str	r3, [r7, #0]
 8008a34:	4613      	mov	r3, r2
 8008a36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a3c:	2b20      	cmp	r3, #32
 8008a3e:	f040 8082 	bne.w	8008b46 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d002      	beq.n	8008a4e <HAL_UART_Transmit+0x26>
 8008a48:	88fb      	ldrh	r3, [r7, #6]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d101      	bne.n	8008a52 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e07a      	b.n	8008b48 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d101      	bne.n	8008a60 <HAL_UART_Transmit+0x38>
 8008a5c:	2302      	movs	r3, #2
 8008a5e:	e073      	b.n	8008b48 <HAL_UART_Transmit+0x120>
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2221      	movs	r2, #33	; 0x21
 8008a74:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a76:	f7fa ff7d 	bl	8003974 <HAL_GetTick>
 8008a7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	88fa      	ldrh	r2, [r7, #6]
 8008a80:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	88fa      	ldrh	r2, [r7, #6]
 8008a88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a94:	d108      	bne.n	8008aa8 <HAL_UART_Transmit+0x80>
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	691b      	ldr	r3, [r3, #16]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d104      	bne.n	8008aa8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	61bb      	str	r3, [r7, #24]
 8008aa6:	e003      	b.n	8008ab0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008aac:	2300      	movs	r3, #0
 8008aae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008ab8:	e02d      	b.n	8008b16 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	9300      	str	r3, [sp, #0]
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	2180      	movs	r1, #128	; 0x80
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	f000 ffba 	bl	8009a3e <UART_WaitOnFlagUntilTimeout>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d001      	beq.n	8008ad4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	e039      	b.n	8008b48 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d10b      	bne.n	8008af2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	881a      	ldrh	r2, [r3, #0]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ae6:	b292      	uxth	r2, r2
 8008ae8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	3302      	adds	r3, #2
 8008aee:	61bb      	str	r3, [r7, #24]
 8008af0:	e008      	b.n	8008b04 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	781a      	ldrb	r2, [r3, #0]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	b292      	uxth	r2, r2
 8008afc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	3301      	adds	r3, #1
 8008b02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	b29a      	uxth	r2, r3
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d1cb      	bne.n	8008aba <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	9300      	str	r3, [sp, #0]
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	2140      	movs	r1, #64	; 0x40
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f000 ff86 	bl	8009a3e <UART_WaitOnFlagUntilTimeout>
 8008b32:	4603      	mov	r3, r0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d001      	beq.n	8008b3c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008b38:	2303      	movs	r3, #3
 8008b3a:	e005      	b.n	8008b48 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2220      	movs	r2, #32
 8008b40:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008b42:	2300      	movs	r3, #0
 8008b44:	e000      	b.n	8008b48 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008b46:	2302      	movs	r3, #2
  }
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3720      	adds	r7, #32
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b08a      	sub	sp, #40	; 0x28
 8008b54:	af02      	add	r7, sp, #8
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	603b      	str	r3, [r7, #0]
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b64:	2b20      	cmp	r3, #32
 8008b66:	f040 80bf 	bne.w	8008ce8 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d002      	beq.n	8008b76 <HAL_UART_Receive+0x26>
 8008b70:	88fb      	ldrh	r3, [r7, #6]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d101      	bne.n	8008b7a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	e0b7      	b.n	8008cea <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d101      	bne.n	8008b88 <HAL_UART_Receive+0x38>
 8008b84:	2302      	movs	r3, #2
 8008b86:	e0b0      	b.n	8008cea <HAL_UART_Receive+0x19a>
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2200      	movs	r2, #0
 8008b94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2222      	movs	r2, #34	; 0x22
 8008b9c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ba4:	f7fa fee6 	bl	8003974 <HAL_GetTick>
 8008ba8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	88fa      	ldrh	r2, [r7, #6]
 8008bae:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	88fa      	ldrh	r2, [r7, #6]
 8008bb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bc2:	d10e      	bne.n	8008be2 <HAL_UART_Receive+0x92>
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	691b      	ldr	r3, [r3, #16]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d105      	bne.n	8008bd8 <HAL_UART_Receive+0x88>
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008bd2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008bd6:	e02d      	b.n	8008c34 <HAL_UART_Receive+0xe4>
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	22ff      	movs	r2, #255	; 0xff
 8008bdc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008be0:	e028      	b.n	8008c34 <HAL_UART_Receive+0xe4>
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d10d      	bne.n	8008c06 <HAL_UART_Receive+0xb6>
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d104      	bne.n	8008bfc <HAL_UART_Receive+0xac>
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	22ff      	movs	r2, #255	; 0xff
 8008bf6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008bfa:	e01b      	b.n	8008c34 <HAL_UART_Receive+0xe4>
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	227f      	movs	r2, #127	; 0x7f
 8008c00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c04:	e016      	b.n	8008c34 <HAL_UART_Receive+0xe4>
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c0e:	d10d      	bne.n	8008c2c <HAL_UART_Receive+0xdc>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	691b      	ldr	r3, [r3, #16]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d104      	bne.n	8008c22 <HAL_UART_Receive+0xd2>
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	227f      	movs	r2, #127	; 0x7f
 8008c1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c20:	e008      	b.n	8008c34 <HAL_UART_Receive+0xe4>
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	223f      	movs	r2, #63	; 0x3f
 8008c26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c2a:	e003      	b.n	8008c34 <HAL_UART_Receive+0xe4>
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c3a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c44:	d108      	bne.n	8008c58 <HAL_UART_Receive+0x108>
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	691b      	ldr	r3, [r3, #16]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d104      	bne.n	8008c58 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	61bb      	str	r3, [r7, #24]
 8008c56:	e003      	b.n	8008c60 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008c68:	e033      	b.n	8008cd2 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	9300      	str	r3, [sp, #0]
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	2200      	movs	r2, #0
 8008c72:	2120      	movs	r1, #32
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f000 fee2 	bl	8009a3e <UART_WaitOnFlagUntilTimeout>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d001      	beq.n	8008c84 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8008c80:	2303      	movs	r3, #3
 8008c82:	e032      	b.n	8008cea <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d10c      	bne.n	8008ca4 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008c90:	b29a      	uxth	r2, r3
 8008c92:	8a7b      	ldrh	r3, [r7, #18]
 8008c94:	4013      	ands	r3, r2
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	3302      	adds	r3, #2
 8008ca0:	61bb      	str	r3, [r7, #24]
 8008ca2:	e00d      	b.n	8008cc0 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	b2da      	uxtb	r2, r3
 8008cae:	8a7b      	ldrh	r3, [r7, #18]
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	b2da      	uxtb	r2, r3
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	3b01      	subs	r3, #1
 8008cca:	b29a      	uxth	r2, r3
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1c5      	bne.n	8008c6a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2220      	movs	r2, #32
 8008ce2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	e000      	b.n	8008cea <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8008ce8:	2302      	movs	r3, #2
  }
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3720      	adds	r7, #32
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
	...

08008cf4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b0ba      	sub	sp, #232	; 0xe8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	69db      	ldr	r3, [r3, #28]
 8008d02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008d1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008d1e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008d22:	4013      	ands	r3, r2
 8008d24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008d28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d115      	bne.n	8008d5c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d34:	f003 0320 	and.w	r3, r3, #32
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d00f      	beq.n	8008d5c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d40:	f003 0320 	and.w	r3, r3, #32
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d009      	beq.n	8008d5c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f000 82a6 	beq.w	800929e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	4798      	blx	r3
      }
      return;
 8008d5a:	e2a0      	b.n	800929e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008d5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f000 8117 	beq.w	8008f94 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d6a:	f003 0301 	and.w	r3, r3, #1
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d106      	bne.n	8008d80 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008d72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008d76:	4b85      	ldr	r3, [pc, #532]	; (8008f8c <HAL_UART_IRQHandler+0x298>)
 8008d78:	4013      	ands	r3, r2
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	f000 810a 	beq.w	8008f94 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d84:	f003 0301 	and.w	r3, r3, #1
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d011      	beq.n	8008db0 <HAL_UART_IRQHandler+0xbc>
 8008d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d00b      	beq.n	8008db0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008da6:	f043 0201 	orr.w	r2, r3, #1
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008db4:	f003 0302 	and.w	r3, r3, #2
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d011      	beq.n	8008de0 <HAL_UART_IRQHandler+0xec>
 8008dbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008dc0:	f003 0301 	and.w	r3, r3, #1
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d00b      	beq.n	8008de0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2202      	movs	r2, #2
 8008dce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008dd6:	f043 0204 	orr.w	r2, r3, #4
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008de4:	f003 0304 	and.w	r3, r3, #4
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d011      	beq.n	8008e10 <HAL_UART_IRQHandler+0x11c>
 8008dec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008df0:	f003 0301 	and.w	r3, r3, #1
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d00b      	beq.n	8008e10 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2204      	movs	r2, #4
 8008dfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e06:	f043 0202 	orr.w	r2, r3, #2
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e14:	f003 0308 	and.w	r3, r3, #8
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d017      	beq.n	8008e4c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e20:	f003 0320 	and.w	r3, r3, #32
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d105      	bne.n	8008e34 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008e28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e2c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00b      	beq.n	8008e4c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2208      	movs	r2, #8
 8008e3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e42:	f043 0208 	orr.w	r2, r3, #8
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d012      	beq.n	8008e7e <HAL_UART_IRQHandler+0x18a>
 8008e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d00c      	beq.n	8008e7e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e74:	f043 0220 	orr.w	r2, r3, #32
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	f000 820c 	beq.w	80092a2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e8e:	f003 0320 	and.w	r3, r3, #32
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00d      	beq.n	8008eb2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e9a:	f003 0320 	and.w	r3, r3, #32
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d007      	beq.n	8008eb2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d003      	beq.n	8008eb2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008eb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ec6:	2b40      	cmp	r3, #64	; 0x40
 8008ec8:	d005      	beq.n	8008ed6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008eca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ece:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d04f      	beq.n	8008f76 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 fe75 	bl	8009bc6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ee6:	2b40      	cmp	r3, #64	; 0x40
 8008ee8:	d141      	bne.n	8008f6e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	3308      	adds	r3, #8
 8008ef0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ef8:	e853 3f00 	ldrex	r3, [r3]
 8008efc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008f00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	3308      	adds	r3, #8
 8008f12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008f16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008f1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008f22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008f26:	e841 2300 	strex	r3, r2, [r1]
 8008f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008f2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d1d9      	bne.n	8008eea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d013      	beq.n	8008f66 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f42:	4a13      	ldr	r2, [pc, #76]	; (8008f90 <HAL_UART_IRQHandler+0x29c>)
 8008f44:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7fa fe62 	bl	8003c14 <HAL_DMA_Abort_IT>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d017      	beq.n	8008f86 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008f60:	4610      	mov	r0, r2
 8008f62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f64:	e00f      	b.n	8008f86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 f9b0 	bl	80092cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f6c:	e00b      	b.n	8008f86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 f9ac 	bl	80092cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f74:	e007      	b.n	8008f86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 f9a8 	bl	80092cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008f84:	e18d      	b.n	80092a2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f86:	bf00      	nop
    return;
 8008f88:	e18b      	b.n	80092a2 <HAL_UART_IRQHandler+0x5ae>
 8008f8a:	bf00      	nop
 8008f8c:	04000120 	.word	0x04000120
 8008f90:	08009c8d 	.word	0x08009c8d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	f040 8146 	bne.w	800922a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fa2:	f003 0310 	and.w	r3, r3, #16
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	f000 813f 	beq.w	800922a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fb0:	f003 0310 	and.w	r3, r3, #16
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f000 8138 	beq.w	800922a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	2210      	movs	r2, #16
 8008fc0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fcc:	2b40      	cmp	r3, #64	; 0x40
 8008fce:	f040 80b4 	bne.w	800913a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008fde:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	f000 815f 	beq.w	80092a6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008fee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	f080 8157 	bcs.w	80092a6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008ffe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f003 0320 	and.w	r3, r3, #32
 800900e:	2b00      	cmp	r3, #0
 8009010:	f040 8085 	bne.w	800911e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009020:	e853 3f00 	ldrex	r3, [r3]
 8009024:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009028:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800902c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009030:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	461a      	mov	r2, r3
 800903a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800903e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009042:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009046:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800904a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800904e:	e841 2300 	strex	r3, r2, [r1]
 8009052:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009056:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1da      	bne.n	8009014 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	3308      	adds	r3, #8
 8009064:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009066:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009068:	e853 3f00 	ldrex	r3, [r3]
 800906c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800906e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009070:	f023 0301 	bic.w	r3, r3, #1
 8009074:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	3308      	adds	r3, #8
 800907e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009082:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009086:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009088:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800908a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800908e:	e841 2300 	strex	r3, r2, [r1]
 8009092:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1e1      	bne.n	800905e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	3308      	adds	r3, #8
 80090a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090a4:	e853 3f00 	ldrex	r3, [r3]
 80090a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80090aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	3308      	adds	r3, #8
 80090ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80090be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80090c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80090c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80090c6:	e841 2300 	strex	r3, r2, [r1]
 80090ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80090cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d1e3      	bne.n	800909a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2220      	movs	r2, #32
 80090d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090e6:	e853 3f00 	ldrex	r3, [r3]
 80090ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80090ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090ee:	f023 0310 	bic.w	r3, r3, #16
 80090f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	461a      	mov	r2, r3
 80090fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009100:	65bb      	str	r3, [r7, #88]	; 0x58
 8009102:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009104:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009106:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009108:	e841 2300 	strex	r3, r2, [r1]
 800910c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800910e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009110:	2b00      	cmp	r3, #0
 8009112:	d1e4      	bne.n	80090de <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009118:	4618      	mov	r0, r3
 800911a:	f7fa fd3d 	bl	8003b98 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800912a:	b29b      	uxth	r3, r3
 800912c:	1ad3      	subs	r3, r2, r3
 800912e:	b29b      	uxth	r3, r3
 8009130:	4619      	mov	r1, r3
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 f8d4 	bl	80092e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009138:	e0b5      	b.n	80092a6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009146:	b29b      	uxth	r3, r3
 8009148:	1ad3      	subs	r3, r2, r3
 800914a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009154:	b29b      	uxth	r3, r3
 8009156:	2b00      	cmp	r3, #0
 8009158:	f000 80a7 	beq.w	80092aa <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800915c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009160:	2b00      	cmp	r3, #0
 8009162:	f000 80a2 	beq.w	80092aa <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800916c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800916e:	e853 3f00 	ldrex	r3, [r3]
 8009172:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009176:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800917a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	461a      	mov	r2, r3
 8009184:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009188:	647b      	str	r3, [r7, #68]	; 0x44
 800918a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800918e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009190:	e841 2300 	strex	r3, r2, [r1]
 8009194:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009198:	2b00      	cmp	r3, #0
 800919a:	d1e4      	bne.n	8009166 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	3308      	adds	r3, #8
 80091a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a6:	e853 3f00 	ldrex	r3, [r3]
 80091aa:	623b      	str	r3, [r7, #32]
   return(result);
 80091ac:	6a3b      	ldr	r3, [r7, #32]
 80091ae:	f023 0301 	bic.w	r3, r3, #1
 80091b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	3308      	adds	r3, #8
 80091bc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80091c0:	633a      	str	r2, [r7, #48]	; 0x30
 80091c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091c8:	e841 2300 	strex	r3, r2, [r1]
 80091cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80091ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d1e3      	bne.n	800919c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2220      	movs	r2, #32
 80091d8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	e853 3f00 	ldrex	r3, [r3]
 80091f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f023 0310 	bic.w	r3, r3, #16
 80091fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	461a      	mov	r2, r3
 8009204:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009208:	61fb      	str	r3, [r7, #28]
 800920a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920c:	69b9      	ldr	r1, [r7, #24]
 800920e:	69fa      	ldr	r2, [r7, #28]
 8009210:	e841 2300 	strex	r3, r2, [r1]
 8009214:	617b      	str	r3, [r7, #20]
   return(result);
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d1e4      	bne.n	80091e6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800921c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009220:	4619      	mov	r1, r3
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 f85c 	bl	80092e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009228:	e03f      	b.n	80092aa <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800922a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800922e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00e      	beq.n	8009254 <HAL_UART_IRQHandler+0x560>
 8009236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800923a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800923e:	2b00      	cmp	r3, #0
 8009240:	d008      	beq.n	8009254 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800924a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 fd5d 	bl	8009d0c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009252:	e02d      	b.n	80092b0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00e      	beq.n	800927e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009268:	2b00      	cmp	r3, #0
 800926a:	d008      	beq.n	800927e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009270:	2b00      	cmp	r3, #0
 8009272:	d01c      	beq.n	80092ae <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	4798      	blx	r3
    }
    return;
 800927c:	e017      	b.n	80092ae <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800927e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009286:	2b00      	cmp	r3, #0
 8009288:	d012      	beq.n	80092b0 <HAL_UART_IRQHandler+0x5bc>
 800928a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800928e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00c      	beq.n	80092b0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 fd0e 	bl	8009cb8 <UART_EndTransmit_IT>
    return;
 800929c:	e008      	b.n	80092b0 <HAL_UART_IRQHandler+0x5bc>
      return;
 800929e:	bf00      	nop
 80092a0:	e006      	b.n	80092b0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80092a2:	bf00      	nop
 80092a4:	e004      	b.n	80092b0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80092a6:	bf00      	nop
 80092a8:	e002      	b.n	80092b0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80092aa:	bf00      	nop
 80092ac:	e000      	b.n	80092b0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80092ae:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80092b0:	37e8      	adds	r7, #232	; 0xe8
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop

080092b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80092c0:	bf00      	nop
 80092c2:	370c      	adds	r7, #12
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80092d4:	bf00      	nop
 80092d6:	370c      	adds	r7, #12
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr

080092e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b083      	sub	sp, #12
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	460b      	mov	r3, r1
 80092ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80092ec:	bf00      	nop
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092fc:	b08a      	sub	sp, #40	; 0x28
 80092fe:	af00      	add	r7, sp, #0
 8009300:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009302:	2300      	movs	r3, #0
 8009304:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	689a      	ldr	r2, [r3, #8]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	691b      	ldr	r3, [r3, #16]
 8009310:	431a      	orrs	r2, r3
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	695b      	ldr	r3, [r3, #20]
 8009316:	431a      	orrs	r2, r3
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	69db      	ldr	r3, [r3, #28]
 800931c:	4313      	orrs	r3, r2
 800931e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	4ba4      	ldr	r3, [pc, #656]	; (80095b8 <UART_SetConfig+0x2c0>)
 8009328:	4013      	ands	r3, r2
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	6812      	ldr	r2, [r2, #0]
 800932e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009330:	430b      	orrs	r3, r1
 8009332:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	68da      	ldr	r2, [r3, #12]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	430a      	orrs	r2, r1
 8009348:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	699b      	ldr	r3, [r3, #24]
 800934e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a99      	ldr	r2, [pc, #612]	; (80095bc <UART_SetConfig+0x2c4>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d004      	beq.n	8009364 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6a1b      	ldr	r3, [r3, #32]
 800935e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009360:	4313      	orrs	r3, r2
 8009362:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009374:	430a      	orrs	r2, r1
 8009376:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a90      	ldr	r2, [pc, #576]	; (80095c0 <UART_SetConfig+0x2c8>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d126      	bne.n	80093d0 <UART_SetConfig+0xd8>
 8009382:	4b90      	ldr	r3, [pc, #576]	; (80095c4 <UART_SetConfig+0x2cc>)
 8009384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009388:	f003 0303 	and.w	r3, r3, #3
 800938c:	2b03      	cmp	r3, #3
 800938e:	d81b      	bhi.n	80093c8 <UART_SetConfig+0xd0>
 8009390:	a201      	add	r2, pc, #4	; (adr r2, 8009398 <UART_SetConfig+0xa0>)
 8009392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009396:	bf00      	nop
 8009398:	080093a9 	.word	0x080093a9
 800939c:	080093b9 	.word	0x080093b9
 80093a0:	080093b1 	.word	0x080093b1
 80093a4:	080093c1 	.word	0x080093c1
 80093a8:	2301      	movs	r3, #1
 80093aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093ae:	e116      	b.n	80095de <UART_SetConfig+0x2e6>
 80093b0:	2302      	movs	r3, #2
 80093b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093b6:	e112      	b.n	80095de <UART_SetConfig+0x2e6>
 80093b8:	2304      	movs	r3, #4
 80093ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093be:	e10e      	b.n	80095de <UART_SetConfig+0x2e6>
 80093c0:	2308      	movs	r3, #8
 80093c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093c6:	e10a      	b.n	80095de <UART_SetConfig+0x2e6>
 80093c8:	2310      	movs	r3, #16
 80093ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093ce:	e106      	b.n	80095de <UART_SetConfig+0x2e6>
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a7c      	ldr	r2, [pc, #496]	; (80095c8 <UART_SetConfig+0x2d0>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d138      	bne.n	800944c <UART_SetConfig+0x154>
 80093da:	4b7a      	ldr	r3, [pc, #488]	; (80095c4 <UART_SetConfig+0x2cc>)
 80093dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093e0:	f003 030c 	and.w	r3, r3, #12
 80093e4:	2b0c      	cmp	r3, #12
 80093e6:	d82d      	bhi.n	8009444 <UART_SetConfig+0x14c>
 80093e8:	a201      	add	r2, pc, #4	; (adr r2, 80093f0 <UART_SetConfig+0xf8>)
 80093ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ee:	bf00      	nop
 80093f0:	08009425 	.word	0x08009425
 80093f4:	08009445 	.word	0x08009445
 80093f8:	08009445 	.word	0x08009445
 80093fc:	08009445 	.word	0x08009445
 8009400:	08009435 	.word	0x08009435
 8009404:	08009445 	.word	0x08009445
 8009408:	08009445 	.word	0x08009445
 800940c:	08009445 	.word	0x08009445
 8009410:	0800942d 	.word	0x0800942d
 8009414:	08009445 	.word	0x08009445
 8009418:	08009445 	.word	0x08009445
 800941c:	08009445 	.word	0x08009445
 8009420:	0800943d 	.word	0x0800943d
 8009424:	2300      	movs	r3, #0
 8009426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800942a:	e0d8      	b.n	80095de <UART_SetConfig+0x2e6>
 800942c:	2302      	movs	r3, #2
 800942e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009432:	e0d4      	b.n	80095de <UART_SetConfig+0x2e6>
 8009434:	2304      	movs	r3, #4
 8009436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800943a:	e0d0      	b.n	80095de <UART_SetConfig+0x2e6>
 800943c:	2308      	movs	r3, #8
 800943e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009442:	e0cc      	b.n	80095de <UART_SetConfig+0x2e6>
 8009444:	2310      	movs	r3, #16
 8009446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800944a:	e0c8      	b.n	80095de <UART_SetConfig+0x2e6>
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a5e      	ldr	r2, [pc, #376]	; (80095cc <UART_SetConfig+0x2d4>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d125      	bne.n	80094a2 <UART_SetConfig+0x1aa>
 8009456:	4b5b      	ldr	r3, [pc, #364]	; (80095c4 <UART_SetConfig+0x2cc>)
 8009458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800945c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009460:	2b30      	cmp	r3, #48	; 0x30
 8009462:	d016      	beq.n	8009492 <UART_SetConfig+0x19a>
 8009464:	2b30      	cmp	r3, #48	; 0x30
 8009466:	d818      	bhi.n	800949a <UART_SetConfig+0x1a2>
 8009468:	2b20      	cmp	r3, #32
 800946a:	d00a      	beq.n	8009482 <UART_SetConfig+0x18a>
 800946c:	2b20      	cmp	r3, #32
 800946e:	d814      	bhi.n	800949a <UART_SetConfig+0x1a2>
 8009470:	2b00      	cmp	r3, #0
 8009472:	d002      	beq.n	800947a <UART_SetConfig+0x182>
 8009474:	2b10      	cmp	r3, #16
 8009476:	d008      	beq.n	800948a <UART_SetConfig+0x192>
 8009478:	e00f      	b.n	800949a <UART_SetConfig+0x1a2>
 800947a:	2300      	movs	r3, #0
 800947c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009480:	e0ad      	b.n	80095de <UART_SetConfig+0x2e6>
 8009482:	2302      	movs	r3, #2
 8009484:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009488:	e0a9      	b.n	80095de <UART_SetConfig+0x2e6>
 800948a:	2304      	movs	r3, #4
 800948c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009490:	e0a5      	b.n	80095de <UART_SetConfig+0x2e6>
 8009492:	2308      	movs	r3, #8
 8009494:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009498:	e0a1      	b.n	80095de <UART_SetConfig+0x2e6>
 800949a:	2310      	movs	r3, #16
 800949c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094a0:	e09d      	b.n	80095de <UART_SetConfig+0x2e6>
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a4a      	ldr	r2, [pc, #296]	; (80095d0 <UART_SetConfig+0x2d8>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d125      	bne.n	80094f8 <UART_SetConfig+0x200>
 80094ac:	4b45      	ldr	r3, [pc, #276]	; (80095c4 <UART_SetConfig+0x2cc>)
 80094ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80094b6:	2bc0      	cmp	r3, #192	; 0xc0
 80094b8:	d016      	beq.n	80094e8 <UART_SetConfig+0x1f0>
 80094ba:	2bc0      	cmp	r3, #192	; 0xc0
 80094bc:	d818      	bhi.n	80094f0 <UART_SetConfig+0x1f8>
 80094be:	2b80      	cmp	r3, #128	; 0x80
 80094c0:	d00a      	beq.n	80094d8 <UART_SetConfig+0x1e0>
 80094c2:	2b80      	cmp	r3, #128	; 0x80
 80094c4:	d814      	bhi.n	80094f0 <UART_SetConfig+0x1f8>
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d002      	beq.n	80094d0 <UART_SetConfig+0x1d8>
 80094ca:	2b40      	cmp	r3, #64	; 0x40
 80094cc:	d008      	beq.n	80094e0 <UART_SetConfig+0x1e8>
 80094ce:	e00f      	b.n	80094f0 <UART_SetConfig+0x1f8>
 80094d0:	2300      	movs	r3, #0
 80094d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094d6:	e082      	b.n	80095de <UART_SetConfig+0x2e6>
 80094d8:	2302      	movs	r3, #2
 80094da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094de:	e07e      	b.n	80095de <UART_SetConfig+0x2e6>
 80094e0:	2304      	movs	r3, #4
 80094e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094e6:	e07a      	b.n	80095de <UART_SetConfig+0x2e6>
 80094e8:	2308      	movs	r3, #8
 80094ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094ee:	e076      	b.n	80095de <UART_SetConfig+0x2e6>
 80094f0:	2310      	movs	r3, #16
 80094f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094f6:	e072      	b.n	80095de <UART_SetConfig+0x2e6>
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a35      	ldr	r2, [pc, #212]	; (80095d4 <UART_SetConfig+0x2dc>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d12a      	bne.n	8009558 <UART_SetConfig+0x260>
 8009502:	4b30      	ldr	r3, [pc, #192]	; (80095c4 <UART_SetConfig+0x2cc>)
 8009504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009508:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800950c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009510:	d01a      	beq.n	8009548 <UART_SetConfig+0x250>
 8009512:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009516:	d81b      	bhi.n	8009550 <UART_SetConfig+0x258>
 8009518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800951c:	d00c      	beq.n	8009538 <UART_SetConfig+0x240>
 800951e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009522:	d815      	bhi.n	8009550 <UART_SetConfig+0x258>
 8009524:	2b00      	cmp	r3, #0
 8009526:	d003      	beq.n	8009530 <UART_SetConfig+0x238>
 8009528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800952c:	d008      	beq.n	8009540 <UART_SetConfig+0x248>
 800952e:	e00f      	b.n	8009550 <UART_SetConfig+0x258>
 8009530:	2300      	movs	r3, #0
 8009532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009536:	e052      	b.n	80095de <UART_SetConfig+0x2e6>
 8009538:	2302      	movs	r3, #2
 800953a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800953e:	e04e      	b.n	80095de <UART_SetConfig+0x2e6>
 8009540:	2304      	movs	r3, #4
 8009542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009546:	e04a      	b.n	80095de <UART_SetConfig+0x2e6>
 8009548:	2308      	movs	r3, #8
 800954a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800954e:	e046      	b.n	80095de <UART_SetConfig+0x2e6>
 8009550:	2310      	movs	r3, #16
 8009552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009556:	e042      	b.n	80095de <UART_SetConfig+0x2e6>
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a17      	ldr	r2, [pc, #92]	; (80095bc <UART_SetConfig+0x2c4>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d13a      	bne.n	80095d8 <UART_SetConfig+0x2e0>
 8009562:	4b18      	ldr	r3, [pc, #96]	; (80095c4 <UART_SetConfig+0x2cc>)
 8009564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009568:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800956c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009570:	d01a      	beq.n	80095a8 <UART_SetConfig+0x2b0>
 8009572:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009576:	d81b      	bhi.n	80095b0 <UART_SetConfig+0x2b8>
 8009578:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800957c:	d00c      	beq.n	8009598 <UART_SetConfig+0x2a0>
 800957e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009582:	d815      	bhi.n	80095b0 <UART_SetConfig+0x2b8>
 8009584:	2b00      	cmp	r3, #0
 8009586:	d003      	beq.n	8009590 <UART_SetConfig+0x298>
 8009588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800958c:	d008      	beq.n	80095a0 <UART_SetConfig+0x2a8>
 800958e:	e00f      	b.n	80095b0 <UART_SetConfig+0x2b8>
 8009590:	2300      	movs	r3, #0
 8009592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009596:	e022      	b.n	80095de <UART_SetConfig+0x2e6>
 8009598:	2302      	movs	r3, #2
 800959a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800959e:	e01e      	b.n	80095de <UART_SetConfig+0x2e6>
 80095a0:	2304      	movs	r3, #4
 80095a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095a6:	e01a      	b.n	80095de <UART_SetConfig+0x2e6>
 80095a8:	2308      	movs	r3, #8
 80095aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095ae:	e016      	b.n	80095de <UART_SetConfig+0x2e6>
 80095b0:	2310      	movs	r3, #16
 80095b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095b6:	e012      	b.n	80095de <UART_SetConfig+0x2e6>
 80095b8:	efff69f3 	.word	0xefff69f3
 80095bc:	40008000 	.word	0x40008000
 80095c0:	40013800 	.word	0x40013800
 80095c4:	40021000 	.word	0x40021000
 80095c8:	40004400 	.word	0x40004400
 80095cc:	40004800 	.word	0x40004800
 80095d0:	40004c00 	.word	0x40004c00
 80095d4:	40005000 	.word	0x40005000
 80095d8:	2310      	movs	r3, #16
 80095da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a9f      	ldr	r2, [pc, #636]	; (8009860 <UART_SetConfig+0x568>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d17a      	bne.n	80096de <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80095e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80095ec:	2b08      	cmp	r3, #8
 80095ee:	d824      	bhi.n	800963a <UART_SetConfig+0x342>
 80095f0:	a201      	add	r2, pc, #4	; (adr r2, 80095f8 <UART_SetConfig+0x300>)
 80095f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f6:	bf00      	nop
 80095f8:	0800961d 	.word	0x0800961d
 80095fc:	0800963b 	.word	0x0800963b
 8009600:	08009625 	.word	0x08009625
 8009604:	0800963b 	.word	0x0800963b
 8009608:	0800962b 	.word	0x0800962b
 800960c:	0800963b 	.word	0x0800963b
 8009610:	0800963b 	.word	0x0800963b
 8009614:	0800963b 	.word	0x0800963b
 8009618:	08009633 	.word	0x08009633
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800961c:	f7fc fbb0 	bl	8005d80 <HAL_RCC_GetPCLK1Freq>
 8009620:	61f8      	str	r0, [r7, #28]
        break;
 8009622:	e010      	b.n	8009646 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009624:	4b8f      	ldr	r3, [pc, #572]	; (8009864 <UART_SetConfig+0x56c>)
 8009626:	61fb      	str	r3, [r7, #28]
        break;
 8009628:	e00d      	b.n	8009646 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800962a:	f7fc fb11 	bl	8005c50 <HAL_RCC_GetSysClockFreq>
 800962e:	61f8      	str	r0, [r7, #28]
        break;
 8009630:	e009      	b.n	8009646 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009636:	61fb      	str	r3, [r7, #28]
        break;
 8009638:	e005      	b.n	8009646 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800963a:	2300      	movs	r3, #0
 800963c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800963e:	2301      	movs	r3, #1
 8009640:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009644:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009646:	69fb      	ldr	r3, [r7, #28]
 8009648:	2b00      	cmp	r3, #0
 800964a:	f000 80fb 	beq.w	8009844 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	685a      	ldr	r2, [r3, #4]
 8009652:	4613      	mov	r3, r2
 8009654:	005b      	lsls	r3, r3, #1
 8009656:	4413      	add	r3, r2
 8009658:	69fa      	ldr	r2, [r7, #28]
 800965a:	429a      	cmp	r2, r3
 800965c:	d305      	bcc.n	800966a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009664:	69fa      	ldr	r2, [r7, #28]
 8009666:	429a      	cmp	r2, r3
 8009668:	d903      	bls.n	8009672 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009670:	e0e8      	b.n	8009844 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	2200      	movs	r2, #0
 8009676:	461c      	mov	r4, r3
 8009678:	4615      	mov	r5, r2
 800967a:	f04f 0200 	mov.w	r2, #0
 800967e:	f04f 0300 	mov.w	r3, #0
 8009682:	022b      	lsls	r3, r5, #8
 8009684:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009688:	0222      	lsls	r2, r4, #8
 800968a:	68f9      	ldr	r1, [r7, #12]
 800968c:	6849      	ldr	r1, [r1, #4]
 800968e:	0849      	lsrs	r1, r1, #1
 8009690:	2000      	movs	r0, #0
 8009692:	4688      	mov	r8, r1
 8009694:	4681      	mov	r9, r0
 8009696:	eb12 0a08 	adds.w	sl, r2, r8
 800969a:	eb43 0b09 	adc.w	fp, r3, r9
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	603b      	str	r3, [r7, #0]
 80096a6:	607a      	str	r2, [r7, #4]
 80096a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096ac:	4650      	mov	r0, sl
 80096ae:	4659      	mov	r1, fp
 80096b0:	f7f7 fa8a 	bl	8000bc8 <__aeabi_uldivmod>
 80096b4:	4602      	mov	r2, r0
 80096b6:	460b      	mov	r3, r1
 80096b8:	4613      	mov	r3, r2
 80096ba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096c2:	d308      	bcc.n	80096d6 <UART_SetConfig+0x3de>
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096ca:	d204      	bcs.n	80096d6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	69ba      	ldr	r2, [r7, #24]
 80096d2:	60da      	str	r2, [r3, #12]
 80096d4:	e0b6      	b.n	8009844 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80096dc:	e0b2      	b.n	8009844 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	69db      	ldr	r3, [r3, #28]
 80096e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096e6:	d15e      	bne.n	80097a6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80096e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80096ec:	2b08      	cmp	r3, #8
 80096ee:	d828      	bhi.n	8009742 <UART_SetConfig+0x44a>
 80096f0:	a201      	add	r2, pc, #4	; (adr r2, 80096f8 <UART_SetConfig+0x400>)
 80096f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f6:	bf00      	nop
 80096f8:	0800971d 	.word	0x0800971d
 80096fc:	08009725 	.word	0x08009725
 8009700:	0800972d 	.word	0x0800972d
 8009704:	08009743 	.word	0x08009743
 8009708:	08009733 	.word	0x08009733
 800970c:	08009743 	.word	0x08009743
 8009710:	08009743 	.word	0x08009743
 8009714:	08009743 	.word	0x08009743
 8009718:	0800973b 	.word	0x0800973b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800971c:	f7fc fb30 	bl	8005d80 <HAL_RCC_GetPCLK1Freq>
 8009720:	61f8      	str	r0, [r7, #28]
        break;
 8009722:	e014      	b.n	800974e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009724:	f7fc fb42 	bl	8005dac <HAL_RCC_GetPCLK2Freq>
 8009728:	61f8      	str	r0, [r7, #28]
        break;
 800972a:	e010      	b.n	800974e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800972c:	4b4d      	ldr	r3, [pc, #308]	; (8009864 <UART_SetConfig+0x56c>)
 800972e:	61fb      	str	r3, [r7, #28]
        break;
 8009730:	e00d      	b.n	800974e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009732:	f7fc fa8d 	bl	8005c50 <HAL_RCC_GetSysClockFreq>
 8009736:	61f8      	str	r0, [r7, #28]
        break;
 8009738:	e009      	b.n	800974e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800973a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800973e:	61fb      	str	r3, [r7, #28]
        break;
 8009740:	e005      	b.n	800974e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8009742:	2300      	movs	r3, #0
 8009744:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800974c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d077      	beq.n	8009844 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	005a      	lsls	r2, r3, #1
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	085b      	lsrs	r3, r3, #1
 800975e:	441a      	add	r2, r3
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	fbb2 f3f3 	udiv	r3, r2, r3
 8009768:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	2b0f      	cmp	r3, #15
 800976e:	d916      	bls.n	800979e <UART_SetConfig+0x4a6>
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009776:	d212      	bcs.n	800979e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009778:	69bb      	ldr	r3, [r7, #24]
 800977a:	b29b      	uxth	r3, r3
 800977c:	f023 030f 	bic.w	r3, r3, #15
 8009780:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009782:	69bb      	ldr	r3, [r7, #24]
 8009784:	085b      	lsrs	r3, r3, #1
 8009786:	b29b      	uxth	r3, r3
 8009788:	f003 0307 	and.w	r3, r3, #7
 800978c:	b29a      	uxth	r2, r3
 800978e:	8afb      	ldrh	r3, [r7, #22]
 8009790:	4313      	orrs	r3, r2
 8009792:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	8afa      	ldrh	r2, [r7, #22]
 800979a:	60da      	str	r2, [r3, #12]
 800979c:	e052      	b.n	8009844 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800979e:	2301      	movs	r3, #1
 80097a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80097a4:	e04e      	b.n	8009844 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80097a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80097aa:	2b08      	cmp	r3, #8
 80097ac:	d827      	bhi.n	80097fe <UART_SetConfig+0x506>
 80097ae:	a201      	add	r2, pc, #4	; (adr r2, 80097b4 <UART_SetConfig+0x4bc>)
 80097b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b4:	080097d9 	.word	0x080097d9
 80097b8:	080097e1 	.word	0x080097e1
 80097bc:	080097e9 	.word	0x080097e9
 80097c0:	080097ff 	.word	0x080097ff
 80097c4:	080097ef 	.word	0x080097ef
 80097c8:	080097ff 	.word	0x080097ff
 80097cc:	080097ff 	.word	0x080097ff
 80097d0:	080097ff 	.word	0x080097ff
 80097d4:	080097f7 	.word	0x080097f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097d8:	f7fc fad2 	bl	8005d80 <HAL_RCC_GetPCLK1Freq>
 80097dc:	61f8      	str	r0, [r7, #28]
        break;
 80097de:	e014      	b.n	800980a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097e0:	f7fc fae4 	bl	8005dac <HAL_RCC_GetPCLK2Freq>
 80097e4:	61f8      	str	r0, [r7, #28]
        break;
 80097e6:	e010      	b.n	800980a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80097e8:	4b1e      	ldr	r3, [pc, #120]	; (8009864 <UART_SetConfig+0x56c>)
 80097ea:	61fb      	str	r3, [r7, #28]
        break;
 80097ec:	e00d      	b.n	800980a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80097ee:	f7fc fa2f 	bl	8005c50 <HAL_RCC_GetSysClockFreq>
 80097f2:	61f8      	str	r0, [r7, #28]
        break;
 80097f4:	e009      	b.n	800980a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097fa:	61fb      	str	r3, [r7, #28]
        break;
 80097fc:	e005      	b.n	800980a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80097fe:	2300      	movs	r3, #0
 8009800:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009808:	bf00      	nop
    }

    if (pclk != 0U)
 800980a:	69fb      	ldr	r3, [r7, #28]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d019      	beq.n	8009844 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	085a      	lsrs	r2, r3, #1
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	441a      	add	r2, r3
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009822:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	2b0f      	cmp	r3, #15
 8009828:	d909      	bls.n	800983e <UART_SetConfig+0x546>
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009830:	d205      	bcs.n	800983e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	b29a      	uxth	r2, r3
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	60da      	str	r2, [r3, #12]
 800983c:	e002      	b.n	8009844 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800983e:	2301      	movs	r3, #1
 8009840:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2200      	movs	r2, #0
 8009848:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2200      	movs	r2, #0
 800984e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009850:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009854:	4618      	mov	r0, r3
 8009856:	3728      	adds	r7, #40	; 0x28
 8009858:	46bd      	mov	sp, r7
 800985a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800985e:	bf00      	nop
 8009860:	40008000 	.word	0x40008000
 8009864:	00f42400 	.word	0x00f42400

08009868 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009874:	f003 0301 	and.w	r3, r3, #1
 8009878:	2b00      	cmp	r3, #0
 800987a:	d00a      	beq.n	8009892 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	430a      	orrs	r2, r1
 8009890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009896:	f003 0302 	and.w	r3, r3, #2
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00a      	beq.n	80098b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	430a      	orrs	r2, r1
 80098b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b8:	f003 0304 	and.w	r3, r3, #4
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d00a      	beq.n	80098d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	430a      	orrs	r2, r1
 80098d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098da:	f003 0308 	and.w	r3, r3, #8
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d00a      	beq.n	80098f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	430a      	orrs	r2, r1
 80098f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098fc:	f003 0310 	and.w	r3, r3, #16
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00a      	beq.n	800991a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	430a      	orrs	r2, r1
 8009918:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800991e:	f003 0320 	and.w	r3, r3, #32
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00a      	beq.n	800993c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	689b      	ldr	r3, [r3, #8]
 800992c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	430a      	orrs	r2, r1
 800993a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009944:	2b00      	cmp	r3, #0
 8009946:	d01a      	beq.n	800997e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	430a      	orrs	r2, r1
 800995c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009962:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009966:	d10a      	bne.n	800997e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	430a      	orrs	r2, r1
 800997c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00a      	beq.n	80099a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	430a      	orrs	r2, r1
 800999e:	605a      	str	r2, [r3, #4]
  }
}
 80099a0:	bf00      	nop
 80099a2:	370c      	adds	r7, #12
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b086      	sub	sp, #24
 80099b0:	af02      	add	r7, sp, #8
 80099b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80099bc:	f7f9 ffda 	bl	8003974 <HAL_GetTick>
 80099c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f003 0308 	and.w	r3, r3, #8
 80099cc:	2b08      	cmp	r3, #8
 80099ce:	d10e      	bne.n	80099ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80099d4:	9300      	str	r3, [sp, #0]
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2200      	movs	r2, #0
 80099da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 f82d 	bl	8009a3e <UART_WaitOnFlagUntilTimeout>
 80099e4:	4603      	mov	r3, r0
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d001      	beq.n	80099ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099ea:	2303      	movs	r3, #3
 80099ec:	e023      	b.n	8009a36 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f003 0304 	and.w	r3, r3, #4
 80099f8:	2b04      	cmp	r3, #4
 80099fa:	d10e      	bne.n	8009a1a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009a00:	9300      	str	r3, [sp, #0]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2200      	movs	r2, #0
 8009a06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 f817 	bl	8009a3e <UART_WaitOnFlagUntilTimeout>
 8009a10:	4603      	mov	r3, r0
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d001      	beq.n	8009a1a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a16:	2303      	movs	r3, #3
 8009a18:	e00d      	b.n	8009a36 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2220      	movs	r2, #32
 8009a1e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2220      	movs	r2, #32
 8009a24:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b09c      	sub	sp, #112	; 0x70
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	60f8      	str	r0, [r7, #12]
 8009a46:	60b9      	str	r1, [r7, #8]
 8009a48:	603b      	str	r3, [r7, #0]
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a4e:	e0a5      	b.n	8009b9c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a56:	f000 80a1 	beq.w	8009b9c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a5a:	f7f9 ff8b 	bl	8003974 <HAL_GetTick>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	1ad3      	subs	r3, r2, r3
 8009a64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d302      	bcc.n	8009a70 <UART_WaitOnFlagUntilTimeout+0x32>
 8009a6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d13e      	bne.n	8009aee <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a78:	e853 3f00 	ldrex	r3, [r3]
 8009a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009a84:	667b      	str	r3, [r7, #100]	; 0x64
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a90:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009a94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009a96:	e841 2300 	strex	r3, r2, [r1]
 8009a9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d1e6      	bne.n	8009a70 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	3308      	adds	r3, #8
 8009aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aac:	e853 3f00 	ldrex	r3, [r3]
 8009ab0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab4:	f023 0301 	bic.w	r3, r3, #1
 8009ab8:	663b      	str	r3, [r7, #96]	; 0x60
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	3308      	adds	r3, #8
 8009ac0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009ac2:	64ba      	str	r2, [r7, #72]	; 0x48
 8009ac4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009ac8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009aca:	e841 2300 	strex	r3, r2, [r1]
 8009ace:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d1e5      	bne.n	8009aa2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2220      	movs	r2, #32
 8009ada:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2220      	movs	r2, #32
 8009ae0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009aea:	2303      	movs	r3, #3
 8009aec:	e067      	b.n	8009bbe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f003 0304 	and.w	r3, r3, #4
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d04f      	beq.n	8009b9c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	69db      	ldr	r3, [r3, #28]
 8009b02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b0a:	d147      	bne.n	8009b9c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b14:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b1e:	e853 3f00 	ldrex	r3, [r3]
 8009b22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009b2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	461a      	mov	r2, r3
 8009b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b34:	637b      	str	r3, [r7, #52]	; 0x34
 8009b36:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b3c:	e841 2300 	strex	r3, r2, [r1]
 8009b40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d1e6      	bne.n	8009b16 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	3308      	adds	r3, #8
 8009b4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	e853 3f00 	ldrex	r3, [r3]
 8009b56:	613b      	str	r3, [r7, #16]
   return(result);
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	f023 0301 	bic.w	r3, r3, #1
 8009b5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	3308      	adds	r3, #8
 8009b66:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009b68:	623a      	str	r2, [r7, #32]
 8009b6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6c:	69f9      	ldr	r1, [r7, #28]
 8009b6e:	6a3a      	ldr	r2, [r7, #32]
 8009b70:	e841 2300 	strex	r3, r2, [r1]
 8009b74:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b76:	69bb      	ldr	r3, [r7, #24]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1e5      	bne.n	8009b48 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2220      	movs	r2, #32
 8009b80:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2220      	movs	r2, #32
 8009b86:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2220      	movs	r2, #32
 8009b8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2200      	movs	r2, #0
 8009b94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009b98:	2303      	movs	r3, #3
 8009b9a:	e010      	b.n	8009bbe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	69da      	ldr	r2, [r3, #28]
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	4013      	ands	r3, r2
 8009ba6:	68ba      	ldr	r2, [r7, #8]
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	bf0c      	ite	eq
 8009bac:	2301      	moveq	r3, #1
 8009bae:	2300      	movne	r3, #0
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	79fb      	ldrb	r3, [r7, #7]
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	f43f af4a 	beq.w	8009a50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009bbc:	2300      	movs	r3, #0
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3770      	adds	r7, #112	; 0x70
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009bc6:	b480      	push	{r7}
 8009bc8:	b095      	sub	sp, #84	; 0x54
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bd6:	e853 3f00 	ldrex	r3, [r3]
 8009bda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009be2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	461a      	mov	r2, r3
 8009bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bec:	643b      	str	r3, [r7, #64]	; 0x40
 8009bee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009bf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009bf4:	e841 2300 	strex	r3, r2, [r1]
 8009bf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d1e6      	bne.n	8009bce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	3308      	adds	r3, #8
 8009c06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c08:	6a3b      	ldr	r3, [r7, #32]
 8009c0a:	e853 3f00 	ldrex	r3, [r3]
 8009c0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	f023 0301 	bic.w	r3, r3, #1
 8009c16:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	3308      	adds	r3, #8
 8009c1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009c22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c28:	e841 2300 	strex	r3, r2, [r1]
 8009c2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d1e5      	bne.n	8009c00 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d118      	bne.n	8009c6e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	e853 3f00 	ldrex	r3, [r3]
 8009c48:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	f023 0310 	bic.w	r3, r3, #16
 8009c50:	647b      	str	r3, [r7, #68]	; 0x44
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	461a      	mov	r2, r3
 8009c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c5a:	61bb      	str	r3, [r7, #24]
 8009c5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5e:	6979      	ldr	r1, [r7, #20]
 8009c60:	69ba      	ldr	r2, [r7, #24]
 8009c62:	e841 2300 	strex	r3, r2, [r1]
 8009c66:	613b      	str	r3, [r7, #16]
   return(result);
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d1e6      	bne.n	8009c3c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2220      	movs	r2, #32
 8009c72:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009c80:	bf00      	nop
 8009c82:	3754      	adds	r7, #84	; 0x54
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	f7ff fb0e 	bl	80092cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009cb0:	bf00      	nop
 8009cb2:	3710      	adds	r7, #16
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b088      	sub	sp, #32
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	e853 3f00 	ldrex	r3, [r3]
 8009ccc:	60bb      	str	r3, [r7, #8]
   return(result);
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cd4:	61fb      	str	r3, [r7, #28]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	461a      	mov	r2, r3
 8009cdc:	69fb      	ldr	r3, [r7, #28]
 8009cde:	61bb      	str	r3, [r7, #24]
 8009ce0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce2:	6979      	ldr	r1, [r7, #20]
 8009ce4:	69ba      	ldr	r2, [r7, #24]
 8009ce6:	e841 2300 	strex	r3, r2, [r1]
 8009cea:	613b      	str	r3, [r7, #16]
   return(result);
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d1e6      	bne.n	8009cc0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2220      	movs	r2, #32
 8009cf6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f7ff fada 	bl	80092b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d04:	bf00      	nop
 8009d06:	3720      	adds	r7, #32
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009d14:	bf00      	nop
 8009d16:	370c      	adds	r7, #12
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009d24:	4904      	ldr	r1, [pc, #16]	; (8009d38 <MX_FATFS_Init+0x18>)
 8009d26:	4805      	ldr	r0, [pc, #20]	; (8009d3c <MX_FATFS_Init+0x1c>)
 8009d28:	f003 fa86 	bl	800d238 <FATFS_LinkDriver>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	461a      	mov	r2, r3
 8009d30:	4b03      	ldr	r3, [pc, #12]	; (8009d40 <MX_FATFS_Init+0x20>)
 8009d32:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009d34:	bf00      	nop
 8009d36:	bd80      	pop	{r7, pc}
 8009d38:	200015f4 	.word	0x200015f4
 8009d3c:	20000030 	.word	0x20000030
 8009d40:	200015f0 	.word	0x200015f0

08009d44 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009d44:	b480      	push	{r7}
 8009d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009d48:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */

    Stat = STA_NOINIT;
 8009d5e:	4b06      	ldr	r3, [pc, #24]	; (8009d78 <USER_initialize+0x24>)
 8009d60:	2201      	movs	r2, #1
 8009d62:	701a      	strb	r2, [r3, #0]
    return USER_SPI_initialize(pdrv);
 8009d64:	79fb      	ldrb	r3, [r7, #7]
 8009d66:	4618      	mov	r0, r3
 8009d68:	f000 f9e2 	bl	800a130 <USER_SPI_initialize>
 8009d6c:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	2000002c 	.word	0x2000002c

08009d7c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b082      	sub	sp, #8
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	4603      	mov	r3, r0
 8009d84:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */

    Stat = STA_NOINIT;
 8009d86:	4b06      	ldr	r3, [pc, #24]	; (8009da0 <USER_status+0x24>)
 8009d88:	2201      	movs	r2, #1
 8009d8a:	701a      	strb	r2, [r3, #0]
    return USER_SPI_status(pdrv);
 8009d8c:	79fb      	ldrb	r3, [r7, #7]
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f000 fab8 	bl	800a304 <USER_SPI_status>
 8009d94:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3708      	adds	r7, #8
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	2000002c 	.word	0x2000002c

08009da4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	60b9      	str	r1, [r7, #8]
 8009dac:	607a      	str	r2, [r7, #4]
 8009dae:	603b      	str	r3, [r7, #0]
 8009db0:	4603      	mov	r3, r0
 8009db2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */

    return USER_SPI_read(pdrv, buff, sector, count);
 8009db4:	7bf8      	ldrb	r0, [r7, #15]
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	68b9      	ldr	r1, [r7, #8]
 8009dbc:	f000 fab8 	bl	800a330 <USER_SPI_read>
 8009dc0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b084      	sub	sp, #16
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	607a      	str	r2, [r7, #4]
 8009dd4:	603b      	str	r3, [r7, #0]
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */

    return USER_SPI_write(pdrv, buff, sector, count);
 8009dda:	7bf8      	ldrb	r0, [r7, #15]
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	68b9      	ldr	r1, [r7, #8]
 8009de2:	f000 fb0b 	bl	800a3fc <USER_SPI_write>
 8009de6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3710      	adds	r7, #16
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	4603      	mov	r3, r0
 8009df8:	603a      	str	r2, [r7, #0]
 8009dfa:	71fb      	strb	r3, [r7, #7]
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

  //  DRESULT res = RES_ERROR;
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8009e00:	79b9      	ldrb	r1, [r7, #6]
 8009e02:	79fb      	ldrb	r3, [r7, #7]
 8009e04:	683a      	ldr	r2, [r7, #0]
 8009e06:	4618      	mov	r0, r3
 8009e08:	f000 fb74 	bl	800a4f4 <USER_SPI_ioctl>
 8009e0c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3708      	adds	r7, #8
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
	...

08009e18 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8009e20:	f7f9 fda8 	bl	8003974 <HAL_GetTick>
 8009e24:	4603      	mov	r3, r0
 8009e26:	4a04      	ldr	r2, [pc, #16]	; (8009e38 <SPI_Timer_On+0x20>)
 8009e28:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8009e2a:	4a04      	ldr	r2, [pc, #16]	; (8009e3c <SPI_Timer_On+0x24>)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6013      	str	r3, [r2, #0]
}
 8009e30:	bf00      	nop
 8009e32:	3708      	adds	r7, #8
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	200015fc 	.word	0x200015fc
 8009e3c:	20001600 	.word	0x20001600

08009e40 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8009e40:	b580      	push	{r7, lr}
 8009e42:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8009e44:	f7f9 fd96 	bl	8003974 <HAL_GetTick>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	4b06      	ldr	r3, [pc, #24]	; (8009e64 <SPI_Timer_Status+0x24>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	1ad2      	subs	r2, r2, r3
 8009e50:	4b05      	ldr	r3, [pc, #20]	; (8009e68 <SPI_Timer_Status+0x28>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	bf34      	ite	cc
 8009e58:	2301      	movcc	r3, #1
 8009e5a:	2300      	movcs	r3, #0
 8009e5c:	b2db      	uxtb	r3, r3
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	200015fc 	.word	0x200015fc
 8009e68:	20001600 	.word	0x20001600

08009e6c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b086      	sub	sp, #24
 8009e70:	af02      	add	r7, sp, #8
 8009e72:	4603      	mov	r3, r0
 8009e74:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009e76:	f107 020f 	add.w	r2, r7, #15
 8009e7a:	1df9      	adds	r1, r7, #7
 8009e7c:	2332      	movs	r3, #50	; 0x32
 8009e7e:	9300      	str	r3, [sp, #0]
 8009e80:	2301      	movs	r3, #1
 8009e82:	4804      	ldr	r0, [pc, #16]	; (8009e94 <xchg_spi+0x28>)
 8009e84:	f7fc fd99 	bl	80069ba <HAL_SPI_TransmitReceive>
    return rxDat;
 8009e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3710      	adds	r7, #16
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	20000304 	.word	0x20000304

08009e98 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8009e98:	b590      	push	{r4, r7, lr}
 8009e9a:	b085      	sub	sp, #20
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	60fb      	str	r3, [r7, #12]
 8009ea6:	e00a      	b.n	8009ebe <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	18d4      	adds	r4, r2, r3
 8009eae:	20ff      	movs	r0, #255	; 0xff
 8009eb0:	f7ff ffdc 	bl	8009e6c <xchg_spi>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	3301      	adds	r3, #1
 8009ebc:	60fb      	str	r3, [r7, #12]
 8009ebe:	68fa      	ldr	r2, [r7, #12]
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d3f0      	bcc.n	8009ea8 <rcvr_spi_multi+0x10>
	}
}
 8009ec6:	bf00      	nop
 8009ec8:	bf00      	nop
 8009eca:	3714      	adds	r7, #20
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd90      	pop	{r4, r7, pc}

08009ed0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8009eda:	2300      	movs	r3, #0
 8009edc:	60fb      	str	r3, [r7, #12]
 8009ede:	e009      	b.n	8009ef4 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	4413      	add	r3, r2
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7ff ffbf 	bl	8009e6c <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	60fb      	str	r3, [r7, #12]
 8009ef4:	68fa      	ldr	r2, [r7, #12]
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d3f1      	bcc.n	8009ee0 <xmit_spi_multi+0x10>
	}
}
 8009efc:	bf00      	nop
 8009efe:	bf00      	nop
 8009f00:	3710      	adds	r7, #16
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b086      	sub	sp, #24
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8009f0e:	f7f9 fd31 	bl	8003974 <HAL_GetTick>
 8009f12:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8009f18:	20ff      	movs	r0, #255	; 0xff
 8009f1a:	f7ff ffa7 	bl	8009e6c <xchg_spi>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8009f22:	7bfb      	ldrb	r3, [r7, #15]
 8009f24:	2bff      	cmp	r3, #255	; 0xff
 8009f26:	d007      	beq.n	8009f38 <wait_ready+0x32>
 8009f28:	f7f9 fd24 	bl	8003974 <HAL_GetTick>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	1ad3      	subs	r3, r2, r3
 8009f32:	693a      	ldr	r2, [r7, #16]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d8ef      	bhi.n	8009f18 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8009f38:	7bfb      	ldrb	r3, [r7, #15]
 8009f3a:	2bff      	cmp	r3, #255	; 0xff
 8009f3c:	bf0c      	ite	eq
 8009f3e:	2301      	moveq	r3, #1
 8009f40:	2300      	movne	r3, #0
 8009f42:	b2db      	uxtb	r3, r3
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3718      	adds	r7, #24
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8009f50:	2201      	movs	r2, #1
 8009f52:	2140      	movs	r1, #64	; 0x40
 8009f54:	4803      	ldr	r0, [pc, #12]	; (8009f64 <despiselect+0x18>)
 8009f56:	f7fa faf5 	bl	8004544 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8009f5a:	20ff      	movs	r0, #255	; 0xff
 8009f5c:	f7ff ff86 	bl	8009e6c <xchg_spi>

}
 8009f60:	bf00      	nop
 8009f62:	bd80      	pop	{r7, pc}
 8009f64:	48000400 	.word	0x48000400

08009f68 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	2140      	movs	r1, #64	; 0x40
 8009f70:	4809      	ldr	r0, [pc, #36]	; (8009f98 <spiselect+0x30>)
 8009f72:	f7fa fae7 	bl	8004544 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8009f76:	20ff      	movs	r0, #255	; 0xff
 8009f78:	f7ff ff78 	bl	8009e6c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8009f7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009f80:	f7ff ffc1 	bl	8009f06 <wait_ready>
 8009f84:	4603      	mov	r3, r0
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d001      	beq.n	8009f8e <spiselect+0x26>
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e002      	b.n	8009f94 <spiselect+0x2c>

	despiselect();
 8009f8e:	f7ff ffdd 	bl	8009f4c <despiselect>
	return 0;	/* Timeout */
 8009f92:	2300      	movs	r3, #0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	48000400 	.word	0x48000400

08009f9c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8009fa6:	20c8      	movs	r0, #200	; 0xc8
 8009fa8:	f7ff ff36 	bl	8009e18 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8009fac:	20ff      	movs	r0, #255	; 0xff
 8009fae:	f7ff ff5d 	bl	8009e6c <xchg_spi>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8009fb6:	7bfb      	ldrb	r3, [r7, #15]
 8009fb8:	2bff      	cmp	r3, #255	; 0xff
 8009fba:	d104      	bne.n	8009fc6 <rcvr_datablock+0x2a>
 8009fbc:	f7ff ff40 	bl	8009e40 <SPI_Timer_Status>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d1f2      	bne.n	8009fac <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8009fc6:	7bfb      	ldrb	r3, [r7, #15]
 8009fc8:	2bfe      	cmp	r3, #254	; 0xfe
 8009fca:	d001      	beq.n	8009fd0 <rcvr_datablock+0x34>
 8009fcc:	2300      	movs	r3, #0
 8009fce:	e00a      	b.n	8009fe6 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8009fd0:	6839      	ldr	r1, [r7, #0]
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f7ff ff60 	bl	8009e98 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8009fd8:	20ff      	movs	r0, #255	; 0xff
 8009fda:	f7ff ff47 	bl	8009e6c <xchg_spi>
 8009fde:	20ff      	movs	r0, #255	; 0xff
 8009fe0:	f7ff ff44 	bl	8009e6c <xchg_spi>

	return 1;						/* Function succeeded */
 8009fe4:	2301      	movs	r3, #1
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3710      	adds	r7, #16
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b084      	sub	sp, #16
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8009ffa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009ffe:	f7ff ff82 	bl	8009f06 <wait_ready>
 800a002:	4603      	mov	r3, r0
 800a004:	2b00      	cmp	r3, #0
 800a006:	d101      	bne.n	800a00c <xmit_datablock+0x1e>
 800a008:	2300      	movs	r3, #0
 800a00a:	e01e      	b.n	800a04a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800a00c:	78fb      	ldrb	r3, [r7, #3]
 800a00e:	4618      	mov	r0, r3
 800a010:	f7ff ff2c 	bl	8009e6c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800a014:	78fb      	ldrb	r3, [r7, #3]
 800a016:	2bfd      	cmp	r3, #253	; 0xfd
 800a018:	d016      	beq.n	800a048 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800a01a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f7ff ff56 	bl	8009ed0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800a024:	20ff      	movs	r0, #255	; 0xff
 800a026:	f7ff ff21 	bl	8009e6c <xchg_spi>
 800a02a:	20ff      	movs	r0, #255	; 0xff
 800a02c:	f7ff ff1e 	bl	8009e6c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800a030:	20ff      	movs	r0, #255	; 0xff
 800a032:	f7ff ff1b 	bl	8009e6c <xchg_spi>
 800a036:	4603      	mov	r3, r0
 800a038:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800a03a:	7bfb      	ldrb	r3, [r7, #15]
 800a03c:	f003 031f 	and.w	r3, r3, #31
 800a040:	2b05      	cmp	r3, #5
 800a042:	d001      	beq.n	800a048 <xmit_datablock+0x5a>
 800a044:	2300      	movs	r3, #0
 800a046:	e000      	b.n	800a04a <xmit_datablock+0x5c>
	}
	return 1;
 800a048:	2301      	movs	r3, #1
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3710      	adds	r7, #16
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}

0800a052 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800a052:	b580      	push	{r7, lr}
 800a054:	b084      	sub	sp, #16
 800a056:	af00      	add	r7, sp, #0
 800a058:	4603      	mov	r3, r0
 800a05a:	6039      	str	r1, [r7, #0]
 800a05c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800a05e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a062:	2b00      	cmp	r3, #0
 800a064:	da0e      	bge.n	800a084 <send_cmd+0x32>
		cmd &= 0x7F;
 800a066:	79fb      	ldrb	r3, [r7, #7]
 800a068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a06c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800a06e:	2100      	movs	r1, #0
 800a070:	2037      	movs	r0, #55	; 0x37
 800a072:	f7ff ffee 	bl	800a052 <send_cmd>
 800a076:	4603      	mov	r3, r0
 800a078:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800a07a:	7bbb      	ldrb	r3, [r7, #14]
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d901      	bls.n	800a084 <send_cmd+0x32>
 800a080:	7bbb      	ldrb	r3, [r7, #14]
 800a082:	e051      	b.n	800a128 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800a084:	79fb      	ldrb	r3, [r7, #7]
 800a086:	2b0c      	cmp	r3, #12
 800a088:	d008      	beq.n	800a09c <send_cmd+0x4a>
		despiselect();
 800a08a:	f7ff ff5f 	bl	8009f4c <despiselect>
		if (!spiselect()) return 0xFF;
 800a08e:	f7ff ff6b 	bl	8009f68 <spiselect>
 800a092:	4603      	mov	r3, r0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d101      	bne.n	800a09c <send_cmd+0x4a>
 800a098:	23ff      	movs	r3, #255	; 0xff
 800a09a:	e045      	b.n	800a128 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800a09c:	79fb      	ldrb	r3, [r7, #7]
 800a09e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7ff fee1 	bl	8009e6c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	0e1b      	lsrs	r3, r3, #24
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f7ff fedb 	bl	8009e6c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	0c1b      	lsrs	r3, r3, #16
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7ff fed5 	bl	8009e6c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	0a1b      	lsrs	r3, r3, #8
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f7ff fecf 	bl	8009e6c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7ff feca 	bl	8009e6c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800a0d8:	2301      	movs	r3, #1
 800a0da:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800a0dc:	79fb      	ldrb	r3, [r7, #7]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d101      	bne.n	800a0e6 <send_cmd+0x94>
 800a0e2:	2395      	movs	r3, #149	; 0x95
 800a0e4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800a0e6:	79fb      	ldrb	r3, [r7, #7]
 800a0e8:	2b08      	cmp	r3, #8
 800a0ea:	d101      	bne.n	800a0f0 <send_cmd+0x9e>
 800a0ec:	2387      	movs	r3, #135	; 0x87
 800a0ee:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800a0f0:	7bfb      	ldrb	r3, [r7, #15]
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7ff feba 	bl	8009e6c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800a0f8:	79fb      	ldrb	r3, [r7, #7]
 800a0fa:	2b0c      	cmp	r3, #12
 800a0fc:	d102      	bne.n	800a104 <send_cmd+0xb2>
 800a0fe:	20ff      	movs	r0, #255	; 0xff
 800a100:	f7ff feb4 	bl	8009e6c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800a104:	230a      	movs	r3, #10
 800a106:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800a108:	20ff      	movs	r0, #255	; 0xff
 800a10a:	f7ff feaf 	bl	8009e6c <xchg_spi>
 800a10e:	4603      	mov	r3, r0
 800a110:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800a112:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a116:	2b00      	cmp	r3, #0
 800a118:	da05      	bge.n	800a126 <send_cmd+0xd4>
 800a11a:	7bfb      	ldrb	r3, [r7, #15]
 800a11c:	3b01      	subs	r3, #1
 800a11e:	73fb      	strb	r3, [r7, #15]
 800a120:	7bfb      	ldrb	r3, [r7, #15]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d1f0      	bne.n	800a108 <send_cmd+0xb6>

	return res;							/* Return received response */
 800a126:	7bbb      	ldrb	r3, [r7, #14]
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3710      	adds	r7, #16
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800a130:	b590      	push	{r4, r7, lr}
 800a132:	b085      	sub	sp, #20
 800a134:	af00      	add	r7, sp, #0
 800a136:	4603      	mov	r3, r0
 800a138:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800a13a:	79fb      	ldrb	r3, [r7, #7]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d001      	beq.n	800a144 <USER_SPI_initialize+0x14>
 800a140:	2301      	movs	r3, #1
 800a142:	e0d4      	b.n	800a2ee <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800a144:	4b6c      	ldr	r3, [pc, #432]	; (800a2f8 <USER_SPI_initialize+0x1c8>)
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	f003 0302 	and.w	r3, r3, #2
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d003      	beq.n	800a15a <USER_SPI_initialize+0x2a>
 800a152:	4b69      	ldr	r3, [pc, #420]	; (800a2f8 <USER_SPI_initialize+0x1c8>)
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	b2db      	uxtb	r3, r3
 800a158:	e0c9      	b.n	800a2ee <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 800a15a:	4b68      	ldr	r3, [pc, #416]	; (800a2fc <USER_SPI_initialize+0x1cc>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	4b66      	ldr	r3, [pc, #408]	; (800a2fc <USER_SPI_initialize+0x1cc>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800a168:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800a16a:	230a      	movs	r3, #10
 800a16c:	73fb      	strb	r3, [r7, #15]
 800a16e:	e005      	b.n	800a17c <USER_SPI_initialize+0x4c>
 800a170:	20ff      	movs	r0, #255	; 0xff
 800a172:	f7ff fe7b 	bl	8009e6c <xchg_spi>
 800a176:	7bfb      	ldrb	r3, [r7, #15]
 800a178:	3b01      	subs	r3, #1
 800a17a:	73fb      	strb	r3, [r7, #15]
 800a17c:	7bfb      	ldrb	r3, [r7, #15]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1f6      	bne.n	800a170 <USER_SPI_initialize+0x40>

	ty = 0;
 800a182:	2300      	movs	r3, #0
 800a184:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800a186:	2100      	movs	r1, #0
 800a188:	2000      	movs	r0, #0
 800a18a:	f7ff ff62 	bl	800a052 <send_cmd>
 800a18e:	4603      	mov	r3, r0
 800a190:	2b01      	cmp	r3, #1
 800a192:	f040 808b 	bne.w	800a2ac <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800a196:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a19a:	f7ff fe3d 	bl	8009e18 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800a19e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a1a2:	2008      	movs	r0, #8
 800a1a4:	f7ff ff55 	bl	800a052 <send_cmd>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d151      	bne.n	800a252 <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	73fb      	strb	r3, [r7, #15]
 800a1b2:	e00d      	b.n	800a1d0 <USER_SPI_initialize+0xa0>
 800a1b4:	7bfc      	ldrb	r4, [r7, #15]
 800a1b6:	20ff      	movs	r0, #255	; 0xff
 800a1b8:	f7ff fe58 	bl	8009e6c <xchg_spi>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	461a      	mov	r2, r3
 800a1c0:	f104 0310 	add.w	r3, r4, #16
 800a1c4:	443b      	add	r3, r7
 800a1c6:	f803 2c08 	strb.w	r2, [r3, #-8]
 800a1ca:	7bfb      	ldrb	r3, [r7, #15]
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	73fb      	strb	r3, [r7, #15]
 800a1d0:	7bfb      	ldrb	r3, [r7, #15]
 800a1d2:	2b03      	cmp	r3, #3
 800a1d4:	d9ee      	bls.n	800a1b4 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800a1d6:	7abb      	ldrb	r3, [r7, #10]
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d167      	bne.n	800a2ac <USER_SPI_initialize+0x17c>
 800a1dc:	7afb      	ldrb	r3, [r7, #11]
 800a1de:	2baa      	cmp	r3, #170	; 0xaa
 800a1e0:	d164      	bne.n	800a2ac <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800a1e2:	bf00      	nop
 800a1e4:	f7ff fe2c 	bl	8009e40 <SPI_Timer_Status>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d007      	beq.n	800a1fe <USER_SPI_initialize+0xce>
 800a1ee:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a1f2:	20a9      	movs	r0, #169	; 0xa9
 800a1f4:	f7ff ff2d 	bl	800a052 <send_cmd>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d1f2      	bne.n	800a1e4 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800a1fe:	f7ff fe1f 	bl	8009e40 <SPI_Timer_Status>
 800a202:	4603      	mov	r3, r0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d051      	beq.n	800a2ac <USER_SPI_initialize+0x17c>
 800a208:	2100      	movs	r1, #0
 800a20a:	203a      	movs	r0, #58	; 0x3a
 800a20c:	f7ff ff21 	bl	800a052 <send_cmd>
 800a210:	4603      	mov	r3, r0
 800a212:	2b00      	cmp	r3, #0
 800a214:	d14a      	bne.n	800a2ac <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800a216:	2300      	movs	r3, #0
 800a218:	73fb      	strb	r3, [r7, #15]
 800a21a:	e00d      	b.n	800a238 <USER_SPI_initialize+0x108>
 800a21c:	7bfc      	ldrb	r4, [r7, #15]
 800a21e:	20ff      	movs	r0, #255	; 0xff
 800a220:	f7ff fe24 	bl	8009e6c <xchg_spi>
 800a224:	4603      	mov	r3, r0
 800a226:	461a      	mov	r2, r3
 800a228:	f104 0310 	add.w	r3, r4, #16
 800a22c:	443b      	add	r3, r7
 800a22e:	f803 2c08 	strb.w	r2, [r3, #-8]
 800a232:	7bfb      	ldrb	r3, [r7, #15]
 800a234:	3301      	adds	r3, #1
 800a236:	73fb      	strb	r3, [r7, #15]
 800a238:	7bfb      	ldrb	r3, [r7, #15]
 800a23a:	2b03      	cmp	r3, #3
 800a23c:	d9ee      	bls.n	800a21c <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800a23e:	7a3b      	ldrb	r3, [r7, #8]
 800a240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a244:	2b00      	cmp	r3, #0
 800a246:	d001      	beq.n	800a24c <USER_SPI_initialize+0x11c>
 800a248:	230c      	movs	r3, #12
 800a24a:	e000      	b.n	800a24e <USER_SPI_initialize+0x11e>
 800a24c:	2304      	movs	r3, #4
 800a24e:	737b      	strb	r3, [r7, #13]
 800a250:	e02c      	b.n	800a2ac <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800a252:	2100      	movs	r1, #0
 800a254:	20a9      	movs	r0, #169	; 0xa9
 800a256:	f7ff fefc 	bl	800a052 <send_cmd>
 800a25a:	4603      	mov	r3, r0
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d804      	bhi.n	800a26a <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800a260:	2302      	movs	r3, #2
 800a262:	737b      	strb	r3, [r7, #13]
 800a264:	23a9      	movs	r3, #169	; 0xa9
 800a266:	73bb      	strb	r3, [r7, #14]
 800a268:	e003      	b.n	800a272 <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800a26a:	2301      	movs	r3, #1
 800a26c:	737b      	strb	r3, [r7, #13]
 800a26e:	2301      	movs	r3, #1
 800a270:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800a272:	bf00      	nop
 800a274:	f7ff fde4 	bl	8009e40 <SPI_Timer_Status>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d007      	beq.n	800a28e <USER_SPI_initialize+0x15e>
 800a27e:	7bbb      	ldrb	r3, [r7, #14]
 800a280:	2100      	movs	r1, #0
 800a282:	4618      	mov	r0, r3
 800a284:	f7ff fee5 	bl	800a052 <send_cmd>
 800a288:	4603      	mov	r3, r0
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d1f2      	bne.n	800a274 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800a28e:	f7ff fdd7 	bl	8009e40 <SPI_Timer_Status>
 800a292:	4603      	mov	r3, r0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d007      	beq.n	800a2a8 <USER_SPI_initialize+0x178>
 800a298:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a29c:	2010      	movs	r0, #16
 800a29e:	f7ff fed8 	bl	800a052 <send_cmd>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d001      	beq.n	800a2ac <USER_SPI_initialize+0x17c>
				ty = 0;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800a2ac:	4a14      	ldr	r2, [pc, #80]	; (800a300 <USER_SPI_initialize+0x1d0>)
 800a2ae:	7b7b      	ldrb	r3, [r7, #13]
 800a2b0:	7013      	strb	r3, [r2, #0]
	despiselect();
 800a2b2:	f7ff fe4b 	bl	8009f4c <despiselect>

	if (ty) {			/* OK */
 800a2b6:	7b7b      	ldrb	r3, [r7, #13]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d012      	beq.n	800a2e2 <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 800a2bc:	4b0f      	ldr	r3, [pc, #60]	; (800a2fc <USER_SPI_initialize+0x1cc>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a2c6:	4b0d      	ldr	r3, [pc, #52]	; (800a2fc <USER_SPI_initialize+0x1cc>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f042 0218 	orr.w	r2, r2, #24
 800a2ce:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800a2d0:	4b09      	ldr	r3, [pc, #36]	; (800a2f8 <USER_SPI_initialize+0x1c8>)
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	f023 0301 	bic.w	r3, r3, #1
 800a2da:	b2da      	uxtb	r2, r3
 800a2dc:	4b06      	ldr	r3, [pc, #24]	; (800a2f8 <USER_SPI_initialize+0x1c8>)
 800a2de:	701a      	strb	r2, [r3, #0]
 800a2e0:	e002      	b.n	800a2e8 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800a2e2:	4b05      	ldr	r3, [pc, #20]	; (800a2f8 <USER_SPI_initialize+0x1c8>)
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800a2e8:	4b03      	ldr	r3, [pc, #12]	; (800a2f8 <USER_SPI_initialize+0x1c8>)
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	b2db      	uxtb	r3, r3
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3714      	adds	r7, #20
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd90      	pop	{r4, r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	20000044 	.word	0x20000044
 800a2fc:	20000304 	.word	0x20000304
 800a300:	200015f8 	.word	0x200015f8

0800a304 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800a304:	b480      	push	{r7}
 800a306:	b083      	sub	sp, #12
 800a308:	af00      	add	r7, sp, #0
 800a30a:	4603      	mov	r3, r0
 800a30c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800a30e:	79fb      	ldrb	r3, [r7, #7]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d001      	beq.n	800a318 <USER_SPI_status+0x14>
 800a314:	2301      	movs	r3, #1
 800a316:	e002      	b.n	800a31e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800a318:	4b04      	ldr	r3, [pc, #16]	; (800a32c <USER_SPI_status+0x28>)
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	b2db      	uxtb	r3, r3
}
 800a31e:	4618      	mov	r0, r3
 800a320:	370c      	adds	r7, #12
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	20000044 	.word	0x20000044

0800a330 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
 800a336:	60b9      	str	r1, [r7, #8]
 800a338:	607a      	str	r2, [r7, #4]
 800a33a:	603b      	str	r3, [r7, #0]
 800a33c:	4603      	mov	r3, r0
 800a33e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a340:	7bfb      	ldrb	r3, [r7, #15]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d102      	bne.n	800a34c <USER_SPI_read+0x1c>
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d101      	bne.n	800a350 <USER_SPI_read+0x20>
 800a34c:	2304      	movs	r3, #4
 800a34e:	e04d      	b.n	800a3ec <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a350:	4b28      	ldr	r3, [pc, #160]	; (800a3f4 <USER_SPI_read+0xc4>)
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	b2db      	uxtb	r3, r3
 800a356:	f003 0301 	and.w	r3, r3, #1
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d001      	beq.n	800a362 <USER_SPI_read+0x32>
 800a35e:	2303      	movs	r3, #3
 800a360:	e044      	b.n	800a3ec <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800a362:	4b25      	ldr	r3, [pc, #148]	; (800a3f8 <USER_SPI_read+0xc8>)
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	f003 0308 	and.w	r3, r3, #8
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d102      	bne.n	800a374 <USER_SPI_read+0x44>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	025b      	lsls	r3, r3, #9
 800a372:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	2b01      	cmp	r3, #1
 800a378:	d111      	bne.n	800a39e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800a37a:	6879      	ldr	r1, [r7, #4]
 800a37c:	2011      	movs	r0, #17
 800a37e:	f7ff fe68 	bl	800a052 <send_cmd>
 800a382:	4603      	mov	r3, r0
 800a384:	2b00      	cmp	r3, #0
 800a386:	d129      	bne.n	800a3dc <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800a388:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a38c:	68b8      	ldr	r0, [r7, #8]
 800a38e:	f7ff fe05 	bl	8009f9c <rcvr_datablock>
 800a392:	4603      	mov	r3, r0
 800a394:	2b00      	cmp	r3, #0
 800a396:	d021      	beq.n	800a3dc <USER_SPI_read+0xac>
			count = 0;
 800a398:	2300      	movs	r3, #0
 800a39a:	603b      	str	r3, [r7, #0]
 800a39c:	e01e      	b.n	800a3dc <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800a39e:	6879      	ldr	r1, [r7, #4]
 800a3a0:	2012      	movs	r0, #18
 800a3a2:	f7ff fe56 	bl	800a052 <send_cmd>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d117      	bne.n	800a3dc <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800a3ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a3b0:	68b8      	ldr	r0, [r7, #8]
 800a3b2:	f7ff fdf3 	bl	8009f9c <rcvr_datablock>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d00a      	beq.n	800a3d2 <USER_SPI_read+0xa2>
				buff += 512;
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a3c2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	3b01      	subs	r3, #1
 800a3c8:	603b      	str	r3, [r7, #0]
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d1ed      	bne.n	800a3ac <USER_SPI_read+0x7c>
 800a3d0:	e000      	b.n	800a3d4 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800a3d2:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800a3d4:	2100      	movs	r1, #0
 800a3d6:	200c      	movs	r0, #12
 800a3d8:	f7ff fe3b 	bl	800a052 <send_cmd>
		}
	}
	despiselect();
 800a3dc:	f7ff fdb6 	bl	8009f4c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	bf14      	ite	ne
 800a3e6:	2301      	movne	r3, #1
 800a3e8:	2300      	moveq	r3, #0
 800a3ea:	b2db      	uxtb	r3, r3
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3710      	adds	r7, #16
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	20000044 	.word	0x20000044
 800a3f8:	200015f8 	.word	0x200015f8

0800a3fc <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
 800a402:	60b9      	str	r1, [r7, #8]
 800a404:	607a      	str	r2, [r7, #4]
 800a406:	603b      	str	r3, [r7, #0]
 800a408:	4603      	mov	r3, r0
 800a40a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a40c:	7bfb      	ldrb	r3, [r7, #15]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d102      	bne.n	800a418 <USER_SPI_write+0x1c>
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d101      	bne.n	800a41c <USER_SPI_write+0x20>
 800a418:	2304      	movs	r3, #4
 800a41a:	e063      	b.n	800a4e4 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800a41c:	4b33      	ldr	r3, [pc, #204]	; (800a4ec <USER_SPI_write+0xf0>)
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	b2db      	uxtb	r3, r3
 800a422:	f003 0301 	and.w	r3, r3, #1
 800a426:	2b00      	cmp	r3, #0
 800a428:	d001      	beq.n	800a42e <USER_SPI_write+0x32>
 800a42a:	2303      	movs	r3, #3
 800a42c:	e05a      	b.n	800a4e4 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800a42e:	4b2f      	ldr	r3, [pc, #188]	; (800a4ec <USER_SPI_write+0xf0>)
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	b2db      	uxtb	r3, r3
 800a434:	f003 0304 	and.w	r3, r3, #4
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d001      	beq.n	800a440 <USER_SPI_write+0x44>
 800a43c:	2302      	movs	r3, #2
 800a43e:	e051      	b.n	800a4e4 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800a440:	4b2b      	ldr	r3, [pc, #172]	; (800a4f0 <USER_SPI_write+0xf4>)
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	f003 0308 	and.w	r3, r3, #8
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d102      	bne.n	800a452 <USER_SPI_write+0x56>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	025b      	lsls	r3, r3, #9
 800a450:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	2b01      	cmp	r3, #1
 800a456:	d110      	bne.n	800a47a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800a458:	6879      	ldr	r1, [r7, #4]
 800a45a:	2018      	movs	r0, #24
 800a45c:	f7ff fdf9 	bl	800a052 <send_cmd>
 800a460:	4603      	mov	r3, r0
 800a462:	2b00      	cmp	r3, #0
 800a464:	d136      	bne.n	800a4d4 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800a466:	21fe      	movs	r1, #254	; 0xfe
 800a468:	68b8      	ldr	r0, [r7, #8]
 800a46a:	f7ff fdc0 	bl	8009fee <xmit_datablock>
 800a46e:	4603      	mov	r3, r0
 800a470:	2b00      	cmp	r3, #0
 800a472:	d02f      	beq.n	800a4d4 <USER_SPI_write+0xd8>
			count = 0;
 800a474:	2300      	movs	r3, #0
 800a476:	603b      	str	r3, [r7, #0]
 800a478:	e02c      	b.n	800a4d4 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800a47a:	4b1d      	ldr	r3, [pc, #116]	; (800a4f0 <USER_SPI_write+0xf4>)
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	f003 0306 	and.w	r3, r3, #6
 800a482:	2b00      	cmp	r3, #0
 800a484:	d003      	beq.n	800a48e <USER_SPI_write+0x92>
 800a486:	6839      	ldr	r1, [r7, #0]
 800a488:	2097      	movs	r0, #151	; 0x97
 800a48a:	f7ff fde2 	bl	800a052 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800a48e:	6879      	ldr	r1, [r7, #4]
 800a490:	2019      	movs	r0, #25
 800a492:	f7ff fdde 	bl	800a052 <send_cmd>
 800a496:	4603      	mov	r3, r0
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d11b      	bne.n	800a4d4 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800a49c:	21fc      	movs	r1, #252	; 0xfc
 800a49e:	68b8      	ldr	r0, [r7, #8]
 800a4a0:	f7ff fda5 	bl	8009fee <xmit_datablock>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d00a      	beq.n	800a4c0 <USER_SPI_write+0xc4>
				buff += 512;
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a4b0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	3b01      	subs	r3, #1
 800a4b6:	603b      	str	r3, [r7, #0]
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d1ee      	bne.n	800a49c <USER_SPI_write+0xa0>
 800a4be:	e000      	b.n	800a4c2 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800a4c0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800a4c2:	21fd      	movs	r1, #253	; 0xfd
 800a4c4:	2000      	movs	r0, #0
 800a4c6:	f7ff fd92 	bl	8009fee <xmit_datablock>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d101      	bne.n	800a4d4 <USER_SPI_write+0xd8>
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800a4d4:	f7ff fd3a 	bl	8009f4c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	bf14      	ite	ne
 800a4de:	2301      	movne	r3, #1
 800a4e0:	2300      	moveq	r3, #0
 800a4e2:	b2db      	uxtb	r3, r3
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3710      	adds	r7, #16
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}
 800a4ec:	20000044 	.word	0x20000044
 800a4f0:	200015f8 	.word	0x200015f8

0800a4f4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b08c      	sub	sp, #48	; 0x30
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	603a      	str	r2, [r7, #0]
 800a4fe:	71fb      	strb	r3, [r7, #7]
 800a500:	460b      	mov	r3, r1
 800a502:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800a504:	79fb      	ldrb	r3, [r7, #7]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d001      	beq.n	800a50e <USER_SPI_ioctl+0x1a>
 800a50a:	2304      	movs	r3, #4
 800a50c:	e15a      	b.n	800a7c4 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a50e:	4baf      	ldr	r3, [pc, #700]	; (800a7cc <USER_SPI_ioctl+0x2d8>)
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	b2db      	uxtb	r3, r3
 800a514:	f003 0301 	and.w	r3, r3, #1
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d001      	beq.n	800a520 <USER_SPI_ioctl+0x2c>
 800a51c:	2303      	movs	r3, #3
 800a51e:	e151      	b.n	800a7c4 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800a520:	2301      	movs	r3, #1
 800a522:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800a526:	79bb      	ldrb	r3, [r7, #6]
 800a528:	2b04      	cmp	r3, #4
 800a52a:	f200 8136 	bhi.w	800a79a <USER_SPI_ioctl+0x2a6>
 800a52e:	a201      	add	r2, pc, #4	; (adr r2, 800a534 <USER_SPI_ioctl+0x40>)
 800a530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a534:	0800a549 	.word	0x0800a549
 800a538:	0800a55d 	.word	0x0800a55d
 800a53c:	0800a79b 	.word	0x0800a79b
 800a540:	0800a609 	.word	0x0800a609
 800a544:	0800a6ff 	.word	0x0800a6ff
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800a548:	f7ff fd0e 	bl	8009f68 <spiselect>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	f000 8127 	beq.w	800a7a2 <USER_SPI_ioctl+0x2ae>
 800a554:	2300      	movs	r3, #0
 800a556:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800a55a:	e122      	b.n	800a7a2 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800a55c:	2100      	movs	r1, #0
 800a55e:	2009      	movs	r0, #9
 800a560:	f7ff fd77 	bl	800a052 <send_cmd>
 800a564:	4603      	mov	r3, r0
 800a566:	2b00      	cmp	r3, #0
 800a568:	f040 811d 	bne.w	800a7a6 <USER_SPI_ioctl+0x2b2>
 800a56c:	f107 030c 	add.w	r3, r7, #12
 800a570:	2110      	movs	r1, #16
 800a572:	4618      	mov	r0, r3
 800a574:	f7ff fd12 	bl	8009f9c <rcvr_datablock>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	f000 8113 	beq.w	800a7a6 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800a580:	7b3b      	ldrb	r3, [r7, #12]
 800a582:	099b      	lsrs	r3, r3, #6
 800a584:	b2db      	uxtb	r3, r3
 800a586:	2b01      	cmp	r3, #1
 800a588:	d111      	bne.n	800a5ae <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800a58a:	7d7b      	ldrb	r3, [r7, #21]
 800a58c:	461a      	mov	r2, r3
 800a58e:	7d3b      	ldrb	r3, [r7, #20]
 800a590:	021b      	lsls	r3, r3, #8
 800a592:	4413      	add	r3, r2
 800a594:	461a      	mov	r2, r3
 800a596:	7cfb      	ldrb	r3, [r7, #19]
 800a598:	041b      	lsls	r3, r3, #16
 800a59a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800a59e:	4413      	add	r3, r2
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	029a      	lsls	r2, r3, #10
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	601a      	str	r2, [r3, #0]
 800a5ac:	e028      	b.n	800a600 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800a5ae:	7c7b      	ldrb	r3, [r7, #17]
 800a5b0:	f003 030f 	and.w	r3, r3, #15
 800a5b4:	b2da      	uxtb	r2, r3
 800a5b6:	7dbb      	ldrb	r3, [r7, #22]
 800a5b8:	09db      	lsrs	r3, r3, #7
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	4413      	add	r3, r2
 800a5be:	b2da      	uxtb	r2, r3
 800a5c0:	7d7b      	ldrb	r3, [r7, #21]
 800a5c2:	005b      	lsls	r3, r3, #1
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	f003 0306 	and.w	r3, r3, #6
 800a5ca:	b2db      	uxtb	r3, r3
 800a5cc:	4413      	add	r3, r2
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	3302      	adds	r3, #2
 800a5d2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800a5d6:	7d3b      	ldrb	r3, [r7, #20]
 800a5d8:	099b      	lsrs	r3, r3, #6
 800a5da:	b2db      	uxtb	r3, r3
 800a5dc:	461a      	mov	r2, r3
 800a5de:	7cfb      	ldrb	r3, [r7, #19]
 800a5e0:	009b      	lsls	r3, r3, #2
 800a5e2:	441a      	add	r2, r3
 800a5e4:	7cbb      	ldrb	r3, [r7, #18]
 800a5e6:	029b      	lsls	r3, r3, #10
 800a5e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a5ec:	4413      	add	r3, r2
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800a5f2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a5f6:	3b09      	subs	r3, #9
 800a5f8:	69fa      	ldr	r2, [r7, #28]
 800a5fa:	409a      	lsls	r2, r3
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800a600:	2300      	movs	r3, #0
 800a602:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800a606:	e0ce      	b.n	800a7a6 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800a608:	4b71      	ldr	r3, [pc, #452]	; (800a7d0 <USER_SPI_ioctl+0x2dc>)
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	f003 0304 	and.w	r3, r3, #4
 800a610:	2b00      	cmp	r3, #0
 800a612:	d031      	beq.n	800a678 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800a614:	2100      	movs	r1, #0
 800a616:	208d      	movs	r0, #141	; 0x8d
 800a618:	f7ff fd1b 	bl	800a052 <send_cmd>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	f040 80c3 	bne.w	800a7aa <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800a624:	20ff      	movs	r0, #255	; 0xff
 800a626:	f7ff fc21 	bl	8009e6c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800a62a:	f107 030c 	add.w	r3, r7, #12
 800a62e:	2110      	movs	r1, #16
 800a630:	4618      	mov	r0, r3
 800a632:	f7ff fcb3 	bl	8009f9c <rcvr_datablock>
 800a636:	4603      	mov	r3, r0
 800a638:	2b00      	cmp	r3, #0
 800a63a:	f000 80b6 	beq.w	800a7aa <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800a63e:	2330      	movs	r3, #48	; 0x30
 800a640:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a644:	e007      	b.n	800a656 <USER_SPI_ioctl+0x162>
 800a646:	20ff      	movs	r0, #255	; 0xff
 800a648:	f7ff fc10 	bl	8009e6c <xchg_spi>
 800a64c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a650:	3b01      	subs	r3, #1
 800a652:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a656:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d1f3      	bne.n	800a646 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800a65e:	7dbb      	ldrb	r3, [r7, #22]
 800a660:	091b      	lsrs	r3, r3, #4
 800a662:	b2db      	uxtb	r3, r3
 800a664:	461a      	mov	r2, r3
 800a666:	2310      	movs	r3, #16
 800a668:	fa03 f202 	lsl.w	r2, r3, r2
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800a670:	2300      	movs	r3, #0
 800a672:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800a676:	e098      	b.n	800a7aa <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800a678:	2100      	movs	r1, #0
 800a67a:	2009      	movs	r0, #9
 800a67c:	f7ff fce9 	bl	800a052 <send_cmd>
 800a680:	4603      	mov	r3, r0
 800a682:	2b00      	cmp	r3, #0
 800a684:	f040 8091 	bne.w	800a7aa <USER_SPI_ioctl+0x2b6>
 800a688:	f107 030c 	add.w	r3, r7, #12
 800a68c:	2110      	movs	r1, #16
 800a68e:	4618      	mov	r0, r3
 800a690:	f7ff fc84 	bl	8009f9c <rcvr_datablock>
 800a694:	4603      	mov	r3, r0
 800a696:	2b00      	cmp	r3, #0
 800a698:	f000 8087 	beq.w	800a7aa <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800a69c:	4b4c      	ldr	r3, [pc, #304]	; (800a7d0 <USER_SPI_ioctl+0x2dc>)
 800a69e:	781b      	ldrb	r3, [r3, #0]
 800a6a0:	f003 0302 	and.w	r3, r3, #2
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d012      	beq.n	800a6ce <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800a6a8:	7dbb      	ldrb	r3, [r7, #22]
 800a6aa:	005b      	lsls	r3, r3, #1
 800a6ac:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800a6b0:	7dfa      	ldrb	r2, [r7, #23]
 800a6b2:	09d2      	lsrs	r2, r2, #7
 800a6b4:	b2d2      	uxtb	r2, r2
 800a6b6:	4413      	add	r3, r2
 800a6b8:	1c5a      	adds	r2, r3, #1
 800a6ba:	7e7b      	ldrb	r3, [r7, #25]
 800a6bc:	099b      	lsrs	r3, r3, #6
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	3b01      	subs	r3, #1
 800a6c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	601a      	str	r2, [r3, #0]
 800a6cc:	e013      	b.n	800a6f6 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800a6ce:	7dbb      	ldrb	r3, [r7, #22]
 800a6d0:	109b      	asrs	r3, r3, #2
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	f003 031f 	and.w	r3, r3, #31
 800a6d8:	3301      	adds	r3, #1
 800a6da:	7dfa      	ldrb	r2, [r7, #23]
 800a6dc:	00d2      	lsls	r2, r2, #3
 800a6de:	f002 0218 	and.w	r2, r2, #24
 800a6e2:	7df9      	ldrb	r1, [r7, #23]
 800a6e4:	0949      	lsrs	r1, r1, #5
 800a6e6:	b2c9      	uxtb	r1, r1
 800a6e8:	440a      	add	r2, r1
 800a6ea:	3201      	adds	r2, #1
 800a6ec:	fb02 f303 	mul.w	r3, r2, r3
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800a6fc:	e055      	b.n	800a7aa <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800a6fe:	4b34      	ldr	r3, [pc, #208]	; (800a7d0 <USER_SPI_ioctl+0x2dc>)
 800a700:	781b      	ldrb	r3, [r3, #0]
 800a702:	f003 0306 	and.w	r3, r3, #6
 800a706:	2b00      	cmp	r3, #0
 800a708:	d051      	beq.n	800a7ae <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800a70a:	f107 020c 	add.w	r2, r7, #12
 800a70e:	79fb      	ldrb	r3, [r7, #7]
 800a710:	210b      	movs	r1, #11
 800a712:	4618      	mov	r0, r3
 800a714:	f7ff feee 	bl	800a4f4 <USER_SPI_ioctl>
 800a718:	4603      	mov	r3, r0
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d149      	bne.n	800a7b2 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800a71e:	7b3b      	ldrb	r3, [r7, #12]
 800a720:	099b      	lsrs	r3, r3, #6
 800a722:	b2db      	uxtb	r3, r3
 800a724:	2b00      	cmp	r3, #0
 800a726:	d104      	bne.n	800a732 <USER_SPI_ioctl+0x23e>
 800a728:	7dbb      	ldrb	r3, [r7, #22]
 800a72a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d041      	beq.n	800a7b6 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	623b      	str	r3, [r7, #32]
 800a736:	6a3b      	ldr	r3, [r7, #32]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a73c:	6a3b      	ldr	r3, [r7, #32]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800a742:	4b23      	ldr	r3, [pc, #140]	; (800a7d0 <USER_SPI_ioctl+0x2dc>)
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	f003 0308 	and.w	r3, r3, #8
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d105      	bne.n	800a75a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800a74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a750:	025b      	lsls	r3, r3, #9
 800a752:	62bb      	str	r3, [r7, #40]	; 0x28
 800a754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a756:	025b      	lsls	r3, r3, #9
 800a758:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800a75a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a75c:	2020      	movs	r0, #32
 800a75e:	f7ff fc78 	bl	800a052 <send_cmd>
 800a762:	4603      	mov	r3, r0
 800a764:	2b00      	cmp	r3, #0
 800a766:	d128      	bne.n	800a7ba <USER_SPI_ioctl+0x2c6>
 800a768:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a76a:	2021      	movs	r0, #33	; 0x21
 800a76c:	f7ff fc71 	bl	800a052 <send_cmd>
 800a770:	4603      	mov	r3, r0
 800a772:	2b00      	cmp	r3, #0
 800a774:	d121      	bne.n	800a7ba <USER_SPI_ioctl+0x2c6>
 800a776:	2100      	movs	r1, #0
 800a778:	2026      	movs	r0, #38	; 0x26
 800a77a:	f7ff fc6a 	bl	800a052 <send_cmd>
 800a77e:	4603      	mov	r3, r0
 800a780:	2b00      	cmp	r3, #0
 800a782:	d11a      	bne.n	800a7ba <USER_SPI_ioctl+0x2c6>
 800a784:	f247 5030 	movw	r0, #30000	; 0x7530
 800a788:	f7ff fbbd 	bl	8009f06 <wait_ready>
 800a78c:	4603      	mov	r3, r0
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d013      	beq.n	800a7ba <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800a792:	2300      	movs	r3, #0
 800a794:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800a798:	e00f      	b.n	800a7ba <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800a79a:	2304      	movs	r3, #4
 800a79c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a7a0:	e00c      	b.n	800a7bc <USER_SPI_ioctl+0x2c8>
		break;
 800a7a2:	bf00      	nop
 800a7a4:	e00a      	b.n	800a7bc <USER_SPI_ioctl+0x2c8>
		break;
 800a7a6:	bf00      	nop
 800a7a8:	e008      	b.n	800a7bc <USER_SPI_ioctl+0x2c8>
		break;
 800a7aa:	bf00      	nop
 800a7ac:	e006      	b.n	800a7bc <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800a7ae:	bf00      	nop
 800a7b0:	e004      	b.n	800a7bc <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800a7b2:	bf00      	nop
 800a7b4:	e002      	b.n	800a7bc <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800a7b6:	bf00      	nop
 800a7b8:	e000      	b.n	800a7bc <USER_SPI_ioctl+0x2c8>
		break;
 800a7ba:	bf00      	nop
	}

	despiselect();
 800a7bc:	f7ff fbc6 	bl	8009f4c <despiselect>

	return res;
 800a7c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3730      	adds	r7, #48	; 0x30
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	20000044 	.word	0x20000044
 800a7d0:	200015f8 	.word	0x200015f8

0800a7d4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	4603      	mov	r3, r0
 800a7dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a7de:	79fb      	ldrb	r3, [r7, #7]
 800a7e0:	4a08      	ldr	r2, [pc, #32]	; (800a804 <disk_status+0x30>)
 800a7e2:	009b      	lsls	r3, r3, #2
 800a7e4:	4413      	add	r3, r2
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	79fa      	ldrb	r2, [r7, #7]
 800a7ec:	4905      	ldr	r1, [pc, #20]	; (800a804 <disk_status+0x30>)
 800a7ee:	440a      	add	r2, r1
 800a7f0:	7a12      	ldrb	r2, [r2, #8]
 800a7f2:	4610      	mov	r0, r2
 800a7f4:	4798      	blx	r3
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a7fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3710      	adds	r7, #16
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}
 800a804:	2000162c 	.word	0x2000162c

0800a808 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b084      	sub	sp, #16
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	4603      	mov	r3, r0
 800a810:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a812:	2300      	movs	r3, #0
 800a814:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a816:	79fb      	ldrb	r3, [r7, #7]
 800a818:	4a0d      	ldr	r2, [pc, #52]	; (800a850 <disk_initialize+0x48>)
 800a81a:	5cd3      	ldrb	r3, [r2, r3]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d111      	bne.n	800a844 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a820:	79fb      	ldrb	r3, [r7, #7]
 800a822:	4a0b      	ldr	r2, [pc, #44]	; (800a850 <disk_initialize+0x48>)
 800a824:	2101      	movs	r1, #1
 800a826:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a828:	79fb      	ldrb	r3, [r7, #7]
 800a82a:	4a09      	ldr	r2, [pc, #36]	; (800a850 <disk_initialize+0x48>)
 800a82c:	009b      	lsls	r3, r3, #2
 800a82e:	4413      	add	r3, r2
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	79fa      	ldrb	r2, [r7, #7]
 800a836:	4906      	ldr	r1, [pc, #24]	; (800a850 <disk_initialize+0x48>)
 800a838:	440a      	add	r2, r1
 800a83a:	7a12      	ldrb	r2, [r2, #8]
 800a83c:	4610      	mov	r0, r2
 800a83e:	4798      	blx	r3
 800a840:	4603      	mov	r3, r0
 800a842:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a844:	7bfb      	ldrb	r3, [r7, #15]
}
 800a846:	4618      	mov	r0, r3
 800a848:	3710      	adds	r7, #16
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	2000162c 	.word	0x2000162c

0800a854 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a854:	b590      	push	{r4, r7, lr}
 800a856:	b087      	sub	sp, #28
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60b9      	str	r1, [r7, #8]
 800a85c:	607a      	str	r2, [r7, #4]
 800a85e:	603b      	str	r3, [r7, #0]
 800a860:	4603      	mov	r3, r0
 800a862:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a864:	7bfb      	ldrb	r3, [r7, #15]
 800a866:	4a0a      	ldr	r2, [pc, #40]	; (800a890 <disk_read+0x3c>)
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	4413      	add	r3, r2
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	689c      	ldr	r4, [r3, #8]
 800a870:	7bfb      	ldrb	r3, [r7, #15]
 800a872:	4a07      	ldr	r2, [pc, #28]	; (800a890 <disk_read+0x3c>)
 800a874:	4413      	add	r3, r2
 800a876:	7a18      	ldrb	r0, [r3, #8]
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	68b9      	ldr	r1, [r7, #8]
 800a87e:	47a0      	blx	r4
 800a880:	4603      	mov	r3, r0
 800a882:	75fb      	strb	r3, [r7, #23]
  return res;
 800a884:	7dfb      	ldrb	r3, [r7, #23]
}
 800a886:	4618      	mov	r0, r3
 800a888:	371c      	adds	r7, #28
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd90      	pop	{r4, r7, pc}
 800a88e:	bf00      	nop
 800a890:	2000162c 	.word	0x2000162c

0800a894 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a894:	b590      	push	{r4, r7, lr}
 800a896:	b087      	sub	sp, #28
 800a898:	af00      	add	r7, sp, #0
 800a89a:	60b9      	str	r1, [r7, #8]
 800a89c:	607a      	str	r2, [r7, #4]
 800a89e:	603b      	str	r3, [r7, #0]
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a8a4:	7bfb      	ldrb	r3, [r7, #15]
 800a8a6:	4a0a      	ldr	r2, [pc, #40]	; (800a8d0 <disk_write+0x3c>)
 800a8a8:	009b      	lsls	r3, r3, #2
 800a8aa:	4413      	add	r3, r2
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	68dc      	ldr	r4, [r3, #12]
 800a8b0:	7bfb      	ldrb	r3, [r7, #15]
 800a8b2:	4a07      	ldr	r2, [pc, #28]	; (800a8d0 <disk_write+0x3c>)
 800a8b4:	4413      	add	r3, r2
 800a8b6:	7a18      	ldrb	r0, [r3, #8]
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	687a      	ldr	r2, [r7, #4]
 800a8bc:	68b9      	ldr	r1, [r7, #8]
 800a8be:	47a0      	blx	r4
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	75fb      	strb	r3, [r7, #23]
  return res;
 800a8c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	371c      	adds	r7, #28
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd90      	pop	{r4, r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	2000162c 	.word	0x2000162c

0800a8d4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	4603      	mov	r3, r0
 800a8dc:	603a      	str	r2, [r7, #0]
 800a8de:	71fb      	strb	r3, [r7, #7]
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a8e4:	79fb      	ldrb	r3, [r7, #7]
 800a8e6:	4a09      	ldr	r2, [pc, #36]	; (800a90c <disk_ioctl+0x38>)
 800a8e8:	009b      	lsls	r3, r3, #2
 800a8ea:	4413      	add	r3, r2
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	691b      	ldr	r3, [r3, #16]
 800a8f0:	79fa      	ldrb	r2, [r7, #7]
 800a8f2:	4906      	ldr	r1, [pc, #24]	; (800a90c <disk_ioctl+0x38>)
 800a8f4:	440a      	add	r2, r1
 800a8f6:	7a10      	ldrb	r0, [r2, #8]
 800a8f8:	79b9      	ldrb	r1, [r7, #6]
 800a8fa:	683a      	ldr	r2, [r7, #0]
 800a8fc:	4798      	blx	r3
 800a8fe:	4603      	mov	r3, r0
 800a900:	73fb      	strb	r3, [r7, #15]
  return res;
 800a902:	7bfb      	ldrb	r3, [r7, #15]
}
 800a904:	4618      	mov	r0, r3
 800a906:	3710      	adds	r7, #16
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}
 800a90c:	2000162c 	.word	0x2000162c

0800a910 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a910:	b480      	push	{r7}
 800a912:	b085      	sub	sp, #20
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	3301      	adds	r3, #1
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a920:	89fb      	ldrh	r3, [r7, #14]
 800a922:	021b      	lsls	r3, r3, #8
 800a924:	b21a      	sxth	r2, r3
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	b21b      	sxth	r3, r3
 800a92c:	4313      	orrs	r3, r2
 800a92e:	b21b      	sxth	r3, r3
 800a930:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a932:	89fb      	ldrh	r3, [r7, #14]
}
 800a934:	4618      	mov	r0, r3
 800a936:	3714      	adds	r7, #20
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr

0800a940 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a940:	b480      	push	{r7}
 800a942:	b085      	sub	sp, #20
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	3303      	adds	r3, #3
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	021b      	lsls	r3, r3, #8
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	3202      	adds	r2, #2
 800a958:	7812      	ldrb	r2, [r2, #0]
 800a95a:	4313      	orrs	r3, r2
 800a95c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	021b      	lsls	r3, r3, #8
 800a962:	687a      	ldr	r2, [r7, #4]
 800a964:	3201      	adds	r2, #1
 800a966:	7812      	ldrb	r2, [r2, #0]
 800a968:	4313      	orrs	r3, r2
 800a96a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	021b      	lsls	r3, r3, #8
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	7812      	ldrb	r2, [r2, #0]
 800a974:	4313      	orrs	r3, r2
 800a976:	60fb      	str	r3, [r7, #12]
	return rv;
 800a978:	68fb      	ldr	r3, [r7, #12]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3714      	adds	r7, #20
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr

0800a986 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a986:	b480      	push	{r7}
 800a988:	b083      	sub	sp, #12
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
 800a98e:	460b      	mov	r3, r1
 800a990:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	1c5a      	adds	r2, r3, #1
 800a996:	607a      	str	r2, [r7, #4]
 800a998:	887a      	ldrh	r2, [r7, #2]
 800a99a:	b2d2      	uxtb	r2, r2
 800a99c:	701a      	strb	r2, [r3, #0]
 800a99e:	887b      	ldrh	r3, [r7, #2]
 800a9a0:	0a1b      	lsrs	r3, r3, #8
 800a9a2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	1c5a      	adds	r2, r3, #1
 800a9a8:	607a      	str	r2, [r7, #4]
 800a9aa:	887a      	ldrh	r2, [r7, #2]
 800a9ac:	b2d2      	uxtb	r2, r2
 800a9ae:	701a      	strb	r2, [r3, #0]
}
 800a9b0:	bf00      	nop
 800a9b2:	370c      	adds	r7, #12
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr

0800a9bc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b083      	sub	sp, #12
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	1c5a      	adds	r2, r3, #1
 800a9ca:	607a      	str	r2, [r7, #4]
 800a9cc:	683a      	ldr	r2, [r7, #0]
 800a9ce:	b2d2      	uxtb	r2, r2
 800a9d0:	701a      	strb	r2, [r3, #0]
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	0a1b      	lsrs	r3, r3, #8
 800a9d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	1c5a      	adds	r2, r3, #1
 800a9dc:	607a      	str	r2, [r7, #4]
 800a9de:	683a      	ldr	r2, [r7, #0]
 800a9e0:	b2d2      	uxtb	r2, r2
 800a9e2:	701a      	strb	r2, [r3, #0]
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	0a1b      	lsrs	r3, r3, #8
 800a9e8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	1c5a      	adds	r2, r3, #1
 800a9ee:	607a      	str	r2, [r7, #4]
 800a9f0:	683a      	ldr	r2, [r7, #0]
 800a9f2:	b2d2      	uxtb	r2, r2
 800a9f4:	701a      	strb	r2, [r3, #0]
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	0a1b      	lsrs	r3, r3, #8
 800a9fa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	1c5a      	adds	r2, r3, #1
 800aa00:	607a      	str	r2, [r7, #4]
 800aa02:	683a      	ldr	r2, [r7, #0]
 800aa04:	b2d2      	uxtb	r2, r2
 800aa06:	701a      	strb	r2, [r3, #0]
}
 800aa08:	bf00      	nop
 800aa0a:	370c      	adds	r7, #12
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr

0800aa14 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800aa14:	b480      	push	{r7}
 800aa16:	b087      	sub	sp, #28
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	60f8      	str	r0, [r7, #12]
 800aa1c:	60b9      	str	r1, [r7, #8]
 800aa1e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d00d      	beq.n	800aa4a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800aa2e:	693a      	ldr	r2, [r7, #16]
 800aa30:	1c53      	adds	r3, r2, #1
 800aa32:	613b      	str	r3, [r7, #16]
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	1c59      	adds	r1, r3, #1
 800aa38:	6179      	str	r1, [r7, #20]
 800aa3a:	7812      	ldrb	r2, [r2, #0]
 800aa3c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	3b01      	subs	r3, #1
 800aa42:	607b      	str	r3, [r7, #4]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d1f1      	bne.n	800aa2e <mem_cpy+0x1a>
	}
}
 800aa4a:	bf00      	nop
 800aa4c:	371c      	adds	r7, #28
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr

0800aa56 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800aa56:	b480      	push	{r7}
 800aa58:	b087      	sub	sp, #28
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	60f8      	str	r0, [r7, #12]
 800aa5e:	60b9      	str	r1, [r7, #8]
 800aa60:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	1c5a      	adds	r2, r3, #1
 800aa6a:	617a      	str	r2, [r7, #20]
 800aa6c:	68ba      	ldr	r2, [r7, #8]
 800aa6e:	b2d2      	uxtb	r2, r2
 800aa70:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	3b01      	subs	r3, #1
 800aa76:	607b      	str	r3, [r7, #4]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d1f3      	bne.n	800aa66 <mem_set+0x10>
}
 800aa7e:	bf00      	nop
 800aa80:	bf00      	nop
 800aa82:	371c      	adds	r7, #28
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr

0800aa8c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800aa8c:	b480      	push	{r7}
 800aa8e:	b089      	sub	sp, #36	; 0x24
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	60f8      	str	r0, [r7, #12]
 800aa94:	60b9      	str	r1, [r7, #8]
 800aa96:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	61fb      	str	r3, [r7, #28]
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800aaa4:	69fb      	ldr	r3, [r7, #28]
 800aaa6:	1c5a      	adds	r2, r3, #1
 800aaa8:	61fa      	str	r2, [r7, #28]
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	4619      	mov	r1, r3
 800aaae:	69bb      	ldr	r3, [r7, #24]
 800aab0:	1c5a      	adds	r2, r3, #1
 800aab2:	61ba      	str	r2, [r7, #24]
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	1acb      	subs	r3, r1, r3
 800aab8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	3b01      	subs	r3, #1
 800aabe:	607b      	str	r3, [r7, #4]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d002      	beq.n	800aacc <mem_cmp+0x40>
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d0eb      	beq.n	800aaa4 <mem_cmp+0x18>

	return r;
 800aacc:	697b      	ldr	r3, [r7, #20]
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3724      	adds	r7, #36	; 0x24
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr

0800aada <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800aada:	b480      	push	{r7}
 800aadc:	b083      	sub	sp, #12
 800aade:	af00      	add	r7, sp, #0
 800aae0:	6078      	str	r0, [r7, #4]
 800aae2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800aae4:	e002      	b.n	800aaec <chk_chr+0x12>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	3301      	adds	r3, #1
 800aaea:	607b      	str	r3, [r7, #4]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	781b      	ldrb	r3, [r3, #0]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d005      	beq.n	800ab00 <chk_chr+0x26>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	461a      	mov	r2, r3
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d1f2      	bne.n	800aae6 <chk_chr+0xc>
	return *str;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	781b      	ldrb	r3, [r3, #0]
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	370c      	adds	r7, #12
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr

0800ab10 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d009      	beq.n	800ab32 <lock_fs+0x22>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	68db      	ldr	r3, [r3, #12]
 800ab22:	4618      	mov	r0, r3
 800ab24:	f002 fbbe 	bl	800d2a4 <ff_req_grant>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d001      	beq.n	800ab32 <lock_fs+0x22>
 800ab2e:	2301      	movs	r3, #1
 800ab30:	e000      	b.n	800ab34 <lock_fs+0x24>
 800ab32:	2300      	movs	r3, #0
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	460b      	mov	r3, r1
 800ab46:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d00d      	beq.n	800ab6a <unlock_fs+0x2e>
 800ab4e:	78fb      	ldrb	r3, [r7, #3]
 800ab50:	2b0c      	cmp	r3, #12
 800ab52:	d00a      	beq.n	800ab6a <unlock_fs+0x2e>
 800ab54:	78fb      	ldrb	r3, [r7, #3]
 800ab56:	2b0b      	cmp	r3, #11
 800ab58:	d007      	beq.n	800ab6a <unlock_fs+0x2e>
 800ab5a:	78fb      	ldrb	r3, [r7, #3]
 800ab5c:	2b0f      	cmp	r3, #15
 800ab5e:	d004      	beq.n	800ab6a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	68db      	ldr	r3, [r3, #12]
 800ab64:	4618      	mov	r0, r3
 800ab66:	f002 fbb2 	bl	800d2ce <ff_rel_grant>
	}
}
 800ab6a:	bf00      	nop
 800ab6c:	3708      	adds	r7, #8
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
	...

0800ab74 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b085      	sub	sp, #20
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ab7e:	2300      	movs	r3, #0
 800ab80:	60bb      	str	r3, [r7, #8]
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	60fb      	str	r3, [r7, #12]
 800ab86:	e029      	b.n	800abdc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ab88:	4a27      	ldr	r2, [pc, #156]	; (800ac28 <chk_lock+0xb4>)
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	011b      	lsls	r3, r3, #4
 800ab8e:	4413      	add	r3, r2
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d01d      	beq.n	800abd2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ab96:	4a24      	ldr	r2, [pc, #144]	; (800ac28 <chk_lock+0xb4>)
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	011b      	lsls	r3, r3, #4
 800ab9c:	4413      	add	r3, r2
 800ab9e:	681a      	ldr	r2, [r3, #0]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d116      	bne.n	800abd6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800aba8:	4a1f      	ldr	r2, [pc, #124]	; (800ac28 <chk_lock+0xb4>)
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	011b      	lsls	r3, r3, #4
 800abae:	4413      	add	r3, r2
 800abb0:	3304      	adds	r3, #4
 800abb2:	681a      	ldr	r2, [r3, #0]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800abb8:	429a      	cmp	r2, r3
 800abba:	d10c      	bne.n	800abd6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800abbc:	4a1a      	ldr	r2, [pc, #104]	; (800ac28 <chk_lock+0xb4>)
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	011b      	lsls	r3, r3, #4
 800abc2:	4413      	add	r3, r2
 800abc4:	3308      	adds	r3, #8
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800abcc:	429a      	cmp	r2, r3
 800abce:	d102      	bne.n	800abd6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800abd0:	e007      	b.n	800abe2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800abd2:	2301      	movs	r3, #1
 800abd4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	3301      	adds	r3, #1
 800abda:	60fb      	str	r3, [r7, #12]
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d9d2      	bls.n	800ab88 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2b02      	cmp	r3, #2
 800abe6:	d109      	bne.n	800abfc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d102      	bne.n	800abf4 <chk_lock+0x80>
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	2b02      	cmp	r3, #2
 800abf2:	d101      	bne.n	800abf8 <chk_lock+0x84>
 800abf4:	2300      	movs	r3, #0
 800abf6:	e010      	b.n	800ac1a <chk_lock+0xa6>
 800abf8:	2312      	movs	r3, #18
 800abfa:	e00e      	b.n	800ac1a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d108      	bne.n	800ac14 <chk_lock+0xa0>
 800ac02:	4a09      	ldr	r2, [pc, #36]	; (800ac28 <chk_lock+0xb4>)
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	011b      	lsls	r3, r3, #4
 800ac08:	4413      	add	r3, r2
 800ac0a:	330c      	adds	r3, #12
 800ac0c:	881b      	ldrh	r3, [r3, #0]
 800ac0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac12:	d101      	bne.n	800ac18 <chk_lock+0xa4>
 800ac14:	2310      	movs	r3, #16
 800ac16:	e000      	b.n	800ac1a <chk_lock+0xa6>
 800ac18:	2300      	movs	r3, #0
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3714      	adds	r7, #20
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr
 800ac26:	bf00      	nop
 800ac28:	2000160c 	.word	0x2000160c

0800ac2c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ac32:	2300      	movs	r3, #0
 800ac34:	607b      	str	r3, [r7, #4]
 800ac36:	e002      	b.n	800ac3e <enq_lock+0x12>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	607b      	str	r3, [r7, #4]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d806      	bhi.n	800ac52 <enq_lock+0x26>
 800ac44:	4a09      	ldr	r2, [pc, #36]	; (800ac6c <enq_lock+0x40>)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	011b      	lsls	r3, r3, #4
 800ac4a:	4413      	add	r3, r2
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d1f2      	bne.n	800ac38 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2b02      	cmp	r3, #2
 800ac56:	bf14      	ite	ne
 800ac58:	2301      	movne	r3, #1
 800ac5a:	2300      	moveq	r3, #0
 800ac5c:	b2db      	uxtb	r3, r3
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	370c      	adds	r7, #12
 800ac62:	46bd      	mov	sp, r7
 800ac64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac68:	4770      	bx	lr
 800ac6a:	bf00      	nop
 800ac6c:	2000160c 	.word	0x2000160c

0800ac70 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b085      	sub	sp, #20
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	60fb      	str	r3, [r7, #12]
 800ac7e:	e01f      	b.n	800acc0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ac80:	4a41      	ldr	r2, [pc, #260]	; (800ad88 <inc_lock+0x118>)
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	011b      	lsls	r3, r3, #4
 800ac86:	4413      	add	r3, r2
 800ac88:	681a      	ldr	r2, [r3, #0]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d113      	bne.n	800acba <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ac92:	4a3d      	ldr	r2, [pc, #244]	; (800ad88 <inc_lock+0x118>)
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	011b      	lsls	r3, r3, #4
 800ac98:	4413      	add	r3, r2
 800ac9a:	3304      	adds	r3, #4
 800ac9c:	681a      	ldr	r2, [r3, #0]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d109      	bne.n	800acba <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800aca6:	4a38      	ldr	r2, [pc, #224]	; (800ad88 <inc_lock+0x118>)
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	011b      	lsls	r3, r3, #4
 800acac:	4413      	add	r3, r2
 800acae:	3308      	adds	r3, #8
 800acb0:	681a      	ldr	r2, [r3, #0]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d006      	beq.n	800acc8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	3301      	adds	r3, #1
 800acbe:	60fb      	str	r3, [r7, #12]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2b01      	cmp	r3, #1
 800acc4:	d9dc      	bls.n	800ac80 <inc_lock+0x10>
 800acc6:	e000      	b.n	800acca <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800acc8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2b02      	cmp	r3, #2
 800acce:	d132      	bne.n	800ad36 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800acd0:	2300      	movs	r3, #0
 800acd2:	60fb      	str	r3, [r7, #12]
 800acd4:	e002      	b.n	800acdc <inc_lock+0x6c>
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	3301      	adds	r3, #1
 800acda:	60fb      	str	r3, [r7, #12]
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d806      	bhi.n	800acf0 <inc_lock+0x80>
 800ace2:	4a29      	ldr	r2, [pc, #164]	; (800ad88 <inc_lock+0x118>)
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	011b      	lsls	r3, r3, #4
 800ace8:	4413      	add	r3, r2
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d1f2      	bne.n	800acd6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	2b02      	cmp	r3, #2
 800acf4:	d101      	bne.n	800acfa <inc_lock+0x8a>
 800acf6:	2300      	movs	r3, #0
 800acf8:	e040      	b.n	800ad7c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681a      	ldr	r2, [r3, #0]
 800acfe:	4922      	ldr	r1, [pc, #136]	; (800ad88 <inc_lock+0x118>)
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	011b      	lsls	r3, r3, #4
 800ad04:	440b      	add	r3, r1
 800ad06:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	689a      	ldr	r2, [r3, #8]
 800ad0c:	491e      	ldr	r1, [pc, #120]	; (800ad88 <inc_lock+0x118>)
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	011b      	lsls	r3, r3, #4
 800ad12:	440b      	add	r3, r1
 800ad14:	3304      	adds	r3, #4
 800ad16:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	695a      	ldr	r2, [r3, #20]
 800ad1c:	491a      	ldr	r1, [pc, #104]	; (800ad88 <inc_lock+0x118>)
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	011b      	lsls	r3, r3, #4
 800ad22:	440b      	add	r3, r1
 800ad24:	3308      	adds	r3, #8
 800ad26:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ad28:	4a17      	ldr	r2, [pc, #92]	; (800ad88 <inc_lock+0x118>)
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	011b      	lsls	r3, r3, #4
 800ad2e:	4413      	add	r3, r2
 800ad30:	330c      	adds	r3, #12
 800ad32:	2200      	movs	r2, #0
 800ad34:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d009      	beq.n	800ad50 <inc_lock+0xe0>
 800ad3c:	4a12      	ldr	r2, [pc, #72]	; (800ad88 <inc_lock+0x118>)
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	011b      	lsls	r3, r3, #4
 800ad42:	4413      	add	r3, r2
 800ad44:	330c      	adds	r3, #12
 800ad46:	881b      	ldrh	r3, [r3, #0]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d001      	beq.n	800ad50 <inc_lock+0xe0>
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	e015      	b.n	800ad7c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d108      	bne.n	800ad68 <inc_lock+0xf8>
 800ad56:	4a0c      	ldr	r2, [pc, #48]	; (800ad88 <inc_lock+0x118>)
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	011b      	lsls	r3, r3, #4
 800ad5c:	4413      	add	r3, r2
 800ad5e:	330c      	adds	r3, #12
 800ad60:	881b      	ldrh	r3, [r3, #0]
 800ad62:	3301      	adds	r3, #1
 800ad64:	b29a      	uxth	r2, r3
 800ad66:	e001      	b.n	800ad6c <inc_lock+0xfc>
 800ad68:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ad6c:	4906      	ldr	r1, [pc, #24]	; (800ad88 <inc_lock+0x118>)
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	011b      	lsls	r3, r3, #4
 800ad72:	440b      	add	r3, r1
 800ad74:	330c      	adds	r3, #12
 800ad76:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	3301      	adds	r3, #1
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3714      	adds	r7, #20
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr
 800ad88:	2000160c 	.word	0x2000160c

0800ad8c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b085      	sub	sp, #20
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	3b01      	subs	r3, #1
 800ad98:	607b      	str	r3, [r7, #4]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d825      	bhi.n	800adec <dec_lock+0x60>
		n = Files[i].ctr;
 800ada0:	4a17      	ldr	r2, [pc, #92]	; (800ae00 <dec_lock+0x74>)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	011b      	lsls	r3, r3, #4
 800ada6:	4413      	add	r3, r2
 800ada8:	330c      	adds	r3, #12
 800adaa:	881b      	ldrh	r3, [r3, #0]
 800adac:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800adae:	89fb      	ldrh	r3, [r7, #14]
 800adb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adb4:	d101      	bne.n	800adba <dec_lock+0x2e>
 800adb6:	2300      	movs	r3, #0
 800adb8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800adba:	89fb      	ldrh	r3, [r7, #14]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d002      	beq.n	800adc6 <dec_lock+0x3a>
 800adc0:	89fb      	ldrh	r3, [r7, #14]
 800adc2:	3b01      	subs	r3, #1
 800adc4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800adc6:	4a0e      	ldr	r2, [pc, #56]	; (800ae00 <dec_lock+0x74>)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	011b      	lsls	r3, r3, #4
 800adcc:	4413      	add	r3, r2
 800adce:	330c      	adds	r3, #12
 800add0:	89fa      	ldrh	r2, [r7, #14]
 800add2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800add4:	89fb      	ldrh	r3, [r7, #14]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d105      	bne.n	800ade6 <dec_lock+0x5a>
 800adda:	4a09      	ldr	r2, [pc, #36]	; (800ae00 <dec_lock+0x74>)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	011b      	lsls	r3, r3, #4
 800ade0:	4413      	add	r3, r2
 800ade2:	2200      	movs	r2, #0
 800ade4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ade6:	2300      	movs	r3, #0
 800ade8:	737b      	strb	r3, [r7, #13]
 800adea:	e001      	b.n	800adf0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800adec:	2302      	movs	r3, #2
 800adee:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800adf0:	7b7b      	ldrb	r3, [r7, #13]
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3714      	adds	r7, #20
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr
 800adfe:	bf00      	nop
 800ae00:	2000160c 	.word	0x2000160c

0800ae04 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b085      	sub	sp, #20
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	60fb      	str	r3, [r7, #12]
 800ae10:	e010      	b.n	800ae34 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ae12:	4a0d      	ldr	r2, [pc, #52]	; (800ae48 <clear_lock+0x44>)
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	011b      	lsls	r3, r3, #4
 800ae18:	4413      	add	r3, r2
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d105      	bne.n	800ae2e <clear_lock+0x2a>
 800ae22:	4a09      	ldr	r2, [pc, #36]	; (800ae48 <clear_lock+0x44>)
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	011b      	lsls	r3, r3, #4
 800ae28:	4413      	add	r3, r2
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	3301      	adds	r3, #1
 800ae32:	60fb      	str	r3, [r7, #12]
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2b01      	cmp	r3, #1
 800ae38:	d9eb      	bls.n	800ae12 <clear_lock+0xe>
	}
}
 800ae3a:	bf00      	nop
 800ae3c:	bf00      	nop
 800ae3e:	3714      	adds	r7, #20
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr
 800ae48:	2000160c 	.word	0x2000160c

0800ae4c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b086      	sub	sp, #24
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ae54:	2300      	movs	r3, #0
 800ae56:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	78db      	ldrb	r3, [r3, #3]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d034      	beq.n	800aeca <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae64:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	7858      	ldrb	r0, [r3, #1]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ae70:	2301      	movs	r3, #1
 800ae72:	697a      	ldr	r2, [r7, #20]
 800ae74:	f7ff fd0e 	bl	800a894 <disk_write>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d002      	beq.n	800ae84 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	73fb      	strb	r3, [r7, #15]
 800ae82:	e022      	b.n	800aeca <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2200      	movs	r2, #0
 800ae88:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8e:	697a      	ldr	r2, [r7, #20]
 800ae90:	1ad2      	subs	r2, r2, r3
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	69db      	ldr	r3, [r3, #28]
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d217      	bcs.n	800aeca <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	789b      	ldrb	r3, [r3, #2]
 800ae9e:	613b      	str	r3, [r7, #16]
 800aea0:	e010      	b.n	800aec4 <sync_window+0x78>
					wsect += fs->fsize;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	69db      	ldr	r3, [r3, #28]
 800aea6:	697a      	ldr	r2, [r7, #20]
 800aea8:	4413      	add	r3, r2
 800aeaa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	7858      	ldrb	r0, [r3, #1]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	697a      	ldr	r2, [r7, #20]
 800aeba:	f7ff fceb 	bl	800a894 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	3b01      	subs	r3, #1
 800aec2:	613b      	str	r3, [r7, #16]
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d8eb      	bhi.n	800aea2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800aeca:	7bfb      	ldrb	r3, [r7, #15]
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3718      	adds	r7, #24
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800aede:	2300      	movs	r3, #0
 800aee0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aee6:	683a      	ldr	r2, [r7, #0]
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d01b      	beq.n	800af24 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f7ff ffad 	bl	800ae4c <sync_window>
 800aef2:	4603      	mov	r3, r0
 800aef4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800aef6:	7bfb      	ldrb	r3, [r7, #15]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d113      	bne.n	800af24 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	7858      	ldrb	r0, [r3, #1]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800af06:	2301      	movs	r3, #1
 800af08:	683a      	ldr	r2, [r7, #0]
 800af0a:	f7ff fca3 	bl	800a854 <disk_read>
 800af0e:	4603      	mov	r3, r0
 800af10:	2b00      	cmp	r3, #0
 800af12:	d004      	beq.n	800af1e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800af14:	f04f 33ff 	mov.w	r3, #4294967295
 800af18:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800af1a:	2301      	movs	r3, #1
 800af1c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	683a      	ldr	r2, [r7, #0]
 800af22:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800af24:	7bfb      	ldrb	r3, [r7, #15]
}
 800af26:	4618      	mov	r0, r3
 800af28:	3710      	adds	r7, #16
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
	...

0800af30 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f7ff ff87 	bl	800ae4c <sync_window>
 800af3e:	4603      	mov	r3, r0
 800af40:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800af42:	7bfb      	ldrb	r3, [r7, #15]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d158      	bne.n	800affa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	781b      	ldrb	r3, [r3, #0]
 800af4c:	2b03      	cmp	r3, #3
 800af4e:	d148      	bne.n	800afe2 <sync_fs+0xb2>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	791b      	ldrb	r3, [r3, #4]
 800af54:	2b01      	cmp	r3, #1
 800af56:	d144      	bne.n	800afe2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	3334      	adds	r3, #52	; 0x34
 800af5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af60:	2100      	movs	r1, #0
 800af62:	4618      	mov	r0, r3
 800af64:	f7ff fd77 	bl	800aa56 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	3334      	adds	r3, #52	; 0x34
 800af6c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800af70:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800af74:	4618      	mov	r0, r3
 800af76:	f7ff fd06 	bl	800a986 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	3334      	adds	r3, #52	; 0x34
 800af7e:	4921      	ldr	r1, [pc, #132]	; (800b004 <sync_fs+0xd4>)
 800af80:	4618      	mov	r0, r3
 800af82:	f7ff fd1b 	bl	800a9bc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	3334      	adds	r3, #52	; 0x34
 800af8a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800af8e:	491e      	ldr	r1, [pc, #120]	; (800b008 <sync_fs+0xd8>)
 800af90:	4618      	mov	r0, r3
 800af92:	f7ff fd13 	bl	800a9bc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	3334      	adds	r3, #52	; 0x34
 800af9a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	695b      	ldr	r3, [r3, #20]
 800afa2:	4619      	mov	r1, r3
 800afa4:	4610      	mov	r0, r2
 800afa6:	f7ff fd09 	bl	800a9bc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	3334      	adds	r3, #52	; 0x34
 800afae:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	691b      	ldr	r3, [r3, #16]
 800afb6:	4619      	mov	r1, r3
 800afb8:	4610      	mov	r0, r2
 800afba:	f7ff fcff 	bl	800a9bc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6a1b      	ldr	r3, [r3, #32]
 800afc2:	1c5a      	adds	r2, r3, #1
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	7858      	ldrb	r0, [r3, #1]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800afd6:	2301      	movs	r3, #1
 800afd8:	f7ff fc5c 	bl	800a894 <disk_write>
			fs->fsi_flag = 0;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2200      	movs	r2, #0
 800afe0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	785b      	ldrb	r3, [r3, #1]
 800afe6:	2200      	movs	r2, #0
 800afe8:	2100      	movs	r1, #0
 800afea:	4618      	mov	r0, r3
 800afec:	f7ff fc72 	bl	800a8d4 <disk_ioctl>
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d001      	beq.n	800affa <sync_fs+0xca>
 800aff6:	2301      	movs	r3, #1
 800aff8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800affa:	7bfb      	ldrb	r3, [r7, #15]
}
 800affc:	4618      	mov	r0, r3
 800affe:	3710      	adds	r7, #16
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}
 800b004:	41615252 	.word	0x41615252
 800b008:	61417272 	.word	0x61417272

0800b00c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b083      	sub	sp, #12
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	3b02      	subs	r3, #2
 800b01a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	699b      	ldr	r3, [r3, #24]
 800b020:	3b02      	subs	r3, #2
 800b022:	683a      	ldr	r2, [r7, #0]
 800b024:	429a      	cmp	r2, r3
 800b026:	d301      	bcc.n	800b02c <clust2sect+0x20>
 800b028:	2300      	movs	r3, #0
 800b02a:	e008      	b.n	800b03e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	895b      	ldrh	r3, [r3, #10]
 800b030:	461a      	mov	r2, r3
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	fb03 f202 	mul.w	r2, r3, r2
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b03c:	4413      	add	r3, r2
}
 800b03e:	4618      	mov	r0, r3
 800b040:	370c      	adds	r7, #12
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr

0800b04a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b04a:	b580      	push	{r7, lr}
 800b04c:	b086      	sub	sp, #24
 800b04e:	af00      	add	r7, sp, #0
 800b050:	6078      	str	r0, [r7, #4]
 800b052:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	d904      	bls.n	800b06a <get_fat+0x20>
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	699b      	ldr	r3, [r3, #24]
 800b064:	683a      	ldr	r2, [r7, #0]
 800b066:	429a      	cmp	r2, r3
 800b068:	d302      	bcc.n	800b070 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b06a:	2301      	movs	r3, #1
 800b06c:	617b      	str	r3, [r7, #20]
 800b06e:	e08f      	b.n	800b190 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b070:	f04f 33ff 	mov.w	r3, #4294967295
 800b074:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	781b      	ldrb	r3, [r3, #0]
 800b07a:	2b03      	cmp	r3, #3
 800b07c:	d062      	beq.n	800b144 <get_fat+0xfa>
 800b07e:	2b03      	cmp	r3, #3
 800b080:	dc7c      	bgt.n	800b17c <get_fat+0x132>
 800b082:	2b01      	cmp	r3, #1
 800b084:	d002      	beq.n	800b08c <get_fat+0x42>
 800b086:	2b02      	cmp	r3, #2
 800b088:	d042      	beq.n	800b110 <get_fat+0xc6>
 800b08a:	e077      	b.n	800b17c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	60fb      	str	r3, [r7, #12]
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	085b      	lsrs	r3, r3, #1
 800b094:	68fa      	ldr	r2, [r7, #12]
 800b096:	4413      	add	r3, r2
 800b098:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	0a5b      	lsrs	r3, r3, #9
 800b0a2:	4413      	add	r3, r2
 800b0a4:	4619      	mov	r1, r3
 800b0a6:	6938      	ldr	r0, [r7, #16]
 800b0a8:	f7ff ff14 	bl	800aed4 <move_window>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d167      	bne.n	800b182 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	1c5a      	adds	r2, r3, #1
 800b0b6:	60fa      	str	r2, [r7, #12]
 800b0b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0bc:	693a      	ldr	r2, [r7, #16]
 800b0be:	4413      	add	r3, r2
 800b0c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b0c4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	0a5b      	lsrs	r3, r3, #9
 800b0ce:	4413      	add	r3, r2
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	6938      	ldr	r0, [r7, #16]
 800b0d4:	f7ff fefe 	bl	800aed4 <move_window>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d153      	bne.n	800b186 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0e4:	693a      	ldr	r2, [r7, #16]
 800b0e6:	4413      	add	r3, r2
 800b0e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b0ec:	021b      	lsls	r3, r3, #8
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	4313      	orrs	r3, r2
 800b0f4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	f003 0301 	and.w	r3, r3, #1
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d002      	beq.n	800b106 <get_fat+0xbc>
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	091b      	lsrs	r3, r3, #4
 800b104:	e002      	b.n	800b10c <get_fat+0xc2>
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b10c:	617b      	str	r3, [r7, #20]
			break;
 800b10e:	e03f      	b.n	800b190 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	0a1b      	lsrs	r3, r3, #8
 800b118:	4413      	add	r3, r2
 800b11a:	4619      	mov	r1, r3
 800b11c:	6938      	ldr	r0, [r7, #16]
 800b11e:	f7ff fed9 	bl	800aed4 <move_window>
 800b122:	4603      	mov	r3, r0
 800b124:	2b00      	cmp	r3, #0
 800b126:	d130      	bne.n	800b18a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	005b      	lsls	r3, r3, #1
 800b132:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b136:	4413      	add	r3, r2
 800b138:	4618      	mov	r0, r3
 800b13a:	f7ff fbe9 	bl	800a910 <ld_word>
 800b13e:	4603      	mov	r3, r0
 800b140:	617b      	str	r3, [r7, #20]
			break;
 800b142:	e025      	b.n	800b190 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	09db      	lsrs	r3, r3, #7
 800b14c:	4413      	add	r3, r2
 800b14e:	4619      	mov	r1, r3
 800b150:	6938      	ldr	r0, [r7, #16]
 800b152:	f7ff febf 	bl	800aed4 <move_window>
 800b156:	4603      	mov	r3, r0
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d118      	bne.n	800b18e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b16a:	4413      	add	r3, r2
 800b16c:	4618      	mov	r0, r3
 800b16e:	f7ff fbe7 	bl	800a940 <ld_dword>
 800b172:	4603      	mov	r3, r0
 800b174:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b178:	617b      	str	r3, [r7, #20]
			break;
 800b17a:	e009      	b.n	800b190 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b17c:	2301      	movs	r3, #1
 800b17e:	617b      	str	r3, [r7, #20]
 800b180:	e006      	b.n	800b190 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b182:	bf00      	nop
 800b184:	e004      	b.n	800b190 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b186:	bf00      	nop
 800b188:	e002      	b.n	800b190 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b18a:	bf00      	nop
 800b18c:	e000      	b.n	800b190 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b18e:	bf00      	nop
		}
	}

	return val;
 800b190:	697b      	ldr	r3, [r7, #20]
}
 800b192:	4618      	mov	r0, r3
 800b194:	3718      	adds	r7, #24
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}

0800b19a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b19a:	b590      	push	{r4, r7, lr}
 800b19c:	b089      	sub	sp, #36	; 0x24
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	60f8      	str	r0, [r7, #12]
 800b1a2:	60b9      	str	r1, [r7, #8]
 800b1a4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b1a6:	2302      	movs	r3, #2
 800b1a8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	f240 80d2 	bls.w	800b356 <put_fat+0x1bc>
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	699b      	ldr	r3, [r3, #24]
 800b1b6:	68ba      	ldr	r2, [r7, #8]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	f080 80cc 	bcs.w	800b356 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	2b03      	cmp	r3, #3
 800b1c4:	f000 8096 	beq.w	800b2f4 <put_fat+0x15a>
 800b1c8:	2b03      	cmp	r3, #3
 800b1ca:	f300 80cd 	bgt.w	800b368 <put_fat+0x1ce>
 800b1ce:	2b01      	cmp	r3, #1
 800b1d0:	d002      	beq.n	800b1d8 <put_fat+0x3e>
 800b1d2:	2b02      	cmp	r3, #2
 800b1d4:	d06e      	beq.n	800b2b4 <put_fat+0x11a>
 800b1d6:	e0c7      	b.n	800b368 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	61bb      	str	r3, [r7, #24]
 800b1dc:	69bb      	ldr	r3, [r7, #24]
 800b1de:	085b      	lsrs	r3, r3, #1
 800b1e0:	69ba      	ldr	r2, [r7, #24]
 800b1e2:	4413      	add	r3, r2
 800b1e4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1ea:	69bb      	ldr	r3, [r7, #24]
 800b1ec:	0a5b      	lsrs	r3, r3, #9
 800b1ee:	4413      	add	r3, r2
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	68f8      	ldr	r0, [r7, #12]
 800b1f4:	f7ff fe6e 	bl	800aed4 <move_window>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b1fc:	7ffb      	ldrb	r3, [r7, #31]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	f040 80ab 	bne.w	800b35a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b20a:	69bb      	ldr	r3, [r7, #24]
 800b20c:	1c59      	adds	r1, r3, #1
 800b20e:	61b9      	str	r1, [r7, #24]
 800b210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b214:	4413      	add	r3, r2
 800b216:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	f003 0301 	and.w	r3, r3, #1
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d00d      	beq.n	800b23e <put_fat+0xa4>
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	b25b      	sxtb	r3, r3
 800b228:	f003 030f 	and.w	r3, r3, #15
 800b22c:	b25a      	sxtb	r2, r3
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	b2db      	uxtb	r3, r3
 800b232:	011b      	lsls	r3, r3, #4
 800b234:	b25b      	sxtb	r3, r3
 800b236:	4313      	orrs	r3, r2
 800b238:	b25b      	sxtb	r3, r3
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	e001      	b.n	800b242 <put_fat+0xa8>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	b2db      	uxtb	r3, r3
 800b242:	697a      	ldr	r2, [r7, #20]
 800b244:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2201      	movs	r2, #1
 800b24a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b250:	69bb      	ldr	r3, [r7, #24]
 800b252:	0a5b      	lsrs	r3, r3, #9
 800b254:	4413      	add	r3, r2
 800b256:	4619      	mov	r1, r3
 800b258:	68f8      	ldr	r0, [r7, #12]
 800b25a:	f7ff fe3b 	bl	800aed4 <move_window>
 800b25e:	4603      	mov	r3, r0
 800b260:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b262:	7ffb      	ldrb	r3, [r7, #31]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d17a      	bne.n	800b35e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b26e:	69bb      	ldr	r3, [r7, #24]
 800b270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b274:	4413      	add	r3, r2
 800b276:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	f003 0301 	and.w	r3, r3, #1
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d003      	beq.n	800b28a <put_fat+0xf0>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	091b      	lsrs	r3, r3, #4
 800b286:	b2db      	uxtb	r3, r3
 800b288:	e00e      	b.n	800b2a8 <put_fat+0x10e>
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	b25b      	sxtb	r3, r3
 800b290:	f023 030f 	bic.w	r3, r3, #15
 800b294:	b25a      	sxtb	r2, r3
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	0a1b      	lsrs	r3, r3, #8
 800b29a:	b25b      	sxtb	r3, r3
 800b29c:	f003 030f 	and.w	r3, r3, #15
 800b2a0:	b25b      	sxtb	r3, r3
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	b25b      	sxtb	r3, r3
 800b2a6:	b2db      	uxtb	r3, r3
 800b2a8:	697a      	ldr	r2, [r7, #20]
 800b2aa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	70da      	strb	r2, [r3, #3]
			break;
 800b2b2:	e059      	b.n	800b368 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	0a1b      	lsrs	r3, r3, #8
 800b2bc:	4413      	add	r3, r2
 800b2be:	4619      	mov	r1, r3
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f7ff fe07 	bl	800aed4 <move_window>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b2ca:	7ffb      	ldrb	r3, [r7, #31]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d148      	bne.n	800b362 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	005b      	lsls	r3, r3, #1
 800b2da:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b2de:	4413      	add	r3, r2
 800b2e0:	687a      	ldr	r2, [r7, #4]
 800b2e2:	b292      	uxth	r2, r2
 800b2e4:	4611      	mov	r1, r2
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f7ff fb4d 	bl	800a986 <st_word>
			fs->wflag = 1;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	70da      	strb	r2, [r3, #3]
			break;
 800b2f2:	e039      	b.n	800b368 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	09db      	lsrs	r3, r3, #7
 800b2fc:	4413      	add	r3, r2
 800b2fe:	4619      	mov	r1, r3
 800b300:	68f8      	ldr	r0, [r7, #12]
 800b302:	f7ff fde7 	bl	800aed4 <move_window>
 800b306:	4603      	mov	r3, r0
 800b308:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b30a:	7ffb      	ldrb	r3, [r7, #31]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d12a      	bne.n	800b366 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	009b      	lsls	r3, r3, #2
 800b320:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b324:	4413      	add	r3, r2
 800b326:	4618      	mov	r0, r3
 800b328:	f7ff fb0a 	bl	800a940 <ld_dword>
 800b32c:	4603      	mov	r3, r0
 800b32e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b332:	4323      	orrs	r3, r4
 800b334:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	009b      	lsls	r3, r3, #2
 800b340:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b344:	4413      	add	r3, r2
 800b346:	6879      	ldr	r1, [r7, #4]
 800b348:	4618      	mov	r0, r3
 800b34a:	f7ff fb37 	bl	800a9bc <st_dword>
			fs->wflag = 1;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2201      	movs	r2, #1
 800b352:	70da      	strb	r2, [r3, #3]
			break;
 800b354:	e008      	b.n	800b368 <put_fat+0x1ce>
		}
	}
 800b356:	bf00      	nop
 800b358:	e006      	b.n	800b368 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b35a:	bf00      	nop
 800b35c:	e004      	b.n	800b368 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b35e:	bf00      	nop
 800b360:	e002      	b.n	800b368 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b362:	bf00      	nop
 800b364:	e000      	b.n	800b368 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b366:	bf00      	nop
	return res;
 800b368:	7ffb      	ldrb	r3, [r7, #31]
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3724      	adds	r7, #36	; 0x24
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd90      	pop	{r4, r7, pc}

0800b372 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b372:	b580      	push	{r7, lr}
 800b374:	b088      	sub	sp, #32
 800b376:	af00      	add	r7, sp, #0
 800b378:	60f8      	str	r0, [r7, #12]
 800b37a:	60b9      	str	r1, [r7, #8]
 800b37c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b37e:	2300      	movs	r3, #0
 800b380:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	d904      	bls.n	800b398 <remove_chain+0x26>
 800b38e:	69bb      	ldr	r3, [r7, #24]
 800b390:	699b      	ldr	r3, [r3, #24]
 800b392:	68ba      	ldr	r2, [r7, #8]
 800b394:	429a      	cmp	r2, r3
 800b396:	d301      	bcc.n	800b39c <remove_chain+0x2a>
 800b398:	2302      	movs	r3, #2
 800b39a:	e04b      	b.n	800b434 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d00c      	beq.n	800b3bc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b3a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b3a6:	6879      	ldr	r1, [r7, #4]
 800b3a8:	69b8      	ldr	r0, [r7, #24]
 800b3aa:	f7ff fef6 	bl	800b19a <put_fat>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b3b2:	7ffb      	ldrb	r3, [r7, #31]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d001      	beq.n	800b3bc <remove_chain+0x4a>
 800b3b8:	7ffb      	ldrb	r3, [r7, #31]
 800b3ba:	e03b      	b.n	800b434 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b3bc:	68b9      	ldr	r1, [r7, #8]
 800b3be:	68f8      	ldr	r0, [r7, #12]
 800b3c0:	f7ff fe43 	bl	800b04a <get_fat>
 800b3c4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d031      	beq.n	800b430 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	d101      	bne.n	800b3d6 <remove_chain+0x64>
 800b3d2:	2302      	movs	r3, #2
 800b3d4:	e02e      	b.n	800b434 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3dc:	d101      	bne.n	800b3e2 <remove_chain+0x70>
 800b3de:	2301      	movs	r3, #1
 800b3e0:	e028      	b.n	800b434 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	68b9      	ldr	r1, [r7, #8]
 800b3e6:	69b8      	ldr	r0, [r7, #24]
 800b3e8:	f7ff fed7 	bl	800b19a <put_fat>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b3f0:	7ffb      	ldrb	r3, [r7, #31]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d001      	beq.n	800b3fa <remove_chain+0x88>
 800b3f6:	7ffb      	ldrb	r3, [r7, #31]
 800b3f8:	e01c      	b.n	800b434 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b3fa:	69bb      	ldr	r3, [r7, #24]
 800b3fc:	695a      	ldr	r2, [r3, #20]
 800b3fe:	69bb      	ldr	r3, [r7, #24]
 800b400:	699b      	ldr	r3, [r3, #24]
 800b402:	3b02      	subs	r3, #2
 800b404:	429a      	cmp	r2, r3
 800b406:	d20b      	bcs.n	800b420 <remove_chain+0xae>
			fs->free_clst++;
 800b408:	69bb      	ldr	r3, [r7, #24]
 800b40a:	695b      	ldr	r3, [r3, #20]
 800b40c:	1c5a      	adds	r2, r3, #1
 800b40e:	69bb      	ldr	r3, [r7, #24]
 800b410:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800b412:	69bb      	ldr	r3, [r7, #24]
 800b414:	791b      	ldrb	r3, [r3, #4]
 800b416:	f043 0301 	orr.w	r3, r3, #1
 800b41a:	b2da      	uxtb	r2, r3
 800b41c:	69bb      	ldr	r3, [r7, #24]
 800b41e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	699b      	ldr	r3, [r3, #24]
 800b428:	68ba      	ldr	r2, [r7, #8]
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d3c6      	bcc.n	800b3bc <remove_chain+0x4a>
 800b42e:	e000      	b.n	800b432 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b430:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b432:	2300      	movs	r3, #0
}
 800b434:	4618      	mov	r0, r3
 800b436:	3720      	adds	r7, #32
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}

0800b43c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b088      	sub	sp, #32
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d10d      	bne.n	800b46e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	691b      	ldr	r3, [r3, #16]
 800b456:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b458:	69bb      	ldr	r3, [r7, #24]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d004      	beq.n	800b468 <create_chain+0x2c>
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	699b      	ldr	r3, [r3, #24]
 800b462:	69ba      	ldr	r2, [r7, #24]
 800b464:	429a      	cmp	r2, r3
 800b466:	d31b      	bcc.n	800b4a0 <create_chain+0x64>
 800b468:	2301      	movs	r3, #1
 800b46a:	61bb      	str	r3, [r7, #24]
 800b46c:	e018      	b.n	800b4a0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b46e:	6839      	ldr	r1, [r7, #0]
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f7ff fdea 	bl	800b04a <get_fat>
 800b476:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2b01      	cmp	r3, #1
 800b47c:	d801      	bhi.n	800b482 <create_chain+0x46>
 800b47e:	2301      	movs	r3, #1
 800b480:	e070      	b.n	800b564 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b488:	d101      	bne.n	800b48e <create_chain+0x52>
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	e06a      	b.n	800b564 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	699b      	ldr	r3, [r3, #24]
 800b492:	68fa      	ldr	r2, [r7, #12]
 800b494:	429a      	cmp	r2, r3
 800b496:	d201      	bcs.n	800b49c <create_chain+0x60>
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	e063      	b.n	800b564 <create_chain+0x128>
		scl = clst;
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b4a0:	69bb      	ldr	r3, [r7, #24]
 800b4a2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b4a4:	69fb      	ldr	r3, [r7, #28]
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	699b      	ldr	r3, [r3, #24]
 800b4ae:	69fa      	ldr	r2, [r7, #28]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d307      	bcc.n	800b4c4 <create_chain+0x88>
				ncl = 2;
 800b4b4:	2302      	movs	r3, #2
 800b4b6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b4b8:	69fa      	ldr	r2, [r7, #28]
 800b4ba:	69bb      	ldr	r3, [r7, #24]
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d901      	bls.n	800b4c4 <create_chain+0x88>
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	e04f      	b.n	800b564 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b4c4:	69f9      	ldr	r1, [r7, #28]
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f7ff fdbf 	bl	800b04a <get_fat>
 800b4cc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d00e      	beq.n	800b4f2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2b01      	cmp	r3, #1
 800b4d8:	d003      	beq.n	800b4e2 <create_chain+0xa6>
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4e0:	d101      	bne.n	800b4e6 <create_chain+0xaa>
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	e03e      	b.n	800b564 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b4e6:	69fa      	ldr	r2, [r7, #28]
 800b4e8:	69bb      	ldr	r3, [r7, #24]
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	d1da      	bne.n	800b4a4 <create_chain+0x68>
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	e038      	b.n	800b564 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b4f2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b4f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b4f8:	69f9      	ldr	r1, [r7, #28]
 800b4fa:	6938      	ldr	r0, [r7, #16]
 800b4fc:	f7ff fe4d 	bl	800b19a <put_fat>
 800b500:	4603      	mov	r3, r0
 800b502:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b504:	7dfb      	ldrb	r3, [r7, #23]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d109      	bne.n	800b51e <create_chain+0xe2>
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d006      	beq.n	800b51e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b510:	69fa      	ldr	r2, [r7, #28]
 800b512:	6839      	ldr	r1, [r7, #0]
 800b514:	6938      	ldr	r0, [r7, #16]
 800b516:	f7ff fe40 	bl	800b19a <put_fat>
 800b51a:	4603      	mov	r3, r0
 800b51c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b51e:	7dfb      	ldrb	r3, [r7, #23]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d116      	bne.n	800b552 <create_chain+0x116>
		fs->last_clst = ncl;
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	69fa      	ldr	r2, [r7, #28]
 800b528:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	695a      	ldr	r2, [r3, #20]
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	699b      	ldr	r3, [r3, #24]
 800b532:	3b02      	subs	r3, #2
 800b534:	429a      	cmp	r2, r3
 800b536:	d804      	bhi.n	800b542 <create_chain+0x106>
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	695b      	ldr	r3, [r3, #20]
 800b53c:	1e5a      	subs	r2, r3, #1
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	791b      	ldrb	r3, [r3, #4]
 800b546:	f043 0301 	orr.w	r3, r3, #1
 800b54a:	b2da      	uxtb	r2, r3
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	711a      	strb	r2, [r3, #4]
 800b550:	e007      	b.n	800b562 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b552:	7dfb      	ldrb	r3, [r7, #23]
 800b554:	2b01      	cmp	r3, #1
 800b556:	d102      	bne.n	800b55e <create_chain+0x122>
 800b558:	f04f 33ff 	mov.w	r3, #4294967295
 800b55c:	e000      	b.n	800b560 <create_chain+0x124>
 800b55e:	2301      	movs	r3, #1
 800b560:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b562:	69fb      	ldr	r3, [r7, #28]
}
 800b564:	4618      	mov	r0, r3
 800b566:	3720      	adds	r7, #32
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}

0800b56c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b087      	sub	sp, #28
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b580:	3304      	adds	r3, #4
 800b582:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	0a5b      	lsrs	r3, r3, #9
 800b588:	68fa      	ldr	r2, [r7, #12]
 800b58a:	8952      	ldrh	r2, [r2, #10]
 800b58c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b590:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	1d1a      	adds	r2, r3, #4
 800b596:	613a      	str	r2, [r7, #16]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d101      	bne.n	800b5a6 <clmt_clust+0x3a>
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	e010      	b.n	800b5c8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b5a6:	697a      	ldr	r2, [r7, #20]
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d307      	bcc.n	800b5be <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b5ae:	697a      	ldr	r2, [r7, #20]
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	1ad3      	subs	r3, r2, r3
 800b5b4:	617b      	str	r3, [r7, #20]
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	3304      	adds	r3, #4
 800b5ba:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b5bc:	e7e9      	b.n	800b592 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b5be:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	681a      	ldr	r2, [r3, #0]
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	4413      	add	r3, r2
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	371c      	adds	r7, #28
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr

0800b5d4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b086      	sub	sp, #24
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b5ea:	d204      	bcs.n	800b5f6 <dir_sdi+0x22>
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	f003 031f 	and.w	r3, r3, #31
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d001      	beq.n	800b5fa <dir_sdi+0x26>
		return FR_INT_ERR;
 800b5f6:	2302      	movs	r3, #2
 800b5f8:	e063      	b.n	800b6c2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	683a      	ldr	r2, [r7, #0]
 800b5fe:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	689b      	ldr	r3, [r3, #8]
 800b604:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d106      	bne.n	800b61a <dir_sdi+0x46>
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	2b02      	cmp	r3, #2
 800b612:	d902      	bls.n	800b61a <dir_sdi+0x46>
		clst = fs->dirbase;
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b618:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d10c      	bne.n	800b63a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	095b      	lsrs	r3, r3, #5
 800b624:	693a      	ldr	r2, [r7, #16]
 800b626:	8912      	ldrh	r2, [r2, #8]
 800b628:	4293      	cmp	r3, r2
 800b62a:	d301      	bcc.n	800b630 <dir_sdi+0x5c>
 800b62c:	2302      	movs	r3, #2
 800b62e:	e048      	b.n	800b6c2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	61da      	str	r2, [r3, #28]
 800b638:	e029      	b.n	800b68e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	895b      	ldrh	r3, [r3, #10]
 800b63e:	025b      	lsls	r3, r3, #9
 800b640:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b642:	e019      	b.n	800b678 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6979      	ldr	r1, [r7, #20]
 800b648:	4618      	mov	r0, r3
 800b64a:	f7ff fcfe 	bl	800b04a <get_fat>
 800b64e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b656:	d101      	bne.n	800b65c <dir_sdi+0x88>
 800b658:	2301      	movs	r3, #1
 800b65a:	e032      	b.n	800b6c2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	2b01      	cmp	r3, #1
 800b660:	d904      	bls.n	800b66c <dir_sdi+0x98>
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	699b      	ldr	r3, [r3, #24]
 800b666:	697a      	ldr	r2, [r7, #20]
 800b668:	429a      	cmp	r2, r3
 800b66a:	d301      	bcc.n	800b670 <dir_sdi+0x9c>
 800b66c:	2302      	movs	r3, #2
 800b66e:	e028      	b.n	800b6c2 <dir_sdi+0xee>
			ofs -= csz;
 800b670:	683a      	ldr	r2, [r7, #0]
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	1ad3      	subs	r3, r2, r3
 800b676:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b678:	683a      	ldr	r2, [r7, #0]
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d2e1      	bcs.n	800b644 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b680:	6979      	ldr	r1, [r7, #20]
 800b682:	6938      	ldr	r0, [r7, #16]
 800b684:	f7ff fcc2 	bl	800b00c <clust2sect>
 800b688:	4602      	mov	r2, r0
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	697a      	ldr	r2, [r7, #20]
 800b692:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	69db      	ldr	r3, [r3, #28]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d101      	bne.n	800b6a0 <dir_sdi+0xcc>
 800b69c:	2302      	movs	r3, #2
 800b69e:	e010      	b.n	800b6c2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	69da      	ldr	r2, [r3, #28]
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	0a5b      	lsrs	r3, r3, #9
 800b6a8:	441a      	add	r2, r3
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6ba:	441a      	add	r2, r3
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b6c0:	2300      	movs	r3, #0
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3718      	adds	r7, #24
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}

0800b6ca <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b6ca:	b580      	push	{r7, lr}
 800b6cc:	b086      	sub	sp, #24
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
 800b6d2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	695b      	ldr	r3, [r3, #20]
 800b6de:	3320      	adds	r3, #32
 800b6e0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	69db      	ldr	r3, [r3, #28]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d003      	beq.n	800b6f2 <dir_next+0x28>
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b6f0:	d301      	bcc.n	800b6f6 <dir_next+0x2c>
 800b6f2:	2304      	movs	r3, #4
 800b6f4:	e0aa      	b.n	800b84c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	f040 8098 	bne.w	800b832 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	69db      	ldr	r3, [r3, #28]
 800b706:	1c5a      	adds	r2, r3, #1
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	699b      	ldr	r3, [r3, #24]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d10b      	bne.n	800b72c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	095b      	lsrs	r3, r3, #5
 800b718:	68fa      	ldr	r2, [r7, #12]
 800b71a:	8912      	ldrh	r2, [r2, #8]
 800b71c:	4293      	cmp	r3, r2
 800b71e:	f0c0 8088 	bcc.w	800b832 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2200      	movs	r2, #0
 800b726:	61da      	str	r2, [r3, #28]
 800b728:	2304      	movs	r3, #4
 800b72a:	e08f      	b.n	800b84c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	0a5b      	lsrs	r3, r3, #9
 800b730:	68fa      	ldr	r2, [r7, #12]
 800b732:	8952      	ldrh	r2, [r2, #10]
 800b734:	3a01      	subs	r2, #1
 800b736:	4013      	ands	r3, r2
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d17a      	bne.n	800b832 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b73c:	687a      	ldr	r2, [r7, #4]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	699b      	ldr	r3, [r3, #24]
 800b742:	4619      	mov	r1, r3
 800b744:	4610      	mov	r0, r2
 800b746:	f7ff fc80 	bl	800b04a <get_fat>
 800b74a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d801      	bhi.n	800b756 <dir_next+0x8c>
 800b752:	2302      	movs	r3, #2
 800b754:	e07a      	b.n	800b84c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b75c:	d101      	bne.n	800b762 <dir_next+0x98>
 800b75e:	2301      	movs	r3, #1
 800b760:	e074      	b.n	800b84c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	699b      	ldr	r3, [r3, #24]
 800b766:	697a      	ldr	r2, [r7, #20]
 800b768:	429a      	cmp	r2, r3
 800b76a:	d358      	bcc.n	800b81e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d104      	bne.n	800b77c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2200      	movs	r2, #0
 800b776:	61da      	str	r2, [r3, #28]
 800b778:	2304      	movs	r3, #4
 800b77a:	e067      	b.n	800b84c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b77c:	687a      	ldr	r2, [r7, #4]
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	699b      	ldr	r3, [r3, #24]
 800b782:	4619      	mov	r1, r3
 800b784:	4610      	mov	r0, r2
 800b786:	f7ff fe59 	bl	800b43c <create_chain>
 800b78a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d101      	bne.n	800b796 <dir_next+0xcc>
 800b792:	2307      	movs	r3, #7
 800b794:	e05a      	b.n	800b84c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	2b01      	cmp	r3, #1
 800b79a:	d101      	bne.n	800b7a0 <dir_next+0xd6>
 800b79c:	2302      	movs	r3, #2
 800b79e:	e055      	b.n	800b84c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7a6:	d101      	bne.n	800b7ac <dir_next+0xe2>
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	e04f      	b.n	800b84c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b7ac:	68f8      	ldr	r0, [r7, #12]
 800b7ae:	f7ff fb4d 	bl	800ae4c <sync_window>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d001      	beq.n	800b7bc <dir_next+0xf2>
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	e047      	b.n	800b84c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	3334      	adds	r3, #52	; 0x34
 800b7c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b7c4:	2100      	movs	r1, #0
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7ff f945 	bl	800aa56 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	613b      	str	r3, [r7, #16]
 800b7d0:	6979      	ldr	r1, [r7, #20]
 800b7d2:	68f8      	ldr	r0, [r7, #12]
 800b7d4:	f7ff fc1a 	bl	800b00c <clust2sect>
 800b7d8:	4602      	mov	r2, r0
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	631a      	str	r2, [r3, #48]	; 0x30
 800b7de:	e012      	b.n	800b806 <dir_next+0x13c>
						fs->wflag = 1;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b7e6:	68f8      	ldr	r0, [r7, #12]
 800b7e8:	f7ff fb30 	bl	800ae4c <sync_window>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d001      	beq.n	800b7f6 <dir_next+0x12c>
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	e02a      	b.n	800b84c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	3301      	adds	r3, #1
 800b7fa:	613b      	str	r3, [r7, #16]
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b800:	1c5a      	adds	r2, r3, #1
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	631a      	str	r2, [r3, #48]	; 0x30
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	895b      	ldrh	r3, [r3, #10]
 800b80a:	461a      	mov	r2, r3
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	4293      	cmp	r3, r2
 800b810:	d3e6      	bcc.n	800b7e0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	1ad2      	subs	r2, r2, r3
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	697a      	ldr	r2, [r7, #20]
 800b822:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b824:	6979      	ldr	r1, [r7, #20]
 800b826:	68f8      	ldr	r0, [r7, #12]
 800b828:	f7ff fbf0 	bl	800b00c <clust2sect>
 800b82c:	4602      	mov	r2, r0
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	68ba      	ldr	r2, [r7, #8]
 800b836:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b844:	441a      	add	r2, r3
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b84a:	2300      	movs	r3, #0
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3718      	adds	r7, #24
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b086      	sub	sp, #24
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b864:	2100      	movs	r1, #0
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f7ff feb4 	bl	800b5d4 <dir_sdi>
 800b86c:	4603      	mov	r3, r0
 800b86e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b870:	7dfb      	ldrb	r3, [r7, #23]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d12b      	bne.n	800b8ce <dir_alloc+0x7a>
		n = 0;
 800b876:	2300      	movs	r3, #0
 800b878:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	69db      	ldr	r3, [r3, #28]
 800b87e:	4619      	mov	r1, r3
 800b880:	68f8      	ldr	r0, [r7, #12]
 800b882:	f7ff fb27 	bl	800aed4 <move_window>
 800b886:	4603      	mov	r3, r0
 800b888:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b88a:	7dfb      	ldrb	r3, [r7, #23]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d11d      	bne.n	800b8cc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6a1b      	ldr	r3, [r3, #32]
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	2be5      	cmp	r3, #229	; 0xe5
 800b898:	d004      	beq.n	800b8a4 <dir_alloc+0x50>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6a1b      	ldr	r3, [r3, #32]
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d107      	bne.n	800b8b4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	613b      	str	r3, [r7, #16]
 800b8aa:	693a      	ldr	r2, [r7, #16]
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d102      	bne.n	800b8b8 <dir_alloc+0x64>
 800b8b2:	e00c      	b.n	800b8ce <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b8b8:	2101      	movs	r1, #1
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f7ff ff05 	bl	800b6ca <dir_next>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b8c4:	7dfb      	ldrb	r3, [r7, #23]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d0d7      	beq.n	800b87a <dir_alloc+0x26>
 800b8ca:	e000      	b.n	800b8ce <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b8cc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b8ce:	7dfb      	ldrb	r3, [r7, #23]
 800b8d0:	2b04      	cmp	r3, #4
 800b8d2:	d101      	bne.n	800b8d8 <dir_alloc+0x84>
 800b8d4:	2307      	movs	r3, #7
 800b8d6:	75fb      	strb	r3, [r7, #23]
	return res;
 800b8d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3718      	adds	r7, #24
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}

0800b8e2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b084      	sub	sp, #16
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
 800b8ea:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	331a      	adds	r3, #26
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f7ff f80d 	bl	800a910 <ld_word>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	781b      	ldrb	r3, [r3, #0]
 800b8fe:	2b03      	cmp	r3, #3
 800b900:	d109      	bne.n	800b916 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	3314      	adds	r3, #20
 800b906:	4618      	mov	r0, r3
 800b908:	f7ff f802 	bl	800a910 <ld_word>
 800b90c:	4603      	mov	r3, r0
 800b90e:	041b      	lsls	r3, r3, #16
 800b910:	68fa      	ldr	r2, [r7, #12]
 800b912:	4313      	orrs	r3, r2
 800b914:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b916:	68fb      	ldr	r3, [r7, #12]
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3710      	adds	r7, #16
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b084      	sub	sp, #16
 800b924:	af00      	add	r7, sp, #0
 800b926:	60f8      	str	r0, [r7, #12]
 800b928:	60b9      	str	r1, [r7, #8]
 800b92a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	331a      	adds	r3, #26
 800b930:	687a      	ldr	r2, [r7, #4]
 800b932:	b292      	uxth	r2, r2
 800b934:	4611      	mov	r1, r2
 800b936:	4618      	mov	r0, r3
 800b938:	f7ff f825 	bl	800a986 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	781b      	ldrb	r3, [r3, #0]
 800b940:	2b03      	cmp	r3, #3
 800b942:	d109      	bne.n	800b958 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	f103 0214 	add.w	r2, r3, #20
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	0c1b      	lsrs	r3, r3, #16
 800b94e:	b29b      	uxth	r3, r3
 800b950:	4619      	mov	r1, r3
 800b952:	4610      	mov	r0, r2
 800b954:	f7ff f817 	bl	800a986 <st_word>
	}
}
 800b958:	bf00      	nop
 800b95a:	3710      	adds	r7, #16
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b086      	sub	sp, #24
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800b96a:	2304      	movs	r3, #4
 800b96c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800b974:	e03c      	b.n	800b9f0 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	69db      	ldr	r3, [r3, #28]
 800b97a:	4619      	mov	r1, r3
 800b97c:	6938      	ldr	r0, [r7, #16]
 800b97e:	f7ff faa9 	bl	800aed4 <move_window>
 800b982:	4603      	mov	r3, r0
 800b984:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b986:	7dfb      	ldrb	r3, [r7, #23]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d136      	bne.n	800b9fa <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6a1b      	ldr	r3, [r3, #32]
 800b990:	781b      	ldrb	r3, [r3, #0]
 800b992:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800b994:	7bfb      	ldrb	r3, [r7, #15]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d102      	bne.n	800b9a0 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800b99a:	2304      	movs	r3, #4
 800b99c:	75fb      	strb	r3, [r7, #23]
 800b99e:	e031      	b.n	800ba04 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6a1b      	ldr	r3, [r3, #32]
 800b9a4:	330b      	adds	r3, #11
 800b9a6:	781b      	ldrb	r3, [r3, #0]
 800b9a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b9ac:	73bb      	strb	r3, [r7, #14]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	7bba      	ldrb	r2, [r7, #14]
 800b9b2:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800b9b4:	7bfb      	ldrb	r3, [r7, #15]
 800b9b6:	2be5      	cmp	r3, #229	; 0xe5
 800b9b8:	d011      	beq.n	800b9de <dir_read+0x7e>
 800b9ba:	7bfb      	ldrb	r3, [r7, #15]
 800b9bc:	2b2e      	cmp	r3, #46	; 0x2e
 800b9be:	d00e      	beq.n	800b9de <dir_read+0x7e>
 800b9c0:	7bbb      	ldrb	r3, [r7, #14]
 800b9c2:	2b0f      	cmp	r3, #15
 800b9c4:	d00b      	beq.n	800b9de <dir_read+0x7e>
 800b9c6:	7bbb      	ldrb	r3, [r7, #14]
 800b9c8:	f023 0320 	bic.w	r3, r3, #32
 800b9cc:	2b08      	cmp	r3, #8
 800b9ce:	bf0c      	ite	eq
 800b9d0:	2301      	moveq	r3, #1
 800b9d2:	2300      	movne	r3, #0
 800b9d4:	b2db      	uxtb	r3, r3
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d00f      	beq.n	800b9fe <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800b9de:	2100      	movs	r1, #0
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f7ff fe72 	bl	800b6ca <dir_next>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b9ea:	7dfb      	ldrb	r3, [r7, #23]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d108      	bne.n	800ba02 <dir_read+0xa2>
	while (dp->sect) {
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	69db      	ldr	r3, [r3, #28]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d1be      	bne.n	800b976 <dir_read+0x16>
 800b9f8:	e004      	b.n	800ba04 <dir_read+0xa4>
		if (res != FR_OK) break;
 800b9fa:	bf00      	nop
 800b9fc:	e002      	b.n	800ba04 <dir_read+0xa4>
				break;
 800b9fe:	bf00      	nop
 800ba00:	e000      	b.n	800ba04 <dir_read+0xa4>
		if (res != FR_OK) break;
 800ba02:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ba04:	7dfb      	ldrb	r3, [r7, #23]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d002      	beq.n	800ba10 <dir_read+0xb0>
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	61da      	str	r2, [r3, #28]
	return res;
 800ba10:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3718      	adds	r7, #24
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}

0800ba1a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ba1a:	b580      	push	{r7, lr}
 800ba1c:	b086      	sub	sp, #24
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ba28:	2100      	movs	r1, #0
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f7ff fdd2 	bl	800b5d4 <dir_sdi>
 800ba30:	4603      	mov	r3, r0
 800ba32:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ba34:	7dfb      	ldrb	r3, [r7, #23]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d001      	beq.n	800ba3e <dir_find+0x24>
 800ba3a:	7dfb      	ldrb	r3, [r7, #23]
 800ba3c:	e03e      	b.n	800babc <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	69db      	ldr	r3, [r3, #28]
 800ba42:	4619      	mov	r1, r3
 800ba44:	6938      	ldr	r0, [r7, #16]
 800ba46:	f7ff fa45 	bl	800aed4 <move_window>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ba4e:	7dfb      	ldrb	r3, [r7, #23]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d12f      	bne.n	800bab4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6a1b      	ldr	r3, [r3, #32]
 800ba58:	781b      	ldrb	r3, [r3, #0]
 800ba5a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ba5c:	7bfb      	ldrb	r3, [r7, #15]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d102      	bne.n	800ba68 <dir_find+0x4e>
 800ba62:	2304      	movs	r3, #4
 800ba64:	75fb      	strb	r3, [r7, #23]
 800ba66:	e028      	b.n	800baba <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6a1b      	ldr	r3, [r3, #32]
 800ba6c:	330b      	adds	r3, #11
 800ba6e:	781b      	ldrb	r3, [r3, #0]
 800ba70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba74:	b2da      	uxtb	r2, r3
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6a1b      	ldr	r3, [r3, #32]
 800ba7e:	330b      	adds	r3, #11
 800ba80:	781b      	ldrb	r3, [r3, #0]
 800ba82:	f003 0308 	and.w	r3, r3, #8
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d10a      	bne.n	800baa0 <dir_find+0x86>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6a18      	ldr	r0, [r3, #32]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	3324      	adds	r3, #36	; 0x24
 800ba92:	220b      	movs	r2, #11
 800ba94:	4619      	mov	r1, r3
 800ba96:	f7fe fff9 	bl	800aa8c <mem_cmp>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d00b      	beq.n	800bab8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800baa0:	2100      	movs	r1, #0
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f7ff fe11 	bl	800b6ca <dir_next>
 800baa8:	4603      	mov	r3, r0
 800baaa:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800baac:	7dfb      	ldrb	r3, [r7, #23]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d0c5      	beq.n	800ba3e <dir_find+0x24>
 800bab2:	e002      	b.n	800baba <dir_find+0xa0>
		if (res != FR_OK) break;
 800bab4:	bf00      	nop
 800bab6:	e000      	b.n	800baba <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bab8:	bf00      	nop

	return res;
 800baba:	7dfb      	ldrb	r3, [r7, #23]
}
 800babc:	4618      	mov	r0, r3
 800babe:	3718      	adds	r7, #24
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b084      	sub	sp, #16
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800bad2:	2101      	movs	r1, #1
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f7ff febd 	bl	800b854 <dir_alloc>
 800bada:	4603      	mov	r3, r0
 800badc:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bade:	7bfb      	ldrb	r3, [r7, #15]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d11c      	bne.n	800bb1e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	69db      	ldr	r3, [r3, #28]
 800bae8:	4619      	mov	r1, r3
 800baea:	68b8      	ldr	r0, [r7, #8]
 800baec:	f7ff f9f2 	bl	800aed4 <move_window>
 800baf0:	4603      	mov	r3, r0
 800baf2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800baf4:	7bfb      	ldrb	r3, [r7, #15]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d111      	bne.n	800bb1e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6a1b      	ldr	r3, [r3, #32]
 800bafe:	2220      	movs	r2, #32
 800bb00:	2100      	movs	r1, #0
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7fe ffa7 	bl	800aa56 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6a18      	ldr	r0, [r3, #32]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	3324      	adds	r3, #36	; 0x24
 800bb10:	220b      	movs	r2, #11
 800bb12:	4619      	mov	r1, r3
 800bb14:	f7fe ff7e 	bl	800aa14 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bb1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3710      	adds	r7, #16
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}

0800bb28 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b084      	sub	sp, #16
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	69db      	ldr	r3, [r3, #28]
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	68f8      	ldr	r0, [r7, #12]
 800bb3e:	f7ff f9c9 	bl	800aed4 <move_window>
 800bb42:	4603      	mov	r3, r0
 800bb44:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800bb46:	7afb      	ldrb	r3, [r7, #11]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d106      	bne.n	800bb5a <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6a1b      	ldr	r3, [r3, #32]
 800bb50:	22e5      	movs	r2, #229	; 0xe5
 800bb52:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2201      	movs	r2, #1
 800bb58:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800bb5a:	7afb      	ldrb	r3, [r7, #11]
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3710      	adds	r7, #16
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b088      	sub	sp, #32
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	60fb      	str	r3, [r7, #12]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	3324      	adds	r3, #36	; 0x24
 800bb78:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800bb7a:	220b      	movs	r2, #11
 800bb7c:	2120      	movs	r1, #32
 800bb7e:	68b8      	ldr	r0, [r7, #8]
 800bb80:	f7fe ff69 	bl	800aa56 <mem_set>
	si = i = 0; ni = 8;
 800bb84:	2300      	movs	r3, #0
 800bb86:	613b      	str	r3, [r7, #16]
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	61fb      	str	r3, [r7, #28]
 800bb8c:	2308      	movs	r3, #8
 800bb8e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800bb90:	69fb      	ldr	r3, [r7, #28]
 800bb92:	1c5a      	adds	r2, r3, #1
 800bb94:	61fa      	str	r2, [r7, #28]
 800bb96:	68fa      	ldr	r2, [r7, #12]
 800bb98:	4413      	add	r3, r2
 800bb9a:	781b      	ldrb	r3, [r3, #0]
 800bb9c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bb9e:	7efb      	ldrb	r3, [r7, #27]
 800bba0:	2b20      	cmp	r3, #32
 800bba2:	d94e      	bls.n	800bc42 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800bba4:	7efb      	ldrb	r3, [r7, #27]
 800bba6:	2b2f      	cmp	r3, #47	; 0x2f
 800bba8:	d006      	beq.n	800bbb8 <create_name+0x54>
 800bbaa:	7efb      	ldrb	r3, [r7, #27]
 800bbac:	2b5c      	cmp	r3, #92	; 0x5c
 800bbae:	d110      	bne.n	800bbd2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bbb0:	e002      	b.n	800bbb8 <create_name+0x54>
 800bbb2:	69fb      	ldr	r3, [r7, #28]
 800bbb4:	3301      	adds	r3, #1
 800bbb6:	61fb      	str	r3, [r7, #28]
 800bbb8:	68fa      	ldr	r2, [r7, #12]
 800bbba:	69fb      	ldr	r3, [r7, #28]
 800bbbc:	4413      	add	r3, r2
 800bbbe:	781b      	ldrb	r3, [r3, #0]
 800bbc0:	2b2f      	cmp	r3, #47	; 0x2f
 800bbc2:	d0f6      	beq.n	800bbb2 <create_name+0x4e>
 800bbc4:	68fa      	ldr	r2, [r7, #12]
 800bbc6:	69fb      	ldr	r3, [r7, #28]
 800bbc8:	4413      	add	r3, r2
 800bbca:	781b      	ldrb	r3, [r3, #0]
 800bbcc:	2b5c      	cmp	r3, #92	; 0x5c
 800bbce:	d0f0      	beq.n	800bbb2 <create_name+0x4e>
			break;
 800bbd0:	e038      	b.n	800bc44 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800bbd2:	7efb      	ldrb	r3, [r7, #27]
 800bbd4:	2b2e      	cmp	r3, #46	; 0x2e
 800bbd6:	d003      	beq.n	800bbe0 <create_name+0x7c>
 800bbd8:	693a      	ldr	r2, [r7, #16]
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d30c      	bcc.n	800bbfa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	2b0b      	cmp	r3, #11
 800bbe4:	d002      	beq.n	800bbec <create_name+0x88>
 800bbe6:	7efb      	ldrb	r3, [r7, #27]
 800bbe8:	2b2e      	cmp	r3, #46	; 0x2e
 800bbea:	d001      	beq.n	800bbf0 <create_name+0x8c>
 800bbec:	2306      	movs	r3, #6
 800bbee:	e044      	b.n	800bc7a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800bbf0:	2308      	movs	r3, #8
 800bbf2:	613b      	str	r3, [r7, #16]
 800bbf4:	230b      	movs	r3, #11
 800bbf6:	617b      	str	r3, [r7, #20]
			continue;
 800bbf8:	e022      	b.n	800bc40 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800bbfa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	da04      	bge.n	800bc0c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800bc02:	7efb      	ldrb	r3, [r7, #27]
 800bc04:	3b80      	subs	r3, #128	; 0x80
 800bc06:	4a1f      	ldr	r2, [pc, #124]	; (800bc84 <create_name+0x120>)
 800bc08:	5cd3      	ldrb	r3, [r2, r3]
 800bc0a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800bc0c:	7efb      	ldrb	r3, [r7, #27]
 800bc0e:	4619      	mov	r1, r3
 800bc10:	481d      	ldr	r0, [pc, #116]	; (800bc88 <create_name+0x124>)
 800bc12:	f7fe ff62 	bl	800aada <chk_chr>
 800bc16:	4603      	mov	r3, r0
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d001      	beq.n	800bc20 <create_name+0xbc>
 800bc1c:	2306      	movs	r3, #6
 800bc1e:	e02c      	b.n	800bc7a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800bc20:	7efb      	ldrb	r3, [r7, #27]
 800bc22:	2b60      	cmp	r3, #96	; 0x60
 800bc24:	d905      	bls.n	800bc32 <create_name+0xce>
 800bc26:	7efb      	ldrb	r3, [r7, #27]
 800bc28:	2b7a      	cmp	r3, #122	; 0x7a
 800bc2a:	d802      	bhi.n	800bc32 <create_name+0xce>
 800bc2c:	7efb      	ldrb	r3, [r7, #27]
 800bc2e:	3b20      	subs	r3, #32
 800bc30:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	1c5a      	adds	r2, r3, #1
 800bc36:	613a      	str	r2, [r7, #16]
 800bc38:	68ba      	ldr	r2, [r7, #8]
 800bc3a:	4413      	add	r3, r2
 800bc3c:	7efa      	ldrb	r2, [r7, #27]
 800bc3e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800bc40:	e7a6      	b.n	800bb90 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bc42:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800bc44:	68fa      	ldr	r2, [r7, #12]
 800bc46:	69fb      	ldr	r3, [r7, #28]
 800bc48:	441a      	add	r2, r3
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d101      	bne.n	800bc58 <create_name+0xf4>
 800bc54:	2306      	movs	r3, #6
 800bc56:	e010      	b.n	800bc7a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	781b      	ldrb	r3, [r3, #0]
 800bc5c:	2be5      	cmp	r3, #229	; 0xe5
 800bc5e:	d102      	bne.n	800bc66 <create_name+0x102>
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	2205      	movs	r2, #5
 800bc64:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bc66:	7efb      	ldrb	r3, [r7, #27]
 800bc68:	2b20      	cmp	r3, #32
 800bc6a:	d801      	bhi.n	800bc70 <create_name+0x10c>
 800bc6c:	2204      	movs	r2, #4
 800bc6e:	e000      	b.n	800bc72 <create_name+0x10e>
 800bc70:	2200      	movs	r2, #0
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	330b      	adds	r3, #11
 800bc76:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800bc78:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3720      	adds	r7, #32
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
 800bc82:	bf00      	nop
 800bc84:	08014b38 	.word	0x08014b38
 800bc88:	0801490c 	.word	0x0801490c

0800bc8c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b086      	sub	sp, #24
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bca0:	e002      	b.n	800bca8 <follow_path+0x1c>
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	3301      	adds	r3, #1
 800bca6:	603b      	str	r3, [r7, #0]
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	781b      	ldrb	r3, [r3, #0]
 800bcac:	2b2f      	cmp	r3, #47	; 0x2f
 800bcae:	d0f8      	beq.n	800bca2 <follow_path+0x16>
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	2b5c      	cmp	r3, #92	; 0x5c
 800bcb6:	d0f4      	beq.n	800bca2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	781b      	ldrb	r3, [r3, #0]
 800bcc2:	2b1f      	cmp	r3, #31
 800bcc4:	d80a      	bhi.n	800bcdc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2280      	movs	r2, #128	; 0x80
 800bcca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800bcce:	2100      	movs	r1, #0
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f7ff fc7f 	bl	800b5d4 <dir_sdi>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	75fb      	strb	r3, [r7, #23]
 800bcda:	e043      	b.n	800bd64 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bcdc:	463b      	mov	r3, r7
 800bcde:	4619      	mov	r1, r3
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f7ff ff3f 	bl	800bb64 <create_name>
 800bce6:	4603      	mov	r3, r0
 800bce8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bcea:	7dfb      	ldrb	r3, [r7, #23]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d134      	bne.n	800bd5a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f7ff fe92 	bl	800ba1a <dir_find>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bd00:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bd02:	7dfb      	ldrb	r3, [r7, #23]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d00a      	beq.n	800bd1e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bd08:	7dfb      	ldrb	r3, [r7, #23]
 800bd0a:	2b04      	cmp	r3, #4
 800bd0c:	d127      	bne.n	800bd5e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bd0e:	7afb      	ldrb	r3, [r7, #11]
 800bd10:	f003 0304 	and.w	r3, r3, #4
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d122      	bne.n	800bd5e <follow_path+0xd2>
 800bd18:	2305      	movs	r3, #5
 800bd1a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bd1c:	e01f      	b.n	800bd5e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bd1e:	7afb      	ldrb	r3, [r7, #11]
 800bd20:	f003 0304 	and.w	r3, r3, #4
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d11c      	bne.n	800bd62 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	799b      	ldrb	r3, [r3, #6]
 800bd2c:	f003 0310 	and.w	r3, r3, #16
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d102      	bne.n	800bd3a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bd34:	2305      	movs	r3, #5
 800bd36:	75fb      	strb	r3, [r7, #23]
 800bd38:	e014      	b.n	800bd64 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	695b      	ldr	r3, [r3, #20]
 800bd44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd48:	4413      	add	r3, r2
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	68f8      	ldr	r0, [r7, #12]
 800bd4e:	f7ff fdc8 	bl	800b8e2 <ld_clust>
 800bd52:	4602      	mov	r2, r0
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bd58:	e7c0      	b.n	800bcdc <follow_path+0x50>
			if (res != FR_OK) break;
 800bd5a:	bf00      	nop
 800bd5c:	e002      	b.n	800bd64 <follow_path+0xd8>
				break;
 800bd5e:	bf00      	nop
 800bd60:	e000      	b.n	800bd64 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bd62:	bf00      	nop
			}
		}
	}

	return res;
 800bd64:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3718      	adds	r7, #24
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}

0800bd6e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bd6e:	b480      	push	{r7}
 800bd70:	b087      	sub	sp, #28
 800bd72:	af00      	add	r7, sp, #0
 800bd74:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bd76:	f04f 33ff 	mov.w	r3, #4294967295
 800bd7a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d031      	beq.n	800bde8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	617b      	str	r3, [r7, #20]
 800bd8a:	e002      	b.n	800bd92 <get_ldnumber+0x24>
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	3301      	adds	r3, #1
 800bd90:	617b      	str	r3, [r7, #20]
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	2b20      	cmp	r3, #32
 800bd98:	d903      	bls.n	800bda2 <get_ldnumber+0x34>
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	2b3a      	cmp	r3, #58	; 0x3a
 800bda0:	d1f4      	bne.n	800bd8c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	2b3a      	cmp	r3, #58	; 0x3a
 800bda8:	d11c      	bne.n	800bde4 <get_ldnumber+0x76>
			tp = *path;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	1c5a      	adds	r2, r3, #1
 800bdb4:	60fa      	str	r2, [r7, #12]
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	3b30      	subs	r3, #48	; 0x30
 800bdba:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	2b09      	cmp	r3, #9
 800bdc0:	d80e      	bhi.n	800bde0 <get_ldnumber+0x72>
 800bdc2:	68fa      	ldr	r2, [r7, #12]
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d10a      	bne.n	800bde0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d107      	bne.n	800bde0 <get_ldnumber+0x72>
					vol = (int)i;
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	617b      	str	r3, [r7, #20]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	697a      	ldr	r2, [r7, #20]
 800bdde:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	e002      	b.n	800bdea <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bde4:	2300      	movs	r3, #0
 800bde6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bde8:	693b      	ldr	r3, [r7, #16]
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	371c      	adds	r7, #28
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr
	...

0800bdf8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b082      	sub	sp, #8
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2200      	movs	r2, #0
 800be06:	70da      	strb	r2, [r3, #3]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f04f 32ff 	mov.w	r2, #4294967295
 800be0e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800be10:	6839      	ldr	r1, [r7, #0]
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f7ff f85e 	bl	800aed4 <move_window>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d001      	beq.n	800be22 <check_fs+0x2a>
 800be1e:	2304      	movs	r3, #4
 800be20:	e038      	b.n	800be94 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	3334      	adds	r3, #52	; 0x34
 800be26:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7fe fd70 	bl	800a910 <ld_word>
 800be30:	4603      	mov	r3, r0
 800be32:	461a      	mov	r2, r3
 800be34:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800be38:	429a      	cmp	r2, r3
 800be3a:	d001      	beq.n	800be40 <check_fs+0x48>
 800be3c:	2303      	movs	r3, #3
 800be3e:	e029      	b.n	800be94 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800be46:	2be9      	cmp	r3, #233	; 0xe9
 800be48:	d009      	beq.n	800be5e <check_fs+0x66>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800be50:	2beb      	cmp	r3, #235	; 0xeb
 800be52:	d11e      	bne.n	800be92 <check_fs+0x9a>
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800be5a:	2b90      	cmp	r3, #144	; 0x90
 800be5c:	d119      	bne.n	800be92 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	3334      	adds	r3, #52	; 0x34
 800be62:	3336      	adds	r3, #54	; 0x36
 800be64:	4618      	mov	r0, r3
 800be66:	f7fe fd6b 	bl	800a940 <ld_dword>
 800be6a:	4603      	mov	r3, r0
 800be6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800be70:	4a0a      	ldr	r2, [pc, #40]	; (800be9c <check_fs+0xa4>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d101      	bne.n	800be7a <check_fs+0x82>
 800be76:	2300      	movs	r3, #0
 800be78:	e00c      	b.n	800be94 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	3334      	adds	r3, #52	; 0x34
 800be7e:	3352      	adds	r3, #82	; 0x52
 800be80:	4618      	mov	r0, r3
 800be82:	f7fe fd5d 	bl	800a940 <ld_dword>
 800be86:	4603      	mov	r3, r0
 800be88:	4a05      	ldr	r2, [pc, #20]	; (800bea0 <check_fs+0xa8>)
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d101      	bne.n	800be92 <check_fs+0x9a>
 800be8e:	2300      	movs	r3, #0
 800be90:	e000      	b.n	800be94 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800be92:	2302      	movs	r3, #2
}
 800be94:	4618      	mov	r0, r3
 800be96:	3708      	adds	r7, #8
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}
 800be9c:	00544146 	.word	0x00544146
 800bea0:	33544146 	.word	0x33544146

0800bea4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b096      	sub	sp, #88	; 0x58
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	60f8      	str	r0, [r7, #12]
 800beac:	60b9      	str	r1, [r7, #8]
 800beae:	4613      	mov	r3, r2
 800beb0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	2200      	movs	r2, #0
 800beb6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800beb8:	68f8      	ldr	r0, [r7, #12]
 800beba:	f7ff ff58 	bl	800bd6e <get_ldnumber>
 800bebe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	da01      	bge.n	800beca <find_volume+0x26>
 800bec6:	230b      	movs	r3, #11
 800bec8:	e235      	b.n	800c336 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800beca:	4aa5      	ldr	r2, [pc, #660]	; (800c160 <find_volume+0x2bc>)
 800becc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bed2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d101      	bne.n	800bede <find_volume+0x3a>
 800beda:	230c      	movs	r3, #12
 800bedc:	e22b      	b.n	800c336 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800bede:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bee0:	f7fe fe16 	bl	800ab10 <lock_fs>
 800bee4:	4603      	mov	r3, r0
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d101      	bne.n	800beee <find_volume+0x4a>
 800beea:	230f      	movs	r3, #15
 800beec:	e223      	b.n	800c336 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bef2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bef4:	79fb      	ldrb	r3, [r7, #7]
 800bef6:	f023 0301 	bic.w	r3, r3, #1
 800befa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800befc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800befe:	781b      	ldrb	r3, [r3, #0]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d01a      	beq.n	800bf3a <find_volume+0x96>
		stat = disk_status(fs->drv);
 800bf04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf06:	785b      	ldrb	r3, [r3, #1]
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f7fe fc63 	bl	800a7d4 <disk_status>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bf14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf18:	f003 0301 	and.w	r3, r3, #1
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d10c      	bne.n	800bf3a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bf20:	79fb      	ldrb	r3, [r7, #7]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d007      	beq.n	800bf36 <find_volume+0x92>
 800bf26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf2a:	f003 0304 	and.w	r3, r3, #4
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d001      	beq.n	800bf36 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800bf32:	230a      	movs	r3, #10
 800bf34:	e1ff      	b.n	800c336 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800bf36:	2300      	movs	r3, #0
 800bf38:	e1fd      	b.n	800c336 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bf3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bf40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf42:	b2da      	uxtb	r2, r3
 800bf44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf46:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bf48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf4a:	785b      	ldrb	r3, [r3, #1]
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f7fe fc5b 	bl	800a808 <disk_initialize>
 800bf52:	4603      	mov	r3, r0
 800bf54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bf58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf5c:	f003 0301 	and.w	r3, r3, #1
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d001      	beq.n	800bf68 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bf64:	2303      	movs	r3, #3
 800bf66:	e1e6      	b.n	800c336 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bf68:	79fb      	ldrb	r3, [r7, #7]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d007      	beq.n	800bf7e <find_volume+0xda>
 800bf6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf72:	f003 0304 	and.w	r3, r3, #4
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d001      	beq.n	800bf7e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800bf7a:	230a      	movs	r3, #10
 800bf7c:	e1db      	b.n	800c336 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bf82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bf84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bf86:	f7ff ff37 	bl	800bdf8 <check_fs>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bf90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf94:	2b02      	cmp	r3, #2
 800bf96:	d149      	bne.n	800c02c <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bf98:	2300      	movs	r3, #0
 800bf9a:	643b      	str	r3, [r7, #64]	; 0x40
 800bf9c:	e01e      	b.n	800bfdc <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bf9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bfa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfa6:	011b      	lsls	r3, r3, #4
 800bfa8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800bfac:	4413      	add	r3, r2
 800bfae:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bfb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb2:	3304      	adds	r3, #4
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d006      	beq.n	800bfc8 <find_volume+0x124>
 800bfba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfbc:	3308      	adds	r3, #8
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7fe fcbe 	bl	800a940 <ld_dword>
 800bfc4:	4602      	mov	r2, r0
 800bfc6:	e000      	b.n	800bfca <find_volume+0x126>
 800bfc8:	2200      	movs	r2, #0
 800bfca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfcc:	009b      	lsls	r3, r3, #2
 800bfce:	3358      	adds	r3, #88	; 0x58
 800bfd0:	443b      	add	r3, r7
 800bfd2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bfd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfd8:	3301      	adds	r3, #1
 800bfda:	643b      	str	r3, [r7, #64]	; 0x40
 800bfdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfde:	2b03      	cmp	r3, #3
 800bfe0:	d9dd      	bls.n	800bf9e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800bfe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d002      	beq.n	800bff2 <find_volume+0x14e>
 800bfec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfee:	3b01      	subs	r3, #1
 800bff0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800bff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bff4:	009b      	lsls	r3, r3, #2
 800bff6:	3358      	adds	r3, #88	; 0x58
 800bff8:	443b      	add	r3, r7
 800bffa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bffe:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c002:	2b00      	cmp	r3, #0
 800c004:	d005      	beq.n	800c012 <find_volume+0x16e>
 800c006:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c008:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c00a:	f7ff fef5 	bl	800bdf8 <check_fs>
 800c00e:	4603      	mov	r3, r0
 800c010:	e000      	b.n	800c014 <find_volume+0x170>
 800c012:	2303      	movs	r3, #3
 800c014:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c018:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d905      	bls.n	800c02c <find_volume+0x188>
 800c020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c022:	3301      	adds	r3, #1
 800c024:	643b      	str	r3, [r7, #64]	; 0x40
 800c026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c028:	2b03      	cmp	r3, #3
 800c02a:	d9e2      	bls.n	800bff2 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c02c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c030:	2b04      	cmp	r3, #4
 800c032:	d101      	bne.n	800c038 <find_volume+0x194>
 800c034:	2301      	movs	r3, #1
 800c036:	e17e      	b.n	800c336 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c038:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c03c:	2b01      	cmp	r3, #1
 800c03e:	d901      	bls.n	800c044 <find_volume+0x1a0>
 800c040:	230d      	movs	r3, #13
 800c042:	e178      	b.n	800c336 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c046:	3334      	adds	r3, #52	; 0x34
 800c048:	330b      	adds	r3, #11
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7fe fc60 	bl	800a910 <ld_word>
 800c050:	4603      	mov	r3, r0
 800c052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c056:	d001      	beq.n	800c05c <find_volume+0x1b8>
 800c058:	230d      	movs	r3, #13
 800c05a:	e16c      	b.n	800c336 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c05e:	3334      	adds	r3, #52	; 0x34
 800c060:	3316      	adds	r3, #22
 800c062:	4618      	mov	r0, r3
 800c064:	f7fe fc54 	bl	800a910 <ld_word>
 800c068:	4603      	mov	r3, r0
 800c06a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c06c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d106      	bne.n	800c080 <find_volume+0x1dc>
 800c072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c074:	3334      	adds	r3, #52	; 0x34
 800c076:	3324      	adds	r3, #36	; 0x24
 800c078:	4618      	mov	r0, r3
 800c07a:	f7fe fc61 	bl	800a940 <ld_dword>
 800c07e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c082:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c084:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c088:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c08e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c092:	789b      	ldrb	r3, [r3, #2]
 800c094:	2b01      	cmp	r3, #1
 800c096:	d005      	beq.n	800c0a4 <find_volume+0x200>
 800c098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c09a:	789b      	ldrb	r3, [r3, #2]
 800c09c:	2b02      	cmp	r3, #2
 800c09e:	d001      	beq.n	800c0a4 <find_volume+0x200>
 800c0a0:	230d      	movs	r3, #13
 800c0a2:	e148      	b.n	800c336 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a6:	789b      	ldrb	r3, [r3, #2]
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0ac:	fb02 f303 	mul.w	r3, r2, r3
 800c0b0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0b8:	b29a      	uxth	r2, r3
 800c0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0bc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c0:	895b      	ldrh	r3, [r3, #10]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d008      	beq.n	800c0d8 <find_volume+0x234>
 800c0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c8:	895b      	ldrh	r3, [r3, #10]
 800c0ca:	461a      	mov	r2, r3
 800c0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ce:	895b      	ldrh	r3, [r3, #10]
 800c0d0:	3b01      	subs	r3, #1
 800c0d2:	4013      	ands	r3, r2
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d001      	beq.n	800c0dc <find_volume+0x238>
 800c0d8:	230d      	movs	r3, #13
 800c0da:	e12c      	b.n	800c336 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0de:	3334      	adds	r3, #52	; 0x34
 800c0e0:	3311      	adds	r3, #17
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f7fe fc14 	bl	800a910 <ld_word>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f2:	891b      	ldrh	r3, [r3, #8]
 800c0f4:	f003 030f 	and.w	r3, r3, #15
 800c0f8:	b29b      	uxth	r3, r3
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d001      	beq.n	800c102 <find_volume+0x25e>
 800c0fe:	230d      	movs	r3, #13
 800c100:	e119      	b.n	800c336 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c104:	3334      	adds	r3, #52	; 0x34
 800c106:	3313      	adds	r3, #19
 800c108:	4618      	mov	r0, r3
 800c10a:	f7fe fc01 	bl	800a910 <ld_word>
 800c10e:	4603      	mov	r3, r0
 800c110:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c114:	2b00      	cmp	r3, #0
 800c116:	d106      	bne.n	800c126 <find_volume+0x282>
 800c118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c11a:	3334      	adds	r3, #52	; 0x34
 800c11c:	3320      	adds	r3, #32
 800c11e:	4618      	mov	r0, r3
 800c120:	f7fe fc0e 	bl	800a940 <ld_dword>
 800c124:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c128:	3334      	adds	r3, #52	; 0x34
 800c12a:	330e      	adds	r3, #14
 800c12c:	4618      	mov	r0, r3
 800c12e:	f7fe fbef 	bl	800a910 <ld_word>
 800c132:	4603      	mov	r3, r0
 800c134:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c136:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d101      	bne.n	800c140 <find_volume+0x29c>
 800c13c:	230d      	movs	r3, #13
 800c13e:	e0fa      	b.n	800c336 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c140:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c144:	4413      	add	r3, r2
 800c146:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c148:	8912      	ldrh	r2, [r2, #8]
 800c14a:	0912      	lsrs	r2, r2, #4
 800c14c:	b292      	uxth	r2, r2
 800c14e:	4413      	add	r3, r2
 800c150:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c152:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c156:	429a      	cmp	r2, r3
 800c158:	d204      	bcs.n	800c164 <find_volume+0x2c0>
 800c15a:	230d      	movs	r3, #13
 800c15c:	e0eb      	b.n	800c336 <find_volume+0x492>
 800c15e:	bf00      	nop
 800c160:	20001604 	.word	0x20001604
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c164:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c168:	1ad3      	subs	r3, r2, r3
 800c16a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c16c:	8952      	ldrh	r2, [r2, #10]
 800c16e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c172:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c176:	2b00      	cmp	r3, #0
 800c178:	d101      	bne.n	800c17e <find_volume+0x2da>
 800c17a:	230d      	movs	r3, #13
 800c17c:	e0db      	b.n	800c336 <find_volume+0x492>
		fmt = FS_FAT32;
 800c17e:	2303      	movs	r3, #3
 800c180:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c186:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d802      	bhi.n	800c194 <find_volume+0x2f0>
 800c18e:	2302      	movs	r3, #2
 800c190:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c196:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d802      	bhi.n	800c1a4 <find_volume+0x300>
 800c19e:	2301      	movs	r3, #1
 800c1a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a6:	1c9a      	adds	r2, r3, #2
 800c1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1aa:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800c1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c1b0:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c1b2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c1b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1b6:	441a      	add	r2, r3
 800c1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ba:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800c1bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c0:	441a      	add	r2, r3
 800c1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c4:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800c1c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c1ca:	2b03      	cmp	r3, #3
 800c1cc:	d11e      	bne.n	800c20c <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d0:	3334      	adds	r3, #52	; 0x34
 800c1d2:	332a      	adds	r3, #42	; 0x2a
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7fe fb9b 	bl	800a910 <ld_word>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d001      	beq.n	800c1e4 <find_volume+0x340>
 800c1e0:	230d      	movs	r3, #13
 800c1e2:	e0a8      	b.n	800c336 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e6:	891b      	ldrh	r3, [r3, #8]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d001      	beq.n	800c1f0 <find_volume+0x34c>
 800c1ec:	230d      	movs	r3, #13
 800c1ee:	e0a2      	b.n	800c336 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f2:	3334      	adds	r3, #52	; 0x34
 800c1f4:	332c      	adds	r3, #44	; 0x2c
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7fe fba2 	bl	800a940 <ld_dword>
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c200:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c204:	699b      	ldr	r3, [r3, #24]
 800c206:	009b      	lsls	r3, r3, #2
 800c208:	647b      	str	r3, [r7, #68]	; 0x44
 800c20a:	e01f      	b.n	800c24c <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c20e:	891b      	ldrh	r3, [r3, #8]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d101      	bne.n	800c218 <find_volume+0x374>
 800c214:	230d      	movs	r3, #13
 800c216:	e08e      	b.n	800c336 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c21a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c21c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c21e:	441a      	add	r2, r3
 800c220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c222:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c224:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c228:	2b02      	cmp	r3, #2
 800c22a:	d103      	bne.n	800c234 <find_volume+0x390>
 800c22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c22e:	699b      	ldr	r3, [r3, #24]
 800c230:	005b      	lsls	r3, r3, #1
 800c232:	e00a      	b.n	800c24a <find_volume+0x3a6>
 800c234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c236:	699a      	ldr	r2, [r3, #24]
 800c238:	4613      	mov	r3, r2
 800c23a:	005b      	lsls	r3, r3, #1
 800c23c:	4413      	add	r3, r2
 800c23e:	085a      	lsrs	r2, r3, #1
 800c240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c242:	699b      	ldr	r3, [r3, #24]
 800c244:	f003 0301 	and.w	r3, r3, #1
 800c248:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c24a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c24e:	69da      	ldr	r2, [r3, #28]
 800c250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c252:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c256:	0a5b      	lsrs	r3, r3, #9
 800c258:	429a      	cmp	r2, r3
 800c25a:	d201      	bcs.n	800c260 <find_volume+0x3bc>
 800c25c:	230d      	movs	r3, #13
 800c25e:	e06a      	b.n	800c336 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c262:	f04f 32ff 	mov.w	r2, #4294967295
 800c266:	615a      	str	r2, [r3, #20]
 800c268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c26a:	695a      	ldr	r2, [r3, #20]
 800c26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c26e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800c270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c272:	2280      	movs	r2, #128	; 0x80
 800c274:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c276:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c27a:	2b03      	cmp	r3, #3
 800c27c:	d149      	bne.n	800c312 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c280:	3334      	adds	r3, #52	; 0x34
 800c282:	3330      	adds	r3, #48	; 0x30
 800c284:	4618      	mov	r0, r3
 800c286:	f7fe fb43 	bl	800a910 <ld_word>
 800c28a:	4603      	mov	r3, r0
 800c28c:	2b01      	cmp	r3, #1
 800c28e:	d140      	bne.n	800c312 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c292:	3301      	adds	r3, #1
 800c294:	4619      	mov	r1, r3
 800c296:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c298:	f7fe fe1c 	bl	800aed4 <move_window>
 800c29c:	4603      	mov	r3, r0
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d137      	bne.n	800c312 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800c2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2aa:	3334      	adds	r3, #52	; 0x34
 800c2ac:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f7fe fb2d 	bl	800a910 <ld_word>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	461a      	mov	r2, r3
 800c2ba:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d127      	bne.n	800c312 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c4:	3334      	adds	r3, #52	; 0x34
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f7fe fb3a 	bl	800a940 <ld_dword>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	4a1c      	ldr	r2, [pc, #112]	; (800c340 <find_volume+0x49c>)
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d11e      	bne.n	800c312 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d6:	3334      	adds	r3, #52	; 0x34
 800c2d8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f7fe fb2f 	bl	800a940 <ld_dword>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	4a17      	ldr	r2, [pc, #92]	; (800c344 <find_volume+0x4a0>)
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	d113      	bne.n	800c312 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ec:	3334      	adds	r3, #52	; 0x34
 800c2ee:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f7fe fb24 	bl	800a940 <ld_dword>
 800c2f8:	4602      	mov	r2, r0
 800c2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2fc:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c300:	3334      	adds	r3, #52	; 0x34
 800c302:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c306:	4618      	mov	r0, r3
 800c308:	f7fe fb1a 	bl	800a940 <ld_dword>
 800c30c:	4602      	mov	r2, r0
 800c30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c310:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c314:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c318:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c31a:	4b0b      	ldr	r3, [pc, #44]	; (800c348 <find_volume+0x4a4>)
 800c31c:	881b      	ldrh	r3, [r3, #0]
 800c31e:	3301      	adds	r3, #1
 800c320:	b29a      	uxth	r2, r3
 800c322:	4b09      	ldr	r3, [pc, #36]	; (800c348 <find_volume+0x4a4>)
 800c324:	801a      	strh	r2, [r3, #0]
 800c326:	4b08      	ldr	r3, [pc, #32]	; (800c348 <find_volume+0x4a4>)
 800c328:	881a      	ldrh	r2, [r3, #0]
 800c32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c32c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c32e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c330:	f7fe fd68 	bl	800ae04 <clear_lock>
#endif
	return FR_OK;
 800c334:	2300      	movs	r3, #0
}
 800c336:	4618      	mov	r0, r3
 800c338:	3758      	adds	r7, #88	; 0x58
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
 800c33e:	bf00      	nop
 800c340:	41615252 	.word	0x41615252
 800c344:	61417272 	.word	0x61417272
 800c348:	20001608 	.word	0x20001608

0800c34c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b084      	sub	sp, #16
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c356:	2309      	movs	r3, #9
 800c358:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d02e      	beq.n	800c3be <validate+0x72>
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d02a      	beq.n	800c3be <validate+0x72>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	781b      	ldrb	r3, [r3, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d025      	beq.n	800c3be <validate+0x72>
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	889a      	ldrh	r2, [r3, #4]
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	88db      	ldrh	r3, [r3, #6]
 800c37c:	429a      	cmp	r2, r3
 800c37e:	d11e      	bne.n	800c3be <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	4618      	mov	r0, r3
 800c386:	f7fe fbc3 	bl	800ab10 <lock_fs>
 800c38a:	4603      	mov	r3, r0
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d014      	beq.n	800c3ba <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	785b      	ldrb	r3, [r3, #1]
 800c396:	4618      	mov	r0, r3
 800c398:	f7fe fa1c 	bl	800a7d4 <disk_status>
 800c39c:	4603      	mov	r3, r0
 800c39e:	f003 0301 	and.w	r3, r3, #1
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d102      	bne.n	800c3ac <validate+0x60>
				res = FR_OK;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	73fb      	strb	r3, [r7, #15]
 800c3aa:	e008      	b.n	800c3be <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	2100      	movs	r1, #0
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f7fe fbc2 	bl	800ab3c <unlock_fs>
 800c3b8:	e001      	b.n	800c3be <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800c3ba:	230f      	movs	r3, #15
 800c3bc:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c3be:	7bfb      	ldrb	r3, [r7, #15]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d102      	bne.n	800c3ca <validate+0x7e>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	e000      	b.n	800c3cc <validate+0x80>
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	683a      	ldr	r2, [r7, #0]
 800c3ce:	6013      	str	r3, [r2, #0]
	return res;
 800c3d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3710      	adds	r7, #16
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}
	...

0800c3dc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b088      	sub	sp, #32
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	60f8      	str	r0, [r7, #12]
 800c3e4:	60b9      	str	r1, [r7, #8]
 800c3e6:	4613      	mov	r3, r2
 800c3e8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c3ee:	f107 0310 	add.w	r3, r7, #16
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f7ff fcbb 	bl	800bd6e <get_ldnumber>
 800c3f8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c3fa:	69fb      	ldr	r3, [r7, #28]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	da01      	bge.n	800c404 <f_mount+0x28>
 800c400:	230b      	movs	r3, #11
 800c402:	e048      	b.n	800c496 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c404:	4a26      	ldr	r2, [pc, #152]	; (800c4a0 <f_mount+0xc4>)
 800c406:	69fb      	ldr	r3, [r7, #28]
 800c408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c40c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c40e:	69bb      	ldr	r3, [r7, #24]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d00f      	beq.n	800c434 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c414:	69b8      	ldr	r0, [r7, #24]
 800c416:	f7fe fcf5 	bl	800ae04 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800c41a:	69bb      	ldr	r3, [r7, #24]
 800c41c:	68db      	ldr	r3, [r3, #12]
 800c41e:	4618      	mov	r0, r3
 800c420:	f000 ff34 	bl	800d28c <ff_del_syncobj>
 800c424:	4603      	mov	r3, r0
 800c426:	2b00      	cmp	r3, #0
 800c428:	d101      	bne.n	800c42e <f_mount+0x52>
 800c42a:	2302      	movs	r3, #2
 800c42c:	e033      	b.n	800c496 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c42e:	69bb      	ldr	r3, [r7, #24]
 800c430:	2200      	movs	r2, #0
 800c432:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d00f      	beq.n	800c45a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	2200      	movs	r2, #0
 800c43e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800c440:	69fb      	ldr	r3, [r7, #28]
 800c442:	b2da      	uxtb	r2, r3
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	330c      	adds	r3, #12
 800c448:	4619      	mov	r1, r3
 800c44a:	4610      	mov	r0, r2
 800c44c:	f000 ff03 	bl	800d256 <ff_cre_syncobj>
 800c450:	4603      	mov	r3, r0
 800c452:	2b00      	cmp	r3, #0
 800c454:	d101      	bne.n	800c45a <f_mount+0x7e>
 800c456:	2302      	movs	r3, #2
 800c458:	e01d      	b.n	800c496 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c45a:	68fa      	ldr	r2, [r7, #12]
 800c45c:	4910      	ldr	r1, [pc, #64]	; (800c4a0 <f_mount+0xc4>)
 800c45e:	69fb      	ldr	r3, [r7, #28]
 800c460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d002      	beq.n	800c470 <f_mount+0x94>
 800c46a:	79fb      	ldrb	r3, [r7, #7]
 800c46c:	2b01      	cmp	r3, #1
 800c46e:	d001      	beq.n	800c474 <f_mount+0x98>
 800c470:	2300      	movs	r3, #0
 800c472:	e010      	b.n	800c496 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c474:	f107 010c 	add.w	r1, r7, #12
 800c478:	f107 0308 	add.w	r3, r7, #8
 800c47c:	2200      	movs	r2, #0
 800c47e:	4618      	mov	r0, r3
 800c480:	f7ff fd10 	bl	800bea4 <find_volume>
 800c484:	4603      	mov	r3, r0
 800c486:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	7dfa      	ldrb	r2, [r7, #23]
 800c48c:	4611      	mov	r1, r2
 800c48e:	4618      	mov	r0, r3
 800c490:	f7fe fb54 	bl	800ab3c <unlock_fs>
 800c494:	7dfb      	ldrb	r3, [r7, #23]
}
 800c496:	4618      	mov	r0, r3
 800c498:	3720      	adds	r7, #32
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
 800c49e:	bf00      	nop
 800c4a0:	20001604 	.word	0x20001604

0800c4a4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b098      	sub	sp, #96	; 0x60
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	60f8      	str	r0, [r7, #12]
 800c4ac:	60b9      	str	r1, [r7, #8]
 800c4ae:	4613      	mov	r3, r2
 800c4b0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d101      	bne.n	800c4bc <f_open+0x18>
 800c4b8:	2309      	movs	r3, #9
 800c4ba:	e1b4      	b.n	800c826 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c4bc:	79fb      	ldrb	r3, [r7, #7]
 800c4be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c4c2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c4c4:	79fa      	ldrb	r2, [r7, #7]
 800c4c6:	f107 0110 	add.w	r1, r7, #16
 800c4ca:	f107 0308 	add.w	r3, r7, #8
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f7ff fce8 	bl	800bea4 <find_volume>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800c4da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	f040 8191 	bne.w	800c806 <f_open+0x362>
		dj.obj.fs = fs;
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c4e8:	68ba      	ldr	r2, [r7, #8]
 800c4ea:	f107 0314 	add.w	r3, r7, #20
 800c4ee:	4611      	mov	r1, r2
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f7ff fbcb 	bl	800bc8c <follow_path>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c4fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c500:	2b00      	cmp	r3, #0
 800c502:	d11a      	bne.n	800c53a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c504:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c508:	b25b      	sxtb	r3, r3
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	da03      	bge.n	800c516 <f_open+0x72>
				res = FR_INVALID_NAME;
 800c50e:	2306      	movs	r3, #6
 800c510:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c514:	e011      	b.n	800c53a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c516:	79fb      	ldrb	r3, [r7, #7]
 800c518:	f023 0301 	bic.w	r3, r3, #1
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	bf14      	ite	ne
 800c520:	2301      	movne	r3, #1
 800c522:	2300      	moveq	r3, #0
 800c524:	b2db      	uxtb	r3, r3
 800c526:	461a      	mov	r2, r3
 800c528:	f107 0314 	add.w	r3, r7, #20
 800c52c:	4611      	mov	r1, r2
 800c52e:	4618      	mov	r0, r3
 800c530:	f7fe fb20 	bl	800ab74 <chk_lock>
 800c534:	4603      	mov	r3, r0
 800c536:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c53a:	79fb      	ldrb	r3, [r7, #7]
 800c53c:	f003 031c 	and.w	r3, r3, #28
 800c540:	2b00      	cmp	r3, #0
 800c542:	d07f      	beq.n	800c644 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c544:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d017      	beq.n	800c57c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c54c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c550:	2b04      	cmp	r3, #4
 800c552:	d10e      	bne.n	800c572 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c554:	f7fe fb6a 	bl	800ac2c <enq_lock>
 800c558:	4603      	mov	r3, r0
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d006      	beq.n	800c56c <f_open+0xc8>
 800c55e:	f107 0314 	add.w	r3, r7, #20
 800c562:	4618      	mov	r0, r3
 800c564:	f7ff faae 	bl	800bac4 <dir_register>
 800c568:	4603      	mov	r3, r0
 800c56a:	e000      	b.n	800c56e <f_open+0xca>
 800c56c:	2312      	movs	r3, #18
 800c56e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c572:	79fb      	ldrb	r3, [r7, #7]
 800c574:	f043 0308 	orr.w	r3, r3, #8
 800c578:	71fb      	strb	r3, [r7, #7]
 800c57a:	e010      	b.n	800c59e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c57c:	7ebb      	ldrb	r3, [r7, #26]
 800c57e:	f003 0311 	and.w	r3, r3, #17
 800c582:	2b00      	cmp	r3, #0
 800c584:	d003      	beq.n	800c58e <f_open+0xea>
					res = FR_DENIED;
 800c586:	2307      	movs	r3, #7
 800c588:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c58c:	e007      	b.n	800c59e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c58e:	79fb      	ldrb	r3, [r7, #7]
 800c590:	f003 0304 	and.w	r3, r3, #4
 800c594:	2b00      	cmp	r3, #0
 800c596:	d002      	beq.n	800c59e <f_open+0xfa>
 800c598:	2308      	movs	r3, #8
 800c59a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c59e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d168      	bne.n	800c678 <f_open+0x1d4>
 800c5a6:	79fb      	ldrb	r3, [r7, #7]
 800c5a8:	f003 0308 	and.w	r3, r3, #8
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d063      	beq.n	800c678 <f_open+0x1d4>
				dw = GET_FATTIME();
 800c5b0:	f7fd fbc8 	bl	8009d44 <get_fattime>
 800c5b4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c5b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5b8:	330e      	adds	r3, #14
 800c5ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f7fe f9fd 	bl	800a9bc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c5c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5c4:	3316      	adds	r3, #22
 800c5c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7fe f9f7 	bl	800a9bc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c5ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5d0:	330b      	adds	r3, #11
 800c5d2:	2220      	movs	r2, #32
 800c5d4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5da:	4611      	mov	r1, r2
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7ff f980 	bl	800b8e2 <ld_clust>
 800c5e2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7ff f998 	bl	800b920 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c5f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5f2:	331c      	adds	r3, #28
 800c5f4:	2100      	movs	r1, #0
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f7fe f9e0 	bl	800a9bc <st_dword>
					fs->wflag = 1;
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	2201      	movs	r2, #1
 800c600:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c604:	2b00      	cmp	r3, #0
 800c606:	d037      	beq.n	800c678 <f_open+0x1d4>
						dw = fs->winsect;
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c60c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c60e:	f107 0314 	add.w	r3, r7, #20
 800c612:	2200      	movs	r2, #0
 800c614:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c616:	4618      	mov	r0, r3
 800c618:	f7fe feab 	bl	800b372 <remove_chain>
 800c61c:	4603      	mov	r3, r0
 800c61e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800c622:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c626:	2b00      	cmp	r3, #0
 800c628:	d126      	bne.n	800c678 <f_open+0x1d4>
							res = move_window(fs, dw);
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c62e:	4618      	mov	r0, r3
 800c630:	f7fe fc50 	bl	800aed4 <move_window>
 800c634:	4603      	mov	r3, r0
 800c636:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c63e:	3a01      	subs	r2, #1
 800c640:	611a      	str	r2, [r3, #16]
 800c642:	e019      	b.n	800c678 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c644:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d115      	bne.n	800c678 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c64c:	7ebb      	ldrb	r3, [r7, #26]
 800c64e:	f003 0310 	and.w	r3, r3, #16
 800c652:	2b00      	cmp	r3, #0
 800c654:	d003      	beq.n	800c65e <f_open+0x1ba>
					res = FR_NO_FILE;
 800c656:	2304      	movs	r3, #4
 800c658:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c65c:	e00c      	b.n	800c678 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c65e:	79fb      	ldrb	r3, [r7, #7]
 800c660:	f003 0302 	and.w	r3, r3, #2
 800c664:	2b00      	cmp	r3, #0
 800c666:	d007      	beq.n	800c678 <f_open+0x1d4>
 800c668:	7ebb      	ldrb	r3, [r7, #26]
 800c66a:	f003 0301 	and.w	r3, r3, #1
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d002      	beq.n	800c678 <f_open+0x1d4>
						res = FR_DENIED;
 800c672:	2307      	movs	r3, #7
 800c674:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c678:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d128      	bne.n	800c6d2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c680:	79fb      	ldrb	r3, [r7, #7]
 800c682:	f003 0308 	and.w	r3, r3, #8
 800c686:	2b00      	cmp	r3, #0
 800c688:	d003      	beq.n	800c692 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c68a:	79fb      	ldrb	r3, [r7, #7]
 800c68c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c690:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c69a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c6a0:	79fb      	ldrb	r3, [r7, #7]
 800c6a2:	f023 0301 	bic.w	r3, r3, #1
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	bf14      	ite	ne
 800c6aa:	2301      	movne	r3, #1
 800c6ac:	2300      	moveq	r3, #0
 800c6ae:	b2db      	uxtb	r3, r3
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	f107 0314 	add.w	r3, r7, #20
 800c6b6:	4611      	mov	r1, r2
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f7fe fad9 	bl	800ac70 <inc_lock>
 800c6be:	4602      	mov	r2, r0
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	691b      	ldr	r3, [r3, #16]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d102      	bne.n	800c6d2 <f_open+0x22e>
 800c6cc:	2302      	movs	r3, #2
 800c6ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c6d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	f040 8095 	bne.w	800c806 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6e0:	4611      	mov	r1, r2
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f7ff f8fd 	bl	800b8e2 <ld_clust>
 800c6e8:	4602      	mov	r2, r0
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c6ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6f0:	331c      	adds	r3, #28
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f7fe f924 	bl	800a940 <ld_dword>
 800c6f8:	4602      	mov	r2, r0
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	2200      	movs	r2, #0
 800c702:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c704:	693a      	ldr	r2, [r7, #16]
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	88da      	ldrh	r2, [r3, #6]
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	79fa      	ldrb	r2, [r7, #7]
 800c716:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	2200      	movs	r2, #0
 800c71c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	2200      	movs	r2, #0
 800c722:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	2200      	movs	r2, #0
 800c728:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	3330      	adds	r3, #48	; 0x30
 800c72e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c732:	2100      	movs	r1, #0
 800c734:	4618      	mov	r0, r3
 800c736:	f7fe f98e 	bl	800aa56 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c73a:	79fb      	ldrb	r3, [r7, #7]
 800c73c:	f003 0320 	and.w	r3, r3, #32
 800c740:	2b00      	cmp	r3, #0
 800c742:	d060      	beq.n	800c806 <f_open+0x362>
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	68db      	ldr	r3, [r3, #12]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d05c      	beq.n	800c806 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	68da      	ldr	r2, [r3, #12]
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	895b      	ldrh	r3, [r3, #10]
 800c758:	025b      	lsls	r3, r3, #9
 800c75a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	689b      	ldr	r3, [r3, #8]
 800c760:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	68db      	ldr	r3, [r3, #12]
 800c766:	657b      	str	r3, [r7, #84]	; 0x54
 800c768:	e016      	b.n	800c798 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c76e:	4618      	mov	r0, r3
 800c770:	f7fe fc6b 	bl	800b04a <get_fat>
 800c774:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c776:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c778:	2b01      	cmp	r3, #1
 800c77a:	d802      	bhi.n	800c782 <f_open+0x2de>
 800c77c:	2302      	movs	r3, #2
 800c77e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c782:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c784:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c788:	d102      	bne.n	800c790 <f_open+0x2ec>
 800c78a:	2301      	movs	r3, #1
 800c78c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c790:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c794:	1ad3      	subs	r3, r2, r3
 800c796:	657b      	str	r3, [r7, #84]	; 0x54
 800c798:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d103      	bne.n	800c7a8 <f_open+0x304>
 800c7a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c7a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d8e0      	bhi.n	800c76a <f_open+0x2c6>
				}
				fp->clust = clst;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c7ac:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c7ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d127      	bne.n	800c806 <f_open+0x362>
 800c7b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d022      	beq.n	800c806 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f7fe fc21 	bl	800b00c <clust2sect>
 800c7ca:	6478      	str	r0, [r7, #68]	; 0x44
 800c7cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d103      	bne.n	800c7da <f_open+0x336>
						res = FR_INT_ERR;
 800c7d2:	2302      	movs	r3, #2
 800c7d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c7d8:	e015      	b.n	800c806 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c7da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7dc:	0a5a      	lsrs	r2, r3, #9
 800c7de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7e0:	441a      	add	r2, r3
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	7858      	ldrb	r0, [r3, #1]
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	6a1a      	ldr	r2, [r3, #32]
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	f7fe f82d 	bl	800a854 <disk_read>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d002      	beq.n	800c806 <f_open+0x362>
 800c800:	2301      	movs	r3, #1
 800c802:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c806:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d002      	beq.n	800c814 <f_open+0x370>
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	2200      	movs	r2, #0
 800c812:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c814:	693b      	ldr	r3, [r7, #16]
 800c816:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800c81a:	4611      	mov	r1, r2
 800c81c:	4618      	mov	r0, r3
 800c81e:	f7fe f98d 	bl	800ab3c <unlock_fs>
 800c822:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c826:	4618      	mov	r0, r3
 800c828:	3760      	adds	r7, #96	; 0x60
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}

0800c82e <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c82e:	b580      	push	{r7, lr}
 800c830:	b08e      	sub	sp, #56	; 0x38
 800c832:	af00      	add	r7, sp, #0
 800c834:	60f8      	str	r0, [r7, #12]
 800c836:	60b9      	str	r1, [r7, #8]
 800c838:	607a      	str	r2, [r7, #4]
 800c83a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	2200      	movs	r2, #0
 800c844:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	f107 0214 	add.w	r2, r7, #20
 800c84c:	4611      	mov	r1, r2
 800c84e:	4618      	mov	r0, r3
 800c850:	f7ff fd7c 	bl	800c34c <validate>
 800c854:	4603      	mov	r3, r0
 800c856:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c85a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d107      	bne.n	800c872 <f_read+0x44>
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	7d5b      	ldrb	r3, [r3, #21]
 800c866:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c86a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d009      	beq.n	800c886 <f_read+0x58>
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800c878:	4611      	mov	r1, r2
 800c87a:	4618      	mov	r0, r3
 800c87c:	f7fe f95e 	bl	800ab3c <unlock_fs>
 800c880:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c884:	e13d      	b.n	800cb02 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	7d1b      	ldrb	r3, [r3, #20]
 800c88a:	f003 0301 	and.w	r3, r3, #1
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d106      	bne.n	800c8a0 <f_read+0x72>
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	2107      	movs	r1, #7
 800c896:	4618      	mov	r0, r3
 800c898:	f7fe f950 	bl	800ab3c <unlock_fs>
 800c89c:	2307      	movs	r3, #7
 800c89e:	e130      	b.n	800cb02 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	68da      	ldr	r2, [r3, #12]
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	699b      	ldr	r3, [r3, #24]
 800c8a8:	1ad3      	subs	r3, r2, r3
 800c8aa:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c8ac:	687a      	ldr	r2, [r7, #4]
 800c8ae:	6a3b      	ldr	r3, [r7, #32]
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	f240 811c 	bls.w	800caee <f_read+0x2c0>
 800c8b6:	6a3b      	ldr	r3, [r7, #32]
 800c8b8:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c8ba:	e118      	b.n	800caee <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	699b      	ldr	r3, [r3, #24]
 800c8c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	f040 80e4 	bne.w	800ca92 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	699b      	ldr	r3, [r3, #24]
 800c8ce:	0a5b      	lsrs	r3, r3, #9
 800c8d0:	697a      	ldr	r2, [r7, #20]
 800c8d2:	8952      	ldrh	r2, [r2, #10]
 800c8d4:	3a01      	subs	r2, #1
 800c8d6:	4013      	ands	r3, r2
 800c8d8:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c8da:	69fb      	ldr	r3, [r7, #28]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d139      	bne.n	800c954 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	699b      	ldr	r3, [r3, #24]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d103      	bne.n	800c8f0 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	689b      	ldr	r3, [r3, #8]
 800c8ec:	633b      	str	r3, [r7, #48]	; 0x30
 800c8ee:	e013      	b.n	800c918 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d007      	beq.n	800c908 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	699b      	ldr	r3, [r3, #24]
 800c8fc:	4619      	mov	r1, r3
 800c8fe:	68f8      	ldr	r0, [r7, #12]
 800c900:	f7fe fe34 	bl	800b56c <clmt_clust>
 800c904:	6338      	str	r0, [r7, #48]	; 0x30
 800c906:	e007      	b.n	800c918 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c908:	68fa      	ldr	r2, [r7, #12]
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	69db      	ldr	r3, [r3, #28]
 800c90e:	4619      	mov	r1, r3
 800c910:	4610      	mov	r0, r2
 800c912:	f7fe fb9a 	bl	800b04a <get_fat>
 800c916:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c91a:	2b01      	cmp	r3, #1
 800c91c:	d809      	bhi.n	800c932 <f_read+0x104>
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	2202      	movs	r2, #2
 800c922:	755a      	strb	r2, [r3, #21]
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	2102      	movs	r1, #2
 800c928:	4618      	mov	r0, r3
 800c92a:	f7fe f907 	bl	800ab3c <unlock_fs>
 800c92e:	2302      	movs	r3, #2
 800c930:	e0e7      	b.n	800cb02 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c934:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c938:	d109      	bne.n	800c94e <f_read+0x120>
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	2201      	movs	r2, #1
 800c93e:	755a      	strb	r2, [r3, #21]
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	2101      	movs	r1, #1
 800c944:	4618      	mov	r0, r3
 800c946:	f7fe f8f9 	bl	800ab3c <unlock_fs>
 800c94a:	2301      	movs	r3, #1
 800c94c:	e0d9      	b.n	800cb02 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c952:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c954:	697a      	ldr	r2, [r7, #20]
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	69db      	ldr	r3, [r3, #28]
 800c95a:	4619      	mov	r1, r3
 800c95c:	4610      	mov	r0, r2
 800c95e:	f7fe fb55 	bl	800b00c <clust2sect>
 800c962:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c964:	69bb      	ldr	r3, [r7, #24]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d109      	bne.n	800c97e <f_read+0x150>
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	2202      	movs	r2, #2
 800c96e:	755a      	strb	r2, [r3, #21]
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	2102      	movs	r1, #2
 800c974:	4618      	mov	r0, r3
 800c976:	f7fe f8e1 	bl	800ab3c <unlock_fs>
 800c97a:	2302      	movs	r3, #2
 800c97c:	e0c1      	b.n	800cb02 <f_read+0x2d4>
			sect += csect;
 800c97e:	69ba      	ldr	r2, [r7, #24]
 800c980:	69fb      	ldr	r3, [r7, #28]
 800c982:	4413      	add	r3, r2
 800c984:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	0a5b      	lsrs	r3, r3, #9
 800c98a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d03e      	beq.n	800ca10 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c992:	69fa      	ldr	r2, [r7, #28]
 800c994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c996:	4413      	add	r3, r2
 800c998:	697a      	ldr	r2, [r7, #20]
 800c99a:	8952      	ldrh	r2, [r2, #10]
 800c99c:	4293      	cmp	r3, r2
 800c99e:	d905      	bls.n	800c9ac <f_read+0x17e>
					cc = fs->csize - csect;
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	895b      	ldrh	r3, [r3, #10]
 800c9a4:	461a      	mov	r2, r3
 800c9a6:	69fb      	ldr	r3, [r7, #28]
 800c9a8:	1ad3      	subs	r3, r2, r3
 800c9aa:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	7858      	ldrb	r0, [r3, #1]
 800c9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b2:	69ba      	ldr	r2, [r7, #24]
 800c9b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c9b6:	f7fd ff4d 	bl	800a854 <disk_read>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d009      	beq.n	800c9d4 <f_read+0x1a6>
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	2201      	movs	r2, #1
 800c9c4:	755a      	strb	r2, [r3, #21]
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	2101      	movs	r1, #1
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f7fe f8b6 	bl	800ab3c <unlock_fs>
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	e096      	b.n	800cb02 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	7d1b      	ldrb	r3, [r3, #20]
 800c9d8:	b25b      	sxtb	r3, r3
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	da14      	bge.n	800ca08 <f_read+0x1da>
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	6a1a      	ldr	r2, [r3, #32]
 800c9e2:	69bb      	ldr	r3, [r7, #24]
 800c9e4:	1ad3      	subs	r3, r2, r3
 800c9e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d90d      	bls.n	800ca08 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	6a1a      	ldr	r2, [r3, #32]
 800c9f0:	69bb      	ldr	r3, [r7, #24]
 800c9f2:	1ad3      	subs	r3, r2, r3
 800c9f4:	025b      	lsls	r3, r3, #9
 800c9f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9f8:	18d0      	adds	r0, r2, r3
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	3330      	adds	r3, #48	; 0x30
 800c9fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ca02:	4619      	mov	r1, r3
 800ca04:	f7fe f806 	bl	800aa14 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ca08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca0a:	025b      	lsls	r3, r3, #9
 800ca0c:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ca0e:	e05a      	b.n	800cac6 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	6a1b      	ldr	r3, [r3, #32]
 800ca14:	69ba      	ldr	r2, [r7, #24]
 800ca16:	429a      	cmp	r2, r3
 800ca18:	d038      	beq.n	800ca8c <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	7d1b      	ldrb	r3, [r3, #20]
 800ca1e:	b25b      	sxtb	r3, r3
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	da1d      	bge.n	800ca60 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	7858      	ldrb	r0, [r3, #1]
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	6a1a      	ldr	r2, [r3, #32]
 800ca32:	2301      	movs	r3, #1
 800ca34:	f7fd ff2e 	bl	800a894 <disk_write>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d009      	beq.n	800ca52 <f_read+0x224>
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	2201      	movs	r2, #1
 800ca42:	755a      	strb	r2, [r3, #21]
 800ca44:	697b      	ldr	r3, [r7, #20]
 800ca46:	2101      	movs	r1, #1
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f7fe f877 	bl	800ab3c <unlock_fs>
 800ca4e:	2301      	movs	r3, #1
 800ca50:	e057      	b.n	800cb02 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	7d1b      	ldrb	r3, [r3, #20]
 800ca56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca5a:	b2da      	uxtb	r2, r3
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	7858      	ldrb	r0, [r3, #1]
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	69ba      	ldr	r2, [r7, #24]
 800ca6e:	f7fd fef1 	bl	800a854 <disk_read>
 800ca72:	4603      	mov	r3, r0
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d009      	beq.n	800ca8c <f_read+0x25e>
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	755a      	strb	r2, [r3, #21]
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	2101      	movs	r1, #1
 800ca82:	4618      	mov	r0, r3
 800ca84:	f7fe f85a 	bl	800ab3c <unlock_fs>
 800ca88:	2301      	movs	r3, #1
 800ca8a:	e03a      	b.n	800cb02 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	69ba      	ldr	r2, [r7, #24]
 800ca90:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	699b      	ldr	r3, [r3, #24]
 800ca96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca9a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ca9e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800caa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	429a      	cmp	r2, r3
 800caa6:	d901      	bls.n	800caac <f_read+0x27e>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	699b      	ldr	r3, [r3, #24]
 800cab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caba:	4413      	add	r3, r2
 800cabc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cabe:	4619      	mov	r1, r3
 800cac0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cac2:	f7fd ffa7 	bl	800aa14 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800cac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caca:	4413      	add	r3, r2
 800cacc:	627b      	str	r3, [r7, #36]	; 0x24
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	699a      	ldr	r2, [r3, #24]
 800cad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad4:	441a      	add	r2, r3
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	619a      	str	r2, [r3, #24]
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	681a      	ldr	r2, [r3, #0]
 800cade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae0:	441a      	add	r2, r3
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	601a      	str	r2, [r3, #0]
 800cae6:	687a      	ldr	r2, [r7, #4]
 800cae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caea:	1ad3      	subs	r3, r2, r3
 800caec:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	f47f aee3 	bne.w	800c8bc <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	2100      	movs	r1, #0
 800cafa:	4618      	mov	r0, r3
 800cafc:	f7fe f81e 	bl	800ab3c <unlock_fs>
 800cb00:	2300      	movs	r3, #0
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3738      	adds	r7, #56	; 0x38
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}

0800cb0a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800cb0a:	b580      	push	{r7, lr}
 800cb0c:	b08c      	sub	sp, #48	; 0x30
 800cb0e:	af00      	add	r7, sp, #0
 800cb10:	60f8      	str	r0, [r7, #12]
 800cb12:	60b9      	str	r1, [r7, #8]
 800cb14:	607a      	str	r2, [r7, #4]
 800cb16:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	f107 0210 	add.w	r2, r7, #16
 800cb28:	4611      	mov	r1, r2
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f7ff fc0e 	bl	800c34c <validate>
 800cb30:	4603      	mov	r3, r0
 800cb32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cb36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d107      	bne.n	800cb4e <f_write+0x44>
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	7d5b      	ldrb	r3, [r3, #21]
 800cb42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cb46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d009      	beq.n	800cb62 <f_write+0x58>
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cb54:	4611      	mov	r1, r2
 800cb56:	4618      	mov	r0, r3
 800cb58:	f7fd fff0 	bl	800ab3c <unlock_fs>
 800cb5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cb60:	e173      	b.n	800ce4a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	7d1b      	ldrb	r3, [r3, #20]
 800cb66:	f003 0302 	and.w	r3, r3, #2
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d106      	bne.n	800cb7c <f_write+0x72>
 800cb6e:	693b      	ldr	r3, [r7, #16]
 800cb70:	2107      	movs	r1, #7
 800cb72:	4618      	mov	r0, r3
 800cb74:	f7fd ffe2 	bl	800ab3c <unlock_fs>
 800cb78:	2307      	movs	r3, #7
 800cb7a:	e166      	b.n	800ce4a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	699a      	ldr	r2, [r3, #24]
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	441a      	add	r2, r3
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	699b      	ldr	r3, [r3, #24]
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	f080 814b 	bcs.w	800ce24 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	699b      	ldr	r3, [r3, #24]
 800cb92:	43db      	mvns	r3, r3
 800cb94:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800cb96:	e145      	b.n	800ce24 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	699b      	ldr	r3, [r3, #24]
 800cb9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	f040 8101 	bne.w	800cda8 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	699b      	ldr	r3, [r3, #24]
 800cbaa:	0a5b      	lsrs	r3, r3, #9
 800cbac:	693a      	ldr	r2, [r7, #16]
 800cbae:	8952      	ldrh	r2, [r2, #10]
 800cbb0:	3a01      	subs	r2, #1
 800cbb2:	4013      	ands	r3, r2
 800cbb4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800cbb6:	69bb      	ldr	r3, [r7, #24]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d14d      	bne.n	800cc58 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	699b      	ldr	r3, [r3, #24]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d10c      	bne.n	800cbde <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	689b      	ldr	r3, [r3, #8]
 800cbc8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800cbca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d11a      	bne.n	800cc06 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	2100      	movs	r1, #0
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f7fe fc31 	bl	800b43c <create_chain>
 800cbda:	62b8      	str	r0, [r7, #40]	; 0x28
 800cbdc:	e013      	b.n	800cc06 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d007      	beq.n	800cbf6 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	699b      	ldr	r3, [r3, #24]
 800cbea:	4619      	mov	r1, r3
 800cbec:	68f8      	ldr	r0, [r7, #12]
 800cbee:	f7fe fcbd 	bl	800b56c <clmt_clust>
 800cbf2:	62b8      	str	r0, [r7, #40]	; 0x28
 800cbf4:	e007      	b.n	800cc06 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800cbf6:	68fa      	ldr	r2, [r7, #12]
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	69db      	ldr	r3, [r3, #28]
 800cbfc:	4619      	mov	r1, r3
 800cbfe:	4610      	mov	r0, r2
 800cc00:	f7fe fc1c 	bl	800b43c <create_chain>
 800cc04:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cc06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	f000 8110 	beq.w	800ce2e <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800cc0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc10:	2b01      	cmp	r3, #1
 800cc12:	d109      	bne.n	800cc28 <f_write+0x11e>
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	2202      	movs	r2, #2
 800cc18:	755a      	strb	r2, [r3, #21]
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	2102      	movs	r1, #2
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f7fd ff8c 	bl	800ab3c <unlock_fs>
 800cc24:	2302      	movs	r3, #2
 800cc26:	e110      	b.n	800ce4a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cc28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc2e:	d109      	bne.n	800cc44 <f_write+0x13a>
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	2201      	movs	r2, #1
 800cc34:	755a      	strb	r2, [r3, #21]
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	2101      	movs	r1, #1
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f7fd ff7e 	bl	800ab3c <unlock_fs>
 800cc40:	2301      	movs	r3, #1
 800cc42:	e102      	b.n	800ce4a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc48:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	689b      	ldr	r3, [r3, #8]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d102      	bne.n	800cc58 <f_write+0x14e>
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc56:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	7d1b      	ldrb	r3, [r3, #20]
 800cc5c:	b25b      	sxtb	r3, r3
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	da1d      	bge.n	800cc9e <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	7858      	ldrb	r0, [r3, #1]
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	6a1a      	ldr	r2, [r3, #32]
 800cc70:	2301      	movs	r3, #1
 800cc72:	f7fd fe0f 	bl	800a894 <disk_write>
 800cc76:	4603      	mov	r3, r0
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d009      	beq.n	800cc90 <f_write+0x186>
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	2201      	movs	r2, #1
 800cc80:	755a      	strb	r2, [r3, #21]
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	2101      	movs	r1, #1
 800cc86:	4618      	mov	r0, r3
 800cc88:	f7fd ff58 	bl	800ab3c <unlock_fs>
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	e0dc      	b.n	800ce4a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	7d1b      	ldrb	r3, [r3, #20]
 800cc94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc98:	b2da      	uxtb	r2, r3
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cc9e:	693a      	ldr	r2, [r7, #16]
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	69db      	ldr	r3, [r3, #28]
 800cca4:	4619      	mov	r1, r3
 800cca6:	4610      	mov	r0, r2
 800cca8:	f7fe f9b0 	bl	800b00c <clust2sect>
 800ccac:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d109      	bne.n	800ccc8 <f_write+0x1be>
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	2202      	movs	r2, #2
 800ccb8:	755a      	strb	r2, [r3, #21]
 800ccba:	693b      	ldr	r3, [r7, #16]
 800ccbc:	2102      	movs	r1, #2
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	f7fd ff3c 	bl	800ab3c <unlock_fs>
 800ccc4:	2302      	movs	r3, #2
 800ccc6:	e0c0      	b.n	800ce4a <f_write+0x340>
			sect += csect;
 800ccc8:	697a      	ldr	r2, [r7, #20]
 800ccca:	69bb      	ldr	r3, [r7, #24]
 800cccc:	4413      	add	r3, r2
 800ccce:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	0a5b      	lsrs	r3, r3, #9
 800ccd4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ccd6:	6a3b      	ldr	r3, [r7, #32]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d041      	beq.n	800cd60 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ccdc:	69ba      	ldr	r2, [r7, #24]
 800ccde:	6a3b      	ldr	r3, [r7, #32]
 800cce0:	4413      	add	r3, r2
 800cce2:	693a      	ldr	r2, [r7, #16]
 800cce4:	8952      	ldrh	r2, [r2, #10]
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d905      	bls.n	800ccf6 <f_write+0x1ec>
					cc = fs->csize - csect;
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	895b      	ldrh	r3, [r3, #10]
 800ccee:	461a      	mov	r2, r3
 800ccf0:	69bb      	ldr	r3, [r7, #24]
 800ccf2:	1ad3      	subs	r3, r2, r3
 800ccf4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	7858      	ldrb	r0, [r3, #1]
 800ccfa:	6a3b      	ldr	r3, [r7, #32]
 800ccfc:	697a      	ldr	r2, [r7, #20]
 800ccfe:	69f9      	ldr	r1, [r7, #28]
 800cd00:	f7fd fdc8 	bl	800a894 <disk_write>
 800cd04:	4603      	mov	r3, r0
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d009      	beq.n	800cd1e <f_write+0x214>
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	2201      	movs	r2, #1
 800cd0e:	755a      	strb	r2, [r3, #21]
 800cd10:	693b      	ldr	r3, [r7, #16]
 800cd12:	2101      	movs	r1, #1
 800cd14:	4618      	mov	r0, r3
 800cd16:	f7fd ff11 	bl	800ab3c <unlock_fs>
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	e095      	b.n	800ce4a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	6a1a      	ldr	r2, [r3, #32]
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	1ad3      	subs	r3, r2, r3
 800cd26:	6a3a      	ldr	r2, [r7, #32]
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d915      	bls.n	800cd58 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	6a1a      	ldr	r2, [r3, #32]
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	1ad3      	subs	r3, r2, r3
 800cd3a:	025b      	lsls	r3, r3, #9
 800cd3c:	69fa      	ldr	r2, [r7, #28]
 800cd3e:	4413      	add	r3, r2
 800cd40:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cd44:	4619      	mov	r1, r3
 800cd46:	f7fd fe65 	bl	800aa14 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	7d1b      	ldrb	r3, [r3, #20]
 800cd4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd52:	b2da      	uxtb	r2, r3
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800cd58:	6a3b      	ldr	r3, [r7, #32]
 800cd5a:	025b      	lsls	r3, r3, #9
 800cd5c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800cd5e:	e044      	b.n	800cdea <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	6a1b      	ldr	r3, [r3, #32]
 800cd64:	697a      	ldr	r2, [r7, #20]
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d01b      	beq.n	800cda2 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	699a      	ldr	r2, [r3, #24]
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cd72:	429a      	cmp	r2, r3
 800cd74:	d215      	bcs.n	800cda2 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	7858      	ldrb	r0, [r3, #1]
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cd80:	2301      	movs	r3, #1
 800cd82:	697a      	ldr	r2, [r7, #20]
 800cd84:	f7fd fd66 	bl	800a854 <disk_read>
 800cd88:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d009      	beq.n	800cda2 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	2201      	movs	r2, #1
 800cd92:	755a      	strb	r2, [r3, #21]
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	2101      	movs	r1, #1
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f7fd fecf 	bl	800ab3c <unlock_fs>
 800cd9e:	2301      	movs	r3, #1
 800cda0:	e053      	b.n	800ce4a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	697a      	ldr	r2, [r7, #20]
 800cda6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	699b      	ldr	r3, [r3, #24]
 800cdac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdb0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800cdb4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800cdb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	d901      	bls.n	800cdc2 <f_write+0x2b8>
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	699b      	ldr	r3, [r3, #24]
 800cdcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdd0:	4413      	add	r3, r2
 800cdd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdd4:	69f9      	ldr	r1, [r7, #28]
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f7fd fe1c 	bl	800aa14 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	7d1b      	ldrb	r3, [r3, #20]
 800cde0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cde4:	b2da      	uxtb	r2, r3
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800cdea:	69fa      	ldr	r2, [r7, #28]
 800cdec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdee:	4413      	add	r3, r2
 800cdf0:	61fb      	str	r3, [r7, #28]
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	699a      	ldr	r2, [r3, #24]
 800cdf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf8:	441a      	add	r2, r3
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	619a      	str	r2, [r3, #24]
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	68da      	ldr	r2, [r3, #12]
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	699b      	ldr	r3, [r3, #24]
 800ce06:	429a      	cmp	r2, r3
 800ce08:	bf38      	it	cc
 800ce0a:	461a      	movcc	r2, r3
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	60da      	str	r2, [r3, #12]
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	681a      	ldr	r2, [r3, #0]
 800ce14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce16:	441a      	add	r2, r3
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	601a      	str	r2, [r3, #0]
 800ce1c:	687a      	ldr	r2, [r7, #4]
 800ce1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce20:	1ad3      	subs	r3, r2, r3
 800ce22:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	f47f aeb6 	bne.w	800cb98 <f_write+0x8e>
 800ce2c:	e000      	b.n	800ce30 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ce2e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	7d1b      	ldrb	r3, [r3, #20]
 800ce34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce38:	b2da      	uxtb	r2, r3
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	2100      	movs	r1, #0
 800ce42:	4618      	mov	r0, r3
 800ce44:	f7fd fe7a 	bl	800ab3c <unlock_fs>
 800ce48:	2300      	movs	r3, #0
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	3730      	adds	r7, #48	; 0x30
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}

0800ce52 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ce52:	b580      	push	{r7, lr}
 800ce54:	b086      	sub	sp, #24
 800ce56:	af00      	add	r7, sp, #0
 800ce58:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f107 0208 	add.w	r2, r7, #8
 800ce60:	4611      	mov	r1, r2
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7ff fa72 	bl	800c34c <validate>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ce6c:	7dfb      	ldrb	r3, [r7, #23]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d16d      	bne.n	800cf4e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	7d1b      	ldrb	r3, [r3, #20]
 800ce76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d067      	beq.n	800cf4e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	7d1b      	ldrb	r3, [r3, #20]
 800ce82:	b25b      	sxtb	r3, r3
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	da1a      	bge.n	800cebe <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	7858      	ldrb	r0, [r3, #1]
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6a1a      	ldr	r2, [r3, #32]
 800ce96:	2301      	movs	r3, #1
 800ce98:	f7fd fcfc 	bl	800a894 <disk_write>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d006      	beq.n	800ceb0 <f_sync+0x5e>
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	2101      	movs	r1, #1
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7fd fe48 	bl	800ab3c <unlock_fs>
 800ceac:	2301      	movs	r3, #1
 800ceae:	e055      	b.n	800cf5c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	7d1b      	ldrb	r3, [r3, #20]
 800ceb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ceb8:	b2da      	uxtb	r2, r3
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800cebe:	f7fc ff41 	bl	8009d44 <get_fattime>
 800cec2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800cec4:	68ba      	ldr	r2, [r7, #8]
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceca:	4619      	mov	r1, r3
 800cecc:	4610      	mov	r0, r2
 800cece:	f7fe f801 	bl	800aed4 <move_window>
 800ced2:	4603      	mov	r3, r0
 800ced4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ced6:	7dfb      	ldrb	r3, [r7, #23]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d138      	bne.n	800cf4e <f_sync+0xfc>
					dir = fp->dir_ptr;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cee0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	330b      	adds	r3, #11
 800cee6:	781a      	ldrb	r2, [r3, #0]
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	330b      	adds	r3, #11
 800ceec:	f042 0220 	orr.w	r2, r2, #32
 800cef0:	b2d2      	uxtb	r2, r2
 800cef2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6818      	ldr	r0, [r3, #0]
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	689b      	ldr	r3, [r3, #8]
 800cefc:	461a      	mov	r2, r3
 800cefe:	68f9      	ldr	r1, [r7, #12]
 800cf00:	f7fe fd0e 	bl	800b920 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	f103 021c 	add.w	r2, r3, #28
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	68db      	ldr	r3, [r3, #12]
 800cf0e:	4619      	mov	r1, r3
 800cf10:	4610      	mov	r0, r2
 800cf12:	f7fd fd53 	bl	800a9bc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	3316      	adds	r3, #22
 800cf1a:	6939      	ldr	r1, [r7, #16]
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f7fd fd4d 	bl	800a9bc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	3312      	adds	r3, #18
 800cf26:	2100      	movs	r1, #0
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f7fd fd2c 	bl	800a986 <st_word>
					fs->wflag = 1;
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	2201      	movs	r2, #1
 800cf32:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	4618      	mov	r0, r3
 800cf38:	f7fd fffa 	bl	800af30 <sync_fs>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	7d1b      	ldrb	r3, [r3, #20]
 800cf44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf48:	b2da      	uxtb	r2, r3
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	7dfa      	ldrb	r2, [r7, #23]
 800cf52:	4611      	mov	r1, r2
 800cf54:	4618      	mov	r0, r3
 800cf56:	f7fd fdf1 	bl	800ab3c <unlock_fs>
 800cf5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3718      	adds	r7, #24
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}

0800cf64 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b084      	sub	sp, #16
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f7ff ff70 	bl	800ce52 <f_sync>
 800cf72:	4603      	mov	r3, r0
 800cf74:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cf76:	7bfb      	ldrb	r3, [r7, #15]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d11d      	bne.n	800cfb8 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f107 0208 	add.w	r2, r7, #8
 800cf82:	4611      	mov	r1, r2
 800cf84:	4618      	mov	r0, r3
 800cf86:	f7ff f9e1 	bl	800c34c <validate>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cf8e:	7bfb      	ldrb	r3, [r7, #15]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d111      	bne.n	800cfb8 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	691b      	ldr	r3, [r3, #16]
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f7fd fef7 	bl	800ad8c <dec_lock>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cfa2:	7bfb      	ldrb	r3, [r7, #15]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d102      	bne.n	800cfae <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	2100      	movs	r1, #0
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7fd fdc2 	bl	800ab3c <unlock_fs>
#endif
		}
	}
	return res;
 800cfb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3710      	adds	r7, #16
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}

0800cfc2 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800cfc2:	b580      	push	{r7, lr}
 800cfc4:	b09e      	sub	sp, #120	; 0x78
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800cfce:	f107 010c 	add.w	r1, r7, #12
 800cfd2:	1d3b      	adds	r3, r7, #4
 800cfd4:	2202      	movs	r2, #2
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f7fe ff64 	bl	800bea4 <find_volume>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 800cfe6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	f040 808e 	bne.w	800d10c <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800cff0:	687a      	ldr	r2, [r7, #4]
 800cff2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cff6:	4611      	mov	r1, r2
 800cff8:	4618      	mov	r0, r3
 800cffa:	f7fe fe47 	bl	800bc8c <follow_path>
 800cffe:	4603      	mov	r3, r0
 800d000:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800d004:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d108      	bne.n	800d01e <f_unlink+0x5c>
 800d00c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d010:	2102      	movs	r1, #2
 800d012:	4618      	mov	r0, r3
 800d014:	f7fd fdae 	bl	800ab74 <chk_lock>
 800d018:	4603      	mov	r3, r0
 800d01a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800d01e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d022:	2b00      	cmp	r3, #0
 800d024:	d172      	bne.n	800d10c <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800d026:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d02a:	b25b      	sxtb	r3, r3
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	da03      	bge.n	800d038 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800d030:	2306      	movs	r3, #6
 800d032:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800d036:	e008      	b.n	800d04a <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800d038:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d03c:	f003 0301 	and.w	r3, r3, #1
 800d040:	2b00      	cmp	r3, #0
 800d042:	d002      	beq.n	800d04a <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800d044:	2307      	movs	r3, #7
 800d046:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 800d04a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d134      	bne.n	800d0bc <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d056:	4611      	mov	r1, r2
 800d058:	4618      	mov	r0, r3
 800d05a:	f7fe fc42 	bl	800b8e2 <ld_clust>
 800d05e:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800d060:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d064:	f003 0310 	and.w	r3, r3, #16
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d027      	beq.n	800d0bc <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800d070:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d072:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800d074:	f107 0310 	add.w	r3, r7, #16
 800d078:	2100      	movs	r1, #0
 800d07a:	4618      	mov	r0, r3
 800d07c:	f7fe faaa 	bl	800b5d4 <dir_sdi>
 800d080:	4603      	mov	r3, r0
 800d082:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 800d086:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d116      	bne.n	800d0bc <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800d08e:	f107 0310 	add.w	r3, r7, #16
 800d092:	2100      	movs	r1, #0
 800d094:	4618      	mov	r0, r3
 800d096:	f7fe fc63 	bl	800b960 <dir_read>
 800d09a:	4603      	mov	r3, r0
 800d09c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800d0a0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d102      	bne.n	800d0ae <f_unlink+0xec>
 800d0a8:	2307      	movs	r3, #7
 800d0aa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800d0ae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d0b2:	2b04      	cmp	r3, #4
 800d0b4:	d102      	bne.n	800d0bc <f_unlink+0xfa>
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800d0bc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d123      	bne.n	800d10c <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800d0c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f7fe fd2d 	bl	800bb28 <dir_remove>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800d0d4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d10c      	bne.n	800d0f6 <f_unlink+0x134>
 800d0dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d009      	beq.n	800d0f6 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800d0e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f7fe f941 	bl	800b372 <remove_chain>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800d0f6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d106      	bne.n	800d10c <f_unlink+0x14a>
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	4618      	mov	r0, r3
 800d102:	f7fd ff15 	bl	800af30 <sync_fs>
 800d106:	4603      	mov	r3, r0
 800d108:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800d112:	4611      	mov	r1, r2
 800d114:	4618      	mov	r0, r3
 800d116:	f7fd fd11 	bl	800ab3c <unlock_fs>
 800d11a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3778      	adds	r7, #120	; 0x78
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}

0800d126 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800d126:	b580      	push	{r7, lr}
 800d128:	b088      	sub	sp, #32
 800d12a:	af00      	add	r7, sp, #0
 800d12c:	60f8      	str	r0, [r7, #12]
 800d12e:	60b9      	str	r1, [r7, #8]
 800d130:	607a      	str	r2, [r7, #4]
	int n = 0;
 800d132:	2300      	movs	r3, #0
 800d134:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800d13a:	e01b      	b.n	800d174 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800d13c:	f107 0310 	add.w	r3, r7, #16
 800d140:	f107 0114 	add.w	r1, r7, #20
 800d144:	2201      	movs	r2, #1
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f7ff fb71 	bl	800c82e <f_read>
		if (rc != 1) break;
 800d14c:	693b      	ldr	r3, [r7, #16]
 800d14e:	2b01      	cmp	r3, #1
 800d150:	d116      	bne.n	800d180 <f_gets+0x5a>
		c = s[0];
 800d152:	7d3b      	ldrb	r3, [r7, #20]
 800d154:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800d156:	7dfb      	ldrb	r3, [r7, #23]
 800d158:	2b0d      	cmp	r3, #13
 800d15a:	d100      	bne.n	800d15e <f_gets+0x38>
 800d15c:	e00a      	b.n	800d174 <f_gets+0x4e>
		*p++ = c;
 800d15e:	69bb      	ldr	r3, [r7, #24]
 800d160:	1c5a      	adds	r2, r3, #1
 800d162:	61ba      	str	r2, [r7, #24]
 800d164:	7dfa      	ldrb	r2, [r7, #23]
 800d166:	701a      	strb	r2, [r3, #0]
		n++;
 800d168:	69fb      	ldr	r3, [r7, #28]
 800d16a:	3301      	adds	r3, #1
 800d16c:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800d16e:	7dfb      	ldrb	r3, [r7, #23]
 800d170:	2b0a      	cmp	r3, #10
 800d172:	d007      	beq.n	800d184 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	3b01      	subs	r3, #1
 800d178:	69fa      	ldr	r2, [r7, #28]
 800d17a:	429a      	cmp	r2, r3
 800d17c:	dbde      	blt.n	800d13c <f_gets+0x16>
 800d17e:	e002      	b.n	800d186 <f_gets+0x60>
		if (rc != 1) break;
 800d180:	bf00      	nop
 800d182:	e000      	b.n	800d186 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800d184:	bf00      	nop
	}
	*p = 0;
 800d186:	69bb      	ldr	r3, [r7, #24]
 800d188:	2200      	movs	r2, #0
 800d18a:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800d18c:	69fb      	ldr	r3, [r7, #28]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d001      	beq.n	800d196 <f_gets+0x70>
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	e000      	b.n	800d198 <f_gets+0x72>
 800d196:	2300      	movs	r3, #0
}
 800d198:	4618      	mov	r0, r3
 800d19a:	3720      	adds	r7, #32
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}

0800d1a0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	b087      	sub	sp, #28
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	60f8      	str	r0, [r7, #12]
 800d1a8:	60b9      	str	r1, [r7, #8]
 800d1aa:	4613      	mov	r3, r2
 800d1ac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d1b6:	4b1f      	ldr	r3, [pc, #124]	; (800d234 <FATFS_LinkDriverEx+0x94>)
 800d1b8:	7a5b      	ldrb	r3, [r3, #9]
 800d1ba:	b2db      	uxtb	r3, r3
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d131      	bne.n	800d224 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d1c0:	4b1c      	ldr	r3, [pc, #112]	; (800d234 <FATFS_LinkDriverEx+0x94>)
 800d1c2:	7a5b      	ldrb	r3, [r3, #9]
 800d1c4:	b2db      	uxtb	r3, r3
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	4b1a      	ldr	r3, [pc, #104]	; (800d234 <FATFS_LinkDriverEx+0x94>)
 800d1ca:	2100      	movs	r1, #0
 800d1cc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d1ce:	4b19      	ldr	r3, [pc, #100]	; (800d234 <FATFS_LinkDriverEx+0x94>)
 800d1d0:	7a5b      	ldrb	r3, [r3, #9]
 800d1d2:	b2db      	uxtb	r3, r3
 800d1d4:	4a17      	ldr	r2, [pc, #92]	; (800d234 <FATFS_LinkDriverEx+0x94>)
 800d1d6:	009b      	lsls	r3, r3, #2
 800d1d8:	4413      	add	r3, r2
 800d1da:	68fa      	ldr	r2, [r7, #12]
 800d1dc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d1de:	4b15      	ldr	r3, [pc, #84]	; (800d234 <FATFS_LinkDriverEx+0x94>)
 800d1e0:	7a5b      	ldrb	r3, [r3, #9]
 800d1e2:	b2db      	uxtb	r3, r3
 800d1e4:	461a      	mov	r2, r3
 800d1e6:	4b13      	ldr	r3, [pc, #76]	; (800d234 <FATFS_LinkDriverEx+0x94>)
 800d1e8:	4413      	add	r3, r2
 800d1ea:	79fa      	ldrb	r2, [r7, #7]
 800d1ec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d1ee:	4b11      	ldr	r3, [pc, #68]	; (800d234 <FATFS_LinkDriverEx+0x94>)
 800d1f0:	7a5b      	ldrb	r3, [r3, #9]
 800d1f2:	b2db      	uxtb	r3, r3
 800d1f4:	1c5a      	adds	r2, r3, #1
 800d1f6:	b2d1      	uxtb	r1, r2
 800d1f8:	4a0e      	ldr	r2, [pc, #56]	; (800d234 <FATFS_LinkDriverEx+0x94>)
 800d1fa:	7251      	strb	r1, [r2, #9]
 800d1fc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d1fe:	7dbb      	ldrb	r3, [r7, #22]
 800d200:	3330      	adds	r3, #48	; 0x30
 800d202:	b2da      	uxtb	r2, r3
 800d204:	68bb      	ldr	r3, [r7, #8]
 800d206:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	3301      	adds	r3, #1
 800d20c:	223a      	movs	r2, #58	; 0x3a
 800d20e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	3302      	adds	r3, #2
 800d214:	222f      	movs	r2, #47	; 0x2f
 800d216:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	3303      	adds	r3, #3
 800d21c:	2200      	movs	r2, #0
 800d21e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d220:	2300      	movs	r3, #0
 800d222:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d224:	7dfb      	ldrb	r3, [r7, #23]
}
 800d226:	4618      	mov	r0, r3
 800d228:	371c      	adds	r7, #28
 800d22a:	46bd      	mov	sp, r7
 800d22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d230:	4770      	bx	lr
 800d232:	bf00      	nop
 800d234:	2000162c 	.word	0x2000162c

0800d238 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b082      	sub	sp, #8
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d242:	2200      	movs	r2, #0
 800d244:	6839      	ldr	r1, [r7, #0]
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f7ff ffaa 	bl	800d1a0 <FATFS_LinkDriverEx>
 800d24c:	4603      	mov	r3, r0
}
 800d24e:	4618      	mov	r0, r3
 800d250:	3708      	adds	r7, #8
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}

0800d256 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800d256:	b580      	push	{r7, lr}
 800d258:	b084      	sub	sp, #16
 800d25a:	af00      	add	r7, sp, #0
 800d25c:	4603      	mov	r3, r0
 800d25e:	6039      	str	r1, [r7, #0]
 800d260:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800d262:	2200      	movs	r2, #0
 800d264:	2101      	movs	r1, #1
 800d266:	2001      	movs	r0, #1
 800d268:	f000 f9c4 	bl	800d5f4 <osSemaphoreNew>
 800d26c:	4602      	mov	r2, r0
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	2b00      	cmp	r3, #0
 800d278:	bf14      	ite	ne
 800d27a:	2301      	movne	r3, #1
 800d27c:	2300      	moveq	r3, #0
 800d27e:	b2db      	uxtb	r3, r3
 800d280:	60fb      	str	r3, [r7, #12]

    return ret;
 800d282:	68fb      	ldr	r3, [r7, #12]
}
 800d284:	4618      	mov	r0, r3
 800d286:	3710      	adds	r7, #16
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}

0800d28c <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b082      	sub	sp, #8
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f000 facd 	bl	800d834 <osSemaphoreDelete>
#endif
    return 1;
 800d29a:	2301      	movs	r3, #1
}
 800d29c:	4618      	mov	r0, r3
 800d29e:	3708      	adds	r7, #8
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}

0800d2a4 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b084      	sub	sp, #16
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800d2b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f000 fa27 	bl	800d708 <osSemaphoreAcquire>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d101      	bne.n	800d2c4 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
}
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	3710      	adds	r7, #16
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}

0800d2ce <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800d2ce:	b580      	push	{r7, lr}
 800d2d0:	b082      	sub	sp, #8
 800d2d2:	af00      	add	r7, sp, #0
 800d2d4:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	f000 fa68 	bl	800d7ac <osSemaphoreRelease>
#endif
}
 800d2dc:	bf00      	nop
 800d2de:	3708      	adds	r7, #8
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}

0800d2e4 <__NVIC_SetPriority>:
{
 800d2e4:	b480      	push	{r7}
 800d2e6:	b083      	sub	sp, #12
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	6039      	str	r1, [r7, #0]
 800d2ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d2f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	db0a      	blt.n	800d30e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	b2da      	uxtb	r2, r3
 800d2fc:	490c      	ldr	r1, [pc, #48]	; (800d330 <__NVIC_SetPriority+0x4c>)
 800d2fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d302:	0112      	lsls	r2, r2, #4
 800d304:	b2d2      	uxtb	r2, r2
 800d306:	440b      	add	r3, r1
 800d308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d30c:	e00a      	b.n	800d324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	b2da      	uxtb	r2, r3
 800d312:	4908      	ldr	r1, [pc, #32]	; (800d334 <__NVIC_SetPriority+0x50>)
 800d314:	79fb      	ldrb	r3, [r7, #7]
 800d316:	f003 030f 	and.w	r3, r3, #15
 800d31a:	3b04      	subs	r3, #4
 800d31c:	0112      	lsls	r2, r2, #4
 800d31e:	b2d2      	uxtb	r2, r2
 800d320:	440b      	add	r3, r1
 800d322:	761a      	strb	r2, [r3, #24]
}
 800d324:	bf00      	nop
 800d326:	370c      	adds	r7, #12
 800d328:	46bd      	mov	sp, r7
 800d32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32e:	4770      	bx	lr
 800d330:	e000e100 	.word	0xe000e100
 800d334:	e000ed00 	.word	0xe000ed00

0800d338 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d338:	b580      	push	{r7, lr}
 800d33a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d33c:	4b05      	ldr	r3, [pc, #20]	; (800d354 <SysTick_Handler+0x1c>)
 800d33e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d340:	f002 fa2e 	bl	800f7a0 <xTaskGetSchedulerState>
 800d344:	4603      	mov	r3, r0
 800d346:	2b01      	cmp	r3, #1
 800d348:	d001      	beq.n	800d34e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d34a:	f003 f915 	bl	8010578 <xPortSysTickHandler>
  }
}
 800d34e:	bf00      	nop
 800d350:	bd80      	pop	{r7, pc}
 800d352:	bf00      	nop
 800d354:	e000e010 	.word	0xe000e010

0800d358 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d358:	b580      	push	{r7, lr}
 800d35a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d35c:	2100      	movs	r1, #0
 800d35e:	f06f 0004 	mvn.w	r0, #4
 800d362:	f7ff ffbf 	bl	800d2e4 <__NVIC_SetPriority>
#endif
}
 800d366:	bf00      	nop
 800d368:	bd80      	pop	{r7, pc}
	...

0800d36c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d36c:	b480      	push	{r7}
 800d36e:	b083      	sub	sp, #12
 800d370:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d372:	f3ef 8305 	mrs	r3, IPSR
 800d376:	603b      	str	r3, [r7, #0]
  return(result);
 800d378:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d003      	beq.n	800d386 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d37e:	f06f 0305 	mvn.w	r3, #5
 800d382:	607b      	str	r3, [r7, #4]
 800d384:	e00c      	b.n	800d3a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d386:	4b0a      	ldr	r3, [pc, #40]	; (800d3b0 <osKernelInitialize+0x44>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d105      	bne.n	800d39a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d38e:	4b08      	ldr	r3, [pc, #32]	; (800d3b0 <osKernelInitialize+0x44>)
 800d390:	2201      	movs	r2, #1
 800d392:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d394:	2300      	movs	r3, #0
 800d396:	607b      	str	r3, [r7, #4]
 800d398:	e002      	b.n	800d3a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d39a:	f04f 33ff 	mov.w	r3, #4294967295
 800d39e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d3a0:	687b      	ldr	r3, [r7, #4]
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	370c      	adds	r7, #12
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ac:	4770      	bx	lr
 800d3ae:	bf00      	nop
 800d3b0:	20001638 	.word	0x20001638

0800d3b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b082      	sub	sp, #8
 800d3b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d3ba:	f3ef 8305 	mrs	r3, IPSR
 800d3be:	603b      	str	r3, [r7, #0]
  return(result);
 800d3c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d003      	beq.n	800d3ce <osKernelStart+0x1a>
    stat = osErrorISR;
 800d3c6:	f06f 0305 	mvn.w	r3, #5
 800d3ca:	607b      	str	r3, [r7, #4]
 800d3cc:	e010      	b.n	800d3f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d3ce:	4b0b      	ldr	r3, [pc, #44]	; (800d3fc <osKernelStart+0x48>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	2b01      	cmp	r3, #1
 800d3d4:	d109      	bne.n	800d3ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d3d6:	f7ff ffbf 	bl	800d358 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d3da:	4b08      	ldr	r3, [pc, #32]	; (800d3fc <osKernelStart+0x48>)
 800d3dc:	2202      	movs	r2, #2
 800d3de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d3e0:	f001 fd96 	bl	800ef10 <vTaskStartScheduler>
      stat = osOK;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	607b      	str	r3, [r7, #4]
 800d3e8:	e002      	b.n	800d3f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d3ea:	f04f 33ff 	mov.w	r3, #4294967295
 800d3ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d3f0:	687b      	ldr	r3, [r7, #4]
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3708      	adds	r7, #8
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}
 800d3fa:	bf00      	nop
 800d3fc:	20001638 	.word	0x20001638

0800d400 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d400:	b580      	push	{r7, lr}
 800d402:	b08e      	sub	sp, #56	; 0x38
 800d404:	af04      	add	r7, sp, #16
 800d406:	60f8      	str	r0, [r7, #12]
 800d408:	60b9      	str	r1, [r7, #8]
 800d40a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d40c:	2300      	movs	r3, #0
 800d40e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d410:	f3ef 8305 	mrs	r3, IPSR
 800d414:	617b      	str	r3, [r7, #20]
  return(result);
 800d416:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d17e      	bne.n	800d51a <osThreadNew+0x11a>
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d07b      	beq.n	800d51a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d422:	2380      	movs	r3, #128	; 0x80
 800d424:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d426:	2318      	movs	r3, #24
 800d428:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d42a:	2300      	movs	r3, #0
 800d42c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d42e:	f04f 33ff 	mov.w	r3, #4294967295
 800d432:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d045      	beq.n	800d4c6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d002      	beq.n	800d448 <osThreadNew+0x48>
        name = attr->name;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	699b      	ldr	r3, [r3, #24]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d002      	beq.n	800d456 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	699b      	ldr	r3, [r3, #24]
 800d454:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d456:	69fb      	ldr	r3, [r7, #28]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d008      	beq.n	800d46e <osThreadNew+0x6e>
 800d45c:	69fb      	ldr	r3, [r7, #28]
 800d45e:	2b38      	cmp	r3, #56	; 0x38
 800d460:	d805      	bhi.n	800d46e <osThreadNew+0x6e>
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	685b      	ldr	r3, [r3, #4]
 800d466:	f003 0301 	and.w	r3, r3, #1
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d001      	beq.n	800d472 <osThreadNew+0x72>
        return (NULL);
 800d46e:	2300      	movs	r3, #0
 800d470:	e054      	b.n	800d51c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	695b      	ldr	r3, [r3, #20]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d003      	beq.n	800d482 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	695b      	ldr	r3, [r3, #20]
 800d47e:	089b      	lsrs	r3, r3, #2
 800d480:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	689b      	ldr	r3, [r3, #8]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d00e      	beq.n	800d4a8 <osThreadNew+0xa8>
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	68db      	ldr	r3, [r3, #12]
 800d48e:	2b5b      	cmp	r3, #91	; 0x5b
 800d490:	d90a      	bls.n	800d4a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d496:	2b00      	cmp	r3, #0
 800d498:	d006      	beq.n	800d4a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	695b      	ldr	r3, [r3, #20]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d002      	beq.n	800d4a8 <osThreadNew+0xa8>
        mem = 1;
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	61bb      	str	r3, [r7, #24]
 800d4a6:	e010      	b.n	800d4ca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	689b      	ldr	r3, [r3, #8]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d10c      	bne.n	800d4ca <osThreadNew+0xca>
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	68db      	ldr	r3, [r3, #12]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d108      	bne.n	800d4ca <osThreadNew+0xca>
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	691b      	ldr	r3, [r3, #16]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d104      	bne.n	800d4ca <osThreadNew+0xca>
          mem = 0;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	61bb      	str	r3, [r7, #24]
 800d4c4:	e001      	b.n	800d4ca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d4ca:	69bb      	ldr	r3, [r7, #24]
 800d4cc:	2b01      	cmp	r3, #1
 800d4ce:	d110      	bne.n	800d4f2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d4d4:	687a      	ldr	r2, [r7, #4]
 800d4d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d4d8:	9202      	str	r2, [sp, #8]
 800d4da:	9301      	str	r3, [sp, #4]
 800d4dc:	69fb      	ldr	r3, [r7, #28]
 800d4de:	9300      	str	r3, [sp, #0]
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	6a3a      	ldr	r2, [r7, #32]
 800d4e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d4e6:	68f8      	ldr	r0, [r7, #12]
 800d4e8:	f001 fabe 	bl	800ea68 <xTaskCreateStatic>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	613b      	str	r3, [r7, #16]
 800d4f0:	e013      	b.n	800d51a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d4f2:	69bb      	ldr	r3, [r7, #24]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d110      	bne.n	800d51a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d4f8:	6a3b      	ldr	r3, [r7, #32]
 800d4fa:	b29a      	uxth	r2, r3
 800d4fc:	f107 0310 	add.w	r3, r7, #16
 800d500:	9301      	str	r3, [sp, #4]
 800d502:	69fb      	ldr	r3, [r7, #28]
 800d504:	9300      	str	r3, [sp, #0]
 800d506:	68bb      	ldr	r3, [r7, #8]
 800d508:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d50a:	68f8      	ldr	r0, [r7, #12]
 800d50c:	f001 fb09 	bl	800eb22 <xTaskCreate>
 800d510:	4603      	mov	r3, r0
 800d512:	2b01      	cmp	r3, #1
 800d514:	d001      	beq.n	800d51a <osThreadNew+0x11a>
            hTask = NULL;
 800d516:	2300      	movs	r3, #0
 800d518:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d51a:	693b      	ldr	r3, [r7, #16]
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	3728      	adds	r7, #40	; 0x28
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}

0800d524 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 800d524:	b480      	push	{r7}
 800d526:	b083      	sub	sp, #12
 800d528:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d52a:	f3ef 8305 	mrs	r3, IPSR
 800d52e:	603b      	str	r3, [r7, #0]
  return(result);
 800d530:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d532:	2b00      	cmp	r3, #0
 800d534:	d003      	beq.n	800d53e <osThreadYield+0x1a>
    stat = osErrorISR;
 800d536:	f06f 0305 	mvn.w	r3, #5
 800d53a:	607b      	str	r3, [r7, #4]
 800d53c:	e009      	b.n	800d552 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 800d53e:	2300      	movs	r3, #0
 800d540:	607b      	str	r3, [r7, #4]
    taskYIELD();
 800d542:	4b07      	ldr	r3, [pc, #28]	; (800d560 <osThreadYield+0x3c>)
 800d544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d548:	601a      	str	r2, [r3, #0]
 800d54a:	f3bf 8f4f 	dsb	sy
 800d54e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800d552:	687b      	ldr	r3, [r7, #4]
}
 800d554:	4618      	mov	r0, r3
 800d556:	370c      	adds	r7, #12
 800d558:	46bd      	mov	sp, r7
 800d55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55e:	4770      	bx	lr
 800d560:	e000ed04 	.word	0xe000ed04

0800d564 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d564:	b580      	push	{r7, lr}
 800d566:	b084      	sub	sp, #16
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d56c:	f3ef 8305 	mrs	r3, IPSR
 800d570:	60bb      	str	r3, [r7, #8]
  return(result);
 800d572:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d574:	2b00      	cmp	r3, #0
 800d576:	d003      	beq.n	800d580 <osDelay+0x1c>
    stat = osErrorISR;
 800d578:	f06f 0305 	mvn.w	r3, #5
 800d57c:	60fb      	str	r3, [r7, #12]
 800d57e:	e007      	b.n	800d590 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d580:	2300      	movs	r3, #0
 800d582:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d002      	beq.n	800d590 <osDelay+0x2c>
      vTaskDelay(ticks);
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f001 fc8c 	bl	800eea8 <vTaskDelay>
    }
  }

  return (stat);
 800d590:	68fb      	ldr	r3, [r7, #12]
}
 800d592:	4618      	mov	r0, r3
 800d594:	3710      	adds	r7, #16
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}

0800d59a <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800d59a:	b580      	push	{r7, lr}
 800d59c:	b086      	sub	sp, #24
 800d59e:	af00      	add	r7, sp, #0
 800d5a0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d5a2:	f3ef 8305 	mrs	r3, IPSR
 800d5a6:	60fb      	str	r3, [r7, #12]
  return(result);
 800d5a8:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d003      	beq.n	800d5b6 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800d5ae:	f06f 0305 	mvn.w	r3, #5
 800d5b2:	617b      	str	r3, [r7, #20]
 800d5b4:	e019      	b.n	800d5ea <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800d5ba:	f001 fdbb 	bl	800f134 <xTaskGetTickCount>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	687a      	ldr	r2, [r7, #4]
 800d5c6:	1ad3      	subs	r3, r2, r3
 800d5c8:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800d5ca:	693b      	ldr	r3, [r7, #16]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d009      	beq.n	800d5e4 <osDelayUntil+0x4a>
 800d5d0:	693b      	ldr	r3, [r7, #16]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	db06      	blt.n	800d5e4 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800d5d6:	f107 0308 	add.w	r3, r7, #8
 800d5da:	6939      	ldr	r1, [r7, #16]
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f001 fbe5 	bl	800edac <vTaskDelayUntil>
 800d5e2:	e002      	b.n	800d5ea <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800d5e4:	f06f 0303 	mvn.w	r3, #3
 800d5e8:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800d5ea:	697b      	ldr	r3, [r7, #20]
}
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	3718      	adds	r7, #24
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}

0800d5f4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b08a      	sub	sp, #40	; 0x28
 800d5f8:	af02      	add	r7, sp, #8
 800d5fa:	60f8      	str	r0, [r7, #12]
 800d5fc:	60b9      	str	r1, [r7, #8]
 800d5fe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800d600:	2300      	movs	r3, #0
 800d602:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d604:	f3ef 8305 	mrs	r3, IPSR
 800d608:	613b      	str	r3, [r7, #16]
  return(result);
 800d60a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d175      	bne.n	800d6fc <osSemaphoreNew+0x108>
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d072      	beq.n	800d6fc <osSemaphoreNew+0x108>
 800d616:	68ba      	ldr	r2, [r7, #8]
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	429a      	cmp	r2, r3
 800d61c:	d86e      	bhi.n	800d6fc <osSemaphoreNew+0x108>
    mem = -1;
 800d61e:	f04f 33ff 	mov.w	r3, #4294967295
 800d622:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d015      	beq.n	800d656 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	689b      	ldr	r3, [r3, #8]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d006      	beq.n	800d640 <osSemaphoreNew+0x4c>
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	68db      	ldr	r3, [r3, #12]
 800d636:	2b4f      	cmp	r3, #79	; 0x4f
 800d638:	d902      	bls.n	800d640 <osSemaphoreNew+0x4c>
        mem = 1;
 800d63a:	2301      	movs	r3, #1
 800d63c:	61bb      	str	r3, [r7, #24]
 800d63e:	e00c      	b.n	800d65a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	689b      	ldr	r3, [r3, #8]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d108      	bne.n	800d65a <osSemaphoreNew+0x66>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	68db      	ldr	r3, [r3, #12]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d104      	bne.n	800d65a <osSemaphoreNew+0x66>
          mem = 0;
 800d650:	2300      	movs	r3, #0
 800d652:	61bb      	str	r3, [r7, #24]
 800d654:	e001      	b.n	800d65a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800d656:	2300      	movs	r3, #0
 800d658:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800d65a:	69bb      	ldr	r3, [r7, #24]
 800d65c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d660:	d04c      	beq.n	800d6fc <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	2b01      	cmp	r3, #1
 800d666:	d128      	bne.n	800d6ba <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800d668:	69bb      	ldr	r3, [r7, #24]
 800d66a:	2b01      	cmp	r3, #1
 800d66c:	d10a      	bne.n	800d684 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	689b      	ldr	r3, [r3, #8]
 800d672:	2203      	movs	r2, #3
 800d674:	9200      	str	r2, [sp, #0]
 800d676:	2200      	movs	r2, #0
 800d678:	2100      	movs	r1, #0
 800d67a:	2001      	movs	r0, #1
 800d67c:	f000 fa4e 	bl	800db1c <xQueueGenericCreateStatic>
 800d680:	61f8      	str	r0, [r7, #28]
 800d682:	e005      	b.n	800d690 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800d684:	2203      	movs	r2, #3
 800d686:	2100      	movs	r1, #0
 800d688:	2001      	movs	r0, #1
 800d68a:	f000 fabf 	bl	800dc0c <xQueueGenericCreate>
 800d68e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800d690:	69fb      	ldr	r3, [r7, #28]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d022      	beq.n	800d6dc <osSemaphoreNew+0xe8>
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d01f      	beq.n	800d6dc <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d69c:	2300      	movs	r3, #0
 800d69e:	2200      	movs	r2, #0
 800d6a0:	2100      	movs	r1, #0
 800d6a2:	69f8      	ldr	r0, [r7, #28]
 800d6a4:	f000 fb7a 	bl	800dd9c <xQueueGenericSend>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	2b01      	cmp	r3, #1
 800d6ac:	d016      	beq.n	800d6dc <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800d6ae:	69f8      	ldr	r0, [r7, #28]
 800d6b0:	f001 f806 	bl	800e6c0 <vQueueDelete>
            hSemaphore = NULL;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	61fb      	str	r3, [r7, #28]
 800d6b8:	e010      	b.n	800d6dc <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800d6ba:	69bb      	ldr	r3, [r7, #24]
 800d6bc:	2b01      	cmp	r3, #1
 800d6be:	d108      	bne.n	800d6d2 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	689b      	ldr	r3, [r3, #8]
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	68b9      	ldr	r1, [r7, #8]
 800d6c8:	68f8      	ldr	r0, [r7, #12]
 800d6ca:	f000 fafc 	bl	800dcc6 <xQueueCreateCountingSemaphoreStatic>
 800d6ce:	61f8      	str	r0, [r7, #28]
 800d6d0:	e004      	b.n	800d6dc <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800d6d2:	68b9      	ldr	r1, [r7, #8]
 800d6d4:	68f8      	ldr	r0, [r7, #12]
 800d6d6:	f000 fb2d 	bl	800dd34 <xQueueCreateCountingSemaphore>
 800d6da:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800d6dc:	69fb      	ldr	r3, [r7, #28]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d00c      	beq.n	800d6fc <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d003      	beq.n	800d6f0 <osSemaphoreNew+0xfc>
          name = attr->name;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	617b      	str	r3, [r7, #20]
 800d6ee:	e001      	b.n	800d6f4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800d6f4:	6979      	ldr	r1, [r7, #20]
 800d6f6:	69f8      	ldr	r0, [r7, #28]
 800d6f8:	f001 f92e 	bl	800e958 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800d6fc:	69fb      	ldr	r3, [r7, #28]
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3720      	adds	r7, #32
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}
	...

0800d708 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800d708:	b580      	push	{r7, lr}
 800d70a:	b086      	sub	sp, #24
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d716:	2300      	movs	r3, #0
 800d718:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800d71a:	693b      	ldr	r3, [r7, #16]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d103      	bne.n	800d728 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800d720:	f06f 0303 	mvn.w	r3, #3
 800d724:	617b      	str	r3, [r7, #20]
 800d726:	e039      	b.n	800d79c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d728:	f3ef 8305 	mrs	r3, IPSR
 800d72c:	60fb      	str	r3, [r7, #12]
  return(result);
 800d72e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800d730:	2b00      	cmp	r3, #0
 800d732:	d022      	beq.n	800d77a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d003      	beq.n	800d742 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800d73a:	f06f 0303 	mvn.w	r3, #3
 800d73e:	617b      	str	r3, [r7, #20]
 800d740:	e02c      	b.n	800d79c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800d742:	2300      	movs	r3, #0
 800d744:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d746:	f107 0308 	add.w	r3, r7, #8
 800d74a:	461a      	mov	r2, r3
 800d74c:	2100      	movs	r1, #0
 800d74e:	6938      	ldr	r0, [r7, #16]
 800d750:	f000 ff36 	bl	800e5c0 <xQueueReceiveFromISR>
 800d754:	4603      	mov	r3, r0
 800d756:	2b01      	cmp	r3, #1
 800d758:	d003      	beq.n	800d762 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800d75a:	f06f 0302 	mvn.w	r3, #2
 800d75e:	617b      	str	r3, [r7, #20]
 800d760:	e01c      	b.n	800d79c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d019      	beq.n	800d79c <osSemaphoreAcquire+0x94>
 800d768:	4b0f      	ldr	r3, [pc, #60]	; (800d7a8 <osSemaphoreAcquire+0xa0>)
 800d76a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d76e:	601a      	str	r2, [r3, #0]
 800d770:	f3bf 8f4f 	dsb	sy
 800d774:	f3bf 8f6f 	isb	sy
 800d778:	e010      	b.n	800d79c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800d77a:	6839      	ldr	r1, [r7, #0]
 800d77c:	6938      	ldr	r0, [r7, #16]
 800d77e:	f000 fe13 	bl	800e3a8 <xQueueSemaphoreTake>
 800d782:	4603      	mov	r3, r0
 800d784:	2b01      	cmp	r3, #1
 800d786:	d009      	beq.n	800d79c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d003      	beq.n	800d796 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800d78e:	f06f 0301 	mvn.w	r3, #1
 800d792:	617b      	str	r3, [r7, #20]
 800d794:	e002      	b.n	800d79c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800d796:	f06f 0302 	mvn.w	r3, #2
 800d79a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800d79c:	697b      	ldr	r3, [r7, #20]
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3718      	adds	r7, #24
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	e000ed04 	.word	0xe000ed04

0800d7ac <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b086      	sub	sp, #24
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d103      	bne.n	800d7ca <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800d7c2:	f06f 0303 	mvn.w	r3, #3
 800d7c6:	617b      	str	r3, [r7, #20]
 800d7c8:	e02c      	b.n	800d824 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7ca:	f3ef 8305 	mrs	r3, IPSR
 800d7ce:	60fb      	str	r3, [r7, #12]
  return(result);
 800d7d0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d01a      	beq.n	800d80c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d7da:	f107 0308 	add.w	r3, r7, #8
 800d7de:	4619      	mov	r1, r3
 800d7e0:	6938      	ldr	r0, [r7, #16]
 800d7e2:	f000 fc74 	bl	800e0ce <xQueueGiveFromISR>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	2b01      	cmp	r3, #1
 800d7ea:	d003      	beq.n	800d7f4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800d7ec:	f06f 0302 	mvn.w	r3, #2
 800d7f0:	617b      	str	r3, [r7, #20]
 800d7f2:	e017      	b.n	800d824 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d014      	beq.n	800d824 <osSemaphoreRelease+0x78>
 800d7fa:	4b0d      	ldr	r3, [pc, #52]	; (800d830 <osSemaphoreRelease+0x84>)
 800d7fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d800:	601a      	str	r2, [r3, #0]
 800d802:	f3bf 8f4f 	dsb	sy
 800d806:	f3bf 8f6f 	isb	sy
 800d80a:	e00b      	b.n	800d824 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d80c:	2300      	movs	r3, #0
 800d80e:	2200      	movs	r2, #0
 800d810:	2100      	movs	r1, #0
 800d812:	6938      	ldr	r0, [r7, #16]
 800d814:	f000 fac2 	bl	800dd9c <xQueueGenericSend>
 800d818:	4603      	mov	r3, r0
 800d81a:	2b01      	cmp	r3, #1
 800d81c:	d002      	beq.n	800d824 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800d81e:	f06f 0302 	mvn.w	r3, #2
 800d822:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800d824:	697b      	ldr	r3, [r7, #20]
}
 800d826:	4618      	mov	r0, r3
 800d828:	3718      	adds	r7, #24
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}
 800d82e:	bf00      	nop
 800d830:	e000ed04 	.word	0xe000ed04

0800d834 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800d834:	b580      	push	{r7, lr}
 800d836:	b086      	sub	sp, #24
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d840:	f3ef 8305 	mrs	r3, IPSR
 800d844:	60fb      	str	r3, [r7, #12]
  return(result);
 800d846:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d003      	beq.n	800d854 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800d84c:	f06f 0305 	mvn.w	r3, #5
 800d850:	617b      	str	r3, [r7, #20]
 800d852:	e00e      	b.n	800d872 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800d854:	693b      	ldr	r3, [r7, #16]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d103      	bne.n	800d862 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800d85a:	f06f 0303 	mvn.w	r3, #3
 800d85e:	617b      	str	r3, [r7, #20]
 800d860:	e007      	b.n	800d872 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800d862:	6938      	ldr	r0, [r7, #16]
 800d864:	f001 f8a2 	bl	800e9ac <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800d868:	2300      	movs	r3, #0
 800d86a:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800d86c:	6938      	ldr	r0, [r7, #16]
 800d86e:	f000 ff27 	bl	800e6c0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800d872:	697b      	ldr	r3, [r7, #20]
}
 800d874:	4618      	mov	r0, r3
 800d876:	3718      	adds	r7, #24
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}

0800d87c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d87c:	b480      	push	{r7}
 800d87e:	b085      	sub	sp, #20
 800d880:	af00      	add	r7, sp, #0
 800d882:	60f8      	str	r0, [r7, #12]
 800d884:	60b9      	str	r1, [r7, #8]
 800d886:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	4a07      	ldr	r2, [pc, #28]	; (800d8a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800d88c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	4a06      	ldr	r2, [pc, #24]	; (800d8ac <vApplicationGetIdleTaskMemory+0x30>)
 800d892:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2280      	movs	r2, #128	; 0x80
 800d898:	601a      	str	r2, [r3, #0]
}
 800d89a:	bf00      	nop
 800d89c:	3714      	adds	r7, #20
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a4:	4770      	bx	lr
 800d8a6:	bf00      	nop
 800d8a8:	2000163c 	.word	0x2000163c
 800d8ac:	20001698 	.word	0x20001698

0800d8b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d8b0:	b480      	push	{r7}
 800d8b2:	b085      	sub	sp, #20
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	60f8      	str	r0, [r7, #12]
 800d8b8:	60b9      	str	r1, [r7, #8]
 800d8ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	4a07      	ldr	r2, [pc, #28]	; (800d8dc <vApplicationGetTimerTaskMemory+0x2c>)
 800d8c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	4a06      	ldr	r2, [pc, #24]	; (800d8e0 <vApplicationGetTimerTaskMemory+0x30>)
 800d8c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d8ce:	601a      	str	r2, [r3, #0]
}
 800d8d0:	bf00      	nop
 800d8d2:	3714      	adds	r7, #20
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8da:	4770      	bx	lr
 800d8dc:	20001898 	.word	0x20001898
 800d8e0:	200018f4 	.word	0x200018f4

0800d8e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b083      	sub	sp, #12
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f103 0208 	add.w	r2, r3, #8
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f04f 32ff 	mov.w	r2, #4294967295
 800d8fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f103 0208 	add.w	r2, r3, #8
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f103 0208 	add.w	r2, r3, #8
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2200      	movs	r2, #0
 800d916:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d918:	bf00      	nop
 800d91a:	370c      	adds	r7, #12
 800d91c:	46bd      	mov	sp, r7
 800d91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d922:	4770      	bx	lr

0800d924 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d924:	b480      	push	{r7}
 800d926:	b083      	sub	sp, #12
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2200      	movs	r2, #0
 800d930:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d932:	bf00      	nop
 800d934:	370c      	adds	r7, #12
 800d936:	46bd      	mov	sp, r7
 800d938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93c:	4770      	bx	lr

0800d93e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d93e:	b480      	push	{r7}
 800d940:	b085      	sub	sp, #20
 800d942:	af00      	add	r7, sp, #0
 800d944:	6078      	str	r0, [r7, #4]
 800d946:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	685b      	ldr	r3, [r3, #4]
 800d94c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	68fa      	ldr	r2, [r7, #12]
 800d952:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	689a      	ldr	r2, [r3, #8]
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	689b      	ldr	r3, [r3, #8]
 800d960:	683a      	ldr	r2, [r7, #0]
 800d962:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	683a      	ldr	r2, [r7, #0]
 800d968:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	687a      	ldr	r2, [r7, #4]
 800d96e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	1c5a      	adds	r2, r3, #1
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	601a      	str	r2, [r3, #0]
}
 800d97a:	bf00      	nop
 800d97c:	3714      	adds	r7, #20
 800d97e:	46bd      	mov	sp, r7
 800d980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d984:	4770      	bx	lr

0800d986 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d986:	b480      	push	{r7}
 800d988:	b085      	sub	sp, #20
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	6078      	str	r0, [r7, #4]
 800d98e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d99c:	d103      	bne.n	800d9a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	691b      	ldr	r3, [r3, #16]
 800d9a2:	60fb      	str	r3, [r7, #12]
 800d9a4:	e00c      	b.n	800d9c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	3308      	adds	r3, #8
 800d9aa:	60fb      	str	r3, [r7, #12]
 800d9ac:	e002      	b.n	800d9b4 <vListInsert+0x2e>
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	685b      	ldr	r3, [r3, #4]
 800d9b2:	60fb      	str	r3, [r7, #12]
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	685b      	ldr	r3, [r3, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	68ba      	ldr	r2, [r7, #8]
 800d9bc:	429a      	cmp	r2, r3
 800d9be:	d2f6      	bcs.n	800d9ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	685a      	ldr	r2, [r3, #4]
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	685b      	ldr	r3, [r3, #4]
 800d9cc:	683a      	ldr	r2, [r7, #0]
 800d9ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	68fa      	ldr	r2, [r7, #12]
 800d9d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	683a      	ldr	r2, [r7, #0]
 800d9da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	687a      	ldr	r2, [r7, #4]
 800d9e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	1c5a      	adds	r2, r3, #1
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	601a      	str	r2, [r3, #0]
}
 800d9ec:	bf00      	nop
 800d9ee:	3714      	adds	r7, #20
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f6:	4770      	bx	lr

0800d9f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	b085      	sub	sp, #20
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	691b      	ldr	r3, [r3, #16]
 800da04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	685b      	ldr	r3, [r3, #4]
 800da0a:	687a      	ldr	r2, [r7, #4]
 800da0c:	6892      	ldr	r2, [r2, #8]
 800da0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	689b      	ldr	r3, [r3, #8]
 800da14:	687a      	ldr	r2, [r7, #4]
 800da16:	6852      	ldr	r2, [r2, #4]
 800da18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	685b      	ldr	r3, [r3, #4]
 800da1e:	687a      	ldr	r2, [r7, #4]
 800da20:	429a      	cmp	r2, r3
 800da22:	d103      	bne.n	800da2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	689a      	ldr	r2, [r3, #8]
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2200      	movs	r2, #0
 800da30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	1e5a      	subs	r2, r3, #1
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	681b      	ldr	r3, [r3, #0]
}
 800da40:	4618      	mov	r0, r3
 800da42:	3714      	adds	r7, #20
 800da44:	46bd      	mov	sp, r7
 800da46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4a:	4770      	bx	lr

0800da4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b084      	sub	sp, #16
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
 800da54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d10a      	bne.n	800da76 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800da60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da64:	f383 8811 	msr	BASEPRI, r3
 800da68:	f3bf 8f6f 	isb	sy
 800da6c:	f3bf 8f4f 	dsb	sy
 800da70:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800da72:	bf00      	nop
 800da74:	e7fe      	b.n	800da74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800da76:	f002 fced 	bl	8010454 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	681a      	ldr	r2, [r3, #0]
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da82:	68f9      	ldr	r1, [r7, #12]
 800da84:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800da86:	fb01 f303 	mul.w	r3, r1, r3
 800da8a:	441a      	add	r2, r3
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	2200      	movs	r2, #0
 800da94:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	681a      	ldr	r2, [r3, #0]
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	681a      	ldr	r2, [r3, #0]
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daa6:	3b01      	subs	r3, #1
 800daa8:	68f9      	ldr	r1, [r7, #12]
 800daaa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800daac:	fb01 f303 	mul.w	r3, r1, r3
 800dab0:	441a      	add	r2, r3
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	22ff      	movs	r2, #255	; 0xff
 800daba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	22ff      	movs	r2, #255	; 0xff
 800dac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d114      	bne.n	800daf6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	691b      	ldr	r3, [r3, #16]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d01a      	beq.n	800db0a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	3310      	adds	r3, #16
 800dad8:	4618      	mov	r0, r3
 800dada:	f001 fca3 	bl	800f424 <xTaskRemoveFromEventList>
 800dade:	4603      	mov	r3, r0
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d012      	beq.n	800db0a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800dae4:	4b0c      	ldr	r3, [pc, #48]	; (800db18 <xQueueGenericReset+0xcc>)
 800dae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800daea:	601a      	str	r2, [r3, #0]
 800daec:	f3bf 8f4f 	dsb	sy
 800daf0:	f3bf 8f6f 	isb	sy
 800daf4:	e009      	b.n	800db0a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	3310      	adds	r3, #16
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7ff fef2 	bl	800d8e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	3324      	adds	r3, #36	; 0x24
 800db04:	4618      	mov	r0, r3
 800db06:	f7ff feed 	bl	800d8e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800db0a:	f002 fcd3 	bl	80104b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800db0e:	2301      	movs	r3, #1
}
 800db10:	4618      	mov	r0, r3
 800db12:	3710      	adds	r7, #16
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}
 800db18:	e000ed04 	.word	0xe000ed04

0800db1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b08e      	sub	sp, #56	; 0x38
 800db20:	af02      	add	r7, sp, #8
 800db22:	60f8      	str	r0, [r7, #12]
 800db24:	60b9      	str	r1, [r7, #8]
 800db26:	607a      	str	r2, [r7, #4]
 800db28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d10a      	bne.n	800db46 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800db30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db34:	f383 8811 	msr	BASEPRI, r3
 800db38:	f3bf 8f6f 	isb	sy
 800db3c:	f3bf 8f4f 	dsb	sy
 800db40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800db42:	bf00      	nop
 800db44:	e7fe      	b.n	800db44 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d10a      	bne.n	800db62 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800db4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db50:	f383 8811 	msr	BASEPRI, r3
 800db54:	f3bf 8f6f 	isb	sy
 800db58:	f3bf 8f4f 	dsb	sy
 800db5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800db5e:	bf00      	nop
 800db60:	e7fe      	b.n	800db60 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d002      	beq.n	800db6e <xQueueGenericCreateStatic+0x52>
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d001      	beq.n	800db72 <xQueueGenericCreateStatic+0x56>
 800db6e:	2301      	movs	r3, #1
 800db70:	e000      	b.n	800db74 <xQueueGenericCreateStatic+0x58>
 800db72:	2300      	movs	r3, #0
 800db74:	2b00      	cmp	r3, #0
 800db76:	d10a      	bne.n	800db8e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800db78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db7c:	f383 8811 	msr	BASEPRI, r3
 800db80:	f3bf 8f6f 	isb	sy
 800db84:	f3bf 8f4f 	dsb	sy
 800db88:	623b      	str	r3, [r7, #32]
}
 800db8a:	bf00      	nop
 800db8c:	e7fe      	b.n	800db8c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d102      	bne.n	800db9a <xQueueGenericCreateStatic+0x7e>
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d101      	bne.n	800db9e <xQueueGenericCreateStatic+0x82>
 800db9a:	2301      	movs	r3, #1
 800db9c:	e000      	b.n	800dba0 <xQueueGenericCreateStatic+0x84>
 800db9e:	2300      	movs	r3, #0
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d10a      	bne.n	800dbba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800dba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dba8:	f383 8811 	msr	BASEPRI, r3
 800dbac:	f3bf 8f6f 	isb	sy
 800dbb0:	f3bf 8f4f 	dsb	sy
 800dbb4:	61fb      	str	r3, [r7, #28]
}
 800dbb6:	bf00      	nop
 800dbb8:	e7fe      	b.n	800dbb8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800dbba:	2350      	movs	r3, #80	; 0x50
 800dbbc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	2b50      	cmp	r3, #80	; 0x50
 800dbc2:	d00a      	beq.n	800dbda <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800dbc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbc8:	f383 8811 	msr	BASEPRI, r3
 800dbcc:	f3bf 8f6f 	isb	sy
 800dbd0:	f3bf 8f4f 	dsb	sy
 800dbd4:	61bb      	str	r3, [r7, #24]
}
 800dbd6:	bf00      	nop
 800dbd8:	e7fe      	b.n	800dbd8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800dbda:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800dbe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d00d      	beq.n	800dc02 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800dbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe8:	2201      	movs	r2, #1
 800dbea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dbee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800dbf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbf4:	9300      	str	r3, [sp, #0]
 800dbf6:	4613      	mov	r3, r2
 800dbf8:	687a      	ldr	r2, [r7, #4]
 800dbfa:	68b9      	ldr	r1, [r7, #8]
 800dbfc:	68f8      	ldr	r0, [r7, #12]
 800dbfe:	f000 f83f 	bl	800dc80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dc02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800dc04:	4618      	mov	r0, r3
 800dc06:	3730      	adds	r7, #48	; 0x30
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}

0800dc0c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b08a      	sub	sp, #40	; 0x28
 800dc10:	af02      	add	r7, sp, #8
 800dc12:	60f8      	str	r0, [r7, #12]
 800dc14:	60b9      	str	r1, [r7, #8]
 800dc16:	4613      	mov	r3, r2
 800dc18:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d10a      	bne.n	800dc36 <xQueueGenericCreate+0x2a>
	__asm volatile
 800dc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc24:	f383 8811 	msr	BASEPRI, r3
 800dc28:	f3bf 8f6f 	isb	sy
 800dc2c:	f3bf 8f4f 	dsb	sy
 800dc30:	613b      	str	r3, [r7, #16]
}
 800dc32:	bf00      	nop
 800dc34:	e7fe      	b.n	800dc34 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	68ba      	ldr	r2, [r7, #8]
 800dc3a:	fb02 f303 	mul.w	r3, r2, r3
 800dc3e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800dc40:	69fb      	ldr	r3, [r7, #28]
 800dc42:	3350      	adds	r3, #80	; 0x50
 800dc44:	4618      	mov	r0, r3
 800dc46:	f002 fd27 	bl	8010698 <pvPortMalloc>
 800dc4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800dc4c:	69bb      	ldr	r3, [r7, #24]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d011      	beq.n	800dc76 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800dc52:	69bb      	ldr	r3, [r7, #24]
 800dc54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	3350      	adds	r3, #80	; 0x50
 800dc5a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dc5c:	69bb      	ldr	r3, [r7, #24]
 800dc5e:	2200      	movs	r2, #0
 800dc60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dc64:	79fa      	ldrb	r2, [r7, #7]
 800dc66:	69bb      	ldr	r3, [r7, #24]
 800dc68:	9300      	str	r3, [sp, #0]
 800dc6a:	4613      	mov	r3, r2
 800dc6c:	697a      	ldr	r2, [r7, #20]
 800dc6e:	68b9      	ldr	r1, [r7, #8]
 800dc70:	68f8      	ldr	r0, [r7, #12]
 800dc72:	f000 f805 	bl	800dc80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dc76:	69bb      	ldr	r3, [r7, #24]
	}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3720      	adds	r7, #32
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}

0800dc80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b084      	sub	sp, #16
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	60f8      	str	r0, [r7, #12]
 800dc88:	60b9      	str	r1, [r7, #8]
 800dc8a:	607a      	str	r2, [r7, #4]
 800dc8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800dc8e:	68bb      	ldr	r3, [r7, #8]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d103      	bne.n	800dc9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dc94:	69bb      	ldr	r3, [r7, #24]
 800dc96:	69ba      	ldr	r2, [r7, #24]
 800dc98:	601a      	str	r2, [r3, #0]
 800dc9a:	e002      	b.n	800dca2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800dc9c:	69bb      	ldr	r3, [r7, #24]
 800dc9e:	687a      	ldr	r2, [r7, #4]
 800dca0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dca2:	69bb      	ldr	r3, [r7, #24]
 800dca4:	68fa      	ldr	r2, [r7, #12]
 800dca6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800dca8:	69bb      	ldr	r3, [r7, #24]
 800dcaa:	68ba      	ldr	r2, [r7, #8]
 800dcac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dcae:	2101      	movs	r1, #1
 800dcb0:	69b8      	ldr	r0, [r7, #24]
 800dcb2:	f7ff fecb 	bl	800da4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800dcb6:	69bb      	ldr	r3, [r7, #24]
 800dcb8:	78fa      	ldrb	r2, [r7, #3]
 800dcba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800dcbe:	bf00      	nop
 800dcc0:	3710      	adds	r7, #16
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}

0800dcc6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800dcc6:	b580      	push	{r7, lr}
 800dcc8:	b08a      	sub	sp, #40	; 0x28
 800dcca:	af02      	add	r7, sp, #8
 800dccc:	60f8      	str	r0, [r7, #12]
 800dcce:	60b9      	str	r1, [r7, #8]
 800dcd0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d10a      	bne.n	800dcee <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800dcd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcdc:	f383 8811 	msr	BASEPRI, r3
 800dce0:	f3bf 8f6f 	isb	sy
 800dce4:	f3bf 8f4f 	dsb	sy
 800dce8:	61bb      	str	r3, [r7, #24]
}
 800dcea:	bf00      	nop
 800dcec:	e7fe      	b.n	800dcec <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800dcee:	68ba      	ldr	r2, [r7, #8]
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	429a      	cmp	r2, r3
 800dcf4:	d90a      	bls.n	800dd0c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800dcf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcfa:	f383 8811 	msr	BASEPRI, r3
 800dcfe:	f3bf 8f6f 	isb	sy
 800dd02:	f3bf 8f4f 	dsb	sy
 800dd06:	617b      	str	r3, [r7, #20]
}
 800dd08:	bf00      	nop
 800dd0a:	e7fe      	b.n	800dd0a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800dd0c:	2302      	movs	r3, #2
 800dd0e:	9300      	str	r3, [sp, #0]
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2200      	movs	r2, #0
 800dd14:	2100      	movs	r1, #0
 800dd16:	68f8      	ldr	r0, [r7, #12]
 800dd18:	f7ff ff00 	bl	800db1c <xQueueGenericCreateStatic>
 800dd1c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800dd1e:	69fb      	ldr	r3, [r7, #28]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d002      	beq.n	800dd2a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800dd24:	69fb      	ldr	r3, [r7, #28]
 800dd26:	68ba      	ldr	r2, [r7, #8]
 800dd28:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800dd2a:	69fb      	ldr	r3, [r7, #28]
	}
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	3720      	adds	r7, #32
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}

0800dd34 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b086      	sub	sp, #24
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
 800dd3c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d10a      	bne.n	800dd5a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800dd44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd48:	f383 8811 	msr	BASEPRI, r3
 800dd4c:	f3bf 8f6f 	isb	sy
 800dd50:	f3bf 8f4f 	dsb	sy
 800dd54:	613b      	str	r3, [r7, #16]
}
 800dd56:	bf00      	nop
 800dd58:	e7fe      	b.n	800dd58 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800dd5a:	683a      	ldr	r2, [r7, #0]
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	429a      	cmp	r2, r3
 800dd60:	d90a      	bls.n	800dd78 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800dd62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd66:	f383 8811 	msr	BASEPRI, r3
 800dd6a:	f3bf 8f6f 	isb	sy
 800dd6e:	f3bf 8f4f 	dsb	sy
 800dd72:	60fb      	str	r3, [r7, #12]
}
 800dd74:	bf00      	nop
 800dd76:	e7fe      	b.n	800dd76 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800dd78:	2202      	movs	r2, #2
 800dd7a:	2100      	movs	r1, #0
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f7ff ff45 	bl	800dc0c <xQueueGenericCreate>
 800dd82:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800dd84:	697b      	ldr	r3, [r7, #20]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d002      	beq.n	800dd90 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800dd8a:	697b      	ldr	r3, [r7, #20]
 800dd8c:	683a      	ldr	r2, [r7, #0]
 800dd8e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800dd90:	697b      	ldr	r3, [r7, #20]
	}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3718      	adds	r7, #24
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}
	...

0800dd9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b08e      	sub	sp, #56	; 0x38
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	60f8      	str	r0, [r7, #12]
 800dda4:	60b9      	str	r1, [r7, #8]
 800dda6:	607a      	str	r2, [r7, #4]
 800dda8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ddb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d10a      	bne.n	800ddce <xQueueGenericSend+0x32>
	__asm volatile
 800ddb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddbc:	f383 8811 	msr	BASEPRI, r3
 800ddc0:	f3bf 8f6f 	isb	sy
 800ddc4:	f3bf 8f4f 	dsb	sy
 800ddc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ddca:	bf00      	nop
 800ddcc:	e7fe      	b.n	800ddcc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d103      	bne.n	800dddc <xQueueGenericSend+0x40>
 800ddd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d101      	bne.n	800dde0 <xQueueGenericSend+0x44>
 800dddc:	2301      	movs	r3, #1
 800ddde:	e000      	b.n	800dde2 <xQueueGenericSend+0x46>
 800dde0:	2300      	movs	r3, #0
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d10a      	bne.n	800ddfc <xQueueGenericSend+0x60>
	__asm volatile
 800dde6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddea:	f383 8811 	msr	BASEPRI, r3
 800ddee:	f3bf 8f6f 	isb	sy
 800ddf2:	f3bf 8f4f 	dsb	sy
 800ddf6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ddf8:	bf00      	nop
 800ddfa:	e7fe      	b.n	800ddfa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	2b02      	cmp	r3, #2
 800de00:	d103      	bne.n	800de0a <xQueueGenericSend+0x6e>
 800de02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de06:	2b01      	cmp	r3, #1
 800de08:	d101      	bne.n	800de0e <xQueueGenericSend+0x72>
 800de0a:	2301      	movs	r3, #1
 800de0c:	e000      	b.n	800de10 <xQueueGenericSend+0x74>
 800de0e:	2300      	movs	r3, #0
 800de10:	2b00      	cmp	r3, #0
 800de12:	d10a      	bne.n	800de2a <xQueueGenericSend+0x8e>
	__asm volatile
 800de14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de18:	f383 8811 	msr	BASEPRI, r3
 800de1c:	f3bf 8f6f 	isb	sy
 800de20:	f3bf 8f4f 	dsb	sy
 800de24:	623b      	str	r3, [r7, #32]
}
 800de26:	bf00      	nop
 800de28:	e7fe      	b.n	800de28 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800de2a:	f001 fcb9 	bl	800f7a0 <xTaskGetSchedulerState>
 800de2e:	4603      	mov	r3, r0
 800de30:	2b00      	cmp	r3, #0
 800de32:	d102      	bne.n	800de3a <xQueueGenericSend+0x9e>
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d101      	bne.n	800de3e <xQueueGenericSend+0xa2>
 800de3a:	2301      	movs	r3, #1
 800de3c:	e000      	b.n	800de40 <xQueueGenericSend+0xa4>
 800de3e:	2300      	movs	r3, #0
 800de40:	2b00      	cmp	r3, #0
 800de42:	d10a      	bne.n	800de5a <xQueueGenericSend+0xbe>
	__asm volatile
 800de44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de48:	f383 8811 	msr	BASEPRI, r3
 800de4c:	f3bf 8f6f 	isb	sy
 800de50:	f3bf 8f4f 	dsb	sy
 800de54:	61fb      	str	r3, [r7, #28]
}
 800de56:	bf00      	nop
 800de58:	e7fe      	b.n	800de58 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800de5a:	f002 fafb 	bl	8010454 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800de5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de66:	429a      	cmp	r2, r3
 800de68:	d302      	bcc.n	800de70 <xQueueGenericSend+0xd4>
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	2b02      	cmp	r3, #2
 800de6e:	d129      	bne.n	800dec4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800de70:	683a      	ldr	r2, [r7, #0]
 800de72:	68b9      	ldr	r1, [r7, #8]
 800de74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de76:	f000 fc5e 	bl	800e736 <prvCopyDataToQueue>
 800de7a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de80:	2b00      	cmp	r3, #0
 800de82:	d010      	beq.n	800dea6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de86:	3324      	adds	r3, #36	; 0x24
 800de88:	4618      	mov	r0, r3
 800de8a:	f001 facb 	bl	800f424 <xTaskRemoveFromEventList>
 800de8e:	4603      	mov	r3, r0
 800de90:	2b00      	cmp	r3, #0
 800de92:	d013      	beq.n	800debc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800de94:	4b3f      	ldr	r3, [pc, #252]	; (800df94 <xQueueGenericSend+0x1f8>)
 800de96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de9a:	601a      	str	r2, [r3, #0]
 800de9c:	f3bf 8f4f 	dsb	sy
 800dea0:	f3bf 8f6f 	isb	sy
 800dea4:	e00a      	b.n	800debc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800dea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d007      	beq.n	800debc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800deac:	4b39      	ldr	r3, [pc, #228]	; (800df94 <xQueueGenericSend+0x1f8>)
 800deae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800deb2:	601a      	str	r2, [r3, #0]
 800deb4:	f3bf 8f4f 	dsb	sy
 800deb8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800debc:	f002 fafa 	bl	80104b4 <vPortExitCritical>
				return pdPASS;
 800dec0:	2301      	movs	r3, #1
 800dec2:	e063      	b.n	800df8c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d103      	bne.n	800ded2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800deca:	f002 faf3 	bl	80104b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800dece:	2300      	movs	r3, #0
 800ded0:	e05c      	b.n	800df8c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ded2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d106      	bne.n	800dee6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ded8:	f107 0314 	add.w	r3, r7, #20
 800dedc:	4618      	mov	r0, r3
 800dede:	f001 fb05 	bl	800f4ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dee2:	2301      	movs	r3, #1
 800dee4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dee6:	f002 fae5 	bl	80104b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800deea:	f001 f877 	bl	800efdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800deee:	f002 fab1 	bl	8010454 <vPortEnterCritical>
 800def2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800def4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800def8:	b25b      	sxtb	r3, r3
 800defa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800defe:	d103      	bne.n	800df08 <xQueueGenericSend+0x16c>
 800df00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df02:	2200      	movs	r2, #0
 800df04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800df08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df0e:	b25b      	sxtb	r3, r3
 800df10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df14:	d103      	bne.n	800df1e <xQueueGenericSend+0x182>
 800df16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df18:	2200      	movs	r2, #0
 800df1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800df1e:	f002 fac9 	bl	80104b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800df22:	1d3a      	adds	r2, r7, #4
 800df24:	f107 0314 	add.w	r3, r7, #20
 800df28:	4611      	mov	r1, r2
 800df2a:	4618      	mov	r0, r3
 800df2c:	f001 faf4 	bl	800f518 <xTaskCheckForTimeOut>
 800df30:	4603      	mov	r3, r0
 800df32:	2b00      	cmp	r3, #0
 800df34:	d124      	bne.n	800df80 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800df36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df38:	f000 fcf5 	bl	800e926 <prvIsQueueFull>
 800df3c:	4603      	mov	r3, r0
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d018      	beq.n	800df74 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800df42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df44:	3310      	adds	r3, #16
 800df46:	687a      	ldr	r2, [r7, #4]
 800df48:	4611      	mov	r1, r2
 800df4a:	4618      	mov	r0, r3
 800df4c:	f001 fa1a 	bl	800f384 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800df50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df52:	f000 fc80 	bl	800e856 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800df56:	f001 f84f 	bl	800eff8 <xTaskResumeAll>
 800df5a:	4603      	mov	r3, r0
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	f47f af7c 	bne.w	800de5a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800df62:	4b0c      	ldr	r3, [pc, #48]	; (800df94 <xQueueGenericSend+0x1f8>)
 800df64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df68:	601a      	str	r2, [r3, #0]
 800df6a:	f3bf 8f4f 	dsb	sy
 800df6e:	f3bf 8f6f 	isb	sy
 800df72:	e772      	b.n	800de5a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800df74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df76:	f000 fc6e 	bl	800e856 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800df7a:	f001 f83d 	bl	800eff8 <xTaskResumeAll>
 800df7e:	e76c      	b.n	800de5a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800df80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df82:	f000 fc68 	bl	800e856 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800df86:	f001 f837 	bl	800eff8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800df8a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800df8c:	4618      	mov	r0, r3
 800df8e:	3738      	adds	r7, #56	; 0x38
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}
 800df94:	e000ed04 	.word	0xe000ed04

0800df98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b090      	sub	sp, #64	; 0x40
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	60f8      	str	r0, [r7, #12]
 800dfa0:	60b9      	str	r1, [r7, #8]
 800dfa2:	607a      	str	r2, [r7, #4]
 800dfa4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800dfaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d10a      	bne.n	800dfc6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800dfb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfb4:	f383 8811 	msr	BASEPRI, r3
 800dfb8:	f3bf 8f6f 	isb	sy
 800dfbc:	f3bf 8f4f 	dsb	sy
 800dfc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800dfc2:	bf00      	nop
 800dfc4:	e7fe      	b.n	800dfc4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d103      	bne.n	800dfd4 <xQueueGenericSendFromISR+0x3c>
 800dfcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d101      	bne.n	800dfd8 <xQueueGenericSendFromISR+0x40>
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	e000      	b.n	800dfda <xQueueGenericSendFromISR+0x42>
 800dfd8:	2300      	movs	r3, #0
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d10a      	bne.n	800dff4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800dfde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfe2:	f383 8811 	msr	BASEPRI, r3
 800dfe6:	f3bf 8f6f 	isb	sy
 800dfea:	f3bf 8f4f 	dsb	sy
 800dfee:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dff0:	bf00      	nop
 800dff2:	e7fe      	b.n	800dff2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	2b02      	cmp	r3, #2
 800dff8:	d103      	bne.n	800e002 <xQueueGenericSendFromISR+0x6a>
 800dffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dffe:	2b01      	cmp	r3, #1
 800e000:	d101      	bne.n	800e006 <xQueueGenericSendFromISR+0x6e>
 800e002:	2301      	movs	r3, #1
 800e004:	e000      	b.n	800e008 <xQueueGenericSendFromISR+0x70>
 800e006:	2300      	movs	r3, #0
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d10a      	bne.n	800e022 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e010:	f383 8811 	msr	BASEPRI, r3
 800e014:	f3bf 8f6f 	isb	sy
 800e018:	f3bf 8f4f 	dsb	sy
 800e01c:	623b      	str	r3, [r7, #32]
}
 800e01e:	bf00      	nop
 800e020:	e7fe      	b.n	800e020 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e022:	f002 faf9 	bl	8010618 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e026:	f3ef 8211 	mrs	r2, BASEPRI
 800e02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e02e:	f383 8811 	msr	BASEPRI, r3
 800e032:	f3bf 8f6f 	isb	sy
 800e036:	f3bf 8f4f 	dsb	sy
 800e03a:	61fa      	str	r2, [r7, #28]
 800e03c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e03e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e040:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e04a:	429a      	cmp	r2, r3
 800e04c:	d302      	bcc.n	800e054 <xQueueGenericSendFromISR+0xbc>
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	2b02      	cmp	r3, #2
 800e052:	d12f      	bne.n	800e0b4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e056:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e05a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e062:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e064:	683a      	ldr	r2, [r7, #0]
 800e066:	68b9      	ldr	r1, [r7, #8]
 800e068:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e06a:	f000 fb64 	bl	800e736 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e06e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e072:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e076:	d112      	bne.n	800e09e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d016      	beq.n	800e0ae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e082:	3324      	adds	r3, #36	; 0x24
 800e084:	4618      	mov	r0, r3
 800e086:	f001 f9cd 	bl	800f424 <xTaskRemoveFromEventList>
 800e08a:	4603      	mov	r3, r0
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d00e      	beq.n	800e0ae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d00b      	beq.n	800e0ae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	2201      	movs	r2, #1
 800e09a:	601a      	str	r2, [r3, #0]
 800e09c:	e007      	b.n	800e0ae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e09e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e0a2:	3301      	adds	r3, #1
 800e0a4:	b2db      	uxtb	r3, r3
 800e0a6:	b25a      	sxtb	r2, r3
 800e0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e0ae:	2301      	movs	r3, #1
 800e0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e0b2:	e001      	b.n	800e0b8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e0b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0ba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e0bc:	697b      	ldr	r3, [r7, #20]
 800e0be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e0c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e0c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3740      	adds	r7, #64	; 0x40
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}

0800e0ce <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e0ce:	b580      	push	{r7, lr}
 800e0d0:	b08e      	sub	sp, #56	; 0x38
 800e0d2:	af00      	add	r7, sp, #0
 800e0d4:	6078      	str	r0, [r7, #4]
 800e0d6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d10a      	bne.n	800e0f8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800e0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0e6:	f383 8811 	msr	BASEPRI, r3
 800e0ea:	f3bf 8f6f 	isb	sy
 800e0ee:	f3bf 8f4f 	dsb	sy
 800e0f2:	623b      	str	r3, [r7, #32]
}
 800e0f4:	bf00      	nop
 800e0f6:	e7fe      	b.n	800e0f6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d00a      	beq.n	800e116 <xQueueGiveFromISR+0x48>
	__asm volatile
 800e100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e104:	f383 8811 	msr	BASEPRI, r3
 800e108:	f3bf 8f6f 	isb	sy
 800e10c:	f3bf 8f4f 	dsb	sy
 800e110:	61fb      	str	r3, [r7, #28]
}
 800e112:	bf00      	nop
 800e114:	e7fe      	b.n	800e114 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d103      	bne.n	800e126 <xQueueGiveFromISR+0x58>
 800e11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e120:	689b      	ldr	r3, [r3, #8]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d101      	bne.n	800e12a <xQueueGiveFromISR+0x5c>
 800e126:	2301      	movs	r3, #1
 800e128:	e000      	b.n	800e12c <xQueueGiveFromISR+0x5e>
 800e12a:	2300      	movs	r3, #0
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d10a      	bne.n	800e146 <xQueueGiveFromISR+0x78>
	__asm volatile
 800e130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e134:	f383 8811 	msr	BASEPRI, r3
 800e138:	f3bf 8f6f 	isb	sy
 800e13c:	f3bf 8f4f 	dsb	sy
 800e140:	61bb      	str	r3, [r7, #24]
}
 800e142:	bf00      	nop
 800e144:	e7fe      	b.n	800e144 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e146:	f002 fa67 	bl	8010618 <vPortValidateInterruptPriority>
	__asm volatile
 800e14a:	f3ef 8211 	mrs	r2, BASEPRI
 800e14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e152:	f383 8811 	msr	BASEPRI, r3
 800e156:	f3bf 8f6f 	isb	sy
 800e15a:	f3bf 8f4f 	dsb	sy
 800e15e:	617a      	str	r2, [r7, #20]
 800e160:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e162:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e164:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e16a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e16e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e170:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e172:	429a      	cmp	r2, r3
 800e174:	d22b      	bcs.n	800e1ce <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e178:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e17c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e182:	1c5a      	adds	r2, r3, #1
 800e184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e186:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e188:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e18c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e190:	d112      	bne.n	800e1b8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e196:	2b00      	cmp	r3, #0
 800e198:	d016      	beq.n	800e1c8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e19c:	3324      	adds	r3, #36	; 0x24
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f001 f940 	bl	800f424 <xTaskRemoveFromEventList>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d00e      	beq.n	800e1c8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d00b      	beq.n	800e1c8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	601a      	str	r2, [r3, #0]
 800e1b6:	e007      	b.n	800e1c8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e1b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1bc:	3301      	adds	r3, #1
 800e1be:	b2db      	uxtb	r3, r3
 800e1c0:	b25a      	sxtb	r2, r3
 800e1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e1c8:	2301      	movs	r3, #1
 800e1ca:	637b      	str	r3, [r7, #52]	; 0x34
 800e1cc:	e001      	b.n	800e1d2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	637b      	str	r3, [r7, #52]	; 0x34
 800e1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	f383 8811 	msr	BASEPRI, r3
}
 800e1dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e1de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	3738      	adds	r7, #56	; 0x38
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}

0800e1e8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b08c      	sub	sp, #48	; 0x30
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	60f8      	str	r0, [r7, #12]
 800e1f0:	60b9      	str	r1, [r7, #8]
 800e1f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d10a      	bne.n	800e218 <xQueueReceive+0x30>
	__asm volatile
 800e202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e206:	f383 8811 	msr	BASEPRI, r3
 800e20a:	f3bf 8f6f 	isb	sy
 800e20e:	f3bf 8f4f 	dsb	sy
 800e212:	623b      	str	r3, [r7, #32]
}
 800e214:	bf00      	nop
 800e216:	e7fe      	b.n	800e216 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e218:	68bb      	ldr	r3, [r7, #8]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d103      	bne.n	800e226 <xQueueReceive+0x3e>
 800e21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e222:	2b00      	cmp	r3, #0
 800e224:	d101      	bne.n	800e22a <xQueueReceive+0x42>
 800e226:	2301      	movs	r3, #1
 800e228:	e000      	b.n	800e22c <xQueueReceive+0x44>
 800e22a:	2300      	movs	r3, #0
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d10a      	bne.n	800e246 <xQueueReceive+0x5e>
	__asm volatile
 800e230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e234:	f383 8811 	msr	BASEPRI, r3
 800e238:	f3bf 8f6f 	isb	sy
 800e23c:	f3bf 8f4f 	dsb	sy
 800e240:	61fb      	str	r3, [r7, #28]
}
 800e242:	bf00      	nop
 800e244:	e7fe      	b.n	800e244 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e246:	f001 faab 	bl	800f7a0 <xTaskGetSchedulerState>
 800e24a:	4603      	mov	r3, r0
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d102      	bne.n	800e256 <xQueueReceive+0x6e>
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d101      	bne.n	800e25a <xQueueReceive+0x72>
 800e256:	2301      	movs	r3, #1
 800e258:	e000      	b.n	800e25c <xQueueReceive+0x74>
 800e25a:	2300      	movs	r3, #0
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d10a      	bne.n	800e276 <xQueueReceive+0x8e>
	__asm volatile
 800e260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e264:	f383 8811 	msr	BASEPRI, r3
 800e268:	f3bf 8f6f 	isb	sy
 800e26c:	f3bf 8f4f 	dsb	sy
 800e270:	61bb      	str	r3, [r7, #24]
}
 800e272:	bf00      	nop
 800e274:	e7fe      	b.n	800e274 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e276:	f002 f8ed 	bl	8010454 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e27c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e27e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e282:	2b00      	cmp	r3, #0
 800e284:	d01f      	beq.n	800e2c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e286:	68b9      	ldr	r1, [r7, #8]
 800e288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e28a:	f000 fabe 	bl	800e80a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e290:	1e5a      	subs	r2, r3, #1
 800e292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e294:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e298:	691b      	ldr	r3, [r3, #16]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d00f      	beq.n	800e2be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a0:	3310      	adds	r3, #16
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f001 f8be 	bl	800f424 <xTaskRemoveFromEventList>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d007      	beq.n	800e2be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e2ae:	4b3d      	ldr	r3, [pc, #244]	; (800e3a4 <xQueueReceive+0x1bc>)
 800e2b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2b4:	601a      	str	r2, [r3, #0]
 800e2b6:	f3bf 8f4f 	dsb	sy
 800e2ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e2be:	f002 f8f9 	bl	80104b4 <vPortExitCritical>
				return pdPASS;
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	e069      	b.n	800e39a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d103      	bne.n	800e2d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e2cc:	f002 f8f2 	bl	80104b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	e062      	b.n	800e39a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d106      	bne.n	800e2e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e2da:	f107 0310 	add.w	r3, r7, #16
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f001 f904 	bl	800f4ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e2e4:	2301      	movs	r3, #1
 800e2e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e2e8:	f002 f8e4 	bl	80104b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e2ec:	f000 fe76 	bl	800efdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e2f0:	f002 f8b0 	bl	8010454 <vPortEnterCritical>
 800e2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e2fa:	b25b      	sxtb	r3, r3
 800e2fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e300:	d103      	bne.n	800e30a <xQueueReceive+0x122>
 800e302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e304:	2200      	movs	r2, #0
 800e306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e30c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e310:	b25b      	sxtb	r3, r3
 800e312:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e316:	d103      	bne.n	800e320 <xQueueReceive+0x138>
 800e318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e31a:	2200      	movs	r2, #0
 800e31c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e320:	f002 f8c8 	bl	80104b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e324:	1d3a      	adds	r2, r7, #4
 800e326:	f107 0310 	add.w	r3, r7, #16
 800e32a:	4611      	mov	r1, r2
 800e32c:	4618      	mov	r0, r3
 800e32e:	f001 f8f3 	bl	800f518 <xTaskCheckForTimeOut>
 800e332:	4603      	mov	r3, r0
 800e334:	2b00      	cmp	r3, #0
 800e336:	d123      	bne.n	800e380 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e33a:	f000 fade 	bl	800e8fa <prvIsQueueEmpty>
 800e33e:	4603      	mov	r3, r0
 800e340:	2b00      	cmp	r3, #0
 800e342:	d017      	beq.n	800e374 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e346:	3324      	adds	r3, #36	; 0x24
 800e348:	687a      	ldr	r2, [r7, #4]
 800e34a:	4611      	mov	r1, r2
 800e34c:	4618      	mov	r0, r3
 800e34e:	f001 f819 	bl	800f384 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e354:	f000 fa7f 	bl	800e856 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e358:	f000 fe4e 	bl	800eff8 <xTaskResumeAll>
 800e35c:	4603      	mov	r3, r0
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d189      	bne.n	800e276 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e362:	4b10      	ldr	r3, [pc, #64]	; (800e3a4 <xQueueReceive+0x1bc>)
 800e364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e368:	601a      	str	r2, [r3, #0]
 800e36a:	f3bf 8f4f 	dsb	sy
 800e36e:	f3bf 8f6f 	isb	sy
 800e372:	e780      	b.n	800e276 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e376:	f000 fa6e 	bl	800e856 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e37a:	f000 fe3d 	bl	800eff8 <xTaskResumeAll>
 800e37e:	e77a      	b.n	800e276 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e382:	f000 fa68 	bl	800e856 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e386:	f000 fe37 	bl	800eff8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e38a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e38c:	f000 fab5 	bl	800e8fa <prvIsQueueEmpty>
 800e390:	4603      	mov	r3, r0
 800e392:	2b00      	cmp	r3, #0
 800e394:	f43f af6f 	beq.w	800e276 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e398:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	3730      	adds	r7, #48	; 0x30
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd80      	pop	{r7, pc}
 800e3a2:	bf00      	nop
 800e3a4:	e000ed04 	.word	0xe000ed04

0800e3a8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b08e      	sub	sp, #56	; 0x38
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
 800e3b0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d10a      	bne.n	800e3da <xQueueSemaphoreTake+0x32>
	__asm volatile
 800e3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3c8:	f383 8811 	msr	BASEPRI, r3
 800e3cc:	f3bf 8f6f 	isb	sy
 800e3d0:	f3bf 8f4f 	dsb	sy
 800e3d4:	623b      	str	r3, [r7, #32]
}
 800e3d6:	bf00      	nop
 800e3d8:	e7fe      	b.n	800e3d8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d00a      	beq.n	800e3f8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800e3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3e6:	f383 8811 	msr	BASEPRI, r3
 800e3ea:	f3bf 8f6f 	isb	sy
 800e3ee:	f3bf 8f4f 	dsb	sy
 800e3f2:	61fb      	str	r3, [r7, #28]
}
 800e3f4:	bf00      	nop
 800e3f6:	e7fe      	b.n	800e3f6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e3f8:	f001 f9d2 	bl	800f7a0 <xTaskGetSchedulerState>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d102      	bne.n	800e408 <xQueueSemaphoreTake+0x60>
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d101      	bne.n	800e40c <xQueueSemaphoreTake+0x64>
 800e408:	2301      	movs	r3, #1
 800e40a:	e000      	b.n	800e40e <xQueueSemaphoreTake+0x66>
 800e40c:	2300      	movs	r3, #0
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d10a      	bne.n	800e428 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800e412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e416:	f383 8811 	msr	BASEPRI, r3
 800e41a:	f3bf 8f6f 	isb	sy
 800e41e:	f3bf 8f4f 	dsb	sy
 800e422:	61bb      	str	r3, [r7, #24]
}
 800e424:	bf00      	nop
 800e426:	e7fe      	b.n	800e426 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e428:	f002 f814 	bl	8010454 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e42e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e430:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e434:	2b00      	cmp	r3, #0
 800e436:	d024      	beq.n	800e482 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e43a:	1e5a      	subs	r2, r3, #1
 800e43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e43e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d104      	bne.n	800e452 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e448:	f001 fb20 	bl	800fa8c <pvTaskIncrementMutexHeldCount>
 800e44c:	4602      	mov	r2, r0
 800e44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e450:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e454:	691b      	ldr	r3, [r3, #16]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d00f      	beq.n	800e47a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e45c:	3310      	adds	r3, #16
 800e45e:	4618      	mov	r0, r3
 800e460:	f000 ffe0 	bl	800f424 <xTaskRemoveFromEventList>
 800e464:	4603      	mov	r3, r0
 800e466:	2b00      	cmp	r3, #0
 800e468:	d007      	beq.n	800e47a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e46a:	4b54      	ldr	r3, [pc, #336]	; (800e5bc <xQueueSemaphoreTake+0x214>)
 800e46c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e470:	601a      	str	r2, [r3, #0]
 800e472:	f3bf 8f4f 	dsb	sy
 800e476:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e47a:	f002 f81b 	bl	80104b4 <vPortExitCritical>
				return pdPASS;
 800e47e:	2301      	movs	r3, #1
 800e480:	e097      	b.n	800e5b2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e482:	683b      	ldr	r3, [r7, #0]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d111      	bne.n	800e4ac <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d00a      	beq.n	800e4a4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800e48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e492:	f383 8811 	msr	BASEPRI, r3
 800e496:	f3bf 8f6f 	isb	sy
 800e49a:	f3bf 8f4f 	dsb	sy
 800e49e:	617b      	str	r3, [r7, #20]
}
 800e4a0:	bf00      	nop
 800e4a2:	e7fe      	b.n	800e4a2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e4a4:	f002 f806 	bl	80104b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	e082      	b.n	800e5b2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e4ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d106      	bne.n	800e4c0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e4b2:	f107 030c 	add.w	r3, r7, #12
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f001 f818 	bl	800f4ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e4bc:	2301      	movs	r3, #1
 800e4be:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e4c0:	f001 fff8 	bl	80104b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e4c4:	f000 fd8a 	bl	800efdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e4c8:	f001 ffc4 	bl	8010454 <vPortEnterCritical>
 800e4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e4d2:	b25b      	sxtb	r3, r3
 800e4d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4d8:	d103      	bne.n	800e4e2 <xQueueSemaphoreTake+0x13a>
 800e4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4dc:	2200      	movs	r2, #0
 800e4de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e4e8:	b25b      	sxtb	r3, r3
 800e4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4ee:	d103      	bne.n	800e4f8 <xQueueSemaphoreTake+0x150>
 800e4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e4f8:	f001 ffdc 	bl	80104b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e4fc:	463a      	mov	r2, r7
 800e4fe:	f107 030c 	add.w	r3, r7, #12
 800e502:	4611      	mov	r1, r2
 800e504:	4618      	mov	r0, r3
 800e506:	f001 f807 	bl	800f518 <xTaskCheckForTimeOut>
 800e50a:	4603      	mov	r3, r0
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d132      	bne.n	800e576 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e510:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e512:	f000 f9f2 	bl	800e8fa <prvIsQueueEmpty>
 800e516:	4603      	mov	r3, r0
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d026      	beq.n	800e56a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d109      	bne.n	800e538 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800e524:	f001 ff96 	bl	8010454 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e52a:	689b      	ldr	r3, [r3, #8]
 800e52c:	4618      	mov	r0, r3
 800e52e:	f001 f955 	bl	800f7dc <xTaskPriorityInherit>
 800e532:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800e534:	f001 ffbe 	bl	80104b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e53a:	3324      	adds	r3, #36	; 0x24
 800e53c:	683a      	ldr	r2, [r7, #0]
 800e53e:	4611      	mov	r1, r2
 800e540:	4618      	mov	r0, r3
 800e542:	f000 ff1f 	bl	800f384 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e546:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e548:	f000 f985 	bl	800e856 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e54c:	f000 fd54 	bl	800eff8 <xTaskResumeAll>
 800e550:	4603      	mov	r3, r0
 800e552:	2b00      	cmp	r3, #0
 800e554:	f47f af68 	bne.w	800e428 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800e558:	4b18      	ldr	r3, [pc, #96]	; (800e5bc <xQueueSemaphoreTake+0x214>)
 800e55a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e55e:	601a      	str	r2, [r3, #0]
 800e560:	f3bf 8f4f 	dsb	sy
 800e564:	f3bf 8f6f 	isb	sy
 800e568:	e75e      	b.n	800e428 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e56a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e56c:	f000 f973 	bl	800e856 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e570:	f000 fd42 	bl	800eff8 <xTaskResumeAll>
 800e574:	e758      	b.n	800e428 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e576:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e578:	f000 f96d 	bl	800e856 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e57c:	f000 fd3c 	bl	800eff8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e580:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e582:	f000 f9ba 	bl	800e8fa <prvIsQueueEmpty>
 800e586:	4603      	mov	r3, r0
 800e588:	2b00      	cmp	r3, #0
 800e58a:	f43f af4d 	beq.w	800e428 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e590:	2b00      	cmp	r3, #0
 800e592:	d00d      	beq.n	800e5b0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800e594:	f001 ff5e 	bl	8010454 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e598:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e59a:	f000 f8b4 	bl	800e706 <prvGetDisinheritPriorityAfterTimeout>
 800e59e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5a2:	689b      	ldr	r3, [r3, #8]
 800e5a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f001 f9ee 	bl	800f988 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e5ac:	f001 ff82 	bl	80104b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e5b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	3738      	adds	r7, #56	; 0x38
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}
 800e5ba:	bf00      	nop
 800e5bc:	e000ed04 	.word	0xe000ed04

0800e5c0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b08e      	sub	sp, #56	; 0x38
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	60f8      	str	r0, [r7, #12]
 800e5c8:	60b9      	str	r1, [r7, #8]
 800e5ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d10a      	bne.n	800e5ec <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5da:	f383 8811 	msr	BASEPRI, r3
 800e5de:	f3bf 8f6f 	isb	sy
 800e5e2:	f3bf 8f4f 	dsb	sy
 800e5e6:	623b      	str	r3, [r7, #32]
}
 800e5e8:	bf00      	nop
 800e5ea:	e7fe      	b.n	800e5ea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d103      	bne.n	800e5fa <xQueueReceiveFromISR+0x3a>
 800e5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d101      	bne.n	800e5fe <xQueueReceiveFromISR+0x3e>
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	e000      	b.n	800e600 <xQueueReceiveFromISR+0x40>
 800e5fe:	2300      	movs	r3, #0
 800e600:	2b00      	cmp	r3, #0
 800e602:	d10a      	bne.n	800e61a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e608:	f383 8811 	msr	BASEPRI, r3
 800e60c:	f3bf 8f6f 	isb	sy
 800e610:	f3bf 8f4f 	dsb	sy
 800e614:	61fb      	str	r3, [r7, #28]
}
 800e616:	bf00      	nop
 800e618:	e7fe      	b.n	800e618 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e61a:	f001 fffd 	bl	8010618 <vPortValidateInterruptPriority>
	__asm volatile
 800e61e:	f3ef 8211 	mrs	r2, BASEPRI
 800e622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e626:	f383 8811 	msr	BASEPRI, r3
 800e62a:	f3bf 8f6f 	isb	sy
 800e62e:	f3bf 8f4f 	dsb	sy
 800e632:	61ba      	str	r2, [r7, #24]
 800e634:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e636:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e638:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e63c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e63e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e642:	2b00      	cmp	r3, #0
 800e644:	d02f      	beq.n	800e6a6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e648:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e64c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e650:	68b9      	ldr	r1, [r7, #8]
 800e652:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e654:	f000 f8d9 	bl	800e80a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e65a:	1e5a      	subs	r2, r3, #1
 800e65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e65e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e660:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e664:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e668:	d112      	bne.n	800e690 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e66c:	691b      	ldr	r3, [r3, #16]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d016      	beq.n	800e6a0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e674:	3310      	adds	r3, #16
 800e676:	4618      	mov	r0, r3
 800e678:	f000 fed4 	bl	800f424 <xTaskRemoveFromEventList>
 800e67c:	4603      	mov	r3, r0
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d00e      	beq.n	800e6a0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d00b      	beq.n	800e6a0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2201      	movs	r2, #1
 800e68c:	601a      	str	r2, [r3, #0]
 800e68e:	e007      	b.n	800e6a0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e694:	3301      	adds	r3, #1
 800e696:	b2db      	uxtb	r3, r3
 800e698:	b25a      	sxtb	r2, r3
 800e69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e69c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e6a0:	2301      	movs	r3, #1
 800e6a2:	637b      	str	r3, [r7, #52]	; 0x34
 800e6a4:	e001      	b.n	800e6aa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	637b      	str	r3, [r7, #52]	; 0x34
 800e6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ac:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e6ae:	693b      	ldr	r3, [r7, #16]
 800e6b0:	f383 8811 	msr	BASEPRI, r3
}
 800e6b4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e6b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	3738      	adds	r7, #56	; 0x38
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}

0800e6c0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b084      	sub	sp, #16
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d10a      	bne.n	800e6e8 <vQueueDelete+0x28>
	__asm volatile
 800e6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6d6:	f383 8811 	msr	BASEPRI, r3
 800e6da:	f3bf 8f6f 	isb	sy
 800e6de:	f3bf 8f4f 	dsb	sy
 800e6e2:	60bb      	str	r3, [r7, #8]
}
 800e6e4:	bf00      	nop
 800e6e6:	e7fe      	b.n	800e6e6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e6e8:	68f8      	ldr	r0, [r7, #12]
 800e6ea:	f000 f95f 	bl	800e9ac <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d102      	bne.n	800e6fe <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800e6f8:	68f8      	ldr	r0, [r7, #12]
 800e6fa:	f002 f899 	bl	8010830 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e6fe:	bf00      	nop
 800e700:	3710      	adds	r7, #16
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}

0800e706 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e706:	b480      	push	{r7}
 800e708:	b085      	sub	sp, #20
 800e70a:	af00      	add	r7, sp, #0
 800e70c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e712:	2b00      	cmp	r3, #0
 800e714:	d006      	beq.n	800e724 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800e720:	60fb      	str	r3, [r7, #12]
 800e722:	e001      	b.n	800e728 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e724:	2300      	movs	r3, #0
 800e726:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e728:	68fb      	ldr	r3, [r7, #12]
	}
 800e72a:	4618      	mov	r0, r3
 800e72c:	3714      	adds	r7, #20
 800e72e:	46bd      	mov	sp, r7
 800e730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e734:	4770      	bx	lr

0800e736 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e736:	b580      	push	{r7, lr}
 800e738:	b086      	sub	sp, #24
 800e73a:	af00      	add	r7, sp, #0
 800e73c:	60f8      	str	r0, [r7, #12]
 800e73e:	60b9      	str	r1, [r7, #8]
 800e740:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e742:	2300      	movs	r3, #0
 800e744:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e74a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e750:	2b00      	cmp	r3, #0
 800e752:	d10d      	bne.n	800e770 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d14d      	bne.n	800e7f8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	689b      	ldr	r3, [r3, #8]
 800e760:	4618      	mov	r0, r3
 800e762:	f001 f8a3 	bl	800f8ac <xTaskPriorityDisinherit>
 800e766:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	2200      	movs	r2, #0
 800e76c:	609a      	str	r2, [r3, #8]
 800e76e:	e043      	b.n	800e7f8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d119      	bne.n	800e7aa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	6858      	ldr	r0, [r3, #4]
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e77e:	461a      	mov	r2, r3
 800e780:	68b9      	ldr	r1, [r7, #8]
 800e782:	f002 f9eb 	bl	8010b5c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	685a      	ldr	r2, [r3, #4]
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e78e:	441a      	add	r2, r3
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	685a      	ldr	r2, [r3, #4]
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	689b      	ldr	r3, [r3, #8]
 800e79c:	429a      	cmp	r2, r3
 800e79e:	d32b      	bcc.n	800e7f8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	681a      	ldr	r2, [r3, #0]
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	605a      	str	r2, [r3, #4]
 800e7a8:	e026      	b.n	800e7f8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	68d8      	ldr	r0, [r3, #12]
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7b2:	461a      	mov	r2, r3
 800e7b4:	68b9      	ldr	r1, [r7, #8]
 800e7b6:	f002 f9d1 	bl	8010b5c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	68da      	ldr	r2, [r3, #12]
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7c2:	425b      	negs	r3, r3
 800e7c4:	441a      	add	r2, r3
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	68da      	ldr	r2, [r3, #12]
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	d207      	bcs.n	800e7e6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	689a      	ldr	r2, [r3, #8]
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7de:	425b      	negs	r3, r3
 800e7e0:	441a      	add	r2, r3
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	2b02      	cmp	r3, #2
 800e7ea:	d105      	bne.n	800e7f8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e7ec:	693b      	ldr	r3, [r7, #16]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d002      	beq.n	800e7f8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e7f2:	693b      	ldr	r3, [r7, #16]
 800e7f4:	3b01      	subs	r3, #1
 800e7f6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e7f8:	693b      	ldr	r3, [r7, #16]
 800e7fa:	1c5a      	adds	r2, r3, #1
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e800:	697b      	ldr	r3, [r7, #20]
}
 800e802:	4618      	mov	r0, r3
 800e804:	3718      	adds	r7, #24
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}

0800e80a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e80a:	b580      	push	{r7, lr}
 800e80c:	b082      	sub	sp, #8
 800e80e:	af00      	add	r7, sp, #0
 800e810:	6078      	str	r0, [r7, #4]
 800e812:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d018      	beq.n	800e84e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	68da      	ldr	r2, [r3, #12]
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e824:	441a      	add	r2, r3
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	68da      	ldr	r2, [r3, #12]
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	689b      	ldr	r3, [r3, #8]
 800e832:	429a      	cmp	r2, r3
 800e834:	d303      	bcc.n	800e83e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681a      	ldr	r2, [r3, #0]
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	68d9      	ldr	r1, [r3, #12]
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e846:	461a      	mov	r2, r3
 800e848:	6838      	ldr	r0, [r7, #0]
 800e84a:	f002 f987 	bl	8010b5c <memcpy>
	}
}
 800e84e:	bf00      	nop
 800e850:	3708      	adds	r7, #8
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}

0800e856 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e856:	b580      	push	{r7, lr}
 800e858:	b084      	sub	sp, #16
 800e85a:	af00      	add	r7, sp, #0
 800e85c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e85e:	f001 fdf9 	bl	8010454 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e868:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e86a:	e011      	b.n	800e890 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e870:	2b00      	cmp	r3, #0
 800e872:	d012      	beq.n	800e89a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	3324      	adds	r3, #36	; 0x24
 800e878:	4618      	mov	r0, r3
 800e87a:	f000 fdd3 	bl	800f424 <xTaskRemoveFromEventList>
 800e87e:	4603      	mov	r3, r0
 800e880:	2b00      	cmp	r3, #0
 800e882:	d001      	beq.n	800e888 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e884:	f000 feaa 	bl	800f5dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e888:	7bfb      	ldrb	r3, [r7, #15]
 800e88a:	3b01      	subs	r3, #1
 800e88c:	b2db      	uxtb	r3, r3
 800e88e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e890:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e894:	2b00      	cmp	r3, #0
 800e896:	dce9      	bgt.n	800e86c <prvUnlockQueue+0x16>
 800e898:	e000      	b.n	800e89c <prvUnlockQueue+0x46>
					break;
 800e89a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	22ff      	movs	r2, #255	; 0xff
 800e8a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e8a4:	f001 fe06 	bl	80104b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e8a8:	f001 fdd4 	bl	8010454 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e8b2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e8b4:	e011      	b.n	800e8da <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	691b      	ldr	r3, [r3, #16]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d012      	beq.n	800e8e4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	3310      	adds	r3, #16
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f000 fdae 	bl	800f424 <xTaskRemoveFromEventList>
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d001      	beq.n	800e8d2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e8ce:	f000 fe85 	bl	800f5dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e8d2:	7bbb      	ldrb	r3, [r7, #14]
 800e8d4:	3b01      	subs	r3, #1
 800e8d6:	b2db      	uxtb	r3, r3
 800e8d8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e8da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	dce9      	bgt.n	800e8b6 <prvUnlockQueue+0x60>
 800e8e2:	e000      	b.n	800e8e6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e8e4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	22ff      	movs	r2, #255	; 0xff
 800e8ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e8ee:	f001 fde1 	bl	80104b4 <vPortExitCritical>
}
 800e8f2:	bf00      	nop
 800e8f4:	3710      	adds	r7, #16
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}

0800e8fa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e8fa:	b580      	push	{r7, lr}
 800e8fc:	b084      	sub	sp, #16
 800e8fe:	af00      	add	r7, sp, #0
 800e900:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e902:	f001 fda7 	bl	8010454 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d102      	bne.n	800e914 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e90e:	2301      	movs	r3, #1
 800e910:	60fb      	str	r3, [r7, #12]
 800e912:	e001      	b.n	800e918 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e914:	2300      	movs	r3, #0
 800e916:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e918:	f001 fdcc 	bl	80104b4 <vPortExitCritical>

	return xReturn;
 800e91c:	68fb      	ldr	r3, [r7, #12]
}
 800e91e:	4618      	mov	r0, r3
 800e920:	3710      	adds	r7, #16
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}

0800e926 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e926:	b580      	push	{r7, lr}
 800e928:	b084      	sub	sp, #16
 800e92a:	af00      	add	r7, sp, #0
 800e92c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e92e:	f001 fd91 	bl	8010454 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e93a:	429a      	cmp	r2, r3
 800e93c:	d102      	bne.n	800e944 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e93e:	2301      	movs	r3, #1
 800e940:	60fb      	str	r3, [r7, #12]
 800e942:	e001      	b.n	800e948 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e944:	2300      	movs	r3, #0
 800e946:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e948:	f001 fdb4 	bl	80104b4 <vPortExitCritical>

	return xReturn;
 800e94c:	68fb      	ldr	r3, [r7, #12]
}
 800e94e:	4618      	mov	r0, r3
 800e950:	3710      	adds	r7, #16
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}
	...

0800e958 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e958:	b480      	push	{r7}
 800e95a:	b085      	sub	sp, #20
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
 800e960:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e962:	2300      	movs	r3, #0
 800e964:	60fb      	str	r3, [r7, #12]
 800e966:	e014      	b.n	800e992 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e968:	4a0f      	ldr	r2, [pc, #60]	; (800e9a8 <vQueueAddToRegistry+0x50>)
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d10b      	bne.n	800e98c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e974:	490c      	ldr	r1, [pc, #48]	; (800e9a8 <vQueueAddToRegistry+0x50>)
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	683a      	ldr	r2, [r7, #0]
 800e97a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e97e:	4a0a      	ldr	r2, [pc, #40]	; (800e9a8 <vQueueAddToRegistry+0x50>)
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	00db      	lsls	r3, r3, #3
 800e984:	4413      	add	r3, r2
 800e986:	687a      	ldr	r2, [r7, #4]
 800e988:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e98a:	e006      	b.n	800e99a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	3301      	adds	r3, #1
 800e990:	60fb      	str	r3, [r7, #12]
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	2b07      	cmp	r3, #7
 800e996:	d9e7      	bls.n	800e968 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e998:	bf00      	nop
 800e99a:	bf00      	nop
 800e99c:	3714      	adds	r7, #20
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a4:	4770      	bx	lr
 800e9a6:	bf00      	nop
 800e9a8:	20001cf4 	.word	0x20001cf4

0800e9ac <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800e9ac:	b480      	push	{r7}
 800e9ae:	b085      	sub	sp, #20
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	60fb      	str	r3, [r7, #12]
 800e9b8:	e016      	b.n	800e9e8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e9ba:	4a10      	ldr	r2, [pc, #64]	; (800e9fc <vQueueUnregisterQueue+0x50>)
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	00db      	lsls	r3, r3, #3
 800e9c0:	4413      	add	r3, r2
 800e9c2:	685b      	ldr	r3, [r3, #4]
 800e9c4:	687a      	ldr	r2, [r7, #4]
 800e9c6:	429a      	cmp	r2, r3
 800e9c8:	d10b      	bne.n	800e9e2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e9ca:	4a0c      	ldr	r2, [pc, #48]	; (800e9fc <vQueueUnregisterQueue+0x50>)
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	2100      	movs	r1, #0
 800e9d0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e9d4:	4a09      	ldr	r2, [pc, #36]	; (800e9fc <vQueueUnregisterQueue+0x50>)
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	00db      	lsls	r3, r3, #3
 800e9da:	4413      	add	r3, r2
 800e9dc:	2200      	movs	r2, #0
 800e9de:	605a      	str	r2, [r3, #4]
				break;
 800e9e0:	e006      	b.n	800e9f0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	3301      	adds	r3, #1
 800e9e6:	60fb      	str	r3, [r7, #12]
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	2b07      	cmp	r3, #7
 800e9ec:	d9e5      	bls.n	800e9ba <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e9ee:	bf00      	nop
 800e9f0:	bf00      	nop
 800e9f2:	3714      	adds	r7, #20
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fa:	4770      	bx	lr
 800e9fc:	20001cf4 	.word	0x20001cf4

0800ea00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b086      	sub	sp, #24
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	60f8      	str	r0, [r7, #12]
 800ea08:	60b9      	str	r1, [r7, #8]
 800ea0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ea10:	f001 fd20 	bl	8010454 <vPortEnterCritical>
 800ea14:	697b      	ldr	r3, [r7, #20]
 800ea16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ea1a:	b25b      	sxtb	r3, r3
 800ea1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea20:	d103      	bne.n	800ea2a <vQueueWaitForMessageRestricted+0x2a>
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	2200      	movs	r2, #0
 800ea26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ea2a:	697b      	ldr	r3, [r7, #20]
 800ea2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ea30:	b25b      	sxtb	r3, r3
 800ea32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea36:	d103      	bne.n	800ea40 <vQueueWaitForMessageRestricted+0x40>
 800ea38:	697b      	ldr	r3, [r7, #20]
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ea40:	f001 fd38 	bl	80104b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d106      	bne.n	800ea5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ea4c:	697b      	ldr	r3, [r7, #20]
 800ea4e:	3324      	adds	r3, #36	; 0x24
 800ea50:	687a      	ldr	r2, [r7, #4]
 800ea52:	68b9      	ldr	r1, [r7, #8]
 800ea54:	4618      	mov	r0, r3
 800ea56:	f000 fcb9 	bl	800f3cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ea5a:	6978      	ldr	r0, [r7, #20]
 800ea5c:	f7ff fefb 	bl	800e856 <prvUnlockQueue>
	}
 800ea60:	bf00      	nop
 800ea62:	3718      	adds	r7, #24
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}

0800ea68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b08e      	sub	sp, #56	; 0x38
 800ea6c:	af04      	add	r7, sp, #16
 800ea6e:	60f8      	str	r0, [r7, #12]
 800ea70:	60b9      	str	r1, [r7, #8]
 800ea72:	607a      	str	r2, [r7, #4]
 800ea74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ea76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d10a      	bne.n	800ea92 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ea7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea80:	f383 8811 	msr	BASEPRI, r3
 800ea84:	f3bf 8f6f 	isb	sy
 800ea88:	f3bf 8f4f 	dsb	sy
 800ea8c:	623b      	str	r3, [r7, #32]
}
 800ea8e:	bf00      	nop
 800ea90:	e7fe      	b.n	800ea90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ea92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d10a      	bne.n	800eaae <xTaskCreateStatic+0x46>
	__asm volatile
 800ea98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea9c:	f383 8811 	msr	BASEPRI, r3
 800eaa0:	f3bf 8f6f 	isb	sy
 800eaa4:	f3bf 8f4f 	dsb	sy
 800eaa8:	61fb      	str	r3, [r7, #28]
}
 800eaaa:	bf00      	nop
 800eaac:	e7fe      	b.n	800eaac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800eaae:	235c      	movs	r3, #92	; 0x5c
 800eab0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800eab2:	693b      	ldr	r3, [r7, #16]
 800eab4:	2b5c      	cmp	r3, #92	; 0x5c
 800eab6:	d00a      	beq.n	800eace <xTaskCreateStatic+0x66>
	__asm volatile
 800eab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eabc:	f383 8811 	msr	BASEPRI, r3
 800eac0:	f3bf 8f6f 	isb	sy
 800eac4:	f3bf 8f4f 	dsb	sy
 800eac8:	61bb      	str	r3, [r7, #24]
}
 800eaca:	bf00      	nop
 800eacc:	e7fe      	b.n	800eacc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800eace:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ead0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d01e      	beq.n	800eb14 <xTaskCreateStatic+0xac>
 800ead6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d01b      	beq.n	800eb14 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800eadc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eade:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800eae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eae4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800eae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae8:	2202      	movs	r2, #2
 800eaea:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800eaee:	2300      	movs	r3, #0
 800eaf0:	9303      	str	r3, [sp, #12]
 800eaf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf4:	9302      	str	r3, [sp, #8]
 800eaf6:	f107 0314 	add.w	r3, r7, #20
 800eafa:	9301      	str	r3, [sp, #4]
 800eafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eafe:	9300      	str	r3, [sp, #0]
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	687a      	ldr	r2, [r7, #4]
 800eb04:	68b9      	ldr	r1, [r7, #8]
 800eb06:	68f8      	ldr	r0, [r7, #12]
 800eb08:	f000 f850 	bl	800ebac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800eb0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb0e:	f000 f8dd 	bl	800eccc <prvAddNewTaskToReadyList>
 800eb12:	e001      	b.n	800eb18 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800eb14:	2300      	movs	r3, #0
 800eb16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800eb18:	697b      	ldr	r3, [r7, #20]
	}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	3728      	adds	r7, #40	; 0x28
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}

0800eb22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800eb22:	b580      	push	{r7, lr}
 800eb24:	b08c      	sub	sp, #48	; 0x30
 800eb26:	af04      	add	r7, sp, #16
 800eb28:	60f8      	str	r0, [r7, #12]
 800eb2a:	60b9      	str	r1, [r7, #8]
 800eb2c:	603b      	str	r3, [r7, #0]
 800eb2e:	4613      	mov	r3, r2
 800eb30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800eb32:	88fb      	ldrh	r3, [r7, #6]
 800eb34:	009b      	lsls	r3, r3, #2
 800eb36:	4618      	mov	r0, r3
 800eb38:	f001 fdae 	bl	8010698 <pvPortMalloc>
 800eb3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800eb3e:	697b      	ldr	r3, [r7, #20]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d00e      	beq.n	800eb62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800eb44:	205c      	movs	r0, #92	; 0x5c
 800eb46:	f001 fda7 	bl	8010698 <pvPortMalloc>
 800eb4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800eb4c:	69fb      	ldr	r3, [r7, #28]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d003      	beq.n	800eb5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800eb52:	69fb      	ldr	r3, [r7, #28]
 800eb54:	697a      	ldr	r2, [r7, #20]
 800eb56:	631a      	str	r2, [r3, #48]	; 0x30
 800eb58:	e005      	b.n	800eb66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800eb5a:	6978      	ldr	r0, [r7, #20]
 800eb5c:	f001 fe68 	bl	8010830 <vPortFree>
 800eb60:	e001      	b.n	800eb66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800eb62:	2300      	movs	r3, #0
 800eb64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800eb66:	69fb      	ldr	r3, [r7, #28]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d017      	beq.n	800eb9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800eb6c:	69fb      	ldr	r3, [r7, #28]
 800eb6e:	2200      	movs	r2, #0
 800eb70:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800eb74:	88fa      	ldrh	r2, [r7, #6]
 800eb76:	2300      	movs	r3, #0
 800eb78:	9303      	str	r3, [sp, #12]
 800eb7a:	69fb      	ldr	r3, [r7, #28]
 800eb7c:	9302      	str	r3, [sp, #8]
 800eb7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb80:	9301      	str	r3, [sp, #4]
 800eb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb84:	9300      	str	r3, [sp, #0]
 800eb86:	683b      	ldr	r3, [r7, #0]
 800eb88:	68b9      	ldr	r1, [r7, #8]
 800eb8a:	68f8      	ldr	r0, [r7, #12]
 800eb8c:	f000 f80e 	bl	800ebac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800eb90:	69f8      	ldr	r0, [r7, #28]
 800eb92:	f000 f89b 	bl	800eccc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800eb96:	2301      	movs	r3, #1
 800eb98:	61bb      	str	r3, [r7, #24]
 800eb9a:	e002      	b.n	800eba2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800eb9c:	f04f 33ff 	mov.w	r3, #4294967295
 800eba0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800eba2:	69bb      	ldr	r3, [r7, #24]
	}
 800eba4:	4618      	mov	r0, r3
 800eba6:	3720      	adds	r7, #32
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bd80      	pop	{r7, pc}

0800ebac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b088      	sub	sp, #32
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	60f8      	str	r0, [r7, #12]
 800ebb4:	60b9      	str	r1, [r7, #8]
 800ebb6:	607a      	str	r2, [r7, #4]
 800ebb8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ebba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebbc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	009b      	lsls	r3, r3, #2
 800ebc2:	461a      	mov	r2, r3
 800ebc4:	21a5      	movs	r1, #165	; 0xa5
 800ebc6:	f001 ffd7 	bl	8010b78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ebca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ebd4:	3b01      	subs	r3, #1
 800ebd6:	009b      	lsls	r3, r3, #2
 800ebd8:	4413      	add	r3, r2
 800ebda:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ebdc:	69bb      	ldr	r3, [r7, #24]
 800ebde:	f023 0307 	bic.w	r3, r3, #7
 800ebe2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ebe4:	69bb      	ldr	r3, [r7, #24]
 800ebe6:	f003 0307 	and.w	r3, r3, #7
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d00a      	beq.n	800ec04 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ebee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebf2:	f383 8811 	msr	BASEPRI, r3
 800ebf6:	f3bf 8f6f 	isb	sy
 800ebfa:	f3bf 8f4f 	dsb	sy
 800ebfe:	617b      	str	r3, [r7, #20]
}
 800ec00:	bf00      	nop
 800ec02:	e7fe      	b.n	800ec02 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ec04:	68bb      	ldr	r3, [r7, #8]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d01f      	beq.n	800ec4a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	61fb      	str	r3, [r7, #28]
 800ec0e:	e012      	b.n	800ec36 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ec10:	68ba      	ldr	r2, [r7, #8]
 800ec12:	69fb      	ldr	r3, [r7, #28]
 800ec14:	4413      	add	r3, r2
 800ec16:	7819      	ldrb	r1, [r3, #0]
 800ec18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec1a:	69fb      	ldr	r3, [r7, #28]
 800ec1c:	4413      	add	r3, r2
 800ec1e:	3334      	adds	r3, #52	; 0x34
 800ec20:	460a      	mov	r2, r1
 800ec22:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ec24:	68ba      	ldr	r2, [r7, #8]
 800ec26:	69fb      	ldr	r3, [r7, #28]
 800ec28:	4413      	add	r3, r2
 800ec2a:	781b      	ldrb	r3, [r3, #0]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d006      	beq.n	800ec3e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ec30:	69fb      	ldr	r3, [r7, #28]
 800ec32:	3301      	adds	r3, #1
 800ec34:	61fb      	str	r3, [r7, #28]
 800ec36:	69fb      	ldr	r3, [r7, #28]
 800ec38:	2b0f      	cmp	r3, #15
 800ec3a:	d9e9      	bls.n	800ec10 <prvInitialiseNewTask+0x64>
 800ec3c:	e000      	b.n	800ec40 <prvInitialiseNewTask+0x94>
			{
				break;
 800ec3e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ec40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec42:	2200      	movs	r2, #0
 800ec44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ec48:	e003      	b.n	800ec52 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ec4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ec52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec54:	2b37      	cmp	r3, #55	; 0x37
 800ec56:	d901      	bls.n	800ec5c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ec58:	2337      	movs	r3, #55	; 0x37
 800ec5a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ec5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec60:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ec62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec66:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ec68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ec6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec70:	3304      	adds	r3, #4
 800ec72:	4618      	mov	r0, r3
 800ec74:	f7fe fe56 	bl	800d924 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ec78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec7a:	3318      	adds	r3, #24
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f7fe fe51 	bl	800d924 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ec82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec86:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec8a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ec8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec90:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ec92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec96:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ec98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ec9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eca0:	2200      	movs	r2, #0
 800eca2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800eca6:	683a      	ldr	r2, [r7, #0]
 800eca8:	68f9      	ldr	r1, [r7, #12]
 800ecaa:	69b8      	ldr	r0, [r7, #24]
 800ecac:	f001 faa4 	bl	80101f8 <pxPortInitialiseStack>
 800ecb0:	4602      	mov	r2, r0
 800ecb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecb4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ecb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d002      	beq.n	800ecc2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ecbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ecc2:	bf00      	nop
 800ecc4:	3720      	adds	r7, #32
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}
	...

0800eccc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b082      	sub	sp, #8
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ecd4:	f001 fbbe 	bl	8010454 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ecd8:	4b2d      	ldr	r3, [pc, #180]	; (800ed90 <prvAddNewTaskToReadyList+0xc4>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	3301      	adds	r3, #1
 800ecde:	4a2c      	ldr	r2, [pc, #176]	; (800ed90 <prvAddNewTaskToReadyList+0xc4>)
 800ece0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ece2:	4b2c      	ldr	r3, [pc, #176]	; (800ed94 <prvAddNewTaskToReadyList+0xc8>)
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d109      	bne.n	800ecfe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ecea:	4a2a      	ldr	r2, [pc, #168]	; (800ed94 <prvAddNewTaskToReadyList+0xc8>)
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ecf0:	4b27      	ldr	r3, [pc, #156]	; (800ed90 <prvAddNewTaskToReadyList+0xc4>)
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	2b01      	cmp	r3, #1
 800ecf6:	d110      	bne.n	800ed1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ecf8:	f000 fc94 	bl	800f624 <prvInitialiseTaskLists>
 800ecfc:	e00d      	b.n	800ed1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ecfe:	4b26      	ldr	r3, [pc, #152]	; (800ed98 <prvAddNewTaskToReadyList+0xcc>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d109      	bne.n	800ed1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ed06:	4b23      	ldr	r3, [pc, #140]	; (800ed94 <prvAddNewTaskToReadyList+0xc8>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d802      	bhi.n	800ed1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ed14:	4a1f      	ldr	r2, [pc, #124]	; (800ed94 <prvAddNewTaskToReadyList+0xc8>)
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ed1a:	4b20      	ldr	r3, [pc, #128]	; (800ed9c <prvAddNewTaskToReadyList+0xd0>)
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	3301      	adds	r3, #1
 800ed20:	4a1e      	ldr	r2, [pc, #120]	; (800ed9c <prvAddNewTaskToReadyList+0xd0>)
 800ed22:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ed24:	4b1d      	ldr	r3, [pc, #116]	; (800ed9c <prvAddNewTaskToReadyList+0xd0>)
 800ed26:	681a      	ldr	r2, [r3, #0]
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed30:	4b1b      	ldr	r3, [pc, #108]	; (800eda0 <prvAddNewTaskToReadyList+0xd4>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d903      	bls.n	800ed40 <prvAddNewTaskToReadyList+0x74>
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed3c:	4a18      	ldr	r2, [pc, #96]	; (800eda0 <prvAddNewTaskToReadyList+0xd4>)
 800ed3e:	6013      	str	r3, [r2, #0]
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed44:	4613      	mov	r3, r2
 800ed46:	009b      	lsls	r3, r3, #2
 800ed48:	4413      	add	r3, r2
 800ed4a:	009b      	lsls	r3, r3, #2
 800ed4c:	4a15      	ldr	r2, [pc, #84]	; (800eda4 <prvAddNewTaskToReadyList+0xd8>)
 800ed4e:	441a      	add	r2, r3
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	3304      	adds	r3, #4
 800ed54:	4619      	mov	r1, r3
 800ed56:	4610      	mov	r0, r2
 800ed58:	f7fe fdf1 	bl	800d93e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ed5c:	f001 fbaa 	bl	80104b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ed60:	4b0d      	ldr	r3, [pc, #52]	; (800ed98 <prvAddNewTaskToReadyList+0xcc>)
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d00e      	beq.n	800ed86 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ed68:	4b0a      	ldr	r3, [pc, #40]	; (800ed94 <prvAddNewTaskToReadyList+0xc8>)
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed72:	429a      	cmp	r2, r3
 800ed74:	d207      	bcs.n	800ed86 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ed76:	4b0c      	ldr	r3, [pc, #48]	; (800eda8 <prvAddNewTaskToReadyList+0xdc>)
 800ed78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed7c:	601a      	str	r2, [r3, #0]
 800ed7e:	f3bf 8f4f 	dsb	sy
 800ed82:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ed86:	bf00      	nop
 800ed88:	3708      	adds	r7, #8
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	bd80      	pop	{r7, pc}
 800ed8e:	bf00      	nop
 800ed90:	20002208 	.word	0x20002208
 800ed94:	20001d34 	.word	0x20001d34
 800ed98:	20002214 	.word	0x20002214
 800ed9c:	20002224 	.word	0x20002224
 800eda0:	20002210 	.word	0x20002210
 800eda4:	20001d38 	.word	0x20001d38
 800eda8:	e000ed04 	.word	0xe000ed04

0800edac <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800edac:	b580      	push	{r7, lr}
 800edae:	b08a      	sub	sp, #40	; 0x28
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
 800edb4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800edb6:	2300      	movs	r3, #0
 800edb8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d10a      	bne.n	800edd6 <vTaskDelayUntil+0x2a>
	__asm volatile
 800edc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edc4:	f383 8811 	msr	BASEPRI, r3
 800edc8:	f3bf 8f6f 	isb	sy
 800edcc:	f3bf 8f4f 	dsb	sy
 800edd0:	617b      	str	r3, [r7, #20]
}
 800edd2:	bf00      	nop
 800edd4:	e7fe      	b.n	800edd4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d10a      	bne.n	800edf2 <vTaskDelayUntil+0x46>
	__asm volatile
 800eddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ede0:	f383 8811 	msr	BASEPRI, r3
 800ede4:	f3bf 8f6f 	isb	sy
 800ede8:	f3bf 8f4f 	dsb	sy
 800edec:	613b      	str	r3, [r7, #16]
}
 800edee:	bf00      	nop
 800edf0:	e7fe      	b.n	800edf0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800edf2:	4b2a      	ldr	r3, [pc, #168]	; (800ee9c <vTaskDelayUntil+0xf0>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d00a      	beq.n	800ee10 <vTaskDelayUntil+0x64>
	__asm volatile
 800edfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edfe:	f383 8811 	msr	BASEPRI, r3
 800ee02:	f3bf 8f6f 	isb	sy
 800ee06:	f3bf 8f4f 	dsb	sy
 800ee0a:	60fb      	str	r3, [r7, #12]
}
 800ee0c:	bf00      	nop
 800ee0e:	e7fe      	b.n	800ee0e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800ee10:	f000 f8e4 	bl	800efdc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800ee14:	4b22      	ldr	r3, [pc, #136]	; (800eea0 <vTaskDelayUntil+0xf4>)
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	683a      	ldr	r2, [r7, #0]
 800ee20:	4413      	add	r3, r2
 800ee22:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	6a3a      	ldr	r2, [r7, #32]
 800ee2a:	429a      	cmp	r2, r3
 800ee2c:	d20b      	bcs.n	800ee46 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	69fa      	ldr	r2, [r7, #28]
 800ee34:	429a      	cmp	r2, r3
 800ee36:	d211      	bcs.n	800ee5c <vTaskDelayUntil+0xb0>
 800ee38:	69fa      	ldr	r2, [r7, #28]
 800ee3a:	6a3b      	ldr	r3, [r7, #32]
 800ee3c:	429a      	cmp	r2, r3
 800ee3e:	d90d      	bls.n	800ee5c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800ee40:	2301      	movs	r3, #1
 800ee42:	627b      	str	r3, [r7, #36]	; 0x24
 800ee44:	e00a      	b.n	800ee5c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	69fa      	ldr	r2, [r7, #28]
 800ee4c:	429a      	cmp	r2, r3
 800ee4e:	d303      	bcc.n	800ee58 <vTaskDelayUntil+0xac>
 800ee50:	69fa      	ldr	r2, [r7, #28]
 800ee52:	6a3b      	ldr	r3, [r7, #32]
 800ee54:	429a      	cmp	r2, r3
 800ee56:	d901      	bls.n	800ee5c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800ee58:	2301      	movs	r3, #1
 800ee5a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	69fa      	ldr	r2, [r7, #28]
 800ee60:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800ee62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d006      	beq.n	800ee76 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800ee68:	69fa      	ldr	r2, [r7, #28]
 800ee6a:	6a3b      	ldr	r3, [r7, #32]
 800ee6c:	1ad3      	subs	r3, r2, r3
 800ee6e:	2100      	movs	r1, #0
 800ee70:	4618      	mov	r0, r3
 800ee72:	f000 fe1f 	bl	800fab4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800ee76:	f000 f8bf 	bl	800eff8 <xTaskResumeAll>
 800ee7a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ee7c:	69bb      	ldr	r3, [r7, #24]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d107      	bne.n	800ee92 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800ee82:	4b08      	ldr	r3, [pc, #32]	; (800eea4 <vTaskDelayUntil+0xf8>)
 800ee84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee88:	601a      	str	r2, [r3, #0]
 800ee8a:	f3bf 8f4f 	dsb	sy
 800ee8e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ee92:	bf00      	nop
 800ee94:	3728      	adds	r7, #40	; 0x28
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}
 800ee9a:	bf00      	nop
 800ee9c:	20002230 	.word	0x20002230
 800eea0:	2000220c 	.word	0x2000220c
 800eea4:	e000ed04 	.word	0xe000ed04

0800eea8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b084      	sub	sp, #16
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d017      	beq.n	800eeea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800eeba:	4b13      	ldr	r3, [pc, #76]	; (800ef08 <vTaskDelay+0x60>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d00a      	beq.n	800eed8 <vTaskDelay+0x30>
	__asm volatile
 800eec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eec6:	f383 8811 	msr	BASEPRI, r3
 800eeca:	f3bf 8f6f 	isb	sy
 800eece:	f3bf 8f4f 	dsb	sy
 800eed2:	60bb      	str	r3, [r7, #8]
}
 800eed4:	bf00      	nop
 800eed6:	e7fe      	b.n	800eed6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800eed8:	f000 f880 	bl	800efdc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800eedc:	2100      	movs	r1, #0
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	f000 fde8 	bl	800fab4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800eee4:	f000 f888 	bl	800eff8 <xTaskResumeAll>
 800eee8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d107      	bne.n	800ef00 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800eef0:	4b06      	ldr	r3, [pc, #24]	; (800ef0c <vTaskDelay+0x64>)
 800eef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eef6:	601a      	str	r2, [r3, #0]
 800eef8:	f3bf 8f4f 	dsb	sy
 800eefc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ef00:	bf00      	nop
 800ef02:	3710      	adds	r7, #16
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}
 800ef08:	20002230 	.word	0x20002230
 800ef0c:	e000ed04 	.word	0xe000ed04

0800ef10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b08a      	sub	sp, #40	; 0x28
 800ef14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ef16:	2300      	movs	r3, #0
 800ef18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ef1e:	463a      	mov	r2, r7
 800ef20:	1d39      	adds	r1, r7, #4
 800ef22:	f107 0308 	add.w	r3, r7, #8
 800ef26:	4618      	mov	r0, r3
 800ef28:	f7fe fca8 	bl	800d87c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ef2c:	6839      	ldr	r1, [r7, #0]
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	68ba      	ldr	r2, [r7, #8]
 800ef32:	9202      	str	r2, [sp, #8]
 800ef34:	9301      	str	r3, [sp, #4]
 800ef36:	2300      	movs	r3, #0
 800ef38:	9300      	str	r3, [sp, #0]
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	460a      	mov	r2, r1
 800ef3e:	4921      	ldr	r1, [pc, #132]	; (800efc4 <vTaskStartScheduler+0xb4>)
 800ef40:	4821      	ldr	r0, [pc, #132]	; (800efc8 <vTaskStartScheduler+0xb8>)
 800ef42:	f7ff fd91 	bl	800ea68 <xTaskCreateStatic>
 800ef46:	4603      	mov	r3, r0
 800ef48:	4a20      	ldr	r2, [pc, #128]	; (800efcc <vTaskStartScheduler+0xbc>)
 800ef4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ef4c:	4b1f      	ldr	r3, [pc, #124]	; (800efcc <vTaskStartScheduler+0xbc>)
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d002      	beq.n	800ef5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ef54:	2301      	movs	r3, #1
 800ef56:	617b      	str	r3, [r7, #20]
 800ef58:	e001      	b.n	800ef5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ef5e:	697b      	ldr	r3, [r7, #20]
 800ef60:	2b01      	cmp	r3, #1
 800ef62:	d102      	bne.n	800ef6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ef64:	f000 fdfa 	bl	800fb5c <xTimerCreateTimerTask>
 800ef68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ef6a:	697b      	ldr	r3, [r7, #20]
 800ef6c:	2b01      	cmp	r3, #1
 800ef6e:	d116      	bne.n	800ef9e <vTaskStartScheduler+0x8e>
	__asm volatile
 800ef70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef74:	f383 8811 	msr	BASEPRI, r3
 800ef78:	f3bf 8f6f 	isb	sy
 800ef7c:	f3bf 8f4f 	dsb	sy
 800ef80:	613b      	str	r3, [r7, #16]
}
 800ef82:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ef84:	4b12      	ldr	r3, [pc, #72]	; (800efd0 <vTaskStartScheduler+0xc0>)
 800ef86:	f04f 32ff 	mov.w	r2, #4294967295
 800ef8a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ef8c:	4b11      	ldr	r3, [pc, #68]	; (800efd4 <vTaskStartScheduler+0xc4>)
 800ef8e:	2201      	movs	r2, #1
 800ef90:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ef92:	4b11      	ldr	r3, [pc, #68]	; (800efd8 <vTaskStartScheduler+0xc8>)
 800ef94:	2200      	movs	r2, #0
 800ef96:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ef98:	f001 f9ba 	bl	8010310 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ef9c:	e00e      	b.n	800efbc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ef9e:	697b      	ldr	r3, [r7, #20]
 800efa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efa4:	d10a      	bne.n	800efbc <vTaskStartScheduler+0xac>
	__asm volatile
 800efa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efaa:	f383 8811 	msr	BASEPRI, r3
 800efae:	f3bf 8f6f 	isb	sy
 800efb2:	f3bf 8f4f 	dsb	sy
 800efb6:	60fb      	str	r3, [r7, #12]
}
 800efb8:	bf00      	nop
 800efba:	e7fe      	b.n	800efba <vTaskStartScheduler+0xaa>
}
 800efbc:	bf00      	nop
 800efbe:	3718      	adds	r7, #24
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}
 800efc4:	08014950 	.word	0x08014950
 800efc8:	0800f5f5 	.word	0x0800f5f5
 800efcc:	2000222c 	.word	0x2000222c
 800efd0:	20002228 	.word	0x20002228
 800efd4:	20002214 	.word	0x20002214
 800efd8:	2000220c 	.word	0x2000220c

0800efdc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800efdc:	b480      	push	{r7}
 800efde:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800efe0:	4b04      	ldr	r3, [pc, #16]	; (800eff4 <vTaskSuspendAll+0x18>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	3301      	adds	r3, #1
 800efe6:	4a03      	ldr	r2, [pc, #12]	; (800eff4 <vTaskSuspendAll+0x18>)
 800efe8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800efea:	bf00      	nop
 800efec:	46bd      	mov	sp, r7
 800efee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff2:	4770      	bx	lr
 800eff4:	20002230 	.word	0x20002230

0800eff8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b084      	sub	sp, #16
 800effc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800effe:	2300      	movs	r3, #0
 800f000:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f002:	2300      	movs	r3, #0
 800f004:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f006:	4b42      	ldr	r3, [pc, #264]	; (800f110 <xTaskResumeAll+0x118>)
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d10a      	bne.n	800f024 <xTaskResumeAll+0x2c>
	__asm volatile
 800f00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f012:	f383 8811 	msr	BASEPRI, r3
 800f016:	f3bf 8f6f 	isb	sy
 800f01a:	f3bf 8f4f 	dsb	sy
 800f01e:	603b      	str	r3, [r7, #0]
}
 800f020:	bf00      	nop
 800f022:	e7fe      	b.n	800f022 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f024:	f001 fa16 	bl	8010454 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f028:	4b39      	ldr	r3, [pc, #228]	; (800f110 <xTaskResumeAll+0x118>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	3b01      	subs	r3, #1
 800f02e:	4a38      	ldr	r2, [pc, #224]	; (800f110 <xTaskResumeAll+0x118>)
 800f030:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f032:	4b37      	ldr	r3, [pc, #220]	; (800f110 <xTaskResumeAll+0x118>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d162      	bne.n	800f100 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f03a:	4b36      	ldr	r3, [pc, #216]	; (800f114 <xTaskResumeAll+0x11c>)
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d05e      	beq.n	800f100 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f042:	e02f      	b.n	800f0a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f044:	4b34      	ldr	r3, [pc, #208]	; (800f118 <xTaskResumeAll+0x120>)
 800f046:	68db      	ldr	r3, [r3, #12]
 800f048:	68db      	ldr	r3, [r3, #12]
 800f04a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	3318      	adds	r3, #24
 800f050:	4618      	mov	r0, r3
 800f052:	f7fe fcd1 	bl	800d9f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	3304      	adds	r3, #4
 800f05a:	4618      	mov	r0, r3
 800f05c:	f7fe fccc 	bl	800d9f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f064:	4b2d      	ldr	r3, [pc, #180]	; (800f11c <xTaskResumeAll+0x124>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	429a      	cmp	r2, r3
 800f06a:	d903      	bls.n	800f074 <xTaskResumeAll+0x7c>
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f070:	4a2a      	ldr	r2, [pc, #168]	; (800f11c <xTaskResumeAll+0x124>)
 800f072:	6013      	str	r3, [r2, #0]
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f078:	4613      	mov	r3, r2
 800f07a:	009b      	lsls	r3, r3, #2
 800f07c:	4413      	add	r3, r2
 800f07e:	009b      	lsls	r3, r3, #2
 800f080:	4a27      	ldr	r2, [pc, #156]	; (800f120 <xTaskResumeAll+0x128>)
 800f082:	441a      	add	r2, r3
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	3304      	adds	r3, #4
 800f088:	4619      	mov	r1, r3
 800f08a:	4610      	mov	r0, r2
 800f08c:	f7fe fc57 	bl	800d93e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f094:	4b23      	ldr	r3, [pc, #140]	; (800f124 <xTaskResumeAll+0x12c>)
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f09a:	429a      	cmp	r2, r3
 800f09c:	d302      	bcc.n	800f0a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f09e:	4b22      	ldr	r3, [pc, #136]	; (800f128 <xTaskResumeAll+0x130>)
 800f0a0:	2201      	movs	r2, #1
 800f0a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f0a4:	4b1c      	ldr	r3, [pc, #112]	; (800f118 <xTaskResumeAll+0x120>)
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d1cb      	bne.n	800f044 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d001      	beq.n	800f0b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f0b2:	f000 fb55 	bl	800f760 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f0b6:	4b1d      	ldr	r3, [pc, #116]	; (800f12c <xTaskResumeAll+0x134>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d010      	beq.n	800f0e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f0c2:	f000 f847 	bl	800f154 <xTaskIncrementTick>
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d002      	beq.n	800f0d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f0cc:	4b16      	ldr	r3, [pc, #88]	; (800f128 <xTaskResumeAll+0x130>)
 800f0ce:	2201      	movs	r2, #1
 800f0d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	3b01      	subs	r3, #1
 800f0d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d1f1      	bne.n	800f0c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f0de:	4b13      	ldr	r3, [pc, #76]	; (800f12c <xTaskResumeAll+0x134>)
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f0e4:	4b10      	ldr	r3, [pc, #64]	; (800f128 <xTaskResumeAll+0x130>)
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d009      	beq.n	800f100 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f0ec:	2301      	movs	r3, #1
 800f0ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f0f0:	4b0f      	ldr	r3, [pc, #60]	; (800f130 <xTaskResumeAll+0x138>)
 800f0f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0f6:	601a      	str	r2, [r3, #0]
 800f0f8:	f3bf 8f4f 	dsb	sy
 800f0fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f100:	f001 f9d8 	bl	80104b4 <vPortExitCritical>

	return xAlreadyYielded;
 800f104:	68bb      	ldr	r3, [r7, #8]
}
 800f106:	4618      	mov	r0, r3
 800f108:	3710      	adds	r7, #16
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bd80      	pop	{r7, pc}
 800f10e:	bf00      	nop
 800f110:	20002230 	.word	0x20002230
 800f114:	20002208 	.word	0x20002208
 800f118:	200021c8 	.word	0x200021c8
 800f11c:	20002210 	.word	0x20002210
 800f120:	20001d38 	.word	0x20001d38
 800f124:	20001d34 	.word	0x20001d34
 800f128:	2000221c 	.word	0x2000221c
 800f12c:	20002218 	.word	0x20002218
 800f130:	e000ed04 	.word	0xe000ed04

0800f134 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f134:	b480      	push	{r7}
 800f136:	b083      	sub	sp, #12
 800f138:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f13a:	4b05      	ldr	r3, [pc, #20]	; (800f150 <xTaskGetTickCount+0x1c>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f140:	687b      	ldr	r3, [r7, #4]
}
 800f142:	4618      	mov	r0, r3
 800f144:	370c      	adds	r7, #12
 800f146:	46bd      	mov	sp, r7
 800f148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14c:	4770      	bx	lr
 800f14e:	bf00      	nop
 800f150:	2000220c 	.word	0x2000220c

0800f154 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b086      	sub	sp, #24
 800f158:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f15a:	2300      	movs	r3, #0
 800f15c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f15e:	4b4f      	ldr	r3, [pc, #316]	; (800f29c <xTaskIncrementTick+0x148>)
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	2b00      	cmp	r3, #0
 800f164:	f040 808f 	bne.w	800f286 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f168:	4b4d      	ldr	r3, [pc, #308]	; (800f2a0 <xTaskIncrementTick+0x14c>)
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	3301      	adds	r3, #1
 800f16e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f170:	4a4b      	ldr	r2, [pc, #300]	; (800f2a0 <xTaskIncrementTick+0x14c>)
 800f172:	693b      	ldr	r3, [r7, #16]
 800f174:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f176:	693b      	ldr	r3, [r7, #16]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d120      	bne.n	800f1be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f17c:	4b49      	ldr	r3, [pc, #292]	; (800f2a4 <xTaskIncrementTick+0x150>)
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d00a      	beq.n	800f19c <xTaskIncrementTick+0x48>
	__asm volatile
 800f186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f18a:	f383 8811 	msr	BASEPRI, r3
 800f18e:	f3bf 8f6f 	isb	sy
 800f192:	f3bf 8f4f 	dsb	sy
 800f196:	603b      	str	r3, [r7, #0]
}
 800f198:	bf00      	nop
 800f19a:	e7fe      	b.n	800f19a <xTaskIncrementTick+0x46>
 800f19c:	4b41      	ldr	r3, [pc, #260]	; (800f2a4 <xTaskIncrementTick+0x150>)
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	60fb      	str	r3, [r7, #12]
 800f1a2:	4b41      	ldr	r3, [pc, #260]	; (800f2a8 <xTaskIncrementTick+0x154>)
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	4a3f      	ldr	r2, [pc, #252]	; (800f2a4 <xTaskIncrementTick+0x150>)
 800f1a8:	6013      	str	r3, [r2, #0]
 800f1aa:	4a3f      	ldr	r2, [pc, #252]	; (800f2a8 <xTaskIncrementTick+0x154>)
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	6013      	str	r3, [r2, #0]
 800f1b0:	4b3e      	ldr	r3, [pc, #248]	; (800f2ac <xTaskIncrementTick+0x158>)
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	3301      	adds	r3, #1
 800f1b6:	4a3d      	ldr	r2, [pc, #244]	; (800f2ac <xTaskIncrementTick+0x158>)
 800f1b8:	6013      	str	r3, [r2, #0]
 800f1ba:	f000 fad1 	bl	800f760 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f1be:	4b3c      	ldr	r3, [pc, #240]	; (800f2b0 <xTaskIncrementTick+0x15c>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	693a      	ldr	r2, [r7, #16]
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	d349      	bcc.n	800f25c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f1c8:	4b36      	ldr	r3, [pc, #216]	; (800f2a4 <xTaskIncrementTick+0x150>)
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d104      	bne.n	800f1dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1d2:	4b37      	ldr	r3, [pc, #220]	; (800f2b0 <xTaskIncrementTick+0x15c>)
 800f1d4:	f04f 32ff 	mov.w	r2, #4294967295
 800f1d8:	601a      	str	r2, [r3, #0]
					break;
 800f1da:	e03f      	b.n	800f25c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1dc:	4b31      	ldr	r3, [pc, #196]	; (800f2a4 <xTaskIncrementTick+0x150>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	68db      	ldr	r3, [r3, #12]
 800f1e2:	68db      	ldr	r3, [r3, #12]
 800f1e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	685b      	ldr	r3, [r3, #4]
 800f1ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f1ec:	693a      	ldr	r2, [r7, #16]
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	d203      	bcs.n	800f1fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f1f4:	4a2e      	ldr	r2, [pc, #184]	; (800f2b0 <xTaskIncrementTick+0x15c>)
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f1fa:	e02f      	b.n	800f25c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f1fc:	68bb      	ldr	r3, [r7, #8]
 800f1fe:	3304      	adds	r3, #4
 800f200:	4618      	mov	r0, r3
 800f202:	f7fe fbf9 	bl	800d9f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d004      	beq.n	800f218 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f20e:	68bb      	ldr	r3, [r7, #8]
 800f210:	3318      	adds	r3, #24
 800f212:	4618      	mov	r0, r3
 800f214:	f7fe fbf0 	bl	800d9f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f218:	68bb      	ldr	r3, [r7, #8]
 800f21a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f21c:	4b25      	ldr	r3, [pc, #148]	; (800f2b4 <xTaskIncrementTick+0x160>)
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	429a      	cmp	r2, r3
 800f222:	d903      	bls.n	800f22c <xTaskIncrementTick+0xd8>
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f228:	4a22      	ldr	r2, [pc, #136]	; (800f2b4 <xTaskIncrementTick+0x160>)
 800f22a:	6013      	str	r3, [r2, #0]
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f230:	4613      	mov	r3, r2
 800f232:	009b      	lsls	r3, r3, #2
 800f234:	4413      	add	r3, r2
 800f236:	009b      	lsls	r3, r3, #2
 800f238:	4a1f      	ldr	r2, [pc, #124]	; (800f2b8 <xTaskIncrementTick+0x164>)
 800f23a:	441a      	add	r2, r3
 800f23c:	68bb      	ldr	r3, [r7, #8]
 800f23e:	3304      	adds	r3, #4
 800f240:	4619      	mov	r1, r3
 800f242:	4610      	mov	r0, r2
 800f244:	f7fe fb7b 	bl	800d93e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f248:	68bb      	ldr	r3, [r7, #8]
 800f24a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f24c:	4b1b      	ldr	r3, [pc, #108]	; (800f2bc <xTaskIncrementTick+0x168>)
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f252:	429a      	cmp	r2, r3
 800f254:	d3b8      	bcc.n	800f1c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f256:	2301      	movs	r3, #1
 800f258:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f25a:	e7b5      	b.n	800f1c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f25c:	4b17      	ldr	r3, [pc, #92]	; (800f2bc <xTaskIncrementTick+0x168>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f262:	4915      	ldr	r1, [pc, #84]	; (800f2b8 <xTaskIncrementTick+0x164>)
 800f264:	4613      	mov	r3, r2
 800f266:	009b      	lsls	r3, r3, #2
 800f268:	4413      	add	r3, r2
 800f26a:	009b      	lsls	r3, r3, #2
 800f26c:	440b      	add	r3, r1
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	2b01      	cmp	r3, #1
 800f272:	d901      	bls.n	800f278 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f274:	2301      	movs	r3, #1
 800f276:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f278:	4b11      	ldr	r3, [pc, #68]	; (800f2c0 <xTaskIncrementTick+0x16c>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d007      	beq.n	800f290 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f280:	2301      	movs	r3, #1
 800f282:	617b      	str	r3, [r7, #20]
 800f284:	e004      	b.n	800f290 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f286:	4b0f      	ldr	r3, [pc, #60]	; (800f2c4 <xTaskIncrementTick+0x170>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	3301      	adds	r3, #1
 800f28c:	4a0d      	ldr	r2, [pc, #52]	; (800f2c4 <xTaskIncrementTick+0x170>)
 800f28e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f290:	697b      	ldr	r3, [r7, #20]
}
 800f292:	4618      	mov	r0, r3
 800f294:	3718      	adds	r7, #24
 800f296:	46bd      	mov	sp, r7
 800f298:	bd80      	pop	{r7, pc}
 800f29a:	bf00      	nop
 800f29c:	20002230 	.word	0x20002230
 800f2a0:	2000220c 	.word	0x2000220c
 800f2a4:	200021c0 	.word	0x200021c0
 800f2a8:	200021c4 	.word	0x200021c4
 800f2ac:	20002220 	.word	0x20002220
 800f2b0:	20002228 	.word	0x20002228
 800f2b4:	20002210 	.word	0x20002210
 800f2b8:	20001d38 	.word	0x20001d38
 800f2bc:	20001d34 	.word	0x20001d34
 800f2c0:	2000221c 	.word	0x2000221c
 800f2c4:	20002218 	.word	0x20002218

0800f2c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	b085      	sub	sp, #20
 800f2cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f2ce:	4b28      	ldr	r3, [pc, #160]	; (800f370 <vTaskSwitchContext+0xa8>)
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d003      	beq.n	800f2de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f2d6:	4b27      	ldr	r3, [pc, #156]	; (800f374 <vTaskSwitchContext+0xac>)
 800f2d8:	2201      	movs	r2, #1
 800f2da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f2dc:	e041      	b.n	800f362 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800f2de:	4b25      	ldr	r3, [pc, #148]	; (800f374 <vTaskSwitchContext+0xac>)
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f2e4:	4b24      	ldr	r3, [pc, #144]	; (800f378 <vTaskSwitchContext+0xb0>)
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	60fb      	str	r3, [r7, #12]
 800f2ea:	e010      	b.n	800f30e <vTaskSwitchContext+0x46>
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d10a      	bne.n	800f308 <vTaskSwitchContext+0x40>
	__asm volatile
 800f2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2f6:	f383 8811 	msr	BASEPRI, r3
 800f2fa:	f3bf 8f6f 	isb	sy
 800f2fe:	f3bf 8f4f 	dsb	sy
 800f302:	607b      	str	r3, [r7, #4]
}
 800f304:	bf00      	nop
 800f306:	e7fe      	b.n	800f306 <vTaskSwitchContext+0x3e>
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	3b01      	subs	r3, #1
 800f30c:	60fb      	str	r3, [r7, #12]
 800f30e:	491b      	ldr	r1, [pc, #108]	; (800f37c <vTaskSwitchContext+0xb4>)
 800f310:	68fa      	ldr	r2, [r7, #12]
 800f312:	4613      	mov	r3, r2
 800f314:	009b      	lsls	r3, r3, #2
 800f316:	4413      	add	r3, r2
 800f318:	009b      	lsls	r3, r3, #2
 800f31a:	440b      	add	r3, r1
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d0e4      	beq.n	800f2ec <vTaskSwitchContext+0x24>
 800f322:	68fa      	ldr	r2, [r7, #12]
 800f324:	4613      	mov	r3, r2
 800f326:	009b      	lsls	r3, r3, #2
 800f328:	4413      	add	r3, r2
 800f32a:	009b      	lsls	r3, r3, #2
 800f32c:	4a13      	ldr	r2, [pc, #76]	; (800f37c <vTaskSwitchContext+0xb4>)
 800f32e:	4413      	add	r3, r2
 800f330:	60bb      	str	r3, [r7, #8]
 800f332:	68bb      	ldr	r3, [r7, #8]
 800f334:	685b      	ldr	r3, [r3, #4]
 800f336:	685a      	ldr	r2, [r3, #4]
 800f338:	68bb      	ldr	r3, [r7, #8]
 800f33a:	605a      	str	r2, [r3, #4]
 800f33c:	68bb      	ldr	r3, [r7, #8]
 800f33e:	685a      	ldr	r2, [r3, #4]
 800f340:	68bb      	ldr	r3, [r7, #8]
 800f342:	3308      	adds	r3, #8
 800f344:	429a      	cmp	r2, r3
 800f346:	d104      	bne.n	800f352 <vTaskSwitchContext+0x8a>
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	685b      	ldr	r3, [r3, #4]
 800f34c:	685a      	ldr	r2, [r3, #4]
 800f34e:	68bb      	ldr	r3, [r7, #8]
 800f350:	605a      	str	r2, [r3, #4]
 800f352:	68bb      	ldr	r3, [r7, #8]
 800f354:	685b      	ldr	r3, [r3, #4]
 800f356:	68db      	ldr	r3, [r3, #12]
 800f358:	4a09      	ldr	r2, [pc, #36]	; (800f380 <vTaskSwitchContext+0xb8>)
 800f35a:	6013      	str	r3, [r2, #0]
 800f35c:	4a06      	ldr	r2, [pc, #24]	; (800f378 <vTaskSwitchContext+0xb0>)
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	6013      	str	r3, [r2, #0]
}
 800f362:	bf00      	nop
 800f364:	3714      	adds	r7, #20
 800f366:	46bd      	mov	sp, r7
 800f368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36c:	4770      	bx	lr
 800f36e:	bf00      	nop
 800f370:	20002230 	.word	0x20002230
 800f374:	2000221c 	.word	0x2000221c
 800f378:	20002210 	.word	0x20002210
 800f37c:	20001d38 	.word	0x20001d38
 800f380:	20001d34 	.word	0x20001d34

0800f384 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b084      	sub	sp, #16
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
 800f38c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d10a      	bne.n	800f3aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f398:	f383 8811 	msr	BASEPRI, r3
 800f39c:	f3bf 8f6f 	isb	sy
 800f3a0:	f3bf 8f4f 	dsb	sy
 800f3a4:	60fb      	str	r3, [r7, #12]
}
 800f3a6:	bf00      	nop
 800f3a8:	e7fe      	b.n	800f3a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f3aa:	4b07      	ldr	r3, [pc, #28]	; (800f3c8 <vTaskPlaceOnEventList+0x44>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	3318      	adds	r3, #24
 800f3b0:	4619      	mov	r1, r3
 800f3b2:	6878      	ldr	r0, [r7, #4]
 800f3b4:	f7fe fae7 	bl	800d986 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f3b8:	2101      	movs	r1, #1
 800f3ba:	6838      	ldr	r0, [r7, #0]
 800f3bc:	f000 fb7a 	bl	800fab4 <prvAddCurrentTaskToDelayedList>
}
 800f3c0:	bf00      	nop
 800f3c2:	3710      	adds	r7, #16
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	bd80      	pop	{r7, pc}
 800f3c8:	20001d34 	.word	0x20001d34

0800f3cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b086      	sub	sp, #24
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	60f8      	str	r0, [r7, #12]
 800f3d4:	60b9      	str	r1, [r7, #8]
 800f3d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d10a      	bne.n	800f3f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3e2:	f383 8811 	msr	BASEPRI, r3
 800f3e6:	f3bf 8f6f 	isb	sy
 800f3ea:	f3bf 8f4f 	dsb	sy
 800f3ee:	617b      	str	r3, [r7, #20]
}
 800f3f0:	bf00      	nop
 800f3f2:	e7fe      	b.n	800f3f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f3f4:	4b0a      	ldr	r3, [pc, #40]	; (800f420 <vTaskPlaceOnEventListRestricted+0x54>)
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	3318      	adds	r3, #24
 800f3fa:	4619      	mov	r1, r3
 800f3fc:	68f8      	ldr	r0, [r7, #12]
 800f3fe:	f7fe fa9e 	bl	800d93e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d002      	beq.n	800f40e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f408:	f04f 33ff 	mov.w	r3, #4294967295
 800f40c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f40e:	6879      	ldr	r1, [r7, #4]
 800f410:	68b8      	ldr	r0, [r7, #8]
 800f412:	f000 fb4f 	bl	800fab4 <prvAddCurrentTaskToDelayedList>
	}
 800f416:	bf00      	nop
 800f418:	3718      	adds	r7, #24
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bd80      	pop	{r7, pc}
 800f41e:	bf00      	nop
 800f420:	20001d34 	.word	0x20001d34

0800f424 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b086      	sub	sp, #24
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	68db      	ldr	r3, [r3, #12]
 800f430:	68db      	ldr	r3, [r3, #12]
 800f432:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f434:	693b      	ldr	r3, [r7, #16]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d10a      	bne.n	800f450 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f43e:	f383 8811 	msr	BASEPRI, r3
 800f442:	f3bf 8f6f 	isb	sy
 800f446:	f3bf 8f4f 	dsb	sy
 800f44a:	60fb      	str	r3, [r7, #12]
}
 800f44c:	bf00      	nop
 800f44e:	e7fe      	b.n	800f44e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f450:	693b      	ldr	r3, [r7, #16]
 800f452:	3318      	adds	r3, #24
 800f454:	4618      	mov	r0, r3
 800f456:	f7fe facf 	bl	800d9f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f45a:	4b1e      	ldr	r3, [pc, #120]	; (800f4d4 <xTaskRemoveFromEventList+0xb0>)
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d11d      	bne.n	800f49e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f462:	693b      	ldr	r3, [r7, #16]
 800f464:	3304      	adds	r3, #4
 800f466:	4618      	mov	r0, r3
 800f468:	f7fe fac6 	bl	800d9f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f46c:	693b      	ldr	r3, [r7, #16]
 800f46e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f470:	4b19      	ldr	r3, [pc, #100]	; (800f4d8 <xTaskRemoveFromEventList+0xb4>)
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	429a      	cmp	r2, r3
 800f476:	d903      	bls.n	800f480 <xTaskRemoveFromEventList+0x5c>
 800f478:	693b      	ldr	r3, [r7, #16]
 800f47a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f47c:	4a16      	ldr	r2, [pc, #88]	; (800f4d8 <xTaskRemoveFromEventList+0xb4>)
 800f47e:	6013      	str	r3, [r2, #0]
 800f480:	693b      	ldr	r3, [r7, #16]
 800f482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f484:	4613      	mov	r3, r2
 800f486:	009b      	lsls	r3, r3, #2
 800f488:	4413      	add	r3, r2
 800f48a:	009b      	lsls	r3, r3, #2
 800f48c:	4a13      	ldr	r2, [pc, #76]	; (800f4dc <xTaskRemoveFromEventList+0xb8>)
 800f48e:	441a      	add	r2, r3
 800f490:	693b      	ldr	r3, [r7, #16]
 800f492:	3304      	adds	r3, #4
 800f494:	4619      	mov	r1, r3
 800f496:	4610      	mov	r0, r2
 800f498:	f7fe fa51 	bl	800d93e <vListInsertEnd>
 800f49c:	e005      	b.n	800f4aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f49e:	693b      	ldr	r3, [r7, #16]
 800f4a0:	3318      	adds	r3, #24
 800f4a2:	4619      	mov	r1, r3
 800f4a4:	480e      	ldr	r0, [pc, #56]	; (800f4e0 <xTaskRemoveFromEventList+0xbc>)
 800f4a6:	f7fe fa4a 	bl	800d93e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4ae:	4b0d      	ldr	r3, [pc, #52]	; (800f4e4 <xTaskRemoveFromEventList+0xc0>)
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4b4:	429a      	cmp	r2, r3
 800f4b6:	d905      	bls.n	800f4c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f4b8:	2301      	movs	r3, #1
 800f4ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f4bc:	4b0a      	ldr	r3, [pc, #40]	; (800f4e8 <xTaskRemoveFromEventList+0xc4>)
 800f4be:	2201      	movs	r2, #1
 800f4c0:	601a      	str	r2, [r3, #0]
 800f4c2:	e001      	b.n	800f4c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f4c8:	697b      	ldr	r3, [r7, #20]
}
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	3718      	adds	r7, #24
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd80      	pop	{r7, pc}
 800f4d2:	bf00      	nop
 800f4d4:	20002230 	.word	0x20002230
 800f4d8:	20002210 	.word	0x20002210
 800f4dc:	20001d38 	.word	0x20001d38
 800f4e0:	200021c8 	.word	0x200021c8
 800f4e4:	20001d34 	.word	0x20001d34
 800f4e8:	2000221c 	.word	0x2000221c

0800f4ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f4ec:	b480      	push	{r7}
 800f4ee:	b083      	sub	sp, #12
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f4f4:	4b06      	ldr	r3, [pc, #24]	; (800f510 <vTaskInternalSetTimeOutState+0x24>)
 800f4f6:	681a      	ldr	r2, [r3, #0]
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f4fc:	4b05      	ldr	r3, [pc, #20]	; (800f514 <vTaskInternalSetTimeOutState+0x28>)
 800f4fe:	681a      	ldr	r2, [r3, #0]
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	605a      	str	r2, [r3, #4]
}
 800f504:	bf00      	nop
 800f506:	370c      	adds	r7, #12
 800f508:	46bd      	mov	sp, r7
 800f50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50e:	4770      	bx	lr
 800f510:	20002220 	.word	0x20002220
 800f514:	2000220c 	.word	0x2000220c

0800f518 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b088      	sub	sp, #32
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
 800f520:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d10a      	bne.n	800f53e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f52c:	f383 8811 	msr	BASEPRI, r3
 800f530:	f3bf 8f6f 	isb	sy
 800f534:	f3bf 8f4f 	dsb	sy
 800f538:	613b      	str	r3, [r7, #16]
}
 800f53a:	bf00      	nop
 800f53c:	e7fe      	b.n	800f53c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d10a      	bne.n	800f55a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f548:	f383 8811 	msr	BASEPRI, r3
 800f54c:	f3bf 8f6f 	isb	sy
 800f550:	f3bf 8f4f 	dsb	sy
 800f554:	60fb      	str	r3, [r7, #12]
}
 800f556:	bf00      	nop
 800f558:	e7fe      	b.n	800f558 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f55a:	f000 ff7b 	bl	8010454 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f55e:	4b1d      	ldr	r3, [pc, #116]	; (800f5d4 <xTaskCheckForTimeOut+0xbc>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	685b      	ldr	r3, [r3, #4]
 800f568:	69ba      	ldr	r2, [r7, #24]
 800f56a:	1ad3      	subs	r3, r2, r3
 800f56c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f576:	d102      	bne.n	800f57e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f578:	2300      	movs	r3, #0
 800f57a:	61fb      	str	r3, [r7, #28]
 800f57c:	e023      	b.n	800f5c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	681a      	ldr	r2, [r3, #0]
 800f582:	4b15      	ldr	r3, [pc, #84]	; (800f5d8 <xTaskCheckForTimeOut+0xc0>)
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	429a      	cmp	r2, r3
 800f588:	d007      	beq.n	800f59a <xTaskCheckForTimeOut+0x82>
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	685b      	ldr	r3, [r3, #4]
 800f58e:	69ba      	ldr	r2, [r7, #24]
 800f590:	429a      	cmp	r2, r3
 800f592:	d302      	bcc.n	800f59a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f594:	2301      	movs	r3, #1
 800f596:	61fb      	str	r3, [r7, #28]
 800f598:	e015      	b.n	800f5c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	697a      	ldr	r2, [r7, #20]
 800f5a0:	429a      	cmp	r2, r3
 800f5a2:	d20b      	bcs.n	800f5bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	681a      	ldr	r2, [r3, #0]
 800f5a8:	697b      	ldr	r3, [r7, #20]
 800f5aa:	1ad2      	subs	r2, r2, r3
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f5b0:	6878      	ldr	r0, [r7, #4]
 800f5b2:	f7ff ff9b 	bl	800f4ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	61fb      	str	r3, [r7, #28]
 800f5ba:	e004      	b.n	800f5c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	2200      	movs	r2, #0
 800f5c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f5c2:	2301      	movs	r3, #1
 800f5c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f5c6:	f000 ff75 	bl	80104b4 <vPortExitCritical>

	return xReturn;
 800f5ca:	69fb      	ldr	r3, [r7, #28]
}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	3720      	adds	r7, #32
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}
 800f5d4:	2000220c 	.word	0x2000220c
 800f5d8:	20002220 	.word	0x20002220

0800f5dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f5dc:	b480      	push	{r7}
 800f5de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f5e0:	4b03      	ldr	r3, [pc, #12]	; (800f5f0 <vTaskMissedYield+0x14>)
 800f5e2:	2201      	movs	r2, #1
 800f5e4:	601a      	str	r2, [r3, #0]
}
 800f5e6:	bf00      	nop
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ee:	4770      	bx	lr
 800f5f0:	2000221c 	.word	0x2000221c

0800f5f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b082      	sub	sp, #8
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f5fc:	f000 f852 	bl	800f6a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f600:	4b06      	ldr	r3, [pc, #24]	; (800f61c <prvIdleTask+0x28>)
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	2b01      	cmp	r3, #1
 800f606:	d9f9      	bls.n	800f5fc <prvIdleTask+0x8>
			{
				taskYIELD();
 800f608:	4b05      	ldr	r3, [pc, #20]	; (800f620 <prvIdleTask+0x2c>)
 800f60a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f60e:	601a      	str	r2, [r3, #0]
 800f610:	f3bf 8f4f 	dsb	sy
 800f614:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f618:	e7f0      	b.n	800f5fc <prvIdleTask+0x8>
 800f61a:	bf00      	nop
 800f61c:	20001d38 	.word	0x20001d38
 800f620:	e000ed04 	.word	0xe000ed04

0800f624 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b082      	sub	sp, #8
 800f628:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f62a:	2300      	movs	r3, #0
 800f62c:	607b      	str	r3, [r7, #4]
 800f62e:	e00c      	b.n	800f64a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f630:	687a      	ldr	r2, [r7, #4]
 800f632:	4613      	mov	r3, r2
 800f634:	009b      	lsls	r3, r3, #2
 800f636:	4413      	add	r3, r2
 800f638:	009b      	lsls	r3, r3, #2
 800f63a:	4a12      	ldr	r2, [pc, #72]	; (800f684 <prvInitialiseTaskLists+0x60>)
 800f63c:	4413      	add	r3, r2
 800f63e:	4618      	mov	r0, r3
 800f640:	f7fe f950 	bl	800d8e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	3301      	adds	r3, #1
 800f648:	607b      	str	r3, [r7, #4]
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	2b37      	cmp	r3, #55	; 0x37
 800f64e:	d9ef      	bls.n	800f630 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f650:	480d      	ldr	r0, [pc, #52]	; (800f688 <prvInitialiseTaskLists+0x64>)
 800f652:	f7fe f947 	bl	800d8e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f656:	480d      	ldr	r0, [pc, #52]	; (800f68c <prvInitialiseTaskLists+0x68>)
 800f658:	f7fe f944 	bl	800d8e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f65c:	480c      	ldr	r0, [pc, #48]	; (800f690 <prvInitialiseTaskLists+0x6c>)
 800f65e:	f7fe f941 	bl	800d8e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f662:	480c      	ldr	r0, [pc, #48]	; (800f694 <prvInitialiseTaskLists+0x70>)
 800f664:	f7fe f93e 	bl	800d8e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f668:	480b      	ldr	r0, [pc, #44]	; (800f698 <prvInitialiseTaskLists+0x74>)
 800f66a:	f7fe f93b 	bl	800d8e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f66e:	4b0b      	ldr	r3, [pc, #44]	; (800f69c <prvInitialiseTaskLists+0x78>)
 800f670:	4a05      	ldr	r2, [pc, #20]	; (800f688 <prvInitialiseTaskLists+0x64>)
 800f672:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f674:	4b0a      	ldr	r3, [pc, #40]	; (800f6a0 <prvInitialiseTaskLists+0x7c>)
 800f676:	4a05      	ldr	r2, [pc, #20]	; (800f68c <prvInitialiseTaskLists+0x68>)
 800f678:	601a      	str	r2, [r3, #0]
}
 800f67a:	bf00      	nop
 800f67c:	3708      	adds	r7, #8
 800f67e:	46bd      	mov	sp, r7
 800f680:	bd80      	pop	{r7, pc}
 800f682:	bf00      	nop
 800f684:	20001d38 	.word	0x20001d38
 800f688:	20002198 	.word	0x20002198
 800f68c:	200021ac 	.word	0x200021ac
 800f690:	200021c8 	.word	0x200021c8
 800f694:	200021dc 	.word	0x200021dc
 800f698:	200021f4 	.word	0x200021f4
 800f69c:	200021c0 	.word	0x200021c0
 800f6a0:	200021c4 	.word	0x200021c4

0800f6a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b082      	sub	sp, #8
 800f6a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f6aa:	e019      	b.n	800f6e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f6ac:	f000 fed2 	bl	8010454 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6b0:	4b10      	ldr	r3, [pc, #64]	; (800f6f4 <prvCheckTasksWaitingTermination+0x50>)
 800f6b2:	68db      	ldr	r3, [r3, #12]
 800f6b4:	68db      	ldr	r3, [r3, #12]
 800f6b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	3304      	adds	r3, #4
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f7fe f99b 	bl	800d9f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f6c2:	4b0d      	ldr	r3, [pc, #52]	; (800f6f8 <prvCheckTasksWaitingTermination+0x54>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	3b01      	subs	r3, #1
 800f6c8:	4a0b      	ldr	r2, [pc, #44]	; (800f6f8 <prvCheckTasksWaitingTermination+0x54>)
 800f6ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f6cc:	4b0b      	ldr	r3, [pc, #44]	; (800f6fc <prvCheckTasksWaitingTermination+0x58>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	3b01      	subs	r3, #1
 800f6d2:	4a0a      	ldr	r2, [pc, #40]	; (800f6fc <prvCheckTasksWaitingTermination+0x58>)
 800f6d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f6d6:	f000 feed 	bl	80104b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f6da:	6878      	ldr	r0, [r7, #4]
 800f6dc:	f000 f810 	bl	800f700 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f6e0:	4b06      	ldr	r3, [pc, #24]	; (800f6fc <prvCheckTasksWaitingTermination+0x58>)
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d1e1      	bne.n	800f6ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f6e8:	bf00      	nop
 800f6ea:	bf00      	nop
 800f6ec:	3708      	adds	r7, #8
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	bd80      	pop	{r7, pc}
 800f6f2:	bf00      	nop
 800f6f4:	200021dc 	.word	0x200021dc
 800f6f8:	20002208 	.word	0x20002208
 800f6fc:	200021f0 	.word	0x200021f0

0800f700 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f700:	b580      	push	{r7, lr}
 800f702:	b084      	sub	sp, #16
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d108      	bne.n	800f724 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f716:	4618      	mov	r0, r3
 800f718:	f001 f88a 	bl	8010830 <vPortFree>
				vPortFree( pxTCB );
 800f71c:	6878      	ldr	r0, [r7, #4]
 800f71e:	f001 f887 	bl	8010830 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f722:	e018      	b.n	800f756 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f72a:	2b01      	cmp	r3, #1
 800f72c:	d103      	bne.n	800f736 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f72e:	6878      	ldr	r0, [r7, #4]
 800f730:	f001 f87e 	bl	8010830 <vPortFree>
	}
 800f734:	e00f      	b.n	800f756 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f73c:	2b02      	cmp	r3, #2
 800f73e:	d00a      	beq.n	800f756 <prvDeleteTCB+0x56>
	__asm volatile
 800f740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f744:	f383 8811 	msr	BASEPRI, r3
 800f748:	f3bf 8f6f 	isb	sy
 800f74c:	f3bf 8f4f 	dsb	sy
 800f750:	60fb      	str	r3, [r7, #12]
}
 800f752:	bf00      	nop
 800f754:	e7fe      	b.n	800f754 <prvDeleteTCB+0x54>
	}
 800f756:	bf00      	nop
 800f758:	3710      	adds	r7, #16
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bd80      	pop	{r7, pc}
	...

0800f760 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f760:	b480      	push	{r7}
 800f762:	b083      	sub	sp, #12
 800f764:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f766:	4b0c      	ldr	r3, [pc, #48]	; (800f798 <prvResetNextTaskUnblockTime+0x38>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d104      	bne.n	800f77a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f770:	4b0a      	ldr	r3, [pc, #40]	; (800f79c <prvResetNextTaskUnblockTime+0x3c>)
 800f772:	f04f 32ff 	mov.w	r2, #4294967295
 800f776:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f778:	e008      	b.n	800f78c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f77a:	4b07      	ldr	r3, [pc, #28]	; (800f798 <prvResetNextTaskUnblockTime+0x38>)
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	68db      	ldr	r3, [r3, #12]
 800f780:	68db      	ldr	r3, [r3, #12]
 800f782:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	685b      	ldr	r3, [r3, #4]
 800f788:	4a04      	ldr	r2, [pc, #16]	; (800f79c <prvResetNextTaskUnblockTime+0x3c>)
 800f78a:	6013      	str	r3, [r2, #0]
}
 800f78c:	bf00      	nop
 800f78e:	370c      	adds	r7, #12
 800f790:	46bd      	mov	sp, r7
 800f792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f796:	4770      	bx	lr
 800f798:	200021c0 	.word	0x200021c0
 800f79c:	20002228 	.word	0x20002228

0800f7a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f7a0:	b480      	push	{r7}
 800f7a2:	b083      	sub	sp, #12
 800f7a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f7a6:	4b0b      	ldr	r3, [pc, #44]	; (800f7d4 <xTaskGetSchedulerState+0x34>)
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d102      	bne.n	800f7b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f7ae:	2301      	movs	r3, #1
 800f7b0:	607b      	str	r3, [r7, #4]
 800f7b2:	e008      	b.n	800f7c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7b4:	4b08      	ldr	r3, [pc, #32]	; (800f7d8 <xTaskGetSchedulerState+0x38>)
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d102      	bne.n	800f7c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f7bc:	2302      	movs	r3, #2
 800f7be:	607b      	str	r3, [r7, #4]
 800f7c0:	e001      	b.n	800f7c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f7c6:	687b      	ldr	r3, [r7, #4]
	}
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	370c      	adds	r7, #12
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d2:	4770      	bx	lr
 800f7d4:	20002214 	.word	0x20002214
 800f7d8:	20002230 	.word	0x20002230

0800f7dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b084      	sub	sp, #16
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d051      	beq.n	800f896 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f7f2:	68bb      	ldr	r3, [r7, #8]
 800f7f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7f6:	4b2a      	ldr	r3, [pc, #168]	; (800f8a0 <xTaskPriorityInherit+0xc4>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7fc:	429a      	cmp	r2, r3
 800f7fe:	d241      	bcs.n	800f884 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f800:	68bb      	ldr	r3, [r7, #8]
 800f802:	699b      	ldr	r3, [r3, #24]
 800f804:	2b00      	cmp	r3, #0
 800f806:	db06      	blt.n	800f816 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f808:	4b25      	ldr	r3, [pc, #148]	; (800f8a0 <xTaskPriorityInherit+0xc4>)
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f80e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f812:	68bb      	ldr	r3, [r7, #8]
 800f814:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f816:	68bb      	ldr	r3, [r7, #8]
 800f818:	6959      	ldr	r1, [r3, #20]
 800f81a:	68bb      	ldr	r3, [r7, #8]
 800f81c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f81e:	4613      	mov	r3, r2
 800f820:	009b      	lsls	r3, r3, #2
 800f822:	4413      	add	r3, r2
 800f824:	009b      	lsls	r3, r3, #2
 800f826:	4a1f      	ldr	r2, [pc, #124]	; (800f8a4 <xTaskPriorityInherit+0xc8>)
 800f828:	4413      	add	r3, r2
 800f82a:	4299      	cmp	r1, r3
 800f82c:	d122      	bne.n	800f874 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f82e:	68bb      	ldr	r3, [r7, #8]
 800f830:	3304      	adds	r3, #4
 800f832:	4618      	mov	r0, r3
 800f834:	f7fe f8e0 	bl	800d9f8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f838:	4b19      	ldr	r3, [pc, #100]	; (800f8a0 <xTaskPriorityInherit+0xc4>)
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f83e:	68bb      	ldr	r3, [r7, #8]
 800f840:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f846:	4b18      	ldr	r3, [pc, #96]	; (800f8a8 <xTaskPriorityInherit+0xcc>)
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	429a      	cmp	r2, r3
 800f84c:	d903      	bls.n	800f856 <xTaskPriorityInherit+0x7a>
 800f84e:	68bb      	ldr	r3, [r7, #8]
 800f850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f852:	4a15      	ldr	r2, [pc, #84]	; (800f8a8 <xTaskPriorityInherit+0xcc>)
 800f854:	6013      	str	r3, [r2, #0]
 800f856:	68bb      	ldr	r3, [r7, #8]
 800f858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f85a:	4613      	mov	r3, r2
 800f85c:	009b      	lsls	r3, r3, #2
 800f85e:	4413      	add	r3, r2
 800f860:	009b      	lsls	r3, r3, #2
 800f862:	4a10      	ldr	r2, [pc, #64]	; (800f8a4 <xTaskPriorityInherit+0xc8>)
 800f864:	441a      	add	r2, r3
 800f866:	68bb      	ldr	r3, [r7, #8]
 800f868:	3304      	adds	r3, #4
 800f86a:	4619      	mov	r1, r3
 800f86c:	4610      	mov	r0, r2
 800f86e:	f7fe f866 	bl	800d93e <vListInsertEnd>
 800f872:	e004      	b.n	800f87e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f874:	4b0a      	ldr	r3, [pc, #40]	; (800f8a0 <xTaskPriorityInherit+0xc4>)
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f87a:	68bb      	ldr	r3, [r7, #8]
 800f87c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f87e:	2301      	movs	r3, #1
 800f880:	60fb      	str	r3, [r7, #12]
 800f882:	e008      	b.n	800f896 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f884:	68bb      	ldr	r3, [r7, #8]
 800f886:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f888:	4b05      	ldr	r3, [pc, #20]	; (800f8a0 <xTaskPriorityInherit+0xc4>)
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f88e:	429a      	cmp	r2, r3
 800f890:	d201      	bcs.n	800f896 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f892:	2301      	movs	r3, #1
 800f894:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f896:	68fb      	ldr	r3, [r7, #12]
	}
 800f898:	4618      	mov	r0, r3
 800f89a:	3710      	adds	r7, #16
 800f89c:	46bd      	mov	sp, r7
 800f89e:	bd80      	pop	{r7, pc}
 800f8a0:	20001d34 	.word	0x20001d34
 800f8a4:	20001d38 	.word	0x20001d38
 800f8a8:	20002210 	.word	0x20002210

0800f8ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b086      	sub	sp, #24
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d056      	beq.n	800f970 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f8c2:	4b2e      	ldr	r3, [pc, #184]	; (800f97c <xTaskPriorityDisinherit+0xd0>)
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	693a      	ldr	r2, [r7, #16]
 800f8c8:	429a      	cmp	r2, r3
 800f8ca:	d00a      	beq.n	800f8e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8d0:	f383 8811 	msr	BASEPRI, r3
 800f8d4:	f3bf 8f6f 	isb	sy
 800f8d8:	f3bf 8f4f 	dsb	sy
 800f8dc:	60fb      	str	r3, [r7, #12]
}
 800f8de:	bf00      	nop
 800f8e0:	e7fe      	b.n	800f8e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f8e2:	693b      	ldr	r3, [r7, #16]
 800f8e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d10a      	bne.n	800f900 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8ee:	f383 8811 	msr	BASEPRI, r3
 800f8f2:	f3bf 8f6f 	isb	sy
 800f8f6:	f3bf 8f4f 	dsb	sy
 800f8fa:	60bb      	str	r3, [r7, #8]
}
 800f8fc:	bf00      	nop
 800f8fe:	e7fe      	b.n	800f8fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f900:	693b      	ldr	r3, [r7, #16]
 800f902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f904:	1e5a      	subs	r2, r3, #1
 800f906:	693b      	ldr	r3, [r7, #16]
 800f908:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f90a:	693b      	ldr	r3, [r7, #16]
 800f90c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f90e:	693b      	ldr	r3, [r7, #16]
 800f910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f912:	429a      	cmp	r2, r3
 800f914:	d02c      	beq.n	800f970 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f916:	693b      	ldr	r3, [r7, #16]
 800f918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d128      	bne.n	800f970 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f91e:	693b      	ldr	r3, [r7, #16]
 800f920:	3304      	adds	r3, #4
 800f922:	4618      	mov	r0, r3
 800f924:	f7fe f868 	bl	800d9f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f928:	693b      	ldr	r3, [r7, #16]
 800f92a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f92c:	693b      	ldr	r3, [r7, #16]
 800f92e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f930:	693b      	ldr	r3, [r7, #16]
 800f932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f934:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f938:	693b      	ldr	r3, [r7, #16]
 800f93a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f93c:	693b      	ldr	r3, [r7, #16]
 800f93e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f940:	4b0f      	ldr	r3, [pc, #60]	; (800f980 <xTaskPriorityDisinherit+0xd4>)
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	429a      	cmp	r2, r3
 800f946:	d903      	bls.n	800f950 <xTaskPriorityDisinherit+0xa4>
 800f948:	693b      	ldr	r3, [r7, #16]
 800f94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f94c:	4a0c      	ldr	r2, [pc, #48]	; (800f980 <xTaskPriorityDisinherit+0xd4>)
 800f94e:	6013      	str	r3, [r2, #0]
 800f950:	693b      	ldr	r3, [r7, #16]
 800f952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f954:	4613      	mov	r3, r2
 800f956:	009b      	lsls	r3, r3, #2
 800f958:	4413      	add	r3, r2
 800f95a:	009b      	lsls	r3, r3, #2
 800f95c:	4a09      	ldr	r2, [pc, #36]	; (800f984 <xTaskPriorityDisinherit+0xd8>)
 800f95e:	441a      	add	r2, r3
 800f960:	693b      	ldr	r3, [r7, #16]
 800f962:	3304      	adds	r3, #4
 800f964:	4619      	mov	r1, r3
 800f966:	4610      	mov	r0, r2
 800f968:	f7fd ffe9 	bl	800d93e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f96c:	2301      	movs	r3, #1
 800f96e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f970:	697b      	ldr	r3, [r7, #20]
	}
 800f972:	4618      	mov	r0, r3
 800f974:	3718      	adds	r7, #24
 800f976:	46bd      	mov	sp, r7
 800f978:	bd80      	pop	{r7, pc}
 800f97a:	bf00      	nop
 800f97c:	20001d34 	.word	0x20001d34
 800f980:	20002210 	.word	0x20002210
 800f984:	20001d38 	.word	0x20001d38

0800f988 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b088      	sub	sp, #32
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
 800f990:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f996:	2301      	movs	r3, #1
 800f998:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d06a      	beq.n	800fa76 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f9a0:	69bb      	ldr	r3, [r7, #24]
 800f9a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d10a      	bne.n	800f9be <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800f9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9ac:	f383 8811 	msr	BASEPRI, r3
 800f9b0:	f3bf 8f6f 	isb	sy
 800f9b4:	f3bf 8f4f 	dsb	sy
 800f9b8:	60fb      	str	r3, [r7, #12]
}
 800f9ba:	bf00      	nop
 800f9bc:	e7fe      	b.n	800f9bc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f9be:	69bb      	ldr	r3, [r7, #24]
 800f9c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f9c2:	683a      	ldr	r2, [r7, #0]
 800f9c4:	429a      	cmp	r2, r3
 800f9c6:	d902      	bls.n	800f9ce <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	61fb      	str	r3, [r7, #28]
 800f9cc:	e002      	b.n	800f9d4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f9ce:	69bb      	ldr	r3, [r7, #24]
 800f9d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f9d2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f9d4:	69bb      	ldr	r3, [r7, #24]
 800f9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9d8:	69fa      	ldr	r2, [r7, #28]
 800f9da:	429a      	cmp	r2, r3
 800f9dc:	d04b      	beq.n	800fa76 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f9de:	69bb      	ldr	r3, [r7, #24]
 800f9e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9e2:	697a      	ldr	r2, [r7, #20]
 800f9e4:	429a      	cmp	r2, r3
 800f9e6:	d146      	bne.n	800fa76 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f9e8:	4b25      	ldr	r3, [pc, #148]	; (800fa80 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	69ba      	ldr	r2, [r7, #24]
 800f9ee:	429a      	cmp	r2, r3
 800f9f0:	d10a      	bne.n	800fa08 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800f9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9f6:	f383 8811 	msr	BASEPRI, r3
 800f9fa:	f3bf 8f6f 	isb	sy
 800f9fe:	f3bf 8f4f 	dsb	sy
 800fa02:	60bb      	str	r3, [r7, #8]
}
 800fa04:	bf00      	nop
 800fa06:	e7fe      	b.n	800fa06 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fa08:	69bb      	ldr	r3, [r7, #24]
 800fa0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa0c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800fa0e:	69bb      	ldr	r3, [r7, #24]
 800fa10:	69fa      	ldr	r2, [r7, #28]
 800fa12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fa14:	69bb      	ldr	r3, [r7, #24]
 800fa16:	699b      	ldr	r3, [r3, #24]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	db04      	blt.n	800fa26 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa1c:	69fb      	ldr	r3, [r7, #28]
 800fa1e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fa22:	69bb      	ldr	r3, [r7, #24]
 800fa24:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fa26:	69bb      	ldr	r3, [r7, #24]
 800fa28:	6959      	ldr	r1, [r3, #20]
 800fa2a:	693a      	ldr	r2, [r7, #16]
 800fa2c:	4613      	mov	r3, r2
 800fa2e:	009b      	lsls	r3, r3, #2
 800fa30:	4413      	add	r3, r2
 800fa32:	009b      	lsls	r3, r3, #2
 800fa34:	4a13      	ldr	r2, [pc, #76]	; (800fa84 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800fa36:	4413      	add	r3, r2
 800fa38:	4299      	cmp	r1, r3
 800fa3a:	d11c      	bne.n	800fa76 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fa3c:	69bb      	ldr	r3, [r7, #24]
 800fa3e:	3304      	adds	r3, #4
 800fa40:	4618      	mov	r0, r3
 800fa42:	f7fd ffd9 	bl	800d9f8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800fa46:	69bb      	ldr	r3, [r7, #24]
 800fa48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa4a:	4b0f      	ldr	r3, [pc, #60]	; (800fa88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	429a      	cmp	r2, r3
 800fa50:	d903      	bls.n	800fa5a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800fa52:	69bb      	ldr	r3, [r7, #24]
 800fa54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa56:	4a0c      	ldr	r2, [pc, #48]	; (800fa88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800fa58:	6013      	str	r3, [r2, #0]
 800fa5a:	69bb      	ldr	r3, [r7, #24]
 800fa5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa5e:	4613      	mov	r3, r2
 800fa60:	009b      	lsls	r3, r3, #2
 800fa62:	4413      	add	r3, r2
 800fa64:	009b      	lsls	r3, r3, #2
 800fa66:	4a07      	ldr	r2, [pc, #28]	; (800fa84 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800fa68:	441a      	add	r2, r3
 800fa6a:	69bb      	ldr	r3, [r7, #24]
 800fa6c:	3304      	adds	r3, #4
 800fa6e:	4619      	mov	r1, r3
 800fa70:	4610      	mov	r0, r2
 800fa72:	f7fd ff64 	bl	800d93e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fa76:	bf00      	nop
 800fa78:	3720      	adds	r7, #32
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	bd80      	pop	{r7, pc}
 800fa7e:	bf00      	nop
 800fa80:	20001d34 	.word	0x20001d34
 800fa84:	20001d38 	.word	0x20001d38
 800fa88:	20002210 	.word	0x20002210

0800fa8c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800fa8c:	b480      	push	{r7}
 800fa8e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fa90:	4b07      	ldr	r3, [pc, #28]	; (800fab0 <pvTaskIncrementMutexHeldCount+0x24>)
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d004      	beq.n	800faa2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800fa98:	4b05      	ldr	r3, [pc, #20]	; (800fab0 <pvTaskIncrementMutexHeldCount+0x24>)
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fa9e:	3201      	adds	r2, #1
 800faa0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800faa2:	4b03      	ldr	r3, [pc, #12]	; (800fab0 <pvTaskIncrementMutexHeldCount+0x24>)
 800faa4:	681b      	ldr	r3, [r3, #0]
	}
 800faa6:	4618      	mov	r0, r3
 800faa8:	46bd      	mov	sp, r7
 800faaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faae:	4770      	bx	lr
 800fab0:	20001d34 	.word	0x20001d34

0800fab4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b084      	sub	sp, #16
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
 800fabc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fabe:	4b21      	ldr	r3, [pc, #132]	; (800fb44 <prvAddCurrentTaskToDelayedList+0x90>)
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fac4:	4b20      	ldr	r3, [pc, #128]	; (800fb48 <prvAddCurrentTaskToDelayedList+0x94>)
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	3304      	adds	r3, #4
 800faca:	4618      	mov	r0, r3
 800facc:	f7fd ff94 	bl	800d9f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fad6:	d10a      	bne.n	800faee <prvAddCurrentTaskToDelayedList+0x3a>
 800fad8:	683b      	ldr	r3, [r7, #0]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d007      	beq.n	800faee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fade:	4b1a      	ldr	r3, [pc, #104]	; (800fb48 <prvAddCurrentTaskToDelayedList+0x94>)
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	3304      	adds	r3, #4
 800fae4:	4619      	mov	r1, r3
 800fae6:	4819      	ldr	r0, [pc, #100]	; (800fb4c <prvAddCurrentTaskToDelayedList+0x98>)
 800fae8:	f7fd ff29 	bl	800d93e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800faec:	e026      	b.n	800fb3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800faee:	68fa      	ldr	r2, [r7, #12]
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	4413      	add	r3, r2
 800faf4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800faf6:	4b14      	ldr	r3, [pc, #80]	; (800fb48 <prvAddCurrentTaskToDelayedList+0x94>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	68ba      	ldr	r2, [r7, #8]
 800fafc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fafe:	68ba      	ldr	r2, [r7, #8]
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	429a      	cmp	r2, r3
 800fb04:	d209      	bcs.n	800fb1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fb06:	4b12      	ldr	r3, [pc, #72]	; (800fb50 <prvAddCurrentTaskToDelayedList+0x9c>)
 800fb08:	681a      	ldr	r2, [r3, #0]
 800fb0a:	4b0f      	ldr	r3, [pc, #60]	; (800fb48 <prvAddCurrentTaskToDelayedList+0x94>)
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	3304      	adds	r3, #4
 800fb10:	4619      	mov	r1, r3
 800fb12:	4610      	mov	r0, r2
 800fb14:	f7fd ff37 	bl	800d986 <vListInsert>
}
 800fb18:	e010      	b.n	800fb3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fb1a:	4b0e      	ldr	r3, [pc, #56]	; (800fb54 <prvAddCurrentTaskToDelayedList+0xa0>)
 800fb1c:	681a      	ldr	r2, [r3, #0]
 800fb1e:	4b0a      	ldr	r3, [pc, #40]	; (800fb48 <prvAddCurrentTaskToDelayedList+0x94>)
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	3304      	adds	r3, #4
 800fb24:	4619      	mov	r1, r3
 800fb26:	4610      	mov	r0, r2
 800fb28:	f7fd ff2d 	bl	800d986 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fb2c:	4b0a      	ldr	r3, [pc, #40]	; (800fb58 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	68ba      	ldr	r2, [r7, #8]
 800fb32:	429a      	cmp	r2, r3
 800fb34:	d202      	bcs.n	800fb3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fb36:	4a08      	ldr	r2, [pc, #32]	; (800fb58 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fb38:	68bb      	ldr	r3, [r7, #8]
 800fb3a:	6013      	str	r3, [r2, #0]
}
 800fb3c:	bf00      	nop
 800fb3e:	3710      	adds	r7, #16
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}
 800fb44:	2000220c 	.word	0x2000220c
 800fb48:	20001d34 	.word	0x20001d34
 800fb4c:	200021f4 	.word	0x200021f4
 800fb50:	200021c4 	.word	0x200021c4
 800fb54:	200021c0 	.word	0x200021c0
 800fb58:	20002228 	.word	0x20002228

0800fb5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b08a      	sub	sp, #40	; 0x28
 800fb60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fb62:	2300      	movs	r3, #0
 800fb64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fb66:	f000 fb07 	bl	8010178 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fb6a:	4b1c      	ldr	r3, [pc, #112]	; (800fbdc <xTimerCreateTimerTask+0x80>)
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d021      	beq.n	800fbb6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fb72:	2300      	movs	r3, #0
 800fb74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fb76:	2300      	movs	r3, #0
 800fb78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fb7a:	1d3a      	adds	r2, r7, #4
 800fb7c:	f107 0108 	add.w	r1, r7, #8
 800fb80:	f107 030c 	add.w	r3, r7, #12
 800fb84:	4618      	mov	r0, r3
 800fb86:	f7fd fe93 	bl	800d8b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fb8a:	6879      	ldr	r1, [r7, #4]
 800fb8c:	68bb      	ldr	r3, [r7, #8]
 800fb8e:	68fa      	ldr	r2, [r7, #12]
 800fb90:	9202      	str	r2, [sp, #8]
 800fb92:	9301      	str	r3, [sp, #4]
 800fb94:	2302      	movs	r3, #2
 800fb96:	9300      	str	r3, [sp, #0]
 800fb98:	2300      	movs	r3, #0
 800fb9a:	460a      	mov	r2, r1
 800fb9c:	4910      	ldr	r1, [pc, #64]	; (800fbe0 <xTimerCreateTimerTask+0x84>)
 800fb9e:	4811      	ldr	r0, [pc, #68]	; (800fbe4 <xTimerCreateTimerTask+0x88>)
 800fba0:	f7fe ff62 	bl	800ea68 <xTaskCreateStatic>
 800fba4:	4603      	mov	r3, r0
 800fba6:	4a10      	ldr	r2, [pc, #64]	; (800fbe8 <xTimerCreateTimerTask+0x8c>)
 800fba8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fbaa:	4b0f      	ldr	r3, [pc, #60]	; (800fbe8 <xTimerCreateTimerTask+0x8c>)
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d001      	beq.n	800fbb6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fbb6:	697b      	ldr	r3, [r7, #20]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d10a      	bne.n	800fbd2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800fbbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbc0:	f383 8811 	msr	BASEPRI, r3
 800fbc4:	f3bf 8f6f 	isb	sy
 800fbc8:	f3bf 8f4f 	dsb	sy
 800fbcc:	613b      	str	r3, [r7, #16]
}
 800fbce:	bf00      	nop
 800fbd0:	e7fe      	b.n	800fbd0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800fbd2:	697b      	ldr	r3, [r7, #20]
}
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	3718      	adds	r7, #24
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bd80      	pop	{r7, pc}
 800fbdc:	20002264 	.word	0x20002264
 800fbe0:	08014958 	.word	0x08014958
 800fbe4:	0800fd21 	.word	0x0800fd21
 800fbe8:	20002268 	.word	0x20002268

0800fbec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b08a      	sub	sp, #40	; 0x28
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	60f8      	str	r0, [r7, #12]
 800fbf4:	60b9      	str	r1, [r7, #8]
 800fbf6:	607a      	str	r2, [r7, #4]
 800fbf8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d10a      	bne.n	800fc1a <xTimerGenericCommand+0x2e>
	__asm volatile
 800fc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc08:	f383 8811 	msr	BASEPRI, r3
 800fc0c:	f3bf 8f6f 	isb	sy
 800fc10:	f3bf 8f4f 	dsb	sy
 800fc14:	623b      	str	r3, [r7, #32]
}
 800fc16:	bf00      	nop
 800fc18:	e7fe      	b.n	800fc18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fc1a:	4b1a      	ldr	r3, [pc, #104]	; (800fc84 <xTimerGenericCommand+0x98>)
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d02a      	beq.n	800fc78 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fc22:	68bb      	ldr	r3, [r7, #8]
 800fc24:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fc2e:	68bb      	ldr	r3, [r7, #8]
 800fc30:	2b05      	cmp	r3, #5
 800fc32:	dc18      	bgt.n	800fc66 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fc34:	f7ff fdb4 	bl	800f7a0 <xTaskGetSchedulerState>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	2b02      	cmp	r3, #2
 800fc3c:	d109      	bne.n	800fc52 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fc3e:	4b11      	ldr	r3, [pc, #68]	; (800fc84 <xTimerGenericCommand+0x98>)
 800fc40:	6818      	ldr	r0, [r3, #0]
 800fc42:	f107 0110 	add.w	r1, r7, #16
 800fc46:	2300      	movs	r3, #0
 800fc48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc4a:	f7fe f8a7 	bl	800dd9c <xQueueGenericSend>
 800fc4e:	6278      	str	r0, [r7, #36]	; 0x24
 800fc50:	e012      	b.n	800fc78 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fc52:	4b0c      	ldr	r3, [pc, #48]	; (800fc84 <xTimerGenericCommand+0x98>)
 800fc54:	6818      	ldr	r0, [r3, #0]
 800fc56:	f107 0110 	add.w	r1, r7, #16
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	f7fe f89d 	bl	800dd9c <xQueueGenericSend>
 800fc62:	6278      	str	r0, [r7, #36]	; 0x24
 800fc64:	e008      	b.n	800fc78 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fc66:	4b07      	ldr	r3, [pc, #28]	; (800fc84 <xTimerGenericCommand+0x98>)
 800fc68:	6818      	ldr	r0, [r3, #0]
 800fc6a:	f107 0110 	add.w	r1, r7, #16
 800fc6e:	2300      	movs	r3, #0
 800fc70:	683a      	ldr	r2, [r7, #0]
 800fc72:	f7fe f991 	bl	800df98 <xQueueGenericSendFromISR>
 800fc76:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	3728      	adds	r7, #40	; 0x28
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}
 800fc82:	bf00      	nop
 800fc84:	20002264 	.word	0x20002264

0800fc88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b088      	sub	sp, #32
 800fc8c:	af02      	add	r7, sp, #8
 800fc8e:	6078      	str	r0, [r7, #4]
 800fc90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc92:	4b22      	ldr	r3, [pc, #136]	; (800fd1c <prvProcessExpiredTimer+0x94>)
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	68db      	ldr	r3, [r3, #12]
 800fc98:	68db      	ldr	r3, [r3, #12]
 800fc9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fc9c:	697b      	ldr	r3, [r7, #20]
 800fc9e:	3304      	adds	r3, #4
 800fca0:	4618      	mov	r0, r3
 800fca2:	f7fd fea9 	bl	800d9f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fca6:	697b      	ldr	r3, [r7, #20]
 800fca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fcac:	f003 0304 	and.w	r3, r3, #4
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d022      	beq.n	800fcfa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fcb4:	697b      	ldr	r3, [r7, #20]
 800fcb6:	699a      	ldr	r2, [r3, #24]
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	18d1      	adds	r1, r2, r3
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	683a      	ldr	r2, [r7, #0]
 800fcc0:	6978      	ldr	r0, [r7, #20]
 800fcc2:	f000 f8d1 	bl	800fe68 <prvInsertTimerInActiveList>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d01f      	beq.n	800fd0c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fccc:	2300      	movs	r3, #0
 800fcce:	9300      	str	r3, [sp, #0]
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	687a      	ldr	r2, [r7, #4]
 800fcd4:	2100      	movs	r1, #0
 800fcd6:	6978      	ldr	r0, [r7, #20]
 800fcd8:	f7ff ff88 	bl	800fbec <xTimerGenericCommand>
 800fcdc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fcde:	693b      	ldr	r3, [r7, #16]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d113      	bne.n	800fd0c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800fce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fce8:	f383 8811 	msr	BASEPRI, r3
 800fcec:	f3bf 8f6f 	isb	sy
 800fcf0:	f3bf 8f4f 	dsb	sy
 800fcf4:	60fb      	str	r3, [r7, #12]
}
 800fcf6:	bf00      	nop
 800fcf8:	e7fe      	b.n	800fcf8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fcfa:	697b      	ldr	r3, [r7, #20]
 800fcfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fd00:	f023 0301 	bic.w	r3, r3, #1
 800fd04:	b2da      	uxtb	r2, r3
 800fd06:	697b      	ldr	r3, [r7, #20]
 800fd08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fd0c:	697b      	ldr	r3, [r7, #20]
 800fd0e:	6a1b      	ldr	r3, [r3, #32]
 800fd10:	6978      	ldr	r0, [r7, #20]
 800fd12:	4798      	blx	r3
}
 800fd14:	bf00      	nop
 800fd16:	3718      	adds	r7, #24
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd80      	pop	{r7, pc}
 800fd1c:	2000225c 	.word	0x2000225c

0800fd20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b084      	sub	sp, #16
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fd28:	f107 0308 	add.w	r3, r7, #8
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	f000 f857 	bl	800fde0 <prvGetNextExpireTime>
 800fd32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	4619      	mov	r1, r3
 800fd38:	68f8      	ldr	r0, [r7, #12]
 800fd3a:	f000 f803 	bl	800fd44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fd3e:	f000 f8d5 	bl	800feec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fd42:	e7f1      	b.n	800fd28 <prvTimerTask+0x8>

0800fd44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b084      	sub	sp, #16
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
 800fd4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fd4e:	f7ff f945 	bl	800efdc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fd52:	f107 0308 	add.w	r3, r7, #8
 800fd56:	4618      	mov	r0, r3
 800fd58:	f000 f866 	bl	800fe28 <prvSampleTimeNow>
 800fd5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fd5e:	68bb      	ldr	r3, [r7, #8]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d130      	bne.n	800fdc6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d10a      	bne.n	800fd80 <prvProcessTimerOrBlockTask+0x3c>
 800fd6a:	687a      	ldr	r2, [r7, #4]
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	429a      	cmp	r2, r3
 800fd70:	d806      	bhi.n	800fd80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fd72:	f7ff f941 	bl	800eff8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fd76:	68f9      	ldr	r1, [r7, #12]
 800fd78:	6878      	ldr	r0, [r7, #4]
 800fd7a:	f7ff ff85 	bl	800fc88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fd7e:	e024      	b.n	800fdca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fd80:	683b      	ldr	r3, [r7, #0]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d008      	beq.n	800fd98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fd86:	4b13      	ldr	r3, [pc, #76]	; (800fdd4 <prvProcessTimerOrBlockTask+0x90>)
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d101      	bne.n	800fd94 <prvProcessTimerOrBlockTask+0x50>
 800fd90:	2301      	movs	r3, #1
 800fd92:	e000      	b.n	800fd96 <prvProcessTimerOrBlockTask+0x52>
 800fd94:	2300      	movs	r3, #0
 800fd96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fd98:	4b0f      	ldr	r3, [pc, #60]	; (800fdd8 <prvProcessTimerOrBlockTask+0x94>)
 800fd9a:	6818      	ldr	r0, [r3, #0]
 800fd9c:	687a      	ldr	r2, [r7, #4]
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	1ad3      	subs	r3, r2, r3
 800fda2:	683a      	ldr	r2, [r7, #0]
 800fda4:	4619      	mov	r1, r3
 800fda6:	f7fe fe2b 	bl	800ea00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fdaa:	f7ff f925 	bl	800eff8 <xTaskResumeAll>
 800fdae:	4603      	mov	r3, r0
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d10a      	bne.n	800fdca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fdb4:	4b09      	ldr	r3, [pc, #36]	; (800fddc <prvProcessTimerOrBlockTask+0x98>)
 800fdb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fdba:	601a      	str	r2, [r3, #0]
 800fdbc:	f3bf 8f4f 	dsb	sy
 800fdc0:	f3bf 8f6f 	isb	sy
}
 800fdc4:	e001      	b.n	800fdca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fdc6:	f7ff f917 	bl	800eff8 <xTaskResumeAll>
}
 800fdca:	bf00      	nop
 800fdcc:	3710      	adds	r7, #16
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	bd80      	pop	{r7, pc}
 800fdd2:	bf00      	nop
 800fdd4:	20002260 	.word	0x20002260
 800fdd8:	20002264 	.word	0x20002264
 800fddc:	e000ed04 	.word	0xe000ed04

0800fde0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fde0:	b480      	push	{r7}
 800fde2:	b085      	sub	sp, #20
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fde8:	4b0e      	ldr	r3, [pc, #56]	; (800fe24 <prvGetNextExpireTime+0x44>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d101      	bne.n	800fdf6 <prvGetNextExpireTime+0x16>
 800fdf2:	2201      	movs	r2, #1
 800fdf4:	e000      	b.n	800fdf8 <prvGetNextExpireTime+0x18>
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d105      	bne.n	800fe10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fe04:	4b07      	ldr	r3, [pc, #28]	; (800fe24 <prvGetNextExpireTime+0x44>)
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	68db      	ldr	r3, [r3, #12]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	60fb      	str	r3, [r7, #12]
 800fe0e:	e001      	b.n	800fe14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fe10:	2300      	movs	r3, #0
 800fe12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fe14:	68fb      	ldr	r3, [r7, #12]
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	3714      	adds	r7, #20
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe20:	4770      	bx	lr
 800fe22:	bf00      	nop
 800fe24:	2000225c 	.word	0x2000225c

0800fe28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b084      	sub	sp, #16
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fe30:	f7ff f980 	bl	800f134 <xTaskGetTickCount>
 800fe34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fe36:	4b0b      	ldr	r3, [pc, #44]	; (800fe64 <prvSampleTimeNow+0x3c>)
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	68fa      	ldr	r2, [r7, #12]
 800fe3c:	429a      	cmp	r2, r3
 800fe3e:	d205      	bcs.n	800fe4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fe40:	f000 f936 	bl	80100b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	2201      	movs	r2, #1
 800fe48:	601a      	str	r2, [r3, #0]
 800fe4a:	e002      	b.n	800fe52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2200      	movs	r2, #0
 800fe50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fe52:	4a04      	ldr	r2, [pc, #16]	; (800fe64 <prvSampleTimeNow+0x3c>)
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fe58:	68fb      	ldr	r3, [r7, #12]
}
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	3710      	adds	r7, #16
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}
 800fe62:	bf00      	nop
 800fe64:	2000226c 	.word	0x2000226c

0800fe68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b086      	sub	sp, #24
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	60f8      	str	r0, [r7, #12]
 800fe70:	60b9      	str	r1, [r7, #8]
 800fe72:	607a      	str	r2, [r7, #4]
 800fe74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fe76:	2300      	movs	r3, #0
 800fe78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	68ba      	ldr	r2, [r7, #8]
 800fe7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	68fa      	ldr	r2, [r7, #12]
 800fe84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fe86:	68ba      	ldr	r2, [r7, #8]
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	429a      	cmp	r2, r3
 800fe8c:	d812      	bhi.n	800feb4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe8e:	687a      	ldr	r2, [r7, #4]
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	1ad2      	subs	r2, r2, r3
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	699b      	ldr	r3, [r3, #24]
 800fe98:	429a      	cmp	r2, r3
 800fe9a:	d302      	bcc.n	800fea2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fe9c:	2301      	movs	r3, #1
 800fe9e:	617b      	str	r3, [r7, #20]
 800fea0:	e01b      	b.n	800feda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fea2:	4b10      	ldr	r3, [pc, #64]	; (800fee4 <prvInsertTimerInActiveList+0x7c>)
 800fea4:	681a      	ldr	r2, [r3, #0]
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	3304      	adds	r3, #4
 800feaa:	4619      	mov	r1, r3
 800feac:	4610      	mov	r0, r2
 800feae:	f7fd fd6a 	bl	800d986 <vListInsert>
 800feb2:	e012      	b.n	800feda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800feb4:	687a      	ldr	r2, [r7, #4]
 800feb6:	683b      	ldr	r3, [r7, #0]
 800feb8:	429a      	cmp	r2, r3
 800feba:	d206      	bcs.n	800feca <prvInsertTimerInActiveList+0x62>
 800febc:	68ba      	ldr	r2, [r7, #8]
 800febe:	683b      	ldr	r3, [r7, #0]
 800fec0:	429a      	cmp	r2, r3
 800fec2:	d302      	bcc.n	800feca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fec4:	2301      	movs	r3, #1
 800fec6:	617b      	str	r3, [r7, #20]
 800fec8:	e007      	b.n	800feda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800feca:	4b07      	ldr	r3, [pc, #28]	; (800fee8 <prvInsertTimerInActiveList+0x80>)
 800fecc:	681a      	ldr	r2, [r3, #0]
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	3304      	adds	r3, #4
 800fed2:	4619      	mov	r1, r3
 800fed4:	4610      	mov	r0, r2
 800fed6:	f7fd fd56 	bl	800d986 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800feda:	697b      	ldr	r3, [r7, #20]
}
 800fedc:	4618      	mov	r0, r3
 800fede:	3718      	adds	r7, #24
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd80      	pop	{r7, pc}
 800fee4:	20002260 	.word	0x20002260
 800fee8:	2000225c 	.word	0x2000225c

0800feec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b08e      	sub	sp, #56	; 0x38
 800fef0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fef2:	e0ca      	b.n	801008a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	da18      	bge.n	800ff2c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fefa:	1d3b      	adds	r3, r7, #4
 800fefc:	3304      	adds	r3, #4
 800fefe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ff00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d10a      	bne.n	800ff1c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ff06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff0a:	f383 8811 	msr	BASEPRI, r3
 800ff0e:	f3bf 8f6f 	isb	sy
 800ff12:	f3bf 8f4f 	dsb	sy
 800ff16:	61fb      	str	r3, [r7, #28]
}
 800ff18:	bf00      	nop
 800ff1a:	e7fe      	b.n	800ff1a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ff1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff22:	6850      	ldr	r0, [r2, #4]
 800ff24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff26:	6892      	ldr	r2, [r2, #8]
 800ff28:	4611      	mov	r1, r2
 800ff2a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	f2c0 80aa 	blt.w	8010088 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ff38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff3a:	695b      	ldr	r3, [r3, #20]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d004      	beq.n	800ff4a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ff40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff42:	3304      	adds	r3, #4
 800ff44:	4618      	mov	r0, r3
 800ff46:	f7fd fd57 	bl	800d9f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ff4a:	463b      	mov	r3, r7
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f7ff ff6b 	bl	800fe28 <prvSampleTimeNow>
 800ff52:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2b09      	cmp	r3, #9
 800ff58:	f200 8097 	bhi.w	801008a <prvProcessReceivedCommands+0x19e>
 800ff5c:	a201      	add	r2, pc, #4	; (adr r2, 800ff64 <prvProcessReceivedCommands+0x78>)
 800ff5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff62:	bf00      	nop
 800ff64:	0800ff8d 	.word	0x0800ff8d
 800ff68:	0800ff8d 	.word	0x0800ff8d
 800ff6c:	0800ff8d 	.word	0x0800ff8d
 800ff70:	08010001 	.word	0x08010001
 800ff74:	08010015 	.word	0x08010015
 800ff78:	0801005f 	.word	0x0801005f
 800ff7c:	0800ff8d 	.word	0x0800ff8d
 800ff80:	0800ff8d 	.word	0x0800ff8d
 800ff84:	08010001 	.word	0x08010001
 800ff88:	08010015 	.word	0x08010015
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ff8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff92:	f043 0301 	orr.w	r3, r3, #1
 800ff96:	b2da      	uxtb	r2, r3
 800ff98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ff9e:	68ba      	ldr	r2, [r7, #8]
 800ffa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffa2:	699b      	ldr	r3, [r3, #24]
 800ffa4:	18d1      	adds	r1, r2, r3
 800ffa6:	68bb      	ldr	r3, [r7, #8]
 800ffa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ffac:	f7ff ff5c 	bl	800fe68 <prvInsertTimerInActiveList>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d069      	beq.n	801008a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ffb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffb8:	6a1b      	ldr	r3, [r3, #32]
 800ffba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ffbc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ffbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ffc4:	f003 0304 	and.w	r3, r3, #4
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d05e      	beq.n	801008a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ffcc:	68ba      	ldr	r2, [r7, #8]
 800ffce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffd0:	699b      	ldr	r3, [r3, #24]
 800ffd2:	441a      	add	r2, r3
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	9300      	str	r3, [sp, #0]
 800ffd8:	2300      	movs	r3, #0
 800ffda:	2100      	movs	r1, #0
 800ffdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ffde:	f7ff fe05 	bl	800fbec <xTimerGenericCommand>
 800ffe2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ffe4:	6a3b      	ldr	r3, [r7, #32]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d14f      	bne.n	801008a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ffea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffee:	f383 8811 	msr	BASEPRI, r3
 800fff2:	f3bf 8f6f 	isb	sy
 800fff6:	f3bf 8f4f 	dsb	sy
 800fffa:	61bb      	str	r3, [r7, #24]
}
 800fffc:	bf00      	nop
 800fffe:	e7fe      	b.n	800fffe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010002:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010006:	f023 0301 	bic.w	r3, r3, #1
 801000a:	b2da      	uxtb	r2, r3
 801000c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801000e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010012:	e03a      	b.n	801008a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010016:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801001a:	f043 0301 	orr.w	r3, r3, #1
 801001e:	b2da      	uxtb	r2, r3
 8010020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010022:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010026:	68ba      	ldr	r2, [r7, #8]
 8010028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801002a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801002c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801002e:	699b      	ldr	r3, [r3, #24]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d10a      	bne.n	801004a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010038:	f383 8811 	msr	BASEPRI, r3
 801003c:	f3bf 8f6f 	isb	sy
 8010040:	f3bf 8f4f 	dsb	sy
 8010044:	617b      	str	r3, [r7, #20]
}
 8010046:	bf00      	nop
 8010048:	e7fe      	b.n	8010048 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801004a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801004c:	699a      	ldr	r2, [r3, #24]
 801004e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010050:	18d1      	adds	r1, r2, r3
 8010052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010056:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010058:	f7ff ff06 	bl	800fe68 <prvInsertTimerInActiveList>
					break;
 801005c:	e015      	b.n	801008a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801005e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010060:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010064:	f003 0302 	and.w	r3, r3, #2
 8010068:	2b00      	cmp	r3, #0
 801006a:	d103      	bne.n	8010074 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801006c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801006e:	f000 fbdf 	bl	8010830 <vPortFree>
 8010072:	e00a      	b.n	801008a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010076:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801007a:	f023 0301 	bic.w	r3, r3, #1
 801007e:	b2da      	uxtb	r2, r3
 8010080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010082:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010086:	e000      	b.n	801008a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010088:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801008a:	4b08      	ldr	r3, [pc, #32]	; (80100ac <prvProcessReceivedCommands+0x1c0>)
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	1d39      	adds	r1, r7, #4
 8010090:	2200      	movs	r2, #0
 8010092:	4618      	mov	r0, r3
 8010094:	f7fe f8a8 	bl	800e1e8 <xQueueReceive>
 8010098:	4603      	mov	r3, r0
 801009a:	2b00      	cmp	r3, #0
 801009c:	f47f af2a 	bne.w	800fef4 <prvProcessReceivedCommands+0x8>
	}
}
 80100a0:	bf00      	nop
 80100a2:	bf00      	nop
 80100a4:	3730      	adds	r7, #48	; 0x30
 80100a6:	46bd      	mov	sp, r7
 80100a8:	bd80      	pop	{r7, pc}
 80100aa:	bf00      	nop
 80100ac:	20002264 	.word	0x20002264

080100b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b088      	sub	sp, #32
 80100b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80100b6:	e048      	b.n	801014a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80100b8:	4b2d      	ldr	r3, [pc, #180]	; (8010170 <prvSwitchTimerLists+0xc0>)
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	68db      	ldr	r3, [r3, #12]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80100c2:	4b2b      	ldr	r3, [pc, #172]	; (8010170 <prvSwitchTimerLists+0xc0>)
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	68db      	ldr	r3, [r3, #12]
 80100c8:	68db      	ldr	r3, [r3, #12]
 80100ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	3304      	adds	r3, #4
 80100d0:	4618      	mov	r0, r3
 80100d2:	f7fd fc91 	bl	800d9f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	6a1b      	ldr	r3, [r3, #32]
 80100da:	68f8      	ldr	r0, [r7, #12]
 80100dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80100e4:	f003 0304 	and.w	r3, r3, #4
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d02e      	beq.n	801014a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	699b      	ldr	r3, [r3, #24]
 80100f0:	693a      	ldr	r2, [r7, #16]
 80100f2:	4413      	add	r3, r2
 80100f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80100f6:	68ba      	ldr	r2, [r7, #8]
 80100f8:	693b      	ldr	r3, [r7, #16]
 80100fa:	429a      	cmp	r2, r3
 80100fc:	d90e      	bls.n	801011c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	68ba      	ldr	r2, [r7, #8]
 8010102:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	68fa      	ldr	r2, [r7, #12]
 8010108:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801010a:	4b19      	ldr	r3, [pc, #100]	; (8010170 <prvSwitchTimerLists+0xc0>)
 801010c:	681a      	ldr	r2, [r3, #0]
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	3304      	adds	r3, #4
 8010112:	4619      	mov	r1, r3
 8010114:	4610      	mov	r0, r2
 8010116:	f7fd fc36 	bl	800d986 <vListInsert>
 801011a:	e016      	b.n	801014a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801011c:	2300      	movs	r3, #0
 801011e:	9300      	str	r3, [sp, #0]
 8010120:	2300      	movs	r3, #0
 8010122:	693a      	ldr	r2, [r7, #16]
 8010124:	2100      	movs	r1, #0
 8010126:	68f8      	ldr	r0, [r7, #12]
 8010128:	f7ff fd60 	bl	800fbec <xTimerGenericCommand>
 801012c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d10a      	bne.n	801014a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010138:	f383 8811 	msr	BASEPRI, r3
 801013c:	f3bf 8f6f 	isb	sy
 8010140:	f3bf 8f4f 	dsb	sy
 8010144:	603b      	str	r3, [r7, #0]
}
 8010146:	bf00      	nop
 8010148:	e7fe      	b.n	8010148 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801014a:	4b09      	ldr	r3, [pc, #36]	; (8010170 <prvSwitchTimerLists+0xc0>)
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d1b1      	bne.n	80100b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010154:	4b06      	ldr	r3, [pc, #24]	; (8010170 <prvSwitchTimerLists+0xc0>)
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801015a:	4b06      	ldr	r3, [pc, #24]	; (8010174 <prvSwitchTimerLists+0xc4>)
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	4a04      	ldr	r2, [pc, #16]	; (8010170 <prvSwitchTimerLists+0xc0>)
 8010160:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010162:	4a04      	ldr	r2, [pc, #16]	; (8010174 <prvSwitchTimerLists+0xc4>)
 8010164:	697b      	ldr	r3, [r7, #20]
 8010166:	6013      	str	r3, [r2, #0]
}
 8010168:	bf00      	nop
 801016a:	3718      	adds	r7, #24
 801016c:	46bd      	mov	sp, r7
 801016e:	bd80      	pop	{r7, pc}
 8010170:	2000225c 	.word	0x2000225c
 8010174:	20002260 	.word	0x20002260

08010178 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b082      	sub	sp, #8
 801017c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801017e:	f000 f969 	bl	8010454 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010182:	4b15      	ldr	r3, [pc, #84]	; (80101d8 <prvCheckForValidListAndQueue+0x60>)
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d120      	bne.n	80101cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801018a:	4814      	ldr	r0, [pc, #80]	; (80101dc <prvCheckForValidListAndQueue+0x64>)
 801018c:	f7fd fbaa 	bl	800d8e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010190:	4813      	ldr	r0, [pc, #76]	; (80101e0 <prvCheckForValidListAndQueue+0x68>)
 8010192:	f7fd fba7 	bl	800d8e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010196:	4b13      	ldr	r3, [pc, #76]	; (80101e4 <prvCheckForValidListAndQueue+0x6c>)
 8010198:	4a10      	ldr	r2, [pc, #64]	; (80101dc <prvCheckForValidListAndQueue+0x64>)
 801019a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801019c:	4b12      	ldr	r3, [pc, #72]	; (80101e8 <prvCheckForValidListAndQueue+0x70>)
 801019e:	4a10      	ldr	r2, [pc, #64]	; (80101e0 <prvCheckForValidListAndQueue+0x68>)
 80101a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80101a2:	2300      	movs	r3, #0
 80101a4:	9300      	str	r3, [sp, #0]
 80101a6:	4b11      	ldr	r3, [pc, #68]	; (80101ec <prvCheckForValidListAndQueue+0x74>)
 80101a8:	4a11      	ldr	r2, [pc, #68]	; (80101f0 <prvCheckForValidListAndQueue+0x78>)
 80101aa:	2110      	movs	r1, #16
 80101ac:	200a      	movs	r0, #10
 80101ae:	f7fd fcb5 	bl	800db1c <xQueueGenericCreateStatic>
 80101b2:	4603      	mov	r3, r0
 80101b4:	4a08      	ldr	r2, [pc, #32]	; (80101d8 <prvCheckForValidListAndQueue+0x60>)
 80101b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80101b8:	4b07      	ldr	r3, [pc, #28]	; (80101d8 <prvCheckForValidListAndQueue+0x60>)
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d005      	beq.n	80101cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80101c0:	4b05      	ldr	r3, [pc, #20]	; (80101d8 <prvCheckForValidListAndQueue+0x60>)
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	490b      	ldr	r1, [pc, #44]	; (80101f4 <prvCheckForValidListAndQueue+0x7c>)
 80101c6:	4618      	mov	r0, r3
 80101c8:	f7fe fbc6 	bl	800e958 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80101cc:	f000 f972 	bl	80104b4 <vPortExitCritical>
}
 80101d0:	bf00      	nop
 80101d2:	46bd      	mov	sp, r7
 80101d4:	bd80      	pop	{r7, pc}
 80101d6:	bf00      	nop
 80101d8:	20002264 	.word	0x20002264
 80101dc:	20002234 	.word	0x20002234
 80101e0:	20002248 	.word	0x20002248
 80101e4:	2000225c 	.word	0x2000225c
 80101e8:	20002260 	.word	0x20002260
 80101ec:	20002310 	.word	0x20002310
 80101f0:	20002270 	.word	0x20002270
 80101f4:	08014960 	.word	0x08014960

080101f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80101f8:	b480      	push	{r7}
 80101fa:	b085      	sub	sp, #20
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	60f8      	str	r0, [r7, #12]
 8010200:	60b9      	str	r1, [r7, #8]
 8010202:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	3b04      	subs	r3, #4
 8010208:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010210:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	3b04      	subs	r3, #4
 8010216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	f023 0201 	bic.w	r2, r3, #1
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	3b04      	subs	r3, #4
 8010226:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010228:	4a0c      	ldr	r2, [pc, #48]	; (801025c <pxPortInitialiseStack+0x64>)
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	3b14      	subs	r3, #20
 8010232:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010234:	687a      	ldr	r2, [r7, #4]
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	3b04      	subs	r3, #4
 801023e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	f06f 0202 	mvn.w	r2, #2
 8010246:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	3b20      	subs	r3, #32
 801024c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801024e:	68fb      	ldr	r3, [r7, #12]
}
 8010250:	4618      	mov	r0, r3
 8010252:	3714      	adds	r7, #20
 8010254:	46bd      	mov	sp, r7
 8010256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025a:	4770      	bx	lr
 801025c:	08010261 	.word	0x08010261

08010260 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010260:	b480      	push	{r7}
 8010262:	b085      	sub	sp, #20
 8010264:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010266:	2300      	movs	r3, #0
 8010268:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801026a:	4b12      	ldr	r3, [pc, #72]	; (80102b4 <prvTaskExitError+0x54>)
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010272:	d00a      	beq.n	801028a <prvTaskExitError+0x2a>
	__asm volatile
 8010274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010278:	f383 8811 	msr	BASEPRI, r3
 801027c:	f3bf 8f6f 	isb	sy
 8010280:	f3bf 8f4f 	dsb	sy
 8010284:	60fb      	str	r3, [r7, #12]
}
 8010286:	bf00      	nop
 8010288:	e7fe      	b.n	8010288 <prvTaskExitError+0x28>
	__asm volatile
 801028a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801028e:	f383 8811 	msr	BASEPRI, r3
 8010292:	f3bf 8f6f 	isb	sy
 8010296:	f3bf 8f4f 	dsb	sy
 801029a:	60bb      	str	r3, [r7, #8]
}
 801029c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801029e:	bf00      	nop
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d0fc      	beq.n	80102a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80102a6:	bf00      	nop
 80102a8:	bf00      	nop
 80102aa:	3714      	adds	r7, #20
 80102ac:	46bd      	mov	sp, r7
 80102ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b2:	4770      	bx	lr
 80102b4:	20000048 	.word	0x20000048
	...

080102c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80102c0:	4b07      	ldr	r3, [pc, #28]	; (80102e0 <pxCurrentTCBConst2>)
 80102c2:	6819      	ldr	r1, [r3, #0]
 80102c4:	6808      	ldr	r0, [r1, #0]
 80102c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102ca:	f380 8809 	msr	PSP, r0
 80102ce:	f3bf 8f6f 	isb	sy
 80102d2:	f04f 0000 	mov.w	r0, #0
 80102d6:	f380 8811 	msr	BASEPRI, r0
 80102da:	4770      	bx	lr
 80102dc:	f3af 8000 	nop.w

080102e0 <pxCurrentTCBConst2>:
 80102e0:	20001d34 	.word	0x20001d34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80102e4:	bf00      	nop
 80102e6:	bf00      	nop

080102e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80102e8:	4808      	ldr	r0, [pc, #32]	; (801030c <prvPortStartFirstTask+0x24>)
 80102ea:	6800      	ldr	r0, [r0, #0]
 80102ec:	6800      	ldr	r0, [r0, #0]
 80102ee:	f380 8808 	msr	MSP, r0
 80102f2:	f04f 0000 	mov.w	r0, #0
 80102f6:	f380 8814 	msr	CONTROL, r0
 80102fa:	b662      	cpsie	i
 80102fc:	b661      	cpsie	f
 80102fe:	f3bf 8f4f 	dsb	sy
 8010302:	f3bf 8f6f 	isb	sy
 8010306:	df00      	svc	0
 8010308:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801030a:	bf00      	nop
 801030c:	e000ed08 	.word	0xe000ed08

08010310 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b086      	sub	sp, #24
 8010314:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010316:	4b46      	ldr	r3, [pc, #280]	; (8010430 <xPortStartScheduler+0x120>)
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	4a46      	ldr	r2, [pc, #280]	; (8010434 <xPortStartScheduler+0x124>)
 801031c:	4293      	cmp	r3, r2
 801031e:	d10a      	bne.n	8010336 <xPortStartScheduler+0x26>
	__asm volatile
 8010320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010324:	f383 8811 	msr	BASEPRI, r3
 8010328:	f3bf 8f6f 	isb	sy
 801032c:	f3bf 8f4f 	dsb	sy
 8010330:	613b      	str	r3, [r7, #16]
}
 8010332:	bf00      	nop
 8010334:	e7fe      	b.n	8010334 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010336:	4b3e      	ldr	r3, [pc, #248]	; (8010430 <xPortStartScheduler+0x120>)
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	4a3f      	ldr	r2, [pc, #252]	; (8010438 <xPortStartScheduler+0x128>)
 801033c:	4293      	cmp	r3, r2
 801033e:	d10a      	bne.n	8010356 <xPortStartScheduler+0x46>
	__asm volatile
 8010340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010344:	f383 8811 	msr	BASEPRI, r3
 8010348:	f3bf 8f6f 	isb	sy
 801034c:	f3bf 8f4f 	dsb	sy
 8010350:	60fb      	str	r3, [r7, #12]
}
 8010352:	bf00      	nop
 8010354:	e7fe      	b.n	8010354 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010356:	4b39      	ldr	r3, [pc, #228]	; (801043c <xPortStartScheduler+0x12c>)
 8010358:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801035a:	697b      	ldr	r3, [r7, #20]
 801035c:	781b      	ldrb	r3, [r3, #0]
 801035e:	b2db      	uxtb	r3, r3
 8010360:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010362:	697b      	ldr	r3, [r7, #20]
 8010364:	22ff      	movs	r2, #255	; 0xff
 8010366:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010368:	697b      	ldr	r3, [r7, #20]
 801036a:	781b      	ldrb	r3, [r3, #0]
 801036c:	b2db      	uxtb	r3, r3
 801036e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010370:	78fb      	ldrb	r3, [r7, #3]
 8010372:	b2db      	uxtb	r3, r3
 8010374:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010378:	b2da      	uxtb	r2, r3
 801037a:	4b31      	ldr	r3, [pc, #196]	; (8010440 <xPortStartScheduler+0x130>)
 801037c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801037e:	4b31      	ldr	r3, [pc, #196]	; (8010444 <xPortStartScheduler+0x134>)
 8010380:	2207      	movs	r2, #7
 8010382:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010384:	e009      	b.n	801039a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010386:	4b2f      	ldr	r3, [pc, #188]	; (8010444 <xPortStartScheduler+0x134>)
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	3b01      	subs	r3, #1
 801038c:	4a2d      	ldr	r2, [pc, #180]	; (8010444 <xPortStartScheduler+0x134>)
 801038e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010390:	78fb      	ldrb	r3, [r7, #3]
 8010392:	b2db      	uxtb	r3, r3
 8010394:	005b      	lsls	r3, r3, #1
 8010396:	b2db      	uxtb	r3, r3
 8010398:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801039a:	78fb      	ldrb	r3, [r7, #3]
 801039c:	b2db      	uxtb	r3, r3
 801039e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80103a2:	2b80      	cmp	r3, #128	; 0x80
 80103a4:	d0ef      	beq.n	8010386 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80103a6:	4b27      	ldr	r3, [pc, #156]	; (8010444 <xPortStartScheduler+0x134>)
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	f1c3 0307 	rsb	r3, r3, #7
 80103ae:	2b04      	cmp	r3, #4
 80103b0:	d00a      	beq.n	80103c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80103b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103b6:	f383 8811 	msr	BASEPRI, r3
 80103ba:	f3bf 8f6f 	isb	sy
 80103be:	f3bf 8f4f 	dsb	sy
 80103c2:	60bb      	str	r3, [r7, #8]
}
 80103c4:	bf00      	nop
 80103c6:	e7fe      	b.n	80103c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80103c8:	4b1e      	ldr	r3, [pc, #120]	; (8010444 <xPortStartScheduler+0x134>)
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	021b      	lsls	r3, r3, #8
 80103ce:	4a1d      	ldr	r2, [pc, #116]	; (8010444 <xPortStartScheduler+0x134>)
 80103d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80103d2:	4b1c      	ldr	r3, [pc, #112]	; (8010444 <xPortStartScheduler+0x134>)
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80103da:	4a1a      	ldr	r2, [pc, #104]	; (8010444 <xPortStartScheduler+0x134>)
 80103dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	b2da      	uxtb	r2, r3
 80103e2:	697b      	ldr	r3, [r7, #20]
 80103e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80103e6:	4b18      	ldr	r3, [pc, #96]	; (8010448 <xPortStartScheduler+0x138>)
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	4a17      	ldr	r2, [pc, #92]	; (8010448 <xPortStartScheduler+0x138>)
 80103ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80103f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80103f2:	4b15      	ldr	r3, [pc, #84]	; (8010448 <xPortStartScheduler+0x138>)
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	4a14      	ldr	r2, [pc, #80]	; (8010448 <xPortStartScheduler+0x138>)
 80103f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80103fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80103fe:	f000 f8dd 	bl	80105bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010402:	4b12      	ldr	r3, [pc, #72]	; (801044c <xPortStartScheduler+0x13c>)
 8010404:	2200      	movs	r2, #0
 8010406:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010408:	f000 f8fc 	bl	8010604 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801040c:	4b10      	ldr	r3, [pc, #64]	; (8010450 <xPortStartScheduler+0x140>)
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	4a0f      	ldr	r2, [pc, #60]	; (8010450 <xPortStartScheduler+0x140>)
 8010412:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010416:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010418:	f7ff ff66 	bl	80102e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801041c:	f7fe ff54 	bl	800f2c8 <vTaskSwitchContext>
	prvTaskExitError();
 8010420:	f7ff ff1e 	bl	8010260 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010424:	2300      	movs	r3, #0
}
 8010426:	4618      	mov	r0, r3
 8010428:	3718      	adds	r7, #24
 801042a:	46bd      	mov	sp, r7
 801042c:	bd80      	pop	{r7, pc}
 801042e:	bf00      	nop
 8010430:	e000ed00 	.word	0xe000ed00
 8010434:	410fc271 	.word	0x410fc271
 8010438:	410fc270 	.word	0x410fc270
 801043c:	e000e400 	.word	0xe000e400
 8010440:	20002360 	.word	0x20002360
 8010444:	20002364 	.word	0x20002364
 8010448:	e000ed20 	.word	0xe000ed20
 801044c:	20000048 	.word	0x20000048
 8010450:	e000ef34 	.word	0xe000ef34

08010454 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010454:	b480      	push	{r7}
 8010456:	b083      	sub	sp, #12
 8010458:	af00      	add	r7, sp, #0
	__asm volatile
 801045a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801045e:	f383 8811 	msr	BASEPRI, r3
 8010462:	f3bf 8f6f 	isb	sy
 8010466:	f3bf 8f4f 	dsb	sy
 801046a:	607b      	str	r3, [r7, #4]
}
 801046c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801046e:	4b0f      	ldr	r3, [pc, #60]	; (80104ac <vPortEnterCritical+0x58>)
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	3301      	adds	r3, #1
 8010474:	4a0d      	ldr	r2, [pc, #52]	; (80104ac <vPortEnterCritical+0x58>)
 8010476:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010478:	4b0c      	ldr	r3, [pc, #48]	; (80104ac <vPortEnterCritical+0x58>)
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	2b01      	cmp	r3, #1
 801047e:	d10f      	bne.n	80104a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010480:	4b0b      	ldr	r3, [pc, #44]	; (80104b0 <vPortEnterCritical+0x5c>)
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	b2db      	uxtb	r3, r3
 8010486:	2b00      	cmp	r3, #0
 8010488:	d00a      	beq.n	80104a0 <vPortEnterCritical+0x4c>
	__asm volatile
 801048a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801048e:	f383 8811 	msr	BASEPRI, r3
 8010492:	f3bf 8f6f 	isb	sy
 8010496:	f3bf 8f4f 	dsb	sy
 801049a:	603b      	str	r3, [r7, #0]
}
 801049c:	bf00      	nop
 801049e:	e7fe      	b.n	801049e <vPortEnterCritical+0x4a>
	}
}
 80104a0:	bf00      	nop
 80104a2:	370c      	adds	r7, #12
 80104a4:	46bd      	mov	sp, r7
 80104a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104aa:	4770      	bx	lr
 80104ac:	20000048 	.word	0x20000048
 80104b0:	e000ed04 	.word	0xe000ed04

080104b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80104b4:	b480      	push	{r7}
 80104b6:	b083      	sub	sp, #12
 80104b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80104ba:	4b12      	ldr	r3, [pc, #72]	; (8010504 <vPortExitCritical+0x50>)
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d10a      	bne.n	80104d8 <vPortExitCritical+0x24>
	__asm volatile
 80104c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104c6:	f383 8811 	msr	BASEPRI, r3
 80104ca:	f3bf 8f6f 	isb	sy
 80104ce:	f3bf 8f4f 	dsb	sy
 80104d2:	607b      	str	r3, [r7, #4]
}
 80104d4:	bf00      	nop
 80104d6:	e7fe      	b.n	80104d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80104d8:	4b0a      	ldr	r3, [pc, #40]	; (8010504 <vPortExitCritical+0x50>)
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	3b01      	subs	r3, #1
 80104de:	4a09      	ldr	r2, [pc, #36]	; (8010504 <vPortExitCritical+0x50>)
 80104e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80104e2:	4b08      	ldr	r3, [pc, #32]	; (8010504 <vPortExitCritical+0x50>)
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d105      	bne.n	80104f6 <vPortExitCritical+0x42>
 80104ea:	2300      	movs	r3, #0
 80104ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80104ee:	683b      	ldr	r3, [r7, #0]
 80104f0:	f383 8811 	msr	BASEPRI, r3
}
 80104f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80104f6:	bf00      	nop
 80104f8:	370c      	adds	r7, #12
 80104fa:	46bd      	mov	sp, r7
 80104fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010500:	4770      	bx	lr
 8010502:	bf00      	nop
 8010504:	20000048 	.word	0x20000048
	...

08010510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010510:	f3ef 8009 	mrs	r0, PSP
 8010514:	f3bf 8f6f 	isb	sy
 8010518:	4b15      	ldr	r3, [pc, #84]	; (8010570 <pxCurrentTCBConst>)
 801051a:	681a      	ldr	r2, [r3, #0]
 801051c:	f01e 0f10 	tst.w	lr, #16
 8010520:	bf08      	it	eq
 8010522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801052a:	6010      	str	r0, [r2, #0]
 801052c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010530:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010534:	f380 8811 	msr	BASEPRI, r0
 8010538:	f3bf 8f4f 	dsb	sy
 801053c:	f3bf 8f6f 	isb	sy
 8010540:	f7fe fec2 	bl	800f2c8 <vTaskSwitchContext>
 8010544:	f04f 0000 	mov.w	r0, #0
 8010548:	f380 8811 	msr	BASEPRI, r0
 801054c:	bc09      	pop	{r0, r3}
 801054e:	6819      	ldr	r1, [r3, #0]
 8010550:	6808      	ldr	r0, [r1, #0]
 8010552:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010556:	f01e 0f10 	tst.w	lr, #16
 801055a:	bf08      	it	eq
 801055c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010560:	f380 8809 	msr	PSP, r0
 8010564:	f3bf 8f6f 	isb	sy
 8010568:	4770      	bx	lr
 801056a:	bf00      	nop
 801056c:	f3af 8000 	nop.w

08010570 <pxCurrentTCBConst>:
 8010570:	20001d34 	.word	0x20001d34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010574:	bf00      	nop
 8010576:	bf00      	nop

08010578 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b082      	sub	sp, #8
 801057c:	af00      	add	r7, sp, #0
	__asm volatile
 801057e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010582:	f383 8811 	msr	BASEPRI, r3
 8010586:	f3bf 8f6f 	isb	sy
 801058a:	f3bf 8f4f 	dsb	sy
 801058e:	607b      	str	r3, [r7, #4]
}
 8010590:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010592:	f7fe fddf 	bl	800f154 <xTaskIncrementTick>
 8010596:	4603      	mov	r3, r0
 8010598:	2b00      	cmp	r3, #0
 801059a:	d003      	beq.n	80105a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801059c:	4b06      	ldr	r3, [pc, #24]	; (80105b8 <xPortSysTickHandler+0x40>)
 801059e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105a2:	601a      	str	r2, [r3, #0]
 80105a4:	2300      	movs	r3, #0
 80105a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80105a8:	683b      	ldr	r3, [r7, #0]
 80105aa:	f383 8811 	msr	BASEPRI, r3
}
 80105ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80105b0:	bf00      	nop
 80105b2:	3708      	adds	r7, #8
 80105b4:	46bd      	mov	sp, r7
 80105b6:	bd80      	pop	{r7, pc}
 80105b8:	e000ed04 	.word	0xe000ed04

080105bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80105bc:	b480      	push	{r7}
 80105be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80105c0:	4b0b      	ldr	r3, [pc, #44]	; (80105f0 <vPortSetupTimerInterrupt+0x34>)
 80105c2:	2200      	movs	r2, #0
 80105c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80105c6:	4b0b      	ldr	r3, [pc, #44]	; (80105f4 <vPortSetupTimerInterrupt+0x38>)
 80105c8:	2200      	movs	r2, #0
 80105ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80105cc:	4b0a      	ldr	r3, [pc, #40]	; (80105f8 <vPortSetupTimerInterrupt+0x3c>)
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	4a0a      	ldr	r2, [pc, #40]	; (80105fc <vPortSetupTimerInterrupt+0x40>)
 80105d2:	fba2 2303 	umull	r2, r3, r2, r3
 80105d6:	099b      	lsrs	r3, r3, #6
 80105d8:	4a09      	ldr	r2, [pc, #36]	; (8010600 <vPortSetupTimerInterrupt+0x44>)
 80105da:	3b01      	subs	r3, #1
 80105dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80105de:	4b04      	ldr	r3, [pc, #16]	; (80105f0 <vPortSetupTimerInterrupt+0x34>)
 80105e0:	2207      	movs	r2, #7
 80105e2:	601a      	str	r2, [r3, #0]
}
 80105e4:	bf00      	nop
 80105e6:	46bd      	mov	sp, r7
 80105e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ec:	4770      	bx	lr
 80105ee:	bf00      	nop
 80105f0:	e000e010 	.word	0xe000e010
 80105f4:	e000e018 	.word	0xe000e018
 80105f8:	20000000 	.word	0x20000000
 80105fc:	10624dd3 	.word	0x10624dd3
 8010600:	e000e014 	.word	0xe000e014

08010604 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010604:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010614 <vPortEnableVFP+0x10>
 8010608:	6801      	ldr	r1, [r0, #0]
 801060a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801060e:	6001      	str	r1, [r0, #0]
 8010610:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010612:	bf00      	nop
 8010614:	e000ed88 	.word	0xe000ed88

08010618 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010618:	b480      	push	{r7}
 801061a:	b085      	sub	sp, #20
 801061c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801061e:	f3ef 8305 	mrs	r3, IPSR
 8010622:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	2b0f      	cmp	r3, #15
 8010628:	d914      	bls.n	8010654 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801062a:	4a17      	ldr	r2, [pc, #92]	; (8010688 <vPortValidateInterruptPriority+0x70>)
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	4413      	add	r3, r2
 8010630:	781b      	ldrb	r3, [r3, #0]
 8010632:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010634:	4b15      	ldr	r3, [pc, #84]	; (801068c <vPortValidateInterruptPriority+0x74>)
 8010636:	781b      	ldrb	r3, [r3, #0]
 8010638:	7afa      	ldrb	r2, [r7, #11]
 801063a:	429a      	cmp	r2, r3
 801063c:	d20a      	bcs.n	8010654 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801063e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010642:	f383 8811 	msr	BASEPRI, r3
 8010646:	f3bf 8f6f 	isb	sy
 801064a:	f3bf 8f4f 	dsb	sy
 801064e:	607b      	str	r3, [r7, #4]
}
 8010650:	bf00      	nop
 8010652:	e7fe      	b.n	8010652 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010654:	4b0e      	ldr	r3, [pc, #56]	; (8010690 <vPortValidateInterruptPriority+0x78>)
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801065c:	4b0d      	ldr	r3, [pc, #52]	; (8010694 <vPortValidateInterruptPriority+0x7c>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	429a      	cmp	r2, r3
 8010662:	d90a      	bls.n	801067a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010668:	f383 8811 	msr	BASEPRI, r3
 801066c:	f3bf 8f6f 	isb	sy
 8010670:	f3bf 8f4f 	dsb	sy
 8010674:	603b      	str	r3, [r7, #0]
}
 8010676:	bf00      	nop
 8010678:	e7fe      	b.n	8010678 <vPortValidateInterruptPriority+0x60>
	}
 801067a:	bf00      	nop
 801067c:	3714      	adds	r7, #20
 801067e:	46bd      	mov	sp, r7
 8010680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010684:	4770      	bx	lr
 8010686:	bf00      	nop
 8010688:	e000e3f0 	.word	0xe000e3f0
 801068c:	20002360 	.word	0x20002360
 8010690:	e000ed0c 	.word	0xe000ed0c
 8010694:	20002364 	.word	0x20002364

08010698 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b08a      	sub	sp, #40	; 0x28
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80106a0:	2300      	movs	r3, #0
 80106a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80106a4:	f7fe fc9a 	bl	800efdc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80106a8:	4b5b      	ldr	r3, [pc, #364]	; (8010818 <pvPortMalloc+0x180>)
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d101      	bne.n	80106b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80106b0:	f000 f920 	bl	80108f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80106b4:	4b59      	ldr	r3, [pc, #356]	; (801081c <pvPortMalloc+0x184>)
 80106b6:	681a      	ldr	r2, [r3, #0]
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	4013      	ands	r3, r2
 80106bc:	2b00      	cmp	r3, #0
 80106be:	f040 8093 	bne.w	80107e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d01d      	beq.n	8010704 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80106c8:	2208      	movs	r2, #8
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	4413      	add	r3, r2
 80106ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f003 0307 	and.w	r3, r3, #7
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d014      	beq.n	8010704 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	f023 0307 	bic.w	r3, r3, #7
 80106e0:	3308      	adds	r3, #8
 80106e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	f003 0307 	and.w	r3, r3, #7
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d00a      	beq.n	8010704 <pvPortMalloc+0x6c>
	__asm volatile
 80106ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106f2:	f383 8811 	msr	BASEPRI, r3
 80106f6:	f3bf 8f6f 	isb	sy
 80106fa:	f3bf 8f4f 	dsb	sy
 80106fe:	617b      	str	r3, [r7, #20]
}
 8010700:	bf00      	nop
 8010702:	e7fe      	b.n	8010702 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d06e      	beq.n	80107e8 <pvPortMalloc+0x150>
 801070a:	4b45      	ldr	r3, [pc, #276]	; (8010820 <pvPortMalloc+0x188>)
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	687a      	ldr	r2, [r7, #4]
 8010710:	429a      	cmp	r2, r3
 8010712:	d869      	bhi.n	80107e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010714:	4b43      	ldr	r3, [pc, #268]	; (8010824 <pvPortMalloc+0x18c>)
 8010716:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010718:	4b42      	ldr	r3, [pc, #264]	; (8010824 <pvPortMalloc+0x18c>)
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801071e:	e004      	b.n	801072a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010722:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801072a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801072c:	685b      	ldr	r3, [r3, #4]
 801072e:	687a      	ldr	r2, [r7, #4]
 8010730:	429a      	cmp	r2, r3
 8010732:	d903      	bls.n	801073c <pvPortMalloc+0xa4>
 8010734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d1f1      	bne.n	8010720 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801073c:	4b36      	ldr	r3, [pc, #216]	; (8010818 <pvPortMalloc+0x180>)
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010742:	429a      	cmp	r2, r3
 8010744:	d050      	beq.n	80107e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010746:	6a3b      	ldr	r3, [r7, #32]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	2208      	movs	r2, #8
 801074c:	4413      	add	r3, r2
 801074e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010752:	681a      	ldr	r2, [r3, #0]
 8010754:	6a3b      	ldr	r3, [r7, #32]
 8010756:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801075a:	685a      	ldr	r2, [r3, #4]
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	1ad2      	subs	r2, r2, r3
 8010760:	2308      	movs	r3, #8
 8010762:	005b      	lsls	r3, r3, #1
 8010764:	429a      	cmp	r2, r3
 8010766:	d91f      	bls.n	80107a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	4413      	add	r3, r2
 801076e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010770:	69bb      	ldr	r3, [r7, #24]
 8010772:	f003 0307 	and.w	r3, r3, #7
 8010776:	2b00      	cmp	r3, #0
 8010778:	d00a      	beq.n	8010790 <pvPortMalloc+0xf8>
	__asm volatile
 801077a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801077e:	f383 8811 	msr	BASEPRI, r3
 8010782:	f3bf 8f6f 	isb	sy
 8010786:	f3bf 8f4f 	dsb	sy
 801078a:	613b      	str	r3, [r7, #16]
}
 801078c:	bf00      	nop
 801078e:	e7fe      	b.n	801078e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010792:	685a      	ldr	r2, [r3, #4]
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	1ad2      	subs	r2, r2, r3
 8010798:	69bb      	ldr	r3, [r7, #24]
 801079a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801079c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801079e:	687a      	ldr	r2, [r7, #4]
 80107a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80107a2:	69b8      	ldr	r0, [r7, #24]
 80107a4:	f000 f908 	bl	80109b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80107a8:	4b1d      	ldr	r3, [pc, #116]	; (8010820 <pvPortMalloc+0x188>)
 80107aa:	681a      	ldr	r2, [r3, #0]
 80107ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ae:	685b      	ldr	r3, [r3, #4]
 80107b0:	1ad3      	subs	r3, r2, r3
 80107b2:	4a1b      	ldr	r2, [pc, #108]	; (8010820 <pvPortMalloc+0x188>)
 80107b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80107b6:	4b1a      	ldr	r3, [pc, #104]	; (8010820 <pvPortMalloc+0x188>)
 80107b8:	681a      	ldr	r2, [r3, #0]
 80107ba:	4b1b      	ldr	r3, [pc, #108]	; (8010828 <pvPortMalloc+0x190>)
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	429a      	cmp	r2, r3
 80107c0:	d203      	bcs.n	80107ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80107c2:	4b17      	ldr	r3, [pc, #92]	; (8010820 <pvPortMalloc+0x188>)
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	4a18      	ldr	r2, [pc, #96]	; (8010828 <pvPortMalloc+0x190>)
 80107c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80107ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107cc:	685a      	ldr	r2, [r3, #4]
 80107ce:	4b13      	ldr	r3, [pc, #76]	; (801081c <pvPortMalloc+0x184>)
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	431a      	orrs	r2, r3
 80107d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80107d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107da:	2200      	movs	r2, #0
 80107dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80107de:	4b13      	ldr	r3, [pc, #76]	; (801082c <pvPortMalloc+0x194>)
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	3301      	adds	r3, #1
 80107e4:	4a11      	ldr	r2, [pc, #68]	; (801082c <pvPortMalloc+0x194>)
 80107e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80107e8:	f7fe fc06 	bl	800eff8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80107ec:	69fb      	ldr	r3, [r7, #28]
 80107ee:	f003 0307 	and.w	r3, r3, #7
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d00a      	beq.n	801080c <pvPortMalloc+0x174>
	__asm volatile
 80107f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107fa:	f383 8811 	msr	BASEPRI, r3
 80107fe:	f3bf 8f6f 	isb	sy
 8010802:	f3bf 8f4f 	dsb	sy
 8010806:	60fb      	str	r3, [r7, #12]
}
 8010808:	bf00      	nop
 801080a:	e7fe      	b.n	801080a <pvPortMalloc+0x172>
	return pvReturn;
 801080c:	69fb      	ldr	r3, [r7, #28]
}
 801080e:	4618      	mov	r0, r3
 8010810:	3728      	adds	r7, #40	; 0x28
 8010812:	46bd      	mov	sp, r7
 8010814:	bd80      	pop	{r7, pc}
 8010816:	bf00      	nop
 8010818:	20005e08 	.word	0x20005e08
 801081c:	20005e1c 	.word	0x20005e1c
 8010820:	20005e0c 	.word	0x20005e0c
 8010824:	20005e00 	.word	0x20005e00
 8010828:	20005e10 	.word	0x20005e10
 801082c:	20005e14 	.word	0x20005e14

08010830 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010830:	b580      	push	{r7, lr}
 8010832:	b086      	sub	sp, #24
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d04d      	beq.n	80108de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010842:	2308      	movs	r3, #8
 8010844:	425b      	negs	r3, r3
 8010846:	697a      	ldr	r2, [r7, #20]
 8010848:	4413      	add	r3, r2
 801084a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801084c:	697b      	ldr	r3, [r7, #20]
 801084e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010850:	693b      	ldr	r3, [r7, #16]
 8010852:	685a      	ldr	r2, [r3, #4]
 8010854:	4b24      	ldr	r3, [pc, #144]	; (80108e8 <vPortFree+0xb8>)
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	4013      	ands	r3, r2
 801085a:	2b00      	cmp	r3, #0
 801085c:	d10a      	bne.n	8010874 <vPortFree+0x44>
	__asm volatile
 801085e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010862:	f383 8811 	msr	BASEPRI, r3
 8010866:	f3bf 8f6f 	isb	sy
 801086a:	f3bf 8f4f 	dsb	sy
 801086e:	60fb      	str	r3, [r7, #12]
}
 8010870:	bf00      	nop
 8010872:	e7fe      	b.n	8010872 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010874:	693b      	ldr	r3, [r7, #16]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d00a      	beq.n	8010892 <vPortFree+0x62>
	__asm volatile
 801087c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010880:	f383 8811 	msr	BASEPRI, r3
 8010884:	f3bf 8f6f 	isb	sy
 8010888:	f3bf 8f4f 	dsb	sy
 801088c:	60bb      	str	r3, [r7, #8]
}
 801088e:	bf00      	nop
 8010890:	e7fe      	b.n	8010890 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010892:	693b      	ldr	r3, [r7, #16]
 8010894:	685a      	ldr	r2, [r3, #4]
 8010896:	4b14      	ldr	r3, [pc, #80]	; (80108e8 <vPortFree+0xb8>)
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	4013      	ands	r3, r2
 801089c:	2b00      	cmp	r3, #0
 801089e:	d01e      	beq.n	80108de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80108a0:	693b      	ldr	r3, [r7, #16]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d11a      	bne.n	80108de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80108a8:	693b      	ldr	r3, [r7, #16]
 80108aa:	685a      	ldr	r2, [r3, #4]
 80108ac:	4b0e      	ldr	r3, [pc, #56]	; (80108e8 <vPortFree+0xb8>)
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	43db      	mvns	r3, r3
 80108b2:	401a      	ands	r2, r3
 80108b4:	693b      	ldr	r3, [r7, #16]
 80108b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80108b8:	f7fe fb90 	bl	800efdc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80108bc:	693b      	ldr	r3, [r7, #16]
 80108be:	685a      	ldr	r2, [r3, #4]
 80108c0:	4b0a      	ldr	r3, [pc, #40]	; (80108ec <vPortFree+0xbc>)
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	4413      	add	r3, r2
 80108c6:	4a09      	ldr	r2, [pc, #36]	; (80108ec <vPortFree+0xbc>)
 80108c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80108ca:	6938      	ldr	r0, [r7, #16]
 80108cc:	f000 f874 	bl	80109b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80108d0:	4b07      	ldr	r3, [pc, #28]	; (80108f0 <vPortFree+0xc0>)
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	3301      	adds	r3, #1
 80108d6:	4a06      	ldr	r2, [pc, #24]	; (80108f0 <vPortFree+0xc0>)
 80108d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80108da:	f7fe fb8d 	bl	800eff8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80108de:	bf00      	nop
 80108e0:	3718      	adds	r7, #24
 80108e2:	46bd      	mov	sp, r7
 80108e4:	bd80      	pop	{r7, pc}
 80108e6:	bf00      	nop
 80108e8:	20005e1c 	.word	0x20005e1c
 80108ec:	20005e0c 	.word	0x20005e0c
 80108f0:	20005e18 	.word	0x20005e18

080108f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80108f4:	b480      	push	{r7}
 80108f6:	b085      	sub	sp, #20
 80108f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80108fa:	f643 2398 	movw	r3, #15000	; 0x3a98
 80108fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010900:	4b27      	ldr	r3, [pc, #156]	; (80109a0 <prvHeapInit+0xac>)
 8010902:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	f003 0307 	and.w	r3, r3, #7
 801090a:	2b00      	cmp	r3, #0
 801090c:	d00c      	beq.n	8010928 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	3307      	adds	r3, #7
 8010912:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	f023 0307 	bic.w	r3, r3, #7
 801091a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801091c:	68ba      	ldr	r2, [r7, #8]
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	1ad3      	subs	r3, r2, r3
 8010922:	4a1f      	ldr	r2, [pc, #124]	; (80109a0 <prvHeapInit+0xac>)
 8010924:	4413      	add	r3, r2
 8010926:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801092c:	4a1d      	ldr	r2, [pc, #116]	; (80109a4 <prvHeapInit+0xb0>)
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010932:	4b1c      	ldr	r3, [pc, #112]	; (80109a4 <prvHeapInit+0xb0>)
 8010934:	2200      	movs	r2, #0
 8010936:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	68ba      	ldr	r2, [r7, #8]
 801093c:	4413      	add	r3, r2
 801093e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010940:	2208      	movs	r2, #8
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	1a9b      	subs	r3, r3, r2
 8010946:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	f023 0307 	bic.w	r3, r3, #7
 801094e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	4a15      	ldr	r2, [pc, #84]	; (80109a8 <prvHeapInit+0xb4>)
 8010954:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010956:	4b14      	ldr	r3, [pc, #80]	; (80109a8 <prvHeapInit+0xb4>)
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	2200      	movs	r2, #0
 801095c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801095e:	4b12      	ldr	r3, [pc, #72]	; (80109a8 <prvHeapInit+0xb4>)
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	2200      	movs	r2, #0
 8010964:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801096a:	683b      	ldr	r3, [r7, #0]
 801096c:	68fa      	ldr	r2, [r7, #12]
 801096e:	1ad2      	subs	r2, r2, r3
 8010970:	683b      	ldr	r3, [r7, #0]
 8010972:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010974:	4b0c      	ldr	r3, [pc, #48]	; (80109a8 <prvHeapInit+0xb4>)
 8010976:	681a      	ldr	r2, [r3, #0]
 8010978:	683b      	ldr	r3, [r7, #0]
 801097a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801097c:	683b      	ldr	r3, [r7, #0]
 801097e:	685b      	ldr	r3, [r3, #4]
 8010980:	4a0a      	ldr	r2, [pc, #40]	; (80109ac <prvHeapInit+0xb8>)
 8010982:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010984:	683b      	ldr	r3, [r7, #0]
 8010986:	685b      	ldr	r3, [r3, #4]
 8010988:	4a09      	ldr	r2, [pc, #36]	; (80109b0 <prvHeapInit+0xbc>)
 801098a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801098c:	4b09      	ldr	r3, [pc, #36]	; (80109b4 <prvHeapInit+0xc0>)
 801098e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010992:	601a      	str	r2, [r3, #0]
}
 8010994:	bf00      	nop
 8010996:	3714      	adds	r7, #20
 8010998:	46bd      	mov	sp, r7
 801099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099e:	4770      	bx	lr
 80109a0:	20002368 	.word	0x20002368
 80109a4:	20005e00 	.word	0x20005e00
 80109a8:	20005e08 	.word	0x20005e08
 80109ac:	20005e10 	.word	0x20005e10
 80109b0:	20005e0c 	.word	0x20005e0c
 80109b4:	20005e1c 	.word	0x20005e1c

080109b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80109b8:	b480      	push	{r7}
 80109ba:	b085      	sub	sp, #20
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80109c0:	4b28      	ldr	r3, [pc, #160]	; (8010a64 <prvInsertBlockIntoFreeList+0xac>)
 80109c2:	60fb      	str	r3, [r7, #12]
 80109c4:	e002      	b.n	80109cc <prvInsertBlockIntoFreeList+0x14>
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	60fb      	str	r3, [r7, #12]
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	687a      	ldr	r2, [r7, #4]
 80109d2:	429a      	cmp	r2, r3
 80109d4:	d8f7      	bhi.n	80109c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	685b      	ldr	r3, [r3, #4]
 80109de:	68ba      	ldr	r2, [r7, #8]
 80109e0:	4413      	add	r3, r2
 80109e2:	687a      	ldr	r2, [r7, #4]
 80109e4:	429a      	cmp	r2, r3
 80109e6:	d108      	bne.n	80109fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	685a      	ldr	r2, [r3, #4]
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	685b      	ldr	r3, [r3, #4]
 80109f0:	441a      	add	r2, r3
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	685b      	ldr	r3, [r3, #4]
 8010a02:	68ba      	ldr	r2, [r7, #8]
 8010a04:	441a      	add	r2, r3
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	429a      	cmp	r2, r3
 8010a0c:	d118      	bne.n	8010a40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	681a      	ldr	r2, [r3, #0]
 8010a12:	4b15      	ldr	r3, [pc, #84]	; (8010a68 <prvInsertBlockIntoFreeList+0xb0>)
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	429a      	cmp	r2, r3
 8010a18:	d00d      	beq.n	8010a36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	685a      	ldr	r2, [r3, #4]
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	685b      	ldr	r3, [r3, #4]
 8010a24:	441a      	add	r2, r3
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	681a      	ldr	r2, [r3, #0]
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	601a      	str	r2, [r3, #0]
 8010a34:	e008      	b.n	8010a48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010a36:	4b0c      	ldr	r3, [pc, #48]	; (8010a68 <prvInsertBlockIntoFreeList+0xb0>)
 8010a38:	681a      	ldr	r2, [r3, #0]
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	601a      	str	r2, [r3, #0]
 8010a3e:	e003      	b.n	8010a48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	681a      	ldr	r2, [r3, #0]
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010a48:	68fa      	ldr	r2, [r7, #12]
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	429a      	cmp	r2, r3
 8010a4e:	d002      	beq.n	8010a56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	687a      	ldr	r2, [r7, #4]
 8010a54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010a56:	bf00      	nop
 8010a58:	3714      	adds	r7, #20
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a60:	4770      	bx	lr
 8010a62:	bf00      	nop
 8010a64:	20005e00 	.word	0x20005e00
 8010a68:	20005e08 	.word	0x20005e08

08010a6c <_ZdlPvj>:
 8010a6c:	f000 b814 	b.w	8010a98 <_ZdlPv>

08010a70 <_Znwj>:
 8010a70:	2801      	cmp	r0, #1
 8010a72:	bf38      	it	cc
 8010a74:	2001      	movcc	r0, #1
 8010a76:	b510      	push	{r4, lr}
 8010a78:	4604      	mov	r4, r0
 8010a7a:	4620      	mov	r0, r4
 8010a7c:	f000 f85e 	bl	8010b3c <malloc>
 8010a80:	b930      	cbnz	r0, 8010a90 <_Znwj+0x20>
 8010a82:	f000 f81d 	bl	8010ac0 <_ZSt15get_new_handlerv>
 8010a86:	b908      	cbnz	r0, 8010a8c <_Znwj+0x1c>
 8010a88:	f000 f822 	bl	8010ad0 <abort>
 8010a8c:	4780      	blx	r0
 8010a8e:	e7f4      	b.n	8010a7a <_Znwj+0xa>
 8010a90:	bd10      	pop	{r4, pc}

08010a92 <__cxa_pure_virtual>:
 8010a92:	b508      	push	{r3, lr}
 8010a94:	f000 f80e 	bl	8010ab4 <_ZSt9terminatev>

08010a98 <_ZdlPv>:
 8010a98:	f000 b858 	b.w	8010b4c <free>

08010a9c <_ZN10__cxxabiv111__terminateEPFvvE>:
 8010a9c:	b508      	push	{r3, lr}
 8010a9e:	4780      	blx	r0
 8010aa0:	f000 f816 	bl	8010ad0 <abort>

08010aa4 <_ZSt13get_terminatev>:
 8010aa4:	4b02      	ldr	r3, [pc, #8]	; (8010ab0 <_ZSt13get_terminatev+0xc>)
 8010aa6:	6818      	ldr	r0, [r3, #0]
 8010aa8:	f3bf 8f5b 	dmb	ish
 8010aac:	4770      	bx	lr
 8010aae:	bf00      	nop
 8010ab0:	2000004c 	.word	0x2000004c

08010ab4 <_ZSt9terminatev>:
 8010ab4:	b508      	push	{r3, lr}
 8010ab6:	f7ff fff5 	bl	8010aa4 <_ZSt13get_terminatev>
 8010aba:	f7ff ffef 	bl	8010a9c <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08010ac0 <_ZSt15get_new_handlerv>:
 8010ac0:	4b02      	ldr	r3, [pc, #8]	; (8010acc <_ZSt15get_new_handlerv+0xc>)
 8010ac2:	6818      	ldr	r0, [r3, #0]
 8010ac4:	f3bf 8f5b 	dmb	ish
 8010ac8:	4770      	bx	lr
 8010aca:	bf00      	nop
 8010acc:	20005e20 	.word	0x20005e20

08010ad0 <abort>:
 8010ad0:	b508      	push	{r3, lr}
 8010ad2:	2006      	movs	r0, #6
 8010ad4:	f000 fe68 	bl	80117a8 <raise>
 8010ad8:	2001      	movs	r0, #1
 8010ada:	f7f2 fe2d 	bl	8003738 <_exit>

08010ade <atoi>:
 8010ade:	220a      	movs	r2, #10
 8010ae0:	2100      	movs	r1, #0
 8010ae2:	f000 bff7 	b.w	8011ad4 <strtol>
	...

08010ae8 <__errno>:
 8010ae8:	4b01      	ldr	r3, [pc, #4]	; (8010af0 <__errno+0x8>)
 8010aea:	6818      	ldr	r0, [r3, #0]
 8010aec:	4770      	bx	lr
 8010aee:	bf00      	nop
 8010af0:	20000050 	.word	0x20000050

08010af4 <__libc_init_array>:
 8010af4:	b570      	push	{r4, r5, r6, lr}
 8010af6:	4d0d      	ldr	r5, [pc, #52]	; (8010b2c <__libc_init_array+0x38>)
 8010af8:	4c0d      	ldr	r4, [pc, #52]	; (8010b30 <__libc_init_array+0x3c>)
 8010afa:	1b64      	subs	r4, r4, r5
 8010afc:	10a4      	asrs	r4, r4, #2
 8010afe:	2600      	movs	r6, #0
 8010b00:	42a6      	cmp	r6, r4
 8010b02:	d109      	bne.n	8010b18 <__libc_init_array+0x24>
 8010b04:	4d0b      	ldr	r5, [pc, #44]	; (8010b34 <__libc_init_array+0x40>)
 8010b06:	4c0c      	ldr	r4, [pc, #48]	; (8010b38 <__libc_init_array+0x44>)
 8010b08:	f003 fcbc 	bl	8014484 <_init>
 8010b0c:	1b64      	subs	r4, r4, r5
 8010b0e:	10a4      	asrs	r4, r4, #2
 8010b10:	2600      	movs	r6, #0
 8010b12:	42a6      	cmp	r6, r4
 8010b14:	d105      	bne.n	8010b22 <__libc_init_array+0x2e>
 8010b16:	bd70      	pop	{r4, r5, r6, pc}
 8010b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b1c:	4798      	blx	r3
 8010b1e:	3601      	adds	r6, #1
 8010b20:	e7ee      	b.n	8010b00 <__libc_init_array+0xc>
 8010b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b26:	4798      	blx	r3
 8010b28:	3601      	adds	r6, #1
 8010b2a:	e7f2      	b.n	8010b12 <__libc_init_array+0x1e>
 8010b2c:	08015014 	.word	0x08015014
 8010b30:	08015014 	.word	0x08015014
 8010b34:	08015014 	.word	0x08015014
 8010b38:	0801501c 	.word	0x0801501c

08010b3c <malloc>:
 8010b3c:	4b02      	ldr	r3, [pc, #8]	; (8010b48 <malloc+0xc>)
 8010b3e:	4601      	mov	r1, r0
 8010b40:	6818      	ldr	r0, [r3, #0]
 8010b42:	f000 b88d 	b.w	8010c60 <_malloc_r>
 8010b46:	bf00      	nop
 8010b48:	20000050 	.word	0x20000050

08010b4c <free>:
 8010b4c:	4b02      	ldr	r3, [pc, #8]	; (8010b58 <free+0xc>)
 8010b4e:	4601      	mov	r1, r0
 8010b50:	6818      	ldr	r0, [r3, #0]
 8010b52:	f000 b819 	b.w	8010b88 <_free_r>
 8010b56:	bf00      	nop
 8010b58:	20000050 	.word	0x20000050

08010b5c <memcpy>:
 8010b5c:	440a      	add	r2, r1
 8010b5e:	4291      	cmp	r1, r2
 8010b60:	f100 33ff 	add.w	r3, r0, #4294967295
 8010b64:	d100      	bne.n	8010b68 <memcpy+0xc>
 8010b66:	4770      	bx	lr
 8010b68:	b510      	push	{r4, lr}
 8010b6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010b72:	4291      	cmp	r1, r2
 8010b74:	d1f9      	bne.n	8010b6a <memcpy+0xe>
 8010b76:	bd10      	pop	{r4, pc}

08010b78 <memset>:
 8010b78:	4402      	add	r2, r0
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	4293      	cmp	r3, r2
 8010b7e:	d100      	bne.n	8010b82 <memset+0xa>
 8010b80:	4770      	bx	lr
 8010b82:	f803 1b01 	strb.w	r1, [r3], #1
 8010b86:	e7f9      	b.n	8010b7c <memset+0x4>

08010b88 <_free_r>:
 8010b88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010b8a:	2900      	cmp	r1, #0
 8010b8c:	d044      	beq.n	8010c18 <_free_r+0x90>
 8010b8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b92:	9001      	str	r0, [sp, #4]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	f1a1 0404 	sub.w	r4, r1, #4
 8010b9a:	bfb8      	it	lt
 8010b9c:	18e4      	addlt	r4, r4, r3
 8010b9e:	f002 f967 	bl	8012e70 <__malloc_lock>
 8010ba2:	4a1e      	ldr	r2, [pc, #120]	; (8010c1c <_free_r+0x94>)
 8010ba4:	9801      	ldr	r0, [sp, #4]
 8010ba6:	6813      	ldr	r3, [r2, #0]
 8010ba8:	b933      	cbnz	r3, 8010bb8 <_free_r+0x30>
 8010baa:	6063      	str	r3, [r4, #4]
 8010bac:	6014      	str	r4, [r2, #0]
 8010bae:	b003      	add	sp, #12
 8010bb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010bb4:	f002 b962 	b.w	8012e7c <__malloc_unlock>
 8010bb8:	42a3      	cmp	r3, r4
 8010bba:	d908      	bls.n	8010bce <_free_r+0x46>
 8010bbc:	6825      	ldr	r5, [r4, #0]
 8010bbe:	1961      	adds	r1, r4, r5
 8010bc0:	428b      	cmp	r3, r1
 8010bc2:	bf01      	itttt	eq
 8010bc4:	6819      	ldreq	r1, [r3, #0]
 8010bc6:	685b      	ldreq	r3, [r3, #4]
 8010bc8:	1949      	addeq	r1, r1, r5
 8010bca:	6021      	streq	r1, [r4, #0]
 8010bcc:	e7ed      	b.n	8010baa <_free_r+0x22>
 8010bce:	461a      	mov	r2, r3
 8010bd0:	685b      	ldr	r3, [r3, #4]
 8010bd2:	b10b      	cbz	r3, 8010bd8 <_free_r+0x50>
 8010bd4:	42a3      	cmp	r3, r4
 8010bd6:	d9fa      	bls.n	8010bce <_free_r+0x46>
 8010bd8:	6811      	ldr	r1, [r2, #0]
 8010bda:	1855      	adds	r5, r2, r1
 8010bdc:	42a5      	cmp	r5, r4
 8010bde:	d10b      	bne.n	8010bf8 <_free_r+0x70>
 8010be0:	6824      	ldr	r4, [r4, #0]
 8010be2:	4421      	add	r1, r4
 8010be4:	1854      	adds	r4, r2, r1
 8010be6:	42a3      	cmp	r3, r4
 8010be8:	6011      	str	r1, [r2, #0]
 8010bea:	d1e0      	bne.n	8010bae <_free_r+0x26>
 8010bec:	681c      	ldr	r4, [r3, #0]
 8010bee:	685b      	ldr	r3, [r3, #4]
 8010bf0:	6053      	str	r3, [r2, #4]
 8010bf2:	4421      	add	r1, r4
 8010bf4:	6011      	str	r1, [r2, #0]
 8010bf6:	e7da      	b.n	8010bae <_free_r+0x26>
 8010bf8:	d902      	bls.n	8010c00 <_free_r+0x78>
 8010bfa:	230c      	movs	r3, #12
 8010bfc:	6003      	str	r3, [r0, #0]
 8010bfe:	e7d6      	b.n	8010bae <_free_r+0x26>
 8010c00:	6825      	ldr	r5, [r4, #0]
 8010c02:	1961      	adds	r1, r4, r5
 8010c04:	428b      	cmp	r3, r1
 8010c06:	bf04      	itt	eq
 8010c08:	6819      	ldreq	r1, [r3, #0]
 8010c0a:	685b      	ldreq	r3, [r3, #4]
 8010c0c:	6063      	str	r3, [r4, #4]
 8010c0e:	bf04      	itt	eq
 8010c10:	1949      	addeq	r1, r1, r5
 8010c12:	6021      	streq	r1, [r4, #0]
 8010c14:	6054      	str	r4, [r2, #4]
 8010c16:	e7ca      	b.n	8010bae <_free_r+0x26>
 8010c18:	b003      	add	sp, #12
 8010c1a:	bd30      	pop	{r4, r5, pc}
 8010c1c:	20005e24 	.word	0x20005e24

08010c20 <sbrk_aligned>:
 8010c20:	b570      	push	{r4, r5, r6, lr}
 8010c22:	4e0e      	ldr	r6, [pc, #56]	; (8010c5c <sbrk_aligned+0x3c>)
 8010c24:	460c      	mov	r4, r1
 8010c26:	6831      	ldr	r1, [r6, #0]
 8010c28:	4605      	mov	r5, r0
 8010c2a:	b911      	cbnz	r1, 8010c32 <sbrk_aligned+0x12>
 8010c2c:	f000 fd84 	bl	8011738 <_sbrk_r>
 8010c30:	6030      	str	r0, [r6, #0]
 8010c32:	4621      	mov	r1, r4
 8010c34:	4628      	mov	r0, r5
 8010c36:	f000 fd7f 	bl	8011738 <_sbrk_r>
 8010c3a:	1c43      	adds	r3, r0, #1
 8010c3c:	d00a      	beq.n	8010c54 <sbrk_aligned+0x34>
 8010c3e:	1cc4      	adds	r4, r0, #3
 8010c40:	f024 0403 	bic.w	r4, r4, #3
 8010c44:	42a0      	cmp	r0, r4
 8010c46:	d007      	beq.n	8010c58 <sbrk_aligned+0x38>
 8010c48:	1a21      	subs	r1, r4, r0
 8010c4a:	4628      	mov	r0, r5
 8010c4c:	f000 fd74 	bl	8011738 <_sbrk_r>
 8010c50:	3001      	adds	r0, #1
 8010c52:	d101      	bne.n	8010c58 <sbrk_aligned+0x38>
 8010c54:	f04f 34ff 	mov.w	r4, #4294967295
 8010c58:	4620      	mov	r0, r4
 8010c5a:	bd70      	pop	{r4, r5, r6, pc}
 8010c5c:	20005e28 	.word	0x20005e28

08010c60 <_malloc_r>:
 8010c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c64:	1ccd      	adds	r5, r1, #3
 8010c66:	f025 0503 	bic.w	r5, r5, #3
 8010c6a:	3508      	adds	r5, #8
 8010c6c:	2d0c      	cmp	r5, #12
 8010c6e:	bf38      	it	cc
 8010c70:	250c      	movcc	r5, #12
 8010c72:	2d00      	cmp	r5, #0
 8010c74:	4607      	mov	r7, r0
 8010c76:	db01      	blt.n	8010c7c <_malloc_r+0x1c>
 8010c78:	42a9      	cmp	r1, r5
 8010c7a:	d905      	bls.n	8010c88 <_malloc_r+0x28>
 8010c7c:	230c      	movs	r3, #12
 8010c7e:	603b      	str	r3, [r7, #0]
 8010c80:	2600      	movs	r6, #0
 8010c82:	4630      	mov	r0, r6
 8010c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c88:	4e2e      	ldr	r6, [pc, #184]	; (8010d44 <_malloc_r+0xe4>)
 8010c8a:	f002 f8f1 	bl	8012e70 <__malloc_lock>
 8010c8e:	6833      	ldr	r3, [r6, #0]
 8010c90:	461c      	mov	r4, r3
 8010c92:	bb34      	cbnz	r4, 8010ce2 <_malloc_r+0x82>
 8010c94:	4629      	mov	r1, r5
 8010c96:	4638      	mov	r0, r7
 8010c98:	f7ff ffc2 	bl	8010c20 <sbrk_aligned>
 8010c9c:	1c43      	adds	r3, r0, #1
 8010c9e:	4604      	mov	r4, r0
 8010ca0:	d14d      	bne.n	8010d3e <_malloc_r+0xde>
 8010ca2:	6834      	ldr	r4, [r6, #0]
 8010ca4:	4626      	mov	r6, r4
 8010ca6:	2e00      	cmp	r6, #0
 8010ca8:	d140      	bne.n	8010d2c <_malloc_r+0xcc>
 8010caa:	6823      	ldr	r3, [r4, #0]
 8010cac:	4631      	mov	r1, r6
 8010cae:	4638      	mov	r0, r7
 8010cb0:	eb04 0803 	add.w	r8, r4, r3
 8010cb4:	f000 fd40 	bl	8011738 <_sbrk_r>
 8010cb8:	4580      	cmp	r8, r0
 8010cba:	d13a      	bne.n	8010d32 <_malloc_r+0xd2>
 8010cbc:	6821      	ldr	r1, [r4, #0]
 8010cbe:	3503      	adds	r5, #3
 8010cc0:	1a6d      	subs	r5, r5, r1
 8010cc2:	f025 0503 	bic.w	r5, r5, #3
 8010cc6:	3508      	adds	r5, #8
 8010cc8:	2d0c      	cmp	r5, #12
 8010cca:	bf38      	it	cc
 8010ccc:	250c      	movcc	r5, #12
 8010cce:	4629      	mov	r1, r5
 8010cd0:	4638      	mov	r0, r7
 8010cd2:	f7ff ffa5 	bl	8010c20 <sbrk_aligned>
 8010cd6:	3001      	adds	r0, #1
 8010cd8:	d02b      	beq.n	8010d32 <_malloc_r+0xd2>
 8010cda:	6823      	ldr	r3, [r4, #0]
 8010cdc:	442b      	add	r3, r5
 8010cde:	6023      	str	r3, [r4, #0]
 8010ce0:	e00e      	b.n	8010d00 <_malloc_r+0xa0>
 8010ce2:	6822      	ldr	r2, [r4, #0]
 8010ce4:	1b52      	subs	r2, r2, r5
 8010ce6:	d41e      	bmi.n	8010d26 <_malloc_r+0xc6>
 8010ce8:	2a0b      	cmp	r2, #11
 8010cea:	d916      	bls.n	8010d1a <_malloc_r+0xba>
 8010cec:	1961      	adds	r1, r4, r5
 8010cee:	42a3      	cmp	r3, r4
 8010cf0:	6025      	str	r5, [r4, #0]
 8010cf2:	bf18      	it	ne
 8010cf4:	6059      	strne	r1, [r3, #4]
 8010cf6:	6863      	ldr	r3, [r4, #4]
 8010cf8:	bf08      	it	eq
 8010cfa:	6031      	streq	r1, [r6, #0]
 8010cfc:	5162      	str	r2, [r4, r5]
 8010cfe:	604b      	str	r3, [r1, #4]
 8010d00:	4638      	mov	r0, r7
 8010d02:	f104 060b 	add.w	r6, r4, #11
 8010d06:	f002 f8b9 	bl	8012e7c <__malloc_unlock>
 8010d0a:	f026 0607 	bic.w	r6, r6, #7
 8010d0e:	1d23      	adds	r3, r4, #4
 8010d10:	1af2      	subs	r2, r6, r3
 8010d12:	d0b6      	beq.n	8010c82 <_malloc_r+0x22>
 8010d14:	1b9b      	subs	r3, r3, r6
 8010d16:	50a3      	str	r3, [r4, r2]
 8010d18:	e7b3      	b.n	8010c82 <_malloc_r+0x22>
 8010d1a:	6862      	ldr	r2, [r4, #4]
 8010d1c:	42a3      	cmp	r3, r4
 8010d1e:	bf0c      	ite	eq
 8010d20:	6032      	streq	r2, [r6, #0]
 8010d22:	605a      	strne	r2, [r3, #4]
 8010d24:	e7ec      	b.n	8010d00 <_malloc_r+0xa0>
 8010d26:	4623      	mov	r3, r4
 8010d28:	6864      	ldr	r4, [r4, #4]
 8010d2a:	e7b2      	b.n	8010c92 <_malloc_r+0x32>
 8010d2c:	4634      	mov	r4, r6
 8010d2e:	6876      	ldr	r6, [r6, #4]
 8010d30:	e7b9      	b.n	8010ca6 <_malloc_r+0x46>
 8010d32:	230c      	movs	r3, #12
 8010d34:	603b      	str	r3, [r7, #0]
 8010d36:	4638      	mov	r0, r7
 8010d38:	f002 f8a0 	bl	8012e7c <__malloc_unlock>
 8010d3c:	e7a1      	b.n	8010c82 <_malloc_r+0x22>
 8010d3e:	6025      	str	r5, [r4, #0]
 8010d40:	e7de      	b.n	8010d00 <_malloc_r+0xa0>
 8010d42:	bf00      	nop
 8010d44:	20005e24 	.word	0x20005e24

08010d48 <__cvt>:
 8010d48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010d4c:	ec55 4b10 	vmov	r4, r5, d0
 8010d50:	2d00      	cmp	r5, #0
 8010d52:	460e      	mov	r6, r1
 8010d54:	4619      	mov	r1, r3
 8010d56:	462b      	mov	r3, r5
 8010d58:	bfbb      	ittet	lt
 8010d5a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010d5e:	461d      	movlt	r5, r3
 8010d60:	2300      	movge	r3, #0
 8010d62:	232d      	movlt	r3, #45	; 0x2d
 8010d64:	700b      	strb	r3, [r1, #0]
 8010d66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010d68:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010d6c:	4691      	mov	r9, r2
 8010d6e:	f023 0820 	bic.w	r8, r3, #32
 8010d72:	bfbc      	itt	lt
 8010d74:	4622      	movlt	r2, r4
 8010d76:	4614      	movlt	r4, r2
 8010d78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010d7c:	d005      	beq.n	8010d8a <__cvt+0x42>
 8010d7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010d82:	d100      	bne.n	8010d86 <__cvt+0x3e>
 8010d84:	3601      	adds	r6, #1
 8010d86:	2102      	movs	r1, #2
 8010d88:	e000      	b.n	8010d8c <__cvt+0x44>
 8010d8a:	2103      	movs	r1, #3
 8010d8c:	ab03      	add	r3, sp, #12
 8010d8e:	9301      	str	r3, [sp, #4]
 8010d90:	ab02      	add	r3, sp, #8
 8010d92:	9300      	str	r3, [sp, #0]
 8010d94:	ec45 4b10 	vmov	d0, r4, r5
 8010d98:	4653      	mov	r3, sl
 8010d9a:	4632      	mov	r2, r6
 8010d9c:	f001 f830 	bl	8011e00 <_dtoa_r>
 8010da0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010da4:	4607      	mov	r7, r0
 8010da6:	d102      	bne.n	8010dae <__cvt+0x66>
 8010da8:	f019 0f01 	tst.w	r9, #1
 8010dac:	d022      	beq.n	8010df4 <__cvt+0xac>
 8010dae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010db2:	eb07 0906 	add.w	r9, r7, r6
 8010db6:	d110      	bne.n	8010dda <__cvt+0x92>
 8010db8:	783b      	ldrb	r3, [r7, #0]
 8010dba:	2b30      	cmp	r3, #48	; 0x30
 8010dbc:	d10a      	bne.n	8010dd4 <__cvt+0x8c>
 8010dbe:	2200      	movs	r2, #0
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	4620      	mov	r0, r4
 8010dc4:	4629      	mov	r1, r5
 8010dc6:	f7ef fe8f 	bl	8000ae8 <__aeabi_dcmpeq>
 8010dca:	b918      	cbnz	r0, 8010dd4 <__cvt+0x8c>
 8010dcc:	f1c6 0601 	rsb	r6, r6, #1
 8010dd0:	f8ca 6000 	str.w	r6, [sl]
 8010dd4:	f8da 3000 	ldr.w	r3, [sl]
 8010dd8:	4499      	add	r9, r3
 8010dda:	2200      	movs	r2, #0
 8010ddc:	2300      	movs	r3, #0
 8010dde:	4620      	mov	r0, r4
 8010de0:	4629      	mov	r1, r5
 8010de2:	f7ef fe81 	bl	8000ae8 <__aeabi_dcmpeq>
 8010de6:	b108      	cbz	r0, 8010dec <__cvt+0xa4>
 8010de8:	f8cd 900c 	str.w	r9, [sp, #12]
 8010dec:	2230      	movs	r2, #48	; 0x30
 8010dee:	9b03      	ldr	r3, [sp, #12]
 8010df0:	454b      	cmp	r3, r9
 8010df2:	d307      	bcc.n	8010e04 <__cvt+0xbc>
 8010df4:	9b03      	ldr	r3, [sp, #12]
 8010df6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010df8:	1bdb      	subs	r3, r3, r7
 8010dfa:	4638      	mov	r0, r7
 8010dfc:	6013      	str	r3, [r2, #0]
 8010dfe:	b004      	add	sp, #16
 8010e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e04:	1c59      	adds	r1, r3, #1
 8010e06:	9103      	str	r1, [sp, #12]
 8010e08:	701a      	strb	r2, [r3, #0]
 8010e0a:	e7f0      	b.n	8010dee <__cvt+0xa6>

08010e0c <__exponent>:
 8010e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010e0e:	4603      	mov	r3, r0
 8010e10:	2900      	cmp	r1, #0
 8010e12:	bfb8      	it	lt
 8010e14:	4249      	neglt	r1, r1
 8010e16:	f803 2b02 	strb.w	r2, [r3], #2
 8010e1a:	bfb4      	ite	lt
 8010e1c:	222d      	movlt	r2, #45	; 0x2d
 8010e1e:	222b      	movge	r2, #43	; 0x2b
 8010e20:	2909      	cmp	r1, #9
 8010e22:	7042      	strb	r2, [r0, #1]
 8010e24:	dd2a      	ble.n	8010e7c <__exponent+0x70>
 8010e26:	f10d 0407 	add.w	r4, sp, #7
 8010e2a:	46a4      	mov	ip, r4
 8010e2c:	270a      	movs	r7, #10
 8010e2e:	46a6      	mov	lr, r4
 8010e30:	460a      	mov	r2, r1
 8010e32:	fb91 f6f7 	sdiv	r6, r1, r7
 8010e36:	fb07 1516 	mls	r5, r7, r6, r1
 8010e3a:	3530      	adds	r5, #48	; 0x30
 8010e3c:	2a63      	cmp	r2, #99	; 0x63
 8010e3e:	f104 34ff 	add.w	r4, r4, #4294967295
 8010e42:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010e46:	4631      	mov	r1, r6
 8010e48:	dcf1      	bgt.n	8010e2e <__exponent+0x22>
 8010e4a:	3130      	adds	r1, #48	; 0x30
 8010e4c:	f1ae 0502 	sub.w	r5, lr, #2
 8010e50:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010e54:	1c44      	adds	r4, r0, #1
 8010e56:	4629      	mov	r1, r5
 8010e58:	4561      	cmp	r1, ip
 8010e5a:	d30a      	bcc.n	8010e72 <__exponent+0x66>
 8010e5c:	f10d 0209 	add.w	r2, sp, #9
 8010e60:	eba2 020e 	sub.w	r2, r2, lr
 8010e64:	4565      	cmp	r5, ip
 8010e66:	bf88      	it	hi
 8010e68:	2200      	movhi	r2, #0
 8010e6a:	4413      	add	r3, r2
 8010e6c:	1a18      	subs	r0, r3, r0
 8010e6e:	b003      	add	sp, #12
 8010e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010e76:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010e7a:	e7ed      	b.n	8010e58 <__exponent+0x4c>
 8010e7c:	2330      	movs	r3, #48	; 0x30
 8010e7e:	3130      	adds	r1, #48	; 0x30
 8010e80:	7083      	strb	r3, [r0, #2]
 8010e82:	70c1      	strb	r1, [r0, #3]
 8010e84:	1d03      	adds	r3, r0, #4
 8010e86:	e7f1      	b.n	8010e6c <__exponent+0x60>

08010e88 <_printf_float>:
 8010e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e8c:	ed2d 8b02 	vpush	{d8}
 8010e90:	b08d      	sub	sp, #52	; 0x34
 8010e92:	460c      	mov	r4, r1
 8010e94:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010e98:	4616      	mov	r6, r2
 8010e9a:	461f      	mov	r7, r3
 8010e9c:	4605      	mov	r5, r0
 8010e9e:	f001 ff67 	bl	8012d70 <_localeconv_r>
 8010ea2:	f8d0 a000 	ldr.w	sl, [r0]
 8010ea6:	4650      	mov	r0, sl
 8010ea8:	f7ef f99c 	bl	80001e4 <strlen>
 8010eac:	2300      	movs	r3, #0
 8010eae:	930a      	str	r3, [sp, #40]	; 0x28
 8010eb0:	6823      	ldr	r3, [r4, #0]
 8010eb2:	9305      	str	r3, [sp, #20]
 8010eb4:	f8d8 3000 	ldr.w	r3, [r8]
 8010eb8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010ebc:	3307      	adds	r3, #7
 8010ebe:	f023 0307 	bic.w	r3, r3, #7
 8010ec2:	f103 0208 	add.w	r2, r3, #8
 8010ec6:	f8c8 2000 	str.w	r2, [r8]
 8010eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ece:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010ed2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010ed6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010eda:	9307      	str	r3, [sp, #28]
 8010edc:	f8cd 8018 	str.w	r8, [sp, #24]
 8010ee0:	ee08 0a10 	vmov	s16, r0
 8010ee4:	4b9f      	ldr	r3, [pc, #636]	; (8011164 <_printf_float+0x2dc>)
 8010ee6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010eea:	f04f 32ff 	mov.w	r2, #4294967295
 8010eee:	f7ef fe2d 	bl	8000b4c <__aeabi_dcmpun>
 8010ef2:	bb88      	cbnz	r0, 8010f58 <_printf_float+0xd0>
 8010ef4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010ef8:	4b9a      	ldr	r3, [pc, #616]	; (8011164 <_printf_float+0x2dc>)
 8010efa:	f04f 32ff 	mov.w	r2, #4294967295
 8010efe:	f7ef fe07 	bl	8000b10 <__aeabi_dcmple>
 8010f02:	bb48      	cbnz	r0, 8010f58 <_printf_float+0xd0>
 8010f04:	2200      	movs	r2, #0
 8010f06:	2300      	movs	r3, #0
 8010f08:	4640      	mov	r0, r8
 8010f0a:	4649      	mov	r1, r9
 8010f0c:	f7ef fdf6 	bl	8000afc <__aeabi_dcmplt>
 8010f10:	b110      	cbz	r0, 8010f18 <_printf_float+0x90>
 8010f12:	232d      	movs	r3, #45	; 0x2d
 8010f14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010f18:	4b93      	ldr	r3, [pc, #588]	; (8011168 <_printf_float+0x2e0>)
 8010f1a:	4894      	ldr	r0, [pc, #592]	; (801116c <_printf_float+0x2e4>)
 8010f1c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010f20:	bf94      	ite	ls
 8010f22:	4698      	movls	r8, r3
 8010f24:	4680      	movhi	r8, r0
 8010f26:	2303      	movs	r3, #3
 8010f28:	6123      	str	r3, [r4, #16]
 8010f2a:	9b05      	ldr	r3, [sp, #20]
 8010f2c:	f023 0204 	bic.w	r2, r3, #4
 8010f30:	6022      	str	r2, [r4, #0]
 8010f32:	f04f 0900 	mov.w	r9, #0
 8010f36:	9700      	str	r7, [sp, #0]
 8010f38:	4633      	mov	r3, r6
 8010f3a:	aa0b      	add	r2, sp, #44	; 0x2c
 8010f3c:	4621      	mov	r1, r4
 8010f3e:	4628      	mov	r0, r5
 8010f40:	f000 f9d8 	bl	80112f4 <_printf_common>
 8010f44:	3001      	adds	r0, #1
 8010f46:	f040 8090 	bne.w	801106a <_printf_float+0x1e2>
 8010f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8010f4e:	b00d      	add	sp, #52	; 0x34
 8010f50:	ecbd 8b02 	vpop	{d8}
 8010f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f58:	4642      	mov	r2, r8
 8010f5a:	464b      	mov	r3, r9
 8010f5c:	4640      	mov	r0, r8
 8010f5e:	4649      	mov	r1, r9
 8010f60:	f7ef fdf4 	bl	8000b4c <__aeabi_dcmpun>
 8010f64:	b140      	cbz	r0, 8010f78 <_printf_float+0xf0>
 8010f66:	464b      	mov	r3, r9
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	bfbc      	itt	lt
 8010f6c:	232d      	movlt	r3, #45	; 0x2d
 8010f6e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010f72:	487f      	ldr	r0, [pc, #508]	; (8011170 <_printf_float+0x2e8>)
 8010f74:	4b7f      	ldr	r3, [pc, #508]	; (8011174 <_printf_float+0x2ec>)
 8010f76:	e7d1      	b.n	8010f1c <_printf_float+0x94>
 8010f78:	6863      	ldr	r3, [r4, #4]
 8010f7a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010f7e:	9206      	str	r2, [sp, #24]
 8010f80:	1c5a      	adds	r2, r3, #1
 8010f82:	d13f      	bne.n	8011004 <_printf_float+0x17c>
 8010f84:	2306      	movs	r3, #6
 8010f86:	6063      	str	r3, [r4, #4]
 8010f88:	9b05      	ldr	r3, [sp, #20]
 8010f8a:	6861      	ldr	r1, [r4, #4]
 8010f8c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010f90:	2300      	movs	r3, #0
 8010f92:	9303      	str	r3, [sp, #12]
 8010f94:	ab0a      	add	r3, sp, #40	; 0x28
 8010f96:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010f9a:	ab09      	add	r3, sp, #36	; 0x24
 8010f9c:	ec49 8b10 	vmov	d0, r8, r9
 8010fa0:	9300      	str	r3, [sp, #0]
 8010fa2:	6022      	str	r2, [r4, #0]
 8010fa4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010fa8:	4628      	mov	r0, r5
 8010faa:	f7ff fecd 	bl	8010d48 <__cvt>
 8010fae:	9b06      	ldr	r3, [sp, #24]
 8010fb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010fb2:	2b47      	cmp	r3, #71	; 0x47
 8010fb4:	4680      	mov	r8, r0
 8010fb6:	d108      	bne.n	8010fca <_printf_float+0x142>
 8010fb8:	1cc8      	adds	r0, r1, #3
 8010fba:	db02      	blt.n	8010fc2 <_printf_float+0x13a>
 8010fbc:	6863      	ldr	r3, [r4, #4]
 8010fbe:	4299      	cmp	r1, r3
 8010fc0:	dd41      	ble.n	8011046 <_printf_float+0x1be>
 8010fc2:	f1ab 0b02 	sub.w	fp, fp, #2
 8010fc6:	fa5f fb8b 	uxtb.w	fp, fp
 8010fca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010fce:	d820      	bhi.n	8011012 <_printf_float+0x18a>
 8010fd0:	3901      	subs	r1, #1
 8010fd2:	465a      	mov	r2, fp
 8010fd4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010fd8:	9109      	str	r1, [sp, #36]	; 0x24
 8010fda:	f7ff ff17 	bl	8010e0c <__exponent>
 8010fde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010fe0:	1813      	adds	r3, r2, r0
 8010fe2:	2a01      	cmp	r2, #1
 8010fe4:	4681      	mov	r9, r0
 8010fe6:	6123      	str	r3, [r4, #16]
 8010fe8:	dc02      	bgt.n	8010ff0 <_printf_float+0x168>
 8010fea:	6822      	ldr	r2, [r4, #0]
 8010fec:	07d2      	lsls	r2, r2, #31
 8010fee:	d501      	bpl.n	8010ff4 <_printf_float+0x16c>
 8010ff0:	3301      	adds	r3, #1
 8010ff2:	6123      	str	r3, [r4, #16]
 8010ff4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d09c      	beq.n	8010f36 <_printf_float+0xae>
 8010ffc:	232d      	movs	r3, #45	; 0x2d
 8010ffe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011002:	e798      	b.n	8010f36 <_printf_float+0xae>
 8011004:	9a06      	ldr	r2, [sp, #24]
 8011006:	2a47      	cmp	r2, #71	; 0x47
 8011008:	d1be      	bne.n	8010f88 <_printf_float+0x100>
 801100a:	2b00      	cmp	r3, #0
 801100c:	d1bc      	bne.n	8010f88 <_printf_float+0x100>
 801100e:	2301      	movs	r3, #1
 8011010:	e7b9      	b.n	8010f86 <_printf_float+0xfe>
 8011012:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011016:	d118      	bne.n	801104a <_printf_float+0x1c2>
 8011018:	2900      	cmp	r1, #0
 801101a:	6863      	ldr	r3, [r4, #4]
 801101c:	dd0b      	ble.n	8011036 <_printf_float+0x1ae>
 801101e:	6121      	str	r1, [r4, #16]
 8011020:	b913      	cbnz	r3, 8011028 <_printf_float+0x1a0>
 8011022:	6822      	ldr	r2, [r4, #0]
 8011024:	07d0      	lsls	r0, r2, #31
 8011026:	d502      	bpl.n	801102e <_printf_float+0x1a6>
 8011028:	3301      	adds	r3, #1
 801102a:	440b      	add	r3, r1
 801102c:	6123      	str	r3, [r4, #16]
 801102e:	65a1      	str	r1, [r4, #88]	; 0x58
 8011030:	f04f 0900 	mov.w	r9, #0
 8011034:	e7de      	b.n	8010ff4 <_printf_float+0x16c>
 8011036:	b913      	cbnz	r3, 801103e <_printf_float+0x1b6>
 8011038:	6822      	ldr	r2, [r4, #0]
 801103a:	07d2      	lsls	r2, r2, #31
 801103c:	d501      	bpl.n	8011042 <_printf_float+0x1ba>
 801103e:	3302      	adds	r3, #2
 8011040:	e7f4      	b.n	801102c <_printf_float+0x1a4>
 8011042:	2301      	movs	r3, #1
 8011044:	e7f2      	b.n	801102c <_printf_float+0x1a4>
 8011046:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801104a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801104c:	4299      	cmp	r1, r3
 801104e:	db05      	blt.n	801105c <_printf_float+0x1d4>
 8011050:	6823      	ldr	r3, [r4, #0]
 8011052:	6121      	str	r1, [r4, #16]
 8011054:	07d8      	lsls	r0, r3, #31
 8011056:	d5ea      	bpl.n	801102e <_printf_float+0x1a6>
 8011058:	1c4b      	adds	r3, r1, #1
 801105a:	e7e7      	b.n	801102c <_printf_float+0x1a4>
 801105c:	2900      	cmp	r1, #0
 801105e:	bfd4      	ite	le
 8011060:	f1c1 0202 	rsble	r2, r1, #2
 8011064:	2201      	movgt	r2, #1
 8011066:	4413      	add	r3, r2
 8011068:	e7e0      	b.n	801102c <_printf_float+0x1a4>
 801106a:	6823      	ldr	r3, [r4, #0]
 801106c:	055a      	lsls	r2, r3, #21
 801106e:	d407      	bmi.n	8011080 <_printf_float+0x1f8>
 8011070:	6923      	ldr	r3, [r4, #16]
 8011072:	4642      	mov	r2, r8
 8011074:	4631      	mov	r1, r6
 8011076:	4628      	mov	r0, r5
 8011078:	47b8      	blx	r7
 801107a:	3001      	adds	r0, #1
 801107c:	d12c      	bne.n	80110d8 <_printf_float+0x250>
 801107e:	e764      	b.n	8010f4a <_printf_float+0xc2>
 8011080:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011084:	f240 80e0 	bls.w	8011248 <_printf_float+0x3c0>
 8011088:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801108c:	2200      	movs	r2, #0
 801108e:	2300      	movs	r3, #0
 8011090:	f7ef fd2a 	bl	8000ae8 <__aeabi_dcmpeq>
 8011094:	2800      	cmp	r0, #0
 8011096:	d034      	beq.n	8011102 <_printf_float+0x27a>
 8011098:	4a37      	ldr	r2, [pc, #220]	; (8011178 <_printf_float+0x2f0>)
 801109a:	2301      	movs	r3, #1
 801109c:	4631      	mov	r1, r6
 801109e:	4628      	mov	r0, r5
 80110a0:	47b8      	blx	r7
 80110a2:	3001      	adds	r0, #1
 80110a4:	f43f af51 	beq.w	8010f4a <_printf_float+0xc2>
 80110a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80110ac:	429a      	cmp	r2, r3
 80110ae:	db02      	blt.n	80110b6 <_printf_float+0x22e>
 80110b0:	6823      	ldr	r3, [r4, #0]
 80110b2:	07d8      	lsls	r0, r3, #31
 80110b4:	d510      	bpl.n	80110d8 <_printf_float+0x250>
 80110b6:	ee18 3a10 	vmov	r3, s16
 80110ba:	4652      	mov	r2, sl
 80110bc:	4631      	mov	r1, r6
 80110be:	4628      	mov	r0, r5
 80110c0:	47b8      	blx	r7
 80110c2:	3001      	adds	r0, #1
 80110c4:	f43f af41 	beq.w	8010f4a <_printf_float+0xc2>
 80110c8:	f04f 0800 	mov.w	r8, #0
 80110cc:	f104 091a 	add.w	r9, r4, #26
 80110d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110d2:	3b01      	subs	r3, #1
 80110d4:	4543      	cmp	r3, r8
 80110d6:	dc09      	bgt.n	80110ec <_printf_float+0x264>
 80110d8:	6823      	ldr	r3, [r4, #0]
 80110da:	079b      	lsls	r3, r3, #30
 80110dc:	f100 8105 	bmi.w	80112ea <_printf_float+0x462>
 80110e0:	68e0      	ldr	r0, [r4, #12]
 80110e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80110e4:	4298      	cmp	r0, r3
 80110e6:	bfb8      	it	lt
 80110e8:	4618      	movlt	r0, r3
 80110ea:	e730      	b.n	8010f4e <_printf_float+0xc6>
 80110ec:	2301      	movs	r3, #1
 80110ee:	464a      	mov	r2, r9
 80110f0:	4631      	mov	r1, r6
 80110f2:	4628      	mov	r0, r5
 80110f4:	47b8      	blx	r7
 80110f6:	3001      	adds	r0, #1
 80110f8:	f43f af27 	beq.w	8010f4a <_printf_float+0xc2>
 80110fc:	f108 0801 	add.w	r8, r8, #1
 8011100:	e7e6      	b.n	80110d0 <_printf_float+0x248>
 8011102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011104:	2b00      	cmp	r3, #0
 8011106:	dc39      	bgt.n	801117c <_printf_float+0x2f4>
 8011108:	4a1b      	ldr	r2, [pc, #108]	; (8011178 <_printf_float+0x2f0>)
 801110a:	2301      	movs	r3, #1
 801110c:	4631      	mov	r1, r6
 801110e:	4628      	mov	r0, r5
 8011110:	47b8      	blx	r7
 8011112:	3001      	adds	r0, #1
 8011114:	f43f af19 	beq.w	8010f4a <_printf_float+0xc2>
 8011118:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801111c:	4313      	orrs	r3, r2
 801111e:	d102      	bne.n	8011126 <_printf_float+0x29e>
 8011120:	6823      	ldr	r3, [r4, #0]
 8011122:	07d9      	lsls	r1, r3, #31
 8011124:	d5d8      	bpl.n	80110d8 <_printf_float+0x250>
 8011126:	ee18 3a10 	vmov	r3, s16
 801112a:	4652      	mov	r2, sl
 801112c:	4631      	mov	r1, r6
 801112e:	4628      	mov	r0, r5
 8011130:	47b8      	blx	r7
 8011132:	3001      	adds	r0, #1
 8011134:	f43f af09 	beq.w	8010f4a <_printf_float+0xc2>
 8011138:	f04f 0900 	mov.w	r9, #0
 801113c:	f104 0a1a 	add.w	sl, r4, #26
 8011140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011142:	425b      	negs	r3, r3
 8011144:	454b      	cmp	r3, r9
 8011146:	dc01      	bgt.n	801114c <_printf_float+0x2c4>
 8011148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801114a:	e792      	b.n	8011072 <_printf_float+0x1ea>
 801114c:	2301      	movs	r3, #1
 801114e:	4652      	mov	r2, sl
 8011150:	4631      	mov	r1, r6
 8011152:	4628      	mov	r0, r5
 8011154:	47b8      	blx	r7
 8011156:	3001      	adds	r0, #1
 8011158:	f43f aef7 	beq.w	8010f4a <_printf_float+0xc2>
 801115c:	f109 0901 	add.w	r9, r9, #1
 8011160:	e7ee      	b.n	8011140 <_printf_float+0x2b8>
 8011162:	bf00      	nop
 8011164:	7fefffff 	.word	0x7fefffff
 8011168:	08014bbc 	.word	0x08014bbc
 801116c:	08014bc0 	.word	0x08014bc0
 8011170:	08014bc8 	.word	0x08014bc8
 8011174:	08014bc4 	.word	0x08014bc4
 8011178:	08014fe9 	.word	0x08014fe9
 801117c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801117e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011180:	429a      	cmp	r2, r3
 8011182:	bfa8      	it	ge
 8011184:	461a      	movge	r2, r3
 8011186:	2a00      	cmp	r2, #0
 8011188:	4691      	mov	r9, r2
 801118a:	dc37      	bgt.n	80111fc <_printf_float+0x374>
 801118c:	f04f 0b00 	mov.w	fp, #0
 8011190:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011194:	f104 021a 	add.w	r2, r4, #26
 8011198:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801119a:	9305      	str	r3, [sp, #20]
 801119c:	eba3 0309 	sub.w	r3, r3, r9
 80111a0:	455b      	cmp	r3, fp
 80111a2:	dc33      	bgt.n	801120c <_printf_float+0x384>
 80111a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80111a8:	429a      	cmp	r2, r3
 80111aa:	db3b      	blt.n	8011224 <_printf_float+0x39c>
 80111ac:	6823      	ldr	r3, [r4, #0]
 80111ae:	07da      	lsls	r2, r3, #31
 80111b0:	d438      	bmi.n	8011224 <_printf_float+0x39c>
 80111b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111b4:	9a05      	ldr	r2, [sp, #20]
 80111b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80111b8:	1a9a      	subs	r2, r3, r2
 80111ba:	eba3 0901 	sub.w	r9, r3, r1
 80111be:	4591      	cmp	r9, r2
 80111c0:	bfa8      	it	ge
 80111c2:	4691      	movge	r9, r2
 80111c4:	f1b9 0f00 	cmp.w	r9, #0
 80111c8:	dc35      	bgt.n	8011236 <_printf_float+0x3ae>
 80111ca:	f04f 0800 	mov.w	r8, #0
 80111ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80111d2:	f104 0a1a 	add.w	sl, r4, #26
 80111d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80111da:	1a9b      	subs	r3, r3, r2
 80111dc:	eba3 0309 	sub.w	r3, r3, r9
 80111e0:	4543      	cmp	r3, r8
 80111e2:	f77f af79 	ble.w	80110d8 <_printf_float+0x250>
 80111e6:	2301      	movs	r3, #1
 80111e8:	4652      	mov	r2, sl
 80111ea:	4631      	mov	r1, r6
 80111ec:	4628      	mov	r0, r5
 80111ee:	47b8      	blx	r7
 80111f0:	3001      	adds	r0, #1
 80111f2:	f43f aeaa 	beq.w	8010f4a <_printf_float+0xc2>
 80111f6:	f108 0801 	add.w	r8, r8, #1
 80111fa:	e7ec      	b.n	80111d6 <_printf_float+0x34e>
 80111fc:	4613      	mov	r3, r2
 80111fe:	4631      	mov	r1, r6
 8011200:	4642      	mov	r2, r8
 8011202:	4628      	mov	r0, r5
 8011204:	47b8      	blx	r7
 8011206:	3001      	adds	r0, #1
 8011208:	d1c0      	bne.n	801118c <_printf_float+0x304>
 801120a:	e69e      	b.n	8010f4a <_printf_float+0xc2>
 801120c:	2301      	movs	r3, #1
 801120e:	4631      	mov	r1, r6
 8011210:	4628      	mov	r0, r5
 8011212:	9205      	str	r2, [sp, #20]
 8011214:	47b8      	blx	r7
 8011216:	3001      	adds	r0, #1
 8011218:	f43f ae97 	beq.w	8010f4a <_printf_float+0xc2>
 801121c:	9a05      	ldr	r2, [sp, #20]
 801121e:	f10b 0b01 	add.w	fp, fp, #1
 8011222:	e7b9      	b.n	8011198 <_printf_float+0x310>
 8011224:	ee18 3a10 	vmov	r3, s16
 8011228:	4652      	mov	r2, sl
 801122a:	4631      	mov	r1, r6
 801122c:	4628      	mov	r0, r5
 801122e:	47b8      	blx	r7
 8011230:	3001      	adds	r0, #1
 8011232:	d1be      	bne.n	80111b2 <_printf_float+0x32a>
 8011234:	e689      	b.n	8010f4a <_printf_float+0xc2>
 8011236:	9a05      	ldr	r2, [sp, #20]
 8011238:	464b      	mov	r3, r9
 801123a:	4442      	add	r2, r8
 801123c:	4631      	mov	r1, r6
 801123e:	4628      	mov	r0, r5
 8011240:	47b8      	blx	r7
 8011242:	3001      	adds	r0, #1
 8011244:	d1c1      	bne.n	80111ca <_printf_float+0x342>
 8011246:	e680      	b.n	8010f4a <_printf_float+0xc2>
 8011248:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801124a:	2a01      	cmp	r2, #1
 801124c:	dc01      	bgt.n	8011252 <_printf_float+0x3ca>
 801124e:	07db      	lsls	r3, r3, #31
 8011250:	d538      	bpl.n	80112c4 <_printf_float+0x43c>
 8011252:	2301      	movs	r3, #1
 8011254:	4642      	mov	r2, r8
 8011256:	4631      	mov	r1, r6
 8011258:	4628      	mov	r0, r5
 801125a:	47b8      	blx	r7
 801125c:	3001      	adds	r0, #1
 801125e:	f43f ae74 	beq.w	8010f4a <_printf_float+0xc2>
 8011262:	ee18 3a10 	vmov	r3, s16
 8011266:	4652      	mov	r2, sl
 8011268:	4631      	mov	r1, r6
 801126a:	4628      	mov	r0, r5
 801126c:	47b8      	blx	r7
 801126e:	3001      	adds	r0, #1
 8011270:	f43f ae6b 	beq.w	8010f4a <_printf_float+0xc2>
 8011274:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011278:	2200      	movs	r2, #0
 801127a:	2300      	movs	r3, #0
 801127c:	f7ef fc34 	bl	8000ae8 <__aeabi_dcmpeq>
 8011280:	b9d8      	cbnz	r0, 80112ba <_printf_float+0x432>
 8011282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011284:	f108 0201 	add.w	r2, r8, #1
 8011288:	3b01      	subs	r3, #1
 801128a:	4631      	mov	r1, r6
 801128c:	4628      	mov	r0, r5
 801128e:	47b8      	blx	r7
 8011290:	3001      	adds	r0, #1
 8011292:	d10e      	bne.n	80112b2 <_printf_float+0x42a>
 8011294:	e659      	b.n	8010f4a <_printf_float+0xc2>
 8011296:	2301      	movs	r3, #1
 8011298:	4652      	mov	r2, sl
 801129a:	4631      	mov	r1, r6
 801129c:	4628      	mov	r0, r5
 801129e:	47b8      	blx	r7
 80112a0:	3001      	adds	r0, #1
 80112a2:	f43f ae52 	beq.w	8010f4a <_printf_float+0xc2>
 80112a6:	f108 0801 	add.w	r8, r8, #1
 80112aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112ac:	3b01      	subs	r3, #1
 80112ae:	4543      	cmp	r3, r8
 80112b0:	dcf1      	bgt.n	8011296 <_printf_float+0x40e>
 80112b2:	464b      	mov	r3, r9
 80112b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80112b8:	e6dc      	b.n	8011074 <_printf_float+0x1ec>
 80112ba:	f04f 0800 	mov.w	r8, #0
 80112be:	f104 0a1a 	add.w	sl, r4, #26
 80112c2:	e7f2      	b.n	80112aa <_printf_float+0x422>
 80112c4:	2301      	movs	r3, #1
 80112c6:	4642      	mov	r2, r8
 80112c8:	e7df      	b.n	801128a <_printf_float+0x402>
 80112ca:	2301      	movs	r3, #1
 80112cc:	464a      	mov	r2, r9
 80112ce:	4631      	mov	r1, r6
 80112d0:	4628      	mov	r0, r5
 80112d2:	47b8      	blx	r7
 80112d4:	3001      	adds	r0, #1
 80112d6:	f43f ae38 	beq.w	8010f4a <_printf_float+0xc2>
 80112da:	f108 0801 	add.w	r8, r8, #1
 80112de:	68e3      	ldr	r3, [r4, #12]
 80112e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80112e2:	1a5b      	subs	r3, r3, r1
 80112e4:	4543      	cmp	r3, r8
 80112e6:	dcf0      	bgt.n	80112ca <_printf_float+0x442>
 80112e8:	e6fa      	b.n	80110e0 <_printf_float+0x258>
 80112ea:	f04f 0800 	mov.w	r8, #0
 80112ee:	f104 0919 	add.w	r9, r4, #25
 80112f2:	e7f4      	b.n	80112de <_printf_float+0x456>

080112f4 <_printf_common>:
 80112f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112f8:	4616      	mov	r6, r2
 80112fa:	4699      	mov	r9, r3
 80112fc:	688a      	ldr	r2, [r1, #8]
 80112fe:	690b      	ldr	r3, [r1, #16]
 8011300:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011304:	4293      	cmp	r3, r2
 8011306:	bfb8      	it	lt
 8011308:	4613      	movlt	r3, r2
 801130a:	6033      	str	r3, [r6, #0]
 801130c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011310:	4607      	mov	r7, r0
 8011312:	460c      	mov	r4, r1
 8011314:	b10a      	cbz	r2, 801131a <_printf_common+0x26>
 8011316:	3301      	adds	r3, #1
 8011318:	6033      	str	r3, [r6, #0]
 801131a:	6823      	ldr	r3, [r4, #0]
 801131c:	0699      	lsls	r1, r3, #26
 801131e:	bf42      	ittt	mi
 8011320:	6833      	ldrmi	r3, [r6, #0]
 8011322:	3302      	addmi	r3, #2
 8011324:	6033      	strmi	r3, [r6, #0]
 8011326:	6825      	ldr	r5, [r4, #0]
 8011328:	f015 0506 	ands.w	r5, r5, #6
 801132c:	d106      	bne.n	801133c <_printf_common+0x48>
 801132e:	f104 0a19 	add.w	sl, r4, #25
 8011332:	68e3      	ldr	r3, [r4, #12]
 8011334:	6832      	ldr	r2, [r6, #0]
 8011336:	1a9b      	subs	r3, r3, r2
 8011338:	42ab      	cmp	r3, r5
 801133a:	dc26      	bgt.n	801138a <_printf_common+0x96>
 801133c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011340:	1e13      	subs	r3, r2, #0
 8011342:	6822      	ldr	r2, [r4, #0]
 8011344:	bf18      	it	ne
 8011346:	2301      	movne	r3, #1
 8011348:	0692      	lsls	r2, r2, #26
 801134a:	d42b      	bmi.n	80113a4 <_printf_common+0xb0>
 801134c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011350:	4649      	mov	r1, r9
 8011352:	4638      	mov	r0, r7
 8011354:	47c0      	blx	r8
 8011356:	3001      	adds	r0, #1
 8011358:	d01e      	beq.n	8011398 <_printf_common+0xa4>
 801135a:	6823      	ldr	r3, [r4, #0]
 801135c:	68e5      	ldr	r5, [r4, #12]
 801135e:	6832      	ldr	r2, [r6, #0]
 8011360:	f003 0306 	and.w	r3, r3, #6
 8011364:	2b04      	cmp	r3, #4
 8011366:	bf08      	it	eq
 8011368:	1aad      	subeq	r5, r5, r2
 801136a:	68a3      	ldr	r3, [r4, #8]
 801136c:	6922      	ldr	r2, [r4, #16]
 801136e:	bf0c      	ite	eq
 8011370:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011374:	2500      	movne	r5, #0
 8011376:	4293      	cmp	r3, r2
 8011378:	bfc4      	itt	gt
 801137a:	1a9b      	subgt	r3, r3, r2
 801137c:	18ed      	addgt	r5, r5, r3
 801137e:	2600      	movs	r6, #0
 8011380:	341a      	adds	r4, #26
 8011382:	42b5      	cmp	r5, r6
 8011384:	d11a      	bne.n	80113bc <_printf_common+0xc8>
 8011386:	2000      	movs	r0, #0
 8011388:	e008      	b.n	801139c <_printf_common+0xa8>
 801138a:	2301      	movs	r3, #1
 801138c:	4652      	mov	r2, sl
 801138e:	4649      	mov	r1, r9
 8011390:	4638      	mov	r0, r7
 8011392:	47c0      	blx	r8
 8011394:	3001      	adds	r0, #1
 8011396:	d103      	bne.n	80113a0 <_printf_common+0xac>
 8011398:	f04f 30ff 	mov.w	r0, #4294967295
 801139c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113a0:	3501      	adds	r5, #1
 80113a2:	e7c6      	b.n	8011332 <_printf_common+0x3e>
 80113a4:	18e1      	adds	r1, r4, r3
 80113a6:	1c5a      	adds	r2, r3, #1
 80113a8:	2030      	movs	r0, #48	; 0x30
 80113aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80113ae:	4422      	add	r2, r4
 80113b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80113b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80113b8:	3302      	adds	r3, #2
 80113ba:	e7c7      	b.n	801134c <_printf_common+0x58>
 80113bc:	2301      	movs	r3, #1
 80113be:	4622      	mov	r2, r4
 80113c0:	4649      	mov	r1, r9
 80113c2:	4638      	mov	r0, r7
 80113c4:	47c0      	blx	r8
 80113c6:	3001      	adds	r0, #1
 80113c8:	d0e6      	beq.n	8011398 <_printf_common+0xa4>
 80113ca:	3601      	adds	r6, #1
 80113cc:	e7d9      	b.n	8011382 <_printf_common+0x8e>
	...

080113d0 <_printf_i>:
 80113d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80113d4:	7e0f      	ldrb	r7, [r1, #24]
 80113d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80113d8:	2f78      	cmp	r7, #120	; 0x78
 80113da:	4691      	mov	r9, r2
 80113dc:	4680      	mov	r8, r0
 80113de:	460c      	mov	r4, r1
 80113e0:	469a      	mov	sl, r3
 80113e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80113e6:	d807      	bhi.n	80113f8 <_printf_i+0x28>
 80113e8:	2f62      	cmp	r7, #98	; 0x62
 80113ea:	d80a      	bhi.n	8011402 <_printf_i+0x32>
 80113ec:	2f00      	cmp	r7, #0
 80113ee:	f000 80d8 	beq.w	80115a2 <_printf_i+0x1d2>
 80113f2:	2f58      	cmp	r7, #88	; 0x58
 80113f4:	f000 80a3 	beq.w	801153e <_printf_i+0x16e>
 80113f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80113fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011400:	e03a      	b.n	8011478 <_printf_i+0xa8>
 8011402:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011406:	2b15      	cmp	r3, #21
 8011408:	d8f6      	bhi.n	80113f8 <_printf_i+0x28>
 801140a:	a101      	add	r1, pc, #4	; (adr r1, 8011410 <_printf_i+0x40>)
 801140c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011410:	08011469 	.word	0x08011469
 8011414:	0801147d 	.word	0x0801147d
 8011418:	080113f9 	.word	0x080113f9
 801141c:	080113f9 	.word	0x080113f9
 8011420:	080113f9 	.word	0x080113f9
 8011424:	080113f9 	.word	0x080113f9
 8011428:	0801147d 	.word	0x0801147d
 801142c:	080113f9 	.word	0x080113f9
 8011430:	080113f9 	.word	0x080113f9
 8011434:	080113f9 	.word	0x080113f9
 8011438:	080113f9 	.word	0x080113f9
 801143c:	08011589 	.word	0x08011589
 8011440:	080114ad 	.word	0x080114ad
 8011444:	0801156b 	.word	0x0801156b
 8011448:	080113f9 	.word	0x080113f9
 801144c:	080113f9 	.word	0x080113f9
 8011450:	080115ab 	.word	0x080115ab
 8011454:	080113f9 	.word	0x080113f9
 8011458:	080114ad 	.word	0x080114ad
 801145c:	080113f9 	.word	0x080113f9
 8011460:	080113f9 	.word	0x080113f9
 8011464:	08011573 	.word	0x08011573
 8011468:	682b      	ldr	r3, [r5, #0]
 801146a:	1d1a      	adds	r2, r3, #4
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	602a      	str	r2, [r5, #0]
 8011470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011474:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011478:	2301      	movs	r3, #1
 801147a:	e0a3      	b.n	80115c4 <_printf_i+0x1f4>
 801147c:	6820      	ldr	r0, [r4, #0]
 801147e:	6829      	ldr	r1, [r5, #0]
 8011480:	0606      	lsls	r6, r0, #24
 8011482:	f101 0304 	add.w	r3, r1, #4
 8011486:	d50a      	bpl.n	801149e <_printf_i+0xce>
 8011488:	680e      	ldr	r6, [r1, #0]
 801148a:	602b      	str	r3, [r5, #0]
 801148c:	2e00      	cmp	r6, #0
 801148e:	da03      	bge.n	8011498 <_printf_i+0xc8>
 8011490:	232d      	movs	r3, #45	; 0x2d
 8011492:	4276      	negs	r6, r6
 8011494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011498:	485e      	ldr	r0, [pc, #376]	; (8011614 <_printf_i+0x244>)
 801149a:	230a      	movs	r3, #10
 801149c:	e019      	b.n	80114d2 <_printf_i+0x102>
 801149e:	680e      	ldr	r6, [r1, #0]
 80114a0:	602b      	str	r3, [r5, #0]
 80114a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80114a6:	bf18      	it	ne
 80114a8:	b236      	sxthne	r6, r6
 80114aa:	e7ef      	b.n	801148c <_printf_i+0xbc>
 80114ac:	682b      	ldr	r3, [r5, #0]
 80114ae:	6820      	ldr	r0, [r4, #0]
 80114b0:	1d19      	adds	r1, r3, #4
 80114b2:	6029      	str	r1, [r5, #0]
 80114b4:	0601      	lsls	r1, r0, #24
 80114b6:	d501      	bpl.n	80114bc <_printf_i+0xec>
 80114b8:	681e      	ldr	r6, [r3, #0]
 80114ba:	e002      	b.n	80114c2 <_printf_i+0xf2>
 80114bc:	0646      	lsls	r6, r0, #25
 80114be:	d5fb      	bpl.n	80114b8 <_printf_i+0xe8>
 80114c0:	881e      	ldrh	r6, [r3, #0]
 80114c2:	4854      	ldr	r0, [pc, #336]	; (8011614 <_printf_i+0x244>)
 80114c4:	2f6f      	cmp	r7, #111	; 0x6f
 80114c6:	bf0c      	ite	eq
 80114c8:	2308      	moveq	r3, #8
 80114ca:	230a      	movne	r3, #10
 80114cc:	2100      	movs	r1, #0
 80114ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80114d2:	6865      	ldr	r5, [r4, #4]
 80114d4:	60a5      	str	r5, [r4, #8]
 80114d6:	2d00      	cmp	r5, #0
 80114d8:	bfa2      	ittt	ge
 80114da:	6821      	ldrge	r1, [r4, #0]
 80114dc:	f021 0104 	bicge.w	r1, r1, #4
 80114e0:	6021      	strge	r1, [r4, #0]
 80114e2:	b90e      	cbnz	r6, 80114e8 <_printf_i+0x118>
 80114e4:	2d00      	cmp	r5, #0
 80114e6:	d04d      	beq.n	8011584 <_printf_i+0x1b4>
 80114e8:	4615      	mov	r5, r2
 80114ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80114ee:	fb03 6711 	mls	r7, r3, r1, r6
 80114f2:	5dc7      	ldrb	r7, [r0, r7]
 80114f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80114f8:	4637      	mov	r7, r6
 80114fa:	42bb      	cmp	r3, r7
 80114fc:	460e      	mov	r6, r1
 80114fe:	d9f4      	bls.n	80114ea <_printf_i+0x11a>
 8011500:	2b08      	cmp	r3, #8
 8011502:	d10b      	bne.n	801151c <_printf_i+0x14c>
 8011504:	6823      	ldr	r3, [r4, #0]
 8011506:	07de      	lsls	r6, r3, #31
 8011508:	d508      	bpl.n	801151c <_printf_i+0x14c>
 801150a:	6923      	ldr	r3, [r4, #16]
 801150c:	6861      	ldr	r1, [r4, #4]
 801150e:	4299      	cmp	r1, r3
 8011510:	bfde      	ittt	le
 8011512:	2330      	movle	r3, #48	; 0x30
 8011514:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011518:	f105 35ff 	addle.w	r5, r5, #4294967295
 801151c:	1b52      	subs	r2, r2, r5
 801151e:	6122      	str	r2, [r4, #16]
 8011520:	f8cd a000 	str.w	sl, [sp]
 8011524:	464b      	mov	r3, r9
 8011526:	aa03      	add	r2, sp, #12
 8011528:	4621      	mov	r1, r4
 801152a:	4640      	mov	r0, r8
 801152c:	f7ff fee2 	bl	80112f4 <_printf_common>
 8011530:	3001      	adds	r0, #1
 8011532:	d14c      	bne.n	80115ce <_printf_i+0x1fe>
 8011534:	f04f 30ff 	mov.w	r0, #4294967295
 8011538:	b004      	add	sp, #16
 801153a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801153e:	4835      	ldr	r0, [pc, #212]	; (8011614 <_printf_i+0x244>)
 8011540:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011544:	6829      	ldr	r1, [r5, #0]
 8011546:	6823      	ldr	r3, [r4, #0]
 8011548:	f851 6b04 	ldr.w	r6, [r1], #4
 801154c:	6029      	str	r1, [r5, #0]
 801154e:	061d      	lsls	r5, r3, #24
 8011550:	d514      	bpl.n	801157c <_printf_i+0x1ac>
 8011552:	07df      	lsls	r7, r3, #31
 8011554:	bf44      	itt	mi
 8011556:	f043 0320 	orrmi.w	r3, r3, #32
 801155a:	6023      	strmi	r3, [r4, #0]
 801155c:	b91e      	cbnz	r6, 8011566 <_printf_i+0x196>
 801155e:	6823      	ldr	r3, [r4, #0]
 8011560:	f023 0320 	bic.w	r3, r3, #32
 8011564:	6023      	str	r3, [r4, #0]
 8011566:	2310      	movs	r3, #16
 8011568:	e7b0      	b.n	80114cc <_printf_i+0xfc>
 801156a:	6823      	ldr	r3, [r4, #0]
 801156c:	f043 0320 	orr.w	r3, r3, #32
 8011570:	6023      	str	r3, [r4, #0]
 8011572:	2378      	movs	r3, #120	; 0x78
 8011574:	4828      	ldr	r0, [pc, #160]	; (8011618 <_printf_i+0x248>)
 8011576:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801157a:	e7e3      	b.n	8011544 <_printf_i+0x174>
 801157c:	0659      	lsls	r1, r3, #25
 801157e:	bf48      	it	mi
 8011580:	b2b6      	uxthmi	r6, r6
 8011582:	e7e6      	b.n	8011552 <_printf_i+0x182>
 8011584:	4615      	mov	r5, r2
 8011586:	e7bb      	b.n	8011500 <_printf_i+0x130>
 8011588:	682b      	ldr	r3, [r5, #0]
 801158a:	6826      	ldr	r6, [r4, #0]
 801158c:	6961      	ldr	r1, [r4, #20]
 801158e:	1d18      	adds	r0, r3, #4
 8011590:	6028      	str	r0, [r5, #0]
 8011592:	0635      	lsls	r5, r6, #24
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	d501      	bpl.n	801159c <_printf_i+0x1cc>
 8011598:	6019      	str	r1, [r3, #0]
 801159a:	e002      	b.n	80115a2 <_printf_i+0x1d2>
 801159c:	0670      	lsls	r0, r6, #25
 801159e:	d5fb      	bpl.n	8011598 <_printf_i+0x1c8>
 80115a0:	8019      	strh	r1, [r3, #0]
 80115a2:	2300      	movs	r3, #0
 80115a4:	6123      	str	r3, [r4, #16]
 80115a6:	4615      	mov	r5, r2
 80115a8:	e7ba      	b.n	8011520 <_printf_i+0x150>
 80115aa:	682b      	ldr	r3, [r5, #0]
 80115ac:	1d1a      	adds	r2, r3, #4
 80115ae:	602a      	str	r2, [r5, #0]
 80115b0:	681d      	ldr	r5, [r3, #0]
 80115b2:	6862      	ldr	r2, [r4, #4]
 80115b4:	2100      	movs	r1, #0
 80115b6:	4628      	mov	r0, r5
 80115b8:	f7ee fe22 	bl	8000200 <memchr>
 80115bc:	b108      	cbz	r0, 80115c2 <_printf_i+0x1f2>
 80115be:	1b40      	subs	r0, r0, r5
 80115c0:	6060      	str	r0, [r4, #4]
 80115c2:	6863      	ldr	r3, [r4, #4]
 80115c4:	6123      	str	r3, [r4, #16]
 80115c6:	2300      	movs	r3, #0
 80115c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80115cc:	e7a8      	b.n	8011520 <_printf_i+0x150>
 80115ce:	6923      	ldr	r3, [r4, #16]
 80115d0:	462a      	mov	r2, r5
 80115d2:	4649      	mov	r1, r9
 80115d4:	4640      	mov	r0, r8
 80115d6:	47d0      	blx	sl
 80115d8:	3001      	adds	r0, #1
 80115da:	d0ab      	beq.n	8011534 <_printf_i+0x164>
 80115dc:	6823      	ldr	r3, [r4, #0]
 80115de:	079b      	lsls	r3, r3, #30
 80115e0:	d413      	bmi.n	801160a <_printf_i+0x23a>
 80115e2:	68e0      	ldr	r0, [r4, #12]
 80115e4:	9b03      	ldr	r3, [sp, #12]
 80115e6:	4298      	cmp	r0, r3
 80115e8:	bfb8      	it	lt
 80115ea:	4618      	movlt	r0, r3
 80115ec:	e7a4      	b.n	8011538 <_printf_i+0x168>
 80115ee:	2301      	movs	r3, #1
 80115f0:	4632      	mov	r2, r6
 80115f2:	4649      	mov	r1, r9
 80115f4:	4640      	mov	r0, r8
 80115f6:	47d0      	blx	sl
 80115f8:	3001      	adds	r0, #1
 80115fa:	d09b      	beq.n	8011534 <_printf_i+0x164>
 80115fc:	3501      	adds	r5, #1
 80115fe:	68e3      	ldr	r3, [r4, #12]
 8011600:	9903      	ldr	r1, [sp, #12]
 8011602:	1a5b      	subs	r3, r3, r1
 8011604:	42ab      	cmp	r3, r5
 8011606:	dcf2      	bgt.n	80115ee <_printf_i+0x21e>
 8011608:	e7eb      	b.n	80115e2 <_printf_i+0x212>
 801160a:	2500      	movs	r5, #0
 801160c:	f104 0619 	add.w	r6, r4, #25
 8011610:	e7f5      	b.n	80115fe <_printf_i+0x22e>
 8011612:	bf00      	nop
 8011614:	08014bcc 	.word	0x08014bcc
 8011618:	08014bdd 	.word	0x08014bdd

0801161c <iprintf>:
 801161c:	b40f      	push	{r0, r1, r2, r3}
 801161e:	4b0a      	ldr	r3, [pc, #40]	; (8011648 <iprintf+0x2c>)
 8011620:	b513      	push	{r0, r1, r4, lr}
 8011622:	681c      	ldr	r4, [r3, #0]
 8011624:	b124      	cbz	r4, 8011630 <iprintf+0x14>
 8011626:	69a3      	ldr	r3, [r4, #24]
 8011628:	b913      	cbnz	r3, 8011630 <iprintf+0x14>
 801162a:	4620      	mov	r0, r4
 801162c:	f001 faf0 	bl	8012c10 <__sinit>
 8011630:	ab05      	add	r3, sp, #20
 8011632:	9a04      	ldr	r2, [sp, #16]
 8011634:	68a1      	ldr	r1, [r4, #8]
 8011636:	9301      	str	r3, [sp, #4]
 8011638:	4620      	mov	r0, r4
 801163a:	f002 fb17 	bl	8013c6c <_vfiprintf_r>
 801163e:	b002      	add	sp, #8
 8011640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011644:	b004      	add	sp, #16
 8011646:	4770      	bx	lr
 8011648:	20000050 	.word	0x20000050

0801164c <_puts_r>:
 801164c:	b570      	push	{r4, r5, r6, lr}
 801164e:	460e      	mov	r6, r1
 8011650:	4605      	mov	r5, r0
 8011652:	b118      	cbz	r0, 801165c <_puts_r+0x10>
 8011654:	6983      	ldr	r3, [r0, #24]
 8011656:	b90b      	cbnz	r3, 801165c <_puts_r+0x10>
 8011658:	f001 fada 	bl	8012c10 <__sinit>
 801165c:	69ab      	ldr	r3, [r5, #24]
 801165e:	68ac      	ldr	r4, [r5, #8]
 8011660:	b913      	cbnz	r3, 8011668 <_puts_r+0x1c>
 8011662:	4628      	mov	r0, r5
 8011664:	f001 fad4 	bl	8012c10 <__sinit>
 8011668:	4b2c      	ldr	r3, [pc, #176]	; (801171c <_puts_r+0xd0>)
 801166a:	429c      	cmp	r4, r3
 801166c:	d120      	bne.n	80116b0 <_puts_r+0x64>
 801166e:	686c      	ldr	r4, [r5, #4]
 8011670:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011672:	07db      	lsls	r3, r3, #31
 8011674:	d405      	bmi.n	8011682 <_puts_r+0x36>
 8011676:	89a3      	ldrh	r3, [r4, #12]
 8011678:	0598      	lsls	r0, r3, #22
 801167a:	d402      	bmi.n	8011682 <_puts_r+0x36>
 801167c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801167e:	f001 fb7c 	bl	8012d7a <__retarget_lock_acquire_recursive>
 8011682:	89a3      	ldrh	r3, [r4, #12]
 8011684:	0719      	lsls	r1, r3, #28
 8011686:	d51d      	bpl.n	80116c4 <_puts_r+0x78>
 8011688:	6923      	ldr	r3, [r4, #16]
 801168a:	b1db      	cbz	r3, 80116c4 <_puts_r+0x78>
 801168c:	3e01      	subs	r6, #1
 801168e:	68a3      	ldr	r3, [r4, #8]
 8011690:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011694:	3b01      	subs	r3, #1
 8011696:	60a3      	str	r3, [r4, #8]
 8011698:	bb39      	cbnz	r1, 80116ea <_puts_r+0x9e>
 801169a:	2b00      	cmp	r3, #0
 801169c:	da38      	bge.n	8011710 <_puts_r+0xc4>
 801169e:	4622      	mov	r2, r4
 80116a0:	210a      	movs	r1, #10
 80116a2:	4628      	mov	r0, r5
 80116a4:	f000 fa20 	bl	8011ae8 <__swbuf_r>
 80116a8:	3001      	adds	r0, #1
 80116aa:	d011      	beq.n	80116d0 <_puts_r+0x84>
 80116ac:	250a      	movs	r5, #10
 80116ae:	e011      	b.n	80116d4 <_puts_r+0x88>
 80116b0:	4b1b      	ldr	r3, [pc, #108]	; (8011720 <_puts_r+0xd4>)
 80116b2:	429c      	cmp	r4, r3
 80116b4:	d101      	bne.n	80116ba <_puts_r+0x6e>
 80116b6:	68ac      	ldr	r4, [r5, #8]
 80116b8:	e7da      	b.n	8011670 <_puts_r+0x24>
 80116ba:	4b1a      	ldr	r3, [pc, #104]	; (8011724 <_puts_r+0xd8>)
 80116bc:	429c      	cmp	r4, r3
 80116be:	bf08      	it	eq
 80116c0:	68ec      	ldreq	r4, [r5, #12]
 80116c2:	e7d5      	b.n	8011670 <_puts_r+0x24>
 80116c4:	4621      	mov	r1, r4
 80116c6:	4628      	mov	r0, r5
 80116c8:	f000 fa72 	bl	8011bb0 <__swsetup_r>
 80116cc:	2800      	cmp	r0, #0
 80116ce:	d0dd      	beq.n	801168c <_puts_r+0x40>
 80116d0:	f04f 35ff 	mov.w	r5, #4294967295
 80116d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80116d6:	07da      	lsls	r2, r3, #31
 80116d8:	d405      	bmi.n	80116e6 <_puts_r+0x9a>
 80116da:	89a3      	ldrh	r3, [r4, #12]
 80116dc:	059b      	lsls	r3, r3, #22
 80116de:	d402      	bmi.n	80116e6 <_puts_r+0x9a>
 80116e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80116e2:	f001 fb4b 	bl	8012d7c <__retarget_lock_release_recursive>
 80116e6:	4628      	mov	r0, r5
 80116e8:	bd70      	pop	{r4, r5, r6, pc}
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	da04      	bge.n	80116f8 <_puts_r+0xac>
 80116ee:	69a2      	ldr	r2, [r4, #24]
 80116f0:	429a      	cmp	r2, r3
 80116f2:	dc06      	bgt.n	8011702 <_puts_r+0xb6>
 80116f4:	290a      	cmp	r1, #10
 80116f6:	d004      	beq.n	8011702 <_puts_r+0xb6>
 80116f8:	6823      	ldr	r3, [r4, #0]
 80116fa:	1c5a      	adds	r2, r3, #1
 80116fc:	6022      	str	r2, [r4, #0]
 80116fe:	7019      	strb	r1, [r3, #0]
 8011700:	e7c5      	b.n	801168e <_puts_r+0x42>
 8011702:	4622      	mov	r2, r4
 8011704:	4628      	mov	r0, r5
 8011706:	f000 f9ef 	bl	8011ae8 <__swbuf_r>
 801170a:	3001      	adds	r0, #1
 801170c:	d1bf      	bne.n	801168e <_puts_r+0x42>
 801170e:	e7df      	b.n	80116d0 <_puts_r+0x84>
 8011710:	6823      	ldr	r3, [r4, #0]
 8011712:	250a      	movs	r5, #10
 8011714:	1c5a      	adds	r2, r3, #1
 8011716:	6022      	str	r2, [r4, #0]
 8011718:	701d      	strb	r5, [r3, #0]
 801171a:	e7db      	b.n	80116d4 <_puts_r+0x88>
 801171c:	08014e38 	.word	0x08014e38
 8011720:	08014e58 	.word	0x08014e58
 8011724:	08014e18 	.word	0x08014e18

08011728 <puts>:
 8011728:	4b02      	ldr	r3, [pc, #8]	; (8011734 <puts+0xc>)
 801172a:	4601      	mov	r1, r0
 801172c:	6818      	ldr	r0, [r3, #0]
 801172e:	f7ff bf8d 	b.w	801164c <_puts_r>
 8011732:	bf00      	nop
 8011734:	20000050 	.word	0x20000050

08011738 <_sbrk_r>:
 8011738:	b538      	push	{r3, r4, r5, lr}
 801173a:	4d06      	ldr	r5, [pc, #24]	; (8011754 <_sbrk_r+0x1c>)
 801173c:	2300      	movs	r3, #0
 801173e:	4604      	mov	r4, r0
 8011740:	4608      	mov	r0, r1
 8011742:	602b      	str	r3, [r5, #0]
 8011744:	f7f2 f870 	bl	8003828 <_sbrk>
 8011748:	1c43      	adds	r3, r0, #1
 801174a:	d102      	bne.n	8011752 <_sbrk_r+0x1a>
 801174c:	682b      	ldr	r3, [r5, #0]
 801174e:	b103      	cbz	r3, 8011752 <_sbrk_r+0x1a>
 8011750:	6023      	str	r3, [r4, #0]
 8011752:	bd38      	pop	{r3, r4, r5, pc}
 8011754:	20005e30 	.word	0x20005e30

08011758 <_raise_r>:
 8011758:	291f      	cmp	r1, #31
 801175a:	b538      	push	{r3, r4, r5, lr}
 801175c:	4604      	mov	r4, r0
 801175e:	460d      	mov	r5, r1
 8011760:	d904      	bls.n	801176c <_raise_r+0x14>
 8011762:	2316      	movs	r3, #22
 8011764:	6003      	str	r3, [r0, #0]
 8011766:	f04f 30ff 	mov.w	r0, #4294967295
 801176a:	bd38      	pop	{r3, r4, r5, pc}
 801176c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801176e:	b112      	cbz	r2, 8011776 <_raise_r+0x1e>
 8011770:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011774:	b94b      	cbnz	r3, 801178a <_raise_r+0x32>
 8011776:	4620      	mov	r0, r4
 8011778:	f000 f830 	bl	80117dc <_getpid_r>
 801177c:	462a      	mov	r2, r5
 801177e:	4601      	mov	r1, r0
 8011780:	4620      	mov	r0, r4
 8011782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011786:	f000 b817 	b.w	80117b8 <_kill_r>
 801178a:	2b01      	cmp	r3, #1
 801178c:	d00a      	beq.n	80117a4 <_raise_r+0x4c>
 801178e:	1c59      	adds	r1, r3, #1
 8011790:	d103      	bne.n	801179a <_raise_r+0x42>
 8011792:	2316      	movs	r3, #22
 8011794:	6003      	str	r3, [r0, #0]
 8011796:	2001      	movs	r0, #1
 8011798:	e7e7      	b.n	801176a <_raise_r+0x12>
 801179a:	2400      	movs	r4, #0
 801179c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80117a0:	4628      	mov	r0, r5
 80117a2:	4798      	blx	r3
 80117a4:	2000      	movs	r0, #0
 80117a6:	e7e0      	b.n	801176a <_raise_r+0x12>

080117a8 <raise>:
 80117a8:	4b02      	ldr	r3, [pc, #8]	; (80117b4 <raise+0xc>)
 80117aa:	4601      	mov	r1, r0
 80117ac:	6818      	ldr	r0, [r3, #0]
 80117ae:	f7ff bfd3 	b.w	8011758 <_raise_r>
 80117b2:	bf00      	nop
 80117b4:	20000050 	.word	0x20000050

080117b8 <_kill_r>:
 80117b8:	b538      	push	{r3, r4, r5, lr}
 80117ba:	4d07      	ldr	r5, [pc, #28]	; (80117d8 <_kill_r+0x20>)
 80117bc:	2300      	movs	r3, #0
 80117be:	4604      	mov	r4, r0
 80117c0:	4608      	mov	r0, r1
 80117c2:	4611      	mov	r1, r2
 80117c4:	602b      	str	r3, [r5, #0]
 80117c6:	f7f1 ffa7 	bl	8003718 <_kill>
 80117ca:	1c43      	adds	r3, r0, #1
 80117cc:	d102      	bne.n	80117d4 <_kill_r+0x1c>
 80117ce:	682b      	ldr	r3, [r5, #0]
 80117d0:	b103      	cbz	r3, 80117d4 <_kill_r+0x1c>
 80117d2:	6023      	str	r3, [r4, #0]
 80117d4:	bd38      	pop	{r3, r4, r5, pc}
 80117d6:	bf00      	nop
 80117d8:	20005e30 	.word	0x20005e30

080117dc <_getpid_r>:
 80117dc:	f7f1 bf94 	b.w	8003708 <_getpid>

080117e0 <siprintf>:
 80117e0:	b40e      	push	{r1, r2, r3}
 80117e2:	b500      	push	{lr}
 80117e4:	b09c      	sub	sp, #112	; 0x70
 80117e6:	ab1d      	add	r3, sp, #116	; 0x74
 80117e8:	9002      	str	r0, [sp, #8]
 80117ea:	9006      	str	r0, [sp, #24]
 80117ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80117f0:	4809      	ldr	r0, [pc, #36]	; (8011818 <siprintf+0x38>)
 80117f2:	9107      	str	r1, [sp, #28]
 80117f4:	9104      	str	r1, [sp, #16]
 80117f6:	4909      	ldr	r1, [pc, #36]	; (801181c <siprintf+0x3c>)
 80117f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80117fc:	9105      	str	r1, [sp, #20]
 80117fe:	6800      	ldr	r0, [r0, #0]
 8011800:	9301      	str	r3, [sp, #4]
 8011802:	a902      	add	r1, sp, #8
 8011804:	f001 ff36 	bl	8013674 <_svfiprintf_r>
 8011808:	9b02      	ldr	r3, [sp, #8]
 801180a:	2200      	movs	r2, #0
 801180c:	701a      	strb	r2, [r3, #0]
 801180e:	b01c      	add	sp, #112	; 0x70
 8011810:	f85d eb04 	ldr.w	lr, [sp], #4
 8011814:	b003      	add	sp, #12
 8011816:	4770      	bx	lr
 8011818:	20000050 	.word	0x20000050
 801181c:	ffff0208 	.word	0xffff0208

08011820 <siscanf>:
 8011820:	b40e      	push	{r1, r2, r3}
 8011822:	b510      	push	{r4, lr}
 8011824:	b09f      	sub	sp, #124	; 0x7c
 8011826:	ac21      	add	r4, sp, #132	; 0x84
 8011828:	f44f 7101 	mov.w	r1, #516	; 0x204
 801182c:	f854 2b04 	ldr.w	r2, [r4], #4
 8011830:	9201      	str	r2, [sp, #4]
 8011832:	f8ad 101c 	strh.w	r1, [sp, #28]
 8011836:	9004      	str	r0, [sp, #16]
 8011838:	9008      	str	r0, [sp, #32]
 801183a:	f7ee fcd3 	bl	80001e4 <strlen>
 801183e:	4b0c      	ldr	r3, [pc, #48]	; (8011870 <siscanf+0x50>)
 8011840:	9005      	str	r0, [sp, #20]
 8011842:	9009      	str	r0, [sp, #36]	; 0x24
 8011844:	930d      	str	r3, [sp, #52]	; 0x34
 8011846:	480b      	ldr	r0, [pc, #44]	; (8011874 <siscanf+0x54>)
 8011848:	9a01      	ldr	r2, [sp, #4]
 801184a:	6800      	ldr	r0, [r0, #0]
 801184c:	9403      	str	r4, [sp, #12]
 801184e:	2300      	movs	r3, #0
 8011850:	9311      	str	r3, [sp, #68]	; 0x44
 8011852:	9316      	str	r3, [sp, #88]	; 0x58
 8011854:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011858:	f8ad 301e 	strh.w	r3, [sp, #30]
 801185c:	a904      	add	r1, sp, #16
 801185e:	4623      	mov	r3, r4
 8011860:	f002 f862 	bl	8013928 <__ssvfiscanf_r>
 8011864:	b01f      	add	sp, #124	; 0x7c
 8011866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801186a:	b003      	add	sp, #12
 801186c:	4770      	bx	lr
 801186e:	bf00      	nop
 8011870:	0801189b 	.word	0x0801189b
 8011874:	20000050 	.word	0x20000050

08011878 <__sread>:
 8011878:	b510      	push	{r4, lr}
 801187a:	460c      	mov	r4, r1
 801187c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011880:	f002 fc76 	bl	8014170 <_read_r>
 8011884:	2800      	cmp	r0, #0
 8011886:	bfab      	itete	ge
 8011888:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801188a:	89a3      	ldrhlt	r3, [r4, #12]
 801188c:	181b      	addge	r3, r3, r0
 801188e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011892:	bfac      	ite	ge
 8011894:	6563      	strge	r3, [r4, #84]	; 0x54
 8011896:	81a3      	strhlt	r3, [r4, #12]
 8011898:	bd10      	pop	{r4, pc}

0801189a <__seofread>:
 801189a:	2000      	movs	r0, #0
 801189c:	4770      	bx	lr

0801189e <__swrite>:
 801189e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118a2:	461f      	mov	r7, r3
 80118a4:	898b      	ldrh	r3, [r1, #12]
 80118a6:	05db      	lsls	r3, r3, #23
 80118a8:	4605      	mov	r5, r0
 80118aa:	460c      	mov	r4, r1
 80118ac:	4616      	mov	r6, r2
 80118ae:	d505      	bpl.n	80118bc <__swrite+0x1e>
 80118b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118b4:	2302      	movs	r3, #2
 80118b6:	2200      	movs	r2, #0
 80118b8:	f001 fa62 	bl	8012d80 <_lseek_r>
 80118bc:	89a3      	ldrh	r3, [r4, #12]
 80118be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80118c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80118c6:	81a3      	strh	r3, [r4, #12]
 80118c8:	4632      	mov	r2, r6
 80118ca:	463b      	mov	r3, r7
 80118cc:	4628      	mov	r0, r5
 80118ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80118d2:	f000 b95b 	b.w	8011b8c <_write_r>

080118d6 <__sseek>:
 80118d6:	b510      	push	{r4, lr}
 80118d8:	460c      	mov	r4, r1
 80118da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118de:	f001 fa4f 	bl	8012d80 <_lseek_r>
 80118e2:	1c43      	adds	r3, r0, #1
 80118e4:	89a3      	ldrh	r3, [r4, #12]
 80118e6:	bf15      	itete	ne
 80118e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80118ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80118ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80118f2:	81a3      	strheq	r3, [r4, #12]
 80118f4:	bf18      	it	ne
 80118f6:	81a3      	strhne	r3, [r4, #12]
 80118f8:	bd10      	pop	{r4, pc}

080118fa <__sclose>:
 80118fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118fe:	f000 b9e3 	b.w	8011cc8 <_close_r>

08011902 <strcpy>:
 8011902:	4603      	mov	r3, r0
 8011904:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011908:	f803 2b01 	strb.w	r2, [r3], #1
 801190c:	2a00      	cmp	r2, #0
 801190e:	d1f9      	bne.n	8011904 <strcpy+0x2>
 8011910:	4770      	bx	lr
	...

08011914 <strtok>:
 8011914:	4b16      	ldr	r3, [pc, #88]	; (8011970 <strtok+0x5c>)
 8011916:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011918:	681e      	ldr	r6, [r3, #0]
 801191a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 801191c:	4605      	mov	r5, r0
 801191e:	b9fc      	cbnz	r4, 8011960 <strtok+0x4c>
 8011920:	2050      	movs	r0, #80	; 0x50
 8011922:	9101      	str	r1, [sp, #4]
 8011924:	f7ff f90a 	bl	8010b3c <malloc>
 8011928:	9901      	ldr	r1, [sp, #4]
 801192a:	65b0      	str	r0, [r6, #88]	; 0x58
 801192c:	4602      	mov	r2, r0
 801192e:	b920      	cbnz	r0, 801193a <strtok+0x26>
 8011930:	4b10      	ldr	r3, [pc, #64]	; (8011974 <strtok+0x60>)
 8011932:	4811      	ldr	r0, [pc, #68]	; (8011978 <strtok+0x64>)
 8011934:	2157      	movs	r1, #87	; 0x57
 8011936:	f000 f9a9 	bl	8011c8c <__assert_func>
 801193a:	e9c0 4400 	strd	r4, r4, [r0]
 801193e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8011942:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8011946:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801194a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801194e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8011952:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8011956:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801195a:	6184      	str	r4, [r0, #24]
 801195c:	7704      	strb	r4, [r0, #28]
 801195e:	6244      	str	r4, [r0, #36]	; 0x24
 8011960:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8011962:	2301      	movs	r3, #1
 8011964:	4628      	mov	r0, r5
 8011966:	b002      	add	sp, #8
 8011968:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801196c:	f000 b806 	b.w	801197c <__strtok_r>
 8011970:	20000050 	.word	0x20000050
 8011974:	08014bee 	.word	0x08014bee
 8011978:	08014c05 	.word	0x08014c05

0801197c <__strtok_r>:
 801197c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801197e:	b908      	cbnz	r0, 8011984 <__strtok_r+0x8>
 8011980:	6810      	ldr	r0, [r2, #0]
 8011982:	b188      	cbz	r0, 80119a8 <__strtok_r+0x2c>
 8011984:	4604      	mov	r4, r0
 8011986:	4620      	mov	r0, r4
 8011988:	f814 5b01 	ldrb.w	r5, [r4], #1
 801198c:	460f      	mov	r7, r1
 801198e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8011992:	b91e      	cbnz	r6, 801199c <__strtok_r+0x20>
 8011994:	b965      	cbnz	r5, 80119b0 <__strtok_r+0x34>
 8011996:	6015      	str	r5, [r2, #0]
 8011998:	4628      	mov	r0, r5
 801199a:	e005      	b.n	80119a8 <__strtok_r+0x2c>
 801199c:	42b5      	cmp	r5, r6
 801199e:	d1f6      	bne.n	801198e <__strtok_r+0x12>
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d1f0      	bne.n	8011986 <__strtok_r+0xa>
 80119a4:	6014      	str	r4, [r2, #0]
 80119a6:	7003      	strb	r3, [r0, #0]
 80119a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119aa:	461c      	mov	r4, r3
 80119ac:	e00c      	b.n	80119c8 <__strtok_r+0x4c>
 80119ae:	b915      	cbnz	r5, 80119b6 <__strtok_r+0x3a>
 80119b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80119b4:	460e      	mov	r6, r1
 80119b6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80119ba:	42ab      	cmp	r3, r5
 80119bc:	d1f7      	bne.n	80119ae <__strtok_r+0x32>
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d0f3      	beq.n	80119aa <__strtok_r+0x2e>
 80119c2:	2300      	movs	r3, #0
 80119c4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80119c8:	6014      	str	r4, [r2, #0]
 80119ca:	e7ed      	b.n	80119a8 <__strtok_r+0x2c>

080119cc <_strtol_l.constprop.0>:
 80119cc:	2b01      	cmp	r3, #1
 80119ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119d2:	d001      	beq.n	80119d8 <_strtol_l.constprop.0+0xc>
 80119d4:	2b24      	cmp	r3, #36	; 0x24
 80119d6:	d906      	bls.n	80119e6 <_strtol_l.constprop.0+0x1a>
 80119d8:	f7ff f886 	bl	8010ae8 <__errno>
 80119dc:	2316      	movs	r3, #22
 80119de:	6003      	str	r3, [r0, #0]
 80119e0:	2000      	movs	r0, #0
 80119e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119e6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011acc <_strtol_l.constprop.0+0x100>
 80119ea:	460d      	mov	r5, r1
 80119ec:	462e      	mov	r6, r5
 80119ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80119f2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80119f6:	f017 0708 	ands.w	r7, r7, #8
 80119fa:	d1f7      	bne.n	80119ec <_strtol_l.constprop.0+0x20>
 80119fc:	2c2d      	cmp	r4, #45	; 0x2d
 80119fe:	d132      	bne.n	8011a66 <_strtol_l.constprop.0+0x9a>
 8011a00:	782c      	ldrb	r4, [r5, #0]
 8011a02:	2701      	movs	r7, #1
 8011a04:	1cb5      	adds	r5, r6, #2
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d05b      	beq.n	8011ac2 <_strtol_l.constprop.0+0xf6>
 8011a0a:	2b10      	cmp	r3, #16
 8011a0c:	d109      	bne.n	8011a22 <_strtol_l.constprop.0+0x56>
 8011a0e:	2c30      	cmp	r4, #48	; 0x30
 8011a10:	d107      	bne.n	8011a22 <_strtol_l.constprop.0+0x56>
 8011a12:	782c      	ldrb	r4, [r5, #0]
 8011a14:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011a18:	2c58      	cmp	r4, #88	; 0x58
 8011a1a:	d14d      	bne.n	8011ab8 <_strtol_l.constprop.0+0xec>
 8011a1c:	786c      	ldrb	r4, [r5, #1]
 8011a1e:	2310      	movs	r3, #16
 8011a20:	3502      	adds	r5, #2
 8011a22:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8011a26:	f108 38ff 	add.w	r8, r8, #4294967295
 8011a2a:	f04f 0c00 	mov.w	ip, #0
 8011a2e:	fbb8 f9f3 	udiv	r9, r8, r3
 8011a32:	4666      	mov	r6, ip
 8011a34:	fb03 8a19 	mls	sl, r3, r9, r8
 8011a38:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8011a3c:	f1be 0f09 	cmp.w	lr, #9
 8011a40:	d816      	bhi.n	8011a70 <_strtol_l.constprop.0+0xa4>
 8011a42:	4674      	mov	r4, lr
 8011a44:	42a3      	cmp	r3, r4
 8011a46:	dd24      	ble.n	8011a92 <_strtol_l.constprop.0+0xc6>
 8011a48:	f1bc 0f00 	cmp.w	ip, #0
 8011a4c:	db1e      	blt.n	8011a8c <_strtol_l.constprop.0+0xc0>
 8011a4e:	45b1      	cmp	r9, r6
 8011a50:	d31c      	bcc.n	8011a8c <_strtol_l.constprop.0+0xc0>
 8011a52:	d101      	bne.n	8011a58 <_strtol_l.constprop.0+0x8c>
 8011a54:	45a2      	cmp	sl, r4
 8011a56:	db19      	blt.n	8011a8c <_strtol_l.constprop.0+0xc0>
 8011a58:	fb06 4603 	mla	r6, r6, r3, r4
 8011a5c:	f04f 0c01 	mov.w	ip, #1
 8011a60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011a64:	e7e8      	b.n	8011a38 <_strtol_l.constprop.0+0x6c>
 8011a66:	2c2b      	cmp	r4, #43	; 0x2b
 8011a68:	bf04      	itt	eq
 8011a6a:	782c      	ldrbeq	r4, [r5, #0]
 8011a6c:	1cb5      	addeq	r5, r6, #2
 8011a6e:	e7ca      	b.n	8011a06 <_strtol_l.constprop.0+0x3a>
 8011a70:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8011a74:	f1be 0f19 	cmp.w	lr, #25
 8011a78:	d801      	bhi.n	8011a7e <_strtol_l.constprop.0+0xb2>
 8011a7a:	3c37      	subs	r4, #55	; 0x37
 8011a7c:	e7e2      	b.n	8011a44 <_strtol_l.constprop.0+0x78>
 8011a7e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8011a82:	f1be 0f19 	cmp.w	lr, #25
 8011a86:	d804      	bhi.n	8011a92 <_strtol_l.constprop.0+0xc6>
 8011a88:	3c57      	subs	r4, #87	; 0x57
 8011a8a:	e7db      	b.n	8011a44 <_strtol_l.constprop.0+0x78>
 8011a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8011a90:	e7e6      	b.n	8011a60 <_strtol_l.constprop.0+0x94>
 8011a92:	f1bc 0f00 	cmp.w	ip, #0
 8011a96:	da05      	bge.n	8011aa4 <_strtol_l.constprop.0+0xd8>
 8011a98:	2322      	movs	r3, #34	; 0x22
 8011a9a:	6003      	str	r3, [r0, #0]
 8011a9c:	4646      	mov	r6, r8
 8011a9e:	b942      	cbnz	r2, 8011ab2 <_strtol_l.constprop.0+0xe6>
 8011aa0:	4630      	mov	r0, r6
 8011aa2:	e79e      	b.n	80119e2 <_strtol_l.constprop.0+0x16>
 8011aa4:	b107      	cbz	r7, 8011aa8 <_strtol_l.constprop.0+0xdc>
 8011aa6:	4276      	negs	r6, r6
 8011aa8:	2a00      	cmp	r2, #0
 8011aaa:	d0f9      	beq.n	8011aa0 <_strtol_l.constprop.0+0xd4>
 8011aac:	f1bc 0f00 	cmp.w	ip, #0
 8011ab0:	d000      	beq.n	8011ab4 <_strtol_l.constprop.0+0xe8>
 8011ab2:	1e69      	subs	r1, r5, #1
 8011ab4:	6011      	str	r1, [r2, #0]
 8011ab6:	e7f3      	b.n	8011aa0 <_strtol_l.constprop.0+0xd4>
 8011ab8:	2430      	movs	r4, #48	; 0x30
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d1b1      	bne.n	8011a22 <_strtol_l.constprop.0+0x56>
 8011abe:	2308      	movs	r3, #8
 8011ac0:	e7af      	b.n	8011a22 <_strtol_l.constprop.0+0x56>
 8011ac2:	2c30      	cmp	r4, #48	; 0x30
 8011ac4:	d0a5      	beq.n	8011a12 <_strtol_l.constprop.0+0x46>
 8011ac6:	230a      	movs	r3, #10
 8011ac8:	e7ab      	b.n	8011a22 <_strtol_l.constprop.0+0x56>
 8011aca:	bf00      	nop
 8011acc:	08014c9f 	.word	0x08014c9f

08011ad0 <_strtol_r>:
 8011ad0:	f7ff bf7c 	b.w	80119cc <_strtol_l.constprop.0>

08011ad4 <strtol>:
 8011ad4:	4613      	mov	r3, r2
 8011ad6:	460a      	mov	r2, r1
 8011ad8:	4601      	mov	r1, r0
 8011ada:	4802      	ldr	r0, [pc, #8]	; (8011ae4 <strtol+0x10>)
 8011adc:	6800      	ldr	r0, [r0, #0]
 8011ade:	f7ff bf75 	b.w	80119cc <_strtol_l.constprop.0>
 8011ae2:	bf00      	nop
 8011ae4:	20000050 	.word	0x20000050

08011ae8 <__swbuf_r>:
 8011ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011aea:	460e      	mov	r6, r1
 8011aec:	4614      	mov	r4, r2
 8011aee:	4605      	mov	r5, r0
 8011af0:	b118      	cbz	r0, 8011afa <__swbuf_r+0x12>
 8011af2:	6983      	ldr	r3, [r0, #24]
 8011af4:	b90b      	cbnz	r3, 8011afa <__swbuf_r+0x12>
 8011af6:	f001 f88b 	bl	8012c10 <__sinit>
 8011afa:	4b21      	ldr	r3, [pc, #132]	; (8011b80 <__swbuf_r+0x98>)
 8011afc:	429c      	cmp	r4, r3
 8011afe:	d12b      	bne.n	8011b58 <__swbuf_r+0x70>
 8011b00:	686c      	ldr	r4, [r5, #4]
 8011b02:	69a3      	ldr	r3, [r4, #24]
 8011b04:	60a3      	str	r3, [r4, #8]
 8011b06:	89a3      	ldrh	r3, [r4, #12]
 8011b08:	071a      	lsls	r2, r3, #28
 8011b0a:	d52f      	bpl.n	8011b6c <__swbuf_r+0x84>
 8011b0c:	6923      	ldr	r3, [r4, #16]
 8011b0e:	b36b      	cbz	r3, 8011b6c <__swbuf_r+0x84>
 8011b10:	6923      	ldr	r3, [r4, #16]
 8011b12:	6820      	ldr	r0, [r4, #0]
 8011b14:	1ac0      	subs	r0, r0, r3
 8011b16:	6963      	ldr	r3, [r4, #20]
 8011b18:	b2f6      	uxtb	r6, r6
 8011b1a:	4283      	cmp	r3, r0
 8011b1c:	4637      	mov	r7, r6
 8011b1e:	dc04      	bgt.n	8011b2a <__swbuf_r+0x42>
 8011b20:	4621      	mov	r1, r4
 8011b22:	4628      	mov	r0, r5
 8011b24:	f000 ffe0 	bl	8012ae8 <_fflush_r>
 8011b28:	bb30      	cbnz	r0, 8011b78 <__swbuf_r+0x90>
 8011b2a:	68a3      	ldr	r3, [r4, #8]
 8011b2c:	3b01      	subs	r3, #1
 8011b2e:	60a3      	str	r3, [r4, #8]
 8011b30:	6823      	ldr	r3, [r4, #0]
 8011b32:	1c5a      	adds	r2, r3, #1
 8011b34:	6022      	str	r2, [r4, #0]
 8011b36:	701e      	strb	r6, [r3, #0]
 8011b38:	6963      	ldr	r3, [r4, #20]
 8011b3a:	3001      	adds	r0, #1
 8011b3c:	4283      	cmp	r3, r0
 8011b3e:	d004      	beq.n	8011b4a <__swbuf_r+0x62>
 8011b40:	89a3      	ldrh	r3, [r4, #12]
 8011b42:	07db      	lsls	r3, r3, #31
 8011b44:	d506      	bpl.n	8011b54 <__swbuf_r+0x6c>
 8011b46:	2e0a      	cmp	r6, #10
 8011b48:	d104      	bne.n	8011b54 <__swbuf_r+0x6c>
 8011b4a:	4621      	mov	r1, r4
 8011b4c:	4628      	mov	r0, r5
 8011b4e:	f000 ffcb 	bl	8012ae8 <_fflush_r>
 8011b52:	b988      	cbnz	r0, 8011b78 <__swbuf_r+0x90>
 8011b54:	4638      	mov	r0, r7
 8011b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b58:	4b0a      	ldr	r3, [pc, #40]	; (8011b84 <__swbuf_r+0x9c>)
 8011b5a:	429c      	cmp	r4, r3
 8011b5c:	d101      	bne.n	8011b62 <__swbuf_r+0x7a>
 8011b5e:	68ac      	ldr	r4, [r5, #8]
 8011b60:	e7cf      	b.n	8011b02 <__swbuf_r+0x1a>
 8011b62:	4b09      	ldr	r3, [pc, #36]	; (8011b88 <__swbuf_r+0xa0>)
 8011b64:	429c      	cmp	r4, r3
 8011b66:	bf08      	it	eq
 8011b68:	68ec      	ldreq	r4, [r5, #12]
 8011b6a:	e7ca      	b.n	8011b02 <__swbuf_r+0x1a>
 8011b6c:	4621      	mov	r1, r4
 8011b6e:	4628      	mov	r0, r5
 8011b70:	f000 f81e 	bl	8011bb0 <__swsetup_r>
 8011b74:	2800      	cmp	r0, #0
 8011b76:	d0cb      	beq.n	8011b10 <__swbuf_r+0x28>
 8011b78:	f04f 37ff 	mov.w	r7, #4294967295
 8011b7c:	e7ea      	b.n	8011b54 <__swbuf_r+0x6c>
 8011b7e:	bf00      	nop
 8011b80:	08014e38 	.word	0x08014e38
 8011b84:	08014e58 	.word	0x08014e58
 8011b88:	08014e18 	.word	0x08014e18

08011b8c <_write_r>:
 8011b8c:	b538      	push	{r3, r4, r5, lr}
 8011b8e:	4d07      	ldr	r5, [pc, #28]	; (8011bac <_write_r+0x20>)
 8011b90:	4604      	mov	r4, r0
 8011b92:	4608      	mov	r0, r1
 8011b94:	4611      	mov	r1, r2
 8011b96:	2200      	movs	r2, #0
 8011b98:	602a      	str	r2, [r5, #0]
 8011b9a:	461a      	mov	r2, r3
 8011b9c:	f7f1 fdf3 	bl	8003786 <_write>
 8011ba0:	1c43      	adds	r3, r0, #1
 8011ba2:	d102      	bne.n	8011baa <_write_r+0x1e>
 8011ba4:	682b      	ldr	r3, [r5, #0]
 8011ba6:	b103      	cbz	r3, 8011baa <_write_r+0x1e>
 8011ba8:	6023      	str	r3, [r4, #0]
 8011baa:	bd38      	pop	{r3, r4, r5, pc}
 8011bac:	20005e30 	.word	0x20005e30

08011bb0 <__swsetup_r>:
 8011bb0:	4b32      	ldr	r3, [pc, #200]	; (8011c7c <__swsetup_r+0xcc>)
 8011bb2:	b570      	push	{r4, r5, r6, lr}
 8011bb4:	681d      	ldr	r5, [r3, #0]
 8011bb6:	4606      	mov	r6, r0
 8011bb8:	460c      	mov	r4, r1
 8011bba:	b125      	cbz	r5, 8011bc6 <__swsetup_r+0x16>
 8011bbc:	69ab      	ldr	r3, [r5, #24]
 8011bbe:	b913      	cbnz	r3, 8011bc6 <__swsetup_r+0x16>
 8011bc0:	4628      	mov	r0, r5
 8011bc2:	f001 f825 	bl	8012c10 <__sinit>
 8011bc6:	4b2e      	ldr	r3, [pc, #184]	; (8011c80 <__swsetup_r+0xd0>)
 8011bc8:	429c      	cmp	r4, r3
 8011bca:	d10f      	bne.n	8011bec <__swsetup_r+0x3c>
 8011bcc:	686c      	ldr	r4, [r5, #4]
 8011bce:	89a3      	ldrh	r3, [r4, #12]
 8011bd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011bd4:	0719      	lsls	r1, r3, #28
 8011bd6:	d42c      	bmi.n	8011c32 <__swsetup_r+0x82>
 8011bd8:	06dd      	lsls	r5, r3, #27
 8011bda:	d411      	bmi.n	8011c00 <__swsetup_r+0x50>
 8011bdc:	2309      	movs	r3, #9
 8011bde:	6033      	str	r3, [r6, #0]
 8011be0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011be4:	81a3      	strh	r3, [r4, #12]
 8011be6:	f04f 30ff 	mov.w	r0, #4294967295
 8011bea:	e03e      	b.n	8011c6a <__swsetup_r+0xba>
 8011bec:	4b25      	ldr	r3, [pc, #148]	; (8011c84 <__swsetup_r+0xd4>)
 8011bee:	429c      	cmp	r4, r3
 8011bf0:	d101      	bne.n	8011bf6 <__swsetup_r+0x46>
 8011bf2:	68ac      	ldr	r4, [r5, #8]
 8011bf4:	e7eb      	b.n	8011bce <__swsetup_r+0x1e>
 8011bf6:	4b24      	ldr	r3, [pc, #144]	; (8011c88 <__swsetup_r+0xd8>)
 8011bf8:	429c      	cmp	r4, r3
 8011bfa:	bf08      	it	eq
 8011bfc:	68ec      	ldreq	r4, [r5, #12]
 8011bfe:	e7e6      	b.n	8011bce <__swsetup_r+0x1e>
 8011c00:	0758      	lsls	r0, r3, #29
 8011c02:	d512      	bpl.n	8011c2a <__swsetup_r+0x7a>
 8011c04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011c06:	b141      	cbz	r1, 8011c1a <__swsetup_r+0x6a>
 8011c08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011c0c:	4299      	cmp	r1, r3
 8011c0e:	d002      	beq.n	8011c16 <__swsetup_r+0x66>
 8011c10:	4630      	mov	r0, r6
 8011c12:	f7fe ffb9 	bl	8010b88 <_free_r>
 8011c16:	2300      	movs	r3, #0
 8011c18:	6363      	str	r3, [r4, #52]	; 0x34
 8011c1a:	89a3      	ldrh	r3, [r4, #12]
 8011c1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011c20:	81a3      	strh	r3, [r4, #12]
 8011c22:	2300      	movs	r3, #0
 8011c24:	6063      	str	r3, [r4, #4]
 8011c26:	6923      	ldr	r3, [r4, #16]
 8011c28:	6023      	str	r3, [r4, #0]
 8011c2a:	89a3      	ldrh	r3, [r4, #12]
 8011c2c:	f043 0308 	orr.w	r3, r3, #8
 8011c30:	81a3      	strh	r3, [r4, #12]
 8011c32:	6923      	ldr	r3, [r4, #16]
 8011c34:	b94b      	cbnz	r3, 8011c4a <__swsetup_r+0x9a>
 8011c36:	89a3      	ldrh	r3, [r4, #12]
 8011c38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011c40:	d003      	beq.n	8011c4a <__swsetup_r+0x9a>
 8011c42:	4621      	mov	r1, r4
 8011c44:	4630      	mov	r0, r6
 8011c46:	f001 f8d3 	bl	8012df0 <__smakebuf_r>
 8011c4a:	89a0      	ldrh	r0, [r4, #12]
 8011c4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011c50:	f010 0301 	ands.w	r3, r0, #1
 8011c54:	d00a      	beq.n	8011c6c <__swsetup_r+0xbc>
 8011c56:	2300      	movs	r3, #0
 8011c58:	60a3      	str	r3, [r4, #8]
 8011c5a:	6963      	ldr	r3, [r4, #20]
 8011c5c:	425b      	negs	r3, r3
 8011c5e:	61a3      	str	r3, [r4, #24]
 8011c60:	6923      	ldr	r3, [r4, #16]
 8011c62:	b943      	cbnz	r3, 8011c76 <__swsetup_r+0xc6>
 8011c64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011c68:	d1ba      	bne.n	8011be0 <__swsetup_r+0x30>
 8011c6a:	bd70      	pop	{r4, r5, r6, pc}
 8011c6c:	0781      	lsls	r1, r0, #30
 8011c6e:	bf58      	it	pl
 8011c70:	6963      	ldrpl	r3, [r4, #20]
 8011c72:	60a3      	str	r3, [r4, #8]
 8011c74:	e7f4      	b.n	8011c60 <__swsetup_r+0xb0>
 8011c76:	2000      	movs	r0, #0
 8011c78:	e7f7      	b.n	8011c6a <__swsetup_r+0xba>
 8011c7a:	bf00      	nop
 8011c7c:	20000050 	.word	0x20000050
 8011c80:	08014e38 	.word	0x08014e38
 8011c84:	08014e58 	.word	0x08014e58
 8011c88:	08014e18 	.word	0x08014e18

08011c8c <__assert_func>:
 8011c8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011c8e:	4614      	mov	r4, r2
 8011c90:	461a      	mov	r2, r3
 8011c92:	4b09      	ldr	r3, [pc, #36]	; (8011cb8 <__assert_func+0x2c>)
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	4605      	mov	r5, r0
 8011c98:	68d8      	ldr	r0, [r3, #12]
 8011c9a:	b14c      	cbz	r4, 8011cb0 <__assert_func+0x24>
 8011c9c:	4b07      	ldr	r3, [pc, #28]	; (8011cbc <__assert_func+0x30>)
 8011c9e:	9100      	str	r1, [sp, #0]
 8011ca0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011ca4:	4906      	ldr	r1, [pc, #24]	; (8011cc0 <__assert_func+0x34>)
 8011ca6:	462b      	mov	r3, r5
 8011ca8:	f001 f830 	bl	8012d0c <fiprintf>
 8011cac:	f7fe ff10 	bl	8010ad0 <abort>
 8011cb0:	4b04      	ldr	r3, [pc, #16]	; (8011cc4 <__assert_func+0x38>)
 8011cb2:	461c      	mov	r4, r3
 8011cb4:	e7f3      	b.n	8011c9e <__assert_func+0x12>
 8011cb6:	bf00      	nop
 8011cb8:	20000050 	.word	0x20000050
 8011cbc:	08014c62 	.word	0x08014c62
 8011cc0:	08014c6f 	.word	0x08014c6f
 8011cc4:	08014c9d 	.word	0x08014c9d

08011cc8 <_close_r>:
 8011cc8:	b538      	push	{r3, r4, r5, lr}
 8011cca:	4d06      	ldr	r5, [pc, #24]	; (8011ce4 <_close_r+0x1c>)
 8011ccc:	2300      	movs	r3, #0
 8011cce:	4604      	mov	r4, r0
 8011cd0:	4608      	mov	r0, r1
 8011cd2:	602b      	str	r3, [r5, #0]
 8011cd4:	f7f1 fd73 	bl	80037be <_close>
 8011cd8:	1c43      	adds	r3, r0, #1
 8011cda:	d102      	bne.n	8011ce2 <_close_r+0x1a>
 8011cdc:	682b      	ldr	r3, [r5, #0]
 8011cde:	b103      	cbz	r3, 8011ce2 <_close_r+0x1a>
 8011ce0:	6023      	str	r3, [r4, #0]
 8011ce2:	bd38      	pop	{r3, r4, r5, pc}
 8011ce4:	20005e30 	.word	0x20005e30

08011ce8 <quorem>:
 8011ce8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cec:	6903      	ldr	r3, [r0, #16]
 8011cee:	690c      	ldr	r4, [r1, #16]
 8011cf0:	42a3      	cmp	r3, r4
 8011cf2:	4607      	mov	r7, r0
 8011cf4:	f2c0 8081 	blt.w	8011dfa <quorem+0x112>
 8011cf8:	3c01      	subs	r4, #1
 8011cfa:	f101 0814 	add.w	r8, r1, #20
 8011cfe:	f100 0514 	add.w	r5, r0, #20
 8011d02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011d06:	9301      	str	r3, [sp, #4]
 8011d08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011d0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011d10:	3301      	adds	r3, #1
 8011d12:	429a      	cmp	r2, r3
 8011d14:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011d18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011d1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8011d20:	d331      	bcc.n	8011d86 <quorem+0x9e>
 8011d22:	f04f 0e00 	mov.w	lr, #0
 8011d26:	4640      	mov	r0, r8
 8011d28:	46ac      	mov	ip, r5
 8011d2a:	46f2      	mov	sl, lr
 8011d2c:	f850 2b04 	ldr.w	r2, [r0], #4
 8011d30:	b293      	uxth	r3, r2
 8011d32:	fb06 e303 	mla	r3, r6, r3, lr
 8011d36:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011d3a:	b29b      	uxth	r3, r3
 8011d3c:	ebaa 0303 	sub.w	r3, sl, r3
 8011d40:	f8dc a000 	ldr.w	sl, [ip]
 8011d44:	0c12      	lsrs	r2, r2, #16
 8011d46:	fa13 f38a 	uxtah	r3, r3, sl
 8011d4a:	fb06 e202 	mla	r2, r6, r2, lr
 8011d4e:	9300      	str	r3, [sp, #0]
 8011d50:	9b00      	ldr	r3, [sp, #0]
 8011d52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011d56:	b292      	uxth	r2, r2
 8011d58:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011d5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011d60:	f8bd 3000 	ldrh.w	r3, [sp]
 8011d64:	4581      	cmp	r9, r0
 8011d66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011d6a:	f84c 3b04 	str.w	r3, [ip], #4
 8011d6e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011d72:	d2db      	bcs.n	8011d2c <quorem+0x44>
 8011d74:	f855 300b 	ldr.w	r3, [r5, fp]
 8011d78:	b92b      	cbnz	r3, 8011d86 <quorem+0x9e>
 8011d7a:	9b01      	ldr	r3, [sp, #4]
 8011d7c:	3b04      	subs	r3, #4
 8011d7e:	429d      	cmp	r5, r3
 8011d80:	461a      	mov	r2, r3
 8011d82:	d32e      	bcc.n	8011de2 <quorem+0xfa>
 8011d84:	613c      	str	r4, [r7, #16]
 8011d86:	4638      	mov	r0, r7
 8011d88:	f001 fb00 	bl	801338c <__mcmp>
 8011d8c:	2800      	cmp	r0, #0
 8011d8e:	db24      	blt.n	8011dda <quorem+0xf2>
 8011d90:	3601      	adds	r6, #1
 8011d92:	4628      	mov	r0, r5
 8011d94:	f04f 0c00 	mov.w	ip, #0
 8011d98:	f858 2b04 	ldr.w	r2, [r8], #4
 8011d9c:	f8d0 e000 	ldr.w	lr, [r0]
 8011da0:	b293      	uxth	r3, r2
 8011da2:	ebac 0303 	sub.w	r3, ip, r3
 8011da6:	0c12      	lsrs	r2, r2, #16
 8011da8:	fa13 f38e 	uxtah	r3, r3, lr
 8011dac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011db0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011db4:	b29b      	uxth	r3, r3
 8011db6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011dba:	45c1      	cmp	r9, r8
 8011dbc:	f840 3b04 	str.w	r3, [r0], #4
 8011dc0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011dc4:	d2e8      	bcs.n	8011d98 <quorem+0xb0>
 8011dc6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011dca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011dce:	b922      	cbnz	r2, 8011dda <quorem+0xf2>
 8011dd0:	3b04      	subs	r3, #4
 8011dd2:	429d      	cmp	r5, r3
 8011dd4:	461a      	mov	r2, r3
 8011dd6:	d30a      	bcc.n	8011dee <quorem+0x106>
 8011dd8:	613c      	str	r4, [r7, #16]
 8011dda:	4630      	mov	r0, r6
 8011ddc:	b003      	add	sp, #12
 8011dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011de2:	6812      	ldr	r2, [r2, #0]
 8011de4:	3b04      	subs	r3, #4
 8011de6:	2a00      	cmp	r2, #0
 8011de8:	d1cc      	bne.n	8011d84 <quorem+0x9c>
 8011dea:	3c01      	subs	r4, #1
 8011dec:	e7c7      	b.n	8011d7e <quorem+0x96>
 8011dee:	6812      	ldr	r2, [r2, #0]
 8011df0:	3b04      	subs	r3, #4
 8011df2:	2a00      	cmp	r2, #0
 8011df4:	d1f0      	bne.n	8011dd8 <quorem+0xf0>
 8011df6:	3c01      	subs	r4, #1
 8011df8:	e7eb      	b.n	8011dd2 <quorem+0xea>
 8011dfa:	2000      	movs	r0, #0
 8011dfc:	e7ee      	b.n	8011ddc <quorem+0xf4>
	...

08011e00 <_dtoa_r>:
 8011e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e04:	ed2d 8b04 	vpush	{d8-d9}
 8011e08:	ec57 6b10 	vmov	r6, r7, d0
 8011e0c:	b093      	sub	sp, #76	; 0x4c
 8011e0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011e10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011e14:	9106      	str	r1, [sp, #24]
 8011e16:	ee10 aa10 	vmov	sl, s0
 8011e1a:	4604      	mov	r4, r0
 8011e1c:	9209      	str	r2, [sp, #36]	; 0x24
 8011e1e:	930c      	str	r3, [sp, #48]	; 0x30
 8011e20:	46bb      	mov	fp, r7
 8011e22:	b975      	cbnz	r5, 8011e42 <_dtoa_r+0x42>
 8011e24:	2010      	movs	r0, #16
 8011e26:	f7fe fe89 	bl	8010b3c <malloc>
 8011e2a:	4602      	mov	r2, r0
 8011e2c:	6260      	str	r0, [r4, #36]	; 0x24
 8011e2e:	b920      	cbnz	r0, 8011e3a <_dtoa_r+0x3a>
 8011e30:	4ba7      	ldr	r3, [pc, #668]	; (80120d0 <_dtoa_r+0x2d0>)
 8011e32:	21ea      	movs	r1, #234	; 0xea
 8011e34:	48a7      	ldr	r0, [pc, #668]	; (80120d4 <_dtoa_r+0x2d4>)
 8011e36:	f7ff ff29 	bl	8011c8c <__assert_func>
 8011e3a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011e3e:	6005      	str	r5, [r0, #0]
 8011e40:	60c5      	str	r5, [r0, #12]
 8011e42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011e44:	6819      	ldr	r1, [r3, #0]
 8011e46:	b151      	cbz	r1, 8011e5e <_dtoa_r+0x5e>
 8011e48:	685a      	ldr	r2, [r3, #4]
 8011e4a:	604a      	str	r2, [r1, #4]
 8011e4c:	2301      	movs	r3, #1
 8011e4e:	4093      	lsls	r3, r2
 8011e50:	608b      	str	r3, [r1, #8]
 8011e52:	4620      	mov	r0, r4
 8011e54:	f001 f858 	bl	8012f08 <_Bfree>
 8011e58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	601a      	str	r2, [r3, #0]
 8011e5e:	1e3b      	subs	r3, r7, #0
 8011e60:	bfaa      	itet	ge
 8011e62:	2300      	movge	r3, #0
 8011e64:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011e68:	f8c8 3000 	strge.w	r3, [r8]
 8011e6c:	4b9a      	ldr	r3, [pc, #616]	; (80120d8 <_dtoa_r+0x2d8>)
 8011e6e:	bfbc      	itt	lt
 8011e70:	2201      	movlt	r2, #1
 8011e72:	f8c8 2000 	strlt.w	r2, [r8]
 8011e76:	ea33 030b 	bics.w	r3, r3, fp
 8011e7a:	d11b      	bne.n	8011eb4 <_dtoa_r+0xb4>
 8011e7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011e7e:	f242 730f 	movw	r3, #9999	; 0x270f
 8011e82:	6013      	str	r3, [r2, #0]
 8011e84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011e88:	4333      	orrs	r3, r6
 8011e8a:	f000 8592 	beq.w	80129b2 <_dtoa_r+0xbb2>
 8011e8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011e90:	b963      	cbnz	r3, 8011eac <_dtoa_r+0xac>
 8011e92:	4b92      	ldr	r3, [pc, #584]	; (80120dc <_dtoa_r+0x2dc>)
 8011e94:	e022      	b.n	8011edc <_dtoa_r+0xdc>
 8011e96:	4b92      	ldr	r3, [pc, #584]	; (80120e0 <_dtoa_r+0x2e0>)
 8011e98:	9301      	str	r3, [sp, #4]
 8011e9a:	3308      	adds	r3, #8
 8011e9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011e9e:	6013      	str	r3, [r2, #0]
 8011ea0:	9801      	ldr	r0, [sp, #4]
 8011ea2:	b013      	add	sp, #76	; 0x4c
 8011ea4:	ecbd 8b04 	vpop	{d8-d9}
 8011ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eac:	4b8b      	ldr	r3, [pc, #556]	; (80120dc <_dtoa_r+0x2dc>)
 8011eae:	9301      	str	r3, [sp, #4]
 8011eb0:	3303      	adds	r3, #3
 8011eb2:	e7f3      	b.n	8011e9c <_dtoa_r+0x9c>
 8011eb4:	2200      	movs	r2, #0
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	4650      	mov	r0, sl
 8011eba:	4659      	mov	r1, fp
 8011ebc:	f7ee fe14 	bl	8000ae8 <__aeabi_dcmpeq>
 8011ec0:	ec4b ab19 	vmov	d9, sl, fp
 8011ec4:	4680      	mov	r8, r0
 8011ec6:	b158      	cbz	r0, 8011ee0 <_dtoa_r+0xe0>
 8011ec8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011eca:	2301      	movs	r3, #1
 8011ecc:	6013      	str	r3, [r2, #0]
 8011ece:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	f000 856b 	beq.w	80129ac <_dtoa_r+0xbac>
 8011ed6:	4883      	ldr	r0, [pc, #524]	; (80120e4 <_dtoa_r+0x2e4>)
 8011ed8:	6018      	str	r0, [r3, #0]
 8011eda:	1e43      	subs	r3, r0, #1
 8011edc:	9301      	str	r3, [sp, #4]
 8011ede:	e7df      	b.n	8011ea0 <_dtoa_r+0xa0>
 8011ee0:	ec4b ab10 	vmov	d0, sl, fp
 8011ee4:	aa10      	add	r2, sp, #64	; 0x40
 8011ee6:	a911      	add	r1, sp, #68	; 0x44
 8011ee8:	4620      	mov	r0, r4
 8011eea:	f001 faf5 	bl	80134d8 <__d2b>
 8011eee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8011ef2:	ee08 0a10 	vmov	s16, r0
 8011ef6:	2d00      	cmp	r5, #0
 8011ef8:	f000 8084 	beq.w	8012004 <_dtoa_r+0x204>
 8011efc:	ee19 3a90 	vmov	r3, s19
 8011f00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011f04:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011f08:	4656      	mov	r6, sl
 8011f0a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8011f0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011f12:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8011f16:	4b74      	ldr	r3, [pc, #464]	; (80120e8 <_dtoa_r+0x2e8>)
 8011f18:	2200      	movs	r2, #0
 8011f1a:	4630      	mov	r0, r6
 8011f1c:	4639      	mov	r1, r7
 8011f1e:	f7ee f9c3 	bl	80002a8 <__aeabi_dsub>
 8011f22:	a365      	add	r3, pc, #404	; (adr r3, 80120b8 <_dtoa_r+0x2b8>)
 8011f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f28:	f7ee fb76 	bl	8000618 <__aeabi_dmul>
 8011f2c:	a364      	add	r3, pc, #400	; (adr r3, 80120c0 <_dtoa_r+0x2c0>)
 8011f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f32:	f7ee f9bb 	bl	80002ac <__adddf3>
 8011f36:	4606      	mov	r6, r0
 8011f38:	4628      	mov	r0, r5
 8011f3a:	460f      	mov	r7, r1
 8011f3c:	f7ee fb02 	bl	8000544 <__aeabi_i2d>
 8011f40:	a361      	add	r3, pc, #388	; (adr r3, 80120c8 <_dtoa_r+0x2c8>)
 8011f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f46:	f7ee fb67 	bl	8000618 <__aeabi_dmul>
 8011f4a:	4602      	mov	r2, r0
 8011f4c:	460b      	mov	r3, r1
 8011f4e:	4630      	mov	r0, r6
 8011f50:	4639      	mov	r1, r7
 8011f52:	f7ee f9ab 	bl	80002ac <__adddf3>
 8011f56:	4606      	mov	r6, r0
 8011f58:	460f      	mov	r7, r1
 8011f5a:	f7ee fe0d 	bl	8000b78 <__aeabi_d2iz>
 8011f5e:	2200      	movs	r2, #0
 8011f60:	9000      	str	r0, [sp, #0]
 8011f62:	2300      	movs	r3, #0
 8011f64:	4630      	mov	r0, r6
 8011f66:	4639      	mov	r1, r7
 8011f68:	f7ee fdc8 	bl	8000afc <__aeabi_dcmplt>
 8011f6c:	b150      	cbz	r0, 8011f84 <_dtoa_r+0x184>
 8011f6e:	9800      	ldr	r0, [sp, #0]
 8011f70:	f7ee fae8 	bl	8000544 <__aeabi_i2d>
 8011f74:	4632      	mov	r2, r6
 8011f76:	463b      	mov	r3, r7
 8011f78:	f7ee fdb6 	bl	8000ae8 <__aeabi_dcmpeq>
 8011f7c:	b910      	cbnz	r0, 8011f84 <_dtoa_r+0x184>
 8011f7e:	9b00      	ldr	r3, [sp, #0]
 8011f80:	3b01      	subs	r3, #1
 8011f82:	9300      	str	r3, [sp, #0]
 8011f84:	9b00      	ldr	r3, [sp, #0]
 8011f86:	2b16      	cmp	r3, #22
 8011f88:	d85a      	bhi.n	8012040 <_dtoa_r+0x240>
 8011f8a:	9a00      	ldr	r2, [sp, #0]
 8011f8c:	4b57      	ldr	r3, [pc, #348]	; (80120ec <_dtoa_r+0x2ec>)
 8011f8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f96:	ec51 0b19 	vmov	r0, r1, d9
 8011f9a:	f7ee fdaf 	bl	8000afc <__aeabi_dcmplt>
 8011f9e:	2800      	cmp	r0, #0
 8011fa0:	d050      	beq.n	8012044 <_dtoa_r+0x244>
 8011fa2:	9b00      	ldr	r3, [sp, #0]
 8011fa4:	3b01      	subs	r3, #1
 8011fa6:	9300      	str	r3, [sp, #0]
 8011fa8:	2300      	movs	r3, #0
 8011faa:	930b      	str	r3, [sp, #44]	; 0x2c
 8011fac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011fae:	1b5d      	subs	r5, r3, r5
 8011fb0:	1e6b      	subs	r3, r5, #1
 8011fb2:	9305      	str	r3, [sp, #20]
 8011fb4:	bf45      	ittet	mi
 8011fb6:	f1c5 0301 	rsbmi	r3, r5, #1
 8011fba:	9304      	strmi	r3, [sp, #16]
 8011fbc:	2300      	movpl	r3, #0
 8011fbe:	2300      	movmi	r3, #0
 8011fc0:	bf4c      	ite	mi
 8011fc2:	9305      	strmi	r3, [sp, #20]
 8011fc4:	9304      	strpl	r3, [sp, #16]
 8011fc6:	9b00      	ldr	r3, [sp, #0]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	db3d      	blt.n	8012048 <_dtoa_r+0x248>
 8011fcc:	9b05      	ldr	r3, [sp, #20]
 8011fce:	9a00      	ldr	r2, [sp, #0]
 8011fd0:	920a      	str	r2, [sp, #40]	; 0x28
 8011fd2:	4413      	add	r3, r2
 8011fd4:	9305      	str	r3, [sp, #20]
 8011fd6:	2300      	movs	r3, #0
 8011fd8:	9307      	str	r3, [sp, #28]
 8011fda:	9b06      	ldr	r3, [sp, #24]
 8011fdc:	2b09      	cmp	r3, #9
 8011fde:	f200 8089 	bhi.w	80120f4 <_dtoa_r+0x2f4>
 8011fe2:	2b05      	cmp	r3, #5
 8011fe4:	bfc4      	itt	gt
 8011fe6:	3b04      	subgt	r3, #4
 8011fe8:	9306      	strgt	r3, [sp, #24]
 8011fea:	9b06      	ldr	r3, [sp, #24]
 8011fec:	f1a3 0302 	sub.w	r3, r3, #2
 8011ff0:	bfcc      	ite	gt
 8011ff2:	2500      	movgt	r5, #0
 8011ff4:	2501      	movle	r5, #1
 8011ff6:	2b03      	cmp	r3, #3
 8011ff8:	f200 8087 	bhi.w	801210a <_dtoa_r+0x30a>
 8011ffc:	e8df f003 	tbb	[pc, r3]
 8012000:	59383a2d 	.word	0x59383a2d
 8012004:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012008:	441d      	add	r5, r3
 801200a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801200e:	2b20      	cmp	r3, #32
 8012010:	bfc1      	itttt	gt
 8012012:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012016:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801201a:	fa0b f303 	lslgt.w	r3, fp, r3
 801201e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012022:	bfda      	itte	le
 8012024:	f1c3 0320 	rsble	r3, r3, #32
 8012028:	fa06 f003 	lslle.w	r0, r6, r3
 801202c:	4318      	orrgt	r0, r3
 801202e:	f7ee fa79 	bl	8000524 <__aeabi_ui2d>
 8012032:	2301      	movs	r3, #1
 8012034:	4606      	mov	r6, r0
 8012036:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801203a:	3d01      	subs	r5, #1
 801203c:	930e      	str	r3, [sp, #56]	; 0x38
 801203e:	e76a      	b.n	8011f16 <_dtoa_r+0x116>
 8012040:	2301      	movs	r3, #1
 8012042:	e7b2      	b.n	8011faa <_dtoa_r+0x1aa>
 8012044:	900b      	str	r0, [sp, #44]	; 0x2c
 8012046:	e7b1      	b.n	8011fac <_dtoa_r+0x1ac>
 8012048:	9b04      	ldr	r3, [sp, #16]
 801204a:	9a00      	ldr	r2, [sp, #0]
 801204c:	1a9b      	subs	r3, r3, r2
 801204e:	9304      	str	r3, [sp, #16]
 8012050:	4253      	negs	r3, r2
 8012052:	9307      	str	r3, [sp, #28]
 8012054:	2300      	movs	r3, #0
 8012056:	930a      	str	r3, [sp, #40]	; 0x28
 8012058:	e7bf      	b.n	8011fda <_dtoa_r+0x1da>
 801205a:	2300      	movs	r3, #0
 801205c:	9308      	str	r3, [sp, #32]
 801205e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012060:	2b00      	cmp	r3, #0
 8012062:	dc55      	bgt.n	8012110 <_dtoa_r+0x310>
 8012064:	2301      	movs	r3, #1
 8012066:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801206a:	461a      	mov	r2, r3
 801206c:	9209      	str	r2, [sp, #36]	; 0x24
 801206e:	e00c      	b.n	801208a <_dtoa_r+0x28a>
 8012070:	2301      	movs	r3, #1
 8012072:	e7f3      	b.n	801205c <_dtoa_r+0x25c>
 8012074:	2300      	movs	r3, #0
 8012076:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012078:	9308      	str	r3, [sp, #32]
 801207a:	9b00      	ldr	r3, [sp, #0]
 801207c:	4413      	add	r3, r2
 801207e:	9302      	str	r3, [sp, #8]
 8012080:	3301      	adds	r3, #1
 8012082:	2b01      	cmp	r3, #1
 8012084:	9303      	str	r3, [sp, #12]
 8012086:	bfb8      	it	lt
 8012088:	2301      	movlt	r3, #1
 801208a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801208c:	2200      	movs	r2, #0
 801208e:	6042      	str	r2, [r0, #4]
 8012090:	2204      	movs	r2, #4
 8012092:	f102 0614 	add.w	r6, r2, #20
 8012096:	429e      	cmp	r6, r3
 8012098:	6841      	ldr	r1, [r0, #4]
 801209a:	d93d      	bls.n	8012118 <_dtoa_r+0x318>
 801209c:	4620      	mov	r0, r4
 801209e:	f000 fef3 	bl	8012e88 <_Balloc>
 80120a2:	9001      	str	r0, [sp, #4]
 80120a4:	2800      	cmp	r0, #0
 80120a6:	d13b      	bne.n	8012120 <_dtoa_r+0x320>
 80120a8:	4b11      	ldr	r3, [pc, #68]	; (80120f0 <_dtoa_r+0x2f0>)
 80120aa:	4602      	mov	r2, r0
 80120ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80120b0:	e6c0      	b.n	8011e34 <_dtoa_r+0x34>
 80120b2:	2301      	movs	r3, #1
 80120b4:	e7df      	b.n	8012076 <_dtoa_r+0x276>
 80120b6:	bf00      	nop
 80120b8:	636f4361 	.word	0x636f4361
 80120bc:	3fd287a7 	.word	0x3fd287a7
 80120c0:	8b60c8b3 	.word	0x8b60c8b3
 80120c4:	3fc68a28 	.word	0x3fc68a28
 80120c8:	509f79fb 	.word	0x509f79fb
 80120cc:	3fd34413 	.word	0x3fd34413
 80120d0:	08014bee 	.word	0x08014bee
 80120d4:	08014dac 	.word	0x08014dac
 80120d8:	7ff00000 	.word	0x7ff00000
 80120dc:	08014da8 	.word	0x08014da8
 80120e0:	08014d9f 	.word	0x08014d9f
 80120e4:	08014fea 	.word	0x08014fea
 80120e8:	3ff80000 	.word	0x3ff80000
 80120ec:	08014f00 	.word	0x08014f00
 80120f0:	08014e07 	.word	0x08014e07
 80120f4:	2501      	movs	r5, #1
 80120f6:	2300      	movs	r3, #0
 80120f8:	9306      	str	r3, [sp, #24]
 80120fa:	9508      	str	r5, [sp, #32]
 80120fc:	f04f 33ff 	mov.w	r3, #4294967295
 8012100:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012104:	2200      	movs	r2, #0
 8012106:	2312      	movs	r3, #18
 8012108:	e7b0      	b.n	801206c <_dtoa_r+0x26c>
 801210a:	2301      	movs	r3, #1
 801210c:	9308      	str	r3, [sp, #32]
 801210e:	e7f5      	b.n	80120fc <_dtoa_r+0x2fc>
 8012110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012112:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012116:	e7b8      	b.n	801208a <_dtoa_r+0x28a>
 8012118:	3101      	adds	r1, #1
 801211a:	6041      	str	r1, [r0, #4]
 801211c:	0052      	lsls	r2, r2, #1
 801211e:	e7b8      	b.n	8012092 <_dtoa_r+0x292>
 8012120:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012122:	9a01      	ldr	r2, [sp, #4]
 8012124:	601a      	str	r2, [r3, #0]
 8012126:	9b03      	ldr	r3, [sp, #12]
 8012128:	2b0e      	cmp	r3, #14
 801212a:	f200 809d 	bhi.w	8012268 <_dtoa_r+0x468>
 801212e:	2d00      	cmp	r5, #0
 8012130:	f000 809a 	beq.w	8012268 <_dtoa_r+0x468>
 8012134:	9b00      	ldr	r3, [sp, #0]
 8012136:	2b00      	cmp	r3, #0
 8012138:	dd32      	ble.n	80121a0 <_dtoa_r+0x3a0>
 801213a:	4ab7      	ldr	r2, [pc, #732]	; (8012418 <_dtoa_r+0x618>)
 801213c:	f003 030f 	and.w	r3, r3, #15
 8012140:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012144:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012148:	9b00      	ldr	r3, [sp, #0]
 801214a:	05d8      	lsls	r0, r3, #23
 801214c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8012150:	d516      	bpl.n	8012180 <_dtoa_r+0x380>
 8012152:	4bb2      	ldr	r3, [pc, #712]	; (801241c <_dtoa_r+0x61c>)
 8012154:	ec51 0b19 	vmov	r0, r1, d9
 8012158:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801215c:	f7ee fb86 	bl	800086c <__aeabi_ddiv>
 8012160:	f007 070f 	and.w	r7, r7, #15
 8012164:	4682      	mov	sl, r0
 8012166:	468b      	mov	fp, r1
 8012168:	2503      	movs	r5, #3
 801216a:	4eac      	ldr	r6, [pc, #688]	; (801241c <_dtoa_r+0x61c>)
 801216c:	b957      	cbnz	r7, 8012184 <_dtoa_r+0x384>
 801216e:	4642      	mov	r2, r8
 8012170:	464b      	mov	r3, r9
 8012172:	4650      	mov	r0, sl
 8012174:	4659      	mov	r1, fp
 8012176:	f7ee fb79 	bl	800086c <__aeabi_ddiv>
 801217a:	4682      	mov	sl, r0
 801217c:	468b      	mov	fp, r1
 801217e:	e028      	b.n	80121d2 <_dtoa_r+0x3d2>
 8012180:	2502      	movs	r5, #2
 8012182:	e7f2      	b.n	801216a <_dtoa_r+0x36a>
 8012184:	07f9      	lsls	r1, r7, #31
 8012186:	d508      	bpl.n	801219a <_dtoa_r+0x39a>
 8012188:	4640      	mov	r0, r8
 801218a:	4649      	mov	r1, r9
 801218c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012190:	f7ee fa42 	bl	8000618 <__aeabi_dmul>
 8012194:	3501      	adds	r5, #1
 8012196:	4680      	mov	r8, r0
 8012198:	4689      	mov	r9, r1
 801219a:	107f      	asrs	r7, r7, #1
 801219c:	3608      	adds	r6, #8
 801219e:	e7e5      	b.n	801216c <_dtoa_r+0x36c>
 80121a0:	f000 809b 	beq.w	80122da <_dtoa_r+0x4da>
 80121a4:	9b00      	ldr	r3, [sp, #0]
 80121a6:	4f9d      	ldr	r7, [pc, #628]	; (801241c <_dtoa_r+0x61c>)
 80121a8:	425e      	negs	r6, r3
 80121aa:	4b9b      	ldr	r3, [pc, #620]	; (8012418 <_dtoa_r+0x618>)
 80121ac:	f006 020f 	and.w	r2, r6, #15
 80121b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80121b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121b8:	ec51 0b19 	vmov	r0, r1, d9
 80121bc:	f7ee fa2c 	bl	8000618 <__aeabi_dmul>
 80121c0:	1136      	asrs	r6, r6, #4
 80121c2:	4682      	mov	sl, r0
 80121c4:	468b      	mov	fp, r1
 80121c6:	2300      	movs	r3, #0
 80121c8:	2502      	movs	r5, #2
 80121ca:	2e00      	cmp	r6, #0
 80121cc:	d17a      	bne.n	80122c4 <_dtoa_r+0x4c4>
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d1d3      	bne.n	801217a <_dtoa_r+0x37a>
 80121d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	f000 8082 	beq.w	80122de <_dtoa_r+0x4de>
 80121da:	4b91      	ldr	r3, [pc, #580]	; (8012420 <_dtoa_r+0x620>)
 80121dc:	2200      	movs	r2, #0
 80121de:	4650      	mov	r0, sl
 80121e0:	4659      	mov	r1, fp
 80121e2:	f7ee fc8b 	bl	8000afc <__aeabi_dcmplt>
 80121e6:	2800      	cmp	r0, #0
 80121e8:	d079      	beq.n	80122de <_dtoa_r+0x4de>
 80121ea:	9b03      	ldr	r3, [sp, #12]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d076      	beq.n	80122de <_dtoa_r+0x4de>
 80121f0:	9b02      	ldr	r3, [sp, #8]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	dd36      	ble.n	8012264 <_dtoa_r+0x464>
 80121f6:	9b00      	ldr	r3, [sp, #0]
 80121f8:	4650      	mov	r0, sl
 80121fa:	4659      	mov	r1, fp
 80121fc:	1e5f      	subs	r7, r3, #1
 80121fe:	2200      	movs	r2, #0
 8012200:	4b88      	ldr	r3, [pc, #544]	; (8012424 <_dtoa_r+0x624>)
 8012202:	f7ee fa09 	bl	8000618 <__aeabi_dmul>
 8012206:	9e02      	ldr	r6, [sp, #8]
 8012208:	4682      	mov	sl, r0
 801220a:	468b      	mov	fp, r1
 801220c:	3501      	adds	r5, #1
 801220e:	4628      	mov	r0, r5
 8012210:	f7ee f998 	bl	8000544 <__aeabi_i2d>
 8012214:	4652      	mov	r2, sl
 8012216:	465b      	mov	r3, fp
 8012218:	f7ee f9fe 	bl	8000618 <__aeabi_dmul>
 801221c:	4b82      	ldr	r3, [pc, #520]	; (8012428 <_dtoa_r+0x628>)
 801221e:	2200      	movs	r2, #0
 8012220:	f7ee f844 	bl	80002ac <__adddf3>
 8012224:	46d0      	mov	r8, sl
 8012226:	46d9      	mov	r9, fp
 8012228:	4682      	mov	sl, r0
 801222a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801222e:	2e00      	cmp	r6, #0
 8012230:	d158      	bne.n	80122e4 <_dtoa_r+0x4e4>
 8012232:	4b7e      	ldr	r3, [pc, #504]	; (801242c <_dtoa_r+0x62c>)
 8012234:	2200      	movs	r2, #0
 8012236:	4640      	mov	r0, r8
 8012238:	4649      	mov	r1, r9
 801223a:	f7ee f835 	bl	80002a8 <__aeabi_dsub>
 801223e:	4652      	mov	r2, sl
 8012240:	465b      	mov	r3, fp
 8012242:	4680      	mov	r8, r0
 8012244:	4689      	mov	r9, r1
 8012246:	f7ee fc77 	bl	8000b38 <__aeabi_dcmpgt>
 801224a:	2800      	cmp	r0, #0
 801224c:	f040 8295 	bne.w	801277a <_dtoa_r+0x97a>
 8012250:	4652      	mov	r2, sl
 8012252:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012256:	4640      	mov	r0, r8
 8012258:	4649      	mov	r1, r9
 801225a:	f7ee fc4f 	bl	8000afc <__aeabi_dcmplt>
 801225e:	2800      	cmp	r0, #0
 8012260:	f040 8289 	bne.w	8012776 <_dtoa_r+0x976>
 8012264:	ec5b ab19 	vmov	sl, fp, d9
 8012268:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801226a:	2b00      	cmp	r3, #0
 801226c:	f2c0 8148 	blt.w	8012500 <_dtoa_r+0x700>
 8012270:	9a00      	ldr	r2, [sp, #0]
 8012272:	2a0e      	cmp	r2, #14
 8012274:	f300 8144 	bgt.w	8012500 <_dtoa_r+0x700>
 8012278:	4b67      	ldr	r3, [pc, #412]	; (8012418 <_dtoa_r+0x618>)
 801227a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801227e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012284:	2b00      	cmp	r3, #0
 8012286:	f280 80d5 	bge.w	8012434 <_dtoa_r+0x634>
 801228a:	9b03      	ldr	r3, [sp, #12]
 801228c:	2b00      	cmp	r3, #0
 801228e:	f300 80d1 	bgt.w	8012434 <_dtoa_r+0x634>
 8012292:	f040 826f 	bne.w	8012774 <_dtoa_r+0x974>
 8012296:	4b65      	ldr	r3, [pc, #404]	; (801242c <_dtoa_r+0x62c>)
 8012298:	2200      	movs	r2, #0
 801229a:	4640      	mov	r0, r8
 801229c:	4649      	mov	r1, r9
 801229e:	f7ee f9bb 	bl	8000618 <__aeabi_dmul>
 80122a2:	4652      	mov	r2, sl
 80122a4:	465b      	mov	r3, fp
 80122a6:	f7ee fc3d 	bl	8000b24 <__aeabi_dcmpge>
 80122aa:	9e03      	ldr	r6, [sp, #12]
 80122ac:	4637      	mov	r7, r6
 80122ae:	2800      	cmp	r0, #0
 80122b0:	f040 8245 	bne.w	801273e <_dtoa_r+0x93e>
 80122b4:	9d01      	ldr	r5, [sp, #4]
 80122b6:	2331      	movs	r3, #49	; 0x31
 80122b8:	f805 3b01 	strb.w	r3, [r5], #1
 80122bc:	9b00      	ldr	r3, [sp, #0]
 80122be:	3301      	adds	r3, #1
 80122c0:	9300      	str	r3, [sp, #0]
 80122c2:	e240      	b.n	8012746 <_dtoa_r+0x946>
 80122c4:	07f2      	lsls	r2, r6, #31
 80122c6:	d505      	bpl.n	80122d4 <_dtoa_r+0x4d4>
 80122c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80122cc:	f7ee f9a4 	bl	8000618 <__aeabi_dmul>
 80122d0:	3501      	adds	r5, #1
 80122d2:	2301      	movs	r3, #1
 80122d4:	1076      	asrs	r6, r6, #1
 80122d6:	3708      	adds	r7, #8
 80122d8:	e777      	b.n	80121ca <_dtoa_r+0x3ca>
 80122da:	2502      	movs	r5, #2
 80122dc:	e779      	b.n	80121d2 <_dtoa_r+0x3d2>
 80122de:	9f00      	ldr	r7, [sp, #0]
 80122e0:	9e03      	ldr	r6, [sp, #12]
 80122e2:	e794      	b.n	801220e <_dtoa_r+0x40e>
 80122e4:	9901      	ldr	r1, [sp, #4]
 80122e6:	4b4c      	ldr	r3, [pc, #304]	; (8012418 <_dtoa_r+0x618>)
 80122e8:	4431      	add	r1, r6
 80122ea:	910d      	str	r1, [sp, #52]	; 0x34
 80122ec:	9908      	ldr	r1, [sp, #32]
 80122ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80122f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80122f6:	2900      	cmp	r1, #0
 80122f8:	d043      	beq.n	8012382 <_dtoa_r+0x582>
 80122fa:	494d      	ldr	r1, [pc, #308]	; (8012430 <_dtoa_r+0x630>)
 80122fc:	2000      	movs	r0, #0
 80122fe:	f7ee fab5 	bl	800086c <__aeabi_ddiv>
 8012302:	4652      	mov	r2, sl
 8012304:	465b      	mov	r3, fp
 8012306:	f7ed ffcf 	bl	80002a8 <__aeabi_dsub>
 801230a:	9d01      	ldr	r5, [sp, #4]
 801230c:	4682      	mov	sl, r0
 801230e:	468b      	mov	fp, r1
 8012310:	4649      	mov	r1, r9
 8012312:	4640      	mov	r0, r8
 8012314:	f7ee fc30 	bl	8000b78 <__aeabi_d2iz>
 8012318:	4606      	mov	r6, r0
 801231a:	f7ee f913 	bl	8000544 <__aeabi_i2d>
 801231e:	4602      	mov	r2, r0
 8012320:	460b      	mov	r3, r1
 8012322:	4640      	mov	r0, r8
 8012324:	4649      	mov	r1, r9
 8012326:	f7ed ffbf 	bl	80002a8 <__aeabi_dsub>
 801232a:	3630      	adds	r6, #48	; 0x30
 801232c:	f805 6b01 	strb.w	r6, [r5], #1
 8012330:	4652      	mov	r2, sl
 8012332:	465b      	mov	r3, fp
 8012334:	4680      	mov	r8, r0
 8012336:	4689      	mov	r9, r1
 8012338:	f7ee fbe0 	bl	8000afc <__aeabi_dcmplt>
 801233c:	2800      	cmp	r0, #0
 801233e:	d163      	bne.n	8012408 <_dtoa_r+0x608>
 8012340:	4642      	mov	r2, r8
 8012342:	464b      	mov	r3, r9
 8012344:	4936      	ldr	r1, [pc, #216]	; (8012420 <_dtoa_r+0x620>)
 8012346:	2000      	movs	r0, #0
 8012348:	f7ed ffae 	bl	80002a8 <__aeabi_dsub>
 801234c:	4652      	mov	r2, sl
 801234e:	465b      	mov	r3, fp
 8012350:	f7ee fbd4 	bl	8000afc <__aeabi_dcmplt>
 8012354:	2800      	cmp	r0, #0
 8012356:	f040 80b5 	bne.w	80124c4 <_dtoa_r+0x6c4>
 801235a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801235c:	429d      	cmp	r5, r3
 801235e:	d081      	beq.n	8012264 <_dtoa_r+0x464>
 8012360:	4b30      	ldr	r3, [pc, #192]	; (8012424 <_dtoa_r+0x624>)
 8012362:	2200      	movs	r2, #0
 8012364:	4650      	mov	r0, sl
 8012366:	4659      	mov	r1, fp
 8012368:	f7ee f956 	bl	8000618 <__aeabi_dmul>
 801236c:	4b2d      	ldr	r3, [pc, #180]	; (8012424 <_dtoa_r+0x624>)
 801236e:	4682      	mov	sl, r0
 8012370:	468b      	mov	fp, r1
 8012372:	4640      	mov	r0, r8
 8012374:	4649      	mov	r1, r9
 8012376:	2200      	movs	r2, #0
 8012378:	f7ee f94e 	bl	8000618 <__aeabi_dmul>
 801237c:	4680      	mov	r8, r0
 801237e:	4689      	mov	r9, r1
 8012380:	e7c6      	b.n	8012310 <_dtoa_r+0x510>
 8012382:	4650      	mov	r0, sl
 8012384:	4659      	mov	r1, fp
 8012386:	f7ee f947 	bl	8000618 <__aeabi_dmul>
 801238a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801238c:	9d01      	ldr	r5, [sp, #4]
 801238e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012390:	4682      	mov	sl, r0
 8012392:	468b      	mov	fp, r1
 8012394:	4649      	mov	r1, r9
 8012396:	4640      	mov	r0, r8
 8012398:	f7ee fbee 	bl	8000b78 <__aeabi_d2iz>
 801239c:	4606      	mov	r6, r0
 801239e:	f7ee f8d1 	bl	8000544 <__aeabi_i2d>
 80123a2:	3630      	adds	r6, #48	; 0x30
 80123a4:	4602      	mov	r2, r0
 80123a6:	460b      	mov	r3, r1
 80123a8:	4640      	mov	r0, r8
 80123aa:	4649      	mov	r1, r9
 80123ac:	f7ed ff7c 	bl	80002a8 <__aeabi_dsub>
 80123b0:	f805 6b01 	strb.w	r6, [r5], #1
 80123b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80123b6:	429d      	cmp	r5, r3
 80123b8:	4680      	mov	r8, r0
 80123ba:	4689      	mov	r9, r1
 80123bc:	f04f 0200 	mov.w	r2, #0
 80123c0:	d124      	bne.n	801240c <_dtoa_r+0x60c>
 80123c2:	4b1b      	ldr	r3, [pc, #108]	; (8012430 <_dtoa_r+0x630>)
 80123c4:	4650      	mov	r0, sl
 80123c6:	4659      	mov	r1, fp
 80123c8:	f7ed ff70 	bl	80002ac <__adddf3>
 80123cc:	4602      	mov	r2, r0
 80123ce:	460b      	mov	r3, r1
 80123d0:	4640      	mov	r0, r8
 80123d2:	4649      	mov	r1, r9
 80123d4:	f7ee fbb0 	bl	8000b38 <__aeabi_dcmpgt>
 80123d8:	2800      	cmp	r0, #0
 80123da:	d173      	bne.n	80124c4 <_dtoa_r+0x6c4>
 80123dc:	4652      	mov	r2, sl
 80123de:	465b      	mov	r3, fp
 80123e0:	4913      	ldr	r1, [pc, #76]	; (8012430 <_dtoa_r+0x630>)
 80123e2:	2000      	movs	r0, #0
 80123e4:	f7ed ff60 	bl	80002a8 <__aeabi_dsub>
 80123e8:	4602      	mov	r2, r0
 80123ea:	460b      	mov	r3, r1
 80123ec:	4640      	mov	r0, r8
 80123ee:	4649      	mov	r1, r9
 80123f0:	f7ee fb84 	bl	8000afc <__aeabi_dcmplt>
 80123f4:	2800      	cmp	r0, #0
 80123f6:	f43f af35 	beq.w	8012264 <_dtoa_r+0x464>
 80123fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80123fc:	1e6b      	subs	r3, r5, #1
 80123fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8012400:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012404:	2b30      	cmp	r3, #48	; 0x30
 8012406:	d0f8      	beq.n	80123fa <_dtoa_r+0x5fa>
 8012408:	9700      	str	r7, [sp, #0]
 801240a:	e049      	b.n	80124a0 <_dtoa_r+0x6a0>
 801240c:	4b05      	ldr	r3, [pc, #20]	; (8012424 <_dtoa_r+0x624>)
 801240e:	f7ee f903 	bl	8000618 <__aeabi_dmul>
 8012412:	4680      	mov	r8, r0
 8012414:	4689      	mov	r9, r1
 8012416:	e7bd      	b.n	8012394 <_dtoa_r+0x594>
 8012418:	08014f00 	.word	0x08014f00
 801241c:	08014ed8 	.word	0x08014ed8
 8012420:	3ff00000 	.word	0x3ff00000
 8012424:	40240000 	.word	0x40240000
 8012428:	401c0000 	.word	0x401c0000
 801242c:	40140000 	.word	0x40140000
 8012430:	3fe00000 	.word	0x3fe00000
 8012434:	9d01      	ldr	r5, [sp, #4]
 8012436:	4656      	mov	r6, sl
 8012438:	465f      	mov	r7, fp
 801243a:	4642      	mov	r2, r8
 801243c:	464b      	mov	r3, r9
 801243e:	4630      	mov	r0, r6
 8012440:	4639      	mov	r1, r7
 8012442:	f7ee fa13 	bl	800086c <__aeabi_ddiv>
 8012446:	f7ee fb97 	bl	8000b78 <__aeabi_d2iz>
 801244a:	4682      	mov	sl, r0
 801244c:	f7ee f87a 	bl	8000544 <__aeabi_i2d>
 8012450:	4642      	mov	r2, r8
 8012452:	464b      	mov	r3, r9
 8012454:	f7ee f8e0 	bl	8000618 <__aeabi_dmul>
 8012458:	4602      	mov	r2, r0
 801245a:	460b      	mov	r3, r1
 801245c:	4630      	mov	r0, r6
 801245e:	4639      	mov	r1, r7
 8012460:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8012464:	f7ed ff20 	bl	80002a8 <__aeabi_dsub>
 8012468:	f805 6b01 	strb.w	r6, [r5], #1
 801246c:	9e01      	ldr	r6, [sp, #4]
 801246e:	9f03      	ldr	r7, [sp, #12]
 8012470:	1bae      	subs	r6, r5, r6
 8012472:	42b7      	cmp	r7, r6
 8012474:	4602      	mov	r2, r0
 8012476:	460b      	mov	r3, r1
 8012478:	d135      	bne.n	80124e6 <_dtoa_r+0x6e6>
 801247a:	f7ed ff17 	bl	80002ac <__adddf3>
 801247e:	4642      	mov	r2, r8
 8012480:	464b      	mov	r3, r9
 8012482:	4606      	mov	r6, r0
 8012484:	460f      	mov	r7, r1
 8012486:	f7ee fb57 	bl	8000b38 <__aeabi_dcmpgt>
 801248a:	b9d0      	cbnz	r0, 80124c2 <_dtoa_r+0x6c2>
 801248c:	4642      	mov	r2, r8
 801248e:	464b      	mov	r3, r9
 8012490:	4630      	mov	r0, r6
 8012492:	4639      	mov	r1, r7
 8012494:	f7ee fb28 	bl	8000ae8 <__aeabi_dcmpeq>
 8012498:	b110      	cbz	r0, 80124a0 <_dtoa_r+0x6a0>
 801249a:	f01a 0f01 	tst.w	sl, #1
 801249e:	d110      	bne.n	80124c2 <_dtoa_r+0x6c2>
 80124a0:	4620      	mov	r0, r4
 80124a2:	ee18 1a10 	vmov	r1, s16
 80124a6:	f000 fd2f 	bl	8012f08 <_Bfree>
 80124aa:	2300      	movs	r3, #0
 80124ac:	9800      	ldr	r0, [sp, #0]
 80124ae:	702b      	strb	r3, [r5, #0]
 80124b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80124b2:	3001      	adds	r0, #1
 80124b4:	6018      	str	r0, [r3, #0]
 80124b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	f43f acf1 	beq.w	8011ea0 <_dtoa_r+0xa0>
 80124be:	601d      	str	r5, [r3, #0]
 80124c0:	e4ee      	b.n	8011ea0 <_dtoa_r+0xa0>
 80124c2:	9f00      	ldr	r7, [sp, #0]
 80124c4:	462b      	mov	r3, r5
 80124c6:	461d      	mov	r5, r3
 80124c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80124cc:	2a39      	cmp	r2, #57	; 0x39
 80124ce:	d106      	bne.n	80124de <_dtoa_r+0x6de>
 80124d0:	9a01      	ldr	r2, [sp, #4]
 80124d2:	429a      	cmp	r2, r3
 80124d4:	d1f7      	bne.n	80124c6 <_dtoa_r+0x6c6>
 80124d6:	9901      	ldr	r1, [sp, #4]
 80124d8:	2230      	movs	r2, #48	; 0x30
 80124da:	3701      	adds	r7, #1
 80124dc:	700a      	strb	r2, [r1, #0]
 80124de:	781a      	ldrb	r2, [r3, #0]
 80124e0:	3201      	adds	r2, #1
 80124e2:	701a      	strb	r2, [r3, #0]
 80124e4:	e790      	b.n	8012408 <_dtoa_r+0x608>
 80124e6:	4ba6      	ldr	r3, [pc, #664]	; (8012780 <_dtoa_r+0x980>)
 80124e8:	2200      	movs	r2, #0
 80124ea:	f7ee f895 	bl	8000618 <__aeabi_dmul>
 80124ee:	2200      	movs	r2, #0
 80124f0:	2300      	movs	r3, #0
 80124f2:	4606      	mov	r6, r0
 80124f4:	460f      	mov	r7, r1
 80124f6:	f7ee faf7 	bl	8000ae8 <__aeabi_dcmpeq>
 80124fa:	2800      	cmp	r0, #0
 80124fc:	d09d      	beq.n	801243a <_dtoa_r+0x63a>
 80124fe:	e7cf      	b.n	80124a0 <_dtoa_r+0x6a0>
 8012500:	9a08      	ldr	r2, [sp, #32]
 8012502:	2a00      	cmp	r2, #0
 8012504:	f000 80d7 	beq.w	80126b6 <_dtoa_r+0x8b6>
 8012508:	9a06      	ldr	r2, [sp, #24]
 801250a:	2a01      	cmp	r2, #1
 801250c:	f300 80ba 	bgt.w	8012684 <_dtoa_r+0x884>
 8012510:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012512:	2a00      	cmp	r2, #0
 8012514:	f000 80b2 	beq.w	801267c <_dtoa_r+0x87c>
 8012518:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801251c:	9e07      	ldr	r6, [sp, #28]
 801251e:	9d04      	ldr	r5, [sp, #16]
 8012520:	9a04      	ldr	r2, [sp, #16]
 8012522:	441a      	add	r2, r3
 8012524:	9204      	str	r2, [sp, #16]
 8012526:	9a05      	ldr	r2, [sp, #20]
 8012528:	2101      	movs	r1, #1
 801252a:	441a      	add	r2, r3
 801252c:	4620      	mov	r0, r4
 801252e:	9205      	str	r2, [sp, #20]
 8012530:	f000 fda2 	bl	8013078 <__i2b>
 8012534:	4607      	mov	r7, r0
 8012536:	2d00      	cmp	r5, #0
 8012538:	dd0c      	ble.n	8012554 <_dtoa_r+0x754>
 801253a:	9b05      	ldr	r3, [sp, #20]
 801253c:	2b00      	cmp	r3, #0
 801253e:	dd09      	ble.n	8012554 <_dtoa_r+0x754>
 8012540:	42ab      	cmp	r3, r5
 8012542:	9a04      	ldr	r2, [sp, #16]
 8012544:	bfa8      	it	ge
 8012546:	462b      	movge	r3, r5
 8012548:	1ad2      	subs	r2, r2, r3
 801254a:	9204      	str	r2, [sp, #16]
 801254c:	9a05      	ldr	r2, [sp, #20]
 801254e:	1aed      	subs	r5, r5, r3
 8012550:	1ad3      	subs	r3, r2, r3
 8012552:	9305      	str	r3, [sp, #20]
 8012554:	9b07      	ldr	r3, [sp, #28]
 8012556:	b31b      	cbz	r3, 80125a0 <_dtoa_r+0x7a0>
 8012558:	9b08      	ldr	r3, [sp, #32]
 801255a:	2b00      	cmp	r3, #0
 801255c:	f000 80af 	beq.w	80126be <_dtoa_r+0x8be>
 8012560:	2e00      	cmp	r6, #0
 8012562:	dd13      	ble.n	801258c <_dtoa_r+0x78c>
 8012564:	4639      	mov	r1, r7
 8012566:	4632      	mov	r2, r6
 8012568:	4620      	mov	r0, r4
 801256a:	f000 fe45 	bl	80131f8 <__pow5mult>
 801256e:	ee18 2a10 	vmov	r2, s16
 8012572:	4601      	mov	r1, r0
 8012574:	4607      	mov	r7, r0
 8012576:	4620      	mov	r0, r4
 8012578:	f000 fd94 	bl	80130a4 <__multiply>
 801257c:	ee18 1a10 	vmov	r1, s16
 8012580:	4680      	mov	r8, r0
 8012582:	4620      	mov	r0, r4
 8012584:	f000 fcc0 	bl	8012f08 <_Bfree>
 8012588:	ee08 8a10 	vmov	s16, r8
 801258c:	9b07      	ldr	r3, [sp, #28]
 801258e:	1b9a      	subs	r2, r3, r6
 8012590:	d006      	beq.n	80125a0 <_dtoa_r+0x7a0>
 8012592:	ee18 1a10 	vmov	r1, s16
 8012596:	4620      	mov	r0, r4
 8012598:	f000 fe2e 	bl	80131f8 <__pow5mult>
 801259c:	ee08 0a10 	vmov	s16, r0
 80125a0:	2101      	movs	r1, #1
 80125a2:	4620      	mov	r0, r4
 80125a4:	f000 fd68 	bl	8013078 <__i2b>
 80125a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	4606      	mov	r6, r0
 80125ae:	f340 8088 	ble.w	80126c2 <_dtoa_r+0x8c2>
 80125b2:	461a      	mov	r2, r3
 80125b4:	4601      	mov	r1, r0
 80125b6:	4620      	mov	r0, r4
 80125b8:	f000 fe1e 	bl	80131f8 <__pow5mult>
 80125bc:	9b06      	ldr	r3, [sp, #24]
 80125be:	2b01      	cmp	r3, #1
 80125c0:	4606      	mov	r6, r0
 80125c2:	f340 8081 	ble.w	80126c8 <_dtoa_r+0x8c8>
 80125c6:	f04f 0800 	mov.w	r8, #0
 80125ca:	6933      	ldr	r3, [r6, #16]
 80125cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80125d0:	6918      	ldr	r0, [r3, #16]
 80125d2:	f000 fd01 	bl	8012fd8 <__hi0bits>
 80125d6:	f1c0 0020 	rsb	r0, r0, #32
 80125da:	9b05      	ldr	r3, [sp, #20]
 80125dc:	4418      	add	r0, r3
 80125de:	f010 001f 	ands.w	r0, r0, #31
 80125e2:	f000 8092 	beq.w	801270a <_dtoa_r+0x90a>
 80125e6:	f1c0 0320 	rsb	r3, r0, #32
 80125ea:	2b04      	cmp	r3, #4
 80125ec:	f340 808a 	ble.w	8012704 <_dtoa_r+0x904>
 80125f0:	f1c0 001c 	rsb	r0, r0, #28
 80125f4:	9b04      	ldr	r3, [sp, #16]
 80125f6:	4403      	add	r3, r0
 80125f8:	9304      	str	r3, [sp, #16]
 80125fa:	9b05      	ldr	r3, [sp, #20]
 80125fc:	4403      	add	r3, r0
 80125fe:	4405      	add	r5, r0
 8012600:	9305      	str	r3, [sp, #20]
 8012602:	9b04      	ldr	r3, [sp, #16]
 8012604:	2b00      	cmp	r3, #0
 8012606:	dd07      	ble.n	8012618 <_dtoa_r+0x818>
 8012608:	ee18 1a10 	vmov	r1, s16
 801260c:	461a      	mov	r2, r3
 801260e:	4620      	mov	r0, r4
 8012610:	f000 fe4c 	bl	80132ac <__lshift>
 8012614:	ee08 0a10 	vmov	s16, r0
 8012618:	9b05      	ldr	r3, [sp, #20]
 801261a:	2b00      	cmp	r3, #0
 801261c:	dd05      	ble.n	801262a <_dtoa_r+0x82a>
 801261e:	4631      	mov	r1, r6
 8012620:	461a      	mov	r2, r3
 8012622:	4620      	mov	r0, r4
 8012624:	f000 fe42 	bl	80132ac <__lshift>
 8012628:	4606      	mov	r6, r0
 801262a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801262c:	2b00      	cmp	r3, #0
 801262e:	d06e      	beq.n	801270e <_dtoa_r+0x90e>
 8012630:	ee18 0a10 	vmov	r0, s16
 8012634:	4631      	mov	r1, r6
 8012636:	f000 fea9 	bl	801338c <__mcmp>
 801263a:	2800      	cmp	r0, #0
 801263c:	da67      	bge.n	801270e <_dtoa_r+0x90e>
 801263e:	9b00      	ldr	r3, [sp, #0]
 8012640:	3b01      	subs	r3, #1
 8012642:	ee18 1a10 	vmov	r1, s16
 8012646:	9300      	str	r3, [sp, #0]
 8012648:	220a      	movs	r2, #10
 801264a:	2300      	movs	r3, #0
 801264c:	4620      	mov	r0, r4
 801264e:	f000 fc7d 	bl	8012f4c <__multadd>
 8012652:	9b08      	ldr	r3, [sp, #32]
 8012654:	ee08 0a10 	vmov	s16, r0
 8012658:	2b00      	cmp	r3, #0
 801265a:	f000 81b1 	beq.w	80129c0 <_dtoa_r+0xbc0>
 801265e:	2300      	movs	r3, #0
 8012660:	4639      	mov	r1, r7
 8012662:	220a      	movs	r2, #10
 8012664:	4620      	mov	r0, r4
 8012666:	f000 fc71 	bl	8012f4c <__multadd>
 801266a:	9b02      	ldr	r3, [sp, #8]
 801266c:	2b00      	cmp	r3, #0
 801266e:	4607      	mov	r7, r0
 8012670:	f300 808e 	bgt.w	8012790 <_dtoa_r+0x990>
 8012674:	9b06      	ldr	r3, [sp, #24]
 8012676:	2b02      	cmp	r3, #2
 8012678:	dc51      	bgt.n	801271e <_dtoa_r+0x91e>
 801267a:	e089      	b.n	8012790 <_dtoa_r+0x990>
 801267c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801267e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012682:	e74b      	b.n	801251c <_dtoa_r+0x71c>
 8012684:	9b03      	ldr	r3, [sp, #12]
 8012686:	1e5e      	subs	r6, r3, #1
 8012688:	9b07      	ldr	r3, [sp, #28]
 801268a:	42b3      	cmp	r3, r6
 801268c:	bfbf      	itttt	lt
 801268e:	9b07      	ldrlt	r3, [sp, #28]
 8012690:	9607      	strlt	r6, [sp, #28]
 8012692:	1af2      	sublt	r2, r6, r3
 8012694:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8012696:	bfb6      	itet	lt
 8012698:	189b      	addlt	r3, r3, r2
 801269a:	1b9e      	subge	r6, r3, r6
 801269c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801269e:	9b03      	ldr	r3, [sp, #12]
 80126a0:	bfb8      	it	lt
 80126a2:	2600      	movlt	r6, #0
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	bfb7      	itett	lt
 80126a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80126ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80126b0:	1a9d      	sublt	r5, r3, r2
 80126b2:	2300      	movlt	r3, #0
 80126b4:	e734      	b.n	8012520 <_dtoa_r+0x720>
 80126b6:	9e07      	ldr	r6, [sp, #28]
 80126b8:	9d04      	ldr	r5, [sp, #16]
 80126ba:	9f08      	ldr	r7, [sp, #32]
 80126bc:	e73b      	b.n	8012536 <_dtoa_r+0x736>
 80126be:	9a07      	ldr	r2, [sp, #28]
 80126c0:	e767      	b.n	8012592 <_dtoa_r+0x792>
 80126c2:	9b06      	ldr	r3, [sp, #24]
 80126c4:	2b01      	cmp	r3, #1
 80126c6:	dc18      	bgt.n	80126fa <_dtoa_r+0x8fa>
 80126c8:	f1ba 0f00 	cmp.w	sl, #0
 80126cc:	d115      	bne.n	80126fa <_dtoa_r+0x8fa>
 80126ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80126d2:	b993      	cbnz	r3, 80126fa <_dtoa_r+0x8fa>
 80126d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80126d8:	0d1b      	lsrs	r3, r3, #20
 80126da:	051b      	lsls	r3, r3, #20
 80126dc:	b183      	cbz	r3, 8012700 <_dtoa_r+0x900>
 80126de:	9b04      	ldr	r3, [sp, #16]
 80126e0:	3301      	adds	r3, #1
 80126e2:	9304      	str	r3, [sp, #16]
 80126e4:	9b05      	ldr	r3, [sp, #20]
 80126e6:	3301      	adds	r3, #1
 80126e8:	9305      	str	r3, [sp, #20]
 80126ea:	f04f 0801 	mov.w	r8, #1
 80126ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	f47f af6a 	bne.w	80125ca <_dtoa_r+0x7ca>
 80126f6:	2001      	movs	r0, #1
 80126f8:	e76f      	b.n	80125da <_dtoa_r+0x7da>
 80126fa:	f04f 0800 	mov.w	r8, #0
 80126fe:	e7f6      	b.n	80126ee <_dtoa_r+0x8ee>
 8012700:	4698      	mov	r8, r3
 8012702:	e7f4      	b.n	80126ee <_dtoa_r+0x8ee>
 8012704:	f43f af7d 	beq.w	8012602 <_dtoa_r+0x802>
 8012708:	4618      	mov	r0, r3
 801270a:	301c      	adds	r0, #28
 801270c:	e772      	b.n	80125f4 <_dtoa_r+0x7f4>
 801270e:	9b03      	ldr	r3, [sp, #12]
 8012710:	2b00      	cmp	r3, #0
 8012712:	dc37      	bgt.n	8012784 <_dtoa_r+0x984>
 8012714:	9b06      	ldr	r3, [sp, #24]
 8012716:	2b02      	cmp	r3, #2
 8012718:	dd34      	ble.n	8012784 <_dtoa_r+0x984>
 801271a:	9b03      	ldr	r3, [sp, #12]
 801271c:	9302      	str	r3, [sp, #8]
 801271e:	9b02      	ldr	r3, [sp, #8]
 8012720:	b96b      	cbnz	r3, 801273e <_dtoa_r+0x93e>
 8012722:	4631      	mov	r1, r6
 8012724:	2205      	movs	r2, #5
 8012726:	4620      	mov	r0, r4
 8012728:	f000 fc10 	bl	8012f4c <__multadd>
 801272c:	4601      	mov	r1, r0
 801272e:	4606      	mov	r6, r0
 8012730:	ee18 0a10 	vmov	r0, s16
 8012734:	f000 fe2a 	bl	801338c <__mcmp>
 8012738:	2800      	cmp	r0, #0
 801273a:	f73f adbb 	bgt.w	80122b4 <_dtoa_r+0x4b4>
 801273e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012740:	9d01      	ldr	r5, [sp, #4]
 8012742:	43db      	mvns	r3, r3
 8012744:	9300      	str	r3, [sp, #0]
 8012746:	f04f 0800 	mov.w	r8, #0
 801274a:	4631      	mov	r1, r6
 801274c:	4620      	mov	r0, r4
 801274e:	f000 fbdb 	bl	8012f08 <_Bfree>
 8012752:	2f00      	cmp	r7, #0
 8012754:	f43f aea4 	beq.w	80124a0 <_dtoa_r+0x6a0>
 8012758:	f1b8 0f00 	cmp.w	r8, #0
 801275c:	d005      	beq.n	801276a <_dtoa_r+0x96a>
 801275e:	45b8      	cmp	r8, r7
 8012760:	d003      	beq.n	801276a <_dtoa_r+0x96a>
 8012762:	4641      	mov	r1, r8
 8012764:	4620      	mov	r0, r4
 8012766:	f000 fbcf 	bl	8012f08 <_Bfree>
 801276a:	4639      	mov	r1, r7
 801276c:	4620      	mov	r0, r4
 801276e:	f000 fbcb 	bl	8012f08 <_Bfree>
 8012772:	e695      	b.n	80124a0 <_dtoa_r+0x6a0>
 8012774:	2600      	movs	r6, #0
 8012776:	4637      	mov	r7, r6
 8012778:	e7e1      	b.n	801273e <_dtoa_r+0x93e>
 801277a:	9700      	str	r7, [sp, #0]
 801277c:	4637      	mov	r7, r6
 801277e:	e599      	b.n	80122b4 <_dtoa_r+0x4b4>
 8012780:	40240000 	.word	0x40240000
 8012784:	9b08      	ldr	r3, [sp, #32]
 8012786:	2b00      	cmp	r3, #0
 8012788:	f000 80ca 	beq.w	8012920 <_dtoa_r+0xb20>
 801278c:	9b03      	ldr	r3, [sp, #12]
 801278e:	9302      	str	r3, [sp, #8]
 8012790:	2d00      	cmp	r5, #0
 8012792:	dd05      	ble.n	80127a0 <_dtoa_r+0x9a0>
 8012794:	4639      	mov	r1, r7
 8012796:	462a      	mov	r2, r5
 8012798:	4620      	mov	r0, r4
 801279a:	f000 fd87 	bl	80132ac <__lshift>
 801279e:	4607      	mov	r7, r0
 80127a0:	f1b8 0f00 	cmp.w	r8, #0
 80127a4:	d05b      	beq.n	801285e <_dtoa_r+0xa5e>
 80127a6:	6879      	ldr	r1, [r7, #4]
 80127a8:	4620      	mov	r0, r4
 80127aa:	f000 fb6d 	bl	8012e88 <_Balloc>
 80127ae:	4605      	mov	r5, r0
 80127b0:	b928      	cbnz	r0, 80127be <_dtoa_r+0x9be>
 80127b2:	4b87      	ldr	r3, [pc, #540]	; (80129d0 <_dtoa_r+0xbd0>)
 80127b4:	4602      	mov	r2, r0
 80127b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80127ba:	f7ff bb3b 	b.w	8011e34 <_dtoa_r+0x34>
 80127be:	693a      	ldr	r2, [r7, #16]
 80127c0:	3202      	adds	r2, #2
 80127c2:	0092      	lsls	r2, r2, #2
 80127c4:	f107 010c 	add.w	r1, r7, #12
 80127c8:	300c      	adds	r0, #12
 80127ca:	f7fe f9c7 	bl	8010b5c <memcpy>
 80127ce:	2201      	movs	r2, #1
 80127d0:	4629      	mov	r1, r5
 80127d2:	4620      	mov	r0, r4
 80127d4:	f000 fd6a 	bl	80132ac <__lshift>
 80127d8:	9b01      	ldr	r3, [sp, #4]
 80127da:	f103 0901 	add.w	r9, r3, #1
 80127de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80127e2:	4413      	add	r3, r2
 80127e4:	9305      	str	r3, [sp, #20]
 80127e6:	f00a 0301 	and.w	r3, sl, #1
 80127ea:	46b8      	mov	r8, r7
 80127ec:	9304      	str	r3, [sp, #16]
 80127ee:	4607      	mov	r7, r0
 80127f0:	4631      	mov	r1, r6
 80127f2:	ee18 0a10 	vmov	r0, s16
 80127f6:	f7ff fa77 	bl	8011ce8 <quorem>
 80127fa:	4641      	mov	r1, r8
 80127fc:	9002      	str	r0, [sp, #8]
 80127fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012802:	ee18 0a10 	vmov	r0, s16
 8012806:	f000 fdc1 	bl	801338c <__mcmp>
 801280a:	463a      	mov	r2, r7
 801280c:	9003      	str	r0, [sp, #12]
 801280e:	4631      	mov	r1, r6
 8012810:	4620      	mov	r0, r4
 8012812:	f000 fdd7 	bl	80133c4 <__mdiff>
 8012816:	68c2      	ldr	r2, [r0, #12]
 8012818:	f109 3bff 	add.w	fp, r9, #4294967295
 801281c:	4605      	mov	r5, r0
 801281e:	bb02      	cbnz	r2, 8012862 <_dtoa_r+0xa62>
 8012820:	4601      	mov	r1, r0
 8012822:	ee18 0a10 	vmov	r0, s16
 8012826:	f000 fdb1 	bl	801338c <__mcmp>
 801282a:	4602      	mov	r2, r0
 801282c:	4629      	mov	r1, r5
 801282e:	4620      	mov	r0, r4
 8012830:	9207      	str	r2, [sp, #28]
 8012832:	f000 fb69 	bl	8012f08 <_Bfree>
 8012836:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801283a:	ea43 0102 	orr.w	r1, r3, r2
 801283e:	9b04      	ldr	r3, [sp, #16]
 8012840:	430b      	orrs	r3, r1
 8012842:	464d      	mov	r5, r9
 8012844:	d10f      	bne.n	8012866 <_dtoa_r+0xa66>
 8012846:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801284a:	d02a      	beq.n	80128a2 <_dtoa_r+0xaa2>
 801284c:	9b03      	ldr	r3, [sp, #12]
 801284e:	2b00      	cmp	r3, #0
 8012850:	dd02      	ble.n	8012858 <_dtoa_r+0xa58>
 8012852:	9b02      	ldr	r3, [sp, #8]
 8012854:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8012858:	f88b a000 	strb.w	sl, [fp]
 801285c:	e775      	b.n	801274a <_dtoa_r+0x94a>
 801285e:	4638      	mov	r0, r7
 8012860:	e7ba      	b.n	80127d8 <_dtoa_r+0x9d8>
 8012862:	2201      	movs	r2, #1
 8012864:	e7e2      	b.n	801282c <_dtoa_r+0xa2c>
 8012866:	9b03      	ldr	r3, [sp, #12]
 8012868:	2b00      	cmp	r3, #0
 801286a:	db04      	blt.n	8012876 <_dtoa_r+0xa76>
 801286c:	9906      	ldr	r1, [sp, #24]
 801286e:	430b      	orrs	r3, r1
 8012870:	9904      	ldr	r1, [sp, #16]
 8012872:	430b      	orrs	r3, r1
 8012874:	d122      	bne.n	80128bc <_dtoa_r+0xabc>
 8012876:	2a00      	cmp	r2, #0
 8012878:	ddee      	ble.n	8012858 <_dtoa_r+0xa58>
 801287a:	ee18 1a10 	vmov	r1, s16
 801287e:	2201      	movs	r2, #1
 8012880:	4620      	mov	r0, r4
 8012882:	f000 fd13 	bl	80132ac <__lshift>
 8012886:	4631      	mov	r1, r6
 8012888:	ee08 0a10 	vmov	s16, r0
 801288c:	f000 fd7e 	bl	801338c <__mcmp>
 8012890:	2800      	cmp	r0, #0
 8012892:	dc03      	bgt.n	801289c <_dtoa_r+0xa9c>
 8012894:	d1e0      	bne.n	8012858 <_dtoa_r+0xa58>
 8012896:	f01a 0f01 	tst.w	sl, #1
 801289a:	d0dd      	beq.n	8012858 <_dtoa_r+0xa58>
 801289c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80128a0:	d1d7      	bne.n	8012852 <_dtoa_r+0xa52>
 80128a2:	2339      	movs	r3, #57	; 0x39
 80128a4:	f88b 3000 	strb.w	r3, [fp]
 80128a8:	462b      	mov	r3, r5
 80128aa:	461d      	mov	r5, r3
 80128ac:	3b01      	subs	r3, #1
 80128ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80128b2:	2a39      	cmp	r2, #57	; 0x39
 80128b4:	d071      	beq.n	801299a <_dtoa_r+0xb9a>
 80128b6:	3201      	adds	r2, #1
 80128b8:	701a      	strb	r2, [r3, #0]
 80128ba:	e746      	b.n	801274a <_dtoa_r+0x94a>
 80128bc:	2a00      	cmp	r2, #0
 80128be:	dd07      	ble.n	80128d0 <_dtoa_r+0xad0>
 80128c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80128c4:	d0ed      	beq.n	80128a2 <_dtoa_r+0xaa2>
 80128c6:	f10a 0301 	add.w	r3, sl, #1
 80128ca:	f88b 3000 	strb.w	r3, [fp]
 80128ce:	e73c      	b.n	801274a <_dtoa_r+0x94a>
 80128d0:	9b05      	ldr	r3, [sp, #20]
 80128d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80128d6:	4599      	cmp	r9, r3
 80128d8:	d047      	beq.n	801296a <_dtoa_r+0xb6a>
 80128da:	ee18 1a10 	vmov	r1, s16
 80128de:	2300      	movs	r3, #0
 80128e0:	220a      	movs	r2, #10
 80128e2:	4620      	mov	r0, r4
 80128e4:	f000 fb32 	bl	8012f4c <__multadd>
 80128e8:	45b8      	cmp	r8, r7
 80128ea:	ee08 0a10 	vmov	s16, r0
 80128ee:	f04f 0300 	mov.w	r3, #0
 80128f2:	f04f 020a 	mov.w	r2, #10
 80128f6:	4641      	mov	r1, r8
 80128f8:	4620      	mov	r0, r4
 80128fa:	d106      	bne.n	801290a <_dtoa_r+0xb0a>
 80128fc:	f000 fb26 	bl	8012f4c <__multadd>
 8012900:	4680      	mov	r8, r0
 8012902:	4607      	mov	r7, r0
 8012904:	f109 0901 	add.w	r9, r9, #1
 8012908:	e772      	b.n	80127f0 <_dtoa_r+0x9f0>
 801290a:	f000 fb1f 	bl	8012f4c <__multadd>
 801290e:	4639      	mov	r1, r7
 8012910:	4680      	mov	r8, r0
 8012912:	2300      	movs	r3, #0
 8012914:	220a      	movs	r2, #10
 8012916:	4620      	mov	r0, r4
 8012918:	f000 fb18 	bl	8012f4c <__multadd>
 801291c:	4607      	mov	r7, r0
 801291e:	e7f1      	b.n	8012904 <_dtoa_r+0xb04>
 8012920:	9b03      	ldr	r3, [sp, #12]
 8012922:	9302      	str	r3, [sp, #8]
 8012924:	9d01      	ldr	r5, [sp, #4]
 8012926:	ee18 0a10 	vmov	r0, s16
 801292a:	4631      	mov	r1, r6
 801292c:	f7ff f9dc 	bl	8011ce8 <quorem>
 8012930:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012934:	9b01      	ldr	r3, [sp, #4]
 8012936:	f805 ab01 	strb.w	sl, [r5], #1
 801293a:	1aea      	subs	r2, r5, r3
 801293c:	9b02      	ldr	r3, [sp, #8]
 801293e:	4293      	cmp	r3, r2
 8012940:	dd09      	ble.n	8012956 <_dtoa_r+0xb56>
 8012942:	ee18 1a10 	vmov	r1, s16
 8012946:	2300      	movs	r3, #0
 8012948:	220a      	movs	r2, #10
 801294a:	4620      	mov	r0, r4
 801294c:	f000 fafe 	bl	8012f4c <__multadd>
 8012950:	ee08 0a10 	vmov	s16, r0
 8012954:	e7e7      	b.n	8012926 <_dtoa_r+0xb26>
 8012956:	9b02      	ldr	r3, [sp, #8]
 8012958:	2b00      	cmp	r3, #0
 801295a:	bfc8      	it	gt
 801295c:	461d      	movgt	r5, r3
 801295e:	9b01      	ldr	r3, [sp, #4]
 8012960:	bfd8      	it	le
 8012962:	2501      	movle	r5, #1
 8012964:	441d      	add	r5, r3
 8012966:	f04f 0800 	mov.w	r8, #0
 801296a:	ee18 1a10 	vmov	r1, s16
 801296e:	2201      	movs	r2, #1
 8012970:	4620      	mov	r0, r4
 8012972:	f000 fc9b 	bl	80132ac <__lshift>
 8012976:	4631      	mov	r1, r6
 8012978:	ee08 0a10 	vmov	s16, r0
 801297c:	f000 fd06 	bl	801338c <__mcmp>
 8012980:	2800      	cmp	r0, #0
 8012982:	dc91      	bgt.n	80128a8 <_dtoa_r+0xaa8>
 8012984:	d102      	bne.n	801298c <_dtoa_r+0xb8c>
 8012986:	f01a 0f01 	tst.w	sl, #1
 801298a:	d18d      	bne.n	80128a8 <_dtoa_r+0xaa8>
 801298c:	462b      	mov	r3, r5
 801298e:	461d      	mov	r5, r3
 8012990:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012994:	2a30      	cmp	r2, #48	; 0x30
 8012996:	d0fa      	beq.n	801298e <_dtoa_r+0xb8e>
 8012998:	e6d7      	b.n	801274a <_dtoa_r+0x94a>
 801299a:	9a01      	ldr	r2, [sp, #4]
 801299c:	429a      	cmp	r2, r3
 801299e:	d184      	bne.n	80128aa <_dtoa_r+0xaaa>
 80129a0:	9b00      	ldr	r3, [sp, #0]
 80129a2:	3301      	adds	r3, #1
 80129a4:	9300      	str	r3, [sp, #0]
 80129a6:	2331      	movs	r3, #49	; 0x31
 80129a8:	7013      	strb	r3, [r2, #0]
 80129aa:	e6ce      	b.n	801274a <_dtoa_r+0x94a>
 80129ac:	4b09      	ldr	r3, [pc, #36]	; (80129d4 <_dtoa_r+0xbd4>)
 80129ae:	f7ff ba95 	b.w	8011edc <_dtoa_r+0xdc>
 80129b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	f47f aa6e 	bne.w	8011e96 <_dtoa_r+0x96>
 80129ba:	4b07      	ldr	r3, [pc, #28]	; (80129d8 <_dtoa_r+0xbd8>)
 80129bc:	f7ff ba8e 	b.w	8011edc <_dtoa_r+0xdc>
 80129c0:	9b02      	ldr	r3, [sp, #8]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	dcae      	bgt.n	8012924 <_dtoa_r+0xb24>
 80129c6:	9b06      	ldr	r3, [sp, #24]
 80129c8:	2b02      	cmp	r3, #2
 80129ca:	f73f aea8 	bgt.w	801271e <_dtoa_r+0x91e>
 80129ce:	e7a9      	b.n	8012924 <_dtoa_r+0xb24>
 80129d0:	08014e07 	.word	0x08014e07
 80129d4:	08014fe9 	.word	0x08014fe9
 80129d8:	08014d9f 	.word	0x08014d9f

080129dc <__sflush_r>:
 80129dc:	898a      	ldrh	r2, [r1, #12]
 80129de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129e2:	4605      	mov	r5, r0
 80129e4:	0710      	lsls	r0, r2, #28
 80129e6:	460c      	mov	r4, r1
 80129e8:	d458      	bmi.n	8012a9c <__sflush_r+0xc0>
 80129ea:	684b      	ldr	r3, [r1, #4]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	dc05      	bgt.n	80129fc <__sflush_r+0x20>
 80129f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	dc02      	bgt.n	80129fc <__sflush_r+0x20>
 80129f6:	2000      	movs	r0, #0
 80129f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80129fe:	2e00      	cmp	r6, #0
 8012a00:	d0f9      	beq.n	80129f6 <__sflush_r+0x1a>
 8012a02:	2300      	movs	r3, #0
 8012a04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012a08:	682f      	ldr	r7, [r5, #0]
 8012a0a:	602b      	str	r3, [r5, #0]
 8012a0c:	d032      	beq.n	8012a74 <__sflush_r+0x98>
 8012a0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012a10:	89a3      	ldrh	r3, [r4, #12]
 8012a12:	075a      	lsls	r2, r3, #29
 8012a14:	d505      	bpl.n	8012a22 <__sflush_r+0x46>
 8012a16:	6863      	ldr	r3, [r4, #4]
 8012a18:	1ac0      	subs	r0, r0, r3
 8012a1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012a1c:	b10b      	cbz	r3, 8012a22 <__sflush_r+0x46>
 8012a1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012a20:	1ac0      	subs	r0, r0, r3
 8012a22:	2300      	movs	r3, #0
 8012a24:	4602      	mov	r2, r0
 8012a26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012a28:	6a21      	ldr	r1, [r4, #32]
 8012a2a:	4628      	mov	r0, r5
 8012a2c:	47b0      	blx	r6
 8012a2e:	1c43      	adds	r3, r0, #1
 8012a30:	89a3      	ldrh	r3, [r4, #12]
 8012a32:	d106      	bne.n	8012a42 <__sflush_r+0x66>
 8012a34:	6829      	ldr	r1, [r5, #0]
 8012a36:	291d      	cmp	r1, #29
 8012a38:	d82c      	bhi.n	8012a94 <__sflush_r+0xb8>
 8012a3a:	4a2a      	ldr	r2, [pc, #168]	; (8012ae4 <__sflush_r+0x108>)
 8012a3c:	40ca      	lsrs	r2, r1
 8012a3e:	07d6      	lsls	r6, r2, #31
 8012a40:	d528      	bpl.n	8012a94 <__sflush_r+0xb8>
 8012a42:	2200      	movs	r2, #0
 8012a44:	6062      	str	r2, [r4, #4]
 8012a46:	04d9      	lsls	r1, r3, #19
 8012a48:	6922      	ldr	r2, [r4, #16]
 8012a4a:	6022      	str	r2, [r4, #0]
 8012a4c:	d504      	bpl.n	8012a58 <__sflush_r+0x7c>
 8012a4e:	1c42      	adds	r2, r0, #1
 8012a50:	d101      	bne.n	8012a56 <__sflush_r+0x7a>
 8012a52:	682b      	ldr	r3, [r5, #0]
 8012a54:	b903      	cbnz	r3, 8012a58 <__sflush_r+0x7c>
 8012a56:	6560      	str	r0, [r4, #84]	; 0x54
 8012a58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012a5a:	602f      	str	r7, [r5, #0]
 8012a5c:	2900      	cmp	r1, #0
 8012a5e:	d0ca      	beq.n	80129f6 <__sflush_r+0x1a>
 8012a60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012a64:	4299      	cmp	r1, r3
 8012a66:	d002      	beq.n	8012a6e <__sflush_r+0x92>
 8012a68:	4628      	mov	r0, r5
 8012a6a:	f7fe f88d 	bl	8010b88 <_free_r>
 8012a6e:	2000      	movs	r0, #0
 8012a70:	6360      	str	r0, [r4, #52]	; 0x34
 8012a72:	e7c1      	b.n	80129f8 <__sflush_r+0x1c>
 8012a74:	6a21      	ldr	r1, [r4, #32]
 8012a76:	2301      	movs	r3, #1
 8012a78:	4628      	mov	r0, r5
 8012a7a:	47b0      	blx	r6
 8012a7c:	1c41      	adds	r1, r0, #1
 8012a7e:	d1c7      	bne.n	8012a10 <__sflush_r+0x34>
 8012a80:	682b      	ldr	r3, [r5, #0]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d0c4      	beq.n	8012a10 <__sflush_r+0x34>
 8012a86:	2b1d      	cmp	r3, #29
 8012a88:	d001      	beq.n	8012a8e <__sflush_r+0xb2>
 8012a8a:	2b16      	cmp	r3, #22
 8012a8c:	d101      	bne.n	8012a92 <__sflush_r+0xb6>
 8012a8e:	602f      	str	r7, [r5, #0]
 8012a90:	e7b1      	b.n	80129f6 <__sflush_r+0x1a>
 8012a92:	89a3      	ldrh	r3, [r4, #12]
 8012a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a98:	81a3      	strh	r3, [r4, #12]
 8012a9a:	e7ad      	b.n	80129f8 <__sflush_r+0x1c>
 8012a9c:	690f      	ldr	r7, [r1, #16]
 8012a9e:	2f00      	cmp	r7, #0
 8012aa0:	d0a9      	beq.n	80129f6 <__sflush_r+0x1a>
 8012aa2:	0793      	lsls	r3, r2, #30
 8012aa4:	680e      	ldr	r6, [r1, #0]
 8012aa6:	bf08      	it	eq
 8012aa8:	694b      	ldreq	r3, [r1, #20]
 8012aaa:	600f      	str	r7, [r1, #0]
 8012aac:	bf18      	it	ne
 8012aae:	2300      	movne	r3, #0
 8012ab0:	eba6 0807 	sub.w	r8, r6, r7
 8012ab4:	608b      	str	r3, [r1, #8]
 8012ab6:	f1b8 0f00 	cmp.w	r8, #0
 8012aba:	dd9c      	ble.n	80129f6 <__sflush_r+0x1a>
 8012abc:	6a21      	ldr	r1, [r4, #32]
 8012abe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012ac0:	4643      	mov	r3, r8
 8012ac2:	463a      	mov	r2, r7
 8012ac4:	4628      	mov	r0, r5
 8012ac6:	47b0      	blx	r6
 8012ac8:	2800      	cmp	r0, #0
 8012aca:	dc06      	bgt.n	8012ada <__sflush_r+0xfe>
 8012acc:	89a3      	ldrh	r3, [r4, #12]
 8012ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ad2:	81a3      	strh	r3, [r4, #12]
 8012ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8012ad8:	e78e      	b.n	80129f8 <__sflush_r+0x1c>
 8012ada:	4407      	add	r7, r0
 8012adc:	eba8 0800 	sub.w	r8, r8, r0
 8012ae0:	e7e9      	b.n	8012ab6 <__sflush_r+0xda>
 8012ae2:	bf00      	nop
 8012ae4:	20400001 	.word	0x20400001

08012ae8 <_fflush_r>:
 8012ae8:	b538      	push	{r3, r4, r5, lr}
 8012aea:	690b      	ldr	r3, [r1, #16]
 8012aec:	4605      	mov	r5, r0
 8012aee:	460c      	mov	r4, r1
 8012af0:	b913      	cbnz	r3, 8012af8 <_fflush_r+0x10>
 8012af2:	2500      	movs	r5, #0
 8012af4:	4628      	mov	r0, r5
 8012af6:	bd38      	pop	{r3, r4, r5, pc}
 8012af8:	b118      	cbz	r0, 8012b02 <_fflush_r+0x1a>
 8012afa:	6983      	ldr	r3, [r0, #24]
 8012afc:	b90b      	cbnz	r3, 8012b02 <_fflush_r+0x1a>
 8012afe:	f000 f887 	bl	8012c10 <__sinit>
 8012b02:	4b14      	ldr	r3, [pc, #80]	; (8012b54 <_fflush_r+0x6c>)
 8012b04:	429c      	cmp	r4, r3
 8012b06:	d11b      	bne.n	8012b40 <_fflush_r+0x58>
 8012b08:	686c      	ldr	r4, [r5, #4]
 8012b0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d0ef      	beq.n	8012af2 <_fflush_r+0xa>
 8012b12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012b14:	07d0      	lsls	r0, r2, #31
 8012b16:	d404      	bmi.n	8012b22 <_fflush_r+0x3a>
 8012b18:	0599      	lsls	r1, r3, #22
 8012b1a:	d402      	bmi.n	8012b22 <_fflush_r+0x3a>
 8012b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012b1e:	f000 f92c 	bl	8012d7a <__retarget_lock_acquire_recursive>
 8012b22:	4628      	mov	r0, r5
 8012b24:	4621      	mov	r1, r4
 8012b26:	f7ff ff59 	bl	80129dc <__sflush_r>
 8012b2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012b2c:	07da      	lsls	r2, r3, #31
 8012b2e:	4605      	mov	r5, r0
 8012b30:	d4e0      	bmi.n	8012af4 <_fflush_r+0xc>
 8012b32:	89a3      	ldrh	r3, [r4, #12]
 8012b34:	059b      	lsls	r3, r3, #22
 8012b36:	d4dd      	bmi.n	8012af4 <_fflush_r+0xc>
 8012b38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012b3a:	f000 f91f 	bl	8012d7c <__retarget_lock_release_recursive>
 8012b3e:	e7d9      	b.n	8012af4 <_fflush_r+0xc>
 8012b40:	4b05      	ldr	r3, [pc, #20]	; (8012b58 <_fflush_r+0x70>)
 8012b42:	429c      	cmp	r4, r3
 8012b44:	d101      	bne.n	8012b4a <_fflush_r+0x62>
 8012b46:	68ac      	ldr	r4, [r5, #8]
 8012b48:	e7df      	b.n	8012b0a <_fflush_r+0x22>
 8012b4a:	4b04      	ldr	r3, [pc, #16]	; (8012b5c <_fflush_r+0x74>)
 8012b4c:	429c      	cmp	r4, r3
 8012b4e:	bf08      	it	eq
 8012b50:	68ec      	ldreq	r4, [r5, #12]
 8012b52:	e7da      	b.n	8012b0a <_fflush_r+0x22>
 8012b54:	08014e38 	.word	0x08014e38
 8012b58:	08014e58 	.word	0x08014e58
 8012b5c:	08014e18 	.word	0x08014e18

08012b60 <std>:
 8012b60:	2300      	movs	r3, #0
 8012b62:	b510      	push	{r4, lr}
 8012b64:	4604      	mov	r4, r0
 8012b66:	e9c0 3300 	strd	r3, r3, [r0]
 8012b6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012b6e:	6083      	str	r3, [r0, #8]
 8012b70:	8181      	strh	r1, [r0, #12]
 8012b72:	6643      	str	r3, [r0, #100]	; 0x64
 8012b74:	81c2      	strh	r2, [r0, #14]
 8012b76:	6183      	str	r3, [r0, #24]
 8012b78:	4619      	mov	r1, r3
 8012b7a:	2208      	movs	r2, #8
 8012b7c:	305c      	adds	r0, #92	; 0x5c
 8012b7e:	f7fd fffb 	bl	8010b78 <memset>
 8012b82:	4b05      	ldr	r3, [pc, #20]	; (8012b98 <std+0x38>)
 8012b84:	6263      	str	r3, [r4, #36]	; 0x24
 8012b86:	4b05      	ldr	r3, [pc, #20]	; (8012b9c <std+0x3c>)
 8012b88:	62a3      	str	r3, [r4, #40]	; 0x28
 8012b8a:	4b05      	ldr	r3, [pc, #20]	; (8012ba0 <std+0x40>)
 8012b8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012b8e:	4b05      	ldr	r3, [pc, #20]	; (8012ba4 <std+0x44>)
 8012b90:	6224      	str	r4, [r4, #32]
 8012b92:	6323      	str	r3, [r4, #48]	; 0x30
 8012b94:	bd10      	pop	{r4, pc}
 8012b96:	bf00      	nop
 8012b98:	08011879 	.word	0x08011879
 8012b9c:	0801189f 	.word	0x0801189f
 8012ba0:	080118d7 	.word	0x080118d7
 8012ba4:	080118fb 	.word	0x080118fb

08012ba8 <_cleanup_r>:
 8012ba8:	4901      	ldr	r1, [pc, #4]	; (8012bb0 <_cleanup_r+0x8>)
 8012baa:	f000 b8c1 	b.w	8012d30 <_fwalk_reent>
 8012bae:	bf00      	nop
 8012bb0:	08012ae9 	.word	0x08012ae9

08012bb4 <__sfmoreglue>:
 8012bb4:	b570      	push	{r4, r5, r6, lr}
 8012bb6:	2268      	movs	r2, #104	; 0x68
 8012bb8:	1e4d      	subs	r5, r1, #1
 8012bba:	4355      	muls	r5, r2
 8012bbc:	460e      	mov	r6, r1
 8012bbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012bc2:	f7fe f84d 	bl	8010c60 <_malloc_r>
 8012bc6:	4604      	mov	r4, r0
 8012bc8:	b140      	cbz	r0, 8012bdc <__sfmoreglue+0x28>
 8012bca:	2100      	movs	r1, #0
 8012bcc:	e9c0 1600 	strd	r1, r6, [r0]
 8012bd0:	300c      	adds	r0, #12
 8012bd2:	60a0      	str	r0, [r4, #8]
 8012bd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012bd8:	f7fd ffce 	bl	8010b78 <memset>
 8012bdc:	4620      	mov	r0, r4
 8012bde:	bd70      	pop	{r4, r5, r6, pc}

08012be0 <__sfp_lock_acquire>:
 8012be0:	4801      	ldr	r0, [pc, #4]	; (8012be8 <__sfp_lock_acquire+0x8>)
 8012be2:	f000 b8ca 	b.w	8012d7a <__retarget_lock_acquire_recursive>
 8012be6:	bf00      	nop
 8012be8:	20005e2d 	.word	0x20005e2d

08012bec <__sfp_lock_release>:
 8012bec:	4801      	ldr	r0, [pc, #4]	; (8012bf4 <__sfp_lock_release+0x8>)
 8012bee:	f000 b8c5 	b.w	8012d7c <__retarget_lock_release_recursive>
 8012bf2:	bf00      	nop
 8012bf4:	20005e2d 	.word	0x20005e2d

08012bf8 <__sinit_lock_acquire>:
 8012bf8:	4801      	ldr	r0, [pc, #4]	; (8012c00 <__sinit_lock_acquire+0x8>)
 8012bfa:	f000 b8be 	b.w	8012d7a <__retarget_lock_acquire_recursive>
 8012bfe:	bf00      	nop
 8012c00:	20005e2e 	.word	0x20005e2e

08012c04 <__sinit_lock_release>:
 8012c04:	4801      	ldr	r0, [pc, #4]	; (8012c0c <__sinit_lock_release+0x8>)
 8012c06:	f000 b8b9 	b.w	8012d7c <__retarget_lock_release_recursive>
 8012c0a:	bf00      	nop
 8012c0c:	20005e2e 	.word	0x20005e2e

08012c10 <__sinit>:
 8012c10:	b510      	push	{r4, lr}
 8012c12:	4604      	mov	r4, r0
 8012c14:	f7ff fff0 	bl	8012bf8 <__sinit_lock_acquire>
 8012c18:	69a3      	ldr	r3, [r4, #24]
 8012c1a:	b11b      	cbz	r3, 8012c24 <__sinit+0x14>
 8012c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c20:	f7ff bff0 	b.w	8012c04 <__sinit_lock_release>
 8012c24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012c28:	6523      	str	r3, [r4, #80]	; 0x50
 8012c2a:	4b13      	ldr	r3, [pc, #76]	; (8012c78 <__sinit+0x68>)
 8012c2c:	4a13      	ldr	r2, [pc, #76]	; (8012c7c <__sinit+0x6c>)
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	62a2      	str	r2, [r4, #40]	; 0x28
 8012c32:	42a3      	cmp	r3, r4
 8012c34:	bf04      	itt	eq
 8012c36:	2301      	moveq	r3, #1
 8012c38:	61a3      	streq	r3, [r4, #24]
 8012c3a:	4620      	mov	r0, r4
 8012c3c:	f000 f820 	bl	8012c80 <__sfp>
 8012c40:	6060      	str	r0, [r4, #4]
 8012c42:	4620      	mov	r0, r4
 8012c44:	f000 f81c 	bl	8012c80 <__sfp>
 8012c48:	60a0      	str	r0, [r4, #8]
 8012c4a:	4620      	mov	r0, r4
 8012c4c:	f000 f818 	bl	8012c80 <__sfp>
 8012c50:	2200      	movs	r2, #0
 8012c52:	60e0      	str	r0, [r4, #12]
 8012c54:	2104      	movs	r1, #4
 8012c56:	6860      	ldr	r0, [r4, #4]
 8012c58:	f7ff ff82 	bl	8012b60 <std>
 8012c5c:	68a0      	ldr	r0, [r4, #8]
 8012c5e:	2201      	movs	r2, #1
 8012c60:	2109      	movs	r1, #9
 8012c62:	f7ff ff7d 	bl	8012b60 <std>
 8012c66:	68e0      	ldr	r0, [r4, #12]
 8012c68:	2202      	movs	r2, #2
 8012c6a:	2112      	movs	r1, #18
 8012c6c:	f7ff ff78 	bl	8012b60 <std>
 8012c70:	2301      	movs	r3, #1
 8012c72:	61a3      	str	r3, [r4, #24]
 8012c74:	e7d2      	b.n	8012c1c <__sinit+0xc>
 8012c76:	bf00      	nop
 8012c78:	08014bb8 	.word	0x08014bb8
 8012c7c:	08012ba9 	.word	0x08012ba9

08012c80 <__sfp>:
 8012c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c82:	4607      	mov	r7, r0
 8012c84:	f7ff ffac 	bl	8012be0 <__sfp_lock_acquire>
 8012c88:	4b1e      	ldr	r3, [pc, #120]	; (8012d04 <__sfp+0x84>)
 8012c8a:	681e      	ldr	r6, [r3, #0]
 8012c8c:	69b3      	ldr	r3, [r6, #24]
 8012c8e:	b913      	cbnz	r3, 8012c96 <__sfp+0x16>
 8012c90:	4630      	mov	r0, r6
 8012c92:	f7ff ffbd 	bl	8012c10 <__sinit>
 8012c96:	3648      	adds	r6, #72	; 0x48
 8012c98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012c9c:	3b01      	subs	r3, #1
 8012c9e:	d503      	bpl.n	8012ca8 <__sfp+0x28>
 8012ca0:	6833      	ldr	r3, [r6, #0]
 8012ca2:	b30b      	cbz	r3, 8012ce8 <__sfp+0x68>
 8012ca4:	6836      	ldr	r6, [r6, #0]
 8012ca6:	e7f7      	b.n	8012c98 <__sfp+0x18>
 8012ca8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012cac:	b9d5      	cbnz	r5, 8012ce4 <__sfp+0x64>
 8012cae:	4b16      	ldr	r3, [pc, #88]	; (8012d08 <__sfp+0x88>)
 8012cb0:	60e3      	str	r3, [r4, #12]
 8012cb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012cb6:	6665      	str	r5, [r4, #100]	; 0x64
 8012cb8:	f000 f85e 	bl	8012d78 <__retarget_lock_init_recursive>
 8012cbc:	f7ff ff96 	bl	8012bec <__sfp_lock_release>
 8012cc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012cc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012cc8:	6025      	str	r5, [r4, #0]
 8012cca:	61a5      	str	r5, [r4, #24]
 8012ccc:	2208      	movs	r2, #8
 8012cce:	4629      	mov	r1, r5
 8012cd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012cd4:	f7fd ff50 	bl	8010b78 <memset>
 8012cd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012cdc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012ce0:	4620      	mov	r0, r4
 8012ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ce4:	3468      	adds	r4, #104	; 0x68
 8012ce6:	e7d9      	b.n	8012c9c <__sfp+0x1c>
 8012ce8:	2104      	movs	r1, #4
 8012cea:	4638      	mov	r0, r7
 8012cec:	f7ff ff62 	bl	8012bb4 <__sfmoreglue>
 8012cf0:	4604      	mov	r4, r0
 8012cf2:	6030      	str	r0, [r6, #0]
 8012cf4:	2800      	cmp	r0, #0
 8012cf6:	d1d5      	bne.n	8012ca4 <__sfp+0x24>
 8012cf8:	f7ff ff78 	bl	8012bec <__sfp_lock_release>
 8012cfc:	230c      	movs	r3, #12
 8012cfe:	603b      	str	r3, [r7, #0]
 8012d00:	e7ee      	b.n	8012ce0 <__sfp+0x60>
 8012d02:	bf00      	nop
 8012d04:	08014bb8 	.word	0x08014bb8
 8012d08:	ffff0001 	.word	0xffff0001

08012d0c <fiprintf>:
 8012d0c:	b40e      	push	{r1, r2, r3}
 8012d0e:	b503      	push	{r0, r1, lr}
 8012d10:	4601      	mov	r1, r0
 8012d12:	ab03      	add	r3, sp, #12
 8012d14:	4805      	ldr	r0, [pc, #20]	; (8012d2c <fiprintf+0x20>)
 8012d16:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d1a:	6800      	ldr	r0, [r0, #0]
 8012d1c:	9301      	str	r3, [sp, #4]
 8012d1e:	f000 ffa5 	bl	8013c6c <_vfiprintf_r>
 8012d22:	b002      	add	sp, #8
 8012d24:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d28:	b003      	add	sp, #12
 8012d2a:	4770      	bx	lr
 8012d2c:	20000050 	.word	0x20000050

08012d30 <_fwalk_reent>:
 8012d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d34:	4606      	mov	r6, r0
 8012d36:	4688      	mov	r8, r1
 8012d38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012d3c:	2700      	movs	r7, #0
 8012d3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012d42:	f1b9 0901 	subs.w	r9, r9, #1
 8012d46:	d505      	bpl.n	8012d54 <_fwalk_reent+0x24>
 8012d48:	6824      	ldr	r4, [r4, #0]
 8012d4a:	2c00      	cmp	r4, #0
 8012d4c:	d1f7      	bne.n	8012d3e <_fwalk_reent+0xe>
 8012d4e:	4638      	mov	r0, r7
 8012d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d54:	89ab      	ldrh	r3, [r5, #12]
 8012d56:	2b01      	cmp	r3, #1
 8012d58:	d907      	bls.n	8012d6a <_fwalk_reent+0x3a>
 8012d5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012d5e:	3301      	adds	r3, #1
 8012d60:	d003      	beq.n	8012d6a <_fwalk_reent+0x3a>
 8012d62:	4629      	mov	r1, r5
 8012d64:	4630      	mov	r0, r6
 8012d66:	47c0      	blx	r8
 8012d68:	4307      	orrs	r7, r0
 8012d6a:	3568      	adds	r5, #104	; 0x68
 8012d6c:	e7e9      	b.n	8012d42 <_fwalk_reent+0x12>
	...

08012d70 <_localeconv_r>:
 8012d70:	4800      	ldr	r0, [pc, #0]	; (8012d74 <_localeconv_r+0x4>)
 8012d72:	4770      	bx	lr
 8012d74:	200001a4 	.word	0x200001a4

08012d78 <__retarget_lock_init_recursive>:
 8012d78:	4770      	bx	lr

08012d7a <__retarget_lock_acquire_recursive>:
 8012d7a:	4770      	bx	lr

08012d7c <__retarget_lock_release_recursive>:
 8012d7c:	4770      	bx	lr
	...

08012d80 <_lseek_r>:
 8012d80:	b538      	push	{r3, r4, r5, lr}
 8012d82:	4d07      	ldr	r5, [pc, #28]	; (8012da0 <_lseek_r+0x20>)
 8012d84:	4604      	mov	r4, r0
 8012d86:	4608      	mov	r0, r1
 8012d88:	4611      	mov	r1, r2
 8012d8a:	2200      	movs	r2, #0
 8012d8c:	602a      	str	r2, [r5, #0]
 8012d8e:	461a      	mov	r2, r3
 8012d90:	f7f0 fd3c 	bl	800380c <_lseek>
 8012d94:	1c43      	adds	r3, r0, #1
 8012d96:	d102      	bne.n	8012d9e <_lseek_r+0x1e>
 8012d98:	682b      	ldr	r3, [r5, #0]
 8012d9a:	b103      	cbz	r3, 8012d9e <_lseek_r+0x1e>
 8012d9c:	6023      	str	r3, [r4, #0]
 8012d9e:	bd38      	pop	{r3, r4, r5, pc}
 8012da0:	20005e30 	.word	0x20005e30

08012da4 <__swhatbuf_r>:
 8012da4:	b570      	push	{r4, r5, r6, lr}
 8012da6:	460e      	mov	r6, r1
 8012da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012dac:	2900      	cmp	r1, #0
 8012dae:	b096      	sub	sp, #88	; 0x58
 8012db0:	4614      	mov	r4, r2
 8012db2:	461d      	mov	r5, r3
 8012db4:	da08      	bge.n	8012dc8 <__swhatbuf_r+0x24>
 8012db6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012dba:	2200      	movs	r2, #0
 8012dbc:	602a      	str	r2, [r5, #0]
 8012dbe:	061a      	lsls	r2, r3, #24
 8012dc0:	d410      	bmi.n	8012de4 <__swhatbuf_r+0x40>
 8012dc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012dc6:	e00e      	b.n	8012de6 <__swhatbuf_r+0x42>
 8012dc8:	466a      	mov	r2, sp
 8012dca:	f001 fac9 	bl	8014360 <_fstat_r>
 8012dce:	2800      	cmp	r0, #0
 8012dd0:	dbf1      	blt.n	8012db6 <__swhatbuf_r+0x12>
 8012dd2:	9a01      	ldr	r2, [sp, #4]
 8012dd4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012dd8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012ddc:	425a      	negs	r2, r3
 8012dde:	415a      	adcs	r2, r3
 8012de0:	602a      	str	r2, [r5, #0]
 8012de2:	e7ee      	b.n	8012dc2 <__swhatbuf_r+0x1e>
 8012de4:	2340      	movs	r3, #64	; 0x40
 8012de6:	2000      	movs	r0, #0
 8012de8:	6023      	str	r3, [r4, #0]
 8012dea:	b016      	add	sp, #88	; 0x58
 8012dec:	bd70      	pop	{r4, r5, r6, pc}
	...

08012df0 <__smakebuf_r>:
 8012df0:	898b      	ldrh	r3, [r1, #12]
 8012df2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012df4:	079d      	lsls	r5, r3, #30
 8012df6:	4606      	mov	r6, r0
 8012df8:	460c      	mov	r4, r1
 8012dfa:	d507      	bpl.n	8012e0c <__smakebuf_r+0x1c>
 8012dfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012e00:	6023      	str	r3, [r4, #0]
 8012e02:	6123      	str	r3, [r4, #16]
 8012e04:	2301      	movs	r3, #1
 8012e06:	6163      	str	r3, [r4, #20]
 8012e08:	b002      	add	sp, #8
 8012e0a:	bd70      	pop	{r4, r5, r6, pc}
 8012e0c:	ab01      	add	r3, sp, #4
 8012e0e:	466a      	mov	r2, sp
 8012e10:	f7ff ffc8 	bl	8012da4 <__swhatbuf_r>
 8012e14:	9900      	ldr	r1, [sp, #0]
 8012e16:	4605      	mov	r5, r0
 8012e18:	4630      	mov	r0, r6
 8012e1a:	f7fd ff21 	bl	8010c60 <_malloc_r>
 8012e1e:	b948      	cbnz	r0, 8012e34 <__smakebuf_r+0x44>
 8012e20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e24:	059a      	lsls	r2, r3, #22
 8012e26:	d4ef      	bmi.n	8012e08 <__smakebuf_r+0x18>
 8012e28:	f023 0303 	bic.w	r3, r3, #3
 8012e2c:	f043 0302 	orr.w	r3, r3, #2
 8012e30:	81a3      	strh	r3, [r4, #12]
 8012e32:	e7e3      	b.n	8012dfc <__smakebuf_r+0xc>
 8012e34:	4b0d      	ldr	r3, [pc, #52]	; (8012e6c <__smakebuf_r+0x7c>)
 8012e36:	62b3      	str	r3, [r6, #40]	; 0x28
 8012e38:	89a3      	ldrh	r3, [r4, #12]
 8012e3a:	6020      	str	r0, [r4, #0]
 8012e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e40:	81a3      	strh	r3, [r4, #12]
 8012e42:	9b00      	ldr	r3, [sp, #0]
 8012e44:	6163      	str	r3, [r4, #20]
 8012e46:	9b01      	ldr	r3, [sp, #4]
 8012e48:	6120      	str	r0, [r4, #16]
 8012e4a:	b15b      	cbz	r3, 8012e64 <__smakebuf_r+0x74>
 8012e4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e50:	4630      	mov	r0, r6
 8012e52:	f001 fa97 	bl	8014384 <_isatty_r>
 8012e56:	b128      	cbz	r0, 8012e64 <__smakebuf_r+0x74>
 8012e58:	89a3      	ldrh	r3, [r4, #12]
 8012e5a:	f023 0303 	bic.w	r3, r3, #3
 8012e5e:	f043 0301 	orr.w	r3, r3, #1
 8012e62:	81a3      	strh	r3, [r4, #12]
 8012e64:	89a0      	ldrh	r0, [r4, #12]
 8012e66:	4305      	orrs	r5, r0
 8012e68:	81a5      	strh	r5, [r4, #12]
 8012e6a:	e7cd      	b.n	8012e08 <__smakebuf_r+0x18>
 8012e6c:	08012ba9 	.word	0x08012ba9

08012e70 <__malloc_lock>:
 8012e70:	4801      	ldr	r0, [pc, #4]	; (8012e78 <__malloc_lock+0x8>)
 8012e72:	f7ff bf82 	b.w	8012d7a <__retarget_lock_acquire_recursive>
 8012e76:	bf00      	nop
 8012e78:	20005e2c 	.word	0x20005e2c

08012e7c <__malloc_unlock>:
 8012e7c:	4801      	ldr	r0, [pc, #4]	; (8012e84 <__malloc_unlock+0x8>)
 8012e7e:	f7ff bf7d 	b.w	8012d7c <__retarget_lock_release_recursive>
 8012e82:	bf00      	nop
 8012e84:	20005e2c 	.word	0x20005e2c

08012e88 <_Balloc>:
 8012e88:	b570      	push	{r4, r5, r6, lr}
 8012e8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012e8c:	4604      	mov	r4, r0
 8012e8e:	460d      	mov	r5, r1
 8012e90:	b976      	cbnz	r6, 8012eb0 <_Balloc+0x28>
 8012e92:	2010      	movs	r0, #16
 8012e94:	f7fd fe52 	bl	8010b3c <malloc>
 8012e98:	4602      	mov	r2, r0
 8012e9a:	6260      	str	r0, [r4, #36]	; 0x24
 8012e9c:	b920      	cbnz	r0, 8012ea8 <_Balloc+0x20>
 8012e9e:	4b18      	ldr	r3, [pc, #96]	; (8012f00 <_Balloc+0x78>)
 8012ea0:	4818      	ldr	r0, [pc, #96]	; (8012f04 <_Balloc+0x7c>)
 8012ea2:	2166      	movs	r1, #102	; 0x66
 8012ea4:	f7fe fef2 	bl	8011c8c <__assert_func>
 8012ea8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012eac:	6006      	str	r6, [r0, #0]
 8012eae:	60c6      	str	r6, [r0, #12]
 8012eb0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012eb2:	68f3      	ldr	r3, [r6, #12]
 8012eb4:	b183      	cbz	r3, 8012ed8 <_Balloc+0x50>
 8012eb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012eb8:	68db      	ldr	r3, [r3, #12]
 8012eba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012ebe:	b9b8      	cbnz	r0, 8012ef0 <_Balloc+0x68>
 8012ec0:	2101      	movs	r1, #1
 8012ec2:	fa01 f605 	lsl.w	r6, r1, r5
 8012ec6:	1d72      	adds	r2, r6, #5
 8012ec8:	0092      	lsls	r2, r2, #2
 8012eca:	4620      	mov	r0, r4
 8012ecc:	f000 fb60 	bl	8013590 <_calloc_r>
 8012ed0:	b160      	cbz	r0, 8012eec <_Balloc+0x64>
 8012ed2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012ed6:	e00e      	b.n	8012ef6 <_Balloc+0x6e>
 8012ed8:	2221      	movs	r2, #33	; 0x21
 8012eda:	2104      	movs	r1, #4
 8012edc:	4620      	mov	r0, r4
 8012ede:	f000 fb57 	bl	8013590 <_calloc_r>
 8012ee2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012ee4:	60f0      	str	r0, [r6, #12]
 8012ee6:	68db      	ldr	r3, [r3, #12]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d1e4      	bne.n	8012eb6 <_Balloc+0x2e>
 8012eec:	2000      	movs	r0, #0
 8012eee:	bd70      	pop	{r4, r5, r6, pc}
 8012ef0:	6802      	ldr	r2, [r0, #0]
 8012ef2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012efc:	e7f7      	b.n	8012eee <_Balloc+0x66>
 8012efe:	bf00      	nop
 8012f00:	08014bee 	.word	0x08014bee
 8012f04:	08014e78 	.word	0x08014e78

08012f08 <_Bfree>:
 8012f08:	b570      	push	{r4, r5, r6, lr}
 8012f0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012f0c:	4605      	mov	r5, r0
 8012f0e:	460c      	mov	r4, r1
 8012f10:	b976      	cbnz	r6, 8012f30 <_Bfree+0x28>
 8012f12:	2010      	movs	r0, #16
 8012f14:	f7fd fe12 	bl	8010b3c <malloc>
 8012f18:	4602      	mov	r2, r0
 8012f1a:	6268      	str	r0, [r5, #36]	; 0x24
 8012f1c:	b920      	cbnz	r0, 8012f28 <_Bfree+0x20>
 8012f1e:	4b09      	ldr	r3, [pc, #36]	; (8012f44 <_Bfree+0x3c>)
 8012f20:	4809      	ldr	r0, [pc, #36]	; (8012f48 <_Bfree+0x40>)
 8012f22:	218a      	movs	r1, #138	; 0x8a
 8012f24:	f7fe feb2 	bl	8011c8c <__assert_func>
 8012f28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012f2c:	6006      	str	r6, [r0, #0]
 8012f2e:	60c6      	str	r6, [r0, #12]
 8012f30:	b13c      	cbz	r4, 8012f42 <_Bfree+0x3a>
 8012f32:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012f34:	6862      	ldr	r2, [r4, #4]
 8012f36:	68db      	ldr	r3, [r3, #12]
 8012f38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012f3c:	6021      	str	r1, [r4, #0]
 8012f3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012f42:	bd70      	pop	{r4, r5, r6, pc}
 8012f44:	08014bee 	.word	0x08014bee
 8012f48:	08014e78 	.word	0x08014e78

08012f4c <__multadd>:
 8012f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f50:	690d      	ldr	r5, [r1, #16]
 8012f52:	4607      	mov	r7, r0
 8012f54:	460c      	mov	r4, r1
 8012f56:	461e      	mov	r6, r3
 8012f58:	f101 0c14 	add.w	ip, r1, #20
 8012f5c:	2000      	movs	r0, #0
 8012f5e:	f8dc 3000 	ldr.w	r3, [ip]
 8012f62:	b299      	uxth	r1, r3
 8012f64:	fb02 6101 	mla	r1, r2, r1, r6
 8012f68:	0c1e      	lsrs	r6, r3, #16
 8012f6a:	0c0b      	lsrs	r3, r1, #16
 8012f6c:	fb02 3306 	mla	r3, r2, r6, r3
 8012f70:	b289      	uxth	r1, r1
 8012f72:	3001      	adds	r0, #1
 8012f74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012f78:	4285      	cmp	r5, r0
 8012f7a:	f84c 1b04 	str.w	r1, [ip], #4
 8012f7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012f82:	dcec      	bgt.n	8012f5e <__multadd+0x12>
 8012f84:	b30e      	cbz	r6, 8012fca <__multadd+0x7e>
 8012f86:	68a3      	ldr	r3, [r4, #8]
 8012f88:	42ab      	cmp	r3, r5
 8012f8a:	dc19      	bgt.n	8012fc0 <__multadd+0x74>
 8012f8c:	6861      	ldr	r1, [r4, #4]
 8012f8e:	4638      	mov	r0, r7
 8012f90:	3101      	adds	r1, #1
 8012f92:	f7ff ff79 	bl	8012e88 <_Balloc>
 8012f96:	4680      	mov	r8, r0
 8012f98:	b928      	cbnz	r0, 8012fa6 <__multadd+0x5a>
 8012f9a:	4602      	mov	r2, r0
 8012f9c:	4b0c      	ldr	r3, [pc, #48]	; (8012fd0 <__multadd+0x84>)
 8012f9e:	480d      	ldr	r0, [pc, #52]	; (8012fd4 <__multadd+0x88>)
 8012fa0:	21b5      	movs	r1, #181	; 0xb5
 8012fa2:	f7fe fe73 	bl	8011c8c <__assert_func>
 8012fa6:	6922      	ldr	r2, [r4, #16]
 8012fa8:	3202      	adds	r2, #2
 8012faa:	f104 010c 	add.w	r1, r4, #12
 8012fae:	0092      	lsls	r2, r2, #2
 8012fb0:	300c      	adds	r0, #12
 8012fb2:	f7fd fdd3 	bl	8010b5c <memcpy>
 8012fb6:	4621      	mov	r1, r4
 8012fb8:	4638      	mov	r0, r7
 8012fba:	f7ff ffa5 	bl	8012f08 <_Bfree>
 8012fbe:	4644      	mov	r4, r8
 8012fc0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012fc4:	3501      	adds	r5, #1
 8012fc6:	615e      	str	r6, [r3, #20]
 8012fc8:	6125      	str	r5, [r4, #16]
 8012fca:	4620      	mov	r0, r4
 8012fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fd0:	08014e07 	.word	0x08014e07
 8012fd4:	08014e78 	.word	0x08014e78

08012fd8 <__hi0bits>:
 8012fd8:	0c03      	lsrs	r3, r0, #16
 8012fda:	041b      	lsls	r3, r3, #16
 8012fdc:	b9d3      	cbnz	r3, 8013014 <__hi0bits+0x3c>
 8012fde:	0400      	lsls	r0, r0, #16
 8012fe0:	2310      	movs	r3, #16
 8012fe2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012fe6:	bf04      	itt	eq
 8012fe8:	0200      	lsleq	r0, r0, #8
 8012fea:	3308      	addeq	r3, #8
 8012fec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012ff0:	bf04      	itt	eq
 8012ff2:	0100      	lsleq	r0, r0, #4
 8012ff4:	3304      	addeq	r3, #4
 8012ff6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012ffa:	bf04      	itt	eq
 8012ffc:	0080      	lsleq	r0, r0, #2
 8012ffe:	3302      	addeq	r3, #2
 8013000:	2800      	cmp	r0, #0
 8013002:	db05      	blt.n	8013010 <__hi0bits+0x38>
 8013004:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013008:	f103 0301 	add.w	r3, r3, #1
 801300c:	bf08      	it	eq
 801300e:	2320      	moveq	r3, #32
 8013010:	4618      	mov	r0, r3
 8013012:	4770      	bx	lr
 8013014:	2300      	movs	r3, #0
 8013016:	e7e4      	b.n	8012fe2 <__hi0bits+0xa>

08013018 <__lo0bits>:
 8013018:	6803      	ldr	r3, [r0, #0]
 801301a:	f013 0207 	ands.w	r2, r3, #7
 801301e:	4601      	mov	r1, r0
 8013020:	d00b      	beq.n	801303a <__lo0bits+0x22>
 8013022:	07da      	lsls	r2, r3, #31
 8013024:	d423      	bmi.n	801306e <__lo0bits+0x56>
 8013026:	0798      	lsls	r0, r3, #30
 8013028:	bf49      	itett	mi
 801302a:	085b      	lsrmi	r3, r3, #1
 801302c:	089b      	lsrpl	r3, r3, #2
 801302e:	2001      	movmi	r0, #1
 8013030:	600b      	strmi	r3, [r1, #0]
 8013032:	bf5c      	itt	pl
 8013034:	600b      	strpl	r3, [r1, #0]
 8013036:	2002      	movpl	r0, #2
 8013038:	4770      	bx	lr
 801303a:	b298      	uxth	r0, r3
 801303c:	b9a8      	cbnz	r0, 801306a <__lo0bits+0x52>
 801303e:	0c1b      	lsrs	r3, r3, #16
 8013040:	2010      	movs	r0, #16
 8013042:	b2da      	uxtb	r2, r3
 8013044:	b90a      	cbnz	r2, 801304a <__lo0bits+0x32>
 8013046:	3008      	adds	r0, #8
 8013048:	0a1b      	lsrs	r3, r3, #8
 801304a:	071a      	lsls	r2, r3, #28
 801304c:	bf04      	itt	eq
 801304e:	091b      	lsreq	r3, r3, #4
 8013050:	3004      	addeq	r0, #4
 8013052:	079a      	lsls	r2, r3, #30
 8013054:	bf04      	itt	eq
 8013056:	089b      	lsreq	r3, r3, #2
 8013058:	3002      	addeq	r0, #2
 801305a:	07da      	lsls	r2, r3, #31
 801305c:	d403      	bmi.n	8013066 <__lo0bits+0x4e>
 801305e:	085b      	lsrs	r3, r3, #1
 8013060:	f100 0001 	add.w	r0, r0, #1
 8013064:	d005      	beq.n	8013072 <__lo0bits+0x5a>
 8013066:	600b      	str	r3, [r1, #0]
 8013068:	4770      	bx	lr
 801306a:	4610      	mov	r0, r2
 801306c:	e7e9      	b.n	8013042 <__lo0bits+0x2a>
 801306e:	2000      	movs	r0, #0
 8013070:	4770      	bx	lr
 8013072:	2020      	movs	r0, #32
 8013074:	4770      	bx	lr
	...

08013078 <__i2b>:
 8013078:	b510      	push	{r4, lr}
 801307a:	460c      	mov	r4, r1
 801307c:	2101      	movs	r1, #1
 801307e:	f7ff ff03 	bl	8012e88 <_Balloc>
 8013082:	4602      	mov	r2, r0
 8013084:	b928      	cbnz	r0, 8013092 <__i2b+0x1a>
 8013086:	4b05      	ldr	r3, [pc, #20]	; (801309c <__i2b+0x24>)
 8013088:	4805      	ldr	r0, [pc, #20]	; (80130a0 <__i2b+0x28>)
 801308a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801308e:	f7fe fdfd 	bl	8011c8c <__assert_func>
 8013092:	2301      	movs	r3, #1
 8013094:	6144      	str	r4, [r0, #20]
 8013096:	6103      	str	r3, [r0, #16]
 8013098:	bd10      	pop	{r4, pc}
 801309a:	bf00      	nop
 801309c:	08014e07 	.word	0x08014e07
 80130a0:	08014e78 	.word	0x08014e78

080130a4 <__multiply>:
 80130a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130a8:	4691      	mov	r9, r2
 80130aa:	690a      	ldr	r2, [r1, #16]
 80130ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80130b0:	429a      	cmp	r2, r3
 80130b2:	bfb8      	it	lt
 80130b4:	460b      	movlt	r3, r1
 80130b6:	460c      	mov	r4, r1
 80130b8:	bfbc      	itt	lt
 80130ba:	464c      	movlt	r4, r9
 80130bc:	4699      	movlt	r9, r3
 80130be:	6927      	ldr	r7, [r4, #16]
 80130c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80130c4:	68a3      	ldr	r3, [r4, #8]
 80130c6:	6861      	ldr	r1, [r4, #4]
 80130c8:	eb07 060a 	add.w	r6, r7, sl
 80130cc:	42b3      	cmp	r3, r6
 80130ce:	b085      	sub	sp, #20
 80130d0:	bfb8      	it	lt
 80130d2:	3101      	addlt	r1, #1
 80130d4:	f7ff fed8 	bl	8012e88 <_Balloc>
 80130d8:	b930      	cbnz	r0, 80130e8 <__multiply+0x44>
 80130da:	4602      	mov	r2, r0
 80130dc:	4b44      	ldr	r3, [pc, #272]	; (80131f0 <__multiply+0x14c>)
 80130de:	4845      	ldr	r0, [pc, #276]	; (80131f4 <__multiply+0x150>)
 80130e0:	f240 115d 	movw	r1, #349	; 0x15d
 80130e4:	f7fe fdd2 	bl	8011c8c <__assert_func>
 80130e8:	f100 0514 	add.w	r5, r0, #20
 80130ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80130f0:	462b      	mov	r3, r5
 80130f2:	2200      	movs	r2, #0
 80130f4:	4543      	cmp	r3, r8
 80130f6:	d321      	bcc.n	801313c <__multiply+0x98>
 80130f8:	f104 0314 	add.w	r3, r4, #20
 80130fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013100:	f109 0314 	add.w	r3, r9, #20
 8013104:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013108:	9202      	str	r2, [sp, #8]
 801310a:	1b3a      	subs	r2, r7, r4
 801310c:	3a15      	subs	r2, #21
 801310e:	f022 0203 	bic.w	r2, r2, #3
 8013112:	3204      	adds	r2, #4
 8013114:	f104 0115 	add.w	r1, r4, #21
 8013118:	428f      	cmp	r7, r1
 801311a:	bf38      	it	cc
 801311c:	2204      	movcc	r2, #4
 801311e:	9201      	str	r2, [sp, #4]
 8013120:	9a02      	ldr	r2, [sp, #8]
 8013122:	9303      	str	r3, [sp, #12]
 8013124:	429a      	cmp	r2, r3
 8013126:	d80c      	bhi.n	8013142 <__multiply+0x9e>
 8013128:	2e00      	cmp	r6, #0
 801312a:	dd03      	ble.n	8013134 <__multiply+0x90>
 801312c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013130:	2b00      	cmp	r3, #0
 8013132:	d05a      	beq.n	80131ea <__multiply+0x146>
 8013134:	6106      	str	r6, [r0, #16]
 8013136:	b005      	add	sp, #20
 8013138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801313c:	f843 2b04 	str.w	r2, [r3], #4
 8013140:	e7d8      	b.n	80130f4 <__multiply+0x50>
 8013142:	f8b3 a000 	ldrh.w	sl, [r3]
 8013146:	f1ba 0f00 	cmp.w	sl, #0
 801314a:	d024      	beq.n	8013196 <__multiply+0xf2>
 801314c:	f104 0e14 	add.w	lr, r4, #20
 8013150:	46a9      	mov	r9, r5
 8013152:	f04f 0c00 	mov.w	ip, #0
 8013156:	f85e 2b04 	ldr.w	r2, [lr], #4
 801315a:	f8d9 1000 	ldr.w	r1, [r9]
 801315e:	fa1f fb82 	uxth.w	fp, r2
 8013162:	b289      	uxth	r1, r1
 8013164:	fb0a 110b 	mla	r1, sl, fp, r1
 8013168:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801316c:	f8d9 2000 	ldr.w	r2, [r9]
 8013170:	4461      	add	r1, ip
 8013172:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013176:	fb0a c20b 	mla	r2, sl, fp, ip
 801317a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801317e:	b289      	uxth	r1, r1
 8013180:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013184:	4577      	cmp	r7, lr
 8013186:	f849 1b04 	str.w	r1, [r9], #4
 801318a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801318e:	d8e2      	bhi.n	8013156 <__multiply+0xb2>
 8013190:	9a01      	ldr	r2, [sp, #4]
 8013192:	f845 c002 	str.w	ip, [r5, r2]
 8013196:	9a03      	ldr	r2, [sp, #12]
 8013198:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801319c:	3304      	adds	r3, #4
 801319e:	f1b9 0f00 	cmp.w	r9, #0
 80131a2:	d020      	beq.n	80131e6 <__multiply+0x142>
 80131a4:	6829      	ldr	r1, [r5, #0]
 80131a6:	f104 0c14 	add.w	ip, r4, #20
 80131aa:	46ae      	mov	lr, r5
 80131ac:	f04f 0a00 	mov.w	sl, #0
 80131b0:	f8bc b000 	ldrh.w	fp, [ip]
 80131b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80131b8:	fb09 220b 	mla	r2, r9, fp, r2
 80131bc:	4492      	add	sl, r2
 80131be:	b289      	uxth	r1, r1
 80131c0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80131c4:	f84e 1b04 	str.w	r1, [lr], #4
 80131c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80131cc:	f8be 1000 	ldrh.w	r1, [lr]
 80131d0:	0c12      	lsrs	r2, r2, #16
 80131d2:	fb09 1102 	mla	r1, r9, r2, r1
 80131d6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80131da:	4567      	cmp	r7, ip
 80131dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80131e0:	d8e6      	bhi.n	80131b0 <__multiply+0x10c>
 80131e2:	9a01      	ldr	r2, [sp, #4]
 80131e4:	50a9      	str	r1, [r5, r2]
 80131e6:	3504      	adds	r5, #4
 80131e8:	e79a      	b.n	8013120 <__multiply+0x7c>
 80131ea:	3e01      	subs	r6, #1
 80131ec:	e79c      	b.n	8013128 <__multiply+0x84>
 80131ee:	bf00      	nop
 80131f0:	08014e07 	.word	0x08014e07
 80131f4:	08014e78 	.word	0x08014e78

080131f8 <__pow5mult>:
 80131f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80131fc:	4615      	mov	r5, r2
 80131fe:	f012 0203 	ands.w	r2, r2, #3
 8013202:	4606      	mov	r6, r0
 8013204:	460f      	mov	r7, r1
 8013206:	d007      	beq.n	8013218 <__pow5mult+0x20>
 8013208:	4c25      	ldr	r4, [pc, #148]	; (80132a0 <__pow5mult+0xa8>)
 801320a:	3a01      	subs	r2, #1
 801320c:	2300      	movs	r3, #0
 801320e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013212:	f7ff fe9b 	bl	8012f4c <__multadd>
 8013216:	4607      	mov	r7, r0
 8013218:	10ad      	asrs	r5, r5, #2
 801321a:	d03d      	beq.n	8013298 <__pow5mult+0xa0>
 801321c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801321e:	b97c      	cbnz	r4, 8013240 <__pow5mult+0x48>
 8013220:	2010      	movs	r0, #16
 8013222:	f7fd fc8b 	bl	8010b3c <malloc>
 8013226:	4602      	mov	r2, r0
 8013228:	6270      	str	r0, [r6, #36]	; 0x24
 801322a:	b928      	cbnz	r0, 8013238 <__pow5mult+0x40>
 801322c:	4b1d      	ldr	r3, [pc, #116]	; (80132a4 <__pow5mult+0xac>)
 801322e:	481e      	ldr	r0, [pc, #120]	; (80132a8 <__pow5mult+0xb0>)
 8013230:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013234:	f7fe fd2a 	bl	8011c8c <__assert_func>
 8013238:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801323c:	6004      	str	r4, [r0, #0]
 801323e:	60c4      	str	r4, [r0, #12]
 8013240:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013244:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013248:	b94c      	cbnz	r4, 801325e <__pow5mult+0x66>
 801324a:	f240 2171 	movw	r1, #625	; 0x271
 801324e:	4630      	mov	r0, r6
 8013250:	f7ff ff12 	bl	8013078 <__i2b>
 8013254:	2300      	movs	r3, #0
 8013256:	f8c8 0008 	str.w	r0, [r8, #8]
 801325a:	4604      	mov	r4, r0
 801325c:	6003      	str	r3, [r0, #0]
 801325e:	f04f 0900 	mov.w	r9, #0
 8013262:	07eb      	lsls	r3, r5, #31
 8013264:	d50a      	bpl.n	801327c <__pow5mult+0x84>
 8013266:	4639      	mov	r1, r7
 8013268:	4622      	mov	r2, r4
 801326a:	4630      	mov	r0, r6
 801326c:	f7ff ff1a 	bl	80130a4 <__multiply>
 8013270:	4639      	mov	r1, r7
 8013272:	4680      	mov	r8, r0
 8013274:	4630      	mov	r0, r6
 8013276:	f7ff fe47 	bl	8012f08 <_Bfree>
 801327a:	4647      	mov	r7, r8
 801327c:	106d      	asrs	r5, r5, #1
 801327e:	d00b      	beq.n	8013298 <__pow5mult+0xa0>
 8013280:	6820      	ldr	r0, [r4, #0]
 8013282:	b938      	cbnz	r0, 8013294 <__pow5mult+0x9c>
 8013284:	4622      	mov	r2, r4
 8013286:	4621      	mov	r1, r4
 8013288:	4630      	mov	r0, r6
 801328a:	f7ff ff0b 	bl	80130a4 <__multiply>
 801328e:	6020      	str	r0, [r4, #0]
 8013290:	f8c0 9000 	str.w	r9, [r0]
 8013294:	4604      	mov	r4, r0
 8013296:	e7e4      	b.n	8013262 <__pow5mult+0x6a>
 8013298:	4638      	mov	r0, r7
 801329a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801329e:	bf00      	nop
 80132a0:	08014fc8 	.word	0x08014fc8
 80132a4:	08014bee 	.word	0x08014bee
 80132a8:	08014e78 	.word	0x08014e78

080132ac <__lshift>:
 80132ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132b0:	460c      	mov	r4, r1
 80132b2:	6849      	ldr	r1, [r1, #4]
 80132b4:	6923      	ldr	r3, [r4, #16]
 80132b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80132ba:	68a3      	ldr	r3, [r4, #8]
 80132bc:	4607      	mov	r7, r0
 80132be:	4691      	mov	r9, r2
 80132c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80132c4:	f108 0601 	add.w	r6, r8, #1
 80132c8:	42b3      	cmp	r3, r6
 80132ca:	db0b      	blt.n	80132e4 <__lshift+0x38>
 80132cc:	4638      	mov	r0, r7
 80132ce:	f7ff fddb 	bl	8012e88 <_Balloc>
 80132d2:	4605      	mov	r5, r0
 80132d4:	b948      	cbnz	r0, 80132ea <__lshift+0x3e>
 80132d6:	4602      	mov	r2, r0
 80132d8:	4b2a      	ldr	r3, [pc, #168]	; (8013384 <__lshift+0xd8>)
 80132da:	482b      	ldr	r0, [pc, #172]	; (8013388 <__lshift+0xdc>)
 80132dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80132e0:	f7fe fcd4 	bl	8011c8c <__assert_func>
 80132e4:	3101      	adds	r1, #1
 80132e6:	005b      	lsls	r3, r3, #1
 80132e8:	e7ee      	b.n	80132c8 <__lshift+0x1c>
 80132ea:	2300      	movs	r3, #0
 80132ec:	f100 0114 	add.w	r1, r0, #20
 80132f0:	f100 0210 	add.w	r2, r0, #16
 80132f4:	4618      	mov	r0, r3
 80132f6:	4553      	cmp	r3, sl
 80132f8:	db37      	blt.n	801336a <__lshift+0xbe>
 80132fa:	6920      	ldr	r0, [r4, #16]
 80132fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013300:	f104 0314 	add.w	r3, r4, #20
 8013304:	f019 091f 	ands.w	r9, r9, #31
 8013308:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801330c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013310:	d02f      	beq.n	8013372 <__lshift+0xc6>
 8013312:	f1c9 0e20 	rsb	lr, r9, #32
 8013316:	468a      	mov	sl, r1
 8013318:	f04f 0c00 	mov.w	ip, #0
 801331c:	681a      	ldr	r2, [r3, #0]
 801331e:	fa02 f209 	lsl.w	r2, r2, r9
 8013322:	ea42 020c 	orr.w	r2, r2, ip
 8013326:	f84a 2b04 	str.w	r2, [sl], #4
 801332a:	f853 2b04 	ldr.w	r2, [r3], #4
 801332e:	4298      	cmp	r0, r3
 8013330:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013334:	d8f2      	bhi.n	801331c <__lshift+0x70>
 8013336:	1b03      	subs	r3, r0, r4
 8013338:	3b15      	subs	r3, #21
 801333a:	f023 0303 	bic.w	r3, r3, #3
 801333e:	3304      	adds	r3, #4
 8013340:	f104 0215 	add.w	r2, r4, #21
 8013344:	4290      	cmp	r0, r2
 8013346:	bf38      	it	cc
 8013348:	2304      	movcc	r3, #4
 801334a:	f841 c003 	str.w	ip, [r1, r3]
 801334e:	f1bc 0f00 	cmp.w	ip, #0
 8013352:	d001      	beq.n	8013358 <__lshift+0xac>
 8013354:	f108 0602 	add.w	r6, r8, #2
 8013358:	3e01      	subs	r6, #1
 801335a:	4638      	mov	r0, r7
 801335c:	612e      	str	r6, [r5, #16]
 801335e:	4621      	mov	r1, r4
 8013360:	f7ff fdd2 	bl	8012f08 <_Bfree>
 8013364:	4628      	mov	r0, r5
 8013366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801336a:	f842 0f04 	str.w	r0, [r2, #4]!
 801336e:	3301      	adds	r3, #1
 8013370:	e7c1      	b.n	80132f6 <__lshift+0x4a>
 8013372:	3904      	subs	r1, #4
 8013374:	f853 2b04 	ldr.w	r2, [r3], #4
 8013378:	f841 2f04 	str.w	r2, [r1, #4]!
 801337c:	4298      	cmp	r0, r3
 801337e:	d8f9      	bhi.n	8013374 <__lshift+0xc8>
 8013380:	e7ea      	b.n	8013358 <__lshift+0xac>
 8013382:	bf00      	nop
 8013384:	08014e07 	.word	0x08014e07
 8013388:	08014e78 	.word	0x08014e78

0801338c <__mcmp>:
 801338c:	b530      	push	{r4, r5, lr}
 801338e:	6902      	ldr	r2, [r0, #16]
 8013390:	690c      	ldr	r4, [r1, #16]
 8013392:	1b12      	subs	r2, r2, r4
 8013394:	d10e      	bne.n	80133b4 <__mcmp+0x28>
 8013396:	f100 0314 	add.w	r3, r0, #20
 801339a:	3114      	adds	r1, #20
 801339c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80133a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80133a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80133a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80133ac:	42a5      	cmp	r5, r4
 80133ae:	d003      	beq.n	80133b8 <__mcmp+0x2c>
 80133b0:	d305      	bcc.n	80133be <__mcmp+0x32>
 80133b2:	2201      	movs	r2, #1
 80133b4:	4610      	mov	r0, r2
 80133b6:	bd30      	pop	{r4, r5, pc}
 80133b8:	4283      	cmp	r3, r0
 80133ba:	d3f3      	bcc.n	80133a4 <__mcmp+0x18>
 80133bc:	e7fa      	b.n	80133b4 <__mcmp+0x28>
 80133be:	f04f 32ff 	mov.w	r2, #4294967295
 80133c2:	e7f7      	b.n	80133b4 <__mcmp+0x28>

080133c4 <__mdiff>:
 80133c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133c8:	460c      	mov	r4, r1
 80133ca:	4606      	mov	r6, r0
 80133cc:	4611      	mov	r1, r2
 80133ce:	4620      	mov	r0, r4
 80133d0:	4690      	mov	r8, r2
 80133d2:	f7ff ffdb 	bl	801338c <__mcmp>
 80133d6:	1e05      	subs	r5, r0, #0
 80133d8:	d110      	bne.n	80133fc <__mdiff+0x38>
 80133da:	4629      	mov	r1, r5
 80133dc:	4630      	mov	r0, r6
 80133de:	f7ff fd53 	bl	8012e88 <_Balloc>
 80133e2:	b930      	cbnz	r0, 80133f2 <__mdiff+0x2e>
 80133e4:	4b3a      	ldr	r3, [pc, #232]	; (80134d0 <__mdiff+0x10c>)
 80133e6:	4602      	mov	r2, r0
 80133e8:	f240 2132 	movw	r1, #562	; 0x232
 80133ec:	4839      	ldr	r0, [pc, #228]	; (80134d4 <__mdiff+0x110>)
 80133ee:	f7fe fc4d 	bl	8011c8c <__assert_func>
 80133f2:	2301      	movs	r3, #1
 80133f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80133f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133fc:	bfa4      	itt	ge
 80133fe:	4643      	movge	r3, r8
 8013400:	46a0      	movge	r8, r4
 8013402:	4630      	mov	r0, r6
 8013404:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013408:	bfa6      	itte	ge
 801340a:	461c      	movge	r4, r3
 801340c:	2500      	movge	r5, #0
 801340e:	2501      	movlt	r5, #1
 8013410:	f7ff fd3a 	bl	8012e88 <_Balloc>
 8013414:	b920      	cbnz	r0, 8013420 <__mdiff+0x5c>
 8013416:	4b2e      	ldr	r3, [pc, #184]	; (80134d0 <__mdiff+0x10c>)
 8013418:	4602      	mov	r2, r0
 801341a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801341e:	e7e5      	b.n	80133ec <__mdiff+0x28>
 8013420:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013424:	6926      	ldr	r6, [r4, #16]
 8013426:	60c5      	str	r5, [r0, #12]
 8013428:	f104 0914 	add.w	r9, r4, #20
 801342c:	f108 0514 	add.w	r5, r8, #20
 8013430:	f100 0e14 	add.w	lr, r0, #20
 8013434:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013438:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801343c:	f108 0210 	add.w	r2, r8, #16
 8013440:	46f2      	mov	sl, lr
 8013442:	2100      	movs	r1, #0
 8013444:	f859 3b04 	ldr.w	r3, [r9], #4
 8013448:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801344c:	fa1f f883 	uxth.w	r8, r3
 8013450:	fa11 f18b 	uxtah	r1, r1, fp
 8013454:	0c1b      	lsrs	r3, r3, #16
 8013456:	eba1 0808 	sub.w	r8, r1, r8
 801345a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801345e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013462:	fa1f f888 	uxth.w	r8, r8
 8013466:	1419      	asrs	r1, r3, #16
 8013468:	454e      	cmp	r6, r9
 801346a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801346e:	f84a 3b04 	str.w	r3, [sl], #4
 8013472:	d8e7      	bhi.n	8013444 <__mdiff+0x80>
 8013474:	1b33      	subs	r3, r6, r4
 8013476:	3b15      	subs	r3, #21
 8013478:	f023 0303 	bic.w	r3, r3, #3
 801347c:	3304      	adds	r3, #4
 801347e:	3415      	adds	r4, #21
 8013480:	42a6      	cmp	r6, r4
 8013482:	bf38      	it	cc
 8013484:	2304      	movcc	r3, #4
 8013486:	441d      	add	r5, r3
 8013488:	4473      	add	r3, lr
 801348a:	469e      	mov	lr, r3
 801348c:	462e      	mov	r6, r5
 801348e:	4566      	cmp	r6, ip
 8013490:	d30e      	bcc.n	80134b0 <__mdiff+0xec>
 8013492:	f10c 0203 	add.w	r2, ip, #3
 8013496:	1b52      	subs	r2, r2, r5
 8013498:	f022 0203 	bic.w	r2, r2, #3
 801349c:	3d03      	subs	r5, #3
 801349e:	45ac      	cmp	ip, r5
 80134a0:	bf38      	it	cc
 80134a2:	2200      	movcc	r2, #0
 80134a4:	441a      	add	r2, r3
 80134a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80134aa:	b17b      	cbz	r3, 80134cc <__mdiff+0x108>
 80134ac:	6107      	str	r7, [r0, #16]
 80134ae:	e7a3      	b.n	80133f8 <__mdiff+0x34>
 80134b0:	f856 8b04 	ldr.w	r8, [r6], #4
 80134b4:	fa11 f288 	uxtah	r2, r1, r8
 80134b8:	1414      	asrs	r4, r2, #16
 80134ba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80134be:	b292      	uxth	r2, r2
 80134c0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80134c4:	f84e 2b04 	str.w	r2, [lr], #4
 80134c8:	1421      	asrs	r1, r4, #16
 80134ca:	e7e0      	b.n	801348e <__mdiff+0xca>
 80134cc:	3f01      	subs	r7, #1
 80134ce:	e7ea      	b.n	80134a6 <__mdiff+0xe2>
 80134d0:	08014e07 	.word	0x08014e07
 80134d4:	08014e78 	.word	0x08014e78

080134d8 <__d2b>:
 80134d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80134dc:	4689      	mov	r9, r1
 80134de:	2101      	movs	r1, #1
 80134e0:	ec57 6b10 	vmov	r6, r7, d0
 80134e4:	4690      	mov	r8, r2
 80134e6:	f7ff fccf 	bl	8012e88 <_Balloc>
 80134ea:	4604      	mov	r4, r0
 80134ec:	b930      	cbnz	r0, 80134fc <__d2b+0x24>
 80134ee:	4602      	mov	r2, r0
 80134f0:	4b25      	ldr	r3, [pc, #148]	; (8013588 <__d2b+0xb0>)
 80134f2:	4826      	ldr	r0, [pc, #152]	; (801358c <__d2b+0xb4>)
 80134f4:	f240 310a 	movw	r1, #778	; 0x30a
 80134f8:	f7fe fbc8 	bl	8011c8c <__assert_func>
 80134fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013500:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013504:	bb35      	cbnz	r5, 8013554 <__d2b+0x7c>
 8013506:	2e00      	cmp	r6, #0
 8013508:	9301      	str	r3, [sp, #4]
 801350a:	d028      	beq.n	801355e <__d2b+0x86>
 801350c:	4668      	mov	r0, sp
 801350e:	9600      	str	r6, [sp, #0]
 8013510:	f7ff fd82 	bl	8013018 <__lo0bits>
 8013514:	9900      	ldr	r1, [sp, #0]
 8013516:	b300      	cbz	r0, 801355a <__d2b+0x82>
 8013518:	9a01      	ldr	r2, [sp, #4]
 801351a:	f1c0 0320 	rsb	r3, r0, #32
 801351e:	fa02 f303 	lsl.w	r3, r2, r3
 8013522:	430b      	orrs	r3, r1
 8013524:	40c2      	lsrs	r2, r0
 8013526:	6163      	str	r3, [r4, #20]
 8013528:	9201      	str	r2, [sp, #4]
 801352a:	9b01      	ldr	r3, [sp, #4]
 801352c:	61a3      	str	r3, [r4, #24]
 801352e:	2b00      	cmp	r3, #0
 8013530:	bf14      	ite	ne
 8013532:	2202      	movne	r2, #2
 8013534:	2201      	moveq	r2, #1
 8013536:	6122      	str	r2, [r4, #16]
 8013538:	b1d5      	cbz	r5, 8013570 <__d2b+0x98>
 801353a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801353e:	4405      	add	r5, r0
 8013540:	f8c9 5000 	str.w	r5, [r9]
 8013544:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013548:	f8c8 0000 	str.w	r0, [r8]
 801354c:	4620      	mov	r0, r4
 801354e:	b003      	add	sp, #12
 8013550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013558:	e7d5      	b.n	8013506 <__d2b+0x2e>
 801355a:	6161      	str	r1, [r4, #20]
 801355c:	e7e5      	b.n	801352a <__d2b+0x52>
 801355e:	a801      	add	r0, sp, #4
 8013560:	f7ff fd5a 	bl	8013018 <__lo0bits>
 8013564:	9b01      	ldr	r3, [sp, #4]
 8013566:	6163      	str	r3, [r4, #20]
 8013568:	2201      	movs	r2, #1
 801356a:	6122      	str	r2, [r4, #16]
 801356c:	3020      	adds	r0, #32
 801356e:	e7e3      	b.n	8013538 <__d2b+0x60>
 8013570:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013574:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013578:	f8c9 0000 	str.w	r0, [r9]
 801357c:	6918      	ldr	r0, [r3, #16]
 801357e:	f7ff fd2b 	bl	8012fd8 <__hi0bits>
 8013582:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013586:	e7df      	b.n	8013548 <__d2b+0x70>
 8013588:	08014e07 	.word	0x08014e07
 801358c:	08014e78 	.word	0x08014e78

08013590 <_calloc_r>:
 8013590:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013592:	fba1 2402 	umull	r2, r4, r1, r2
 8013596:	b94c      	cbnz	r4, 80135ac <_calloc_r+0x1c>
 8013598:	4611      	mov	r1, r2
 801359a:	9201      	str	r2, [sp, #4]
 801359c:	f7fd fb60 	bl	8010c60 <_malloc_r>
 80135a0:	9a01      	ldr	r2, [sp, #4]
 80135a2:	4605      	mov	r5, r0
 80135a4:	b930      	cbnz	r0, 80135b4 <_calloc_r+0x24>
 80135a6:	4628      	mov	r0, r5
 80135a8:	b003      	add	sp, #12
 80135aa:	bd30      	pop	{r4, r5, pc}
 80135ac:	220c      	movs	r2, #12
 80135ae:	6002      	str	r2, [r0, #0]
 80135b0:	2500      	movs	r5, #0
 80135b2:	e7f8      	b.n	80135a6 <_calloc_r+0x16>
 80135b4:	4621      	mov	r1, r4
 80135b6:	f7fd fadf 	bl	8010b78 <memset>
 80135ba:	e7f4      	b.n	80135a6 <_calloc_r+0x16>

080135bc <__ssputs_r>:
 80135bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135c0:	688e      	ldr	r6, [r1, #8]
 80135c2:	429e      	cmp	r6, r3
 80135c4:	4682      	mov	sl, r0
 80135c6:	460c      	mov	r4, r1
 80135c8:	4690      	mov	r8, r2
 80135ca:	461f      	mov	r7, r3
 80135cc:	d838      	bhi.n	8013640 <__ssputs_r+0x84>
 80135ce:	898a      	ldrh	r2, [r1, #12]
 80135d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80135d4:	d032      	beq.n	801363c <__ssputs_r+0x80>
 80135d6:	6825      	ldr	r5, [r4, #0]
 80135d8:	6909      	ldr	r1, [r1, #16]
 80135da:	eba5 0901 	sub.w	r9, r5, r1
 80135de:	6965      	ldr	r5, [r4, #20]
 80135e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80135e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80135e8:	3301      	adds	r3, #1
 80135ea:	444b      	add	r3, r9
 80135ec:	106d      	asrs	r5, r5, #1
 80135ee:	429d      	cmp	r5, r3
 80135f0:	bf38      	it	cc
 80135f2:	461d      	movcc	r5, r3
 80135f4:	0553      	lsls	r3, r2, #21
 80135f6:	d531      	bpl.n	801365c <__ssputs_r+0xa0>
 80135f8:	4629      	mov	r1, r5
 80135fa:	f7fd fb31 	bl	8010c60 <_malloc_r>
 80135fe:	4606      	mov	r6, r0
 8013600:	b950      	cbnz	r0, 8013618 <__ssputs_r+0x5c>
 8013602:	230c      	movs	r3, #12
 8013604:	f8ca 3000 	str.w	r3, [sl]
 8013608:	89a3      	ldrh	r3, [r4, #12]
 801360a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801360e:	81a3      	strh	r3, [r4, #12]
 8013610:	f04f 30ff 	mov.w	r0, #4294967295
 8013614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013618:	6921      	ldr	r1, [r4, #16]
 801361a:	464a      	mov	r2, r9
 801361c:	f7fd fa9e 	bl	8010b5c <memcpy>
 8013620:	89a3      	ldrh	r3, [r4, #12]
 8013622:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801362a:	81a3      	strh	r3, [r4, #12]
 801362c:	6126      	str	r6, [r4, #16]
 801362e:	6165      	str	r5, [r4, #20]
 8013630:	444e      	add	r6, r9
 8013632:	eba5 0509 	sub.w	r5, r5, r9
 8013636:	6026      	str	r6, [r4, #0]
 8013638:	60a5      	str	r5, [r4, #8]
 801363a:	463e      	mov	r6, r7
 801363c:	42be      	cmp	r6, r7
 801363e:	d900      	bls.n	8013642 <__ssputs_r+0x86>
 8013640:	463e      	mov	r6, r7
 8013642:	6820      	ldr	r0, [r4, #0]
 8013644:	4632      	mov	r2, r6
 8013646:	4641      	mov	r1, r8
 8013648:	f000 febe 	bl	80143c8 <memmove>
 801364c:	68a3      	ldr	r3, [r4, #8]
 801364e:	1b9b      	subs	r3, r3, r6
 8013650:	60a3      	str	r3, [r4, #8]
 8013652:	6823      	ldr	r3, [r4, #0]
 8013654:	4433      	add	r3, r6
 8013656:	6023      	str	r3, [r4, #0]
 8013658:	2000      	movs	r0, #0
 801365a:	e7db      	b.n	8013614 <__ssputs_r+0x58>
 801365c:	462a      	mov	r2, r5
 801365e:	f000 fecd 	bl	80143fc <_realloc_r>
 8013662:	4606      	mov	r6, r0
 8013664:	2800      	cmp	r0, #0
 8013666:	d1e1      	bne.n	801362c <__ssputs_r+0x70>
 8013668:	6921      	ldr	r1, [r4, #16]
 801366a:	4650      	mov	r0, sl
 801366c:	f7fd fa8c 	bl	8010b88 <_free_r>
 8013670:	e7c7      	b.n	8013602 <__ssputs_r+0x46>
	...

08013674 <_svfiprintf_r>:
 8013674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013678:	4698      	mov	r8, r3
 801367a:	898b      	ldrh	r3, [r1, #12]
 801367c:	061b      	lsls	r3, r3, #24
 801367e:	b09d      	sub	sp, #116	; 0x74
 8013680:	4607      	mov	r7, r0
 8013682:	460d      	mov	r5, r1
 8013684:	4614      	mov	r4, r2
 8013686:	d50e      	bpl.n	80136a6 <_svfiprintf_r+0x32>
 8013688:	690b      	ldr	r3, [r1, #16]
 801368a:	b963      	cbnz	r3, 80136a6 <_svfiprintf_r+0x32>
 801368c:	2140      	movs	r1, #64	; 0x40
 801368e:	f7fd fae7 	bl	8010c60 <_malloc_r>
 8013692:	6028      	str	r0, [r5, #0]
 8013694:	6128      	str	r0, [r5, #16]
 8013696:	b920      	cbnz	r0, 80136a2 <_svfiprintf_r+0x2e>
 8013698:	230c      	movs	r3, #12
 801369a:	603b      	str	r3, [r7, #0]
 801369c:	f04f 30ff 	mov.w	r0, #4294967295
 80136a0:	e0d1      	b.n	8013846 <_svfiprintf_r+0x1d2>
 80136a2:	2340      	movs	r3, #64	; 0x40
 80136a4:	616b      	str	r3, [r5, #20]
 80136a6:	2300      	movs	r3, #0
 80136a8:	9309      	str	r3, [sp, #36]	; 0x24
 80136aa:	2320      	movs	r3, #32
 80136ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80136b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80136b4:	2330      	movs	r3, #48	; 0x30
 80136b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013860 <_svfiprintf_r+0x1ec>
 80136ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80136be:	f04f 0901 	mov.w	r9, #1
 80136c2:	4623      	mov	r3, r4
 80136c4:	469a      	mov	sl, r3
 80136c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80136ca:	b10a      	cbz	r2, 80136d0 <_svfiprintf_r+0x5c>
 80136cc:	2a25      	cmp	r2, #37	; 0x25
 80136ce:	d1f9      	bne.n	80136c4 <_svfiprintf_r+0x50>
 80136d0:	ebba 0b04 	subs.w	fp, sl, r4
 80136d4:	d00b      	beq.n	80136ee <_svfiprintf_r+0x7a>
 80136d6:	465b      	mov	r3, fp
 80136d8:	4622      	mov	r2, r4
 80136da:	4629      	mov	r1, r5
 80136dc:	4638      	mov	r0, r7
 80136de:	f7ff ff6d 	bl	80135bc <__ssputs_r>
 80136e2:	3001      	adds	r0, #1
 80136e4:	f000 80aa 	beq.w	801383c <_svfiprintf_r+0x1c8>
 80136e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80136ea:	445a      	add	r2, fp
 80136ec:	9209      	str	r2, [sp, #36]	; 0x24
 80136ee:	f89a 3000 	ldrb.w	r3, [sl]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	f000 80a2 	beq.w	801383c <_svfiprintf_r+0x1c8>
 80136f8:	2300      	movs	r3, #0
 80136fa:	f04f 32ff 	mov.w	r2, #4294967295
 80136fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013702:	f10a 0a01 	add.w	sl, sl, #1
 8013706:	9304      	str	r3, [sp, #16]
 8013708:	9307      	str	r3, [sp, #28]
 801370a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801370e:	931a      	str	r3, [sp, #104]	; 0x68
 8013710:	4654      	mov	r4, sl
 8013712:	2205      	movs	r2, #5
 8013714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013718:	4851      	ldr	r0, [pc, #324]	; (8013860 <_svfiprintf_r+0x1ec>)
 801371a:	f7ec fd71 	bl	8000200 <memchr>
 801371e:	9a04      	ldr	r2, [sp, #16]
 8013720:	b9d8      	cbnz	r0, 801375a <_svfiprintf_r+0xe6>
 8013722:	06d0      	lsls	r0, r2, #27
 8013724:	bf44      	itt	mi
 8013726:	2320      	movmi	r3, #32
 8013728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801372c:	0711      	lsls	r1, r2, #28
 801372e:	bf44      	itt	mi
 8013730:	232b      	movmi	r3, #43	; 0x2b
 8013732:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013736:	f89a 3000 	ldrb.w	r3, [sl]
 801373a:	2b2a      	cmp	r3, #42	; 0x2a
 801373c:	d015      	beq.n	801376a <_svfiprintf_r+0xf6>
 801373e:	9a07      	ldr	r2, [sp, #28]
 8013740:	4654      	mov	r4, sl
 8013742:	2000      	movs	r0, #0
 8013744:	f04f 0c0a 	mov.w	ip, #10
 8013748:	4621      	mov	r1, r4
 801374a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801374e:	3b30      	subs	r3, #48	; 0x30
 8013750:	2b09      	cmp	r3, #9
 8013752:	d94e      	bls.n	80137f2 <_svfiprintf_r+0x17e>
 8013754:	b1b0      	cbz	r0, 8013784 <_svfiprintf_r+0x110>
 8013756:	9207      	str	r2, [sp, #28]
 8013758:	e014      	b.n	8013784 <_svfiprintf_r+0x110>
 801375a:	eba0 0308 	sub.w	r3, r0, r8
 801375e:	fa09 f303 	lsl.w	r3, r9, r3
 8013762:	4313      	orrs	r3, r2
 8013764:	9304      	str	r3, [sp, #16]
 8013766:	46a2      	mov	sl, r4
 8013768:	e7d2      	b.n	8013710 <_svfiprintf_r+0x9c>
 801376a:	9b03      	ldr	r3, [sp, #12]
 801376c:	1d19      	adds	r1, r3, #4
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	9103      	str	r1, [sp, #12]
 8013772:	2b00      	cmp	r3, #0
 8013774:	bfbb      	ittet	lt
 8013776:	425b      	neglt	r3, r3
 8013778:	f042 0202 	orrlt.w	r2, r2, #2
 801377c:	9307      	strge	r3, [sp, #28]
 801377e:	9307      	strlt	r3, [sp, #28]
 8013780:	bfb8      	it	lt
 8013782:	9204      	strlt	r2, [sp, #16]
 8013784:	7823      	ldrb	r3, [r4, #0]
 8013786:	2b2e      	cmp	r3, #46	; 0x2e
 8013788:	d10c      	bne.n	80137a4 <_svfiprintf_r+0x130>
 801378a:	7863      	ldrb	r3, [r4, #1]
 801378c:	2b2a      	cmp	r3, #42	; 0x2a
 801378e:	d135      	bne.n	80137fc <_svfiprintf_r+0x188>
 8013790:	9b03      	ldr	r3, [sp, #12]
 8013792:	1d1a      	adds	r2, r3, #4
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	9203      	str	r2, [sp, #12]
 8013798:	2b00      	cmp	r3, #0
 801379a:	bfb8      	it	lt
 801379c:	f04f 33ff 	movlt.w	r3, #4294967295
 80137a0:	3402      	adds	r4, #2
 80137a2:	9305      	str	r3, [sp, #20]
 80137a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013870 <_svfiprintf_r+0x1fc>
 80137a8:	7821      	ldrb	r1, [r4, #0]
 80137aa:	2203      	movs	r2, #3
 80137ac:	4650      	mov	r0, sl
 80137ae:	f7ec fd27 	bl	8000200 <memchr>
 80137b2:	b140      	cbz	r0, 80137c6 <_svfiprintf_r+0x152>
 80137b4:	2340      	movs	r3, #64	; 0x40
 80137b6:	eba0 000a 	sub.w	r0, r0, sl
 80137ba:	fa03 f000 	lsl.w	r0, r3, r0
 80137be:	9b04      	ldr	r3, [sp, #16]
 80137c0:	4303      	orrs	r3, r0
 80137c2:	3401      	adds	r4, #1
 80137c4:	9304      	str	r3, [sp, #16]
 80137c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137ca:	4826      	ldr	r0, [pc, #152]	; (8013864 <_svfiprintf_r+0x1f0>)
 80137cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80137d0:	2206      	movs	r2, #6
 80137d2:	f7ec fd15 	bl	8000200 <memchr>
 80137d6:	2800      	cmp	r0, #0
 80137d8:	d038      	beq.n	801384c <_svfiprintf_r+0x1d8>
 80137da:	4b23      	ldr	r3, [pc, #140]	; (8013868 <_svfiprintf_r+0x1f4>)
 80137dc:	bb1b      	cbnz	r3, 8013826 <_svfiprintf_r+0x1b2>
 80137de:	9b03      	ldr	r3, [sp, #12]
 80137e0:	3307      	adds	r3, #7
 80137e2:	f023 0307 	bic.w	r3, r3, #7
 80137e6:	3308      	adds	r3, #8
 80137e8:	9303      	str	r3, [sp, #12]
 80137ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137ec:	4433      	add	r3, r6
 80137ee:	9309      	str	r3, [sp, #36]	; 0x24
 80137f0:	e767      	b.n	80136c2 <_svfiprintf_r+0x4e>
 80137f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80137f6:	460c      	mov	r4, r1
 80137f8:	2001      	movs	r0, #1
 80137fa:	e7a5      	b.n	8013748 <_svfiprintf_r+0xd4>
 80137fc:	2300      	movs	r3, #0
 80137fe:	3401      	adds	r4, #1
 8013800:	9305      	str	r3, [sp, #20]
 8013802:	4619      	mov	r1, r3
 8013804:	f04f 0c0a 	mov.w	ip, #10
 8013808:	4620      	mov	r0, r4
 801380a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801380e:	3a30      	subs	r2, #48	; 0x30
 8013810:	2a09      	cmp	r2, #9
 8013812:	d903      	bls.n	801381c <_svfiprintf_r+0x1a8>
 8013814:	2b00      	cmp	r3, #0
 8013816:	d0c5      	beq.n	80137a4 <_svfiprintf_r+0x130>
 8013818:	9105      	str	r1, [sp, #20]
 801381a:	e7c3      	b.n	80137a4 <_svfiprintf_r+0x130>
 801381c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013820:	4604      	mov	r4, r0
 8013822:	2301      	movs	r3, #1
 8013824:	e7f0      	b.n	8013808 <_svfiprintf_r+0x194>
 8013826:	ab03      	add	r3, sp, #12
 8013828:	9300      	str	r3, [sp, #0]
 801382a:	462a      	mov	r2, r5
 801382c:	4b0f      	ldr	r3, [pc, #60]	; (801386c <_svfiprintf_r+0x1f8>)
 801382e:	a904      	add	r1, sp, #16
 8013830:	4638      	mov	r0, r7
 8013832:	f7fd fb29 	bl	8010e88 <_printf_float>
 8013836:	1c42      	adds	r2, r0, #1
 8013838:	4606      	mov	r6, r0
 801383a:	d1d6      	bne.n	80137ea <_svfiprintf_r+0x176>
 801383c:	89ab      	ldrh	r3, [r5, #12]
 801383e:	065b      	lsls	r3, r3, #25
 8013840:	f53f af2c 	bmi.w	801369c <_svfiprintf_r+0x28>
 8013844:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013846:	b01d      	add	sp, #116	; 0x74
 8013848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801384c:	ab03      	add	r3, sp, #12
 801384e:	9300      	str	r3, [sp, #0]
 8013850:	462a      	mov	r2, r5
 8013852:	4b06      	ldr	r3, [pc, #24]	; (801386c <_svfiprintf_r+0x1f8>)
 8013854:	a904      	add	r1, sp, #16
 8013856:	4638      	mov	r0, r7
 8013858:	f7fd fdba 	bl	80113d0 <_printf_i>
 801385c:	e7eb      	b.n	8013836 <_svfiprintf_r+0x1c2>
 801385e:	bf00      	nop
 8013860:	08014fd4 	.word	0x08014fd4
 8013864:	08014fde 	.word	0x08014fde
 8013868:	08010e89 	.word	0x08010e89
 801386c:	080135bd 	.word	0x080135bd
 8013870:	08014fda 	.word	0x08014fda

08013874 <_sungetc_r>:
 8013874:	b538      	push	{r3, r4, r5, lr}
 8013876:	1c4b      	adds	r3, r1, #1
 8013878:	4614      	mov	r4, r2
 801387a:	d103      	bne.n	8013884 <_sungetc_r+0x10>
 801387c:	f04f 35ff 	mov.w	r5, #4294967295
 8013880:	4628      	mov	r0, r5
 8013882:	bd38      	pop	{r3, r4, r5, pc}
 8013884:	8993      	ldrh	r3, [r2, #12]
 8013886:	f023 0320 	bic.w	r3, r3, #32
 801388a:	8193      	strh	r3, [r2, #12]
 801388c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801388e:	6852      	ldr	r2, [r2, #4]
 8013890:	b2cd      	uxtb	r5, r1
 8013892:	b18b      	cbz	r3, 80138b8 <_sungetc_r+0x44>
 8013894:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013896:	4293      	cmp	r3, r2
 8013898:	dd08      	ble.n	80138ac <_sungetc_r+0x38>
 801389a:	6823      	ldr	r3, [r4, #0]
 801389c:	1e5a      	subs	r2, r3, #1
 801389e:	6022      	str	r2, [r4, #0]
 80138a0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80138a4:	6863      	ldr	r3, [r4, #4]
 80138a6:	3301      	adds	r3, #1
 80138a8:	6063      	str	r3, [r4, #4]
 80138aa:	e7e9      	b.n	8013880 <_sungetc_r+0xc>
 80138ac:	4621      	mov	r1, r4
 80138ae:	f000 fd1d 	bl	80142ec <__submore>
 80138b2:	2800      	cmp	r0, #0
 80138b4:	d0f1      	beq.n	801389a <_sungetc_r+0x26>
 80138b6:	e7e1      	b.n	801387c <_sungetc_r+0x8>
 80138b8:	6921      	ldr	r1, [r4, #16]
 80138ba:	6823      	ldr	r3, [r4, #0]
 80138bc:	b151      	cbz	r1, 80138d4 <_sungetc_r+0x60>
 80138be:	4299      	cmp	r1, r3
 80138c0:	d208      	bcs.n	80138d4 <_sungetc_r+0x60>
 80138c2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80138c6:	42a9      	cmp	r1, r5
 80138c8:	d104      	bne.n	80138d4 <_sungetc_r+0x60>
 80138ca:	3b01      	subs	r3, #1
 80138cc:	3201      	adds	r2, #1
 80138ce:	6023      	str	r3, [r4, #0]
 80138d0:	6062      	str	r2, [r4, #4]
 80138d2:	e7d5      	b.n	8013880 <_sungetc_r+0xc>
 80138d4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80138d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80138dc:	6363      	str	r3, [r4, #52]	; 0x34
 80138de:	2303      	movs	r3, #3
 80138e0:	63a3      	str	r3, [r4, #56]	; 0x38
 80138e2:	4623      	mov	r3, r4
 80138e4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80138e8:	6023      	str	r3, [r4, #0]
 80138ea:	2301      	movs	r3, #1
 80138ec:	e7dc      	b.n	80138a8 <_sungetc_r+0x34>

080138ee <__ssrefill_r>:
 80138ee:	b510      	push	{r4, lr}
 80138f0:	460c      	mov	r4, r1
 80138f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80138f4:	b169      	cbz	r1, 8013912 <__ssrefill_r+0x24>
 80138f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80138fa:	4299      	cmp	r1, r3
 80138fc:	d001      	beq.n	8013902 <__ssrefill_r+0x14>
 80138fe:	f7fd f943 	bl	8010b88 <_free_r>
 8013902:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013904:	6063      	str	r3, [r4, #4]
 8013906:	2000      	movs	r0, #0
 8013908:	6360      	str	r0, [r4, #52]	; 0x34
 801390a:	b113      	cbz	r3, 8013912 <__ssrefill_r+0x24>
 801390c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801390e:	6023      	str	r3, [r4, #0]
 8013910:	bd10      	pop	{r4, pc}
 8013912:	6923      	ldr	r3, [r4, #16]
 8013914:	6023      	str	r3, [r4, #0]
 8013916:	2300      	movs	r3, #0
 8013918:	6063      	str	r3, [r4, #4]
 801391a:	89a3      	ldrh	r3, [r4, #12]
 801391c:	f043 0320 	orr.w	r3, r3, #32
 8013920:	81a3      	strh	r3, [r4, #12]
 8013922:	f04f 30ff 	mov.w	r0, #4294967295
 8013926:	e7f3      	b.n	8013910 <__ssrefill_r+0x22>

08013928 <__ssvfiscanf_r>:
 8013928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801392c:	460c      	mov	r4, r1
 801392e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8013932:	2100      	movs	r1, #0
 8013934:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8013938:	49a6      	ldr	r1, [pc, #664]	; (8013bd4 <__ssvfiscanf_r+0x2ac>)
 801393a:	91a0      	str	r1, [sp, #640]	; 0x280
 801393c:	f10d 0804 	add.w	r8, sp, #4
 8013940:	49a5      	ldr	r1, [pc, #660]	; (8013bd8 <__ssvfiscanf_r+0x2b0>)
 8013942:	4fa6      	ldr	r7, [pc, #664]	; (8013bdc <__ssvfiscanf_r+0x2b4>)
 8013944:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8013be0 <__ssvfiscanf_r+0x2b8>
 8013948:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801394c:	4606      	mov	r6, r0
 801394e:	91a1      	str	r1, [sp, #644]	; 0x284
 8013950:	9300      	str	r3, [sp, #0]
 8013952:	7813      	ldrb	r3, [r2, #0]
 8013954:	2b00      	cmp	r3, #0
 8013956:	f000 815a 	beq.w	8013c0e <__ssvfiscanf_r+0x2e6>
 801395a:	5dd9      	ldrb	r1, [r3, r7]
 801395c:	f011 0108 	ands.w	r1, r1, #8
 8013960:	f102 0501 	add.w	r5, r2, #1
 8013964:	d019      	beq.n	801399a <__ssvfiscanf_r+0x72>
 8013966:	6863      	ldr	r3, [r4, #4]
 8013968:	2b00      	cmp	r3, #0
 801396a:	dd0f      	ble.n	801398c <__ssvfiscanf_r+0x64>
 801396c:	6823      	ldr	r3, [r4, #0]
 801396e:	781a      	ldrb	r2, [r3, #0]
 8013970:	5cba      	ldrb	r2, [r7, r2]
 8013972:	0712      	lsls	r2, r2, #28
 8013974:	d401      	bmi.n	801397a <__ssvfiscanf_r+0x52>
 8013976:	462a      	mov	r2, r5
 8013978:	e7eb      	b.n	8013952 <__ssvfiscanf_r+0x2a>
 801397a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801397c:	3201      	adds	r2, #1
 801397e:	9245      	str	r2, [sp, #276]	; 0x114
 8013980:	6862      	ldr	r2, [r4, #4]
 8013982:	3301      	adds	r3, #1
 8013984:	3a01      	subs	r2, #1
 8013986:	6062      	str	r2, [r4, #4]
 8013988:	6023      	str	r3, [r4, #0]
 801398a:	e7ec      	b.n	8013966 <__ssvfiscanf_r+0x3e>
 801398c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801398e:	4621      	mov	r1, r4
 8013990:	4630      	mov	r0, r6
 8013992:	4798      	blx	r3
 8013994:	2800      	cmp	r0, #0
 8013996:	d0e9      	beq.n	801396c <__ssvfiscanf_r+0x44>
 8013998:	e7ed      	b.n	8013976 <__ssvfiscanf_r+0x4e>
 801399a:	2b25      	cmp	r3, #37	; 0x25
 801399c:	d012      	beq.n	80139c4 <__ssvfiscanf_r+0x9c>
 801399e:	469a      	mov	sl, r3
 80139a0:	6863      	ldr	r3, [r4, #4]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	f340 8091 	ble.w	8013aca <__ssvfiscanf_r+0x1a2>
 80139a8:	6822      	ldr	r2, [r4, #0]
 80139aa:	7813      	ldrb	r3, [r2, #0]
 80139ac:	4553      	cmp	r3, sl
 80139ae:	f040 812e 	bne.w	8013c0e <__ssvfiscanf_r+0x2e6>
 80139b2:	6863      	ldr	r3, [r4, #4]
 80139b4:	3b01      	subs	r3, #1
 80139b6:	6063      	str	r3, [r4, #4]
 80139b8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80139ba:	3201      	adds	r2, #1
 80139bc:	3301      	adds	r3, #1
 80139be:	6022      	str	r2, [r4, #0]
 80139c0:	9345      	str	r3, [sp, #276]	; 0x114
 80139c2:	e7d8      	b.n	8013976 <__ssvfiscanf_r+0x4e>
 80139c4:	9141      	str	r1, [sp, #260]	; 0x104
 80139c6:	9143      	str	r1, [sp, #268]	; 0x10c
 80139c8:	7853      	ldrb	r3, [r2, #1]
 80139ca:	2b2a      	cmp	r3, #42	; 0x2a
 80139cc:	bf02      	ittt	eq
 80139ce:	2310      	moveq	r3, #16
 80139d0:	1c95      	addeq	r5, r2, #2
 80139d2:	9341      	streq	r3, [sp, #260]	; 0x104
 80139d4:	220a      	movs	r2, #10
 80139d6:	46aa      	mov	sl, r5
 80139d8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80139dc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80139e0:	2b09      	cmp	r3, #9
 80139e2:	d91d      	bls.n	8013a20 <__ssvfiscanf_r+0xf8>
 80139e4:	487e      	ldr	r0, [pc, #504]	; (8013be0 <__ssvfiscanf_r+0x2b8>)
 80139e6:	2203      	movs	r2, #3
 80139e8:	f7ec fc0a 	bl	8000200 <memchr>
 80139ec:	b140      	cbz	r0, 8013a00 <__ssvfiscanf_r+0xd8>
 80139ee:	2301      	movs	r3, #1
 80139f0:	eba0 0009 	sub.w	r0, r0, r9
 80139f4:	fa03 f000 	lsl.w	r0, r3, r0
 80139f8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80139fa:	4318      	orrs	r0, r3
 80139fc:	9041      	str	r0, [sp, #260]	; 0x104
 80139fe:	4655      	mov	r5, sl
 8013a00:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013a04:	2b78      	cmp	r3, #120	; 0x78
 8013a06:	d806      	bhi.n	8013a16 <__ssvfiscanf_r+0xee>
 8013a08:	2b57      	cmp	r3, #87	; 0x57
 8013a0a:	d810      	bhi.n	8013a2e <__ssvfiscanf_r+0x106>
 8013a0c:	2b25      	cmp	r3, #37	; 0x25
 8013a0e:	d0c6      	beq.n	801399e <__ssvfiscanf_r+0x76>
 8013a10:	d856      	bhi.n	8013ac0 <__ssvfiscanf_r+0x198>
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d064      	beq.n	8013ae0 <__ssvfiscanf_r+0x1b8>
 8013a16:	2303      	movs	r3, #3
 8013a18:	9347      	str	r3, [sp, #284]	; 0x11c
 8013a1a:	230a      	movs	r3, #10
 8013a1c:	9342      	str	r3, [sp, #264]	; 0x108
 8013a1e:	e071      	b.n	8013b04 <__ssvfiscanf_r+0x1dc>
 8013a20:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8013a22:	fb02 1103 	mla	r1, r2, r3, r1
 8013a26:	3930      	subs	r1, #48	; 0x30
 8013a28:	9143      	str	r1, [sp, #268]	; 0x10c
 8013a2a:	4655      	mov	r5, sl
 8013a2c:	e7d3      	b.n	80139d6 <__ssvfiscanf_r+0xae>
 8013a2e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8013a32:	2a20      	cmp	r2, #32
 8013a34:	d8ef      	bhi.n	8013a16 <__ssvfiscanf_r+0xee>
 8013a36:	a101      	add	r1, pc, #4	; (adr r1, 8013a3c <__ssvfiscanf_r+0x114>)
 8013a38:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013a3c:	08013aef 	.word	0x08013aef
 8013a40:	08013a17 	.word	0x08013a17
 8013a44:	08013a17 	.word	0x08013a17
 8013a48:	08013b4d 	.word	0x08013b4d
 8013a4c:	08013a17 	.word	0x08013a17
 8013a50:	08013a17 	.word	0x08013a17
 8013a54:	08013a17 	.word	0x08013a17
 8013a58:	08013a17 	.word	0x08013a17
 8013a5c:	08013a17 	.word	0x08013a17
 8013a60:	08013a17 	.word	0x08013a17
 8013a64:	08013a17 	.word	0x08013a17
 8013a68:	08013b63 	.word	0x08013b63
 8013a6c:	08013b39 	.word	0x08013b39
 8013a70:	08013ac7 	.word	0x08013ac7
 8013a74:	08013ac7 	.word	0x08013ac7
 8013a78:	08013ac7 	.word	0x08013ac7
 8013a7c:	08013a17 	.word	0x08013a17
 8013a80:	08013b3d 	.word	0x08013b3d
 8013a84:	08013a17 	.word	0x08013a17
 8013a88:	08013a17 	.word	0x08013a17
 8013a8c:	08013a17 	.word	0x08013a17
 8013a90:	08013a17 	.word	0x08013a17
 8013a94:	08013b73 	.word	0x08013b73
 8013a98:	08013b45 	.word	0x08013b45
 8013a9c:	08013ae7 	.word	0x08013ae7
 8013aa0:	08013a17 	.word	0x08013a17
 8013aa4:	08013a17 	.word	0x08013a17
 8013aa8:	08013b6f 	.word	0x08013b6f
 8013aac:	08013a17 	.word	0x08013a17
 8013ab0:	08013b39 	.word	0x08013b39
 8013ab4:	08013a17 	.word	0x08013a17
 8013ab8:	08013a17 	.word	0x08013a17
 8013abc:	08013aef 	.word	0x08013aef
 8013ac0:	3b45      	subs	r3, #69	; 0x45
 8013ac2:	2b02      	cmp	r3, #2
 8013ac4:	d8a7      	bhi.n	8013a16 <__ssvfiscanf_r+0xee>
 8013ac6:	2305      	movs	r3, #5
 8013ac8:	e01b      	b.n	8013b02 <__ssvfiscanf_r+0x1da>
 8013aca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013acc:	4621      	mov	r1, r4
 8013ace:	4630      	mov	r0, r6
 8013ad0:	4798      	blx	r3
 8013ad2:	2800      	cmp	r0, #0
 8013ad4:	f43f af68 	beq.w	80139a8 <__ssvfiscanf_r+0x80>
 8013ad8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013ada:	2800      	cmp	r0, #0
 8013adc:	f040 808d 	bne.w	8013bfa <__ssvfiscanf_r+0x2d2>
 8013ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8013ae4:	e08f      	b.n	8013c06 <__ssvfiscanf_r+0x2de>
 8013ae6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013ae8:	f042 0220 	orr.w	r2, r2, #32
 8013aec:	9241      	str	r2, [sp, #260]	; 0x104
 8013aee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013af0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013af4:	9241      	str	r2, [sp, #260]	; 0x104
 8013af6:	2210      	movs	r2, #16
 8013af8:	2b6f      	cmp	r3, #111	; 0x6f
 8013afa:	9242      	str	r2, [sp, #264]	; 0x108
 8013afc:	bf34      	ite	cc
 8013afe:	2303      	movcc	r3, #3
 8013b00:	2304      	movcs	r3, #4
 8013b02:	9347      	str	r3, [sp, #284]	; 0x11c
 8013b04:	6863      	ldr	r3, [r4, #4]
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	dd42      	ble.n	8013b90 <__ssvfiscanf_r+0x268>
 8013b0a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013b0c:	0659      	lsls	r1, r3, #25
 8013b0e:	d404      	bmi.n	8013b1a <__ssvfiscanf_r+0x1f2>
 8013b10:	6823      	ldr	r3, [r4, #0]
 8013b12:	781a      	ldrb	r2, [r3, #0]
 8013b14:	5cba      	ldrb	r2, [r7, r2]
 8013b16:	0712      	lsls	r2, r2, #28
 8013b18:	d441      	bmi.n	8013b9e <__ssvfiscanf_r+0x276>
 8013b1a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8013b1c:	2b02      	cmp	r3, #2
 8013b1e:	dc50      	bgt.n	8013bc2 <__ssvfiscanf_r+0x29a>
 8013b20:	466b      	mov	r3, sp
 8013b22:	4622      	mov	r2, r4
 8013b24:	a941      	add	r1, sp, #260	; 0x104
 8013b26:	4630      	mov	r0, r6
 8013b28:	f000 f9d0 	bl	8013ecc <_scanf_chars>
 8013b2c:	2801      	cmp	r0, #1
 8013b2e:	d06e      	beq.n	8013c0e <__ssvfiscanf_r+0x2e6>
 8013b30:	2802      	cmp	r0, #2
 8013b32:	f47f af20 	bne.w	8013976 <__ssvfiscanf_r+0x4e>
 8013b36:	e7cf      	b.n	8013ad8 <__ssvfiscanf_r+0x1b0>
 8013b38:	220a      	movs	r2, #10
 8013b3a:	e7dd      	b.n	8013af8 <__ssvfiscanf_r+0x1d0>
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	9342      	str	r3, [sp, #264]	; 0x108
 8013b40:	2303      	movs	r3, #3
 8013b42:	e7de      	b.n	8013b02 <__ssvfiscanf_r+0x1da>
 8013b44:	2308      	movs	r3, #8
 8013b46:	9342      	str	r3, [sp, #264]	; 0x108
 8013b48:	2304      	movs	r3, #4
 8013b4a:	e7da      	b.n	8013b02 <__ssvfiscanf_r+0x1da>
 8013b4c:	4629      	mov	r1, r5
 8013b4e:	4640      	mov	r0, r8
 8013b50:	f000 fb20 	bl	8014194 <__sccl>
 8013b54:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b5a:	9341      	str	r3, [sp, #260]	; 0x104
 8013b5c:	4605      	mov	r5, r0
 8013b5e:	2301      	movs	r3, #1
 8013b60:	e7cf      	b.n	8013b02 <__ssvfiscanf_r+0x1da>
 8013b62:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b68:	9341      	str	r3, [sp, #260]	; 0x104
 8013b6a:	2300      	movs	r3, #0
 8013b6c:	e7c9      	b.n	8013b02 <__ssvfiscanf_r+0x1da>
 8013b6e:	2302      	movs	r3, #2
 8013b70:	e7c7      	b.n	8013b02 <__ssvfiscanf_r+0x1da>
 8013b72:	9841      	ldr	r0, [sp, #260]	; 0x104
 8013b74:	06c3      	lsls	r3, r0, #27
 8013b76:	f53f aefe 	bmi.w	8013976 <__ssvfiscanf_r+0x4e>
 8013b7a:	9b00      	ldr	r3, [sp, #0]
 8013b7c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013b7e:	1d19      	adds	r1, r3, #4
 8013b80:	9100      	str	r1, [sp, #0]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	f010 0f01 	tst.w	r0, #1
 8013b88:	bf14      	ite	ne
 8013b8a:	801a      	strhne	r2, [r3, #0]
 8013b8c:	601a      	streq	r2, [r3, #0]
 8013b8e:	e6f2      	b.n	8013976 <__ssvfiscanf_r+0x4e>
 8013b90:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013b92:	4621      	mov	r1, r4
 8013b94:	4630      	mov	r0, r6
 8013b96:	4798      	blx	r3
 8013b98:	2800      	cmp	r0, #0
 8013b9a:	d0b6      	beq.n	8013b0a <__ssvfiscanf_r+0x1e2>
 8013b9c:	e79c      	b.n	8013ad8 <__ssvfiscanf_r+0x1b0>
 8013b9e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013ba0:	3201      	adds	r2, #1
 8013ba2:	9245      	str	r2, [sp, #276]	; 0x114
 8013ba4:	6862      	ldr	r2, [r4, #4]
 8013ba6:	3a01      	subs	r2, #1
 8013ba8:	2a00      	cmp	r2, #0
 8013baa:	6062      	str	r2, [r4, #4]
 8013bac:	dd02      	ble.n	8013bb4 <__ssvfiscanf_r+0x28c>
 8013bae:	3301      	adds	r3, #1
 8013bb0:	6023      	str	r3, [r4, #0]
 8013bb2:	e7ad      	b.n	8013b10 <__ssvfiscanf_r+0x1e8>
 8013bb4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013bb6:	4621      	mov	r1, r4
 8013bb8:	4630      	mov	r0, r6
 8013bba:	4798      	blx	r3
 8013bbc:	2800      	cmp	r0, #0
 8013bbe:	d0a7      	beq.n	8013b10 <__ssvfiscanf_r+0x1e8>
 8013bc0:	e78a      	b.n	8013ad8 <__ssvfiscanf_r+0x1b0>
 8013bc2:	2b04      	cmp	r3, #4
 8013bc4:	dc0e      	bgt.n	8013be4 <__ssvfiscanf_r+0x2bc>
 8013bc6:	466b      	mov	r3, sp
 8013bc8:	4622      	mov	r2, r4
 8013bca:	a941      	add	r1, sp, #260	; 0x104
 8013bcc:	4630      	mov	r0, r6
 8013bce:	f000 f9d7 	bl	8013f80 <_scanf_i>
 8013bd2:	e7ab      	b.n	8013b2c <__ssvfiscanf_r+0x204>
 8013bd4:	08013875 	.word	0x08013875
 8013bd8:	080138ef 	.word	0x080138ef
 8013bdc:	08014c9f 	.word	0x08014c9f
 8013be0:	08014fda 	.word	0x08014fda
 8013be4:	4b0b      	ldr	r3, [pc, #44]	; (8013c14 <__ssvfiscanf_r+0x2ec>)
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	f43f aec5 	beq.w	8013976 <__ssvfiscanf_r+0x4e>
 8013bec:	466b      	mov	r3, sp
 8013bee:	4622      	mov	r2, r4
 8013bf0:	a941      	add	r1, sp, #260	; 0x104
 8013bf2:	4630      	mov	r0, r6
 8013bf4:	f3af 8000 	nop.w
 8013bf8:	e798      	b.n	8013b2c <__ssvfiscanf_r+0x204>
 8013bfa:	89a3      	ldrh	r3, [r4, #12]
 8013bfc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013c00:	bf18      	it	ne
 8013c02:	f04f 30ff 	movne.w	r0, #4294967295
 8013c06:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8013c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c0e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013c10:	e7f9      	b.n	8013c06 <__ssvfiscanf_r+0x2de>
 8013c12:	bf00      	nop
 8013c14:	00000000 	.word	0x00000000

08013c18 <__sfputc_r>:
 8013c18:	6893      	ldr	r3, [r2, #8]
 8013c1a:	3b01      	subs	r3, #1
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	b410      	push	{r4}
 8013c20:	6093      	str	r3, [r2, #8]
 8013c22:	da08      	bge.n	8013c36 <__sfputc_r+0x1e>
 8013c24:	6994      	ldr	r4, [r2, #24]
 8013c26:	42a3      	cmp	r3, r4
 8013c28:	db01      	blt.n	8013c2e <__sfputc_r+0x16>
 8013c2a:	290a      	cmp	r1, #10
 8013c2c:	d103      	bne.n	8013c36 <__sfputc_r+0x1e>
 8013c2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013c32:	f7fd bf59 	b.w	8011ae8 <__swbuf_r>
 8013c36:	6813      	ldr	r3, [r2, #0]
 8013c38:	1c58      	adds	r0, r3, #1
 8013c3a:	6010      	str	r0, [r2, #0]
 8013c3c:	7019      	strb	r1, [r3, #0]
 8013c3e:	4608      	mov	r0, r1
 8013c40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013c44:	4770      	bx	lr

08013c46 <__sfputs_r>:
 8013c46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c48:	4606      	mov	r6, r0
 8013c4a:	460f      	mov	r7, r1
 8013c4c:	4614      	mov	r4, r2
 8013c4e:	18d5      	adds	r5, r2, r3
 8013c50:	42ac      	cmp	r4, r5
 8013c52:	d101      	bne.n	8013c58 <__sfputs_r+0x12>
 8013c54:	2000      	movs	r0, #0
 8013c56:	e007      	b.n	8013c68 <__sfputs_r+0x22>
 8013c58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c5c:	463a      	mov	r2, r7
 8013c5e:	4630      	mov	r0, r6
 8013c60:	f7ff ffda 	bl	8013c18 <__sfputc_r>
 8013c64:	1c43      	adds	r3, r0, #1
 8013c66:	d1f3      	bne.n	8013c50 <__sfputs_r+0xa>
 8013c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013c6c <_vfiprintf_r>:
 8013c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c70:	460d      	mov	r5, r1
 8013c72:	b09d      	sub	sp, #116	; 0x74
 8013c74:	4614      	mov	r4, r2
 8013c76:	4698      	mov	r8, r3
 8013c78:	4606      	mov	r6, r0
 8013c7a:	b118      	cbz	r0, 8013c84 <_vfiprintf_r+0x18>
 8013c7c:	6983      	ldr	r3, [r0, #24]
 8013c7e:	b90b      	cbnz	r3, 8013c84 <_vfiprintf_r+0x18>
 8013c80:	f7fe ffc6 	bl	8012c10 <__sinit>
 8013c84:	4b89      	ldr	r3, [pc, #548]	; (8013eac <_vfiprintf_r+0x240>)
 8013c86:	429d      	cmp	r5, r3
 8013c88:	d11b      	bne.n	8013cc2 <_vfiprintf_r+0x56>
 8013c8a:	6875      	ldr	r5, [r6, #4]
 8013c8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013c8e:	07d9      	lsls	r1, r3, #31
 8013c90:	d405      	bmi.n	8013c9e <_vfiprintf_r+0x32>
 8013c92:	89ab      	ldrh	r3, [r5, #12]
 8013c94:	059a      	lsls	r2, r3, #22
 8013c96:	d402      	bmi.n	8013c9e <_vfiprintf_r+0x32>
 8013c98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013c9a:	f7ff f86e 	bl	8012d7a <__retarget_lock_acquire_recursive>
 8013c9e:	89ab      	ldrh	r3, [r5, #12]
 8013ca0:	071b      	lsls	r3, r3, #28
 8013ca2:	d501      	bpl.n	8013ca8 <_vfiprintf_r+0x3c>
 8013ca4:	692b      	ldr	r3, [r5, #16]
 8013ca6:	b9eb      	cbnz	r3, 8013ce4 <_vfiprintf_r+0x78>
 8013ca8:	4629      	mov	r1, r5
 8013caa:	4630      	mov	r0, r6
 8013cac:	f7fd ff80 	bl	8011bb0 <__swsetup_r>
 8013cb0:	b1c0      	cbz	r0, 8013ce4 <_vfiprintf_r+0x78>
 8013cb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013cb4:	07dc      	lsls	r4, r3, #31
 8013cb6:	d50e      	bpl.n	8013cd6 <_vfiprintf_r+0x6a>
 8013cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8013cbc:	b01d      	add	sp, #116	; 0x74
 8013cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cc2:	4b7b      	ldr	r3, [pc, #492]	; (8013eb0 <_vfiprintf_r+0x244>)
 8013cc4:	429d      	cmp	r5, r3
 8013cc6:	d101      	bne.n	8013ccc <_vfiprintf_r+0x60>
 8013cc8:	68b5      	ldr	r5, [r6, #8]
 8013cca:	e7df      	b.n	8013c8c <_vfiprintf_r+0x20>
 8013ccc:	4b79      	ldr	r3, [pc, #484]	; (8013eb4 <_vfiprintf_r+0x248>)
 8013cce:	429d      	cmp	r5, r3
 8013cd0:	bf08      	it	eq
 8013cd2:	68f5      	ldreq	r5, [r6, #12]
 8013cd4:	e7da      	b.n	8013c8c <_vfiprintf_r+0x20>
 8013cd6:	89ab      	ldrh	r3, [r5, #12]
 8013cd8:	0598      	lsls	r0, r3, #22
 8013cda:	d4ed      	bmi.n	8013cb8 <_vfiprintf_r+0x4c>
 8013cdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013cde:	f7ff f84d 	bl	8012d7c <__retarget_lock_release_recursive>
 8013ce2:	e7e9      	b.n	8013cb8 <_vfiprintf_r+0x4c>
 8013ce4:	2300      	movs	r3, #0
 8013ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8013ce8:	2320      	movs	r3, #32
 8013cea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013cee:	f8cd 800c 	str.w	r8, [sp, #12]
 8013cf2:	2330      	movs	r3, #48	; 0x30
 8013cf4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013eb8 <_vfiprintf_r+0x24c>
 8013cf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013cfc:	f04f 0901 	mov.w	r9, #1
 8013d00:	4623      	mov	r3, r4
 8013d02:	469a      	mov	sl, r3
 8013d04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013d08:	b10a      	cbz	r2, 8013d0e <_vfiprintf_r+0xa2>
 8013d0a:	2a25      	cmp	r2, #37	; 0x25
 8013d0c:	d1f9      	bne.n	8013d02 <_vfiprintf_r+0x96>
 8013d0e:	ebba 0b04 	subs.w	fp, sl, r4
 8013d12:	d00b      	beq.n	8013d2c <_vfiprintf_r+0xc0>
 8013d14:	465b      	mov	r3, fp
 8013d16:	4622      	mov	r2, r4
 8013d18:	4629      	mov	r1, r5
 8013d1a:	4630      	mov	r0, r6
 8013d1c:	f7ff ff93 	bl	8013c46 <__sfputs_r>
 8013d20:	3001      	adds	r0, #1
 8013d22:	f000 80aa 	beq.w	8013e7a <_vfiprintf_r+0x20e>
 8013d26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013d28:	445a      	add	r2, fp
 8013d2a:	9209      	str	r2, [sp, #36]	; 0x24
 8013d2c:	f89a 3000 	ldrb.w	r3, [sl]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	f000 80a2 	beq.w	8013e7a <_vfiprintf_r+0x20e>
 8013d36:	2300      	movs	r3, #0
 8013d38:	f04f 32ff 	mov.w	r2, #4294967295
 8013d3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013d40:	f10a 0a01 	add.w	sl, sl, #1
 8013d44:	9304      	str	r3, [sp, #16]
 8013d46:	9307      	str	r3, [sp, #28]
 8013d48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013d4c:	931a      	str	r3, [sp, #104]	; 0x68
 8013d4e:	4654      	mov	r4, sl
 8013d50:	2205      	movs	r2, #5
 8013d52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d56:	4858      	ldr	r0, [pc, #352]	; (8013eb8 <_vfiprintf_r+0x24c>)
 8013d58:	f7ec fa52 	bl	8000200 <memchr>
 8013d5c:	9a04      	ldr	r2, [sp, #16]
 8013d5e:	b9d8      	cbnz	r0, 8013d98 <_vfiprintf_r+0x12c>
 8013d60:	06d1      	lsls	r1, r2, #27
 8013d62:	bf44      	itt	mi
 8013d64:	2320      	movmi	r3, #32
 8013d66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013d6a:	0713      	lsls	r3, r2, #28
 8013d6c:	bf44      	itt	mi
 8013d6e:	232b      	movmi	r3, #43	; 0x2b
 8013d70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013d74:	f89a 3000 	ldrb.w	r3, [sl]
 8013d78:	2b2a      	cmp	r3, #42	; 0x2a
 8013d7a:	d015      	beq.n	8013da8 <_vfiprintf_r+0x13c>
 8013d7c:	9a07      	ldr	r2, [sp, #28]
 8013d7e:	4654      	mov	r4, sl
 8013d80:	2000      	movs	r0, #0
 8013d82:	f04f 0c0a 	mov.w	ip, #10
 8013d86:	4621      	mov	r1, r4
 8013d88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013d8c:	3b30      	subs	r3, #48	; 0x30
 8013d8e:	2b09      	cmp	r3, #9
 8013d90:	d94e      	bls.n	8013e30 <_vfiprintf_r+0x1c4>
 8013d92:	b1b0      	cbz	r0, 8013dc2 <_vfiprintf_r+0x156>
 8013d94:	9207      	str	r2, [sp, #28]
 8013d96:	e014      	b.n	8013dc2 <_vfiprintf_r+0x156>
 8013d98:	eba0 0308 	sub.w	r3, r0, r8
 8013d9c:	fa09 f303 	lsl.w	r3, r9, r3
 8013da0:	4313      	orrs	r3, r2
 8013da2:	9304      	str	r3, [sp, #16]
 8013da4:	46a2      	mov	sl, r4
 8013da6:	e7d2      	b.n	8013d4e <_vfiprintf_r+0xe2>
 8013da8:	9b03      	ldr	r3, [sp, #12]
 8013daa:	1d19      	adds	r1, r3, #4
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	9103      	str	r1, [sp, #12]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	bfbb      	ittet	lt
 8013db4:	425b      	neglt	r3, r3
 8013db6:	f042 0202 	orrlt.w	r2, r2, #2
 8013dba:	9307      	strge	r3, [sp, #28]
 8013dbc:	9307      	strlt	r3, [sp, #28]
 8013dbe:	bfb8      	it	lt
 8013dc0:	9204      	strlt	r2, [sp, #16]
 8013dc2:	7823      	ldrb	r3, [r4, #0]
 8013dc4:	2b2e      	cmp	r3, #46	; 0x2e
 8013dc6:	d10c      	bne.n	8013de2 <_vfiprintf_r+0x176>
 8013dc8:	7863      	ldrb	r3, [r4, #1]
 8013dca:	2b2a      	cmp	r3, #42	; 0x2a
 8013dcc:	d135      	bne.n	8013e3a <_vfiprintf_r+0x1ce>
 8013dce:	9b03      	ldr	r3, [sp, #12]
 8013dd0:	1d1a      	adds	r2, r3, #4
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	9203      	str	r2, [sp, #12]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	bfb8      	it	lt
 8013dda:	f04f 33ff 	movlt.w	r3, #4294967295
 8013dde:	3402      	adds	r4, #2
 8013de0:	9305      	str	r3, [sp, #20]
 8013de2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013ec8 <_vfiprintf_r+0x25c>
 8013de6:	7821      	ldrb	r1, [r4, #0]
 8013de8:	2203      	movs	r2, #3
 8013dea:	4650      	mov	r0, sl
 8013dec:	f7ec fa08 	bl	8000200 <memchr>
 8013df0:	b140      	cbz	r0, 8013e04 <_vfiprintf_r+0x198>
 8013df2:	2340      	movs	r3, #64	; 0x40
 8013df4:	eba0 000a 	sub.w	r0, r0, sl
 8013df8:	fa03 f000 	lsl.w	r0, r3, r0
 8013dfc:	9b04      	ldr	r3, [sp, #16]
 8013dfe:	4303      	orrs	r3, r0
 8013e00:	3401      	adds	r4, #1
 8013e02:	9304      	str	r3, [sp, #16]
 8013e04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e08:	482c      	ldr	r0, [pc, #176]	; (8013ebc <_vfiprintf_r+0x250>)
 8013e0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013e0e:	2206      	movs	r2, #6
 8013e10:	f7ec f9f6 	bl	8000200 <memchr>
 8013e14:	2800      	cmp	r0, #0
 8013e16:	d03f      	beq.n	8013e98 <_vfiprintf_r+0x22c>
 8013e18:	4b29      	ldr	r3, [pc, #164]	; (8013ec0 <_vfiprintf_r+0x254>)
 8013e1a:	bb1b      	cbnz	r3, 8013e64 <_vfiprintf_r+0x1f8>
 8013e1c:	9b03      	ldr	r3, [sp, #12]
 8013e1e:	3307      	adds	r3, #7
 8013e20:	f023 0307 	bic.w	r3, r3, #7
 8013e24:	3308      	adds	r3, #8
 8013e26:	9303      	str	r3, [sp, #12]
 8013e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e2a:	443b      	add	r3, r7
 8013e2c:	9309      	str	r3, [sp, #36]	; 0x24
 8013e2e:	e767      	b.n	8013d00 <_vfiprintf_r+0x94>
 8013e30:	fb0c 3202 	mla	r2, ip, r2, r3
 8013e34:	460c      	mov	r4, r1
 8013e36:	2001      	movs	r0, #1
 8013e38:	e7a5      	b.n	8013d86 <_vfiprintf_r+0x11a>
 8013e3a:	2300      	movs	r3, #0
 8013e3c:	3401      	adds	r4, #1
 8013e3e:	9305      	str	r3, [sp, #20]
 8013e40:	4619      	mov	r1, r3
 8013e42:	f04f 0c0a 	mov.w	ip, #10
 8013e46:	4620      	mov	r0, r4
 8013e48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013e4c:	3a30      	subs	r2, #48	; 0x30
 8013e4e:	2a09      	cmp	r2, #9
 8013e50:	d903      	bls.n	8013e5a <_vfiprintf_r+0x1ee>
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d0c5      	beq.n	8013de2 <_vfiprintf_r+0x176>
 8013e56:	9105      	str	r1, [sp, #20]
 8013e58:	e7c3      	b.n	8013de2 <_vfiprintf_r+0x176>
 8013e5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8013e5e:	4604      	mov	r4, r0
 8013e60:	2301      	movs	r3, #1
 8013e62:	e7f0      	b.n	8013e46 <_vfiprintf_r+0x1da>
 8013e64:	ab03      	add	r3, sp, #12
 8013e66:	9300      	str	r3, [sp, #0]
 8013e68:	462a      	mov	r2, r5
 8013e6a:	4b16      	ldr	r3, [pc, #88]	; (8013ec4 <_vfiprintf_r+0x258>)
 8013e6c:	a904      	add	r1, sp, #16
 8013e6e:	4630      	mov	r0, r6
 8013e70:	f7fd f80a 	bl	8010e88 <_printf_float>
 8013e74:	4607      	mov	r7, r0
 8013e76:	1c78      	adds	r0, r7, #1
 8013e78:	d1d6      	bne.n	8013e28 <_vfiprintf_r+0x1bc>
 8013e7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013e7c:	07d9      	lsls	r1, r3, #31
 8013e7e:	d405      	bmi.n	8013e8c <_vfiprintf_r+0x220>
 8013e80:	89ab      	ldrh	r3, [r5, #12]
 8013e82:	059a      	lsls	r2, r3, #22
 8013e84:	d402      	bmi.n	8013e8c <_vfiprintf_r+0x220>
 8013e86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013e88:	f7fe ff78 	bl	8012d7c <__retarget_lock_release_recursive>
 8013e8c:	89ab      	ldrh	r3, [r5, #12]
 8013e8e:	065b      	lsls	r3, r3, #25
 8013e90:	f53f af12 	bmi.w	8013cb8 <_vfiprintf_r+0x4c>
 8013e94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013e96:	e711      	b.n	8013cbc <_vfiprintf_r+0x50>
 8013e98:	ab03      	add	r3, sp, #12
 8013e9a:	9300      	str	r3, [sp, #0]
 8013e9c:	462a      	mov	r2, r5
 8013e9e:	4b09      	ldr	r3, [pc, #36]	; (8013ec4 <_vfiprintf_r+0x258>)
 8013ea0:	a904      	add	r1, sp, #16
 8013ea2:	4630      	mov	r0, r6
 8013ea4:	f7fd fa94 	bl	80113d0 <_printf_i>
 8013ea8:	e7e4      	b.n	8013e74 <_vfiprintf_r+0x208>
 8013eaa:	bf00      	nop
 8013eac:	08014e38 	.word	0x08014e38
 8013eb0:	08014e58 	.word	0x08014e58
 8013eb4:	08014e18 	.word	0x08014e18
 8013eb8:	08014fd4 	.word	0x08014fd4
 8013ebc:	08014fde 	.word	0x08014fde
 8013ec0:	08010e89 	.word	0x08010e89
 8013ec4:	08013c47 	.word	0x08013c47
 8013ec8:	08014fda 	.word	0x08014fda

08013ecc <_scanf_chars>:
 8013ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ed0:	4615      	mov	r5, r2
 8013ed2:	688a      	ldr	r2, [r1, #8]
 8013ed4:	4680      	mov	r8, r0
 8013ed6:	460c      	mov	r4, r1
 8013ed8:	b932      	cbnz	r2, 8013ee8 <_scanf_chars+0x1c>
 8013eda:	698a      	ldr	r2, [r1, #24]
 8013edc:	2a00      	cmp	r2, #0
 8013ede:	bf0c      	ite	eq
 8013ee0:	2201      	moveq	r2, #1
 8013ee2:	f04f 32ff 	movne.w	r2, #4294967295
 8013ee6:	608a      	str	r2, [r1, #8]
 8013ee8:	6822      	ldr	r2, [r4, #0]
 8013eea:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8013f7c <_scanf_chars+0xb0>
 8013eee:	06d1      	lsls	r1, r2, #27
 8013ef0:	bf5f      	itttt	pl
 8013ef2:	681a      	ldrpl	r2, [r3, #0]
 8013ef4:	1d11      	addpl	r1, r2, #4
 8013ef6:	6019      	strpl	r1, [r3, #0]
 8013ef8:	6816      	ldrpl	r6, [r2, #0]
 8013efa:	2700      	movs	r7, #0
 8013efc:	69a0      	ldr	r0, [r4, #24]
 8013efe:	b188      	cbz	r0, 8013f24 <_scanf_chars+0x58>
 8013f00:	2801      	cmp	r0, #1
 8013f02:	d107      	bne.n	8013f14 <_scanf_chars+0x48>
 8013f04:	682a      	ldr	r2, [r5, #0]
 8013f06:	7811      	ldrb	r1, [r2, #0]
 8013f08:	6962      	ldr	r2, [r4, #20]
 8013f0a:	5c52      	ldrb	r2, [r2, r1]
 8013f0c:	b952      	cbnz	r2, 8013f24 <_scanf_chars+0x58>
 8013f0e:	2f00      	cmp	r7, #0
 8013f10:	d031      	beq.n	8013f76 <_scanf_chars+0xaa>
 8013f12:	e022      	b.n	8013f5a <_scanf_chars+0x8e>
 8013f14:	2802      	cmp	r0, #2
 8013f16:	d120      	bne.n	8013f5a <_scanf_chars+0x8e>
 8013f18:	682b      	ldr	r3, [r5, #0]
 8013f1a:	781b      	ldrb	r3, [r3, #0]
 8013f1c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8013f20:	071b      	lsls	r3, r3, #28
 8013f22:	d41a      	bmi.n	8013f5a <_scanf_chars+0x8e>
 8013f24:	6823      	ldr	r3, [r4, #0]
 8013f26:	06da      	lsls	r2, r3, #27
 8013f28:	bf5e      	ittt	pl
 8013f2a:	682b      	ldrpl	r3, [r5, #0]
 8013f2c:	781b      	ldrbpl	r3, [r3, #0]
 8013f2e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8013f32:	682a      	ldr	r2, [r5, #0]
 8013f34:	686b      	ldr	r3, [r5, #4]
 8013f36:	3201      	adds	r2, #1
 8013f38:	602a      	str	r2, [r5, #0]
 8013f3a:	68a2      	ldr	r2, [r4, #8]
 8013f3c:	3b01      	subs	r3, #1
 8013f3e:	3a01      	subs	r2, #1
 8013f40:	606b      	str	r3, [r5, #4]
 8013f42:	3701      	adds	r7, #1
 8013f44:	60a2      	str	r2, [r4, #8]
 8013f46:	b142      	cbz	r2, 8013f5a <_scanf_chars+0x8e>
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	dcd7      	bgt.n	8013efc <_scanf_chars+0x30>
 8013f4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013f50:	4629      	mov	r1, r5
 8013f52:	4640      	mov	r0, r8
 8013f54:	4798      	blx	r3
 8013f56:	2800      	cmp	r0, #0
 8013f58:	d0d0      	beq.n	8013efc <_scanf_chars+0x30>
 8013f5a:	6823      	ldr	r3, [r4, #0]
 8013f5c:	f013 0310 	ands.w	r3, r3, #16
 8013f60:	d105      	bne.n	8013f6e <_scanf_chars+0xa2>
 8013f62:	68e2      	ldr	r2, [r4, #12]
 8013f64:	3201      	adds	r2, #1
 8013f66:	60e2      	str	r2, [r4, #12]
 8013f68:	69a2      	ldr	r2, [r4, #24]
 8013f6a:	b102      	cbz	r2, 8013f6e <_scanf_chars+0xa2>
 8013f6c:	7033      	strb	r3, [r6, #0]
 8013f6e:	6923      	ldr	r3, [r4, #16]
 8013f70:	443b      	add	r3, r7
 8013f72:	6123      	str	r3, [r4, #16]
 8013f74:	2000      	movs	r0, #0
 8013f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f7a:	bf00      	nop
 8013f7c:	08014c9f 	.word	0x08014c9f

08013f80 <_scanf_i>:
 8013f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f84:	4698      	mov	r8, r3
 8013f86:	4b76      	ldr	r3, [pc, #472]	; (8014160 <_scanf_i+0x1e0>)
 8013f88:	460c      	mov	r4, r1
 8013f8a:	4682      	mov	sl, r0
 8013f8c:	4616      	mov	r6, r2
 8013f8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013f92:	b087      	sub	sp, #28
 8013f94:	ab03      	add	r3, sp, #12
 8013f96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013f9a:	4b72      	ldr	r3, [pc, #456]	; (8014164 <_scanf_i+0x1e4>)
 8013f9c:	69a1      	ldr	r1, [r4, #24]
 8013f9e:	4a72      	ldr	r2, [pc, #456]	; (8014168 <_scanf_i+0x1e8>)
 8013fa0:	2903      	cmp	r1, #3
 8013fa2:	bf18      	it	ne
 8013fa4:	461a      	movne	r2, r3
 8013fa6:	68a3      	ldr	r3, [r4, #8]
 8013fa8:	9201      	str	r2, [sp, #4]
 8013faa:	1e5a      	subs	r2, r3, #1
 8013fac:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013fb0:	bf88      	it	hi
 8013fb2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013fb6:	4627      	mov	r7, r4
 8013fb8:	bf82      	ittt	hi
 8013fba:	eb03 0905 	addhi.w	r9, r3, r5
 8013fbe:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013fc2:	60a3      	strhi	r3, [r4, #8]
 8013fc4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8013fc8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8013fcc:	bf98      	it	ls
 8013fce:	f04f 0900 	movls.w	r9, #0
 8013fd2:	6023      	str	r3, [r4, #0]
 8013fd4:	463d      	mov	r5, r7
 8013fd6:	f04f 0b00 	mov.w	fp, #0
 8013fda:	6831      	ldr	r1, [r6, #0]
 8013fdc:	ab03      	add	r3, sp, #12
 8013fde:	7809      	ldrb	r1, [r1, #0]
 8013fe0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8013fe4:	2202      	movs	r2, #2
 8013fe6:	f7ec f90b 	bl	8000200 <memchr>
 8013fea:	b328      	cbz	r0, 8014038 <_scanf_i+0xb8>
 8013fec:	f1bb 0f01 	cmp.w	fp, #1
 8013ff0:	d159      	bne.n	80140a6 <_scanf_i+0x126>
 8013ff2:	6862      	ldr	r2, [r4, #4]
 8013ff4:	b92a      	cbnz	r2, 8014002 <_scanf_i+0x82>
 8013ff6:	6822      	ldr	r2, [r4, #0]
 8013ff8:	2308      	movs	r3, #8
 8013ffa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013ffe:	6063      	str	r3, [r4, #4]
 8014000:	6022      	str	r2, [r4, #0]
 8014002:	6822      	ldr	r2, [r4, #0]
 8014004:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8014008:	6022      	str	r2, [r4, #0]
 801400a:	68a2      	ldr	r2, [r4, #8]
 801400c:	1e51      	subs	r1, r2, #1
 801400e:	60a1      	str	r1, [r4, #8]
 8014010:	b192      	cbz	r2, 8014038 <_scanf_i+0xb8>
 8014012:	6832      	ldr	r2, [r6, #0]
 8014014:	1c51      	adds	r1, r2, #1
 8014016:	6031      	str	r1, [r6, #0]
 8014018:	7812      	ldrb	r2, [r2, #0]
 801401a:	f805 2b01 	strb.w	r2, [r5], #1
 801401e:	6872      	ldr	r2, [r6, #4]
 8014020:	3a01      	subs	r2, #1
 8014022:	2a00      	cmp	r2, #0
 8014024:	6072      	str	r2, [r6, #4]
 8014026:	dc07      	bgt.n	8014038 <_scanf_i+0xb8>
 8014028:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801402c:	4631      	mov	r1, r6
 801402e:	4650      	mov	r0, sl
 8014030:	4790      	blx	r2
 8014032:	2800      	cmp	r0, #0
 8014034:	f040 8085 	bne.w	8014142 <_scanf_i+0x1c2>
 8014038:	f10b 0b01 	add.w	fp, fp, #1
 801403c:	f1bb 0f03 	cmp.w	fp, #3
 8014040:	d1cb      	bne.n	8013fda <_scanf_i+0x5a>
 8014042:	6863      	ldr	r3, [r4, #4]
 8014044:	b90b      	cbnz	r3, 801404a <_scanf_i+0xca>
 8014046:	230a      	movs	r3, #10
 8014048:	6063      	str	r3, [r4, #4]
 801404a:	6863      	ldr	r3, [r4, #4]
 801404c:	4947      	ldr	r1, [pc, #284]	; (801416c <_scanf_i+0x1ec>)
 801404e:	6960      	ldr	r0, [r4, #20]
 8014050:	1ac9      	subs	r1, r1, r3
 8014052:	f000 f89f 	bl	8014194 <__sccl>
 8014056:	f04f 0b00 	mov.w	fp, #0
 801405a:	68a3      	ldr	r3, [r4, #8]
 801405c:	6822      	ldr	r2, [r4, #0]
 801405e:	2b00      	cmp	r3, #0
 8014060:	d03d      	beq.n	80140de <_scanf_i+0x15e>
 8014062:	6831      	ldr	r1, [r6, #0]
 8014064:	6960      	ldr	r0, [r4, #20]
 8014066:	f891 c000 	ldrb.w	ip, [r1]
 801406a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801406e:	2800      	cmp	r0, #0
 8014070:	d035      	beq.n	80140de <_scanf_i+0x15e>
 8014072:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8014076:	d124      	bne.n	80140c2 <_scanf_i+0x142>
 8014078:	0510      	lsls	r0, r2, #20
 801407a:	d522      	bpl.n	80140c2 <_scanf_i+0x142>
 801407c:	f10b 0b01 	add.w	fp, fp, #1
 8014080:	f1b9 0f00 	cmp.w	r9, #0
 8014084:	d003      	beq.n	801408e <_scanf_i+0x10e>
 8014086:	3301      	adds	r3, #1
 8014088:	f109 39ff 	add.w	r9, r9, #4294967295
 801408c:	60a3      	str	r3, [r4, #8]
 801408e:	6873      	ldr	r3, [r6, #4]
 8014090:	3b01      	subs	r3, #1
 8014092:	2b00      	cmp	r3, #0
 8014094:	6073      	str	r3, [r6, #4]
 8014096:	dd1b      	ble.n	80140d0 <_scanf_i+0x150>
 8014098:	6833      	ldr	r3, [r6, #0]
 801409a:	3301      	adds	r3, #1
 801409c:	6033      	str	r3, [r6, #0]
 801409e:	68a3      	ldr	r3, [r4, #8]
 80140a0:	3b01      	subs	r3, #1
 80140a2:	60a3      	str	r3, [r4, #8]
 80140a4:	e7d9      	b.n	801405a <_scanf_i+0xda>
 80140a6:	f1bb 0f02 	cmp.w	fp, #2
 80140aa:	d1ae      	bne.n	801400a <_scanf_i+0x8a>
 80140ac:	6822      	ldr	r2, [r4, #0]
 80140ae:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80140b2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80140b6:	d1bf      	bne.n	8014038 <_scanf_i+0xb8>
 80140b8:	2310      	movs	r3, #16
 80140ba:	6063      	str	r3, [r4, #4]
 80140bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80140c0:	e7a2      	b.n	8014008 <_scanf_i+0x88>
 80140c2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80140c6:	6022      	str	r2, [r4, #0]
 80140c8:	780b      	ldrb	r3, [r1, #0]
 80140ca:	f805 3b01 	strb.w	r3, [r5], #1
 80140ce:	e7de      	b.n	801408e <_scanf_i+0x10e>
 80140d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80140d4:	4631      	mov	r1, r6
 80140d6:	4650      	mov	r0, sl
 80140d8:	4798      	blx	r3
 80140da:	2800      	cmp	r0, #0
 80140dc:	d0df      	beq.n	801409e <_scanf_i+0x11e>
 80140de:	6823      	ldr	r3, [r4, #0]
 80140e0:	05db      	lsls	r3, r3, #23
 80140e2:	d50d      	bpl.n	8014100 <_scanf_i+0x180>
 80140e4:	42bd      	cmp	r5, r7
 80140e6:	d909      	bls.n	80140fc <_scanf_i+0x17c>
 80140e8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80140ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80140f0:	4632      	mov	r2, r6
 80140f2:	4650      	mov	r0, sl
 80140f4:	4798      	blx	r3
 80140f6:	f105 39ff 	add.w	r9, r5, #4294967295
 80140fa:	464d      	mov	r5, r9
 80140fc:	42bd      	cmp	r5, r7
 80140fe:	d02d      	beq.n	801415c <_scanf_i+0x1dc>
 8014100:	6822      	ldr	r2, [r4, #0]
 8014102:	f012 0210 	ands.w	r2, r2, #16
 8014106:	d113      	bne.n	8014130 <_scanf_i+0x1b0>
 8014108:	702a      	strb	r2, [r5, #0]
 801410a:	6863      	ldr	r3, [r4, #4]
 801410c:	9e01      	ldr	r6, [sp, #4]
 801410e:	4639      	mov	r1, r7
 8014110:	4650      	mov	r0, sl
 8014112:	47b0      	blx	r6
 8014114:	6821      	ldr	r1, [r4, #0]
 8014116:	f8d8 3000 	ldr.w	r3, [r8]
 801411a:	f011 0f20 	tst.w	r1, #32
 801411e:	d013      	beq.n	8014148 <_scanf_i+0x1c8>
 8014120:	1d1a      	adds	r2, r3, #4
 8014122:	f8c8 2000 	str.w	r2, [r8]
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	6018      	str	r0, [r3, #0]
 801412a:	68e3      	ldr	r3, [r4, #12]
 801412c:	3301      	adds	r3, #1
 801412e:	60e3      	str	r3, [r4, #12]
 8014130:	1bed      	subs	r5, r5, r7
 8014132:	44ab      	add	fp, r5
 8014134:	6925      	ldr	r5, [r4, #16]
 8014136:	445d      	add	r5, fp
 8014138:	6125      	str	r5, [r4, #16]
 801413a:	2000      	movs	r0, #0
 801413c:	b007      	add	sp, #28
 801413e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014142:	f04f 0b00 	mov.w	fp, #0
 8014146:	e7ca      	b.n	80140de <_scanf_i+0x15e>
 8014148:	1d1a      	adds	r2, r3, #4
 801414a:	f8c8 2000 	str.w	r2, [r8]
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	f011 0f01 	tst.w	r1, #1
 8014154:	bf14      	ite	ne
 8014156:	8018      	strhne	r0, [r3, #0]
 8014158:	6018      	streq	r0, [r3, #0]
 801415a:	e7e6      	b.n	801412a <_scanf_i+0x1aa>
 801415c:	2001      	movs	r0, #1
 801415e:	e7ed      	b.n	801413c <_scanf_i+0x1bc>
 8014160:	08014968 	.word	0x08014968
 8014164:	080142e9 	.word	0x080142e9
 8014168:	08011ad1 	.word	0x08011ad1
 801416c:	08014ffe 	.word	0x08014ffe

08014170 <_read_r>:
 8014170:	b538      	push	{r3, r4, r5, lr}
 8014172:	4d07      	ldr	r5, [pc, #28]	; (8014190 <_read_r+0x20>)
 8014174:	4604      	mov	r4, r0
 8014176:	4608      	mov	r0, r1
 8014178:	4611      	mov	r1, r2
 801417a:	2200      	movs	r2, #0
 801417c:	602a      	str	r2, [r5, #0]
 801417e:	461a      	mov	r2, r3
 8014180:	f7ef fae4 	bl	800374c <_read>
 8014184:	1c43      	adds	r3, r0, #1
 8014186:	d102      	bne.n	801418e <_read_r+0x1e>
 8014188:	682b      	ldr	r3, [r5, #0]
 801418a:	b103      	cbz	r3, 801418e <_read_r+0x1e>
 801418c:	6023      	str	r3, [r4, #0]
 801418e:	bd38      	pop	{r3, r4, r5, pc}
 8014190:	20005e30 	.word	0x20005e30

08014194 <__sccl>:
 8014194:	b570      	push	{r4, r5, r6, lr}
 8014196:	780b      	ldrb	r3, [r1, #0]
 8014198:	4604      	mov	r4, r0
 801419a:	2b5e      	cmp	r3, #94	; 0x5e
 801419c:	bf0b      	itete	eq
 801419e:	784b      	ldrbeq	r3, [r1, #1]
 80141a0:	1c48      	addne	r0, r1, #1
 80141a2:	1c88      	addeq	r0, r1, #2
 80141a4:	2200      	movne	r2, #0
 80141a6:	bf08      	it	eq
 80141a8:	2201      	moveq	r2, #1
 80141aa:	1e61      	subs	r1, r4, #1
 80141ac:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80141b0:	f801 2f01 	strb.w	r2, [r1, #1]!
 80141b4:	42a9      	cmp	r1, r5
 80141b6:	d1fb      	bne.n	80141b0 <__sccl+0x1c>
 80141b8:	b90b      	cbnz	r3, 80141be <__sccl+0x2a>
 80141ba:	3801      	subs	r0, #1
 80141bc:	bd70      	pop	{r4, r5, r6, pc}
 80141be:	f082 0201 	eor.w	r2, r2, #1
 80141c2:	54e2      	strb	r2, [r4, r3]
 80141c4:	4605      	mov	r5, r0
 80141c6:	4628      	mov	r0, r5
 80141c8:	f810 1b01 	ldrb.w	r1, [r0], #1
 80141cc:	292d      	cmp	r1, #45	; 0x2d
 80141ce:	d006      	beq.n	80141de <__sccl+0x4a>
 80141d0:	295d      	cmp	r1, #93	; 0x5d
 80141d2:	d0f3      	beq.n	80141bc <__sccl+0x28>
 80141d4:	b909      	cbnz	r1, 80141da <__sccl+0x46>
 80141d6:	4628      	mov	r0, r5
 80141d8:	e7f0      	b.n	80141bc <__sccl+0x28>
 80141da:	460b      	mov	r3, r1
 80141dc:	e7f1      	b.n	80141c2 <__sccl+0x2e>
 80141de:	786e      	ldrb	r6, [r5, #1]
 80141e0:	2e5d      	cmp	r6, #93	; 0x5d
 80141e2:	d0fa      	beq.n	80141da <__sccl+0x46>
 80141e4:	42b3      	cmp	r3, r6
 80141e6:	dcf8      	bgt.n	80141da <__sccl+0x46>
 80141e8:	3502      	adds	r5, #2
 80141ea:	4619      	mov	r1, r3
 80141ec:	3101      	adds	r1, #1
 80141ee:	428e      	cmp	r6, r1
 80141f0:	5462      	strb	r2, [r4, r1]
 80141f2:	dcfb      	bgt.n	80141ec <__sccl+0x58>
 80141f4:	1af1      	subs	r1, r6, r3
 80141f6:	3901      	subs	r1, #1
 80141f8:	1c58      	adds	r0, r3, #1
 80141fa:	42b3      	cmp	r3, r6
 80141fc:	bfa8      	it	ge
 80141fe:	2100      	movge	r1, #0
 8014200:	1843      	adds	r3, r0, r1
 8014202:	e7e0      	b.n	80141c6 <__sccl+0x32>

08014204 <_strtoul_l.constprop.0>:
 8014204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014208:	4f36      	ldr	r7, [pc, #216]	; (80142e4 <_strtoul_l.constprop.0+0xe0>)
 801420a:	4686      	mov	lr, r0
 801420c:	460d      	mov	r5, r1
 801420e:	4628      	mov	r0, r5
 8014210:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014214:	5de6      	ldrb	r6, [r4, r7]
 8014216:	f016 0608 	ands.w	r6, r6, #8
 801421a:	d1f8      	bne.n	801420e <_strtoul_l.constprop.0+0xa>
 801421c:	2c2d      	cmp	r4, #45	; 0x2d
 801421e:	d12f      	bne.n	8014280 <_strtoul_l.constprop.0+0x7c>
 8014220:	782c      	ldrb	r4, [r5, #0]
 8014222:	2601      	movs	r6, #1
 8014224:	1c85      	adds	r5, r0, #2
 8014226:	2b00      	cmp	r3, #0
 8014228:	d057      	beq.n	80142da <_strtoul_l.constprop.0+0xd6>
 801422a:	2b10      	cmp	r3, #16
 801422c:	d109      	bne.n	8014242 <_strtoul_l.constprop.0+0x3e>
 801422e:	2c30      	cmp	r4, #48	; 0x30
 8014230:	d107      	bne.n	8014242 <_strtoul_l.constprop.0+0x3e>
 8014232:	7828      	ldrb	r0, [r5, #0]
 8014234:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8014238:	2858      	cmp	r0, #88	; 0x58
 801423a:	d149      	bne.n	80142d0 <_strtoul_l.constprop.0+0xcc>
 801423c:	786c      	ldrb	r4, [r5, #1]
 801423e:	2310      	movs	r3, #16
 8014240:	3502      	adds	r5, #2
 8014242:	f04f 38ff 	mov.w	r8, #4294967295
 8014246:	2700      	movs	r7, #0
 8014248:	fbb8 f8f3 	udiv	r8, r8, r3
 801424c:	fb03 f908 	mul.w	r9, r3, r8
 8014250:	ea6f 0909 	mvn.w	r9, r9
 8014254:	4638      	mov	r0, r7
 8014256:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801425a:	f1bc 0f09 	cmp.w	ip, #9
 801425e:	d814      	bhi.n	801428a <_strtoul_l.constprop.0+0x86>
 8014260:	4664      	mov	r4, ip
 8014262:	42a3      	cmp	r3, r4
 8014264:	dd22      	ble.n	80142ac <_strtoul_l.constprop.0+0xa8>
 8014266:	2f00      	cmp	r7, #0
 8014268:	db1d      	blt.n	80142a6 <_strtoul_l.constprop.0+0xa2>
 801426a:	4580      	cmp	r8, r0
 801426c:	d31b      	bcc.n	80142a6 <_strtoul_l.constprop.0+0xa2>
 801426e:	d101      	bne.n	8014274 <_strtoul_l.constprop.0+0x70>
 8014270:	45a1      	cmp	r9, r4
 8014272:	db18      	blt.n	80142a6 <_strtoul_l.constprop.0+0xa2>
 8014274:	fb00 4003 	mla	r0, r0, r3, r4
 8014278:	2701      	movs	r7, #1
 801427a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801427e:	e7ea      	b.n	8014256 <_strtoul_l.constprop.0+0x52>
 8014280:	2c2b      	cmp	r4, #43	; 0x2b
 8014282:	bf04      	itt	eq
 8014284:	782c      	ldrbeq	r4, [r5, #0]
 8014286:	1c85      	addeq	r5, r0, #2
 8014288:	e7cd      	b.n	8014226 <_strtoul_l.constprop.0+0x22>
 801428a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801428e:	f1bc 0f19 	cmp.w	ip, #25
 8014292:	d801      	bhi.n	8014298 <_strtoul_l.constprop.0+0x94>
 8014294:	3c37      	subs	r4, #55	; 0x37
 8014296:	e7e4      	b.n	8014262 <_strtoul_l.constprop.0+0x5e>
 8014298:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801429c:	f1bc 0f19 	cmp.w	ip, #25
 80142a0:	d804      	bhi.n	80142ac <_strtoul_l.constprop.0+0xa8>
 80142a2:	3c57      	subs	r4, #87	; 0x57
 80142a4:	e7dd      	b.n	8014262 <_strtoul_l.constprop.0+0x5e>
 80142a6:	f04f 37ff 	mov.w	r7, #4294967295
 80142aa:	e7e6      	b.n	801427a <_strtoul_l.constprop.0+0x76>
 80142ac:	2f00      	cmp	r7, #0
 80142ae:	da07      	bge.n	80142c0 <_strtoul_l.constprop.0+0xbc>
 80142b0:	2322      	movs	r3, #34	; 0x22
 80142b2:	f8ce 3000 	str.w	r3, [lr]
 80142b6:	f04f 30ff 	mov.w	r0, #4294967295
 80142ba:	b932      	cbnz	r2, 80142ca <_strtoul_l.constprop.0+0xc6>
 80142bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80142c0:	b106      	cbz	r6, 80142c4 <_strtoul_l.constprop.0+0xc0>
 80142c2:	4240      	negs	r0, r0
 80142c4:	2a00      	cmp	r2, #0
 80142c6:	d0f9      	beq.n	80142bc <_strtoul_l.constprop.0+0xb8>
 80142c8:	b107      	cbz	r7, 80142cc <_strtoul_l.constprop.0+0xc8>
 80142ca:	1e69      	subs	r1, r5, #1
 80142cc:	6011      	str	r1, [r2, #0]
 80142ce:	e7f5      	b.n	80142bc <_strtoul_l.constprop.0+0xb8>
 80142d0:	2430      	movs	r4, #48	; 0x30
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d1b5      	bne.n	8014242 <_strtoul_l.constprop.0+0x3e>
 80142d6:	2308      	movs	r3, #8
 80142d8:	e7b3      	b.n	8014242 <_strtoul_l.constprop.0+0x3e>
 80142da:	2c30      	cmp	r4, #48	; 0x30
 80142dc:	d0a9      	beq.n	8014232 <_strtoul_l.constprop.0+0x2e>
 80142de:	230a      	movs	r3, #10
 80142e0:	e7af      	b.n	8014242 <_strtoul_l.constprop.0+0x3e>
 80142e2:	bf00      	nop
 80142e4:	08014c9f 	.word	0x08014c9f

080142e8 <_strtoul_r>:
 80142e8:	f7ff bf8c 	b.w	8014204 <_strtoul_l.constprop.0>

080142ec <__submore>:
 80142ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142f0:	460c      	mov	r4, r1
 80142f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80142f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80142f8:	4299      	cmp	r1, r3
 80142fa:	d11d      	bne.n	8014338 <__submore+0x4c>
 80142fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014300:	f7fc fcae 	bl	8010c60 <_malloc_r>
 8014304:	b918      	cbnz	r0, 801430e <__submore+0x22>
 8014306:	f04f 30ff 	mov.w	r0, #4294967295
 801430a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801430e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014312:	63a3      	str	r3, [r4, #56]	; 0x38
 8014314:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8014318:	6360      	str	r0, [r4, #52]	; 0x34
 801431a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801431e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8014322:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8014326:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801432a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801432e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8014332:	6020      	str	r0, [r4, #0]
 8014334:	2000      	movs	r0, #0
 8014336:	e7e8      	b.n	801430a <__submore+0x1e>
 8014338:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801433a:	0077      	lsls	r7, r6, #1
 801433c:	463a      	mov	r2, r7
 801433e:	f000 f85d 	bl	80143fc <_realloc_r>
 8014342:	4605      	mov	r5, r0
 8014344:	2800      	cmp	r0, #0
 8014346:	d0de      	beq.n	8014306 <__submore+0x1a>
 8014348:	eb00 0806 	add.w	r8, r0, r6
 801434c:	4601      	mov	r1, r0
 801434e:	4632      	mov	r2, r6
 8014350:	4640      	mov	r0, r8
 8014352:	f7fc fc03 	bl	8010b5c <memcpy>
 8014356:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801435a:	f8c4 8000 	str.w	r8, [r4]
 801435e:	e7e9      	b.n	8014334 <__submore+0x48>

08014360 <_fstat_r>:
 8014360:	b538      	push	{r3, r4, r5, lr}
 8014362:	4d07      	ldr	r5, [pc, #28]	; (8014380 <_fstat_r+0x20>)
 8014364:	2300      	movs	r3, #0
 8014366:	4604      	mov	r4, r0
 8014368:	4608      	mov	r0, r1
 801436a:	4611      	mov	r1, r2
 801436c:	602b      	str	r3, [r5, #0]
 801436e:	f7ef fa32 	bl	80037d6 <_fstat>
 8014372:	1c43      	adds	r3, r0, #1
 8014374:	d102      	bne.n	801437c <_fstat_r+0x1c>
 8014376:	682b      	ldr	r3, [r5, #0]
 8014378:	b103      	cbz	r3, 801437c <_fstat_r+0x1c>
 801437a:	6023      	str	r3, [r4, #0]
 801437c:	bd38      	pop	{r3, r4, r5, pc}
 801437e:	bf00      	nop
 8014380:	20005e30 	.word	0x20005e30

08014384 <_isatty_r>:
 8014384:	b538      	push	{r3, r4, r5, lr}
 8014386:	4d06      	ldr	r5, [pc, #24]	; (80143a0 <_isatty_r+0x1c>)
 8014388:	2300      	movs	r3, #0
 801438a:	4604      	mov	r4, r0
 801438c:	4608      	mov	r0, r1
 801438e:	602b      	str	r3, [r5, #0]
 8014390:	f7ef fa31 	bl	80037f6 <_isatty>
 8014394:	1c43      	adds	r3, r0, #1
 8014396:	d102      	bne.n	801439e <_isatty_r+0x1a>
 8014398:	682b      	ldr	r3, [r5, #0]
 801439a:	b103      	cbz	r3, 801439e <_isatty_r+0x1a>
 801439c:	6023      	str	r3, [r4, #0]
 801439e:	bd38      	pop	{r3, r4, r5, pc}
 80143a0:	20005e30 	.word	0x20005e30

080143a4 <__ascii_mbtowc>:
 80143a4:	b082      	sub	sp, #8
 80143a6:	b901      	cbnz	r1, 80143aa <__ascii_mbtowc+0x6>
 80143a8:	a901      	add	r1, sp, #4
 80143aa:	b142      	cbz	r2, 80143be <__ascii_mbtowc+0x1a>
 80143ac:	b14b      	cbz	r3, 80143c2 <__ascii_mbtowc+0x1e>
 80143ae:	7813      	ldrb	r3, [r2, #0]
 80143b0:	600b      	str	r3, [r1, #0]
 80143b2:	7812      	ldrb	r2, [r2, #0]
 80143b4:	1e10      	subs	r0, r2, #0
 80143b6:	bf18      	it	ne
 80143b8:	2001      	movne	r0, #1
 80143ba:	b002      	add	sp, #8
 80143bc:	4770      	bx	lr
 80143be:	4610      	mov	r0, r2
 80143c0:	e7fb      	b.n	80143ba <__ascii_mbtowc+0x16>
 80143c2:	f06f 0001 	mvn.w	r0, #1
 80143c6:	e7f8      	b.n	80143ba <__ascii_mbtowc+0x16>

080143c8 <memmove>:
 80143c8:	4288      	cmp	r0, r1
 80143ca:	b510      	push	{r4, lr}
 80143cc:	eb01 0402 	add.w	r4, r1, r2
 80143d0:	d902      	bls.n	80143d8 <memmove+0x10>
 80143d2:	4284      	cmp	r4, r0
 80143d4:	4623      	mov	r3, r4
 80143d6:	d807      	bhi.n	80143e8 <memmove+0x20>
 80143d8:	1e43      	subs	r3, r0, #1
 80143da:	42a1      	cmp	r1, r4
 80143dc:	d008      	beq.n	80143f0 <memmove+0x28>
 80143de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80143e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80143e6:	e7f8      	b.n	80143da <memmove+0x12>
 80143e8:	4402      	add	r2, r0
 80143ea:	4601      	mov	r1, r0
 80143ec:	428a      	cmp	r2, r1
 80143ee:	d100      	bne.n	80143f2 <memmove+0x2a>
 80143f0:	bd10      	pop	{r4, pc}
 80143f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80143f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80143fa:	e7f7      	b.n	80143ec <memmove+0x24>

080143fc <_realloc_r>:
 80143fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014400:	4680      	mov	r8, r0
 8014402:	4614      	mov	r4, r2
 8014404:	460e      	mov	r6, r1
 8014406:	b921      	cbnz	r1, 8014412 <_realloc_r+0x16>
 8014408:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801440c:	4611      	mov	r1, r2
 801440e:	f7fc bc27 	b.w	8010c60 <_malloc_r>
 8014412:	b92a      	cbnz	r2, 8014420 <_realloc_r+0x24>
 8014414:	f7fc fbb8 	bl	8010b88 <_free_r>
 8014418:	4625      	mov	r5, r4
 801441a:	4628      	mov	r0, r5
 801441c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014420:	f000 f828 	bl	8014474 <_malloc_usable_size_r>
 8014424:	4284      	cmp	r4, r0
 8014426:	4607      	mov	r7, r0
 8014428:	d802      	bhi.n	8014430 <_realloc_r+0x34>
 801442a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801442e:	d812      	bhi.n	8014456 <_realloc_r+0x5a>
 8014430:	4621      	mov	r1, r4
 8014432:	4640      	mov	r0, r8
 8014434:	f7fc fc14 	bl	8010c60 <_malloc_r>
 8014438:	4605      	mov	r5, r0
 801443a:	2800      	cmp	r0, #0
 801443c:	d0ed      	beq.n	801441a <_realloc_r+0x1e>
 801443e:	42bc      	cmp	r4, r7
 8014440:	4622      	mov	r2, r4
 8014442:	4631      	mov	r1, r6
 8014444:	bf28      	it	cs
 8014446:	463a      	movcs	r2, r7
 8014448:	f7fc fb88 	bl	8010b5c <memcpy>
 801444c:	4631      	mov	r1, r6
 801444e:	4640      	mov	r0, r8
 8014450:	f7fc fb9a 	bl	8010b88 <_free_r>
 8014454:	e7e1      	b.n	801441a <_realloc_r+0x1e>
 8014456:	4635      	mov	r5, r6
 8014458:	e7df      	b.n	801441a <_realloc_r+0x1e>

0801445a <__ascii_wctomb>:
 801445a:	b149      	cbz	r1, 8014470 <__ascii_wctomb+0x16>
 801445c:	2aff      	cmp	r2, #255	; 0xff
 801445e:	bf85      	ittet	hi
 8014460:	238a      	movhi	r3, #138	; 0x8a
 8014462:	6003      	strhi	r3, [r0, #0]
 8014464:	700a      	strbls	r2, [r1, #0]
 8014466:	f04f 30ff 	movhi.w	r0, #4294967295
 801446a:	bf98      	it	ls
 801446c:	2001      	movls	r0, #1
 801446e:	4770      	bx	lr
 8014470:	4608      	mov	r0, r1
 8014472:	4770      	bx	lr

08014474 <_malloc_usable_size_r>:
 8014474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014478:	1f18      	subs	r0, r3, #4
 801447a:	2b00      	cmp	r3, #0
 801447c:	bfbc      	itt	lt
 801447e:	580b      	ldrlt	r3, [r1, r0]
 8014480:	18c0      	addlt	r0, r0, r3
 8014482:	4770      	bx	lr

08014484 <_init>:
 8014484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014486:	bf00      	nop
 8014488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801448a:	bc08      	pop	{r3}
 801448c:	469e      	mov	lr, r3
 801448e:	4770      	bx	lr

08014490 <_fini>:
 8014490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014492:	bf00      	nop
 8014494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014496:	bc08      	pop	{r3}
 8014498:	469e      	mov	lr, r3
 801449a:	4770      	bx	lr
